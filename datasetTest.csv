type,id,apidoc_Text
"package","org/eclipse/jface/dialogs","\nProvides support for dialogs.\n<h2>\nPackage Specification</h2>\nA dialog is a specialized window, typically consisting of a dialog area\nand a button bar, designed for narrow-focussed communication with the user.\n<p>The dialog framework consists of an abstract base class (<tt>Dialog</tt>),\nalong with more concrete dialog subclasses for displaying messages (<tt>MessageDialog</tt>),\nsoliciting text input (<tt>InputDialog</tt>), and displaying progress during\na long-running operation (<tt>ProgressMonitorDialog</tt>).\n<p>Dialog stores (<tt>IDialogStore</tt>, <tt>DialogStore</tt>) provide\na general framework for organizing a dialog's settings into key/value pairs.\nMulti-page dialogs are made easier through the use of dialog pages (<tt>IDialogPage</tt>,\n<tt>DialogPage</tt>).\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n<br>&nbsp;\n<br>&nbsp;\n"
"package","org/eclipse/jface/layout","\nProvides support for layout generation. \n<h2>\nPackage Specification</h2>\n<p> This package provides classes that can be used to generate layouts.\n"
"package","org/eclipse/jface/resource","\nProvides support for managing resources such as SWT\nfonts and images.\n<h2>\nPackage Specification</h2>\nThis package contains support for managing resources, including:\n<ul>\n<li>\nfont registries (<tt>FontRegistry</tt>) - for hanging on to the SWT font\nobjects needed by an application</li>\n\n<li>\ncolor registries (<tt>ColorRegistry</tt>) - for hanging on to the SWT color \nobjects needed by an application</li>\n\n<li>\nimage registries (<tt>ImageRegistry</tt>) - for hanging on to the SWT image\nobjects needed by an application</li>\n\n<li>\nimage descriptors (<tt>ImageDescriptor</tt>) - surrogate object for creating\nSWT images</li>\n\n<li>\nstring conversion (<tt>StringConverter</tt>) - for parsing property files</li>\n</ul>\nThe JFace resources module is an independent JFace module requiring a basic\nknowledge of SWT and the JFace property change event mechanism. Familiarity\nwith other JFace modules is not required.\n<p>Image descriptors are objects that knows how to create an image on demand.\nThey serve as a lightweight representation of images in situations where\nno SWT display exists yet, and are used mainly in conjunction with image\nregistries. This package contains the image descriptor framework, which\nis a simple hierarchy rooted at the abstract class <tt>ImageDescriptor</tt>.\nThe framework includes abstract subclasses for composing images (<tt>CompositeImageDescriptor</tt>)\nas well as a ready-made concrete subclass for loading images from files\n(<tt>FileImageDescriptor</tt>).\n<p>The class <tt>JFaceResources</tt> maintains global state on behalf of\nJFace itself consisting of JFace's own image registry, font registry, resource\nbundle, and preference store.\n<br>&nbsp;\n"
"package","org/eclipse/jface/operation","\nProvides JFace support for long-running operations.\n<h2>\nPackage Specification</h2>\nLong-running operations must be dealt with specially in order to keep the\nUI helpful and responsive. Typically this involves temporarily disabling\nmost controls and displaying a busy cursor and progress indicator; while\nthe operation is in progress, the only requests that will be accepted will\nbe ones to cancel the operation.\n<p>The <tt>IRunnableWithProgress</tt> interface should be implemented by\nany class whose instances are intended to be executed as long-running operations.\nThese objects can then be run in any runnable context (<tt>IRunnableContext</tt>),\nincluding such standard JFace UI components as application windows (<tt>ApplicationWindow</tt>),\nwizard dialogs (<tt>WizardDialog</tt>), and progress monitor dialogs (<tt>ProgressMonitorDialog</tt>).\nThe utility class <tt>ModalContext</tt> defines the basic mechanism and\nUI event loop for modal operations.\n"
"package","org/eclipse/jface/contentassist","\nProvides a content assist add-on for implementors of <tt>IContentAssistSubjectControl</tt>.\nContent assist supports the user in writing&nbsp; by proposing context\nsensitive completions at a given position. A completion can also\nbe a incomplete in itself and content assist provides means to deal with\nnested completions.\n<h2>\nPackage Specification</h2>\n<tt>ISubjectControlContentAssistant</tt> defines the concept of the content assist add-on.\nIt collaborates with content type specific completion processors (<tt>ISubjectControlContentAssistProcessor</tt>)\nin order to generate completion proposals (<tt>ICompletionProposal</tt>)\nvalid at the current document position. The package provides a default\nimplementation <tt>SubjectControlContentAssistant</tt> which completely defines and implements\nthe UI and the control flow for content assist.\n<br>\n<br>\n<strong>Deprecated, as of 3.2, replaced by Platform UI's field assist support</strong>\n"
"package","org/eclipse/jface/preference","\nProvides a framework for preferences.\n<h2>\nPackage Specification</h2>\nA <b>preference manager</b> (class <tt>PreferenceManager</tt>) maintains\na tree of <b>preference nodes</b>. Preferences are presented to the end\nuser in a <b>preference dialog</b> consisting of <b>preference pages</b>.\nA preference page consists of multiple preference fields, which can be\ndisplayed and modified though <b>field editors</b>. The framework contains\nan abstract base class for preference dialogs (<tt>PreferenceDialog</tt>),\nand an abstract preference page class (<tt>FieldEditorPreferencePage</tt>)\nfor hosting these field editors.\n<p>The individual preference values are maintained in a <b>preference store</b>\n(<tt>IPreferenceStore</tt>). Each preference has a current value and a\ndefault value use to (re-)initialize it. The framework provides a concrete\npreference store implementation (<tt>PreferenceStore</tt>) based on an\ninternal <tt>java.util.Properties</tt> object, with support for persisting\nthe non-default preference values to files or streams.\n<p>A field editor presents the value of a single preference to the end\nuser. The value is loaded from the preference store; if modified by the\nend user, the value is validated and eventually stored back to the preference\nstore.\n<p>This package contains ready-to-use field editors for various types of\npreferences:\n<ul>\n<li>\n<tt>BooleanFieldEditor</tt> - booleans</li>\n\n<li>\n<tt>IntegerFieldEditor</tt> - integers</li>\n\n<li>\n<tt>StringFieldEditor</tt> - text strings</li>\n\n<li>\n<tt>RadioGroupFieldEditor</tt> - enumerations</li>\n\n<li>\n<tt>ColorFieldEditor</tt> - RGB colors</li>\n\n<li>\n<tt>FontFieldEditor</tt> - fonts</li>\n\n<li>\n<tt>DirectoryFieldEditor</tt> - directories</li>\n\n<li>\n<tt>FileFieldEditor</tt> - files</li>\n\n<li>\n<tt>PathEditor</tt> - paths</li>\n</ul>\nAll field editors are subclasses of the abstract base class <tt>FieldEditor</tt>;\nthe framework allows new kinds of field editors to be defined by subclassing\nthis class or one of its subclasses.\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n"
"package","org/eclipse/jface/wizard","\nProvides a framework for wizards.\n<h2>\nPackage Specification</h2>\nA wizard dialog is a specialized window for walking the end user through\na sequence of steps; each step is presented on a separate page.\n<p>At the most abstract level, the protocol is given by 3 interfaces:\n<ul>\n<li>\n<tt>IWizard</tt> - a wizard consisting of several wizard pages</li>\n\n<li>\n<tt>IWizardPage</tt> - an individual wizard page</li>\n\n<li>\n<tt>IWizardContainer</tt> - the outside world from the point of view of\na wizard</li>\n</ul>\nA wizard is any object implementing <tt>IWizard</tt>. The abstract base\nclass <tt>Wizard</tt> is provided as a starting point; it is simpler to\nsubclass <tt>Wizard</tt> than to implement <tt>IWizard</tt> from scratch.\nThe main responsibility of a <tt>Wizard</tt> subclass is doing the real\nwork when the wizard finishes.\n<p>Similarly, a wizard page is any object implementing <tt>IWizardPage</tt>.\nThe abstract base class <tt>WizardPage</tt> is provided as a starting point.\nThe main responsibility of a <tt>WizardPage</tt> subclass is providing\nthe SWT controls and the backing logic for a single wizard page.\n<p><tt>WizardDialog</tt> is a ready-to-use JFace dialog that is instantiated\nwith a wizard and acts as the wizard's container. This dialog has a standard\nlayout: an area at the top containing the wizard's title, description,\nand image; the actual wizard page appears in the middle; below it is a\nprogress indicator; and at the bottom is an area with a message line and\na button bar containing Next, Back, Finish, Cancel, and Help buttons.\n<p><tt>WizardSelectionPage</tt>, a special abstract subclass of <tt>WizardPage</tt>,\nallows whole other wizards to be connected to a root page.\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n"
"package","org/eclipse/jface/internal/text",""
"package","org/eclipse/jface/internal/text/revisions","\n<p>\nInternal classes and helpers to implement the revision model and its UI presentation. See\nthe <tt><a href="../../../text/revisions/package.html">org.eclipse.jface.text.revisions</a></tt>\npackage for the API classes implementing the revision model.\n</p>\nContains everything needed to:\n<ul>\n  <li>paint revision information in the vertical ruler</li>\n  <li>adapt the revision information to (quick) diff scripts</li>\n</ul>\n<p>\nThis package is internal and may be subject to change without notice.\n</p>\n"
"package","org/eclipse/jface/internal/text/link/contentassist","\nThis package is a modified copy of <code>org.eclipse.jface.text.contentassist</code> that supports the linked mode proposals.\nThis package is internal and may disappear if the changes are merged with the API content assist package. Subject to change without notice.\n"
"package","org/eclipse/jface/internal/text/html",""
"package","org/eclipse/jface/internal/text/source","\n<p>\nInternal support classes and helpers for the <tt>org.eclipse.jface.text.source</tt> package.\n"
"method","org/apache/commons/collections/ListUtils/subtract/List;List"," Subtracts all elements in the second list from the first list,\n placing the results in a new list.\n <p>\n This differs from {@link List#removeAll(Collection)} in that\n cardinality is respected; if <Code>list1</Code> contains two\n occurrences of <Code>null</Code> and <Code>list2</Code> only\n contains one occurrence, then the returned list will still contain\n one occurrence.\n\n @param list1  the list to subtract from\n @param list2  the list to subtract\n @return  a new list containing the results\n @throws NullPointerException if either list is null\n"
"method","org/apache/commons/collections/ListUtils/subtract/List;List"," Subtracts all elements in the second list from the first list,\n placing the results in a new list.\n <p>\n This differs from {@link List#removeAll(Collection)} in that\n cardinality is respected; if <Code>list1</Code> contains two\n occurrences of <Code>null</Code> and <Code>list2</Code> only\n contains one occurrence, then the returned list will still contain\n one occurrence.\n\n @param list1  the list to subtract from\n @param list2  the list to subtract\n @return  a new list containing the results\n @throws NullPointerException if either list is null\n"