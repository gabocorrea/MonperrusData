"\nProvides support for dialogs.\n<h2>\nPackage Specification</h2>\nA dialog is a specialized window, typically consisting of a dialog area\nand a button bar, designed for narrow-focussed communication with the user.\n<p>The dialog framework consists of an abstract base class (<tt>Dialog</tt>),\nalong with more concrete dialog subclasses for displaying messages (<tt>MessageDialog</tt>),\nsoliciting text input (<tt>InputDialog</tt>), and displaying progress during\na long-running operation (<tt>ProgressMonitorDialog</tt>).\n<p>Dialog stores (<tt>IDialogStore</tt>, <tt>DialogStore</tt>) provide\na general framework for organizing a dialog's settings into key/value pairs.\nMulti-page dialogs are made easier through the use of dialog pages (<tt>IDialogPage</tt>,\n<tt>DialogPage</tt>).\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n<br>&nbsp;\n<br>&nbsp;\n"
" A <code>TrayDialog</code> is a specialized <code>Dialog</code> that can contain\n a tray on its side. The tray's content is provided as a <code>DialogTray</code>.\n <p>\n It is recommended to subclass this class instead of <code>Dialog</code> in all\n cases except where the dialog should never show a tray. For example, dialogs\n which are very short, simple, and quick to dismiss (e.g. a message dialog with\n an OK button) should subclass <code>Dialog</code>.\n </p>\n <p>\n Note: Trays are not supported on dialogs that use a custom layout on the <code>\n Shell</code> by overriding <code>Window#getLayout()</code>.\n </p>\n \n @see org.eclipse.jface.dialogs.DialogTray\n @see org.eclipse.jface.window.Window#getLayout()\n @since 3.2\n"
" Closes this dialog's tray, disposing its widgets.\n \n @throws IllegalStateException if the tray was not open\n"
""
""
" Creates a new help control that provides access to context help.\n <p>\n The <code>TrayDialog</code> implementation of this method creates\n the control, registers it for selection events including selection,\n Note that the parent's layout is assumed to be a <code>GridLayout</code>\n and the number of columns in this layout is incremented. Subclasses may\n override.\n </p>\n \n @param parent the parent composite\n @return the help control\n"
" Returns whether or not context help is available for this dialog. This\n can affect whether or not the dialog will display additional help\n mechanisms such as a help control in the button bar.\n \n @return whether or not context help is available for this dialog\n"
" The tray dialog's default layout is a modified version of the default\n <code>Window</code> layout that can accomodate a tray, however it still\n conforms to the description of the <code>Window</code> default layout.\n <p>\n Note: Trays may not be supported with all custom layouts on the dialog's\n Shell. To avoid problems, use a single outer <code>Composite</code> for\n your dialog area, and set your custom layout on that <code>Composite</code>.\n </p>\n \n @see org.eclipse.jface.window.Window#getLayout()\n @return a newly created layout or <code>null</code> for no layout\n"
" Returns the tray currently shown in the dialog, or <code>null</code>\n if there is no tray.\n \n @return the dialog's current tray, or <code>null</code> if there is none\n"
" Constructs the tray's widgets and displays the tray in this dialog. The\n dialog's size will be adjusted to accomodate the tray.\n \n @param tray the tray to show in this dialog\n @throws IllegalStateException if the dialog already has a tray open\n @throws UnsupportedOperationException if the dialog does not support trays,\n            for example if it uses a custom layout.\n"
" Sets whether or not context help is available for this dialog. This\n can affect whether or not the dialog will display additional help\n mechanisms such as a help control in the button bar.\n \n @param helpAvailable whether or not context help is available for the dialog\n"
" Tests if dialogs that have help control should show it\n all the time or only when explicitly requested for\n each dialog instance.\n \n @return <code>true</code> if dialogs that support help\n control should show it by default, <code>false</code> otherwise.\n @since 3.2\n"
" Sets whether JFace dialogs that support help control should\n show the control by default. If set to <code>false</code>, \n help control can still be shown on a per-dialog basis.\n \n @param helpAvailable <code>true</code> to show the help\n control, <code>false</code> otherwise.\n @since 3.2\n"
" Creates a tray dialog instance. Note that the window will have no visual\n representation (no widgets) until it is told to open.\n \n @param shell the parent shell, or <code>null</code> to create a top-level shell\n"
" IDialogConstants is the interface for common dialog strings and ids\n used throughout JFace.\n It is recommended that you use these labels and ids whereever \n for consistency with the JFace dialogs.\n"
" Button id for an "Ok" button (value 0).\n"
" Button id for a "Cancel" button (value 1).\n"
" Button id for a "Yes" button (value 2).\n"
" Button id for a "No" button (value 3).\n"
" Button id for a "Yes to All" button (value 4).\n"
" Button id for a "Skip" button (value 5).\n"
" Button id for a "Stop" button (value 6).\n"
" Button id for an "Abort" button (value 7).\n"
" Button id for a "Retry" button (value 8).\n"
" Button id for an "Ignore" button (value 9).\n"
" Button id for a "Proceed" button (value 10).\n"
" Button id for an "Open" button (value 11).\n"
" Button id for a "Close" button (value 12).\n"
" Button id for a "Details" button (value 13).\n"
" Button id for a "Back" button (value 14).\n"
" Button id for a "Next" button (value 15).\n"
" Button id for a "Finish" button (value 16).\n"
" Button id for a "Help" button (value 17).\n"
" Button id for a "Select All" button (value 18).\n"
" Button id for a "Deselect All" button (value 19).\n"
" Button id for a "Select types" button (value 20).\n"
" Button id for a "No to All" button (value 21).\n"
" Starting button id reserved for internal use by JFace (value 256). JFace\n classes make ids by adding to this number.\n"
" Starting button id reserved for use by clients of JFace (value 1024).\n Clients of JFace should make ids by adding to this number.\n"
" The label for OK buttons.\n"
" The label for cancel buttons.\n"
" The label for yes buttons.\n"
" The label for no buttons.\n"
" The label for not to all buttons.\n"
" The label for yes to all buttons.\n"
" The label for skip buttons.\n"
" The label for stop buttons.\n"
" The label for abort buttons.\n"
" The label for retry buttons.\n"
" The label for ignore buttons.\n"
" The label for proceed buttons.\n"
" The label for open buttons.\n"
" The label for close buttons.\n"
" The label for show details buttons.\n"
" The label for hide details buttons.\n"
" The label for back buttons.\n"
" The label for next buttons.\n"
" The label for finish buttons.\n"
" The label for help buttons.\n"
" Vertical margin in dialog units (value 7).\n"
" Vertical spacing in dialog units (value 4).\n"
" Horizontal margin in dialog units (value 7).\n"
" Horizontal spacing in dialog units (value 4).\n"
" Height of button bar in dialog units (value 25).\n"
" Left margin in dialog units (value 20).\n"
" Button margin in dialog units (value 4).\n"
" Button height in dialog units (value 14).\n \n @deprecated This constant is no longer in use.\n The button heights are now determined by the layout.\n"
" Button width in dialog units (value 61).\n"
" Indent in dialog units (value 21).\n"
" Small indent in dialog units (value 7).\n"
" Entry field width in dialog units (value 200).\n"
" Minimum width of message area in dialog units (value 300).\n"
" ControlAnimator provides a simple implementation to display or hide a control\n at the bottom of the parent composite. Other animations will be written as\n subclasses of this class. <p>\n Instances of this class can be created using an AnimatorFactory.\n \n @since 3.2\n"
" Displays or hides a control at the bottom of the parent composite\n and makes use of the control's SWT visible flag.<p>\n Subclasses should override this method.</p>\n \n @param visible <code>true</code> if the control should be shown, \n 		  and <code>false</code> otherwise.\n"
" Constructs a new ControlAnimator instance and passes along the\n control that will be displayed or hidden.\n \n @param control the control that will be displayed or hidden.\n"
"the control that will be displayed or hidden "
" A control for showing progress feedback for a long running operation. This\n control supports both determinate and indeterminate SWT progress bars. For\n indeterminate progress, we don't have to know the total amount of work in\n advance and no <code>worked</code> method needs to be called.\n"
" Initialize the progress bar to be animated.\n"
" Initialize the progress bar.\n \n @param max\n            The maximum value.\n"
" Progress is done.\n"
" Moves the progress indicator to the end.\n"
" Moves the progress indicator by the given amount of work units\n @param work the amount of work to increment by.\n"
" Show the receiver as showing an error.\n @since 3.4\n"
" Show the receiver as being paused.\n @since 3.4\n"
" Reset the progress bar to it's normal style.\n @since 3.4\n"
" Create a ProgressIndicator as a child under the given parent.\n \n @param parent\n            The widgets parent\n"
" Create a ProgressIndicator as a child under the given parent.\n \n @param parent\n            The widgets parent\n @param style the SWT style constants for progress monitors created \n 	by the receiver.\n @since 3.4\n"
" Minimal interface to a message provider. Used for dialog pages which can\n provide a message with an icon.\n \n @since 2.0\n"
" Returns the current message for this message provider.\n <p>\n A message provides instruction or information to the user.\n </p>\n \n @return the message, or <code>null</code> if none\n"
" Returns a value indicating if the message is a an information message, a\n warning message, or an error message.\n <p>\n Returns one of <code>NONE</code>,<code>INFORMATION</code>,\n <code>WARNING</code>, or <code>ERROR</code>.\n </p>\n \n @return the message type\n"
" Constant for a regular message (value 0).\n <p>\n Typically this indicates that the message should be shown without an\n icon.\n </p>\n"
" Constant for an info message (value 1).\n"
" Constant for a warning message (value 2).\n"
" Constant for an error message (value 3).\n"
" The IInputValidator is the interface for simple validators. \n @see org.eclipse.jface.dialogs.InputDialog\n"
" Validates the given string.  Returns an error message to display\n if the new text is invalid.  Returns <code>null</code> if there\n is no error.  Note that the empty string is not treated the same\n as <code>null</code>; it indicates an error state but with no message\n to display.\n \n @param newText the text to check for validity\n \n @return an error message or <code>null</code> if no error\n"
" A modal dialog that displays progress during a long running operation.\n <p>\n This concrete dialog class can be instantiated as is, or further subclassed\n as required.\n </p>\n <p>\n Typical usage is:\n \n <pre>\n  \n   \n    try {\n       IRunnableWithProgress op = ...;\n       new ProgressMonitorDialog(activeShell).run(true, true, op);\n    } catch (InvocationTargetException e) {\n       // handle exception\n    } catch (InterruptedException e) {\n       // handle cancelation\n    }\n    \n   \n </pre>\n \n </p>\n <p>\n Note that the ProgressMonitorDialog is not intended to be used with multiple\n runnables - this dialog should be discarded after completion of one\n IRunnableWithProgress and a new one instantiated for use by a second or\n sebsequent IRunnableWithProgress to ensure proper initialization.\n </p>\n <p>\n Note that not forking the process will result in it running in the UI which\n may starve the UI. The most obvious symptom of this problem is non\n responsiveness of the cancel button. If you are running within the UI Thread\n you should do the bulk of your work in another Thread to prevent starvation.\n It is recommended that fork is set to true in most cases.\n </p>\n"
" Clear blocked state from the receiver.\n"
" Set blocked state from the receiver.\n \n @param reason\n            IStatus that gives the details\n"
" The cancel button has been pressed.\n \n @since 3.0\n"
" The <code>ProgressMonitorDialog</code> implementation of this method\n only closes the dialog if there are no currently running runnables.\n"
" Clear the cursors in the dialog.\n \n @since 3.0\n"
""
""
" Creates the cancel button.\n \n @param parent\n            the parent composite\n @since 3.0\n"
""
""
" Returns the progress monitor to use for operations run in this progress\n dialog.\n \n @return the progress monitor\n"
" This implementation of IRunnableContext#run(boolean, boolean,\n IRunnableWithProgress) runs the given <code>IRunnableWithProgress</code>\n using the progress monitor for this progress dialog and blocks until the\n runnable has been run, regardless of the value of <code>fork</code>.\n The dialog is opened before the runnable is run, and closed after it\n completes. It is recommended that <code>fork</code> is set to true in\n most cases. If <code>fork</code> is set to <code>false</code>, the\n runnable will run in the UI thread and it is the runnable's\n responsibility to call <code>Display.readAndDispatch()</code> to ensure\n UI responsiveness.\n"
" Returns whether the dialog should be opened before the operation is run.\n Defaults to <code>true</code>\n \n @return <code>true</code> to open the dialog before run,\n         <code>false</code> to only create the dialog, but not open it\n @since 3.0\n"
" Sets whether the dialog should be opened before the operation is run.\n NOTE: Setting this to false and not forking a process may starve any\n asyncExec that tries to open the dialog later.\n \n @param openOnRun\n            <code>true</code> to open the dialog before run,\n            <code>false</code> to only create the dialog, but not open\n            it\n @since 3.0\n"
" Returns the nesting depth of running operations.\n \n @return the nesting depth of running operations\n @since 3.0\n"
" Increments the nesting depth of running operations.\n \n @since 3.0\n"
" Decrements the nesting depth of running operations.\n \n @since 3.0\n \n"
" Called just before the operation is run. Default behaviour is to open or\n create the dialog, based on the setting of <code>getOpenOnRun</code>,\n and increment the nesting depth.\n \n @since 3.0\n"
" Called just after the operation is run. Default behaviour is to decrement\n the nesting depth, and close the dialog.\n \n @since 3.0\n"
" Sets whether the progress dialog is cancelable or not.\n \n @param cancelable\n            <code>true</code> if the end user can cancel this progress\n            dialog, and <code>false</code> if it cannot be canceled\n"
" Helper to enable/disable Cancel button for this dialog.\n \n @param b\n            <code>true</code> to enable the cancel button, and\n            <code>false</code> to disable it\n @since 3.0\n"
""
""
" Creates a progress monitor dialog under the given shell. The dialog has a\n standard title and no image. <code>open</code> is non-blocking.\n \n @param parent\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n"
" The progress indicator control.\n"
" The label control for the task. Kept for backwards compatibility.\n"
" The label control for the subtask.\n"
" The Cancel button control.\n"
" Indicates whether the Cancel button is to be shown.\n"
" Indicates whether the Cancel button is to be enabled.\n"
" The cursor used in the cancel button;\n"
" A dialog to display one or more errors to the user, as contained in an\n <code>IStatus</code> object. If an error contains additional detailed\n information then a Details button is automatically supplied, which shows or\n hides an error details viewer when pressed by the user.\n \n <p>\n This dialog should be considered being a "local" way of error handling. It\n cannot be changed or replaced by "global" error handling facility (\n <code>org.eclipse.ui.statushandler.StatusManager</code>). If product defines\n its own way of handling errors, this error dialog may cause UI inconsistency,\n so until it is absolutely necessary, <code>StatusManager</code> should be\n used.\n </p>\n \n @see org.eclipse.core.runtime.IStatus\n"
""
""
""
" Create the details button if it should be included.\n \n @param parent\n            the parent composite\n @since 3.2\n"
" This implementation of the <code>Dialog</code> framework method creates\n and lays out a composite. Subclasses that require a different dialog area\n may either override this method, or call the <code>super</code>\n implementation and add controls to the created composite.\n \n Note:  Since 3.4, the created composite no longer grabs excess vertical space.\n See https://bugs.eclipse.org/bugs/show_bug.cgi?id=72489.\n If the old behavior is desired by subclasses, get the returned composite's\n layout data and set grabExcessVerticalSpace to true.\n"
""
""
" Create this dialog's drop-down list component. The list is displayed\n after the user presses details button. It is developer responsibility\n to display details button if and only if there is some content on \n drop down list. The visibility of the details button is controlled by\n {@link #shouldShowDetailsButton()}, which should also be overridden\n together with this method.\n \n @param parent\n            the parent composite\n @return the drop-down list component\n @see #shouldShowDetailsButton()\n"
" Extends <code>Window.open()</code>. Opens an error dialog to display\n the error. If you specified a mask to filter the displaying of these\n children, the error dialog will only be displayed if there is at least\n one child status matching the mask.\n"
" Opens an error dialog to display the given error. Use this method if the\n error object being displayed does not contain child items, or if you wish\n to display all such items without filtering.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param dialogTitle\n            the title to use for this dialog, or <code>null</code> to\n            indicate that the default title should be used\n @param message\n            the message to show in this dialog, or <code>null</code> to\n            indicate that the error's message should be shown as the\n            primary message\n @param status\n            the error to show to the user\n @return the code of the button that was pressed that resulted in this\n         dialog closing. This will be <code>Dialog.OK</code> if the OK\n         button was pressed, or <code>Dialog.CANCEL</code> if this\n         dialog's close window decoration or the ESC key was used.\n"
" Opens an error dialog to display the given error. Use this method if the\n error object being displayed contains child items <it>and </it> you wish\n to specify a mask which will be used to filter the displaying of these\n children. The error dialog will only be displayed if there is at least\n one child status matching the mask.\n \n @param parentShell\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the title to use for this dialog, or <code>null</code> to\n            indicate that the default title should be used\n @param message\n            the message to show in this dialog, or <code>null</code> to\n            indicate that the error's message should be shown as the\n            primary message\n @param status\n            the error to show to the user\n @param displayMask\n            the mask to use to filter the displaying of child items, as\n            per <code>IStatus.matches</code>\n @return the code of the button that was pressed that resulted in this\n         dialog closing. This will be <code>Dialog.OK</code> if the OK\n         button was pressed, or <code>Dialog.CANCEL</code> if this\n         dialog's close window decoration or the ESC key was used.\n @see org.eclipse.core.runtime.IStatus#matches(int)\n"
" Returns whether the given status object should be displayed.\n \n @param status\n            a status object\n @param mask\n            a mask as per <code>IStatus.matches</code>\n @return <code>true</code> if the given status should be displayed, and\n         <code>false</code> otherwise\n @see org.eclipse.core.runtime.IStatus#matches(int)\n"
""
" Show the details portion of the dialog if it is not already visible. This\n method will only work when it is invoked after the control of the dialog\n has been set. In other words, after the <code>createContents</code>\n method has been invoked and has returned the control for the content area\n of the dialog. Invoking the method before the content area has been set\n or after the dialog has been disposed will have no effect.\n \n @since 3.1\n"
" Return whether the Details button should be included. This method is\n invoked once when the dialog is built. Default implementation is tight to\n default implementation of {@link #createDropDownList(Composite)} and \n displays details button if there is anything on the display list.\n \n @return whether the Details button should be included\n @since 3.1\n @see #createDropDownList(Composite)\n"
" Set the status displayed by this error dialog to the given status. This\n only affects the status displayed by the Details list. The message, image\n and title should be updated by the subclass, if desired.\n \n @param status\n            the status to be displayed in the details list\n @since 3.1\n"
""
" Creates an error dialog. Note that the dialog will have no visual\n representation (no widgets) until it is told to open.\n <p>\n Normally one should use <code>openError</code> to create and open one\n of these. This constructor is useful only if the error object being\n displayed contains child items <it>and </it> you need to specify a mask\n which will be used to filter the displaying of these children. The error\n dialog will only be displayed if there is at least one child status\n matching the mask.\n </p>\n \n @param parentShell\n            the shell under which to create this dialog\n @param dialogTitle\n            the title to use for this dialog, or <code>null</code> to\n            indicate that the default title should be used\n @param message\n            the message to show in this dialog, or <code>null</code> to\n            indicate that the error's message should be shown as the\n            primary message\n @param status\n            the error to show to the user\n @param displayMask\n            the mask to use to filter the displaying of child items, as\n            per <code>IStatus.matches</code>\n @see org.eclipse.core.runtime.IStatus#matches(int)\n"
" Static to prevent opening of error dialogs for automated testing.\n"
" Interface for a page in a multi-page dialog.\n"
" Creates the top level control for this dialog\n page under the given parent composite.\n <p>\n Implementors are responsible for ensuring that\n the created control can be accessed via <code>getControl</code>\n </p>\n\n @param parent the parent composite\n"
" Disposes the SWT resources allocated by this\n dialog page.\n"
" Returns the top level control for this dialog page.\n <p>\n May return <code>null</code> if the control\n has not been created yet.\n </p>\n\n @return the top level control or <code>null</code>\n"
" Returns this dialog page's description text.\n\n @return the description text for this dialog page, \n  or <code>null</code> if none\n"
" Returns the current error message for this dialog page.\n May be <code>null</code> to indicate no error message.\n <p>\n An error message should describe some error state,\n as opposed to a message which may simply provide instruction\n or information to the user.\n </p>\n \n @return the error message, or <code>null</code> if none\n"
" Returns this dialog page's image.\n\n @return the image for this dialog page, or <code>null</code>\n  if none\n"
" Returns the current message for this wizard page.\n <p>\n A message provides instruction or information to the \n user, as opposed to an error message which should \n describe some error state.\n </p>\n \n @return the message, or <code>null</code> if none\n"
" Returns this dialog page's title.\n\n @return the title of this dialog page, \n  or <code>null</code> if none\n"
" Notifies that help has been requested for this dialog page.\n"
" Sets this dialog page's description text.\n \n @param description the description text for this dialog\n  page, or <code>null</code> if none\n"
" Sets this dialog page's image.\n\n @param image the image for this dialog page, \n  or <code>null</code> if none\n"
" Set this dialog page's title.\n\n @param title the title of this dialog page, \n  or <code>null</code> if none\n"
" Sets the visibility of this dialog page.\n\n @param visible <code>true</code> to make this page visible,\n  and <code>false</code> to hide it\n"
" An abstract base class for dialogs with a status bar and OK/CANCEL buttons.\n The status message is specified in an IStatus which can be of severity ERROR,\n WARNING, INFO or OK. The OK button is enabled or disabled depending on the\n status.\n \n @since 3.1\n"
" Specifies whether status line appears to the left of the buttons\n (default) or above them.\n \n @param aboveButtons\n            if <code>true</code> status line is placed above buttons; if\n            <code>false</code> to the right\n"
" Update the dialog's status line to reflect the given status. It is safe\n to call this method before the dialog has been opened.\n \n @param status\n            the status to set\n"
" Returns the last status.\n \n @return IStatus\n"
" Updates the status of the ok button to reflect the given status.\n Subclasses may override this method to update additional buttons.\n \n @param status\n            the status.\n"
""
""
""
""
" Sets the title for this dialog.\n \n @param title\n            the title.\n"
" Sets the image for this dialog.\n \n @param image\n            the image.\n"
" Creates an instance of a status dialog.\n \n @param parent\n            the parent Shell of the dialog\n"
" Concrete implementation of a dialog settings (<code>IDialogSettings</code>)\n using a hash table and XML. The dialog store can be read\n from and saved to a stream. All keys and values must be strings or array of\n strings. Primitive types are converted to strings.\n <p>\n This class was not designed to be subclassed.\n\n Here is an example of using a DialogSettings:\n </p>\n <pre>\n <code>\n DialogSettings settings = new DialogSettings("root");\n settings.put("Boolean1",true);\n settings.put("Long1",100);\n settings.put("Array1",new String[]{"aaaa1","bbbb1","cccc1"});\n DialogSettings section = new DialogSettings("sectionName");\n settings.addSection(section);\n section.put("Int2",200);\n section.put("Float2",1.1);\n section.put("Array2",new String[]{"aaaa2","bbbb2","cccc2"});\n settings.save("c:\\temp\\test\\dialog.xml");\n </code>\n </pre>\n @noextend This class is not intended to be subclassed by clients.\n"
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
" Create an empty dialog settings which loads and saves its\n content to a file.\n Use the methods <code>load(String)</code> and <code>store(String)</code>\n to load and store this dialog settings.\n\n @param sectionName the name of the section in the settings.\n"
" Event object describing a page selection change. The source of these events\n is a page change provider.\n \n @see IPageChangeProvider\n @see IPageChangedListener\n \n @since 3.1\n"
" Returns the selected page.\n \n @return the selected page. In dialogs implemented by JFace, \n 		this will be an <code>IDialogPage</code>.\n"
" Returns the page change provider that is the source of this event.\n \n @return the originating page change provider\n"
" Creates a new event for the given source and selected page.\n \n @param source\n            the page change provider\n @param selectedPage\n            the selected page. In the JFace provided dialogs this\n            will be an <code>IDialogPage</code>.\n"
" The selected page.\n"
" A dialog that has a title area for displaying a title and an image as well as\n a common area for displaying a description, a message, or an error message.\n <p>\n This dialog class may be subclassed.\n"
""
" Creates and returns the contents of the upper part of this dialog (above\n the button bar).\n <p>\n The <code>Dialog</code> implementation of this framework method creates\n and returns a new <code>Composite</code> with no margins and spacing.\n Subclasses should override.\n </p>\n \n @param parent\n            The parent composite to contain the dialog area\n @return the dialog area control\n"
" The <code>TitleAreaDialog</code> implementation of this\n <code>Window</code> methods returns an initial size which is at least\n some reasonable minimum.\n \n @return the initial size of the dialog\n"
" Retained for backward compatibility.\n \n Returns the title area composite. There is no composite in this\n implementation so the shell is returned.\n \n @return Composite\n @deprecated\n"
" Returns the title image label.\n \n @return the title image label\n"
" Display the given error message. The currently displayed message is saved\n and will be redisplayed when the error message is set to\n <code>null</code>.\n \n @param newErrorMessage\n            the newErrorMessage to display or <code>null</code>\n"
" Set the message text. If the message line currently displays an error,\n the message is saved and will be redisplayed when the error message is\n set to <code>null</code>.\n <p>\n Shortcut for <code>setMessage(newMessage, IMessageProvider.NONE)</code>\n </p>\n This method should be called after the dialog has been opened as it\n updates the message label immediately.\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n"
" Sets the message for this dialog with an indication of what type of\n message it is.\n <p>\n The valid message types are one of <code>NONE</code>,\n <code>INFORMATION</code>,<code>WARNING</code>, or\n <code>ERROR</code>.\n </p>\n <p>\n Note that for backward compatibility, a message of type\n <code>ERROR</code> is different than an error message (set using\n <code>setErrorMessage</code>). An error message overrides the current\n message until the error message is cleared. This method replaces the\n current message and does not affect the error message.\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n @param newType\n            the message type\n @since 2.0\n"
" Sets the title to be shown in the title area of this dialog.\n \n @param newTitle\n            the title show\n"
" Sets the title bar color for this dialog.\n \n @param color\n            the title bar color\n"
" Sets the title image to be shown in the title area of this dialog.\n \n @param newTitleImage\n            the title image to be shown\n"
" Instantiate a new title area dialog.\n \n @param parentShell\n            the parent SWT shell\n"
" Image registry key for error message image.\n"
" Image registry key for banner image (value\n <code>"dialog_title_banner_image"</code>).\n"
" Message type constant used to display an info icon with the message.\n \n @since 2.0\n @deprecated\n"
" Message type constant used to display a warning icon with the message.\n \n @since 2.0\n @deprecated\n"
" The IconAndMessageDialog is the abstract superclass of dialogs that have an\n icon and a message as the first two widgets. In this dialog the icon and\n message are direct children of the shell in order that they can be read by\n accessibility tools more easily.\n <p>\n <strong>Note:</strong> Clients are expected to call {@link #createMessageArea(Composite)},\n otherwise neither the icon nor the message will appear.\n </p>\n"
" Create the area the message will be shown in.\n <p>\n The parent composite is assumed to use GridLayout as its layout manager,\n since the parent is typically the composite created in\n {@link Dialog#createDialogArea}.\n </p>\n <p>\n <strong>Note:</strong> Clients are expected to call this method, otherwise\n neither the icon nor the message will appear.\n </p>\n \n @param composite\n            The composite to parent from.\n @return Control\n"
" Returns the style for the message label.\n \n @return the style for the message label\n \n @since 3.0\n"
""
" Returns the image to display beside the message in this dialog.\n <p>\n Subclasses may override.\n </p>\n \n @return the image to display beside the message\n @since 2.0\n"
""
" Create the dialog area and the button bar for the receiver.\n \n @param parent\n"
" Return the <code>Image</code> to be used when displaying an error.\n \n @return image the error image\n"
" Return the <code>Image</code> to be used when displaying a warning.\n \n @return image the warning image\n"
" Return the <code>Image</code> to be used when displaying information.\n \n @return image the information image\n"
" Return the <code>Image</code> to be used when displaying a question.\n \n @return image the question image\n"
" Constructor for IconAndMessageDialog.\n \n @param parentShell\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n"
" Message (a localized string).\n"
" Message label is the label the message is shown on.\n"
" Return the label for the image.\n"
" Instances of this class provide a message area to display a message and an\n associated image.\n <p>\n This class is not intended to be extended by clients.\n </p>\n \n @since 3.2\n @deprecated As of 3.3, this class is no longer necessary.\n \n"
""
" Sets the text in the decorated field which will be displayed in the\n message area.\n \n @param text\n            the text to be displayed in the message area\n \n @see org.eclipse.swt.widgets.Text#setText(String string)\n"
" Adds an image to decorated field to be shown in the message area.\n \n @param image\n            desired image to be shown in the ImageAndMessageArea\n"
""
""
" Constructs a new ImageAndMessageArea with an empty decorated field. Calls\n to <code>setText(String text)</code> and\n <code>setImage(Image image)</code> are required in order to fill the\n message area. Also, the instance will be invisible when initially\n created.\n <p>\n The style bit <code>SWT.WRAP</code> should be used if a larger message\n area is desired.\n </p>\n \n @param parent\n            the parent composite\n @param style\n            the SWT style bits. Using SWT.WRAP will create a larger\n            message area.\n"
" A lightweight, transient dialog that is popped up to show contextual or\n temporal information and is easily dismissed. Clients control whether the\n dialog should be able to receive input focus. An optional title area at the\n top and an optional info area at the bottom can be used to provide additional\n information.\n <p>\n Because the dialog is short-lived, most of the configuration of the dialog is\n done in the constructor. Set methods are only provided for those values that\n are expected to be dynamically computed based on a particular instance's\n internal state.\n <p>\n Clients are expected to override the creation of the main dialog area, and\n may optionally override the creation of the title area and info area in order\n to add content. In general, however, the creation of stylistic features, such\n as the dialog menu, separator styles, and fonts, is kept private so that all\n popup dialogs will have a similar appearance.\n \n @since 3.2\n"
""
" The <code>PopupDialog</code> implementation of this <code>Window</code>\n method creates and lays out the top level composite for the dialog. It\n then calls the <code>createTitleMenuArea</code>,\n <code>createDialogArea</code>, and <code>createInfoTextArea</code>\n methods to create an optional title and menu area on the top, a dialog\n area in the center, and an optional info text area at the bottom.\n Overriding <code>createDialogArea</code> and (optionally)\n <code>createTitleMenuArea</code> and <code>createTitleMenuArea</code>\n are recommended rather than overriding this method.\n \n @param parent\n            the composite used to parent the contents.\n \n @return the control representing the contents.\n"
" Creates and returns the contents of the dialog (the area below the title\n area and above the info text area.\n <p>\n The <code>PopupDialog</code> implementation of this framework method\n creates and returns a new <code>Composite</code> with standard margins\n and spacing.\n <p>\n The returned control's layout data must be an instance of\n <code>GridData</code>. This method must not modify the parent's\n layout.\n <p>\n Subclasses must override this method but may call <code>super</code> as\n in the following example:\n \n <pre>\n Composite composite = (Composite) super.createDialogArea(parent);\n //add controls to composite as necessary\n return composite;\n </pre>\n \n @param parent\n            the parent composite to contain the dialog area\n @return the dialog area control\n"
" Returns the control that should get initial focus. Subclasses may\n override this method.\n \n @return the Control that should receive focus when the popup opens.\n"
" Sets the tab order for the popup. Clients should override to introduce\n specific tab ordering.\n \n @param composite\n            the composite in which all content, including the title area\n            and info area, was created. This composite's parent is the\n            shell.\n"
" Returns a boolean indicating whether the popup should have a title area\n at the top of the dialog. Subclasses may override. Default behavior is to\n have a title area if there is to be a menu or title text.\n \n @return <code>true</code> if a title area should be created,\n         <code>false</code> if it should not.\n"
" Returns a boolean indicating whether the popup should have an info area\n at the bottom of the dialog. Subclasses may override. Default behavior is\n to have an info area if info text was provided at the time of creation.\n \n @return <code>true</code> if a title area should be created,\n         <code>false</code> if it should not.\n"
" Creates the title and menu area. Subclasses typically need not override\n this method, but instead should use the constructor parameters\n <code>showDialogMenu</code> and <code>showPersistAction</code> to\n indicate whether a menu should be shown, and\n <code>createTitleControl</code> to to customize the presentation of the\n title.\n \n <p>\n If this method is overridden, the returned control's layout data must be\n an instance of <code>GridData</code>. This method must not modify the\n parent's layout.\n \n @param parent\n            The parent composite.\n @return The Control representing the title and menu area.\n"
" Creates the control to be used to represent the dialog's title text.\n Subclasses may override if a different control is desired for\n representing the title text, or if something different than the title\n should be displayed in location where the title text typically is shown.\n \n <p>\n If this method is overridden, the returned control's layout data must be\n an instance of <code>GridData</code>. This method must not modify the\n parent's layout.\n \n @param parent\n            The parent composite.\n @return The Control representing the title area.\n"
" Creates the optional info text area. This method is only called if the\n <code>hasInfoArea()</code> method returns true. Subclasses typically\n need not override this method, but may do so.\n \n <p>\n If this method is overridden, the returned control's layout data must be\n an instance of <code>GridData</code>. This method must not modify the\n parent's layout.\n \n \n @param parent\n            The parent composite.\n @return The control representing the info text area.\n \n @see PopupDialog#hasInfoArea()\n @see PopupDialog#createTitleControl(Composite)\n"
" Fill the dialog's menu. Subclasses may extend or override.\n \n @param dialogMenu\n            The dialog's menu.\n"
" Show the dialog's menu. This message has no effect if the receiver was\n not configured to show a menu. Clients may call this method in order to\n trigger the menu via keystrokes or other gestures. Subclasses typically\n do not override method.\n"
" Set the text to be shown in the popup's info area. This message has no\n effect if there was no info text supplied when the dialog first opened.\n Subclasses may override this method.\n \n @param text\n            the text to be shown when the info area is displayed.\n \n"
" Set the text to be shown in the popup's title area. This message has no\n effect if there was no title label specified when the dialog was\n originally opened. Subclasses may override this method.\n \n @param text\n            the text to be shown when the title area is displayed.\n \n"
" Return a boolean indicating whether this dialog will persist its bounds.\n This value is initially set in the dialog's constructor, but can be\n modified if the persist bounds action is shown on the menu and the user\n has changed its value. Subclasses may override this method.\n \n @return <code>true</code> if the dialog's bounds will be persisted,\n         <code>false</code> if it will not.\n \n @deprecated As of 3.4, please use {@link #getPersistLocation()} or\n             {@link #getPersistSize()} to determine separately whether\n             size or location should be persisted.\n"
" Return a boolean indicating whether this dialog will persist its\n location. This value is initially set in the dialog's constructor, but\n can be modified if the persist location action is shown on the menu and\n the user has changed its value. Subclasses may override this method.\n \n @return <code>true</code> if the dialog's location will be persisted,\n         <code>false</code> if it will not.\n \n @see #getPersistSize()\n @since 3.4\n"
" Return a boolean indicating whether this dialog will persist its size.\n This value is initially set in the dialog's constructor, but can be\n modified if the persist size action is shown on the menu and the user has\n changed its value. Subclasses may override this method.\n \n @return <code>true</code> if the dialog's size will be persisted,\n         <code>false</code> if it will not.\n \n @see #getPersistLocation()\n @since 3.4\n"
" Opens this window, creating it first if it has not yet been created.\n <p>\n This method is reimplemented for special configuration of PopupDialogs.\n It never blocks on open, immediately returning <code>OK</code> if the\n open is successful, or <code>CANCEL</code> if it is not. It provides\n framework hooks that allow subclasses to set the focus and tab order, and\n avoids the use of <code>shell.open()</code> in cases where the focus\n should not be given to the shell initially.\n \n @return the return code\n \n @see org.eclipse.jface.window.Window#open()\n"
" Closes this window, disposes its shell, and removes this window from its\n window manager (if it has one).\n <p>\n This method is extended to save the dialog bounds and initialize widget\n state so that the widgets can be recreated if the dialog is reopened.\n This method may be extended (<code>super.close</code> must be called).\n </p>\n \n @return <code>true</code> if the window is (or was already) closed, and\n         <code>false</code> if it is still open\n"
" Gets the dialog settings that should be used for remembering the bounds\n of the dialog. Subclasses should override this method when they wish to\n persist the bounds of the dialog.\n \n @return settings the dialog settings used to store the dialog's location\n         and/or size, or <code>null</code> if the dialog's bounds should\n         never be stored.\n"
" Saves the bounds of the shell in the appropriate dialog settings. The\n bounds are recorded relative to the parent shell, if there is one, or\n display coordinates if there is no parent shell. Subclasses typically\n need not override this method, but may extend it (calling\n <code>super.saveDialogBounds</code> if additional bounds information\n should be stored. Clients may also call this method to persist the bounds\n at times other than closing the dialog.\n \n @param shell\n            The shell whose bounds are to be stored\n"
""
" Return the default size to use for the shell. This default size is used\n if the dialog does not have any persisted size to restore. The default\n implementation returns the preferred size of the shell. Subclasses should\n override this method when an alternate default size is desired, rather\n than overriding {@link #getInitialSize()}.\n \n @return the initial size of the shell\n \n @see #getPersistSize()\n @since 3.4\n"
" Returns the default location to use for the shell. This default location\n is used if the dialog does not have any persisted location to restore.\n The default implementation uses the location computed by\n {@link org.eclipse.jface.window.Window#getInitialLocation(Point)}.\n Subclasses should override this method when an alternate default location\n is desired, rather than overriding {@link #getInitialLocation(Point)}.\n \n @param initialSize\n            the initial size of the shell, as returned by\n            <code>getInitialSize</code>.\n @return the initial location of the shell\n \n @see #getPersistLocation()\n @since 3.4\n"
" Adjust the bounds of the popup as necessary prior to opening the dialog.\n Default is to do nothing, which honors any bounds set directly by clients\n or those that have been saved in the dialog settings. Subclasses should\n override this method when there are bounds computations that must be\n checked each time the dialog is opened.\n"
" (non-Javadoc)\n \n @see org.eclipse.jface.window.Window#getInitialLocation(org.eclipse.swt.graphics.Point)\n"
" Get the foreground color that should be used for this popup. Subclasses\n may override.\n \n @return the foreground color to be used. Should not be <code>null</code>.\n \n @since 3.4\n \n @see #getForegroundColorExclusions()\n"
" Get the background color that should be used for this popup. Subclasses\n may override.\n \n @return the background color to be used. Should not be <code>null</code>.\n \n @since 3.4\n \n @see #getBackgroundColorExclusions()\n"
" Set the specified foreground color for the specified control and all of\n its children. Subclasses may override this method, but typically do not.\n If a subclass wishes to exclude a particular control in its contents from\n getting the specified foreground color, it may instead override\n {@link #getForegroundColorExclusions()}.\n \n @param color\n            the color to use as the foreground color\n @param control\n            the control whose color is to be changed\n @see PopupDialog#getForegroundColorExclusions()\n"
" Set the specified background color for the specified control and all of\n its children. Subclasses may override this method, but typically do not.\n If a subclass wishes to exclude a particular control in its contents from\n getting the specified background color, it may instead override\n {@link #getBackgroundColorExclusions()}\n \n @param color\n            the color to use as the background color\n @param control\n            the control whose color is to be changed\n @see PopupDialog#getBackgroundColorExclusions()\n"
" Return a list of controls which should never have their foreground color\n reset. Subclasses may extend this method, but should always call\n <code>super.getForegroundColorExclusions</code> to aggregate the list.\n \n \n @return the List of controls\n"
" Return a list of controls which should never have their background color\n reset. Subclasses may extend this method, but should always call\n <code>super.getBackgroundColorExclusions</code> to aggregate the list.\n \n @return the List of controls\n"
" Constructs a new instance of <code>PopupDialog</code>.\n \n @param parent\n            The parent shell.\n @param shellStyle\n            The shell style.\n @param takeFocusOnOpen\n            A boolean indicating whether focus should be taken by this\n            popup when it opens.\n @param persistBounds\n            A boolean indicating whether the bounds (size and location) of\n            the dialog should be persisted upon close of the dialog. The\n            bounds can only be persisted if the dialog settings for\n            persisting the bounds are also specified. If a menu action\n            will be provided that allows the user to control this feature,\n            then the last known value of the user's setting will be used\n            instead of this flag.\n @param showDialogMenu\n            A boolean indicating whether a menu for moving and resizing\n            the popup should be provided.\n @param showPersistActions\n            A boolean indicating whether actions allowing the user to\n            control the persisting of the dialog size and location should\n            be shown in the dialog menu. This parameter has no effect if\n            <code>showDialogMenu</code> is <code>false</code>.\n @param titleText\n            Text to be shown in an upper title area, or <code>null</code>\n            if there is no title.\n @param infoText\n            Text to be shown in a lower info area, or <code>null</code>\n            if there is no info area.\n \n @see PopupDialog#getDialogSettings()\n @deprecated As of 3.4, replaced by\n             {@link #PopupDialog(Shell, int, boolean, boolean, boolean, boolean, boolean, String, String)}\n"
" Constructs a new instance of <code>PopupDialog</code>.\n \n @param parent\n            The parent shell.\n @param shellStyle\n            The shell style.\n @param takeFocusOnOpen\n            A boolean indicating whether focus should be taken by this\n            popup when it opens.\n @param persistSize\n            A boolean indicating whether the size should be persisted upon\n            close of the dialog. The size can only be persisted if the\n            dialog settings for persisting the bounds are also specified.\n            If a menu action will be provided that allows the user to\n            control this feature and the user hasn't changed that setting,\n            then this flag is used as initial default for the menu.\n @param persistLocation\n            A boolean indicating whether the location should be persisted\n            upon close of the dialog. The location can only be persisted\n            if the dialog settings for persisting the bounds are also\n            specified. If a menu action will be provided that allows the\n            user to control this feature and the user hasn't changed that\n            setting, then this flag is used as initial default for the\n            menu. default for the menu until the user changed it.\n @param showDialogMenu\n            A boolean indicating whether a menu for moving and resizing\n            the popup should be provided.\n @param showPersistActions\n            A boolean indicating whether actions allowing the user to\n            control the persisting of the dialog bounds and location\n            should be shown in the dialog menu. This parameter has no\n            effect if <code>showDialogMenu</code> is <code>false</code>.\n @param titleText\n            Text to be shown in an upper title area, or <code>null</code>\n            if there is no title.\n @param infoText\n            Text to be shown in a lower info area, or <code>null</code>\n            if there is no info area.\n \n @see PopupDialog#getDialogSettings()\n \n @since 3.4\n"
" Shell style appropriate for a simple hover popup that cannot get focus.\n \n"
" Shell style appropriate for an info popup that can get focus.\n"
" Shell style appropriate for a resizable info popup that can get focus.\n"
" Margin width (in pixels) to be used in layouts inside popup dialogs\n (value is 0).\n"
" Margin height (in pixels) to be used in layouts inside popup dialogs\n (value is 0).\n"
" Vertical spacing (in pixels) between cells in the layouts inside popup\n dialogs (value is 1).\n"
" Vertical spacing (in pixels) between cells in the layouts inside popup\n dialogs (value is 1).\n"
" Image registry key for menu image.\n \n @since 3.4\n"
" Image registry key for disabled menu image.\n \n @since 3.4\n"
" Abstract base implementation of a dialog page. All dialog pages are\n subclasses of this one.\n"
" Returns the number of pixels corresponding to the height of the given\n number of characters.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param chars\n            the number of characters\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the given number of\n horizontal dialog units.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param dlus\n            the number of horizontal dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the given number of\n vertical dialog units.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param dlus\n            the number of vertical dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the width of the given\n number of characters.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param chars\n            the number of characters\n @return the number of pixels\n"
" The <code>DialogPage</code> implementation of this\n <code>IDialogPage</code> method disposes of the page\n image if it has one. \n Subclasses may extend.\n"
" Returns the top level control for this dialog page.\n \n @return the top level control\n"
""
" Returns the symbolic font name used by dialog pages.\n \n @return the symbolic font name\n"
""
" Returns the default font to use for this dialog page.\n \n @return the font\n"
""
""
""
" Returns this dialog page's shell. Convenience method for\n <code>getControl().getShell()</code>. This method may only be called\n after the page's control has been created.\n \n @return the shell\n"
""
" Returns the tool tip text for the widget with the given id.\n <p>\n The default implementation of this framework method does nothing and\n returns <code>null</code>. Subclasses may override.\n </p>\n \n @param widgetId\n            the id of the widget for which hover help is requested\n @return the tool tip text, or <code>null</code> if none\n @deprecated \n"
" Initializes the computation of horizontal and vertical dialog units based\n on the size of current font.\n <p>\n This method must be called before any of the dialog unit based conversion\n methods are called.\n </p>\n \n @param testControl\n            a control from which to obtain the current font\n"
" Sets the <code>GridData</code> on the specified button to be one that\n is spaced for the current dialog page units. The method\n <code>initializeDialogUnits</code> must be called once before calling\n this method for the first time.\n \n @param button\n            the button to set the <code>GridData</code>\n @return the <code>GridData</code> set on the specified button\n"
" Tests whether this page's UI content has already been created.\n \n @return <code>true</code> if the control has been created, and\n         <code>false</code> if not\n"
" This default implementation of an <code>IDialogPage</code> method does\n nothing. Subclasses should override to take some action in response to a\n help request.\n"
" Set the control for the receiver.\n @param newControl\n"
""
" Sets or clears the error message for this page.\n \n @param newMessage\n            the message, or <code>null</code> to clear the error message\n"
""
" Sets or clears the message for this page.\n <p>\n This is a shortcut for <code>setMessage(newMesasge, NONE)</code>\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n"
" Sets the message for this page with an indication of what type of message\n it is.\n <p>\n The valid message types are one of <code>NONE</code>,\n <code>INFORMATION</code>,<code>WARNING</code>, or\n <code>ERROR</code>.\n </p>\n <p>\n Note that for backward compatibility, a message of type\n <code>ERROR</code> is different than an error message (set using\n <code>setErrorMessage</code>). An error message overrides the current\n message until the error message is cleared. This method replaces the\n current message and does not affect the error message.\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n @param newType\n            the message type\n @since 2.0\n"
" The <code>DialogPage</code> implementation of this\n <code>IDialogPage</code> method remembers the title in an internal\n state variable. Subclasses may extend.\n"
" The <code>DialogPage</code> implementation of this\n <code>IDialogPage</code> method sets the control to the given\n visibility state. Subclasses may extend.\n"
" Creates a new empty dialog page.\n"
" Creates a new dialog page with the given title.\n \n @param title\n            the title of this dialog page, or <code>null</code> if none\n"
" Creates a new dialog page with the given title and image.\n \n @param title\n            the title of this dialog page, or <code>null</code> if none\n @param image\n            the image for this dialog page, or <code>null</code> if none\n"
" A dialog is a specialized window used for narrow-focused communication with\n the user.\n <p>\n Dialogs are usually modal. Consequently, it is generally bad practice to open\n a dialog without a parent. A modal dialog without a parent is not prevented\n from disappearing behind the application's other windows, making it very\n confusing for the user.\n </p>\n <p>\n If there is more than one modal dialog is open the second one should be\n parented off of the shell of the first one otherwise it is possible that the\n OS will give focus to the first dialog potentially blocking the UI.\n </p>\n"
" Returns the number of pixels corresponding to the height of the given\n number of characters.\n <p>\n The required <code>FontMetrics</code> parameter may be created in the\n following way: <code>\n 	GC gc = new GC(control);\n	gc.setFont(control.getFont());\n	fontMetrics = gc.getFontMetrics();\n	gc.dispose();\n </code>\n </p>\n \n @param fontMetrics\n            used in performing the conversion\n @param chars\n            the number of characters\n @return the number of pixels\n @since 2.0\n"
" Returns the number of pixels corresponding to the given number of\n horizontal dialog units.\n <p>\n The required <code>FontMetrics</code> parameter may be created in the\n following way: <code>\n 	GC gc = new GC(control);\n	gc.setFont(control.getFont());\n	fontMetrics = gc.getFontMetrics();\n	gc.dispose();\n </code>\n </p>\n \n @param fontMetrics\n            used in performing the conversion\n @param dlus\n            the number of horizontal dialog units\n @return the number of pixels\n @since 2.0\n"
" Returns the number of pixels corresponding to the given number of\n vertical dialog units.\n <p>\n The required <code>FontMetrics</code> parameter may be created in the\n following way: <code>\n 	GC gc = new GC(control);\n	gc.setFont(control.getFont());\n	fontMetrics = gc.getFontMetrics();\n	gc.dispose();\n </code>\n </p>\n \n @param fontMetrics\n            used in performing the conversion\n @param dlus\n            the number of vertical dialog units\n @return the number of pixels\n @since 2.0\n"
" Returns the number of pixels corresponding to the width of the given\n number of characters.\n <p>\n The required <code>FontMetrics</code> parameter may be created in the\n following way: <code>\n 	GC gc = new GC(control);\n	gc.setFont(control.getFont());\n	fontMetrics = gc.getFontMetrics();\n	gc.dispose();\n </code>\n </p>\n \n @param fontMetrics\n            used in performing the conversion\n @param chars\n            the number of characters\n @return the number of pixels\n @since 2.0\n"
" Shortens the given text <code>textValue</code> so that its width in\n pixels does not exceed the width of the given control. Overrides\n characters in the center of the original string with an ellipsis ("...")\n if necessary. If a <code>null</code> value is given, <code>null</code>\n is returned.\n \n @param textValue\n            the original string or <code>null</code>\n @param control\n            the control the string will be displayed on\n @return the string to display, or <code>null</code> if null was passed\n         in\n \n @since 3.0\n"
" Notifies that this dialog's button with the given id has been pressed.\n <p>\n The <code>Dialog</code> implementation of this framework method calls\n <code>okPressed</code> if the ok button is the pressed, and\n <code>cancelPressed</code> if the cancel button is the pressed. All\n other button presses are ignored. Subclasses may override to handle other\n buttons, but should call <code>super.buttonPressed</code> if the\n default handling of the ok and cancel buttons is desired.\n </p>\n \n @param buttonId\n            the id of the button that was pressed (see\n            <code>IDialogConstants.*_ID</code> constants)\n"
" Notifies that the cancel button of this dialog has been pressed.\n <p>\n The <code>Dialog</code> implementation of this framework method sets\n this dialog's return code to <code>Window.CANCEL</code> and closes the\n dialog. Subclasses may override if desired.\n </p>\n"
" Returns the number of pixels corresponding to the height of the given\n number of characters.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param chars\n            the number of characters\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the given number of\n horizontal dialog units.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param dlus\n            the number of horizontal dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the given number of\n vertical dialog units.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param dlus\n            the number of vertical dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the width of the given\n number of characters.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param chars\n            the number of characters\n @return the number of pixels\n"
" Creates a new button with the given id.\n <p>\n The <code>Dialog</code> implementation of this framework method creates\n a standard push button, registers it for selection events including\n button presses, and registers default buttons with its shell. The button\n id is stored as the button's client data. If the button id is\n <code>IDialogConstants.CANCEL_ID</code>, the new button will be\n accessible from <code>getCancelButton()</code>. If the button id is\n <code>IDialogConstants.OK_ID</code>, the new button will be accesible\n from <code>getOKButton()</code>. Note that the parent's layout is\n assumed to be a <code>GridLayout</code> and the number of columns in\n this layout is incremented. Subclasses may override.\n </p>\n \n @param parent\n            the parent composite\n @param id\n            the id of the button (see <code>IDialogConstants.*_ID</code>\n            constants for standard dialog button ids)\n @param label\n            the label from the button\n @param defaultButton\n            <code>true</code> if the button is to be the default button,\n            and <code>false</code> otherwise\n \n @return the new button\n \n @see #getCancelButton\n @see #getOKButton()\n"
" Creates and returns the contents of this dialog's button bar.\n <p>\n The <code>Dialog</code> implementation of this framework method lays\n out a button bar and calls the <code>createButtonsForButtonBar</code>\n framework method to populate it. Subclasses may override.\n </p>\n <p>\n The returned control's layout data must be an instance of\n <code>GridData</code>.\n </p>\n \n @param parent\n            the parent composite to contain the button bar\n @return the button bar control\n"
" Adds buttons to this dialog's button bar.\n <p>\n The <code>Dialog</code> implementation of this framework method adds\n standard ok and cancel buttons using the <code>createButton</code>\n framework method. These standard buttons will be accessible from\n <code>getCancelButton</code>, and <code>getOKButton</code>.\n Subclasses may override.\n </p>\n \n @param parent\n            the button bar composite\n"
""
" The <code>Dialog</code> implementation of this <code>Window</code>\n method creates and lays out the top level composite for the dialog, and\n determines the appropriate horizontal and vertical dialog units based on\n the font size. It then calls the <code>createDialogArea</code> and\n <code>createButtonBar</code> methods to create the dialog area and\n button bar, respectively. Overriding <code>createDialogArea</code> and\n <code>createButtonBar</code> are recommended rather than overriding\n this method.\n"
" Creates and returns the contents of the upper part of this dialog (above\n the button bar).\n <p>\n The <code>Dialog</code> implementation of this framework method creates\n and returns a new <code>Composite</code> with standard margins and\n spacing.\n </p>\n <p>\n The returned control's layout data must be an instance of\n <code>GridData</code>. This method must not modify the parent's\n layout.\n </p>\n <p>\n Subclasses must override this method but may call <code>super</code> as\n in the following example:\n </p>\n \n <pre>\n Composite composite = (Composite) super.createDialogArea(parent);\n //add controls to composite as necessary\n return composite;\n </pre>\n \n @param parent\n            the parent composite to contain the dialog area\n @return the dialog area control\n"
" Returns the button created by the method <code>createButton</code> for\n the specified ID as defined on <code>IDialogConstants</code>. If\n <code>createButton</code> was never called with this ID, or if\n <code>createButton</code> is overridden, this method will return\n <code>null</code>.\n \n @param id\n            the id of the button to look for\n \n @return the button for the ID or <code>null</code>\n \n @see #createButton(Composite, int, String, boolean)\n @since 2.0\n"
" Returns the button bar control.\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @return the button bar, or <code>null</code> if the button bar has not\n         been created yet\n"
" Returns the button created when <code>createButton</code> is called\n with an ID of <code>IDialogConstants.CANCEL_ID</code>. If\n <code>createButton</code> was never called with this parameter, or if\n <code>createButton</code> is overridden, <code>getCancelButton</code>\n will return <code>null</code>.\n \n @return the cancel button or <code>null</code>\n \n @see #createButton(Composite, int, String, boolean)\n @since 2.0\n @deprecated Use <code>getButton(IDialogConstants.CANCEL_ID)</code>\n             instead. This method will be removed soon.\n"
" Returns the dialog area control.\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @return the dialog area, or <code>null</code> if the dialog area has\n         not been created yet\n"
" Returns the standard dialog image with the given key. Note that these\n images are managed by the dialog framework, and must not be disposed by\n another party.\n \n @param key\n            one of the <code>Dialog.DLG_IMG_* </code> constants\n @return the standard dialog image\n \n NOTE: Dialog does not use the following images in the registry\n DLG_IMG_ERROR DLG_IMG_INFO DLG_IMG_QUESTION DLG_IMG_WARNING\n \n They are now coming directly from SWT, see ImageRegistry. For backwards\n compatibility they are still supported, however new code should use SWT\n for these.\n \n @see Display#getSystemImage(int)\n"
" Returns the button created when <code>createButton</code> is called\n with an ID of <code>IDialogConstants.OK_ID</code>. If\n <code>createButton</code> was never called with this parameter, or if\n <code>createButton</code> is overridden, <code>getOKButton</code>\n will return <code>null</code>.\n \n @return the OK button or <code>null</code>\n \n @see #createButton(Composite, int, String, boolean)\n @since 2.0\n @deprecated Use <code>getButton(IDialogConstants.OK_ID)</code> instead.\n             This method will be removed soon.\n"
" Initializes the computation of horizontal and vertical dialog units based\n on the size of current font.\n <p>\n This method must be called before any of the dialog unit based conversion\n methods are called.\n </p>\n \n @param control\n            a control from which to obtain the current font\n"
" Notifies that the ok button of this dialog has been pressed.\n <p>\n The <code>Dialog</code> implementation of this framework method sets\n this dialog's return code to <code>Window.OK</code> and closes the\n dialog. Subclasses may override.\n </p>\n"
" Set the layout data of the button to a GridData with appropriate heights\n and widths.\n \n @param button\n"
" Set the layout data of the button to a FormData with appropriate heights\n and widths.\n \n @param button\n"
" @see org.eclipse.jface.window.Window#close()\n"
" Applies the dialog font to all controls that currently have the default\n font.\n \n @param control\n            the control to apply the font to. Font will also be applied to\n            its children. If the control is <code>null</code> nothing\n            happens.\n"
" Return whether or not the dialog font is currently the same as the\n default font.\n \n @return boolean if the two are the same\n"
""
" Get the IDialogBlockedHandler to be used by WizardDialogs and\n ModalContexts.\n \n @return Returns the blockedHandler.\n"
" Set the IDialogBlockedHandler to be used by WizardDialogs and\n ModalContexts.\n \n @param blockedHandler\n            The blockedHandler for the dialogs.\n"
" Gets the dialog settings that should be used for remembering the bounds of\n of the dialog, according to the dialog bounds strategy.\n \n @return settings the dialog settings used to store the dialog's location\n         and/or size, or <code>null</code> if the dialog's bounds should\n         never be stored.\n \n @since 3.2\n @see Dialog#getDialogBoundsStrategy()\n"
" Get the integer constant that describes the strategy for persisting the\n dialog bounds. This strategy is ignored if the implementer does not also\n specify the dialog settings for storing the bounds in\n Dialog.getDialogBoundsSettings().\n \n @return the constant describing the strategy for persisting the dialog\n         bounds.\n \n @since 3.2\n @see Dialog#DIALOG_PERSISTLOCATION\n @see Dialog#DIALOG_PERSISTSIZE\n @see Dialog#getDialogBoundsSettings()\n"
" Returns the initial size to use for the shell. Overridden\n to check whether a size has been stored in dialog settings.\n If a size has been stored, it is returned.\n \n @return the initial size of the shell\n \n @since 3.2\n @see #getDialogBoundsSettings()\n @see #getDialogBoundsStrategy()\n"
" Returns the initial location to use for the shell. Overridden\n to check whether the bounds of the dialog have been stored in\n dialog settings.  If a location has been stored, it is returned.\n \n @param initialSize\n            the initial size of the shell, as returned by\n            <code>getInitialSize</code>.\n @return the initial location of the shell\n \n @since 3.2\n @see #getDialogBoundsSettings()\n @see #getDialogBoundsStrategy()\n"
" Returns a boolean indicating whether the dialog should be\n considered resizable when the shell style is initially\n set.  \n \n This method is used to ensure that all style \n bits appropriate for resizable dialogs are added to the \n shell style.  Individual dialogs may always set the shell \n style to ensure that a dialog is resizable, but using this\n method ensures that resizable dialogs will be created with\n the same set of style bits.\n \n Style bits will never be removed based on the return value \n of this method.  For example, if a dialog returns \n <code>false</code>, but also sets a style bit for a \n SWT.RESIZE border, the style bit will be honored.\n \n @return a boolean indicating whether the dialog is \n resizable and should have the default style bits for\n resizable dialogs\n \n @since 3.4\n"
" Creates a dialog instance. Note that the window will have no visual\n representation (no widgets) until it is told to open. By default,\n <code>open</code> blocks for dialogs.\n \n @param parentShell\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n"
" Image registry key for error image (value\n <code>"dialog_error_image"</code>).\n \n @deprecated use\n             org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_ERROR)\n"
" Image registry key for info image (value <code>"dialog_info_image"</code>).\n \n @deprecated use\n             org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_INFORMATION)\n"
" Image registry key for question image (value\n <code>"dialog_question_image"</code>).\n \n @deprecated org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_QUESTION)\n"
" Image registry key for warning image (value\n <code>"dialog_warning_image"</code>).\n \n @deprecated use\n             org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_WARNING)\n"
" Image registry key for info message image (value\n <code>"dialog_messasge_info_image"</code>).\n \n @since 2.0\n"
" Image registry key for info message image (value\n <code>"dialog_messasge_warning_image"</code>).\n \n @since 2.0\n"
" Image registry key for info message image (value\n <code>"dialog_message_error_image"</code>).\n \n @since 2.0\n"
" Image registry key for help image (value\n <code>"dialog_help_image"</code>).\n \n @since 3.2\n"
" The ellipsis is the string that is used to represent shortened text.\n \n @since 3.0\n"
" A value that can be used for stored dialog width or height that\n indicates that the default bounds should be used.\n \n @since 3.2\n"
" Persist the last location of the dialog.\n @since 3.2\n"
" Persist the last known size of the dialog.\n @since 3.2\n"
" The dialog area; <code>null</code> until dialog is layed out.\n"
" The button bar; <code>null</code> until dialog is layed out.\n"
" Create a default instance of the blocked handler which does not do\n anything.\n"
" Helper class to save the enable/disable state of a control including all its\n descendent controls.\n"
" Saves the current enable/disable state of the given control and its\n descendents in the returned object; the controls are all disabled.\n \n @param w\n            the control\n @return an object capturing the enable/disable state\n"
" Saves the current enable/disable state of the given control and its\n descendents in the returned object except for the given list of exception\n cases; the controls that are saved are also disabled.\n \n @param w\n            the control\n @param exceptions\n            the list of controls to not disable (element type:\n            <code>Control</code>)\n @return an object capturing the enable/disable state\n"
" Restores the window enable state saved in this object.\n"
" Creates a new object and saves in it the current enable/disable state of\n the given control and its descendents; the controls that are saved are\n also disabled.\n \n @param w\n            the control\n"
" Creates a new object and saves in it the current enable/disable state of\n the given control and its descendents except for the given list of\n exception cases; the controls that are saved are also disabled.\n \n @param w\n            the control\n @param exceptions\n            the list of controls to not disable (element type:\n            <code>Control</code>), or <code>null</code> if none\n"
" A ErrorSupportProvider defines the area to be shown in an error dialog for extra support information.\n @since 3.3\n\n"
" Create an area for adding support components as a child of parent.\n @param parent The parent {@link Composite}\n @param status The {@link IStatus} that is being displayed.\n @return Control\n"
""
" <p>\n This class is the abstract superclass of all dialog trays. A tray can be opened\n in any <code>TrayDialog</code>.\n </p>\n \n @see org.eclipse.jface.dialogs.TrayDialog\n @since 3.2\n"
" Creates the contents (widgets) that will be contained in the tray.\n <p>\n Tray implementions must not set a layout on the parent composite, or assume\n a particular layout on the parent. The tray dialog will allocate space\n according to the natural size of the tray, and will fill the tray area with the\n tray's contents.\n </p>\n \n @param parent the composite that will contain the tray\n @return the contents of the tray, as a <code>Control</code>\n"
""
" The DialogMessageArea is a resusable component for adding an accessible\n message area to a dialog.\n \n When the message is normal a CLabel is used but an errors replaces the\n message area with a non editable text that can take focus for use by screen\n readers.\n \n @since 3.0\n"
" Create the contents for the receiver.\n \n @param parent\n            the Composite that the children will be created in\n"
" Set the layoutData for the title area. In most cases this will be a copy\n of the layoutData used in setMessageLayoutData.\n \n @param layoutData\n            the layoutData for the title\n @see #setMessageLayoutData(Object)\n"
" Set the layoutData for the messageArea. In most cases this will be a copy\n of the layoutData used in setTitleLayoutData.\n \n @param layoutData\n            the layoutData for the message area composite.\n @see #setTitleLayoutData(Object)\n"
" Show the title.\n \n @param titleMessage\n            String for the titke\n @param titleImage\n            Image or <code>null</code>\n"
" Enable the title and disable the message text and image.\n"
" Show the new message in the message text and update the image. Base the\n background color on whether or not there are errors.\n \n @param newMessage\n            The new value for the message\n @param newType\n            One of the IMessageProvider constants. If newType is\n            IMessageProvider.NONE show the title.\n @see IMessageProvider\n"
" Clear the error message. Restore the previously displayed message if\n there is one, if not restore the title label.\n  \n"
" Create a new instance of the receiver.\n"
" Minimal interface to a page change provider. Used for dialogs which can\n switch between multiple pages.\n \n @since 3.1\n"
" Returns the currently selected page in the dialog.\n \n @return the selected page in the dialog or <code>null</code> if none is\n         selected. The type may be domain specific. In \n         the JFace provided dialogs this will be an instance of \n         <code>IDialogPage</code>. \n"
" Adds a listener for page changes in this page change provider. Has no\n effect if an identical listener is already registered.\n \n @param listener\n            a page changed listener\n"
" Removes the given page change listener from this page change provider.\n Has no effect if an identical listener is not registered.\n \n @param listener\n            a page changed listener\n"
" An interface to a storage mechanism for making dialog settings persistent.\n The store manages a collection of key/value pairs. The keys must be strings\n and the values can be either, strings or array of strings. Convenience API to\n convert primitive types to strings is provided.\n"
" Create a new section in the receiver and return it.\n \n @param name\n            the name of the new section\n @return the new section\n"
" Add a section in the receiver.\n \n @param section\n            the section to be added\n"
" Returns the value of the given key in this dialog settings.\n \n @param key\n            the key\n @return the value, or <code>null</code> if none\n"
" Returns the value, an array of strings, of the given key in this dialog\n settings.\n \n @param key\n            the key\n @return the array of string, or <code>null</code> if none\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a boolean and return it.\n \n @param key\n            the key\n @return the boolean value, or <code>false</code> if none\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a double and return it.\n \n @param key\n            the key\n @return the value coverted to double, or throws\n         <code>NumberFormatException</code> if none\n \n @exception NumberFormatException\n                if the string value does not contain a parsable number.\n @see java.lang.Double#valueOf(java.lang.String)\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a float and return it.\n \n @param key\n            the key\n @return the value coverted to float, or throws\n         <code>NumberFormatException</code> if none\n \n @exception NumberFormatException\n                if the string value does not contain a parsable number.\n @see java.lang.Float#valueOf(java.lang.String)\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a int and return it.\n \n @param key\n            the key\n @return the value coverted to int, or throws\n         <code>NumberFormatException</code> if none\n \n @exception NumberFormatException\n                if the string value does not contain a parsable number.\n @see java.lang.Integer#valueOf(java.lang.String)\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a long and return it.\n \n @param key\n            the key\n @return the value coverted to long, or throws\n         <code>NumberFormatException</code> if none\n \n @exception NumberFormatException\n                if the string value does not contain a parsable number.\n @see java.lang.Long#valueOf(java.lang.String)\n"
" Returns the IDialogSettings name.\n \n @return the name\n"
" Returns the section with the given name in this dialog settings.\n \n @param sectionName\n            the key\n @return IDialogSettings (the section), or <code>null</code> if none\n"
" Returns all the sections in this dialog settings.\n \n @return the section, or <code>null</code> if none\n"
" Load a dialog settings from a stream and fill the receiver with its\n content.\n \n @param reader\n            a Reader specifying the stream where the settings are read\n            from.\n @throws IOException\n"
" Load a dialog settings from a file and fill the receiver with its\n content.\n \n @param fileName\n            the name of the file the settings are read from.\n @throws IOException\n"
" Adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the double <code>value</code> to a string and\n adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the float <code>value</code> to a string and\n adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the int <code>value</code> to a string and\n adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the long <code>value</code> to a string and\n adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the boolean <code>value</code> to a string\n and adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Save a dialog settings to a stream\n \n @param writer\n            a Writer specifying the stream the settings are written in.\n @throws IOException\n"
" Save a dialog settings to a file.\n \n @param fileName\n            the name of the file the settings are written in.\n @throws IOException\n"
" Event object describing an <code>IDialogPage</code> in the midst of changing.\n \n @see IPageChangingListener\n @since 3.3\n"
" Returns the current page from which the page change originates.\n \n @return the current page. In dialogs implemented by JFace, \n 		this will be an <code>IDialogPage</code>.\n"
" Returns the target page to change to.\n \n @return the target page. In dialogs implemented by JFace, \n 		this will be an <code>IDialogPage</code>.\n"
" Creates a new event for the given source, selected (current) page and\n direction.\n \n @param source\n            the page changing provider (the source of this event)\n @param currentPage\n            the current page. In the JFace provided dialogs this will be\n            an <code>IDialogPage</code>.\n @param targetPage\n            the target page. In the JFace provided dialogs this will be an\n            <code>IDialogPage</code>.\n"
" Public field that dictates if the page change will successfully change.\n \n Set this field to <code>false</code> to prevent the page from changing.\n   \n Default value is <code>true</code>.\n"
" Factory for control animators used by JFace to animate the display of an SWT\n Control. Through the use of the method\n {@link org.eclipse.jface.util.Policy#setAnimatorFactory(AnimatorFactory)} \n a new type of animator factory can be plugged into JFace.\n \n @since 3.2\n @deprecated as of 3.3, this class is no longer used.\n"
" Creates a new ControlAnimator for use by JFace in animating\n the display of an SWT Control. <p>\n Subclasses should override this method.\n \n @param control the SWT Control to de displayed \n @return the ControlAnimator.\n @since 3.2\n"
""
" A listener which is notified when the current page of a multi-page dialog is\n changing. Use this listener to perform long-running work that should only be\n executed once, when the page is in the process of changing, rather then\n during validation of page controls.\n \n @see PageChangingEvent\n @since 3.3\n"
" Handle the an <code>IDialogPage</code> changing.\n \n The <code>doit</code> field of the <code>PageChangingEvent</code>\n must be set to false to prevent the page from changing.\n \n @param event\n            event object describing the change\n"
" The IDialogBlockedHandler is the handler used by\n JFace to provide extra information when a\n blocking has occured. There is one static instance\n of this class used by WizardDialog and ModalContext.\n @see org.eclipse.core.runtime.IProgressMonitorWithBlocking#clearBlocked()\n @see  org.eclipse.core.runtime.IProgressMonitorWithBlocking#setBlocked(IStatus)\n @see WizardDialog\n @since 3.0\n"
" The blockage has been cleared. Clear the\n extra information and resume.\n"
" A blockage has occured. Show the blockage and \n forward any actions to blockingMonitor. \n <b>NOTE:</b> This will open any blocked notification immediately\n even if there is a modal shell open.\n \n @param parentShell The shell this is being sent from. If the parent\n shell is <code>null</code> the behavior will be the same as\n IDialogBlockedHandler#showBlocked(IProgressMonitor, IStatus, String)\n \n @param blocking The monitor to forward to. This is most\n important for calls to <code>cancel()</code>.\n @param blockingStatus The status that describes the blockage\n @param blockedName The name of the locked operation.\n @see IDialogBlockedHandler#showBlocked(IProgressMonitor, IStatus, String)\n"
" A blockage has occured. Show the blockage when there is \n no longer any modal shells in the UI and forward any actions \n to blockingMonitor. \n \n <b>NOTE:</b> As no shell has been specified this method will\n not open any blocked notification until all other modal shells\n have been closed.\n \n @param blocking The monitor to forward to. This is most\n important for calls to <code>cancel()</code>.\n @param blockingStatus The status that describes the blockage\n @param blockedName The name of the locked operation.\n"
" A dialog for showing messages to the user.\n <p>\n This concrete dialog class can be instantiated as is, or further subclassed\n as required.\n </p>\n"
""
""
""
" Creates and returns the contents of an area of the dialog which appears\n below the message and above the button bar.\n <p>\n The default implementation of this framework method returns\n <code>null</code>. Subclasses may override.\n </p>\n \n @param parent\n            parent composite to contain the custom area\n @return the custom area control, or <code>null</code>\n"
" This implementation of the <code>Dialog</code> framework method creates\n and lays out a composite and calls <code>createMessageArea</code> and\n <code>createCustomArea</code> to populate it. Subclasses should\n override <code>createCustomArea</code> to add contents below the\n message.\n"
" Gets a button in this dialog's button bar.\n \n @param index\n            the index of the button in the dialog's button bar\n @return a button in the dialog's button bar\n"
" Returns the minimum message area width in pixels This determines the\n minimum width of the dialog.\n <p>\n Subclasses may override.\n </p>\n \n @return the minimum message area width (in pixels)\n"
" Handle the shell close. Set the return code to <code>SWT.DEFAULT</code>\n as there has been no explicit close by the user.\n \n @see org.eclipse.jface.window.Window#handleShellCloseEvent()\n"
" Opens this message dialog, creating it first if it has not yet been created.\n <p>\n This method waits until the dialog is closed by the end user, and then it\n returns the dialog's return code. The dialog's return code is either the\n index of the button the user pressed, or {@link SWT#DEFAULT} if the dialog\n has been closed by other means.\n </p>\n\n @return the return code\n\n @see org.eclipse.jface.window.Window#open()\n"
" Convenience method to open a simple dialog as specified by the\n <code>kind</code> flag.\n \n @param kind\n            the kind of dialog to open, one of {@link #ERROR},\n            {@link #INFORMATION}, {@link #QUESTION}, {@link #WARNING},\n            {@link #CONFIRM}, or {@link #QUESTION_WITH_CANCEL}.\n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param style\n            {@link SWT#NONE} for a default dialog, or {@link SWT#SHEET} for\n            a dialog with sheet behavior\n @return <code>true</code> if the user presses the OK or Yes button,\n         <code>false</code> otherwise\n @since 3.5\n"
" Convenience method to open a simple confirm (OK/Cancel) dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @return <code>true</code> if the user presses the OK button,\n         <code>false</code> otherwise\n"
" Convenience method to open a standard error dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n"
" Convenience method to open a standard information dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n"
" Convenience method to open a simple Yes/No question dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @return <code>true</code> if the user presses the Yes button,\n         <code>false</code> otherwise\n"
" Convenience method to open a standard warning dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n"
""
" Return whether or not we should apply the workaround where we take focus\n for the default button or if that should be determined by the dialog. By\n default only return true if the custom area is a label or CLabel that\n cannot take focus.\n \n @return boolean\n"
""
" An accessor for the labels to use on the buttons.\n \n @return The button labels to used; never <code>null</code>.\n"
" An accessor for the index of the default button in the button array.\n \n @return The default button index.\n"
" A mutator for the array of buttons in the button bar.\n \n @param buttons\n            The buttons in the button bar; must not be <code>null</code>.\n"
" A mutator for the button labels.\n \n @param buttonLabels\n            The button labels to use; must not be <code>null</code>.\n"
" Create a message dialog. Note that the dialog will have no visual\n representation (no widgets) until it is told to open.\n <p>\n The labels of the buttons to appear in the button bar are supplied in\n this constructor as an array. The <code>open</code> method will return\n the index of the label in this array corresponding to the button that was\n pressed to close the dialog.\n </p>\n <p>\n <strong>Note:</strong> If the dialog was dismissed without pressing\n a button (ESC key, close box, etc.) then {@link SWT#DEFAULT} is returned.\n Note that the <code>open</code> method blocks.\n </p>\n\n @param parentShell\n            the parent shell\n @param dialogTitle\n            the dialog title, or <code>null</code> if none\n @param dialogTitleImage\n            the dialog title image, or <code>null</code> if none\n @param dialogMessage\n            the dialog message\n @param dialogImageType\n            one of the following values:\n            <ul>\n            <li><code>MessageDialog.NONE</code> for a dialog with no\n            image</li>\n            <li><code>MessageDialog.ERROR</code> for a dialog with an\n            error image</li>\n            <li><code>MessageDialog.INFORMATION</code> for a dialog\n            with an information image</li>\n            <li><code>MessageDialog.QUESTION </code> for a dialog with a\n            question image</li>\n            <li><code>MessageDialog.WARNING</code> for a dialog with a\n            warning image</li>\n            </ul>\n @param dialogButtonLabels\n            an array of labels for the buttons in the button bar\n @param defaultIndex\n            the index in the button label array of the default button\n"
" Constant for no image (value 0).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n"
" Constant for the error image, or a simple dialog with the error image and a single OK button (value 1).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
" Constant for the info image, or a simple dialog with the info image and a single OK button (value 2).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
" Constant for the question image, or a simple dialog with the question image and Yes/No buttons (value 3).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
" Constant for the warning image, or a simple dialog with the warning image and a single OK button (value 4).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
" Constant for a simple dialog with the question image and OK/Cancel buttons (value 5).\n \n @see #open(int, Shell, String, String, int)\n @since 3.5\n"
" Constant for a simple dialog with the question image and Yes/No/Cancel buttons (value 6).\n \n @see #open(int, Shell, String, String, int)\n @since 3.5\n"
" <p>\n A message dialog which also allows the user to adjust a toggle setting. If a\n preference store is provided and the user selects the toggle, then the user's\n answer (yes/ok or no) will be persisted in the store. If no store is\n provided, then this information can be queried after the dialog closes.\n </p>\n <p>\n This type of dialog should be used whenever you want to user to be able to\n avoid being prompted in the future. It is <strong>strongly </strong>\n recommended that a cancel option be provided, so that the user has the option\n of making the decision at a later point in time. The semantic for a cancel\n button should be to cancel the operation (if it has not yet started), or stop\n the operation (if it has already started).\n </p>\n <p>\n It is the responsibility of the developer to provide a mechanism for the user\n to change this preference at some later point in time (e.g., through a\n preference page).\n </p>\n \n @since 3.0\n"
" Convenience method to open a simple dialog as specified by the <code>kind</code> flag,\n with a "don't show again' toggle.\n\n @param kind \n            the kind of dialog to open, one of {@link #ERROR},\n            {@link #INFORMATION}, {@link #QUESTION}, {@link #WARNING},\n            {@link #CONFIRM}, or {#QUESTION_WITH_CANCEL}.\n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @param style\n            {@link SWT#NONE} for a default dialog, or {@link SWT#SHEET} for\n            a dialog with sheet behavior\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n @since 3.5\n"
" Convenience method to open a standard error dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a standard information dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n \n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a simple confirm (OK/Cancel) dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a standard warning dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a simple question Yes/No/Cancel dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a simple Yes/No question dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n \n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" @see org.eclipse.jface.dialogs.Dialog#buttonPressed(int)\n"
" @see Dialog#createButtonBar(Composite)\n"
" @see Dialog#createDialogArea(Composite)\n"
" Creates a toggle button without any text or state.  The text and state\n will be created by <code>createDialogArea</code>. \n \n @param parent\n            The composite in which the toggle button should be placed;\n            must not be <code>null</code>.\n @return The added toggle button; never <code>null</code>.\n"
" Returns the toggle button.\n \n @return the toggle button\n"
" An accessor for the current preference store for this dialog.\n \n @return The preference store; this value may be <code>null</code> if no\n         preference is being used.\n"
" An accessor for the current key of the toggle preference.\n \n @return The preference key; this value may be <code>null</code> if no\n         preference is being used.\n"
" Returns the toggle state. This can be called even after the dialog is\n closed.\n \n @return <code>true</code> if the toggle button is checked,\n         <code>false</code> if not\n"
" A mutator for the key of the preference to be modified by the toggle\n button.\n \n @param prefKey\n            The prefKey to set. If this value is <code>null</code>,\n            then no preference will be modified.\n"
" A mutator for the preference store to be modified by the toggle button.\n \n @param prefStore\n            The prefStore to set. If this value is <code>null</code>,\n            then no preference will be modified.\n"
" A mutator for the button providing the toggle option. If the button\n exists, then it will automatically get the text set to the current toggle\n message, and its selection state set to the current selection state.\n \n @param button\n            The button to use; must not be <code>null</code>.\n"
" A mutator for the text on the toggle button. The button will\n automatically get updated with the new text, if it exists.\n \n @param message\n            The new text of the toggle button; if it is <code>null</code>,\n            then used the default toggle message.\n"
" A mutator for the state of the toggle button. This method will update the\n button, if it exists.\n \n @param toggleState\n            The desired state of the toggle button (<code>true</code>\n            means the toggle should be selected).\n"
" Creates a message dialog with a toggle. See the superclass constructor\n for info on the other parameters.\n \n @param parentShell\n            the parent shell\n @param dialogTitle\n            the dialog title, or <code>null</code> if none\n @param image\n            the dialog title image, or <code>null</code> if none\n @param message\n            the dialog message\n @param dialogImageType\n            one of the following values:\n            <ul>\n            <li><code>MessageDialog.NONE</code> for a dialog with no\n            image</li>\n            <li><code>MessageDialog.ERROR</code> for a dialog with an\n            error image</li>\n            <li><code>MessageDialog.INFORMATION</code> for a dialog\n            with an information image</li>\n            <li><code>MessageDialog.QUESTION </code> for a dialog with a\n            question image</li>\n            <li><code>MessageDialog.WARNING</code> for a dialog with a\n            warning image</li>\n            </ul>\n @param dialogButtonLabels\n            an array of labels for the buttons in the button bar\n @param defaultIndex\n            the index in the button label array of the default button\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n  \n"
" The value of the preference when the user has asked that the answer to\n the question always be "okay" or "yes".\n"
" The value of the preference when the user has asked that the answer to\n the question always be "no".\n"
" The value of the preference when the user wishes to prompted for an\n answer every time the question is to be asked.\n"
" A listener which is notified when the current page of the multi-page dialog\n is changed.\n \n @see IPageChangeProvider\n @see PageChangedEvent\n \n @since 3.1\n"
" Notifies that the selected page has changed.\n \n @param event\n            event object describing the change\n"
" A simple input dialog for soliciting an input string from the user.\n <p>\n This concrete dialog class can be instantiated as is, or further subclassed as\n required.\n </p>\n"
""
""
""
""
" Returns the error message label.\n \n @return the error message label\n @deprecated use setErrorMessage(String) instead\n"
" Returns the ok button.\n \n @return the ok button\n"
" Returns the text area.\n \n @return the text area\n"
" Returns the validator.\n \n @return the validator\n"
" Returns the string typed into this input dialog.\n \n @return the input string\n"
" Validates the input.\n <p>\n The default implementation of this framework method delegates the request\n to the supplied input validator object; if it finds the input invalid,\n the error message is displayed in the dialog's message line. This hook\n method is called whenever the text changes in the input field.\n </p>\n"
" Sets or clears the error message.\n If not <code>null</code>, the OK button is disabled.\n \n @param errorMessage\n            the error message, or <code>null</code> to clear\n @since 3.0\n"
" Returns the style bits that should be used for the input text field.\n Defaults to a single line entry. Subclasses may override.\n \n @return the integer style bits that should be used when creating the\n         input text\n \n @since 3.4\n"
" Creates an input dialog with OK and Cancel buttons. Note that the dialog\n will have no visual representation (no widgets) until it is told to open.\n <p>\n Note that the <code>open</code> method blocks for input dialogs.\n </p>\n \n @param parentShell\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n @param dialogTitle\n            the dialog title, or <code>null</code> if none\n @param dialogMessage\n            the dialog message, or <code>null</code> if none\n @param initialValue\n            the initial input value, or <code>null</code> if none\n            (equivalent to the empty string)\n @param validator\n            an input validator, or <code>null</code> if none\n"
