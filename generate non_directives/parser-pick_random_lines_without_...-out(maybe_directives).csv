package,org/eclipse/jface/dialogs,Provides support for dialogs.Package SpecificationA dialog is a specialized window, typically consisting of a dialog areaand a button bar, designed for narrow-focussed communication with the user.The dialog framework consists of an abstract base class (Dialog),along with more concrete dialog subclasses for displaying messages (MessageDialog),soliciting text input (InputDialog), and displaying progress duringa long-running operation (ProgressMonitorDialog).Dialog stores (IDialogStore, DialogStore) providea general framework for organizing a dialog's settings into key/value pairs.Multi-page dialogs are made easier through the use of dialog pages (IDialogPage,DialogPage).Note: None of the classes in this package maintain global state.&nbsp;&nbsp;&nbsp;
package,org/eclipse/jface/resource,Provides support for managing resources such as SWTfonts and images.Package SpecificationThis package contains support for managing resources, including:font registries (FontRegistry) - for hanging on to the SWT fontobjects needed by an applicationcolor registries (ColorRegistry) - for hanging on to the SWT color objects needed by an applicationimage registries (ImageRegistry) - for hanging on to the SWT imageobjects needed by an applicationimage descriptors (ImageDescriptor) - surrogate object for creatingSWT imagesstring conversion (StringConverter) - for parsing property filesThe JFace resources module is an independent JFace module requiring a basicknowledge of SWT and the JFace property change event mechanism. Familiaritywith other JFace modules is not required.Image descriptors are objects that knows how to create an image on demand.They serve as a lightweight representation of images in situations whereno SWT display exists yet, and are used mainly in conjunction with imageregistries. This package contains the image descriptor framework, whichis a simple hierarchy rooted at the abstract class ImageDescriptor.The framework includes abstract subclasses for composing images (CompositeImageDescriptor)as well as a ready-made concrete subclass for loading images from files(FileImageDescriptor).The class JFaceResources maintains global state on behalf ofJFace itself consisting of JFace's own image registry, font registry, resourcebundle, and preference store.&nbsp;
package,org/eclipse/jface/operation,Provides JFace support for long-running operations.Package SpecificationLong-running operations must be dealt with specially in order to keep theUI helpful and responsive. Typically this involves temporarily disablingmost controls and displaying a busy cursor and progress indicator; whilethe operation is in progress, the only requests that will be accepted willbe ones to cancel the operation.The IRunnableWithProgress interface should be implemented byany class whose instances are intended to be executed as long-running operations.These objects can then be run in any runnable context (IRunnableContext),including such standard JFace UI components as application windows (ApplicationWindow),wizard dialogs (WizardDialog), and progress monitor dialogs (ProgressMonitorDialog).The utility class ModalContext defines the basic mechanism andUI event loop for modal operations.
package,org/eclipse/jface/preference,Provides a framework for preferences.Package SpecificationA preference manager (class PreferenceManager) maintainsa tree of preference nodes. Preferences are presented to the enduser in a preference dialog consisting of preference pages.A preference page consists of multiple preference fields, which can bedisplayed and modified though field editors. The framework containsan abstract base class for preference dialogs (PreferenceDialog),and an abstract preference page class (FieldEditorPreferencePage)for hosting these field editors.The individual preference values are maintained in a preference store(IPreferenceStore). Each preference has a current value and adefault value use to (re-)initialize it. The framework provides a concretepreference store implementation (PreferenceStore) based on aninternal java.util.Properties object, with support for persistingthe non-default preference values to files or streams.A field editor presents the value of a single preference to the enduser. The value is loaded from the preference store; if modified by theend user, the value is validated and eventually stored back to the preferencestore.This package contains ready-to-use field editors for various types ofpreferences:BooleanFieldEditor - booleansIntegerFieldEditor - integersStringFieldEditor - text stringsRadioGroupFieldEditor - enumerationsColorFieldEditor - RGB colorsFontFieldEditor - fontsDirectoryFieldEditor - directoriesFileFieldEditor - filesPathEditor - pathsAll field editors are subclasses of the abstract base class FieldEditor;the framework allows new kinds of field editors to be defined by subclassingthis class or one of its subclasses.Note: None of the classes in this package maintain global state.&nbsp;
package,org/eclipse/jface/wizard,Provides a framework for wizards.Package SpecificationA wizard dialog is a specialized window for walking the end user througha sequence of steps; each step is presented on a separate page.At the most abstract level, the protocol is given by 3 interfaces:IWizard - a wizard consisting of several wizard pagesIWizardPage - an individual wizard pageIWizardContainer - the outside world from the point of view ofa wizardA wizard is any object implementing IWizard. The abstract baseclass Wizard is provided as a starting point; it is simpler tosubclass Wizard than to implement IWizard from scratch.The main responsibility of a Wizard subclass is doing the realwork when the wizard finishes.Similarly, a wizard page is any object implementing IWizardPage.The abstract base class WizardPage is provided as a starting point.The main responsibility of a WizardPage subclass is providingthe SWT controls and the backing logic for a single wizard page.WizardDialog is a ready-to-use JFace dialog that is instantiatedwith a wizard and acts as the wizard's container. This dialog has a standardlayout: an area at the top containing the wizard's title, description,and image; the actual wizard page appears in the middle; below it is aprogress indicator; and at the bottom is an area with a message line anda button bar containing Next, Back, Finish, Cancel, and Help buttons.WizardSelectionPage, a special abstract subclass of WizardPage,allows whole other wizards to be connected to a root page.Note: None of the classes in this package maintain global state.&nbsp;
package,org/eclipse/jface/internal/text/revisions,Internal classes and helpers to implement the revision model and its UI presentation. Seethe org.eclipse.jface.text.revisionspackage for the API classes implementing the revision model.Contains everything needed to: paint revision information in the vertical ruler adapt the revision information to (quick) diff scriptsThis package is internal and may be subject to change without notice.
package,org/eclipse/jface/internal/text/link/contentassist,This package is a modified copy of org.eclipse.jface.text.contentassist that supports the linked mode proposals.This package is internal and may disappear if the changes are merged with the API content assist package. Subject to change without notice.
package,org/eclipse/jface/bindings,Provides support for bindings between commands and various user input events(e.g., keyboard shortcuts).Package SpecificationThis package provides the common classes and abstract classes required toprovide binding support.All the real work in this package is carried out by theBindingManager, and most work with bindings can be carried outdirectly with it. The binding manager manages a collection of bindings, anddecides which bindings are active at any point in time. By changes the variousproperties of the manager, the active bindings will change. The bindingmanager implements a caching scheme that is optimized for an infreqeuntlychanging set of bindings, but frequently changing properties.The binding manager also manages schemes. A scheme is a grouping of bindings.To create a scheme, use BindingManager.getScheme(String). Thescheme must then be defined before it can be used.If you wish to implement your own type of binding, then you must subclassTrigger and TriggerSequence. Then, simply use thesesubclasses with the BindingManager.
package,org/eclipse/jface/bindings/keys,Provides support for bindings between commands and keys.Package SpecificationThis just a key-specific implementation of the generic bindings and triggersupport. This package provides an abstraction layer between the SWT key eventsand key bindings within JFace.KeySequence is a TriggerSequence that hasKeyStroke instances as triggers. A KeyStroke iscomposed of one or more keys held down at the same time. A key stroke endswhen the keys are released. A key stroke can contain zero or more modifierskeys, but it always contains exactly one natural key. A modifier key is one ofCtrl, Shift, Alt, or Command. A natural key is anything else.Natural keys are further subdivided into special keys and character keys.Character keys are keys that have an ASCII representation (e.g., Space, 'A' andBackspace). Special keys are ones that do not (e.g., Arrow Up, F11, andNumLock).SWTKeySupport is a static class that provides the link between SWTand these internal representations. It has methods for converting between SWTkey events and the internal representation, and vice versa. It also providesaccess to the native-style key formatting facilities.
package,org/eclipse/jface/bindings/keys/formatting,Provides support for formatting key sequences.Package SpecificationThis is a collection fo various formatters for key sequences. The formattersare accessible through the KeyFormatterFactory. To change howkeys are formatted in the user interface, callKeyFormatterFactory.setDefault(IKeyFormatter). They providedformatters are:FormalKeyFormatterProvides a formal grammar for reading and writing key sequences.NativeKeyFormatterProvide a native-looking, human-readable format for keys.CompactKeyFormatterA variation of the native formatter that provides a more compact representation.EmacsKeyFormatterAn Xemacs-style formatter (e.g., C^x C^x).
package,org/eclipse/jface/viewers,Provides a framework for viewers, which are model-basedcontent adapters for SWT widgets.Package SpecificationA viewer is a model-based adapter on an SWT widget.&nbsp; Each viewer hasfour parts:an input - the object that serves as the viewer's modela widget - the SWT control through which the viewer's model is displayeda content provider - mediates between the model and viewera label provider - maps model objects to displayable labels containingtext and/or an imageThis package contains the viewer framework. The viewer framework is anindependent JFace module. Using it requires a knowledge of SWT, but doesnot require familiarity with any of the other JFace modules. The frameworkconsists of abstract base classes for viewers (Viewer, StructuredViewer,AbstractTreeViewer) together with concrete viewer classes (ListViewer,TreeViewer,TableViewer,TableTreeViewer, CheckboxTreeViewer,and CheckboxTableViewer),and various lesser support classes. The concrete structured viewer classesare ready-to-use and have built-in support for drag-and-drop, filtering(IViewerFilter and ViewerFilter), and sorting (IViewerSorterand ViewerSorter); these classes may also be subclassed furtherif required.In general terms, creating a viewer involves the following steps:instantiating a viewer on some pre-existing SWT widget,setting the viewer's content provider (an object implementing IContentProvider),setting the viewer's label provider (an object implementingILabelProvider),and, finally, setting the viewer's input.Once a viewer's input is set, the viewer becomes active. As the model changes,it is the content provider's responsibility to respond to changes to themodel by telling the viewer what to change (done by calling add and removemethods on the viewer). An existing viewer may be retargeted by givingit a different object as input; the viewer is responsible for informingthe content provider of these kinds of wholesale changes (IContentProvider.inputChanged).Also, each viewer registers with its label provider for notification ofchanges that would affect what the viewer displays (see ILabelProviderListener.stateChanged).Note: None of the classes in this package maintain global state.&nbsp;
package,org/eclipse/jface/viewers/deferred,Provides a framework for viewers that handle deferred contents. Package SpecificationThe deferred viewers are viewers that can handle concurrent updates from a variety of Threads. &nbsp; 
package,org/eclipse/jface/window,Provides a general framework for creating and managingwindows.Package SpecificationA JFace window is an object that has no visual representation (no widgets)until it is told to open. All JFace windows, including dialogs, are instancesof the abstract class Window or a subclass. This package containsthe base window classes:Window itself, which provides supportfor a basic windows; and ApplicationWindow, which provides ready-to-usesupport for a high-level main window with standard menus, tool bar, andstatus line. Both of these classes may be subclassed to define additionaltypes of window as required.This package also contains WindowManager, instance of whichare used for managing a group of windows. Window managers are useful inapplications which create many different windows (dialogs, wizards, etc.)in addition to a main window. Window managers are not required for simpleapplications.The only global state maintained by classes in this package is a defaultimage for window title bars (Window.setDefaultImage).
package,org/eclipse/jface/text/reconciler,Provides a reconciler add-on for an ITextViewer.A&nbsp; reconciler provides generic synchronization support&nbsp; withthe content of the document serving as the ITextViewer's input.There is no explicit model of what is synchronized.Package SpecificationIReconciler defines the concept of a reconciler. It collaborateswith content type specific reconciling strategies (IReconcilingStrategy)which perform the synchronization for a given dirty region. The packagecontains a default implementation of IReconciler (Reconciler).Reconciler and MonoReconciler implements reconcilingas a periodic background activity and folds co-located changes while beinginactive.
package,org/eclipse/jface/text/templates/persistence,Provides persistence support for templates.Packages org.eclipse.jface.text.templates org.eclipse.ui.workbench.texteditor.templates org.eclipse.ui.editors.templatesIntroductionTemplates are shortcuts for frequently used fragments of text such ascode patterns or complex text entities. They may contain variableswhich are only resolved at the time when the template is insertedwithin a context. Together with linked mode, inserting a template cancreate a on-the-fly edit mask within a text viewer.Templates are specified as text, variables are defined using the ${variable}notation known fromAnt, for example. The following snippet shows an example template foran instance check in Java:if (${name} instanceof ${type}) {&nbsp;&nbsp;&nbsp; ${type} ${new_name} = (${type})${name};&nbsp;&nbsp;&nbsp; ${cursor}}In this template, the variables (name,type, ...) are resolvedwhen inserted into java source and changing one variable instance willalso change the other. When leaving linked mode, the caret is placed atthe cursor variable.Template functionality can be added to a custom text editor by offeringTemplateProposals as content assist choices, which issimplified by using a subclass of TemplateCompletionProcessor. User template management can beoffered by including a TemplatePreferencePage which uses a TemplateStore and ContextTypeRegistry as theunderlying model to store templates. The org.eclipse.ui.editors.templatesextension point can be used to allow other plug-ins to contributetemplates to an editor. This is accomplished by using the ContributionTemplateStore and ContributionContextTypeRegistrysubclasses of the above types.Template variables are resolved by a TemplateVariableResolver. GlobalTemplateVariables offerssome default variables such as date, user, and selection, but advancedfeatures such as resolving to language constructs can be performed insubclasses.Classes Template a template consists of name, contexttype identifier, and a pattern. TemplateTranslator and TemplateBuffer are used toparse the template grammar and don't need to be used usually. A TemplateProposal can beoffered in content assist, possibly created by a subclass of TemplateCompletionProcessor. TemplateStore and ContextTypeRegistry manage aset of templates within a plug-in and offer ways to store them in thepreferences or externally in XML streams via a TemplateReaderWriter. ContributionTemplateStore and ContributionContextTypeRegistryadd awareness for the org.eclipse.ui.editors.templatesextension point. TemplatePreferencePage allowsthe user to access the templates within a TemplateStore.ExampleSee the Template Editor Example in the org.eclipse.ui.examples.javaeditor project.
package,org/eclipse/jface/text/formatter,Provides a content formatter add-on for an ITextViewer.A content formatter changes the formatting of a document region whilepreserving and correctly updating the positions of the document.Package SpecificationIContentFormatter defines the concept of a text formatter. Itcollaborates with content type specific formatting stratgies (IFormattingStrategy)which for a given document region format the subregion with thematchingcontent type. The package contains a default implementation of IContentFormatter(ContentFormatter).Additionally, an implementation of IContentFormatterExtensionis providedfor text edit based formatting strategies. This implementation onlyaccepts formatting strategiesimplementing the extension interface IFormattingStrategyExtension.These formatting strategies are required to handle the positionupdating of the document. To facilitate the work with these text editbased formatting strategies, a default implementation called ContextBasedFormattingStrategyis provided. Formatting strategies inheriting from this class are textedit based and behave context dependent. Depending on the formattingcontext that is passedto the content formatter, different preferences and modes can be usedto format different parts of a document.To set up a proper working text edit based content formatter, thefollowing steps are needed: Create an instance of IFormattingContext. The defaultimplementation FormattingContext alreadyprovides support for the conversion of preferences from a preferencestore to a map and vice versa. The method getPreferenceKeysusually has to be overridden to return the appropriate keys of thepreferences used during the formatting process. Then register a map ofpreferenceswith the formatting context by calling setProperty(String, Object)with the property identifier FormattingContextProperties.CONTEXT_PREFERENCES. Create an instance of the text edit based content formatter class MultiPassContentFormatter. The document partitioning andits associateddefault content type have to be passed to the constructor. Thisinformation is needed since the content formatter is able to formatdocumentsaccording to arbitrary partitionings and default content types. Register the formatting strategies for the content types thathave to be formatted. If a formatting strategy isregistered as master strategy, it is automatically associated with thedefault content type of the specified partitioning.If the formatting strategy is registered as slave strategy, it isassociated with the indicated content type during the registration.Note that the master strategy can also be registered as a slavestrategy for a content type other than the default content type. Specify the proper formatting mode (seeFormattingContextProperties): For whole document formatting set the property CONTEXT_DOCUMENTof the created formatting context to true. This isequivalent to setting CONTEXT_REGION with a regionspanning the whole document. For multiple region formatting set the property CONTEXT_REGIONof the formatting context. Note that the content formatterautomatically aligns the offset of a region to a line start for themaster formatting strategy, it also completes eventual partitionscovered only partially by the region for the slave formattingstrategies. For explicit formatting of a partition with the formattingstrategy registered for a certain content type use theproperty CONTEXT_PARTITION. Note that the region denoted bythis property must correspond to a partition relative to the specifiedpartitioning in the document to be formatted. The content type of thisproperty overrides the content type of the partitionin the document. Call the method MultiPassContentFormatter#format(IDocument,IFormattingContext) with the created formatting contextand the document to be formatted.
package,org/eclipse/jface/text/hyperlink,Provides support for detecting and displaying hyperlinks in ISourceViewers.SourceViewer supports hyperlinked text regions inline in the displayed text. It delegates the detection and presentation of hyperlinks to IHyperlinkDetector and IHyperlinkPresenter, respectively.Override the following methods in SourceViewerConfiguration to customize the hyperlink behavior of a source viewer: getHyperlinkDetectors() to specify the set of hyperlink detectors used by the viewer getHyperlinkPresenter() to specify the set of hyperlink presenters used by the viewer getHyperlinkStateMask() to specify when hyperlinks are activated
package,org/eclipse/jface/text/presentation,Provides a presentation reconciler add-on for an ITextViewer.A presentation reconciler keep the presentation (styles and colors) insync with the content of the document serving as the ITextViewer'sinput.Package SpecificationIPresentationReconciler defines the concept of a presentationreconciler. It collaborates with content type specific presentation damagers(IPresentationDamager) which for a given document change determinethe region of the presentation which must be rebuild, and content typespecific presentation repairers (IPresentationRepairer) whichconstruct for a given damage region the document presentation. The packagecontains a default implementation of IPresentationReconciler (PresentationReconciler).
package,org/eclipse/jface/text/quickassist,This package provides the quick assist assistant add-on for an ISourceViewer.The quick assist assistant's purpose is to propose, display, and insert quick assists and quick fixesavailable at the current source viewer's quick assist invocation context.A quick fix is a completion that can correct a problem reported and visible through an Annotationwhile a quick assist is not related to a problem or Annotation. Since quick assists can be proposedwhere appropriate they are normally not visible in the viewer. The quick assist assistant implementation inthis package can show the quick assists that are available on the current line.Package SpecificationIQuickAssistAssistant defines the concept of the quick assist assistant add-on.It collaborates with a quick assist processor (IQuickAssistProcessor)in order to generate quick fix and quick assist completion proposals (ICompletionProposal)available at the current quick assist invocation context (IQuickAssistInvocationContext).The package provides a default implementation QuickAssistAssistant which completely definesand implements the UI and the control flow for a quick assist assistant.&nbsp;
package,org/eclipse/jface/action,Provides support for shared UI resources such as menus,tool bars, and status lines.Package SpecificationContribution managers coordinate contributions to shared UI resources suchas menus, menu bars, tool bars, and status lines. ContributionManagermaintains the contributions as a dynamic list of contribution items (IContributionItems).Separators (Separator) can be included in contribution lists tobreak up the list's visual representation. Internally, contribution listscan be organized into named groups via special group markers (GroupMarker)to facilitate programatic insertion at specific positions within the list.Three specific contribution managers are provided: a status line manager(StatusLineManager), a tool bar manager (ToolBarManager),and a hierarchical menu manager (MenuManager).Actions (IAction) are commands which can be triggered fromthe UI, like the ones found in menus, toolbars, and buttons. Menus andtools bars are typically populated with contribution items that delegateto actions (ActionContributionItem).Note: None of the classes in this package maintain global state.&nbsp;
package,org/eclipse/jface/fieldassist,Provides classes that help communicate proper content for fields in dialogs and wizards.Package SpecificationThis package provides classes that can be used to guide a dialog user through choosingappropriate content for fields in a dialog or wizard.A ContentProposalAdapter can be attached to an arbitrary control to provide a popup showing content proposals. These proposals appear when the definedassist keystroke is invoked. The ContentProposalAdapter manages the creation, hiding, and showing of the proposal popup, as well as the proper handling of key eventsbetween the adapted control and its popup. Implementors of IControlContentAdapterallow the adapter to set and retrieve the contents of the supplied control.An AutoCompleteField configures a ContentProposalAdapter in a mannerthat supports automatic field completion popups that filter based on the control'scontents.ControlDecoration can be used to decorate an arbitrary control with an image that communicates information about the control's content. Decorations can beused to show additional information about a field, such as its status, or a cuethat shows availability of content proposals. Decorations are defined in pre-definedlocations relative to the control, and can be set up to show at all times, or onlywhen the control has focus. It is up to the client to ensure there is enoughspace allocated to render the control decoration. Decorations can optionally show descriptive text when the user hovers over them. DecoratedField can also be used to decorate a control. The main differenceis that decorated fields reserve space for multiple decorations in particularlocations around the control. To do this, the field manages the creation of the field's control, using a specialized layout to ensure there is adequate space reserved for decorations around the control. Other than using the field to manage the decorations themselves, clients are expected to interact directly with the control. Note: None of the classes in this package maintain global state.
package,org/apache/commons/collections,This package contains the interfaces and utilities shared across all the subpackages of this component.The following collection implementations are provided in the package:ArrayStack - a non synchronized Stack that follows the same API as java util StackExtendedProperties - extends the Properties class to add extra functionality
package,org/apache/commons/collections/comparators,This package contains implementations of the{@link java.util.Comparator Comparator} interface.You may also consider using {@link org.apache.commons.collections.ComparatorUtils ComparatorUtils},which is a single class that uses static methods to construct instancesof the classes in this package.
package,org/apache/commons/collections/list,This package contains implementations of the{@link java.util.List List} interface.The following implementations are provided in the package:TreeList - a list that is optimised for insertions and removals at any index in the listCursorableLinkedList - a list that can be modified while the listIterator (cursor) is being usedNodeCachingLinkedList - a linked list that caches the storage nodes for a performance gainThe following decorators are provided in the package:Synchronized - synchronizes method access for multi-threaded environmentsUnmodifiable - ensures the collection cannot be alteredPredicated - ensures that only elements that are valid according to a predicate can be addedTyped - ensures that only elements that are of a specific type can be addedTransformed - transforms each element addedFixedSize - ensures that the size of the list cannot changeLazy - creates objects in the list on demandGrowth - grows the list instead of erroring when set/add used with index beyond the list sizeSetUnique - a list that avoids duplicate entries like a Set
package,org/apache/commons/collections/functors,This package contains implementations of the{@link org.apache.commons.collections.Closure Closure},{@link org.apache.commons.collections.Predicate Predicate},{@link org.apache.commons.collections.Transformer Transformer} and{@link org.apache.commons.collections.Factory Factory} interfaces.These provide simple callbacks for processing with collections.
package,org/apache/commons/collections/iterators,This package contains implementations of the{@link java.util.Iterator Iterator} interface.You may also consider using {@link org.apache.commons.collections.IteratorUtils IteratorUtils},which is a single class that uses static methods to construct instancesof the classes in this package.
package,org/apache/commons/collections/buffer,This package contains implementations of the{@link org.apache.commons.collections.Buffer Buffer} interface.The following implementations are provided in the package:PriorityBuffer - provides for removal based on a comparator orderingBoundedFifoBuffer - implements a buffer with a fixed size that throws exceptions when fullCircularFifoBuffer - implements a buffer with a fixed size that discards oldest when fullUnboundedFifoBuffer - implements a buffer that grows in size if necessaryThe following decorators are provided in the package:Synchronized - synchronizes method access for multi-threaded environmentsUnmodifiable - ensures the collection cannot be alteredPredicated - ensures that only elements that are valid according to a predicate can be addedTyped - ensures that only elements that are of a specific type can be addedTransformed - transforms elements added to the bufferBlocking - blocks on get and remove until an element is available
package,org/apache/commons/collections/bidimap,This package contains implementations of the{@link org.apache.commons.collections.BidiMap BidiMap},{@link org.apache.commons.collections.OrderedBidiMap OrderedBidiMap} and {@link org.apache.commons.collections.SortedBidiMap SortedBidiMap} interfaces.A BidiMap is an extension to Map that allows keys and values to be looked up with equal ease.One example usage is a system communicating to a legacy datasource that must convert codesfrom the new format to the old format and vice versa.The following implementations are provided in the package:DualHashBidiMap - uses two HashMaps to implement BidiMapDualTreeBidiMap - uses two TreeMaps to implement SortedBidiMapTreeBidiMap - red-black tree implementation of OrderedBidiMapThe following decorators are provided in the package:Unmodifiable - ensures the map cannot be alteredSynchronized - synchronizes method access for multi-threaded environmentsPredicated - ensures that only elements that are valid according to a predicate can be addedTyped - ensures that only elements that are of a specific type can be addedTransformed - transforms each element addedFixedSize - ensures that the size of the map cannot changeLazy - creates objects in the map on demandListOrdered - ensures that insertion order is retained-->
package,org/apache/commons/collections/bag,This package contains implementations of the{@link org.apache.commons.collections.Bag Bag} and {@link org.apache.commons.collections.SortedBag SortedBag} interfaces.A bag stores an object and a count of the number of occurences of the object.The following implementations are provided in the package:HashBag - implementation that uses a HashMap to store the dataTreeBag - implementation that uses a TreeMap to store the dataThe following decorators are provided in the package:Synchronized - synchronizes method access for multi-threaded environmentsUnmodifiable - ensures the bag cannot be alteredPredicated - ensures that only elements that are valid according to a predicate can be addedTyped - ensures that only elements that are of a specific type can be addedTransformed - transforms each element added to the bag
package,org/apache/commons/collections/set,This package contains implementations of the{@link java.util.Set Set} and{@link java.util.SortedSet SortedSet} interfaces.The implementations are in the form of direct implementations and decorators.A decorator wraps another implementation of the interface to add somespecific additional functionality.The following implementations are provided in the package:CompositeSet - a set that combines multiple sets into oneThe following decorators are provided in the package:Synchronized - synchronizes method access for multi-threaded environmentsUnmodifiable - ensures the collection cannot be alteredPredicated - ensures that only elements that are valid according to a predicate can be addedTyped - ensures that only elements that are of a specific type can be addedTransformed - transforms each element addedListOrdered - ensures that insertion order is retainedMapBackedSet - a set formed by decorating a Map
package,org/apache/commons/collections/map,This package contains implementations of the {@link java.util.Map Map},{@link org.apache.commons.collections.IterableMap IterableMap},{@link org.apache.commons.collections.OrderedMap OrderedMap} and{@link java.util.SortedMap SortedMap} interfaces.A Map provides a lookup from a key to a value.A number of implementations also support the new MapIterator interface that enablessimple iteration of map keys and values.The following implementations are provided:CaseInsensitiveMap - map that compares keys in a case insensitive wayCompositeMap - map that combines multiple maps into a single viewHashedMap - general purpose HashMap replacement supporting MapIteratorIdentityMap - map that uses == for comparison instead of equals()Flat3Map - designed for good performance at size 3 or lessLinkedMap - a hash map that maintains insertion order, supporting OrderedMapIteratorMultiKeyMap - map that provides special methods for using more than one key to access the valueReferenceMap - allows the garbage collector to collect keys and values using equals() for comparisonReferenceIdentityMap - allows the garbage collector to collect keys and values using == for comparisonSingletonMap - a fully featured map to hold one key-value pairStaticBucketMap - internally synchronized and designed for thread-contentious environmentsThe following decorators are provided:Unmodifiable - ensures the collection cannot be alteredPredicated - ensures that only elements that are valid according to a predicate can be addedTyped - ensures that only elements that are of a specific type can be addedTransformed - transforms each element addedFixedSize - ensures that the size of the map cannot changeLazy - creates objects in the map on demandListOrdered - ensures that insertion order is retained
package,org/apache/commons/collections/collection,This package contains implementations of the{@link java.util.Collection Collection} interface.The following implementations are provided in the package:CompositeCollection - a collection that combines multiple collections into oneThe following decorators are provided in the package:Synchronized - synchronizes method access for multi-threaded environmentsUnmodifiable - ensures the collection cannot be alteredPredicated - ensures that only elements that are valid according to a predicate can be addedTyped - ensures that only elements that are of a specific type can be addedTransformed - transforms elements as they are added
package,java/io,Provides for system input and output through data streams,serialization and the file system.Unless otherwise noted, passing a null argument to a constructoror method in any class or interface in this package will cause aNullPointerException to be thrown.Package Specification Java Object Serialization Specification Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation,please see: Serialization Enhancements@since JDK1.0
package,java/rmi,Provides the RMI package. RMI is Remote Method Invocation. It is amechanism that enables an object on one Java virtual machine to invokemethods on an object in another Java virtual machine. Any object thatcan be invoked this way must implement the Remote interface. When suchan object is invoked, its arguments are ``marshalled'' and sent from thelocal virtual machine to the remote one, where the arguments are``unmarshalled.'' When the method terminates, the results aremarshalled from the remote machine and sent to the caller's virtualmachine. If the method invocation results in an exception beingthrown, the exception is indicated to caller.Package Specification##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### ##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.1
package,java/rmi/dgc,Provides classes and interface for RMI distributedgarbage-collection (DGC). When the RMI server returns an object toits client (caller of the remote method), it tracks the remoteobject's usage in the client. When there are no more references to theremote object on the client, or if the reference's ``lease'' expires andnot renewed, the server garbage-collects the remote object.Package Specification##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### ##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.1
package,java/rmi/registry,Provides a class and two interfaces for the RMI registry.A registry is a remote object that maps names to remote objects. Aserver registers its remote objects with the registry so that they canbe looked up. When an object wants to invoke a method on a remoteobject, it must first lookup the remote object using its name. Theregistry returns to the calling object a reference to the remoteobject, using which a remote method can be invoked.Package Specification##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### ##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.1
package,java/lang,Provides classes that are fundamental to the design of the Javaprogramming language. The most important classes are Object,which is the root of the class hierarchy, and Class, instances ofwhich represent classes at run time.Frequently it is necessary to represent a value of primitive type asif it were an object. The wrapper classes Boolean,Character, Integer, Long, Float, andDouble serve this purpose. An object of type Double,for example, contains a field whose type is double, representing thatvalue in such a way that a reference to it can be stored in a variableof reference type. These classes also provide a number of methods forconverting among primitive values, as well as supporting suchstandard methods as equals and hashCode. The Void class is anon-instantiable class that holds a reference to a Class objectrepresening the primitive type void.The class Math provides commonly used mathematical functions suchas sine, cosine, and square root. The classes String andStringBuffer similarly provide commonly used operations oncharacter strings.Classes ClassLoader, Process, Runtime,SecurityManager, and System provide system operationsthat manage the dynamic loading of classes, creation of external processes,host environment inquiries such as the time of day, and enforcement ofsecurity policies.Class Throwable encompasses objects that may be thrown by thethrow statement (&sect;14.16). Subclasses of Throwable represent errorsand exceptions.Package SpecificationCharacter EncodingsThe specification of the {@link java.nio.charset.Charsetjava.nio.charset.Charset} class describes the naming conventions for characterencodings as well as the set of standard encodings that must be supported byevery implementation of the Java platform. ##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.0
package,java/lang/ref,Provides reference-object classes, which support a limited degree ofinteraction with the garbage collector. A program may use a reference objectto maintain a reference to some other object in such a way that the latterobject may still be reclaimed by the collector. A program may also arrange tobe notified some time after the collector has determined that the reachabilityof a given object has changed.Package SpecificationA reference object encapsulates a reference to some other object sothat the reference itself may be examined and manipulated like any otherobject. Three types of reference objects are provided, each weaker than thelast: soft, weak, and phantom. Each typecorresponds to a different level of reachability, as defined below. Softreferences are for implementing memory-sensitive caches, weak references arefor implementing canonicalizing mappings that do not prevent their keys (orvalues) from being reclaimed, and phantom references are for schedulingpre-mortem cleanup actions in a more flexible way than is possible with theJava finalization mechanism. Each reference-object type is implemented by a subclass of the abstractbase {@link java.lang.ref.Reference} class. An instance of one ofthese subclasses encapsulates a single reference to a particular object, calledthe referent. Every reference object provides methods for getting andclearing the reference. Aside from the clearing operation reference objectsare otherwise immutable, so no set operation is provided. Aprogram may further subclass these subclasses, adding whatever fields andmethods are required for its purposes, or it may use these subclasses withoutchange.NotificationA program may request to be notified of changes in an object's reachability byregistering an appropriate reference object with a referencequeue at the time the reference object is created. Some time after thegarbage collector determines that the reachability of the referent has changedto the value corresponding to the type of the reference, it will add thereference to the associated queue. At this point, the reference is consideredto be enqueued. The program may remove references from a queue eitherby polling or by blocking until a reference becomes available. Referencequeues are implemented by the {@link java.lang.ref.ReferenceQueue}class. The relationship between a registered reference object and its queue isone-sided. That is, a queue does not keep track of the references that areregistered with it. If a registered reference becomes unreachable itself, thenit will never be enqueued. It is the responsibility of the program usingreference objects to ensure that the objects remain reachable for as long asthe program is interested in their referents. While some programs will choose to dedicate a thread to removing referenceobjects from one or more queues and processing them, this is by no meansnecessary. A tactic that often works well is to examine a reference queue inthe course of performing some other fairly-frequent action. For example, ahashtable that uses weak references to implement weak keys could poll itsreference queue each time the table is accessed. This is how the {@linkjava.util.WeakHashMap} class works. Because the {@linkjava.lang.ref.ReferenceQueue#poll ReferenceQueue.poll} method simplychecks an internal data structure, this check will add little overhead to thehashtable access methods.Automatically-cleared referencesSoft and weak references are automatically cleared by the collector beforebeing added to the queues with which they are registered, if any. Thereforesoft and weak references need not be registered with a queue in order to beuseful, while phantom references do. An object that is reachable via phantomreferences will remain so until all such references are cleared or themselvesbecome unreachable.ReachabilityGoing from strongest to weakest, the different levels of reachability reflectthe life cycle of an object. They are operationally defined as follows: An object is strongly reachable if it can be reached by somethread without traversing any reference objects. A newly-created object isstrongly reachable by the thread that created it. An object is softly reachable if it is not strongly reachable butcan be reached by traversing a soft reference. An object is weakly reachable if it is neither strongly norsoftly reachable but can be reached by traversing a weak reference. When theweak references to a weakly-reachable object are cleared, the object becomeseligible for finalization. An object is phantom reachable if it is neither strongly, softly,nor weakly reachable, it has been finalized, and some phantom reference refersto it. Finally, an object is unreachable, and therefore eligible forreclamation, when it is not reachable in any of the above ways.@version 1.11, 04/02/10@author	 Mark Reinhold@since	 1.2Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->
package,java/lang/reflect,Provides classes and interfaces for obtaining reflectiveinformation about classes and objects. Reflection allowsprogrammatic access to information about the fields, methodsand constructors of loaded classes, and the use of reflected fields,methods, and constructors to operate on their underlyingcounterparts, within security restrictions.AccessibleObject allows supression of access checks ifthe necessary ReflectPermission is available.Array provides static methods to dynamically create andaccess arrays.Classes in this package, along with java.lang.Classaccommodate applications such as debuggers, interpreters, objectinspectors, class browsers, and services such as Object Serializationand JavaBeans that need access to either the public members of atarget object (based on its runtime class) or the members declared bya given class.Package Specification##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### ##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.1
package,java/lang/instrument,Provides services that allow Java programming language agents to instrument programs running on the JVM. The mechanism for instrumentation is modification of the byte-codes of methods.Package Specification An agent is deployed as a JAR file. An attribute in the JAR file manifest specifies theagent class which will be loaded to start the agent. For implementations that support a command-line interface, an agent is started by specifying an option on the command-line. Implementations may also support a mechanism to start agents some time after the VM hasstarted. For example, an implementation may provide a mechanism that allows a tool to attach to a running application, and initiate the loading of the tool's agent intothe running application. The details as to how the load is initiated, is implementationdependent.Command-Line Interface On implementations with a command-line interface, an agent is started byadding this option to the command-line:-javaagent:jarpath[=options]jarpath is the path to the agent JAR file.options is the agent options.This switch may be used multiple times on the same command-line, thus creating multiple agents.More than one agent may use the same jarpath.An agent JAR file must conform to the JAR file specification.The manifest of the agent JAR file must contain the attribute Premain-Class. Thevalue of this attribute is the name of the agent class. The agent class must implement a public static premain method similar in principle to the main application entry point. After the Java Virtual Machine (JVM) has initialized, each premain method will be called in the order the agents were specified, then the real applicationmain method will be called. Each premain method must return in order for the startup sequence to proceed.The premain method has one of two possible signatures. The JVM first attempts toinvoke the following method on the agent class:public static voidpremain(String agentArgs, Instrumentation inst);If the agent class does not implement this method then the JVM will attempt to invoke:public static voidpremain(String agentArgs);The agent class may also have an agentmain method for use when the agent is started after VM startup. When the agent is started using a command-line option, the agentmainmethod is not invoked.The agent class will be loaded by the system class loader(see {@link java.lang.ClassLoader#getSystemClassLoader ClassLoader.getSystemClassLoader}). This isthe class loader which typically loads the class containing the application main method.The premain methods will be run under the same security and classloader rules as the application main method.There are no modeling restrictions on what the agent premain method may do.Anything application main can do, including creating threads, is legal from premain.Each agent is passed its agent options via the agentArgs parameter.The agent options are passed as a single string,any additional parsing should be performed by the agent itself.If the agent cannot be resolved (for example, because the agent class cannot be loaded,or because the agent class does not have an appropriate premain method), the JVM will abort.If a premain method throws an uncaught exception, the JVM will abort.Starting Agents After VM StartupAn implementation may provide a mechanism to start agents sometime after thethe VM has started. The details as to how this is initiated are implementation specific but typically the application has already started and its main method has already been invoked. In cases where an implementationsupports the starting of agents after the VM has started the following applies: The manifest of the agent JAR must contain the attribute Agent-Class. The value of this attribute is the name of the agent class. The agent class must implement a public static agentmain method. The system class loader ( {@link java.lang.ClassLoader#getSystemClassLoader ClassLoader.getSystemClassLoader}) must support a mechanism to add an agent JAR file to the system class path. The agent JAR is appended to the system class path. This is the class loader that typically loads the class containing the application main method. The agent class is loaded and theJVM attempts to invoke the agentmain method. The JVM first attempts to invoke the following method on the agent class:public static voidagentmain(String agentArgs, Instrumentation inst);If the agent class does not implement this method then the JVM will attempt to invoke:public static voidagentmain(String agentArgs);The agent class may also have an premain method for use when the agent is startedusing a command-line option. When the agent is started after VM startup the premainmethod is not invoked.The agent is passed its agent options via the agentArgs parameter.The agent options are passed as a single string,any additional parsing should be performed by the agent itself. The agentmain method should do any necessary initialization required to start the agent. When startup is complete the method should return. If the agent cannot be started(for example, because the agent class cannot be loaded,or because the agent class does not have a conformant agentmain method), the JVM willnot abort. If the agentmain method throws an uncaught exception it will be ignored.Manifest AttributesThe following manifest attributes are defined for an agent JAR file:Premain-Class When an agent is specified at JVM launch time this attribute			specifies the agent class.			That is, the class containing the premain method. When an agent is specified at JVM launch time this attribute			is required. If the attribute is not present the JVM will abort. Note: this is a class name, not a file name or path.							Agent-Class If an implementation supports a mechanism to start agents sometime after the VM has started then this attribute specifies the agent class. That is, the class containing the agentmain method. This attribute is required, if it is not present the agent will not be started. Note: this is a class name, not a file name or path.			Boot-Class-Path A list of paths to be searched by the bootstrap class loader. Paths represent directories or libraries (commonly referred to as JAR or zip libraries on many platforms). 			 These paths are searched by the bootstrap class loader after the platform specific mechanisms of locating a class have failed. Paths are searched in the order listed. Paths in the list are separated by one or more spaces. A path takes the syntax of the path component of a hierarchical URI. The path is absolute if it begins with a slash character ('/'), otherwise it is relative. A relative path is resolved against the absolute path of the agent JAR file. Malformed and non-existent paths are ignored.				When an agent is started sometime after the VM has			started then paths that do not represent a JAR file			are ignored. This attribute is optional.Can-Redefine-Classes Boolean (true or false, case irrelevant). Is the ability to redefine classes needed by this agent. Values other than true are considered false. This attribute is optional, the default is false.Can-Retransform-Classes Boolean (true or false, case irrelevant). Is the ability to retransform classes needed by this agent. Values other than true are considered false. This attribute is optional, the default is false.Can-Set-Native-Method-Prefix Boolean (true or false, case irrelevant). Is the ability to set native method prefix needed by this agent. Values other than true are considered false. This attribute is optional, the default is false. An agent JAR file may have both the Premain-Class and Agent-Classattributes present in the manifest. When the agent is started on the command-line usingthe -javaagent option then the Premain-Class attributespecifies the name of the agent class and the Agent-Class attribute isignored. Similarly, if the agent is started sometime after the VM has started, thenthe Agent-Class attribute specifies the name of the agent class(the value of Premain-Class attribute is ignored).Related DocumentationFor tool documentation, please see: JDK Tools and Utilities@since JDK1.5@revised 1.6
package,java/lang/management,Provides the management interface for monitoring and management of the Java virtual machine as well as the operating system on which the Java virtual machine is running. It allows both local and remote monitoring and management of the running Java virtual machine. Platform MXBeansThis package defines the management interface of the followingcomponents:Management InterfaceDescription {@link java.lang.management.ClassLoadingMXBean} Class loading system of the Java virtual machine. {@link java.lang.management.CompilationMXBean} Compilation system of the Java virtual machine. {@link java.lang.management.MemoryMXBean} Memory system of the Java virtual machine. {@link java.lang.management.ThreadMXBean} Threads system of the Java virtual machine. {@link java.lang.management.RuntimeMXBean} Runtime system of the Java virtual machine. {@link java.lang.management.OperatingSystemMXBean} Operating system on which the Java virtual machine is running. {@link java.lang.management.GarbageCollectorMXBean} Garbage collector in the Java virtual machine. {@link java.lang.management.MemoryManagerMXBean} Memory manager in the Java virtual machine. {@link java.lang.management.MemoryPoolMXBean} Memory pool in the Java virtual machine.A platform MXBean is a managed bean that defines the managementinterface for one component for the platform and is specified in theManagementFactory class.An application can monitor the instrumentation of the Java virtual machine and manage certain characteristics inthe following ways:Direct access to an MXBean interface Get the MXBean instance through the static factory method and access the MXBean interface locally of the running virtual machine. Construct an MXBean proxy instance that forwards the method calls to a given {@link javax.management.MBeanServer MBeanServer} by calling {@link java.lang.management.ManagementFactory#newPlatformMXBeanProxy ManagementFactory.newPlatformMXBeanProxy}. A proxy is typically constructed to remotely access an MXBean of another running virtual machine. Indirect access via {@link javax.management.MBeanServer MBeanServer} interface Go through the {@link java.lang.management.ManagementFactory#getPlatformMBeanServer platform MBeanServer} to access MXBeans locally or a specific MBeanServerConnection to access MXBeans remotely. The attributes and operations of an MXBean use only JMX open types which include basic data types, {@link javax.management.openmbean.CompositeData CompositeData}, and {@link javax.management.openmbean.TabularData TabularData} defined in {@link javax.management.openmbean.OpenType OpenType}. Below shows a few examples of differentways to access MXBeans.ManagementFactoryThe {@link java.lang.management.ManagementFactory} class is the managementfactory class for the Java platform. This class provides a set of static factory methods to obtain the MXBeans for the Java platformto allow an application to access the MXBeans directly.A platform MBeanServer can be accessed with the{@link java.lang.management.ManagementFactory#getPlatformMBeanServer getPlatformMBeanServer} method. On the first call to this method,it creates the platform MBeanServer and registers all platform MXBeans including platform MXBeans defined in other packages such as{@link java.util.logging.LoggingMXBean}. Each platform MXBean is registered with a unique name defined in the{@link java.lang.management.ManagementFactory ManagementFactory} classfor constructing {@link javax.management.ObjectName ObjectName}. This is a single MBeanServer that can be shared by different managed components running within the same Java virtual machine. InteroperabilityA management application and a platform MBeanServer of a runningvirtual machine can interoperate without requiring classes used by the platform MXBean interfaces.The data types being transmitted between the JMX connectorserver and the connector client are JMX{@link javax.management.openmbean.OpenType open types} andthis allows interoperation across versions.A data type used by the MXBean interfaces are mapped toan open type when being accessed via MBeanServer interface.The data type mapping is specified in the{@link java.lang.management.ManagementFactory ManagementFactory} class.Ways to Access MXBeansThere are three different ways to access the management interfaces. Call the methods in the MXBean directly within the same Java virtual machine. RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean(); // Get the standard attribute VmVendor String vendor = mxbean.getVmVendor();Go through a MBeanServerConnection connecting to the platform MBeanServer of a running virtual machine. MBeanServerConnection mbs; // Connect to a running JVM (or itself) and get MBeanServerConnection // that has the JVM MXBeans registered in it ... try { // Assuming the RuntimeMXBean has been registered in mbs ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME); // Get standard attribute VmVendor String vendor = (String) mbs.getAttribute(oname, VmVendor); } catch (....) { // Catch the exceptions thrown by ObjectName constructor // and MBeanServer.getAttribute method ... }Use MXBean proxy. MBeanServerConnection mbs; // Connect to a running JVM (or itself) and get MBeanServerConnection // that has the JVM MBeans registered in it ... // Get a MBean proxy for RuntimeMXBean interface RuntimeMXBean proxy = ManagementFactory.newPlatformMXBeanProxy(mbs, ManagementFactory.RUNTIME_MXBEAN_NAME, RuntimeMXBean.class); // Get standard attribute VmVendor String vendor = proxy.getVmVendor();Platform ExtensionA Java virtual machine implementation may add its platform extension tothe management interface by defining platform-dependentinterfaces that extend the standard management interfaces to includeplatform-specific metrics and management operations. The static factory methods in the ManagementFactory class willreturn the MBeans with the platform extension.It is recommended to name the platform-specific attributes witha vendor-specific prefix such as the vendor's name toavoid collisions of the attribute name between the future extensionto the standard management interface and the platform extension.If the future extension to the standard management interface definesa new attribute for a management interface and the attribute nameis happened to be same as some vendor-specific attribute's name,the applications accessing that vendor-specific attribute would haveto be modified to cope with versioning and compatibility issues.Below is an example showing how to access a platform-specificattribute from Sun's implementation of the RuntimeMXBean.1) Direct access to the Sun-specific MXBean interface com.sun.management.RuntimeMXBean mxbean = (com.sun.management.RuntimeMXBean) ManagementFactory.getRuntimeMXBean(); // Get the standard attribute VmVendor String vendor = mxbean.getVmVendor(); // Get the platform-specific attribute Bar BarType bar = mxbean.getBar();2) Access the Sun-specific MXBean interface via MBeanServer MBeanServerConnection mbs; // Connect to a running JVM (or itself) and get MBeanServerConnection // that has the JVM MXBeans registered in it ... try { // Assuming the RuntimeMXBean has been registered in mbs ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME); // Get standard attribute VmVendor String vendor = (String) mbs.getAttribute(oname, VmVendor); // Check if this MXBean contains Sun's extension if (mbs.isInstanceOf(oname, com.sun.management.RuntimeMXBean)) { // Get platform-specific attribute Bar BarType bar = (String) mbs.getAttribute(oname, Bar); } } catch (....) { // Catch the exceptions thrown by ObjectName constructor // and MBeanServer methods ... } Unless otherwise noted, passing a null argument to a constructoror method in any class or interface in this package will cause a {@linkjava.lang.NullPointerException NullPointerException} to be thrown. The java.lang.management API is thread-safe.@see JMX Specification.@author Mandy Chung@version 1.15, 04/02/10@since 1.5
package,java/sql,Provides the API for accessing and processing data stored in a data source (usually a relational database) using the JavaTM programming language. This API includes a framework whereby differentdrivers can be installed dynamically to access different data sources.Although the JDBCTM API is mainly geared to passing SQL statements to a database, it provides for reading andwriting data from any data source with a tabular format.The reader/writer facility, available through the javax.sql.RowSet group of interfaces, can be customized touse and update data from a spread sheet, flat file, or any other tabular data source.What the JDBCTM 4.0 API IncludesThe JDBCTM 4.0 API includes boththe java.sql package, referred to as the JDBC core API,and the javax.sql package, referred to as the JDBC OptionalPackage API. This complete JDBC APIis included in the JavaTM Standard Edition (Java SETM), version 6. The javax.sql package extends the functionality of the JDBC API from a client-side API to a server-side API, and it is an essential partof the JavaTM Enterprise Edition(Java EETM) technology. VersionsThe JDBC 4.0 API incorporates all of the previous JDBC API versions: The JDBC 3.0 API The JDBC 2.1 core API The JDBC 2.0 Optional Package API (Note that the JDBC 2.1 core API and the JDBC 2.0 Optional Package API together are referred to as the JDBC 2.0 API.) The JDBC 1.2 API The JDBC 1.0 APIClasses, interfaces, methods, fields, constructors, and exceptions have the following since tags that indicate when they were introduced into the Java platform. When these since tags are used inJavadocTM comments for the JDBC API,they indicate the following: Since 1.6 -- new in the JDBC 4.0 API and part of the Java SE platform, version 6 Since 1.4 -- new in the JDBC 3.0 API and part of the J2SE platform, version 1.4 Since 1.2 -- new in the JDBC 2.0 API and part of the J2SE platform, version 1.2 Since 1.1 or no since tag -- in the original JDBC 1.0 API and part of the JDKTM, version 1.1NOTE: Many of the new features are optional; consequently, there is some variation in drivers and the features they support. Always check your driver's documentation to see whether it supports a feature beforeyou try to use it.NOTE: The class SQLPermission was added in theJavaTM 2 SDK, Standard Edition, version 1.3 release. This class is used to prevent unauthorizedaccess to the logging stream associated with the DriverManager,which may contain information such as table names, column data, and so on.What the java.sql Package ContainsThe java.sql package contains API for the following: Making a connection with a database via the DriverManager facility 	 DriverManager class -- makes a connection with a driver	 SQLPermission class -- provides permission when code running within a Security Manager, such as an applet, attempts to set up a logging stream through the DriverManager	 Driver interface -- provides the API for registering and connecting drivers based on JDBC technology (JDBC drivers); generally used only by the DriverManager class	 DriverPropertyInfo class -- provides properties for a JDBC driver; not used by the general user Sending SQL statements to a database 	 Statement -- used to send basic SQL statements	 PreparedStatement -- used to send prepared statements or basic SQL statements (derived from Statement)	 CallableStatement -- used to call database stored procedures (derived from PreparedStatement)	 Connection interface -- provides methods for creating statements and managing connections and their properties	 Savepoint -- provides savepoints in a transaction Retrieving and updating the results of a query 	 ResultSet interface Standard mappings for SQL types to classes and interfaces in the Java programming language 	 Array interface -- mapping for SQL ARRAY 	 Blob interface -- mapping for SQL BLOB 	 Clob interface -- mapping for SQL CLOB	 Date class -- mapping for SQL DATE 	 NClob interface -- mapping for SQL NCLOB	 Ref interface -- mapping for SQL REF 	 RowId interface -- mapping for SQL ROWID	 Struct interface -- mapping for SQL STRUCT 	 SQLXML interface -- mapping for SQL XML	 Time class -- mapping for SQL TIME 	 Timestamp class -- mapping for SQL TIMESTAMP 	 Types class -- provides constants for SQL types Custom mapping an SQL user-defined type (UDT) to a class in the	 Java programming language 	 SQLData interface -- specifies the mapping of a UDT to an instance of this class	 SQLInput interface -- provides methods for reading UDT attributes from a stream	 SQLOutput interface -- provides methods for writing UDT attributes back to a stream Metadata 	 DatabaseMetaData interface -- provides information about the database	 ResultSetMetaData interface -- provides information about the columns of a ResultSet object	 ParameterMetaData interface -- provides information about the parameters to PreparedStatement commands Exceptions		 SQLException -- thrown by most methods when there		 is a problem accessing data and by some methods for other reasons	 SQLWarning -- thrown to indicate a warning	 DataTruncation -- thrown to indicate that data may have 	 been truncated	 BatchUpdateException -- thrown to indicate that not all		 commands in a batch update executed successfully	java.sql and javax.sql Features Introduced in the JDBC 4.0 API auto java.sql.Driver discovery -- no longer need to load a java.sql.Driver class via Class.forName National Character Set support added Support added for the SQL:2003 XML data type SQLException enhancements -- Added support for cause chaining; New SQLExceptions added for common SQLState class value codes Enhanced Blob/Clob functionality -- Support provided to create and free a Blob/Clob instance as well as additional methods added to improve accessiblity Support added for accessing a SQL ROWID Support added to allow a JDBC application to access an instance of a JDBC resource that has been wrapped by a vendor, usually in an application server or connection pooling environment. Availability to be notfied when a PreparedStatement that is associated with a PooledConnection has been closed or the driver determines is invalid java.sql and javax.sql Features Introduced in the JDBC 3.0 API Pooled statements -- reuse of statements associated with a pooled connection Savepoints -- allow a transaction to be rolled back to a designated savepoint Properties defined for ConnectionPoolDataSource -- specify how connections are to be pooled Metadata for parameters of a PreparedStatement object Ability to retrieve values from automatically generated columns Ability to have multiple ResultSet objects returned from CallableStatement objects open at the same time Ability to identify parameters to CallableStatement objects by name as well as by index ResultSet holdability -- ability to specify whether cursors should be held open or closed at the end of a transaction Ability to retrieve and update the SQL structured type instance that a Ref object references Ability to programmatically update BLOB, CLOB, ARRAY, and REF values. Addition of the java.sql.Types.DATALINK data type -- allows JDBC drivers access to objects stored outside a data source Addition of metadata for retrieving SQL type hierarchiesjava.sql Features Introduced in the JDBC 2.1 Core API Scrollable result sets--using new methods in the ResultSet	 interface that allow the cursor to be moved to a particular row or to a	 position relative to its current position Batch updates Programmatic updates--using ResultSet updater methods New data types--interfaces mapping the SQL3 data types Custom mapping of user-defined types (UDTs) Miscellaneous features, including performance hints, the use of character	 streams, full precision for java.math.BigDecimal values,	 additional security, and	 support for time zones in date, time, and timestamp values. javax.sql Features Introduced in the JDBC 2.0 OptionalPackage API The DataSource interface as a means of making a connection. The Java Naming and Directory InterfaceTM (JNDI) is used for registering a DataSource object with a naming service and also for retrieving it. Pooled connections -- allowing connections to be used and reused Distributed transactions -- allowing a transaction to span diverse DBMS servers RowSet technology -- providing a convenient means of handling and passing dataCustom Mapping of UDTsA user-defined type (UDT) defined in SQL can be mapped to a class in the Javaprogramming language. An SQL structured type or an SQL DISTINCTtype are the UDTs that may be custom mapped. The following threesteps set up a custom mapping: Defining the SQL structured type or DISTINCT type in SQL Defining the class in the Java programming language to which the	 SQL UDT will be mapped. This class must implement the	 SQLData interface. Making an entry in a Connection object's type map that contains two things: the fully-qualified SQL name of the UDT the Class object for the class that implements the SQLData interface When these are in place for a UDT, calling the methodsResultSet.getObject or CallableStatement.getObject on that UDT will automatically retrieve the custom mapping for it. Also, thePreparedStatement.setObject method will automatically map theobject back to its SQL type to store it in the data source.Package Specification Specification of the JDBC 4.0 APIRelated Documentation Getting Started--overviews of the major interfaces Chapters on the JDBC API--from the online version of The Java Tutorial Continued JDBCTMAPI Tutorial and Reference, Third Edition--a complete reference and tutorial for the JDBC 3.0 API@since 1.1
package,java/applet,Provides the classes necessary to create an applet and the classes an appletuses to communicate with its applet context.The applet framework involves twoentities: the applet and the applet context. An applet is an embeddable window (see the Panel class) with a few extra methods that the applet context can use to initialize, start, and stop the applet.The applet context is an application that is responsible for loading and runningapplets. For example, the applet context could be a Web browser or an appletdevelopment environment.Package Specification##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### ##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.0
package,java/net,Provides the classes for implementing networking applications. The java.net package can be roughly divided in two sections: A Low Level API, which deals with the following abstractions: Addresses, which are networking identifiers, like IP addresses. Sockets, which are basic bidirectional data communication mechanisms. Interfaces, which describe network interfaces. A High Level API, which deals with the following abstractions: URIs, which represent Universal Resource Identifiers. URLs, which represent Universal Resource Locators. Connections, which represents connections to the resource pointed to by URLs. AddressesAddresses are used throughout the java.net APIs as either host identifiers, or socket endpoint identifiers.The {@link java.net.InetAddress} class is the abstraction representing an IP (Internet Protocol) address. It has two subclasses: {@link java.net.Inet4Address} for IPv4 addresses. {@link java.net.Inet6Address} for IPv6 addresses.But, in most cases, there is no need to deal directly with the subclasses, as the InetAddress abstraction should cover most of the needed functionality.About IPv6Not all systems have support for the IPv6 protocol, and while the Java networking stack will attempt to detect it and use it transparently when available, it is also possible to disable its use with a system property. In the case where IPv6 is not available, or explicitly disabled, Inet6Address are not valid arguments for most networking operations any more. While methods like {@link java.net.InetAddress#getByName} are guaranteed not to return an Inet6Address when looking up host names, it is possible, by passing literals, to create such an object. In which case, most methods, when called with an Inet6Address will throw an Exception.SocketsSockets are means to establish a communication link between machines over the network. The java.net package provides 4 kinds of Sockets: {@link java.net.Socket} is a TCP client API, and will typically be used to {@linkplain java.net.Socket#connect(SocketAddress) connect} to a remote host. {@link java.net.ServerSocket} is a TCP server API, and will typically {@linkplain java.net.ServerSocket#accept accept} connections from client sockets. {@link java.net.DatagramSocket} is a UDP endpoint API and is used to {@linkplain java.net.DatagramSocket#send send} and {@linkplain java.net.DatagramSocket#receive receive} {@linkplain java.net.DatagramPacket datagram packets}. {@link java.net.MulticastSocket} is a subclass of {@code DatagramSocket} used when dealing with multicast groups.Sending and receiving with TCP sockets is done through InputStreams and OutputStreams which can be obtained via the {@link java.net.Socket#getInputStream} and {@link java.net.Socket#getOutputStream} methods.InterfacesThe {@link java.net.NetworkInterface} class provides APIs to browse and query all the networking interfaces (e.g. ethernet connection or PPP endpoint) of the local machine. It is through that class that you can check if any of the local interfaces is configured to support IPv6.High level APIA number of classes in the java.net package do provide for a much higher level of abstraction and allow for easy access to resources on the network. The classes are: {@link java.net.URI} is the class representing a Universal Resource Identifier, as specified in RFC 2396. As the name indicates, this is just an Identifier and doesn't provide directly the means to access the resource. {@link java.net.URL} is the class representing a Universal Resource Locator, which is both an older concept for URIs and a means to access the resources. {@link java.net.URLConnection} is created from a URL and is the communication link used to access the resource pointed by the URL. This abstract class will delegate most of the work to the underlying protocol handlers like http or ftp. {@link java.net.HttpURLConnection} is a subclass of URLConnection and provides some additional functionalities specific to the HTTP protocol.The recommended usage is to use {@link java.net.URI} to identify resources, then convert it into a {@link java.net.URL} when it is time to access the resource. From that URL, you can either get the {@link java.net.URLConnection} for fine control, or get directly the InputStream.Here is an example:URI uri = new URI(http://java.sun.com/);URL url = uri.toURL();InputStream in = url.openStream();Protocol HandlersAs mentioned, URL and URLConnection rely on protocol handlers which must be present, otherwise an Exception is thrown. This is the major difference with URIs which only identify resources, and therefore don't need to have access to the protocol handler. So, while it is possible to create an URI with any kind of protocol scheme (e.g. myproto://myhost.mydomain/resource/), a similar URL will try to instantiate the handler for the specified protocol; if it doesn't exist an exception will be thrown.By default the protocol handlers are loaded dynamically from the default location. It is, however, possible to add to the search path by setting the java.protocol.handler.pkgs system property. For instance if it is set to myapp.protocols, then the URL code will try, in the case of http, first to load myapp.protocols.http.Handler, then, if this fails, http.Handler from the default location.Note that the Handler class has to be a subclass of the abstract class {@link java.net.URLStreamHandler}.Package Specification##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### ##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.0
package,java/util/logging,Provides the classes and interfaces of the JavaTM 2 platform's core logging facilities.The central goal of the logging APIs is to support maintaining and servicingsoftware at customer sites. There are four main target uses of the logs: Problem diagnosis by end users and system administrators. This consists of simple logging of common problems that can be fixed or tracked locally, such as running out of resources, security failures, and simple configuration errors. Problem diagnosis by field service engineers. The logging information used by field service engineers may be considerably more complex and verbose than that required by system administrators. Typically such information will require extra logging within particular subsystems. Problem diagnosis by the development organization. When a problem occurs in the field, it may be necessary to return the captured logging information to the original development team for diagnosis. This logging information may be extremely detailed and fairly inscrutable. Such information might include detailed tracing on the internal execution of particular subsystems. Problem diagnosis by developers. The Logging APIs may also be used to help debug an application under development. This may include logging information generated by the target application as well as logging information generated by lower-level libraries. Note however that while this use is perfectly reasonable, the logging APIs are not intended to replace the normal debugging and profiling tools that may already exist in the development environment. The key elements of this package include: Logger: The main entity on which applications make logging calls. A Logger object is used to log messages for a specific system or application component. LogRecord: Used to pass logging requests between the logging framework and individual log handlers. Handler: Exports LogRecord objects to a variety of destinations including memory, output streams, consoles, files, and sockets. A variety of Handler subclasses exist for this purpose. Additional Handlers may be developed by third parties and delivered on top of the core platform. Level: Defines a set of standard logging levels that can be used to control logging output. Programs can be configured to output logging for some levels while ignoring output for others. Filter: Provides fine-grained control over what gets logged, beyond the control provided by log levels. The logging APIs support a general-purpose filter mechanism that allows application code to attach arbitrary filters to control logging output. Formatter: Provides support for formatting LogRecord objects. This package includes two formatters, SimpleFormatter and XMLFormatter, for formatting log records in plain text or XML respectively. As with Handlers, additional Formatters may be developed by third parties.The Logging APIs offer both static and dynamic configuration control.Static control enables field service staff to set up a particular configuration and then re-launch the application with the new logging settings. Dynamic control allows for updates to the logging configuration within a currently running program. The APIs also allow for logging to be enabled or disabled for different functional areas of the system. For example, a field service engineer might be interested in tracing all AWT events, but might have no interest in socket events or memory management.Null PointersIn general, unless otherwise noted in the javadoc, methods andconstructors will throw NullPointerException if passed a null argument.The one broad exception to this rule is that the logging conveniencemethods in the Logger class (the config, entering, exiting, fine, finer, finest, log, logp, logrb, severe, throwing, and warning methods) will accept null values for all arguments except for the initial Level argument (if any).Related DocumentationFor an overview of control flow, please refer to the Java Logging Overview.@since 1.4
package,java/util/concurrent, Utility classes commonly useful in concurrent programming. Thispackage includes a few small standardized extensible frameworks, aswell as some classes that provide useful functionality and areotherwise tedious or difficult to implement. Here are briefdescriptions of the main components. See also the locks andatomic packages.ExecutorsInterfaces. {@link java.util.concurrent.Executor} is a simplestandardized interface for defining custom thread-like subsystems,including thread pools, asynchronous IO, and lightweight taskframeworks. Depending on which concrete Executor class is being used,tasks may execute in a newly created thread, an existingtask-execution thread, or the thread calling execute(), andmay execute sequentially or concurrently. {@linkjava.util.concurrent.ExecutorService} provides a more completeasynchronous task execution framework. An ExecutorService managesqueuing and scheduling of tasks, and allows controlled shutdown. The{@link java.util.concurrent.ScheduledExecutorService} subinterfaceand associated interfaces add support for delayed and periodic task execution.ExecutorServices provide methods arranging asynchronous execution ofany function expressed as {@link java.util.concurrent.Callable}, theresult-bearing analog of {@link java.lang.Runnable}. A {@linkjava.util.concurrent.Future} returns the results of a function, allowsdetermination of whether execution has completed, and provides a means tocancel execution. A {@link java.util.concurrent.RunnableFuture} isa Future that possesses a run method that upon execution,sets its results.Implementations. Classes {@linkjava.util.concurrent.ThreadPoolExecutor} and {@linkjava.util.concurrent.ScheduledThreadPoolExecutor} provide tunable,flexible thread pools. The {@link java.util.concurrent.Executors}class provides factory methods for the most common kinds andconfigurations of Executors, as well as a few utility methods forusing them. Other utilities based on Executors include the concreteclass {@link java.util.concurrent.FutureTask} providing a commonextensible implementation of Futures, and {@linkjava.util.concurrent.ExecutorCompletionService}, that assists incoordinating the processing of groups of asynchronous tasks.QueuesThe java.util.concurrent {@linkjava.util.concurrent.ConcurrentLinkedQueue} class supplies anefficient scalable thread-safe non-blocking FIFO queue. Fiveimplementations in java.util.concurrent support the extended {@linkjava.util.concurrent.BlockingQueue} interface, that defines blockingversions of put and take: {@linkjava.util.concurrent.LinkedBlockingQueue}, {@linkjava.util.concurrent.ArrayBlockingQueue}, {@linkjava.util.concurrent.SynchronousQueue}, {@linkjava.util.concurrent.PriorityBlockingQueue}, and {@linkjava.util.concurrent.DelayQueue}. The different classes cover the mostcommon usage contexts for producer-consumer, messaging, paralleltasking, and related concurrent designs. The {@linkjava.util.concurrent.BlockingDeque} interface extendsBlockingQueue to support both FIFO and LIFO (stack-based)operations. Class {@link java.util.concurrent.LinkedBlockingDeque}provides an implementation.TimingThe {@link java.util.concurrent.TimeUnit} class provides multiplegranularities (including nanoseconds) for specifying and controllingtime-out based operations. Most classes in the package containoperations based on time-outs in addition to indefinite waits. In allcases that time-outs are used, the time-out specifies the minimum timethat the method should wait before indicating that ittimed-out. Implementations make a &quot;best effort&quot; to detecttime-outs as soon as possible after they occur. However, an indefiniteamount of time may elapse between a time-out being detected and athread actually executing again after that time-out. All methodsthat accept timeout parameters treat values less than or equal tozero to mean not to wait at all. To wait forever, you can usea value of Long.MAX_VALUE.SynchronizersFour classes aid common special-purpose synchronization idioms.{@link java.util.concurrent.Semaphore} is a classic concurrency tool.{@link java.util.concurrent.CountDownLatch} is a very simple yet verycommon utility for blocking until a given number of signals, events,or conditions hold. A {@link java.util.concurrent.CyclicBarrier} is aresettable multiway synchronization point useful in some styles ofparallel programming. An {@link java.util.concurrent.Exchanger} allowstwo threads to exchange objects at a rendezvous point, and is usefulin several pipeline designs.Concurrent CollectionsBesides Queues, this package supplies Collection implementationsdesigned for use in multithreaded contexts:{@link java.util.concurrent.ConcurrentHashMap},{@link java.util.concurrent.ConcurrentSkipListMap},{@link java.util.concurrent.ConcurrentSkipListSet},{@link java.util.concurrent.CopyOnWriteArrayList}, and{@link java.util.concurrent.CopyOnWriteArraySet}.When many threads are expected to access a given collection,a ConcurrentHashMap is normally preferable toa synchronized HashMap, and aConcurrentSkipListMap is normally preferableto a synchronized TreeMap. ACopyOnWriteArrayList is preferable toa synchronized ArrayList when the expected number of readsand traversals greatly outnumber the number of updates to a list.The Concurrent prefix used with some classes in this package is ashorthand indicating several differences from similar synchronizedclasses. For example java.util.Hashtable andCollections.synchronizedMap(new HashMap()) aresynchronized. But {@link java.util.concurrent.ConcurrentHashMap} isconcurrent. A concurrent collection is thread-safe, but notgoverned by a single exclusion lock. In the particular case ofConcurrentHashMap, it safely permits any number of concurrent reads aswell as a tunable number of concurrent writes. Synchronized classescan be useful when you need to prevent all access to a collection viaa single lock, at the expense of poorer scalability. In other cases inwhich multiple threads are expected to access a common collection,concurrent versions are normally preferable. And unsynchronizedcollections are preferable when either collections are unshared, orare accessible only when holding other locks. Most concurrent Collection implementations (including most Queues)also differ from the usual java.util conventions in that their Iteratorsprovide weakly consistent rather than fast-fail traversal. Aweakly consistent iterator is thread-safe, but does not necessarilyfreeze the collection while iterating, so it may (or may not) reflectany updates since the iterator was created. Memory Consistency Properties Chapter 17 of the Java Language Specification defines thehappens-before relation on memory operations such as reads andwrites of shared variables. The results of a write by one thread areguaranteed to be visible to a read by another thread only if the writeoperation happens-before the read operation. The{@code synchronized} and {@code volatile} constructs, as well as the{@code Thread.start()} and {@code Thread.join()} methods, can formhappens-before relationships. In particular: Each action in a thread happens-before every action in that thread that comes later in the program's order. An unlock ({@code synchronized} block or method exit) of a monitor happens-before every subsequent lock ({@code synchronized} block or method entry) of that same monitor. And because the happens-before relation is transitive, all actions of a thread prior to unlocking happen-before all actions subsequent to any thread locking that monitor. A write to a {@code volatile} field happens-before every subsequent read of that same field. Writes and reads of {@code volatile} fields have similar memory consistency effects as entering and exiting monitors, but do not entail mutual exclusion locking. A call to {@code start} on a thread happens-before any action in the started thread. All actions in a thread happen-before any other thread successfully returns from a {@code join} on that thread.The methods of all classes in {@code java.util.concurrent} and itssubpackages extend these guarantees to higher-levelsynchronization. In particular: Actions in a thread prior to placing an object into any concurrent collection happen-before actions subsequent to the access or removal of that element from the collection in another thread. Actions in a thread prior to the submission of a {@code Runnable} to an {@code Executor} happen-before its execution begins. Similarly for {@code Callables} submitted to an {@code ExecutorService}. Actions taken by the asynchronous computation represented by a {@code Future} happen-before actions subsequent to the retrieval of the result via {@code Future.get()} in another thread. Actions prior to releasing synchronizer methods such as {@code Lock.unlock}, {@code Semaphore.release}, and {@code CountDownLatch.countDown} happen-before actions subsequent to a successful acquiring method such as {@code Lock.lock}, {@code Semaphore.acquire}, {@code Condition.await}, and {@code CountDownLatch.await} on the same synchronizer object in another thread. For each pair of threads that successfully exchange objects via an {@code Exchanger}, actions prior to the {@code exchange()} in each thread happen-before those subsequent to the corresponding {@code exchange()} in another thread. Actions prior to calling {@code CyclicBarrier.await} happen-before actions performed by the barrier action, and actions performed by the barrier action happen-before actions subsequent to a successful return from the corresponding {@code await} in other threads.@since 1.5
package,java/util/concurrent/atomic,A small toolkit of classes that support lock-free thread-safeprogramming on single variables. In essence, the classes in thispackage extend the notion of volatile values, fields, andarray elements to those that also provide an atomic conditional updateoperation of the form: boolean compareAndSet(expectedValue, updateValue); This method (which varies in argument types across differentclasses) atomically sets a variable to the updateValue if itcurrently holds the expectedValue, reporting true onsuccess. The classes in this package also contain methods to get andunconditionally set values, as well as a weaker conditional atomicupdate operation weakCompareAndSet described below. The specifications of these methods enable implementations toemploy efficient machine-level atomic instructions that are availableon contemporary processors. However on some platforms, support mayentail some form of internal locking. Thus the methods are notstrictly guaranteed to be non-blocking --a thread may block transiently before performing the operation. Instances of classes {@linkjava.util.concurrent.atomic.AtomicBoolean}, {@linkjava.util.concurrent.atomic.AtomicInteger}, {@linkjava.util.concurrent.atomic.AtomicLong}, and {@linkjava.util.concurrent.atomic.AtomicReference} each provide access andupdates to a single variable of the corresponding type. Each classalso provides appropriate utility methods for that type. For example,classes AtomicLong and AtomicInteger provide atomicincrement methods. One application is to generate sequence numbers,as in:class Sequencer { private final AtomicLong sequenceNumber = new AtomicLong(0); public long next() { return sequenceNumber.getAndIncrement(); }}The memory effects for accesses and updates of atomics generallyfollow the rules for volatiles, as stated in The Java LanguageSpecification, Third Edition (17.4 Memory Model): get has the memory effects of reading avolatile variable. set has the memory effects of writing (assigning) avolatile variable. lazySet has the memory effects of writing (assigning) a volatile variable except that it permits reorderings with subsequent (but not previous) memory actions that do not themselves impose reordering constraints with ordinary non-volatile writes. Among other usage contexts, lazySet may apply when nulling out, for the sake of garbage collection, a reference that is never accessed again. weakCompareAndSet atomically reads and conditionally writes a variable but does not create any happens-before orderings, so provides no guarantees with respect to previous or subsequent reads and writes of any variables other than the target of the weakCompareAndSet. compareAndSet and all other read-and-update operations such as getAndIncrement have the memory effects of both reading and writing volatile variables.In addition to classes representing single values, this packagecontains Updater classes that can be used to obtaincompareAndSet operations on any selected volatilefield of any selected class. {@linkjava.util.concurrent.atomic.AtomicReferenceFieldUpdater}, {@linkjava.util.concurrent.atomic.AtomicIntegerFieldUpdater}, and {@linkjava.util.concurrent.atomic.AtomicLongFieldUpdater} arereflection-based utilities that provide access to the associated fieldtypes. These are mainly of use in atomic data structures in whichseveral volatile fields of the same node (for example, thelinks of a tree node) are independently subject to atomicupdates. These classes enable greater flexibility in how and when touse atomic updates, at the expense of more awkward reflection-basedsetup, less convenient usage, and weaker guarantees.The {@link java.util.concurrent.atomic.AtomicIntegerArray}, {@linkjava.util.concurrent.atomic.AtomicLongArray}, and {@linkjava.util.concurrent.atomic.AtomicReferenceArray} classes furtherextend atomic operation support to arrays of these types. Theseclasses are also notable in providing volatile accesssemantics for their array elements, which is not supported forordinary arrays.The atomic classes also support method weakCompareAndSet,which has limited applicability. On some platforms, the weak versionmay be more efficient than compareAndSet in the normal case,but differs in that any given invocation of theweakCompareAndSet method may return falsespuriously (that is, for no apparent reason). Afalse return means only that the operation may be retried ifdesired, relying on the guarantee that repeated invocation when thevariable holds expectedValue and no other thread is alsoattempting to set the variable will eventually succeed. (Suchspurious failures may for example be due to memory contention effectsthat are unrelated to whether the expected and current values areequal.) Additionally weakCompareAndSet does not provideordering guarantees that are usually needed for synchronizationcontrol. However, the method may be useful for updating counters andstatistics when such updates are unrelated to the otherhappens-before orderings of a program. When a thread sees an updateto an atomic variable caused by a weakCompareAndSet, it doesnot necessarily see updates to any other variables thatoccurred before the weakCompareAndSet. This may beacceptable when, for example, updating performance statistics, butrarely otherwise. The {@link java.util.concurrent.atomic.AtomicMarkableReference}class associates a single boolean with a reference. For example, thisbit might be used inside a data structure to mean that the objectbeing referenced has logically been deleted. The {@linkjava.util.concurrent.atomic.AtomicStampedReference} class associatesan integer value with a reference. This may be used for example, torepresent version numbers corresponding to series of updates. Atomic classes are designed primarily as building blocks forimplementing non-blocking data structures and related infrastructureclasses. The compareAndSet method is not a generalreplacement for locking. It applies only when critical updates for anobject are confined to a single variable. Atomic classes are not general purpose replacements forjava.lang.Integer and related classes. They do notdefine methods such as hashCode andcompareTo. (Because atomic variables are expected to bemutated, they are poor choices for hash table keys.) Additionally,classes are provided only for those types that are commonly useful inintended applications. For example, there is no atomic class forrepresenting byte. In those infrequent cases where you wouldlike to do so, you can use an AtomicInteger to holdbyte values, and cast appropriately. You can also hold floatsusing Float.floatToIntBits and Float.intBitstoFloatconversions, and doubles using Double.doubleToLongBits andDouble.longBitsToDouble conversions.@since 1.5
package,java/util/concurrent/locks,Interfaces and classes providing a framework for locking and waitingfor conditions that is distinct from built-in synchronization andmonitors. The framework permits much greater flexibility in the use oflocks and conditions, at the expense of more awkward syntax. The {@link java.util.concurrent.locks.Lock} interface supportslocking disciplines that differ in semantics (reentrant, fair, etc),and that can be used in non-block-structured contexts includinghand-over-hand and lock reordering algorithms. The main implementationis {@link java.util.concurrent.locks.ReentrantLock}. The {@link java.util.concurrent.locks.ReadWriteLock} interfacesimilarly defines locks that may be shared among readers but areexclusive to writers. Only a single implementation, {@linkjava.util.concurrent.locks.ReentrantReadWriteLock}, is provided, sinceit covers most standard usage contexts. But programmers may createtheir own implementations to cover nonstandard requirements. The {@link java.util.concurrent.locks.Condition} interfacedescribes condition variables that may be associated with Locks.These are similar in usage to the implicit monitors accessed usingObject.wait, but offer extended capabilities. In particular,multiple Condition objects may be associated with a singleLock. To avoid compatibility issues, the names ofCondition methods are different than the correspondingObject versions. The {@link java.util.concurrent.locks.AbstractQueuedSynchronizer}class serves as a useful superclass for defining locks and othersynchronizers that rely on queuing blocked threads. The {@linkjava.util.concurrent.locks.AbstractQueuedLongSynchronizer} classprovides the same functionality but extends support to 64 bits ofsynchronization state. Both extend class {@linkjava.util.concurrent.locks.AbstractOwnableSynchronizer}, a simpleclass that helps record the thread currently holding exclusivesynchronization. The {@link java.util.concurrent.locks.LockSupport}class provides lower-level blocking and unblocking support that isuseful for those developers implementing their own customized lockclasses.@since 1.5
package,java/util/regex,Classes for matching character sequences against patterns specified by regularexpressions. An instance of the {@link java.util.regex.Pattern} class represents aregular expression that is specified in string form in a syntax similar tothat used by Perl. Instances of the {@link java.util.regex.Matcher} class are used to matchcharacter sequences against a given pattern. Input is provided to matchers viathe {@link java.lang.CharSequence} interface in order to support matchingagainst characters from a wide variety of input sources. Unless otherwise noted, passing a null argument to a methodin any class or interface in this package will cause a{@link java.lang.NullPointerException NullPointerException} to be thrown.Related Documentation An excellent tutorial and overview of regular expressions is Mastering RegularExpressions, Jeffrey E. F. Friedl, O'Reilly and Associates, 1997. ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since 1.4@version 1.9, 10/04/02@author Mike McCloskey@author Mark Reinhold
package,java/util/jar,Provides classes for reading and writing the JAR (Java ARchive) fileformat, which is based on the standard ZIP file format with anoptional manifest file. The manifest stores meta-information about theJAR file contents and is also used for signing JAR files.Package SpecificationThe java.util.jar package is based on the following specifications: Info-ZIP file format - The JAR format is based on the Info-ZIP file format. See java.util.zip package description. In JAR files, all file names must be encoded in the UTF-8 encoding. Manifest and Signature Specification - The manifest format specification.Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since 1.2
package,java/util/zip,Provides classes for reading and writing the standard ZIP and GZIPfile formats. Also includes classes for compressing and decompressingdata using the DEFLATE compression algorithm, which is used by theZIP and GZIP file formats. Additionally, there are utility classesfor computing the CRC-32 and Adler-32 checksums of arbitraryinput streams.Package Specification Info-ZIP Application Note 970311 - a detailed description of the Info-ZIP format upon which the java.util.zip classes are based. ZLIB Compressed Data Format Specification version 3.3 &nbsp; (PostScript) (RFC 1950) DEFLATE Compressed Data Format Specification version 1.3 &nbsp; (PostScript) (RFC 1951) GZIP file format specification version 4.3 &nbsp; (PostScript) (RFC 1952) CRC-32 checksum is described in RFC 1952 (above) Adler-32 checksum is described in RFC 1950 (above)Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.1
package,java/math,Provides classes for performing arbitrary-precision integer arithmetic(BigInteger) and arbitrary-precision decimal arithmetic (BigDecimal).BigInteger is analogous to Java's primitive integer types except that itprovides arbitrary precision, hence operations on BigIntegers do not overflowor lose precision. In addition to standard arithmetic operations, BigIntegerprovides modular arithmetic, GCD calculation, primality testing, primegeneration, bit manipulation, and a few other miscellaneous operations.BigDecimal provides arbitrary-precision signed decimal numbers suitable forcurrency calculations and the like. BigDecimal gives the user completecontrol over rounding behavior, allowing the user to choose from acomprehensive set of eight rounding modes.Related DocumentationFor overviews, tutorials, examples, guides, and tool documentation, please see: ##### REFER TO NON-SPEC DOCUMENTATION HERE #####-->@since JDK1.1
package,java/security,Provides the classes and interfaces for the security framework.This includes classes that implement an easily configurable,fine-grained access control security architecture.This package also supportsthe generation and storage of cryptographic public key pairs,as well as a number of exportable cryptographic operationsincluding those for message digest and signature generation. Finally,this package provides classes that support signed/guarded objectsand secure random number generation.Many of the classes provided in this package (the cryptographicand secure random number generator classes in particular) areprovider-based. The class itself defines a programming interfaceto which applications may write. The implementations themselves maythen be written by independent third-party vendors and pluggedin seamlessly as needed. Therefore application developers maytake advantage of any number of provider-based implementationswithout having to add or rewrite code.Package Specification Cryptography Architecture PKCS8: Private-Key Information Standard, Version 1.2, November 1993Related DocumentationFor further documentation, please see: Security Architecture How to Implement a Provider for the Java Cryptography Architecture Default Policy Implementation and Policy File Syntax Policy Permissions Security Tools Summary keytool ( for Solaris/Linux) ( for Windows) jarsigner ( for Solaris/Linux) ( for Windows) @since JDK1.1
package,java/security/interfaces,Provides interfaces for generating RSA (Rivest, Shamir andAdleman AsymmetricCipher algorithm)keys as defined in the RSA Laboratory Technical NotePKCS#1, and DSA (Digital SignatureAlgorithm) keys as defined in NIST's FIPS-186.Note that these interfaces are intended only for keyimplementations whose key material is accessible and available. These interfaces are not intended for key implementations whose key material resides in inaccessible, protected storage (such as in a hardware device). For more developer information on how to use these interfaces, including information on how to design Key classes for hardware devices, please referto these cryptographic provider developer guides: How to Implement a Provider for the JavaTM Cryptography Architecture Package Specification PKCS #1: RSA Encryption Standard, Version 1.5, November 1993 Federal Information Processing Standards Publication (FIPS PUB) 186: Digital Signature Standard (DSS) Related DocumentationFor further documentation, please see: JavaTM Cryptography Architecture API Specification and Reference @since JDK1.1
package,java/security/spec,Provides classes and interfaces for key specifications and algorithmparameter specifications.A key specification is a transparent representation of the key materialthat constitutes a key. A key may be specified in an algorithm-specificway, or in an algorithm-independent encoding format (such as ASN.1).This package contains key specifications for DSA public and private keys,RSA public and private keys, PKCS #8 private keys in DER-encoded format,and X.509 public and private keys in DER-encoded format.An algorithm parameter specification is a transparent representationof the sets of parameters used with an algorithm. This package containsan algorithm parameter specification for parameters used with theDSA algorithm.Package Specification PKCS #1: RSA Encryption Standard, Version 1.5, November 1993 PKCS #8: Private-Key Information Syntax Standard, Version 1.2, November 1993 Federal Information Processing Standards Publication (FIPS PUB) 186: Digital Signature Standard (DSS)Related DocumentationFor documentation that includes information about algorithm parameterand key specifications, please see: JavaTM Cryptography Architecture API Specification and Reference How to Implement a Provider for the JavaTM Cryptography Architecture @since 1.2
method,org/eclipse/jface/dialogs/TrayDialog/isHelpAvailable/, Returns whether or not context help is available for this dialog. This can affect whether or not the dialog will display additional help mechanisms such as a help control in the button bar. @return whether or not context help is available for this dialog
method,org/eclipse/jface/dialogs/TrayDialog/getLayout/, The tray dialog's default layout is a modified version of the default Window layout that can accomodate a tray, however it still conforms to the description of the Window default layout. Note: Trays may not be supported with all custom layouts on the dialog's Shell. To avoid problems, use a single outer Composite for your dialog area, and set your custom layout on that Composite. @see org.eclipse.jface.window.Window#getLayout() @return a newly created layout or null for no layout
method,org/eclipse/jface/dialogs/TrayDialog/setHelpAvailable/boolean, Sets whether or not context help is available for this dialog. This can affect whether or not the dialog will display additional help mechanisms such as a help control in the button bar. @param helpAvailable whether or not context help is available for the dialog
method,org/eclipse/jface/dialogs/TrayDialog/isDialogHelpAvailable/, Tests if dialogs that have help control should show it all the time or only when explicitly requested for each dialog instance. @return true if dialogs that support help control should show it by default, false otherwise. @since 3.2
method,org/eclipse/jface/dialogs/TrayDialog/setDialogHelpAvailable/boolean, Sets whether JFace dialogs that support help control should show the control by default. If set to false, help control can still be shown on a per-dialog basis. @param helpAvailable true to show the help control, false otherwise. @since 3.2
interface,org/eclipse/jface/dialogs/IDialogConstants, IDialogConstants is the interface for common dialog strings and ids used throughout JFace. It is recommended that you use these labels and ids whereever for consistency with the JFace dialogs.
field,org/eclipse/jface/dialogs/IDialogConstants/CLIENT_ID, Starting button id reserved for use by clients of JFace (value 1024). Clients of JFace should make ids by adding to this number.
class,org/eclipse/jface/dialogs/ControlAnimator, ControlAnimator provides a simple implementation to display or hide a control at the bottom of the parent composite. Other animations will be written as subclasses of this class. Instances of this class can be created using an AnimatorFactory. @since 3.2
class,org/eclipse/jface/dialogs/ProgressIndicator, A control for showing progress feedback for a long running operation. This control supports both determinate and indeterminate SWT progress bars. For indeterminate progress, we don't have to know the total amount of work in advance and no worked method needs to be called.
method,org/eclipse/jface/dialogs/ProgressIndicator/showError/, Show the receiver as showing an error. @since 3.4
method,org/eclipse/jface/dialogs/IMessageProvider/getMessageType/, Returns a value indicating if the message is a an information message, a warning message, or an error message. Returns one of NONE,INFORMATION, WARNING, or ERROR. @return the message type
field,org/eclipse/jface/dialogs/IMessageProvider/NONE, Constant for a regular message (value 0). Typically this indicates that the message should be shown without an icon. 
field,org/eclipse/jface/dialogs/IMessageProvider/WARNING, Constant for a warning message (value 2).
field,org/eclipse/jface/dialogs/IMessageProvider/ERROR, Constant for an error message (value 3).
method,org/eclipse/jface/dialogs/ProgressMonitorDialog/close/, The ProgressMonitorDialog implementation of this method only closes the dialog if there are no currently running runnables.
method,org/eclipse/jface/dialogs/ProgressMonitorDialog/getOpenOnRun/, Returns whether the dialog should be opened before the operation is run. Defaults to true @return true to open the dialog before run, false to only create the dialog, but not open it @since 3.0
method,org/eclipse/jface/dialogs/ProgressMonitorDialog/setOpenOnRun/boolean, Sets whether the dialog should be opened before the operation is run. NOTE: Setting this to false and not forking a process may starve any asyncExec that tries to open the dialog later. @param openOnRun true to open the dialog before run, false to only create the dialog, but not open it @since 3.0
method,org/eclipse/jface/dialogs/ProgressMonitorDialog/aboutToRun/, Called just before the operation is run. Default behaviour is to open or create the dialog, based on the setting of getOpenOnRun, and increment the nesting depth. @since 3.0
method,org/eclipse/jface/dialogs/ProgressMonitorDialog/finishedRun/, Called just after the operation is run. Default behaviour is to decrement the nesting depth, and close the dialog. @since 3.0
class,org/eclipse/jface/dialogs/ErrorDialog, A dialog to display one or more errors to the user, as contained in an IStatus object. If an error contains additional detailed information then a Details button is automatically supplied, which shows or hides an error details viewer when pressed by the user. This dialog should be considered being a local way of error handling. It cannot be changed or replaced by global error handling facility ( org.eclipse.ui.statushandler.StatusManager). If product defines its own way of handling errors, this error dialog may cause UI inconsistency, so until it is absolutely necessary, StatusManager should be used. @see org.eclipse.core.runtime.IStatus
method,org/eclipse/jface/dialogs/ErrorDialog/buttonPressed/int,
method,org/eclipse/jface/dialogs/ErrorDialog/configureShell/Shell,
method,org/eclipse/jface/dialogs/ErrorDialog/createButtonsForButtonBar/Composite,
method,org/eclipse/jface/dialogs/ErrorDialog/createDetailsButton/Composite, Create the details button if it should be included. @param parent the parent composite @since 3.2
method,org/eclipse/jface/dialogs/ErrorDialog/createDialogAndButtonArea/Composite,
method,org/eclipse/jface/dialogs/ErrorDialog/getImage/,
method,org/eclipse/jface/dialogs/ErrorDialog/open/, Extends Window.open(). Opens an error dialog to display the error. If you specified a mask to filter the displaying of these children, the error dialog will only be displayed if there is at least one child status matching the mask.
method,org/eclipse/jface/dialogs/ErrorDialog/openError/Shell;String;String;IStatus, Opens an error dialog to display the given error. Use this method if the error object being displayed does not contain child items, or if you wish to display all such items without filtering. @param parent the parent shell of the dialog, or null if none @param dialogTitle the title to use for this dialog, or null to indicate that the default title should be used @param message the message to show in this dialog, or null to indicate that the error's message should be shown as the primary message @param status the error to show to the user @return the code of the button that was pressed that resulted in this dialog closing. This will be Dialog.OK if the OK button was pressed, or Dialog.CANCEL if this dialog's close window decoration or the ESC key was used.
method,org/eclipse/jface/dialogs/ErrorDialog/openError/Shell;String;String;IStatus;int, Opens an error dialog to display the given error. Use this method if the error object being displayed contains child items and you wish to specify a mask which will be used to filter the displaying of these children. The error dialog will only be displayed if there is at least one child status matching the mask. @param parentShell the parent shell of the dialog, or null if none @param title the title to use for this dialog, or null to indicate that the default title should be used @param message the message to show in this dialog, or null to indicate that the error's message should be shown as the primary message @param status the error to show to the user @param displayMask the mask to use to filter the displaying of child items, as per IStatus.matches @return the code of the button that was pressed that resulted in this dialog closing. This will be Dialog.OK if the OK button was pressed, or Dialog.CANCEL if this dialog's close window decoration or the ESC key was used. @see org.eclipse.core.runtime.IStatus#matches(int)
method,org/eclipse/jface/dialogs/ErrorDialog/shouldDisplay/IStatus;int, Returns whether the given status object should be displayed. @param status a status object @param mask a mask as per IStatus.matches @return true if the given status should be displayed, and false otherwise @see org.eclipse.core.runtime.IStatus#matches(int)
method,org/eclipse/jface/dialogs/ErrorDialog/close/,
method,org/eclipse/jface/dialogs/ErrorDialog/shouldShowDetailsButton/, Return whether the Details button should be included. This method is invoked once when the dialog is built. Default implementation is tight to default implementation of {@link #createDropDownList(Composite)} and displays details button if there is anything on the display list. @return whether the Details button should be included @since 3.1 @see #createDropDownList(Composite)
method,org/eclipse/jface/dialogs/ErrorDialog/isResizable/,
field,org/eclipse/jface/dialogs/ErrorDialog/AUTOMATED_MODE, Static to prevent opening of error dialogs for automated testing.
method,org/eclipse/jface/dialogs/IDialogPage/getControl/, Returns the top level control for this dialog page. May return null if the control has not been created yet. @return the top level control or null
method,org/eclipse/jface/dialogs/IDialogPage/getErrorMessage/, Returns the current error message for this dialog page. May be null to indicate no error message. An error message should describe some error state, as opposed to a message which may simply provide instruction or information to the user. @return the error message, or null if none
method,org/eclipse/jface/dialogs/IDialogPage/getMessage/, Returns the current message for this wizard page. A message provides instruction or information to the user, as opposed to an error message which should describe some error state. @return the message, or null if none
class,org/eclipse/jface/dialogs/StatusDialog, An abstract base class for dialogs with a status bar and OK/CANCEL buttons. The status message is specified in an IStatus which can be of severity ERROR, WARNING, INFO or OK. The OK button is enabled or disabled depending on the status. @since 3.1
method,org/eclipse/jface/dialogs/StatusDialog/updateStatus/IStatus, Update the dialog's status line to reflect the given status. It is safe to call this method before the dialog has been opened. @param status the status to set
class,org/eclipse/jface/dialogs/TitleAreaDialog, A dialog that has a title area for displaying a title and an image as well as a common area for displaying a description, a message, or an error message. This dialog class may be subclassed.
method,org/eclipse/jface/dialogs/TitleAreaDialog/setErrorMessage/String, Display the given error message. The currently displayed message is saved and will be redisplayed when the error message is set to null. @param newErrorMessage the newErrorMessage to display or null
field,org/eclipse/jface/dialogs/TitleAreaDialog/DLG_IMG_TITLE_ERROR, Image registry key for error message image.
field,org/eclipse/jface/dialogs/TitleAreaDialog/WARNING_MESSAGE, Message type constant used to display a warning icon with the message. @since 2.0 @deprecated
method,org/eclipse/jface/dialogs/IconAndMessageDialog/getErrorImage/, Return the Image to be used when displaying an error. @return image the error image
method,org/eclipse/jface/dialogs/IconAndMessageDialog/getWarningImage/, Return the Image to be used when displaying a warning. @return image the warning image
method,org/eclipse/jface/dialogs/ImageAndMessageArea/setImage/Image, Adds an image to decorated field to be shown in the message area. @param image desired image to be shown in the ImageAndMessageArea
method,org/eclipse/jface/dialogs/PopupDialog/PopupDialog/Shell;int;boolean;boolean;boolean;boolean;String;String, Constructs a new instance of PopupDialog. @param parent The parent shell. @param shellStyle The shell style. @param takeFocusOnOpen A boolean indicating whether focus should be taken by this popup when it opens. @param persistBounds A boolean indicating whether the bounds (size and location) of the dialog should be persisted upon close of the dialog. The bounds can only be persisted if the dialog settings for persisting the bounds are also specified. If a menu action will be provided that allows the user to control this feature, then the last known value of the user's setting will be used instead of this flag. @param showDialogMenu A boolean indicating whether a menu for moving and resizing the popup should be provided. @param showPersistActions A boolean indicating whether actions allowing the user to control the persisting of the dialog size and location should be shown in the dialog menu. This parameter has no effect if showDialogMenu is false. @param titleText Text to be shown in an upper title area, or null if there is no title. @param infoText Text to be shown in a lower info area, or null if there is no info area. @see PopupDialog#getDialogSettings() @deprecated As of 3.4, replaced by {@link #PopupDialog(Shell, int, boolean, boolean, boolean, boolean, boolean, String, String)}
method,org/eclipse/jface/dialogs/PopupDialog/PopupDialog/Shell;int;boolean;boolean;boolean;boolean;boolean;String;String, Constructs a new instance of PopupDialog. @param parent The parent shell. @param shellStyle The shell style. @param takeFocusOnOpen A boolean indicating whether focus should be taken by this popup when it opens. @param persistSize A boolean indicating whether the size should be persisted upon close of the dialog. The size can only be persisted if the dialog settings for persisting the bounds are also specified. If a menu action will be provided that allows the user to control this feature and the user hasn't changed that setting, then this flag is used as initial default for the menu. @param persistLocation A boolean indicating whether the location should be persisted upon close of the dialog. The location can only be persisted if the dialog settings for persisting the bounds are also specified. If a menu action will be provided that allows the user to control this feature and the user hasn't changed that setting, then this flag is used as initial default for the menu. default for the menu until the user changed it. @param showDialogMenu A boolean indicating whether a menu for moving and resizing the popup should be provided. @param showPersistActions A boolean indicating whether actions allowing the user to control the persisting of the dialog bounds and location should be shown in the dialog menu. This parameter has no effect if showDialogMenu is false. @param titleText Text to be shown in an upper title area, or null if there is no title. @param infoText Text to be shown in a lower info area, or null if there is no info area. @see PopupDialog#getDialogSettings() @since 3.4
field,org/eclipse/jface/dialogs/PopupDialog/POPUP_VERTICALSPACING, Vertical spacing (in pixels) between cells in the layouts inside popup dialogs (value is 1).
field,org/eclipse/jface/dialogs/PopupDialog/POPUP_HORIZONTALSPACING, Vertical spacing (in pixels) between cells in the layouts inside popup dialogs (value is 1).
class,org/eclipse/jface/dialogs/DialogPage, Abstract base implementation of a dialog page. All dialog pages are subclasses of this one.
method,org/eclipse/jface/dialogs/DialogPage/performHelp/, This default implementation of an IDialogPage method does nothing. Subclasses should override to take some action in response to a help request.
method,org/eclipse/jface/dialogs/DialogPage/setErrorMessage/String, Sets or clears the error message for this page. @param newMessage the message, or null to clear the error message
class,org/eclipse/jface/dialogs/Dialog, A dialog is a specialized window used for narrow-focused communication with the user. Dialogs are usually modal. Consequently, it is generally bad practice to open a dialog without a parent. A modal dialog without a parent is not prevented from disappearing behind the application's other windows, making it very confusing for the user. If there is more than one modal dialog is open the second one should be parented off of the shell of the first one otherwise it is possible that the OS will give focus to the first dialog potentially blocking the UI. 
method,org/eclipse/jface/dialogs/Dialog/convertHeightInCharsToPixels/FontMetrics;int, Returns the number of pixels corresponding to the height of the given number of characters. The required FontMetrics parameter may be created in the following way: 	GC gc = new GC(control);	gc.setFont(control.getFont());	fontMetrics = gc.getFontMetrics();	gc.dispose(); @param fontMetrics used in performing the conversion @param chars the number of characters @return the number of pixels @since 2.0
method,org/eclipse/jface/dialogs/Dialog/convertHorizontalDLUsToPixels/FontMetrics;int, Returns the number of pixels corresponding to the given number of horizontal dialog units. The required FontMetrics parameter may be created in the following way: 	GC gc = new GC(control);	gc.setFont(control.getFont());	fontMetrics = gc.getFontMetrics();	gc.dispose(); @param fontMetrics used in performing the conversion @param dlus the number of horizontal dialog units @return the number of pixels @since 2.0
method,org/eclipse/jface/dialogs/Dialog/convertVerticalDLUsToPixels/FontMetrics;int, Returns the number of pixels corresponding to the given number of vertical dialog units. The required FontMetrics parameter may be created in the following way: 	GC gc = new GC(control);	gc.setFont(control.getFont());	fontMetrics = gc.getFontMetrics();	gc.dispose(); @param fontMetrics used in performing the conversion @param dlus the number of vertical dialog units @return the number of pixels @since 2.0
method,org/eclipse/jface/dialogs/Dialog/convertWidthInCharsToPixels/FontMetrics;int, Returns the number of pixels corresponding to the width of the given number of characters. The required FontMetrics parameter may be created in the following way: 	GC gc = new GC(control);	gc.setFont(control.getFont());	fontMetrics = gc.getFontMetrics();	gc.dispose(); @param fontMetrics used in performing the conversion @param chars the number of characters @return the number of pixels @since 2.0
method,org/eclipse/jface/dialogs/Dialog/shortenText/String;Control, Shortens the given text textValue so that its width in pixels does not exceed the width of the given control. Overrides characters in the center of the original string with an ellipsis (...) if necessary. If a null value is given, null is returned. @param textValue the original string or null @param control the control the string will be displayed on @return the string to display, or null if null was passed in @since 3.0
method,org/eclipse/jface/dialogs/Dialog/createContents/Composite, The Dialog implementation of this Window method creates and lays out the top level composite for the dialog, and determines the appropriate horizontal and vertical dialog units based on the font size. It then calls the createDialogArea and createButtonBar methods to create the dialog area and button bar, respectively. Overriding createDialogArea and createButtonBar are recommended rather than overriding this method.
method,org/eclipse/jface/dialogs/Dialog/getCancelButton/, Returns the button created when createButton is called with an ID of IDialogConstants.CANCEL_ID. If createButton was never called with this parameter, or if createButton is overridden, getCancelButton will return null. @return the cancel button or null @see #createButton(Composite, int, String, boolean) @since 2.0 @deprecated Use getButton(IDialogConstants.CANCEL_ID) instead. This method will be removed soon.
method,org/eclipse/jface/dialogs/Dialog/getInitialSize/, Returns the initial size to use for the shell. Overridden to check whether a size has been stored in dialog settings. If a size has been stored, it is returned. @return the initial size of the shell @since 3.2 @see #getDialogBoundsSettings() @see #getDialogBoundsStrategy()
method,org/eclipse/jface/dialogs/Dialog/getInitialLocation/Point, Returns the initial location to use for the shell. Overridden to check whether the bounds of the dialog have been stored in dialog settings. If a location has been stored, it is returned. @param initialSize the initial size of the shell, as returned by getInitialSize. @return the initial location of the shell @since 3.2 @see #getDialogBoundsSettings() @see #getDialogBoundsStrategy()
method,org/eclipse/jface/dialogs/Dialog/isResizable/, Returns a boolean indicating whether the dialog should be considered resizable when the shell style is initially set. This method is used to ensure that all style bits appropriate for resizable dialogs are added to the shell style. Individual dialogs may always set the shell style to ensure that a dialog is resizable, but using this method ensures that resizable dialogs will be created with the same set of style bits. Style bits will never be removed based on the return value of this method. For example, if a dialog returns false, but also sets a style bit for a SWT.RESIZE border, the style bit will be honored. @return a boolean indicating whether the dialog is resizable and should have the default style bits for resizable dialogs @since 3.4
field,org/eclipse/jface/dialogs/Dialog/DLG_IMG_ERROR, Image registry key for error image (value dialog_error_image). @deprecated use org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_ERROR)
field,org/eclipse/jface/dialogs/Dialog/DLG_IMG_WARNING, Image registry key for warning image (value dialog_warning_image). @deprecated use org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_WARNING)
field,org/eclipse/jface/dialogs/Dialog/DIALOG_DEFAULT_BOUNDS, A value that can be used for stored dialog width or height that indicates that the default bounds should be used. @since 3.2
class,org/eclipse/jface/dialogs/ErrorSupportProvider, A ErrorSupportProvider defines the area to be shown in an error dialog for extra support information. @since 3.3
method,org/eclipse/jface/dialogs/ErrorSupportProvider/createSupportArea/Composite;IStatus, Create an area for adding support components as a child of parent. @param parent The parent {@link Composite} @param status The {@link IStatus} that is being displayed. @return Control
method,org/eclipse/jface/dialogs/ErrorSupportProvider/ErrorSupportProvider/,
class,org/eclipse/jface/dialogs/DialogTray, This class is the abstract superclass of all dialog trays. A tray can be opened in any TrayDialog. @see org.eclipse.jface.dialogs.TrayDialog @since 3.2
class,org/eclipse/jface/dialogs/DialogMessageArea, The DialogMessageArea is a resusable component for adding an accessible message area to a dialog. When the message is normal a CLabel is used but an errors replaces the message area with a non editable text that can take focus for use by screen readers. @since 3.0
method,org/eclipse/jface/dialogs/DialogMessageArea/updateText/String;int, Show the new message in the message text and update the image. Base the background color on whether or not there are errors. @param newMessage The new value for the message @param newType One of the IMessageProvider constants. If newType is IMessageProvider.NONE show the title. @see IMessageProvider
method,org/eclipse/jface/dialogs/DialogMessageArea/clearErrorMessage/, Clear the error message. Restore the previously displayed message if there is one, if not restore the title label. 
interface,org/eclipse/jface/dialogs/IPageChangeProvider, Minimal interface to a page change provider. Used for dialogs which can switch between multiple pages. @since 3.1
method,org/eclipse/jface/dialogs/IPageChangeProvider/getSelectedPage/, Returns the currently selected page in the dialog. @return the selected page in the dialog or null if none is selected. The type may be domain specific. In the JFace provided dialogs this will be an instance of IDialogPage. 
interface,org/eclipse/jface/dialogs/IDialogSettings, An interface to a storage mechanism for making dialog settings persistent. The store manages a collection of key/value pairs. The keys must be strings and the values can be either, strings or array of strings. Convenience API to convert primitive types to strings is provided.
interface,org/eclipse/jface/dialogs/IPageChangingListener, A listener which is notified when the current page of a multi-page dialog is changing. Use this listener to perform long-running work that should only be executed once, when the page is in the process of changing, rather then during validation of page controls. @see PageChangingEvent @since 3.3
method,org/eclipse/jface/dialogs/IDialogBlockedHandler/showBlocked/Shell;IProgressMonitor;IStatus;String, A blockage has occured. Show the blockage and forward any actions to blockingMonitor. NOTE: This will open any blocked notification immediately even if there is a modal shell open. @param parentShell The shell this is being sent from. If the parent shell is null the behavior will be the same as IDialogBlockedHandler#showBlocked(IProgressMonitor, IStatus, String) @param blocking The monitor to forward to. This is most important for calls to cancel(). @param blockingStatus The status that describes the blockage @param blockedName The name of the locked operation. @see IDialogBlockedHandler#showBlocked(IProgressMonitor, IStatus, String)
method,org/eclipse/jface/dialogs/IDialogBlockedHandler/showBlocked/IProgressMonitor;IStatus;String, A blockage has occured. Show the blockage when there is no longer any modal shells in the UI and forward any actions to blockingMonitor. NOTE: As no shell has been specified this method will not open any blocked notification until all other modal shells have been closed. @param blocking The monitor to forward to. This is most important for calls to cancel(). @param blockingStatus The status that describes the blockage @param blockedName The name of the locked operation.
method,org/eclipse/jface/dialogs/MessageDialog/createDialogArea/Composite, This implementation of the Dialog framework method creates and lays out a composite and calls createMessageArea and createCustomArea to populate it. Subclasses should override createCustomArea to add contents below the message.
method,org/eclipse/jface/dialogs/MessageDialog/openError/Shell;String;String, Convenience method to open a standard error dialog. @param parent the parent shell of the dialog, or null if none @param title the dialog's title, or null if none @param message the message
method,org/eclipse/jface/dialogs/MessageDialog/openWarning/Shell;String;String, Convenience method to open a standard warning dialog. @param parent the parent shell of the dialog, or null if none @param title the dialog's title, or null if none @param message the message
method,org/eclipse/jface/dialogs/MessageDialog/customShouldTakeFocus/, Return whether or not we should apply the workaround where we take focus for the default button or if that should be determined by the dialog. By default only return true if the custom area is a label or CLabel that cannot take focus. @return boolean
method,org/eclipse/jface/dialogs/MessageDialog/getButtonLabels/, An accessor for the labels to use on the buttons. @return The button labels to used; never null.
method,org/eclipse/jface/dialogs/MessageDialog/setButtons/Button[], A mutator for the array of buttons in the button bar. @param buttons The buttons in the button bar; must not be null.
method,org/eclipse/jface/dialogs/MessageDialog/setButtonLabels/String[], A mutator for the button labels. @param buttonLabels The button labels to use; must not be null.
field,org/eclipse/jface/dialogs/MessageDialog/ERROR, Constant for the error image, or a simple dialog with the error image and a single OK button (value 1). @see #MessageDialog(Shell, String, Image, String, int, String[], int) @see #open(int, Shell, String, String, int)
field,org/eclipse/jface/dialogs/MessageDialog/WARNING, Constant for the warning image, or a simple dialog with the warning image and a single OK button (value 4). @see #MessageDialog(Shell, String, Image, String, int, String[], int) @see #open(int, Shell, String, String, int)
method,org/eclipse/jface/dialogs/MessageDialogWithToggle/getPrefStore/, An accessor for the current preference store for this dialog. @return The preference store; this value may be null if no preference is being used.
method,org/eclipse/jface/dialogs/MessageDialogWithToggle/getPrefKey/, An accessor for the current key of the toggle preference. @return The preference key; this value may be null if no preference is being used.
method,org/eclipse/jface/dialogs/MessageDialogWithToggle/setToggleButton/Button, A mutator for the button providing the toggle option. If the button exists, then it will automatically get the text set to the current toggle message, and its selection state set to the current selection state. @param button The button to use; must not be null.
method,org/eclipse/jface/dialogs/MessageDialogWithToggle/setToggleState/boolean, A mutator for the state of the toggle button. This method will update the button, if it exists. @param toggleState The desired state of the toggle button (true means the toggle should be selected).
method,org/eclipse/jface/dialogs/MessageDialogWithToggle/MessageDialogWithToggle/Shell;String;Image;String;int;String[];int;String;boolean, Creates a message dialog with a toggle. See the superclass constructor for info on the other parameters. @param parentShell the parent shell @param dialogTitle the dialog title, or null if none @param image the dialog title image, or null if none @param message the dialog message @param dialogImageType one of the following values: MessageDialog.NONE for a dialog with no image MessageDialog.ERROR for a dialog with an error image MessageDialog.INFORMATION for a dialog with an information image MessageDialog.QUESTION for a dialog with a question image MessageDialog.WARNING for a dialog with a warning image @param dialogButtonLabels an array of labels for the buttons in the button bar @param defaultIndex the index in the button label array of the default button @param toggleMessage the message for the toggle control, or null for the default message @param toggleState the initial state for the toggle 
field,org/eclipse/jface/dialogs/MessageDialogWithToggle/NEVER, The value of the preference when the user has asked that the answer to the question always be no.
method,org/eclipse/jface/dialogs/InputDialog/getErrorMessageLabel/, Returns the error message label. @return the error message label @deprecated use setErrorMessage(String) instead
method,org/eclipse/jface/dialogs/InputDialog/validateInput/, Validates the input. The default implementation of this framework method delegates the request to the supplied input validator object; if it finds the input invalid, the error message is displayed in the dialog's message line. This hook method is called whenever the text changes in the input field. 
method,org/eclipse/jface/dialogs/InputDialog/setErrorMessage/String, Sets or clears the error message. If not null, the OK button is disabled. @param errorMessage the error message, or null to clear @since 3.0
class,org/eclipse/jface/layout/TableColumnLayout, The TableColumnLayout is the {@link Layout} used to maintain {@link TableColumn} sizes in a {@link Table}. You can only add the {@link Layout} to a container whose only child is the {@link Table} control you want the {@link Layout} applied to. Don't assign the layout directly the {@link Table} @since 3.3
method,org/eclipse/jface/layout/TableColumnLayout/getColumnCount/Scrollable, {@inheritDoc} @since 3.5
method,org/eclipse/jface/layout/TableColumnLayout/setColumnWidths/Scrollable;int[], {@inheritDoc} @since 3.5
method,org/eclipse/jface/layout/TableColumnLayout/getLayoutData/Scrollable;int, {@inheritDoc} @since 3.5
method,org/eclipse/jface/layout/RowLayoutFactory/swtDefaults/, Creates a RowLayoutFactory that creates RowLayouts with the default SWT values. Initial values are: margins(0,0) extendedMargins(3,3,3,3) wrap(true) pack(true) fill(false) justify(false) spacing(3) @return a RowLayoutFactory that creates RowLayouts as though created with their default constructor @see #fillDefaults
method,org/eclipse/jface/layout/RowLayoutFactory/fillDefaults/, Creates a RowLayoutFactory that creates RowLayouts with no margins, fill behavior, and default dialog spacing. Initial values are: margins(0,0) extendedMargins(0,0,0,0) wrap(true) pack(true) fill(false) justify(false) spacing(LayoutConstants.getSpacing().x @return a RowLayoutFactory that creates RowLayouts with no margins @see #swtDefaults
method,org/eclipse/jface/layout/RowLayoutFactory/spacing/int, Sets the spacing for layouts created with this factory. The spacing is the distance between items within the layout. @param spacing spacing (pixels) @return this @see #margins(Point) @see #margins(int, int)
method,org/eclipse/jface/layout/RowLayoutFactory/margins/Point, Sets the margins for layouts created with this factory. The margins are the distance between the outer cells and the edge of the layout. @param margins margin size (pixels) @return this @see #spacing(int)
method,org/eclipse/jface/layout/RowLayoutFactory/margins/int;int, Sets the margins for layouts created with this factory. The margins specify the number of pixels of horizontal and vertical margin that will be placed along the left/right and top/bottom edges of the layout. Note that these margins will be added to the ones specified by {@link #extendedMargins(int, int, int, int)}. @param width margin width (pixels) @param height margin height (pixels) @return this @see #spacing(int)
method,org/eclipse/jface/layout/RowLayoutFactory/extendedMargins/int;int;int;int, Sets the margins for layouts created with this factory. The margins specify the number of pixels of horizontal and vertical margin that will be placed along the left, right, top, and bottom edges of the layout. Note that these margins will be added to the ones specified by {@link #margins(int, int)}. @param left left margin size (pixels) @param right right margin size (pixels) @param top top margin size (pixels) @param bottom bottom margin size (pixels) @return this @see #spacing(int) @since 3.3
method,org/eclipse/jface/layout/RowLayoutFactory/fill/boolean, Fill specifies whether the controls in a row should be all the same height for horizontal layouts, or the same width for vertical layouts. @param fill the fill status @return this
method,org/eclipse/jface/layout/RowLayoutFactory/justify/boolean, Justify specifies whether the controls in a row should be fully justified, with any extra space placed between the controls. @param justify the justify status @return this
method,org/eclipse/jface/layout/RowLayoutFactory/pack/boolean, Pack specifies whether all controls in the layout take their preferred size. If pack is false, all controls will have the same size which is the size required to accommodate the largest preferred height and the largest preferred width of all the controls in the layout. @param pack the pack status @return this
class,org/eclipse/jface/layout/AbstractColumnLayout, The AbstractColumnLayout is a {@link Layout} used to set the size of a table in a consistent way even during a resize unlike a {@link TableLayout} which only sets initial sizes. You can only add the layout to a container whose only child is the table/tree control you want the layouts applied to. @since 3.4
method,org/eclipse/jface/layout/GridDataFactory/defaultsFor/Control, Returns a GridDataFactory initialized with heuristicly generated defaults for the given control. To be precise, this method picks the default values that GridLayoutFactory.generateLayout would have assigned to the control. Does not attach GridData to the control. Callers must additionally call applyTo(theControl) if they wish to use the generated values. This method is intended for situations where generateLayout is generating layout data for a particular control that is not quite right for the desired layout. This allows callers to start with the generated values and tweak one or two settings before applying the GridData to the control. @see GridLayoutFactory#generateLayout(org.eclipse.swt.widgets.Composite) @param theControl @return a GridLayoutFactory initialized with defaults that GridLayoutFactory would have @since 3.3
method,org/eclipse/jface/layout/GridDataFactory/hint/int;int, Sets the width and height hints. The width and height hints override the control's preferred size. If either hint is set to SWT.DEFAULT, the control's preferred size is used. @param xHint horizontal hint (pixels), or SWT.DEFAULT to use the control's preferred size @param yHint vertical hint (pixels), or SWT.DEFAULT to use the control's preferred size @return this
method,org/eclipse/jface/layout/GridDataFactory/hint/Point, Sets the width and height hints. The width and height hints override the control's preferred size. If either hint is set to SWT.DEFAULT, the control's preferred size is used. @param hint size (pixels) to be used instead of the control's preferred size. If the x or y values are set to SWT.DEFAULT, the control's computeSize() method will be used to obtain that dimension of the preferred size. @return this
method,org/eclipse/jface/layout/GridDataFactory/grab/boolean;boolean, Determines whether extra horizontal or vertical space should be allocated to this control's column when the layout resizes. If any control in the column is set to grab horizontal then the whole column will grab horizontal space. If any control in the row is set to grab vertical then the whole row will grab vertical space. @param horizontal true if the control's column should grow horizontally @param vertical true if the control's row should grow vertically @return this
method,org/eclipse/jface/layout/GridDataFactory/minSize/int;int, Sets the minimum size for the control. The control will not be permitted to shrink below this size. Note: GridLayout treats a minimum size of 0 as an undocumented special value, so the smallest possible minimum size is a size of 1. A minimum size of SWT.DEFAULT indicates that the result of computeSize(int, int, boolean) should be used as the control's minimum size. @param minX minimum a value of 1 or more is a horizontal size of the control (pixels). SWT.DEFAULT indicates that the control's preferred size should be used. A size of 0 has special semantics defined by GridLayout. @param minY minimum a value of 1 or more is a vertical size of the control (pixels). SWT.DEFAULT indicates that the control's preferred size should be used. A size of 0 has special semantics defined by GridLayout. @return this
method,org/eclipse/jface/layout/GridDataFactory/minSize/Point, Sets the minimum size for the control. The control will not be permitted to shrink below this size. Note: GridLayout treats a minimum size of 0 as an undocumented special value, so the smallest possible minimum size is a size of 1. A minimum size of SWT.DEFAULT indicates that the result of computeSize(int, int, boolean) should be used as the control's minimum size. @param min minimum size of the control @return this
method,org/eclipse/jface/layout/GridDataFactory/exclude/boolean, Instructs the GridLayout to ignore this control when performing layouts. @param shouldExclude true iff the control should be excluded from layouts @return this
method,org/eclipse/jface/layout/GridDataFactory/applyTo/Control, Sets the layout data on the given control. Creates a new GridData instance and assigns it to the control by calling control.setLayoutData. @param control control whose layout data will be initialized
class,org/eclipse/jface/layout/PixelConverter, PixelConverter performs various conversions from device-independent units (such as DLUs or characters) to pixels. It can be associated with a control or a font. In the case of a control, the font used by the control at the time the PixelConverter is created is used for the pixel calculations. In the case of a specific font, the supplied font is used for the calculations. The control and/or font must not be disposed at the time the PixelConverter is created. @since 3.5
method,org/eclipse/jface/layout/PixelConverter/PixelConverter/Control, Create a PixelConverter which will convert device-independent units to pixels using the font of the specified control. @param control the control whose font should be used for pixel conversions. Note that the font used by the control at the time this constructor is called is the font that will be used for all calculations. If the font of the specified control is changed after this PixelConverter is created, then the conversions from this instance will not produce the desired effect.
method,org/eclipse/jface/layout/PixelConverter/PixelConverter/Font, Create a PixelConverter which will convert device-independent units to pixels using the specified font. @param font the font that should be used for pixel conversions.
class,org/eclipse/jface/layout/TreeColumnLayout, The TreeColumnLayout is the {@link Layout} used to maintain {@link TreeColumn} sizes in a {@link Tree}. You can only add the {@link Layout} to a container whose only child is the {@link Tree} control you want the {@link Layout} applied to. Don't assign the layout directly the {@link Tree} @since 3.3
method,org/eclipse/jface/layout/TreeColumnLayout/getColumnCount/Scrollable, {@inheritDoc} @since 3.5
method,org/eclipse/jface/layout/TreeColumnLayout/setColumnWidths/Scrollable;int[], {@inheritDoc} @since 3.5
method,org/eclipse/jface/layout/TreeColumnLayout/getLayoutData/Scrollable;int, {@inheritDoc} @since 3.5
method,org/eclipse/jface/layout/TreeColumnLayout/updateColumnData/Widget, {@inheritDoc} @since 3.5
class,org/eclipse/jface/layout/GridLayoutFactory, GridLayoutFactory creates and initializes grid layouts. There are two ways to use GridLayoutFactory. Normally, it is used as a shorthand for writing new GridLayout() and initializing a bunch of fields. In this case the main benefit is a more concise syntax and the ability to create more than one identical GridLayout from the same factory. Changing a property of the factory will affect future layouts created by the factory, but has no effect on layouts that have already been created. GridLayoutFactory can also generate grid data for all the controls in a layout. This is done with the generateLayout method. To use this feature: Create the composite Create all the controls in the composite Call generateLayout The order here is important. generateLayout must be called after all the child controls have been created. generateLayout will not change any layout data that has already been attached to a child control and it will not recurse into nested composites. @since 3.2
method,org/eclipse/jface/layout/GridLayoutFactory/swtDefaults/, Creates a GridLayoutFactory that creates GridLayouts with the default SWT values. Initial values are: numColumns(1) margins(5,5) extendedMargins(0,0,0,0) spacing(5,5) equalWidth(false) @return a GridLayoutFactory that creates GridLayouts as though created with their default constructor @see #fillDefaults
method,org/eclipse/jface/layout/GridLayoutFactory/fillDefaults/, Creates a GridLayoutFactory that creates GridLayouts with no margins and default dialog spacing. Initial values are: numColumns(1) margins(0,0) extendedMargins(0,0,0,0) spacing(LayoutConstants.getSpacing()) equalWidth(false) @return a GridLayoutFactory that creates GridLayouts as though created with their default constructor @see #swtDefaults
method,org/eclipse/jface/layout/GridLayoutFactory/equalWidth/boolean, Sets whether the columns should be forced to be equal width @param equal true iff the columns should be forced to be equal width @return this
method,org/eclipse/jface/layout/GridLayoutFactory/spacing/int;int, Sets the spacing for layouts created with this factory. The spacing is the distance between cells within the layout. @param hSpacing horizontal spacing (pixels) @param vSpacing vertical spacing (pixels) @return this @see #margins(Point) @see #margins(int, int)
method,org/eclipse/jface/layout/GridLayoutFactory/spacing/Point, Sets the spacing for layouts created with this factory. The spacing is the distance between cells within the layout. @param spacing space between controls in the layout (pixels) @return this @see #margins(Point) @see #margins(int, int)
method,org/eclipse/jface/layout/GridLayoutFactory/margins/Point, Sets the margins for layouts created with this factory. The margins are the distance between the outer cells and the edge of the layout. @param margins margin size (pixels) @return this @see #spacing(Point) @see #spacing(int, int)
method,org/eclipse/jface/layout/GridLayoutFactory/margins/int;int, Sets the margins for layouts created with this factory. The margins specify the number of pixels of horizontal and vertical margin that will be placed along the left/right and top/bottom edges of the layout. Note that thes margins will be added to the ones specified by {@link #extendedMargins(int, int, int, int)}. @param width margin width (pixels) @param height margin height (pixels) @return this @see #spacing(Point) * @see #spacing(int, int)
method,org/eclipse/jface/layout/RowDataFactory/exclude/boolean, Instructs the GridLayout to ignore this control when performing layouts. @param shouldExclude true iff the control should be excluded from layouts @return this
method,org/eclipse/jface/layout/RowDataFactory/applyTo/Control, Sets the layout data on the given control. Creates a new RowData instance and assigns it to the control by calling control.setLayoutData. @param control control whose layout data will be initialised
method,org/eclipse/jface/layout/RowDataFactory/hint/int;int, Sets the width and height hints. The width and height hints override the control's preferred size. If either hint is set to SWT.DEFAULT, the control's preferred size is used. @param xHint horizontal hint (pixels), or SWT.DEFAULT to use the control's preferred size @param yHint vertical hint (pixels), or SWT.DEFAULT to use the control's preferred size @return this
method,org/eclipse/jface/layout/RowDataFactory/hint/Point, Sets the width and height hints. The width and height hints override the control's preferred size. If either hint is set to SWT.DEFAULT, the control's preferred size is used. @param hint size (pixels) to be used instead of the control's preferred size. If the x or y values are set to SWT.DEFAULT, the control's computeSize() method will be used to obtain that dimension of the preferred size. @return this
method,org/eclipse/jface/resource/JFaceColors/getErrorBackground/Display, @param display the display the color is from @return the background Color for widgets that display errors. @see SWT#COLOR_WIDGET_BACKGROUND @see Display#getSystemColor(int)
method,org/eclipse/jface/resource/JFaceColors/getErrorBorder/Display, @param display the display the color is from @return the border Color for widgets that display errors. @see SWT#COLOR_WIDGET_DARK_SHADOW @see Display#getSystemColor(int)
method,org/eclipse/jface/resource/JFaceColors/getErrorText/Display, @param display the display the color is from @return the default color to use for displaying errors. @see ColorRegistry#get(String) @see JFacePreferences#ERROR_COLOR
method,org/eclipse/jface/resource/JFaceColors/clearColor/String, Clear out the cached color for name. This is generally done when the color preferences changed and any cached colors may be disposed. Users of the colors in this class should add a IPropertyChangeListener to detect when any of these colors change. @param colorName name of the color @deprecated JFaceColors no longer maintains a cache of colors. This job is now handled by the ColorRegistry.
method,org/eclipse/jface/resource/JFaceColors/disposeColors/, Dispose of all allocated colors. Called on workbench shutdown. @deprecated JFaceColors no longer maintains a cache of colors. This job is now handled by the ColorRegistry.
method,org/eclipse/jface/resource/JFaceColors/setColors/Control;Color;Color, Set the foreground and background colors of the control to the specified values. If the values are null than ignore them. @param control the control the foreground and/or background color should be set @param foreground Color the foreground color (maybe null) @param background Color the background color (maybe null)
method,org/eclipse/jface/resource/ImageDescriptor/createFromImage/Image, Creates and returns a new image descriptor for the given image. Note that disposing the original Image will cause the descriptor to become invalid. @since 3.1 @param img image to create @return a newly created image descriptor
method,org/eclipse/jface/resource/ImageDescriptor/getImageData/, Creates and returns a new SWT ImageData object for this image descriptor. Note that each call returns a new SWT image data object. This framework method is declared public so that it is possible to request an image descriptor's image data without creating an SWT image object. Returns null if the image data could not be created. @return a new image data or null
field,org/eclipse/jface/resource/ImageDescriptor/DEFAULT_IMAGE_DATA, A small red square used to warn that an image cannot be created. 
method,org/eclipse/jface/resource/ColorRegistry/getColorDescriptor/String, Returns the color descriptor associated with the given symbolic color name. As of 3.4 if this color is not defined then an unspecified color is returned. Users that wish to ensure a reasonable default value should use {@link #getColorDescriptor(String, ColorDescriptor)} instead. @since 3.1 @param symbolicName @return the color descriptor associated with the given symbolic color name or an unspecified sentinel.
method,org/eclipse/jface/resource/ColorRegistry/ColorRegistry/Display;boolean, Create a new instance of the receiver. @param display the Display to hook into @param cleanOnDisplayDisposal whether all fonts allocated by this ColorRegistry should be disposed when the display is disposed @since 3.1
class,org/eclipse/jface/resource/ColorDescriptor, Lightweight descriptor for an SWT color. Each ColorDescriptor will create a particular SWT Color on demand. This object will be compared so hashCode(...) and equals(...) must return meaningful values. @since 3.1
method,org/eclipse/jface/resource/ColorDescriptor/createFrom/Color;Device, Creates a ColorDescriptor from an existing Color, given the Device associated with the original Color. This is the usual way to convert a Color into a ColorDescriptor. Note that the returned ColorDescriptor depends on the original Color, and disposing the Color will invalidate the ColorDescriptor. @deprecated use {@link ColorDescriptor#createFrom(Color)} @since 3.1 @param toCreate Color to convert into a ColorDescriptor. @param originalDevice this must be the same Device that was passed into the original Color's constructor. @return a newly created ColorDescriptor that describes the given Color.
method,org/eclipse/jface/resource/ColorDescriptor/createFrom/Color, Creates a ColorDescriptor from an existing color. The returned ColorDescriptor depends on the original Color. Disposing the original colour while the color descriptor is still in use may cause SWT to throw a graphic disposed exception. @since 3.1 @param toCreate Color to generate a ColorDescriptor from @return a newly created ColorDescriptor
method,org/eclipse/jface/resource/ColorDescriptor/createColor/Device, Returns the Color described by this descriptor. @param device SWT device on which to allocate the Color @return a newly allocated SWT Color object (never null) @throws DeviceResourceException if unable to allocate the Color
method,org/eclipse/jface/resource/ImageRegistry/ImageRegistry/Display, Creates an empty image registry. @param display this Display must not be null and must not be disposed in order to use this registry
class,org/eclipse/jface/resource/LocalResourceManager, A local registry that shares its resources with some global registry. LocalResourceManager is typically used to safeguard against leaks. Clients can use a nested registry to allocate and deallocate resources in the global registry. Calling dispose() on the nested registry will deallocate everything allocated for the nested registry without affecting the rest of the global registry. A nested registry can be used to manage the resources for, say, a dialog box. @since 3.1
method,org/eclipse/jface/resource/LocalResourceManager/LocalResourceManager/ResourceManager;Control, Creates a local registry that wraps the given global registry. Anything allocated by this registry will be automatically cleaned up with the given control is disposed. Note that registries created in this way should not be used to allocate any resource that must outlive the given control. @param parentRegistry global registry that handles resource allocation @param owner control whose disposal will trigger cleanup of everything in the registry.
class,org/eclipse/jface/resource/DeviceResourceManager, Manages SWT resources for a particular device. IMPORTANT: in most cases clients should use a LocalResourceManager instead of a DeviceResourceManager. To create a resource manager on a particular display, use new LocalResourceManager(JFaceResources.getResources(myDisplay)). DeviceResourceManager should only be used directly when managing resources for a device other than a Display (such as a printer). @see LocalResourceManager @since 3.1
method,org/eclipse/jface/resource/DeviceResourceException/DeviceResourceException/DeviceResourceDescriptor;Throwable, Creates a DeviceResourceException indicating an error attempting to create a resource and an embedded low-level exception describing the cause @param missingResource @param cause cause of the exception (or null if none)
method,org/eclipse/jface/resource/DeviceResourceException/DeviceResourceException/DeviceResourceDescriptor, Creates a DeviceResourceException indicating an error attempting to create a resource @param missingResource
method,org/eclipse/jface/resource/DeviceResourceDescriptor/destroyResource/Object, Undoes everything that was done by a previous call to create(...), given the object that was returned by create(...). @since 3.1 @param previouslyCreatedObject an object that was returned by an equal descriptor in a previous call to createResource(...).
class,org/eclipse/jface/resource/FontDescriptor, Lightweight descriptor for a font. Creates the described font on demand. Subclasses can implement different ways of describing a font. These objects will be compared, so hashCode(...) and equals(...) must return something meaningful. @since 3.1
method,org/eclipse/jface/resource/FontDescriptor/createFrom/Font, Creates a FontDescriptor that describes an existing font. The resulting descriptor depends on the original Font, and disposing the original Font while the descriptor is still in use may cause SWT to throw a graphic disposed exception. @since 3.1 @param font font to create @return a newly created FontDescriptor that describes the given font
method,org/eclipse/jface/resource/FontDescriptor/withStyle/int, Returns a FontDescriptor that is equivalent to the reciever, but has the given style bits, in addition to any styles the reciever already has. Does not modify the reciever. @param style a bitwise combination of SWT.NORMAL, SWT.ITALIC and SWT.BOLD @return a new FontDescriptor with the given additional style bits @since 3.3
class,org/eclipse/jface/resource/ResourceManager, This class manages SWT resources. It manages reference-counted instances of resources such as Fonts, Images, and Colors, and allows them to be accessed using descriptors. Everything allocated through the registry should also be disposed through the registry. Since the resources are shared and reference counted, they should never be disposed directly. ResourceManager handles correct allocation and disposal of resources. It differs from the various JFace *Registry classes, which also map symbolic IDs onto resources. In general, you should use a *Registry class to map IDs onto descriptors, and use a ResourceManager to convert the descriptors into real Images/Fonts/etc. @since 3.1
method,org/eclipse/jface/resource/ResourceManager/destroy/DeviceResourceDescriptor, Deallocates a resource previously allocated by {@link #create(DeviceResourceDescriptor)}. Descriptors are compared by equality, not identity. If the same resource was created multiple times, this may decrement a reference count rather than disposing the actual resource. @since 3.1 @param descriptor identifier for the resource
method,org/eclipse/jface/resource/ResourceManager/get/DeviceResourceDescriptor, Returns a previously-allocated resource or allocates a new one if none exists yet. The resource will remain allocated for at least the lifetime of this resource manager. If necessary, the resource will be deallocated automatically when the resource manager is disposed. The resources returned from this method are reference counted and may be shared internally with other resource managers. They should never be disposed outside of the ResourceManager framework, or it will cause exceptions in other code that shares them. For example, never call {@link org.eclipse.swt.graphics.Resource#dispose()} on anything returned from this method. Callers may safely downcast the result to the resource type associated with the descriptor. For example, when given an ImageDescriptor, the return value of this method may be downcast to Image. This method should only be used for resources that should remain allocated for the lifetime of the resource manager. To allocate shorter-lived resources, manage them with create, and destroy rather than this method. This method should never be called on the global resource manager, since all resources will remain allocated for the lifetime of the app and will be effectively leaked. @param descriptor identifier for the requested resource @return the requested resource. Never null. @throws DeviceResourceException if the resource does not exist yet and cannot be created for any reason. @since 3.3
method,org/eclipse/jface/resource/ResourceManager/destroyColor/RGB, Undoes everything that was done by a call to {@link #createColor(RGB)}. @since 3.1 @param descriptor RGB value of the color to dispose
method,org/eclipse/jface/resource/ResourceManager/destroyFont/FontDescriptor, Undoes everything that was done by a previous call to {@link #createFont(FontDescriptor)}. @since 3.1 @param descriptor description of the font to destroy
method,org/eclipse/jface/resource/ResourceManager/disposeExec/Runnable, Causes the run() method of the runnable to be invoked just before the receiver is disposed. The runnable can be subsequently canceled by a call to cancelDisposeExec. @param r runnable to execute.
method,org/eclipse/jface/resource/ResourceRegistry/getKeySet/, @return the set of keys this manager knows about. This collection should be immutable.
method,org/eclipse/jface/resource/CompositeImageDescriptor/getTransparentPixel/, Return the transparent pixel for the receiver. NOTE This value is not currently in use in the default implementation. @return int @since 3.3
method,org/eclipse/jface/resource/JFaceResources/getBundle/, Returns the resource bundle for JFace itself. The resouble bundle is obtained from ResourceBundle.getBundle(org.eclipse.jface.jface_nls). Note that several static convenience methods are also provided on this class for directly accessing resources in this bundle. @return the resource bundle
method,org/eclipse/jface/resource/JFaceResources/getFont/String, Returns the font in JFace's font registry with the given symbolic font name. Convenience method equivalent to JFaceResources.getFontRegistry().get(symbolicName) If an error occurs, return the default font. @param symbolicName the symbolic font name @return the font
method,org/eclipse/jface/resource/JFaceResources/getFontRegistry/, Returns the font registry for JFace itself. If the value has not been established by an earlier call to setFontRegistry, is it initialized to new FontRegistry(org.eclipse.jface.resource.jfacefonts). Note that several static convenience methods are also provided on this class for directly accessing JFace's standard fonts. @return the JFace font registry
method,org/eclipse/jface/resource/FontRegistry/FontRegistry/Display;boolean, Creates an empty font registry. @param display the Display @param cleanOnDisplayDisposal whether all fonts allocated by this FontRegistry should be disposed when the display is disposed @since 3.1
interface,org/eclipse/jface/operation/IRunnableContext, Interface for UI components which can execute a long-running operation in the form of an IRunnableWithProgress. The context is responsible for displaying a progress indicator and Cancel button to the end user while the operation is in progress; the context supplies a progress monitor to be used from code running inside the operation. Note that an IRunnableContext is not a runnable itself. For examples of UI components which implement this interface, see ApplicationWindow, ProgressMonitorDialog, and WizardDialog. @see IRunnableWithProgress @see org.eclipse.jface.window.ApplicationWindow @see org.eclipse.jface.dialogs.ProgressMonitorDialog @see org.eclipse.jface.wizard.WizardDialog
interface,org/eclipse/jface/operation/IRunnableWithProgress, The IRunnableWithProgress interface should be implemented by any class whose instances are intended to be executed as a long-running operation. Long-running operations are typically presented at the UI via a modal dialog showing a progress indicator and a Cancel button. The class must define a run method that takes a progress monitor. The run method is usually not invoked directly, but rather by passing the IRunnableWithProgress to the run method of an IRunnableContext, which provides the UI for the progress monitor and Cancel button. @see IRunnableContext
method,org/eclipse/jface/operation/IRunnableWithProgress/run/IProgressMonitor, Runs this operation. Progress should be reported to the given progress monitor. This method is usually invoked by an IRunnableContext's run method, which supplies the progress monitor. A request to cancel the operation should be honored and acknowledged by throwing InterruptedException. @param monitor the progress monitor to use to display progress and receive requests for cancelation @exception InvocationTargetException if the run method must propagate a checked exception, 	it should wrap it inside an InvocationTargetException; runtime exceptions are automatically wrapped in an InvocationTargetException by the calling context @exception InterruptedException if the operation detects a request to cancel, using IProgressMonitor.isCanceled(), it should exit by throwing InterruptedException @see IRunnableContext#run
interface,org/eclipse/jface/operation/IThreadListener, A thread listener is an object that is interested in receiving notifications of thread changes. For example, a thread listener can be used to notify a runnable of the thread that will execute it, allowing the runnable to transfer thread-local state from the calling thread before control passes to the new thread. @since 3.1
method,org/eclipse/jface/operation/IThreadListener/threadChange/Thread, Notification that a thread change is occurring. @param thread The new thread
method,org/eclipse/jface/operation/ModalContext/checkCanceled/IProgressMonitor, Checks with the given progress monitor and throws InterruptedException if it has been canceled. Code in a long-running operation should call this method regularly so that a request to cancel will be honored. Convenience for: if (monitor.isCanceled()) 	throw new InterruptedException(); @param monitor the progress monitor @exception InterruptedException if cancelling the operation has been requested @see IProgressMonitor#isCanceled()
method,org/eclipse/jface/operation/ModalContext/getModalLevel/, Returns the modal nesting level. The modal nesting level increases by one each time the ModalContext.run method is called within the dynamic scope of another call to ModalContext.run. @return the modal nesting level, or 0 if this method is called outside the dynamic scope of any invocation of ModalContext.run
method,org/eclipse/jface/operation/ModalContext/isModalContextThread/Thread, Returns whether the given thread is running a modal context. @param thread The thread to be checked @return true if the given thread is running a modal context, false if not
method,org/eclipse/jface/operation/ModalContext/setDebugMode/boolean, Sets whether ModalContext is running in debug mode. @param debugMode true for debug mode, and false for normal mode (the default)
method,org/eclipse/jface/operation/ModalContext/setAllowReadAndDispatch/boolean, Sets whether ModalContext may process events (by calling Display.readAndDispatch()) while running operations. By default, ModalContext will process events while running operations. Use this method to disallow event processing temporarily. @param allowReadAndDispatch true (the default) if events may be processed while running an operation, false if Display.readAndDispatch() should not be called from ModalContext. @since 3.2
method,org/eclipse/jface/contentassist/ISubjectControlContentAssistProcessor/computeCompletionProposals/IContentAssistSubjectControl;int, Returns a list of completion proposals based on the specified location within the document that corresponds to the current cursor position within the text viewer. @param contentAssistSubjectControl the content assist subject control whose document is used to compute the proposals @param documentOffset an offset within the document for which completions should be computed @return an array of completion proposals or null if no proposals are possible
method,org/eclipse/jface/contentassist/ISubjectControlContentAssistProcessor/computeContextInformation/IContentAssistSubjectControl;int, Returns information about possible contexts based on the specified location within the document that corresponds to the current cursor position within the content assist subject control. @param contentAssistSubjectControl the content assist subject control whose document is used to compute the possible contexts @param documentOffset an offset within the document for which context information should be computed @return an array of context information objects or null if no context could be found
interface,org/eclipse/jface/contentassist/ISubjectControlContentAssistant, Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} to allow to install a content assistant on the given {@linkplain org.eclipse.jface.contentassist.IContentAssistSubjectControl content assist subject control}. @since 3.0 @deprecated As of 3.2, replaced by Platform UI's field assist support
interface,org/eclipse/jface/contentassist/ISubjectControlContextInformationValidator, Extends {@link org.eclipse.jface.text.contentassist.IContextInformationValidator} to allow to install a content assistant on the given {@linkplain org.eclipse.jface.contentassist.IContentAssistSubjectControl content assist subject control}. @since 3.0 @deprecated As of 3.2, replaced by Platform UI's field assist support
method,org/eclipse/jface/contentassist/ISubjectControlContextInformationValidator/install/IContextInformation;IContentAssistSubjectControl;int, Installs this validator for the given context information. @param info the context information which this validator should check @param contentAssistSubjectControl the content assist subject control @param offset the document offset for which the information has been computed
method,org/eclipse/jface/contentassist/AbstractControlContentAssistSubjectAdapter/setContentAssistCueProvider/ILabelProvider, Sets the visual feedback provider for content assist. The given {@link ILabelProvider} methods are called with {@link #getControl()} as argument. getImage(Object) provides the visual cue image. The image can maximally be 5 pixels wide and 8 pixels high. If getImage(Object) returns null, a default image is used. getText(Object) provides the hover info text. It is shown when hovering over the cue image or the adapted {@link Control}. No info text is shown if getText(Object) returns null. The given {@link ILabelProvider} becomes owned by the {@link AbstractControlContentAssistSubjectAdapter}, i.e. it gets disposed when the adapted {@link Control} is disposed or when another {@link ILabelProvider} is set. @param labelProvider a {@link ILabelProvider}, or null 	if no visual feedback should be shown
field,org/eclipse/jface/contentassist/AbstractControlContentAssistSubjectAdapter/DEBUG,
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/getLineHeight/, Returns the line height. @return line height in pixel @throws org.eclipse.swt.SWTException in these cases: 	{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been 		disposed 	{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the 		 thread that created the receiver 
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/getCaretOffset/, Returns the caret position relative to the start of the text in widget coordinates. @return the caret position relative to the start of the text in widget coordinates @throws org.eclipse.swt.SWTException in these cases: 	{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been 		disposed 	{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the 		thread that created the receiver 
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/getLocationAtOffset/int, Returns the x, y location of the upper left corner of the character bounding box at the specified offset in the text. The point is relative to the upper left corner of the widget client area. @param offset widget offset relative to the start of the content 0 				{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed				{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver			 @exception IllegalArgumentException when the offset is outside the valid range
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/getLineDelimiter/, Returns the line delimiter used for entering new lines by key down or paste operation. @return line delimiter used for entering new lines by key down or paste operation @throws org.eclipse.swt.SWTException in these cases:							{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed				{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver			
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/getWidgetSelectionRange/, Returns the selected range in the subject's widget. @return start and length of the selection, x is the offset of the @throws org.eclipse.swt.SWTException in these cases:							{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed				{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver			
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/prependVerifyKeyListener/VerifyKeyListener, If supported, inserts the verify key listener at the beginning of this content assist subject's list of verify key listeners. If the listener is already registered with the viewer this call moves the listener to the beginning of the list. Note: This content assist subject control may not support prepending a verify listener, in which case false will be returned. However, {@link #appendVerifyKeyListener(VerifyKeyListener)} might work. @param verifyKeyListener the listener to be inserted @return true if the listener was added
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/removeVerifyKeyListener/VerifyKeyListener, Removes the verify key listener from this content assist subject control's list of verify key listeners. If the listener is not registered, this call has no effect. @param verifyKeyListener the listener to be removed
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/addKeyListener/KeyListener, Adds the listener to the collection of listeners who will be notified when keys are pressed and released on the system keyboard, by sending it one of the messages defined in the {@link KeyListener} interface. @param keyListener the listener which should be notified @exception IllegalArgumentException if the listener is null @throws org.eclipse.swt.SWTException in these cases:							{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed				{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver			 @see KeyListener @see #removeKeyListener(KeyListener)
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/removeKeyListener/KeyListener, Removes the listener from the collection of listeners who will be notified when keys are pressed and released on the system keyboard. @param keyListener the listener which should be notified @exception IllegalArgumentException if the listener is null @throws org.eclipse.swt.SWTException in these cases:							{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed				{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver			 @see KeyListener @see #addKeyListener(KeyListener)
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/removeSelectionListener/SelectionListener, Removes the specified selection listener. @param selectionListener the listener @exception org.eclipse.swt.SWTException 							{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed				{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver			 @exception IllegalArgumentException if listener is null
method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/addSelectionListener/SelectionListener, If supported, adds a selection listener. A Selection event is sent by the widget when the selection has changed. @param selectionListener the listener @return true if adding a selection listener is supported							{@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed				{@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver			 @exception IllegalArgumentException if listener is null
interface,org/eclipse/jface/contentassist/ISubjectControlContextInformationPresenter, Extends {@link org.eclipse.jface.text.contentassist.IContextInformationPresenter} to allow to install a content assistant on the given {@linkplain org.eclipse.jface.contentassist.IContentAssistSubjectControl content assist subject control}. @since 3.0 @deprecated As of 3.2, replaced by Platform UI's field assist support
method,org/eclipse/jface/contentassist/ISubjectControlContextInformationPresenter/install/IContextInformation;IContentAssistSubjectControl;int, Installs this presenter for the given context information. @param info the context information which this presenter should style @param contentAssistSubjectControl the content assist subject control @param offset the document offset for which the information has been computed
method,org/eclipse/jface/preference/ScaleFieldEditor/valueChanged/, Informs this field editor's listener, if it has one, about a change to the value (VALUE property) provided that the old and new values are different. This hook is not called when the scale is initialized (or reset to the default value) from the preference store. 
class,org/eclipse/jface/preference/FieldEditor, Abstract base class for all field editors. A field editor presents the value of a preference to the end user. The value is loaded from a preference store; if modified by the end user, the value is validated and eventually stored back to the preference store. A field editor reports an event when the value, or the validity of the value, changes. Field editors should be used in conjunction with a field editor preference page (FieldEditorPreferencePage) which coordinates everything and provides the message line which display messages emanating from the editor. This package contains ready-to-use field editors for various types of preferences: BooleanFieldEditor - booleans IntegerFieldEditor - integers StringFieldEditor - text strings RadioGroupFieldEditor - enumerations ColorFieldEditor - RGB colors FontFieldEditor - fonts DirectoryFieldEditor - directories FileFieldEditor - files PathEditor - paths 
method,org/eclipse/jface/preference/FieldEditor/clearErrorMessage/, Clears the error message from the message line.
method,org/eclipse/jface/preference/FieldEditor/fillIntoGrid/Composite;int, Fills this field editor's basic controls into the given parent. @param parent the composite used as a parent for the basic controls;	the parent's layout must be a GridLayout @param numColumns the number of columns
method,org/eclipse/jface/preference/FieldEditor/setPropertyChangeListener/IPropertyChangeListener, Sets or removes the property change listener for this field editor. Note that field editors can support only a single listener. @param listener a property change listener, or null to remove
method,org/eclipse/jface/preference/FieldEditor/showErrorMessage/String, Shows the given error message in the page for this field editor if it has one. @param msg the error message
method,org/eclipse/jface/preference/FieldEditor/setEnabled/boolean;Composite, Set whether or not the controls in the field editor are enabled. @param enabled The enabled state. @param parent The parent of the controls in the group. Used to create the controls if required.
field,org/eclipse/jface/preference/FieldEditor/HORIZONTAL_GAP, Gap between label and control.
method,org/eclipse/jface/preference/PreferenceConverter/setDefault/IPreferenceStore;String;FontData, Sets the default value of the preference with the given name in the given preference store. As FontDatas are stored as arrays this method is only provided for backwards compatibility. Use setDefault(IPreferenceStore, String, FontData[]) instead. @param store the preference store @param name the name of the preference @param value the new default value of the preference
method,org/eclipse/jface/preference/PreferenceConverter/setValue/IPreferenceStore;String;FontData[], Sets the current value of the preference with the given name in the given preference store. This method also sets the corresponding key in the JFace font registry to the value and fires a property change event to listeners on the preference store. Note that this API does not update any other settings that may be dependant upon it. Only the value in the preference store and in the font registry is updated. @param store the preference store @param name the name of the preference @param value the new current value of the preference @see #putValue(IPreferenceStore, String, FontData[])
method,org/eclipse/jface/preference/PreferenceConverter/getStoredRepresentation/FontData[], Returns the stored representation of the given array of FontData objects. The stored representation has the form FontData;FontData; Only includes the non-null entries. @param fontData the array of FontData objects @return the stored representation of the FontData objects @since 3.0
field,org/eclipse/jface/preference/JFacePreferences/ERROR_COLOR, Identifier for the Error Color
method,org/eclipse/jface/preference/IPreferencePageContainer/updateButtons/, Adjusts the enable state of the OK button to reflect the state of the currently active page in this container. This method is called by the container itself when its preference page changes and may be called by the page at other times to force a button state update. 
method,org/eclipse/jface/preference/IPreferencePageContainer/updateMessage/, Updates the message (or error message) shown in the message line to reflect the state of the currently active page in this container. This method is called by the container itself when its preference page changes and may be called by the page at other times to force a message update. 
method,org/eclipse/jface/preference/IPreferencePageContainer/updateTitle/, Updates the title to reflect the state of the currently active page in this container. This method is called by the container itself when its page changes and may be called by the page at other times to force a title update. 
method,org/eclipse/jface/preference/ColorSelector/addListener/IPropertyChangeListener, Adds a property change listener to this ColorSelector. Events are fired when the color in the control changes via the user clicking an selecting a new one in the color dialog. No event is fired in the case where setColorValue(RGB) is invoked. @param listener a property change listener @since 3.0
method,org/eclipse/jface/preference/BooleanFieldEditor/getDescriptionControl/Composite, Returns the control responsible for displaying this field editor's label. This method can be used to set a tooltip for a BooleanFieldEditor. Note that the normal pattern of getLabelControl(parent).setToolTipText(tooltipText) does not work for boolean field editors, as it can lead to duplicate text (see bug 259952). @param parent the parent composite @return the control responsible for displaying the label @since 3.5
method,org/eclipse/jface/preference/ColorFieldEditor/computeImageSize/Control, Computes the size of the color image displayed on the button. This is an internal method and should not be called by clients. @param window the window to create a GC on for calculation. @return Point The image size 
method,org/eclipse/jface/preference/ColorFieldEditor/getChangeControl/Composite, Returns the change button for this field editor. @param parent The control to create the button in if required. @return the change button
method,org/eclipse/jface/preference/ComboFieldEditor/ComboFieldEditor/String;String;String[][];Composite, Create the combo box field editor. @param name the name of the preference this field editor works on @param labelText the label text of the field editor @param entryNamesAndValues the names (labels) and underlying values to populate the combo widget. These should be arranged as: { {name1, value1}, {name2, value2}, ...} @param parent the parent composite
class,org/eclipse/jface/preference/StringButtonFieldEditor, An abstract field editor for a string type preference that presents a string input field with a change button to its right to edit the input field's content. When the user presses the change button, the abstract framework method changePressed() gets called to compute a new string.
method,org/eclipse/jface/preference/StringButtonFieldEditor/getChangeControl/Composite, Get the change control. Create it in parent if required. @param parent @return Button
method,org/eclipse/jface/preference/FieldEditorPreferencePage/checkState/, Recomputes the page's error state by calling isValid for every field editor.
method,org/eclipse/jface/preference/FieldEditorPreferencePage/getFieldEditorParent/, Returns a parent composite for a field editor. This value must not be cached since a new parent may be created each time this method called. Thus this method must be called each time a field editor is constructed. @return a parent
method,org/eclipse/jface/preference/FieldEditorPreferencePage/performOk/, The field editor preference page implementation of this PreferencePage method saves all field editors by calling FieldEditor.store. Note that this method does not save the preference store itself; it just stores the values back into the preference store. @see FieldEditor#store()
method,org/eclipse/jface/preference/FieldEditorPreferencePage/propertyChange/PropertyChangeEvent, The field editor preference page implementation of this IPreferencePage (and IPropertyChangeListener) method intercepts IS_VALID events but passes other events on to its superclass.
method,org/eclipse/jface/preference/PreferenceDialog/helpPressed/, Notifies of the pressing of the Help button. The default implementation of this framework method calls performHelp on the currently active page. 
method,org/eclipse/jface/preference/PreferenceDialog/okPressed/, The preference dialog implementation of this Dialog framework method sends performOk to all pages of the preference dialog, then calls handleSave on this dialog to save any state, and then calls close to close this dialog.
method,org/eclipse/jface/preference/PreferenceDialog/setErrorMessage/String, Display the given error message. The currently displayed message is saved and will be redisplayed when the error message is set to null. @param newErrorMessage the errorMessage to display or null
method,org/eclipse/jface/preference/PreferenceDialog/setMessage/String, Set the message text. If the message line currently displays an error, the message is stored and will be shown after a call to clearErrorMessage Shortcut for setMessage(newMessage, NONE) @param newMessage the message, or null to clear the message
field,org/eclipse/jface/preference/PreferenceDialog/PREF_DLG_IMG_TITLE_ERROR, Indentifier for the error image
method,org/eclipse/jface/preference/FontFieldEditor/getChangeControl/Composite, Returns the change button for this field editor. @param parent The Composite to create the button in if required. @return the change button
method,org/eclipse/jface/preference/FontFieldEditor/getValueControl/Composite, Returns the value control for this field editor. The value control displays the currently selected font name. @param parent The Composite to create the viewer in if required @return the value control
interface,org/eclipse/jface/preference/IPreferenceNode, Interface to a node in a preference dialog. A preference node maintains a label and image used to display the node in a preference dialog (usually in the form of a tree), as well as the preference page this node stands for. The node may use lazy creation for its page Note that all preference nodes must be dispose their resources. The node must dispose the page managed by this node, and any SWT resources allocated by this node (Images, Fonts, etc). However the node itself may be reused.
method,org/eclipse/jface/preference/IPreferenceNode/disposeResources/, Release the page managed by this node, and any SWT resources held onto by this node (Images, Fonts, etc). Note that nodes are reused so this is not a call to dispose the node itself.
method,org/eclipse/jface/preference/PreferencePage/computeSize/, Computes the size for this page's UI control. The default implementation of this IPreferencePage method returns the size set by setSize; if no size has been set, but the page has a UI control, the framework method doComputeSize is called to compute the size. @return the size of the preference page encoded as new Point(width,height), or (0,0) if the page doesn't currently have any UI component
method,org/eclipse/jface/preference/PreferencePage/isValid/, The preference page implementation of an IPreferencePage method returns whether this preference page is valid. Preference pages are considered valid by default; call setValid(false) to make a page invalid. @see IPreferencePage#isValid()
method,org/eclipse/jface/preference/PreferencePage/performApply/, Performs special processing when this page's Apply button has been pressed. This is a framework hook method for sublcasses to do special things when the Apply button has been pressed. The default implementation of this framework method simply calls performOk to simulate the pressing of the page's OK button. @see #performOk
method,org/eclipse/jface/preference/PreferencePage/createNoteComposite/Font;Composite;String;String, Creates a composite with a highlighted Note entry and a message text. This is designed to take up the full width of the page. @param font the font to use @param composite the parent composite @param title the title of the note @param message the message for the note @return the composite for the note
method,org/eclipse/jface/preference/StringFieldEditor/getErrorMessage/, Returns the error message that will be displayed when and if an error occurs. @return the error message, or null if none
method,org/eclipse/jface/preference/StringFieldEditor/setErrorMessage/String, Sets the error message that will be displayed when and if an error occurs. @param message the error message
method,org/eclipse/jface/preference/StringFieldEditor/showErrorMessage/, Shows the error message set via setErrorMessage.
method,org/eclipse/jface/preference/StringFieldEditor/valueChanged/, Informs this field editor's listener, if it has one, about a change to the value (VALUE property) provided that the old and new values are different. This hook is not called when the text is initialized (or reset to the default value) from the preference store. 
method,org/eclipse/jface/preference/StringFieldEditor/StringFieldEditor/String;String;int;int;Composite, Creates a string field editor. Use the method setTextLimit to limit the text. @param name the name of the preference this field editor works on @param labelText the label text of the field editor @param width the width of the text input field in characters, or UNLIMITED for no limit @param strategy either VALIDATE_ON_KEY_STROKE to perform on the fly checking (the default), or VALIDATE_ON_FOCUS_LOST to perform validation only after the text has been typed in @param parent the parent of the field editor's control @since 2.0
field,org/eclipse/jface/preference/StringFieldEditor/VALIDATE_ON_KEY_STROKE, Validation strategy constant (value 0) indicating that the editor should perform validation after every key stroke. @see #setValidateStrategy
field,org/eclipse/jface/preference/StringFieldEditor/VALIDATE_ON_FOCUS_LOST, Validation strategy constant (value 1) indicating that the editor should perform validation only when the text widget loses focus. @see #setValidateStrategy
method,org/eclipse/jface/preference/FileFieldEditor/FileFieldEditor/String;String;boolean;Composite, Creates a file field editor. @param name the name of the preference this field editor works on @param labelText the label text of the field editor @param enforceAbsolute true if the file path must be absolute, and false otherwise @param parent the parent of the field editor's control
method,org/eclipse/jface/preference/FileFieldEditor/FileFieldEditor/String;String;boolean;int;Composite, Creates a file field editor. @param name the name of the preference this field editor works on @param labelText the label text of the field editor @param enforceAbsolute true if the file path must be absolute, and false otherwise @param validationStrategy either {@link StringButtonFieldEditor#VALIDATE_ON_KEY_STROKE} to perform on the fly checking, or {@link StringButtonFieldEditor#VALIDATE_ON_FOCUS_LOST} (the default) to perform validation only after the text has been typed in @param parent the parent of the field editor's control. @since 3.4 @see StringButtonFieldEditor#VALIDATE_ON_KEY_STROKE @see StringButtonFieldEditor#VALIDATE_ON_FOCUS_LOST
interface,org/eclipse/jface/preference/IPreferenceStore, The IPreferenceStore interface represents a table mapping named preferences to values. If there is no value for a given name, then that preferences's default value is returned; and if there is no default value for that preference, then a default-default value is returned. The default-default values for the primitive types are as follows: 	boolean = false 	double = 0.0 	float = 0.0f 	int = 0 long = 0 	String = (the empty string) Thus a preference store maintains two values for each of a set of names: a current value and a default value. The typical usage is to establish the defaults for all known preferences and then restore previously stored values for preferences whose values were different from their defaults. After the current values of the preferences have been modified, it is a simple matter to write out only those preferences whose values are different from their defaults. This two-tiered approach to saving and restoring preference setting minimized the number of preferences that need to be persisted; indeed, the normal starting state does not require storing any preferences at all. A property change event is reported whenever a preferences current value actually changes (whether through setValue, setToDefault, or other unspecified means). Note, however, that manipulating default values (with setDefault) does not cause such events to be reported. Clients who need a preference store may implement this interface or instantiate the standard implementation PreferenceStore. @see PreferenceStore
method,org/eclipse/jface/preference/IPreferenceStore/firePropertyChangeEvent/String;Object;Object, Fires a property change event corresponding to a change to the current value of the preference with the given name. This method is provided on this interface to simplify the implementation of decorators. There is normally no need to call this method since setValue and setToDefault report such events in due course. Implementations should funnel all preference changes through this method. @param name the name of the preference, to be used as the property in the event object @param oldValue the old value @param newValue the new value
method,org/eclipse/jface/preference/IPreferenceStore/needsSaving/, Returns whether the current values in this property store require saving. @return true if at least one of values of the preferences known to this store has changed and requires saving, and false otherwise.
method,org/eclipse/jface/preference/IPreferenceStore/putValue/String;String, Sets the current value of the preference with the given name to the given string value without sending a property change. This method does not fire a property change event and should only be used for setting internal preferences that are not meant to be processed by listeners. Normal clients should instead call #setValue. @param name the name of the preference @param value the new current value of the preference
method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;double, Sets the default value for the double-valued preference with the given name. Note that the current value of the preference is affected if the preference's current value was its old default value, in which case it changes to the new default value. If the preference's current is different from its old default value, its current value is unaffected. No property change events are reported by changing default values. @param name the name of the preference @param value the new default value for the preference
method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;float, Sets the default value for the float-valued preference with the given name. Note that the current value of the preference is affected if the preference's current value was its old default value, in which case it changes to the new default value. If the preference's current is different from its old default value, its current value is unaffected. No property change events are reported by changing default values. @param name the name of the preference @param value the new default value for the preference
method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;int, Sets the default value for the integer-valued preference with the given name. Note that the current value of the preference is affected if the preference's current value was its old default value, in which case it changes to the new default value. If the preference's current is different from its old default value, its current value is unaffected. No property change events are reported by changing default values. @param name the name of the preference @param value the new default value for the preference
method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;long, Sets the default value for the long-valued preference with the given name. Note that the current value of the preference is affected if the preference's current value was its old default value, in which case it changes to the new default value. If the preference's current is different from its old default value, its current value is unaffected. No property change events are reported by changing default values. @param name the name of the preference @param value the new default value for the preference
method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;String, Sets the default value for the string-valued preference with the given name. Note that the current value of the preference is affected if the preference's current value was its old default value, in which case it changes to the new default value. If the preference's current is different from its old default value, its current value is unaffected. No property change events are reported by changing default values. @param name the name of the preference @param defaultObject the new default value for the preference
method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;boolean, Sets the default value for the boolean-valued preference with the given name. Note that the current value of the preference is affected if the preference's current value was its old default value, in which case it changes to the new default value. If the preference's current is different from its old default value, its current value is unaffected. No property change events are reported by changing default values. @param name the name of the preference @param value the new default value for the preference
method,org/eclipse/jface/preference/IPreferenceStore/setToDefault/String, Sets the current value of the preference with the given name back to its default value. Note that the preferred way of re-initializing a preference to the appropriate default value is to call setToDefault. This is implemented by removing the named value from the store, thereby exposing the default value. @param name the name of the preference
method,org/eclipse/jface/preference/PreferenceLabelProvider/getText/Object, @param element must be an instance of IPreferenceNode. @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)
method,org/eclipse/jface/preference/PreferenceLabelProvider/getImage/Object, @param element must be an instance of IPreferenceNode. @see org.eclipse.jface.viewers.ILabelProvider#getImage(java.lang.Object)
method,org/eclipse/jface/preference/PreferenceManager/addToRoot/IPreferenceNode, Adds the given preference node as a subnode of the root. @param node the node to add, which must implement IPreferenceNode
method,org/eclipse/jface/preference/PreferenceManager/getRoot/, Returns the root node. Note that the root node is a special internal node that is used to collect together all the nodes that have no parent; it is not given out to clients. @return the root node
method,org/eclipse/jface/wizard/IWizard/addPages/, Adds any last-minute pages to this wizard. This method is called just before the wizard becomes visible, to give the wizard the opportunity to add any lazily created pages. 
method,org/eclipse/jface/wizard/IWizard/createPageControls/Composite, Creates this wizard's controls in the given parent control. The wizard container calls this method to create the controls for the wizard's pages before the wizard is opened. This allows the wizard to size correctly; otherwise a resize may occur when moving to a new page. @param pageContainer the parent control
method,org/eclipse/jface/wizard/IWizard/getDialogSettings/, Returns the dialog settings for this wizard. The dialog store is used to record state between wizard invocations (for example, radio button selections, last directory, etc.). @return the dialog settings, or null if none
method,org/eclipse/jface/wizard/IWizard/getNextPage/IWizardPage, Returns the successor of the given page. This method is typically called by a wizard page @param page the page @return the next page, or null if none
method,org/eclipse/jface/wizard/IWizard/getPreviousPage/IWizardPage, Returns the predecessor of the given page. This method is typically called by a wizard page @param page the page @return the previous page, or null if none
method,org/eclipse/jface/wizard/IWizard/needsPreviousAndNextButtons/, Returns whether this wizard needs Previous and Next buttons. The result of this method is typically used by the container. @return true if Previous and Next buttons are required, and false if none are needed
method,org/eclipse/jface/wizard/IWizard/needsProgressMonitor/, Returns whether this wizard needs a progress monitor. The result of this method is typically used by the container. @return true if a progress monitor is required, and false if none is needed
method,org/eclipse/jface/wizard/IWizard/performFinish/, Performs any actions appropriate in response to the user having pressed the Finish button, or refuse if finishing now is not permitted. Normally this method is only called on the container's current wizard. However if the current wizard is a nested wizard this method will also be called on all wizards in its parent chain. Such parents may use this notification to save state etc. However, the value the parents return from this method is ignored. @return true to indicate the finish request was accepted, and false to indicate that the finish request was refused
method,org/eclipse/jface/wizard/IWizardContainer2/updateSize/, Updates the window size to reflect the state of the current wizard. This method is called by the container itself when its wizard changes and may be called by the wizard at other times to force a window size change. 
interface,org/eclipse/jface/wizard/IWizardContainer, Interface for containers that can host a wizard. It displays wizard pages, at most one of which is considered the current page. getCurrentPage returns the current page; showPage programmatically changes the the current page. Note that the pages need not all belong to the same wizard. The class WizardDialog provides a fully functional implementation of this interface which will meet the needs of most clients. However, clients are also free to implement this interface if WizardDialog does not suit their needs. Implementors are responsible for disposing of their wizards. @see org.eclipse.jface.wizard.IWizardContainer2
method,org/eclipse/jface/wizard/IWizardContainer/showPage/IWizardPage, Makes the given page visible. This method should not be use for normal page sequencing (back, next) which is handled by the container itself. It may, however, be used to move to another page in response to some custom action such as double clicking in a list. @param page the page to show @see #getCurrentPage
method,org/eclipse/jface/wizard/IWizardContainer/updateButtons/, Adjusts the enable state of the Back, Next, and Finish buttons to reflect the state of the currently active page in this container. This method is called by the container itself when its wizard page changes and may be called by the page at other times to force a button state update. 
method,org/eclipse/jface/wizard/IWizardContainer/updateMessage/, Updates the message (or error message) shown in the message line to reflect the state of the currently active page in this container. This method is called by the container itself when its wizard page changes and may be called by the page at other times to force a message update. 
method,org/eclipse/jface/wizard/IWizardContainer/updateTitleBar/, Updates the title bar (title, description, and image) to reflect the state of the currently active page in this container. This method is called by the container itself when its wizard page changes and may be called by the page at other times to force a title bar update. 
method,org/eclipse/jface/wizard/IWizardContainer/updateWindowTitle/, Updates the window title to reflect the state of the current wizard. This method is called by the container itself when its wizard changes and may be called by the wizard at other times to force a window title change. 
method,org/eclipse/jface/wizard/WizardDialog/createButtonsForButtonBar/Composite, Creates the buttons for this dialog's button bar. The WizardDialog implementation of this framework method prevents the parent composite's columns from being made equal width in order to remove the margin between the Back and Next buttons. @param parent the parent composite to contain the buttons
method,org/eclipse/jface/wizard/WizardDialog/createContents/Composite, The WizardDialog implementation of this Window method calls call IWizard.addPages to allow the current wizard to add extra pages, then super.createContents to create the controls. It then calls IWizard.createPageControls to allow the wizard to pre-create their page controls prior to opening, so that the wizard opens to the correct size. And finally it shows the first page.
field,org/eclipse/jface/wizard/WizardDialog/WIZ_IMG_ERROR, Image registry key for error message image (value dialog_title_error_image).
class,org/eclipse/jface/wizard/WizardDialog/PageContainerFillLayout, A layout for a container which includes several pages, like a notebook, wizard, or preference dialog. The size computed by this layout is the maximum width and height of all pages currently inserted into the container.
method,org/eclipse/jface/wizard/IWizardNode/dispose/, Disposes the wizard managed by this node. Does nothing if the wizard has not been created. This is the last message that should ever be sent to this node. 
method,org/eclipse/jface/wizard/IWizardNode/getExtent/, Returns the extent of the wizard for this node. If the content has not yet been created, calling this method does not trigger the creation of the wizard. This allows this node to suggest an extent in advance of actually creating the wizard. @return the extent, or (-1, -1) extent is not known
method,org/eclipse/jface/wizard/IWizardNode/getWizard/, Returns the wizard this node stands for. If the content has not been created beforehand, calling this method triggers the creation of the wizard and caches it so that the identical wizard object is returned on subsequent calls. @return the wizard
class,org/eclipse/jface/wizard/WizardSelectionPage, An abstract implementation of a wizard page that manages a set of embedded wizards. A wizard selection page should present a list of wizard nodes corresponding to other wizards. When the end user selects one of them from the list, the first page of the selected wizard becomes the next page. The only new methods introduced by this class are getSelectedNode and setSelectedNode. Otherwise, the subclass contract is the same as WizardPage. 
class,org/eclipse/jface/wizard/ProgressMonitorPart, A standard implementation of an IProgressMonitor. It consists of a label displaying the task and subtask name, and a progress indicator to show progress. In contrast to ProgressMonitorDialog this class only implements IProgressMonitor.
method,org/eclipse/jface/wizard/IWizardPage/setPreviousPage/IWizardPage, Sets the wizard page that would typically be shown if the user was to press the Back button. This method is called by the container. @param page the previous wizard page
method,org/eclipse/jface/wizard/Wizard/performCancel/, The Wizard implementation of this IWizard method does nothing and returns true. Subclasses should reimplement this method if they need to perform any special cancel processing for their wizard.
method,org/eclipse/jface/wizard/Wizard/performFinish/, Subclasses must implement this IWizard method to perform any special finish processing for their wizard.
method,org/eclipse/jface/wizard/Wizard/setDefaultPageImageDescriptor/ImageDescriptor, Sets the default page image descriptor for this wizard. This image descriptor will be used to generate an image for a page with no image of its own; the image will be computed once and cached. @param imageDescriptor the default page image descriptor
method,org/eclipse/jface/wizard/Wizard/setDialogSettings/IDialogSettings, Sets the dialog settings for this wizard. The dialog settings is used to record state between wizard invocations (for example, radio button selection, last import directory, etc.) @param settings the dialog settings, or null if none @see #getDialogSettings 
method,org/eclipse/jface/wizard/Wizard/setForcePreviousAndNextButtons/boolean, Controls whether the wizard needs Previous and Next buttons even if it currently contains only one page. This flag should be set on wizards where the first wizard page adds follow-on wizard pages based on user input. @param b true to always show Next and Previous buttons, and false to suppress Next and Previous buttons for single page wizards
method,org/eclipse/jface/wizard/Wizard/setNeedsProgressMonitor/boolean, Sets whether this wizard needs a progress monitor. @param b true if a progress monitor is required, and false if none is needed @see #needsProgressMonitor()
method,org/eclipse/jface/wizard/WizardPage/getShell/, The WizardPage implementation of this method declared on DialogPage returns the shell of the container. The advantage of this implementation is that the shell is accessable once the container is created even though this page's control may not yet be created.
method,org/eclipse/jface/wizard/WizardPage/toString/, Returns a printable representation of this wizard page suitable only for debug purposes.
method,org/eclipse/jface/internal/text/SelectionProcessor/isEmpty/ISelection, Returns true if the text covered by selection does not contain any characters. Note the difference to {@link ITextSelection#isEmpty()}, which returns true only for invalid selections. @param selection the selection @return true if selection does not contain any text, false otherwise @throws BadLocationException if accessing the document failed
method,org/eclipse/jface/internal/text/SelectionProcessor/isMultiline/ISelection, Returns true if selection extends to two or more lines, false otherwise. @param selection the selection @return true if selection extends to two or more lines, false otherwise @throws BadLocationException if selection is not valid regarding the target document
method,org/eclipse/jface/internal/text/SelectionProcessor/getCoveredLines/ISelection, Returns the number of lines touched by selection. Note that for linear selections, this is the number of contained delimiters plus 1. @param selection the selection @return the number of lines touched by selection @throws BadLocationException if accessing the document failed
method,org/eclipse/jface/internal/text/SelectionProcessor/SelectionProcessor/IDocument;int, Creates a new processor on the given document and using the given tab width. @param document the document @param tabWidth the tabulator width in space equivalents, must be &gt;=0
method,org/eclipse/jface/internal/text/ResizableShellSupport/makeResizable/Shell, Makes the given shell resizable on all platforms. The shell must have a {@link GridLayout}. If the shell is not resizable, this method enlarges the {@link GridLayout#marginWidth marginWidth} and {@link GridLayout#marginHeight marginHeight} and expects that the added area is not being shrunken or used in any way by other parties. @param shell the shell
class,org/eclipse/jface/internal/text/NonDeletingPositionUpdater, A position updater that never deletes a position. If the region containing the position is deleted, the position is moved to the beginning/end (falling together) of the change. If the region containing the position is replaced, the position is placed at the same location inside the replacement text, but always inside the replacement text. @since 3.1
method,org/eclipse/jface/internal/text/DelayedInputChangeListener/DelayedInputChangeListener/IDelayedInputChangeProvider;InformationControlReplacer, Creates a new listener. @param changeProvider the information control with delayed input changes @param informationControlReplacer the information control replacer, whose information control should get the new input
class,org/eclipse/jface/internal/text/InformationControlReplacer, An information control replacer can replace an {@link AbstractInformationControlManager}'s control. The {@link AbstractInformationControlManager} can be configured with such a replacer by calling setInformationControlReplacer. @since 3.4
method,org/eclipse/jface/internal/text/InformationControlReplacer/replaceInformationControl/IInformationControlCreator;Rectangle;Object;Rectangle;boolean, Replace the information control. @param informationPresenterControlCreator the information presenter control creator @param contentBounds the bounds of the content area of the information control @param information the information to show @param subjectArea the subject area @param takeFocus true iff the replacing information control should take focus
class,org/eclipse/jface/internal/text/StickyHoverManager, Implements a sticky hover control, i.e. a control that replaces a hover with an enriched and focusable control. The information control is made visible on request by calling {@link #showInformationControl(Rectangle)}. Clients usually instantiate and configure this class before using it. The configuration must be consistent: This means the used {@link org.eclipse.jface.text.IInformationControlCreator} must create an information control expecting information in the same format the configured {@link org.eclipse.jface.text.information.IInformationProvider}s use to encode the information they provide. @since 3.4
class,org/eclipse/jface/internal/text/InternalAccessor, An internal class that gives access to internal methods of {@link AbstractInformationControlManager} and subclasses. @since 3.4
method,org/eclipse/jface/internal/text/InternalAccessor/setInformationControlReplacer/InformationControlReplacer, Sets the information control replacer for this manager and disposes the old one if set. @param replacer the information control replacer for this manager, or null if no information control replacing should take place
method,org/eclipse/jface/internal/text/InternalAccessor/setHoverEnrichMode/EnrichMode, Sets the hover enrich mode. Only applicable when an information control replacer has been set with {@link #setInformationControlReplacer(InformationControlReplacer)} . @param mode the enrich mode @see ITextViewerExtension8#setHoverEnrichMode(org.eclipse.jface.text.ITextViewerExtension8.EnrichMode)
method,org/eclipse/jface/internal/text/InternalAccessor/replaceInformationControl/boolean, Replaces this manager's information control as defined by the information control replacer. Must only be called when the information control is instanceof {@link IInformationControlExtension3}! @param takeFocus true iff the replacing information control should take focus
class,org/eclipse/jface/internal/text/revisions/ChangeRegion, A change region describes a contiguous range of lines that was changed in the same revision of a document. Once it is adjusted to diff information, the originally contiguous range may be split into several ranges or even be empty. @since 3.2
method,org/eclipse/jface/internal/text/revisions/ChangeRegion/getOriginalRange/, Returns the original (before applying diff information) line range of this change region. @return the original (before applying diff information) line range of this change region
class,org/eclipse/jface/internal/text/revisions/RevisionSelectionProvider, A selection provider for annotate revisions. Selections of a revision can currently happen in following ways - note that this list may be changed in the future: when the user clicks the revision ruler with the mouse when the caret is moved to a revision's line (only on post-selection) Calling {@link #setSelection(ISelection)} will set the current sticky revision on the ruler. @since 3.2
method,org/eclipse/jface/internal/text/revisions/RevisionPainter/setParentRuler/CompositeRuler, Sets the parent ruler - the delegating column must call this method as soon as it creates its control. @param parentRuler the parent ruler
method,org/eclipse/jface/internal/text/revisions/RevisionPainter/paint/GC;ILineRange, Delegates the painting of the quick diff colors to this painter. The painter will draw the color boxes onto the passed {@link GC} for all model (document) lines in visibleModelLines. @param gc the {@link GC} to draw onto @param visibleLines the lines (in document offsets) that are currently (perhaps only partially) visible
method,org/eclipse/jface/internal/text/revisions/RevisionPainter/getRequiredWidth/, Returns the width in chars required to display information. @return the width in chars required to display information @since 3.3
method,org/eclipse/jface/internal/text/revisions/Range/createRelative/int;int, Creates a new range with the given start offset and length. @param start the first line of the new range, must be &gt;= 0 @param length the number of lines included in the new range, must be &gt; 0 @return a Range with the given start and length @throws LineIndexOutOfBoundsException if the parameters violate the invariant of {@link Range}
method,org/eclipse/jface/internal/text/revisions/Range/createAbsolute/int;int, Creates a new range with the given start and end offsets. @param start the first line of the new range, must be &gt;= 0 @param end the first line not in the range any more (exclusive), must be &gt; start @return a Range with the given start and end offsets @throws LineIndexOutOfBoundsException if the parameters violate the invariant of {@link Range}
method,org/eclipse/jface/internal/text/revisions/Range/end/, Returns the first line after this range. Equivalent to {@linkplain #start() start} + {@linkplain #length() length}. @return the first line after this range
method,org/eclipse/jface/internal/text/revisions/Range/moveTo/int, Moves the receiver to start, keeping {@link #length()} constant. @param start the new start, must be &gt;= 0 @throws LineIndexOutOfBoundsException if start &lt; 0
method,org/eclipse/jface/internal/text/revisions/Range/moveBy/int, Moves the range by delta lines, keeping {@link #length()} constant. The resulting start line must be &gt;= 0. @param delta the number of lines to shift the range @throws LineIndexOutOfBoundsException if -delta &gt; {@link #start()}
method,org/eclipse/jface/internal/text/revisions/Range/setStart/int, Moves the start offset to start, keeping {@link #end()} constant. @param start the new start, must be &gt;= 0 and &lt; {@link #end()} @throws LineIndexOutOfBoundsException if start &lt; 0 or &gt;= {@link #end()}
method,org/eclipse/jface/internal/text/revisions/Range/setEnd/int, Sets the end of this range, keeping {@link #start()} constant. @param end the new end, must be &gt; {@link #start()} @throws LineIndexOutOfBoundsException if end &lt;= {@link #start()}
method,org/eclipse/jface/internal/text/revisions/Range/setLength/int, Sets the length of this range, keeping {@link #start()} constant. @param length the new length, must be &gt; 0 @throws LineIndexOutOfBoundsException if length &lt;= 0
method,org/eclipse/jface/internal/text/revisions/Range/setLengthAndMove/int, Sets the length of this range, keeping {@link #end()} constant. @param length the new length, must be &gt; 0 and &lt;= {@link #end()} @throws LineIndexOutOfBoundsException if length &lt;= 0
method,org/eclipse/jface/internal/text/revisions/Range/split/int, Splits a range off the end of the receiver. The receiver is shortened to only include remaining lines after the split. @param remaining the number of lines to remain in the receiver, must be in [1, {@link #length() length}) @return the split off range @throws LineIndexOutOfBoundsException if remaining&gt;= {@link #length()} or remaining&ltt;= 0
method,org/eclipse/jface/internal/text/revisions/Colors/brightness/RGB, Returns the human-perceived brightness of a color as float in [0.0, 1.0]. The used RGB weights come from http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC9. @param rgb the color @return the gray-scale value
method,org/eclipse/jface/internal/text/revisions/Colors/adjustBrightness/RGB;float, Normalizes a color in its perceived brightness. Yellows are darkened, while blues and reds are lightened. Depending on the hue, the brightness range within the RGB gamut may be different, outside values are clipped. Note that this is an approximation; the returned RGB is not guaranteed to have the requested {@link #brightness(RGB) brightness}. @param color the color to normalize @param brightness the requested brightness, in [0,&nbsp;1] @return a normalized version of color @see #brightness(RGB)
method,org/eclipse/jface/internal/text/revisions/Colors/blend/RGB;RGB;float, Returns an RGB that lies between the given foreground and background colors using the given mixing factor. A factor of 1.0 will produce a color equal to fg, while a factor of 0.0 will produce one equal to bg. @param bg the background color @param fg the foreground color @param factor the mixing factor, must be in [0,&nbsp;1] @return the interpolated color
method,org/eclipse/jface/internal/text/revisions/Colors/palette/RGB;RGB;int, Returns an array of colors in a smooth palette from start to end. The returned array has size steps, and the color at index 0 is start, the color at index steps&nbsp;-&nbsp;1 is end. @param start the start color of the palette @param end the end color of the palette @param steps the requested size, must be &gt; 0 @return an array of steps colors in the palette from start to end
method,org/eclipse/jface/internal/text/revisions/Colors/rainbow/int, Returns an array of colors with hues evenly distributed on the hue wheel defined by the HSB color space. The returned array has size steps. The distance d between two successive colors is in [120&#176;,&nbsp;180&#176;]. The color at a given index has the hue returned by {@linkplain #computeHue(int) computeHue(index)}; i.e. the computed hues are not equidistant, but adaptively distributed on the color wheel. The first six colors returned correspond to the following {@link SWT} color constants: {@link SWT#COLOR_RED red}, {@link SWT#COLOR_GREEN green}, {@link SWT#COLOR_BLUE blue}, {@link SWT#COLOR_YELLOW yellow}, {@link SWT#COLOR_CYAN cyan}, {@link SWT#COLOR_MAGENTA magenta}. @param steps the requested size, must be &gt;= 2 @return an array of steps colors evenly distributed on the color wheel
method,org/eclipse/jface/internal/text/revisions/Colors/computeHue/int, Returns an indexed hue in [0&#176;,&nbsp;360&#176;), distributing the hues evenly on the hue wheel defined by the HSB (or HSV) color space. The distance d between two successive colors is in [120&#176;,&nbsp;180&#176;]. The first six colors returned correspond to the following {@link SWT} color constants: {@link SWT#COLOR_RED red}, {@link SWT#COLOR_GREEN green}, {@link SWT#COLOR_BLUE blue}, {@link SWT#COLOR_YELLOW yellow}, {@link SWT#COLOR_CYAN cyan}, {@link SWT#COLOR_MAGENTA magenta}. @param index the index of the color, must be &gt;= 0 @return a color hue in [0&#176;,&nbsp;360&#176;) @see RGB#RGB(float, float, float)
method,org/eclipse/jface/internal/text/revisions/Hunk/Hunk/int;int;int, Creates a new hunk. @param line the line at which the hunk starts, must be &gt;= 0 @param delta the difference in lines compared to the original @param changed the number of changed lines in this hunk, must be &gt;= 0
field,org/eclipse/jface/internal/text/revisions/Hunk/line, The line at which the hunk starts in the current document. Must be in [0, numberOfLines] &ndash; note the inclusive end; there may be a hunk with line == numberOfLines to describe deleted lines at then end of the document.
field,org/eclipse/jface/internal/text/revisions/Hunk/changed,The number of changed lines in this hunk, must be &gt;= 0. 
method,org/eclipse/jface/internal/text/link/contentassist/LineBreakingReader/readLine/, Reads the next line. The lengths of the line will not exceed the given maximum width. @return the next line @throws IOException if an I/O error occurs
method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/enableAutoInsert/boolean, Enables the content assistant's auto insertion mode. If enabled, the content assistant inserts a proposal automatically if it is the only proposal. In the case of ambiguities, the user must make the choice. @param enabled indicates whether auto insertion is enabled or not @since 2.0
method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/setAutoActivationDelay/int, Sets the delay after which the content assistant is automatically invoked if the cursor is behind an auto activation character. @param delay the auto activation delay
method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/setProposalPopupOrientation/int, Sets the proposal pop-ups' orientation. The following values may be used: PROPOSAL_OVERLAY proposal popup windows should overlay each other PROPOSAL_REMOVE any currently shown proposal popup should be closed PROPOSAL_STACKED proposal popup windows should be vertical stacked, with no overlap, beneath the line containing the current cursor location @param orientation the popup's orientation
method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/setContextInformationPopupOrientation/int, Sets the context information popup's orientation. The following values may be used: CONTEXT_ABOVE context information popup should always appear above the line containing the current cursor location CONTEXT_BELOW context information popup should always appear below the line containing the current cursor location @param orientation the popup's orientation
method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/setInformationControlCreator/IInformationControlCreator, Sets the information control creator for the additional information control. @param creator the information control creator for the additional information control @since 2.0
method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/possibleCompletionsClosed/, Callback to signal this content assistant that the presentation of the possible completions has been stopped. @since 2.1
method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/contextInformationClosed/, Callback to signal this content assistant that the presentation of the context information has been stopped. @since 2.1
method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/ContentAssistant2/, Creates a new content assistant. The content assistant is not automatically activated, overlays the completion proposals with context information list if necessary, and shows the context information above the location at which it was activated. If auto activation will be enabled, without further configuration steps, this content assistant is activated after a 500 ms delay. It uses the default partitioning.
method,org/eclipse/jface/internal/text/html/BrowserInformationControl/setInformation/String, {@inheritDoc} @deprecated use {@link #setInput(Object)}
method,org/eclipse/jface/internal/text/html/BrowserInformationControl/setInput/Object, {@inheritDoc} This control can handle {@link String} and {@link BrowserInformationControlInput}.
method,org/eclipse/jface/internal/text/html/BrowserInformationControl/BrowserInformationControl/Shell;String;boolean, Creates a browser information control with the given shell as parent. @param parent the parent shell @param symbolicFontName the symbolic name of the font used for size computations @param resizable true if the control should be resizable @since 3.4
method,org/eclipse/jface/internal/text/html/BrowserInformationControl/BrowserInformationControl/Shell;String;String, Creates a browser information control with the given shell as parent. @param parent the parent shell @param symbolicFontName the symbolic name of the font used for size computations @param statusFieldText the text to be used in the optional status field or null if the status field should be hidden @since 3.4
class,org/eclipse/jface/internal/text/html/SubstitutionTextReader, Reads the text contents from a reader and computes for each character a potential substitution. The substitution may eat more characters than only the one passed into the computation routine. Moved into this package from org.eclipse.jface.internal.text.revisions.
method,org/eclipse/jface/internal/text/html/SubstitutionTextReader/computeSubstitution/int, Computes the substitution for the given character and if necessary subsequent characters. Implementation should use nextChar to read subsequent characters. @param c the character to be substituted @return the substitution for c @throws IOException in case computing the substitution fails
method,org/eclipse/jface/internal/text/html/HTMLTextPresenter/updatePresentation/Display;String;TextPresentation;int;int, {@inheritDoc} @see org.eclipse.jface.text.DefaultInformationControl.IInformationPresenter#updatePresentation(org.eclipse.swt.widgets.Display, java.lang.String, org.eclipse.jface.text.TextPresentation, int, int) @deprecated Use {@link #updatePresentation(Drawable, String, TextPresentation, int, int)} instead
class,org/eclipse/jface/internal/text/source/DiffPainter, A strategy for painting the quick diff colors onto the vertical ruler column. It also manages the quick diff hover. @since 3.2
method,org/eclipse/jface/internal/text/source/DiffPainter/setParentRuler/CompositeRuler, Sets the parent ruler - the delegating column must call this method as soon as it creates its control. @param parentRuler the parent ruler
method,org/eclipse/jface/internal/text/source/DiffPainter/setHover/IAnnotationHover, Sets the quick diff hover later returned by {@link #getHover()}. @param hover the hover
method,org/eclipse/jface/internal/text/source/DiffPainter/getHover/, Returns the quick diff hover set by {@link #setHover(IAnnotationHover)}. @return the quick diff hover set by {@link #setHover(IAnnotationHover)}
method,org/eclipse/jface/internal/text/source/DiffPainter/paint/GC;ILineRange, Delegates the painting of the quick diff colors to this painter. The painter will draw the color boxes onto the passed {@link GC} for all model (document) lines in visibleModelLines. @param gc the {@link GC} to draw onto @param visibleModelLines the lines (in document offsets) that are currently (perhaps only partially) visible
method,org/eclipse/jface/internal/text/source/DiffPainter/DiffPainter/IVerticalRulerColumn;ISharedTextColors, Creates a new diff painter for a vertical ruler column. @param column the column that will delegate{@link #paint(GC, ILineRange) painting} to the newly created painter. @param sharedColors a shared colors object to store shaded colors in, may be null
method,org/eclipse/jface/bindings/BindingManagerEvent/isActiveBindingsChangedFor/ParameterizedCommand, Computes whether the active bindings have changed for a given command identifier. @param parameterizedCommand The fully-parameterized command whose bindings might have changed; must not be null. @return true if the active bindings have changed for the given command identifier; false otherwise.
method,org/eclipse/jface/bindings/BindingManagerEvent/BindingManagerEvent/BindingManager;boolean;Map;boolean;Scheme;boolean;boolean;boolean, Creates a new instance of this class. @param manager the instance of the binding manager that changed; must not be null. @param activeBindingsChanged Whether the active bindings have changed. @param previousTriggersByParameterizedCommand The map of triggers (TriggerSequence) by fully-parameterized command (ParameterizedCommand) before the change occured. This map may be null or empty. @param activeSchemeChanged true, iff the active scheme changed. @param scheme The scheme that became defined or undefined; null if no scheme changed state. @param schemeDefined true if the given scheme became defined; false otherwise. @param localeChanged true iff the active locale changed @param platformChanged true iff the active platform changed
class,org/eclipse/jface/bindings/TriggerSequence, A sequence of one or more triggers. None of these triggers may be null. @since 3.1
method,org/eclipse/jface/bindings/TriggerSequence/format/, Formats this trigger sequence into the current default look. @return A string representation for this trigger sequence using the default look; never null.
method,org/eclipse/jface/bindings/TriggerSequence/getPrefixes/, Returns a list of prefixes for the current sequence. A prefix is any leading subsequence in a TriggerSequence. A prefix is also an instance of TriggerSequence. For example, consider a trigger sequence that consists of four triggers: A, B, C and D. The prefixes would be , A, A B, and A B C. The list of prefixes must always be the same as the size of the trigger list. @return The array of possible prefixes for this sequence. This array must not be null, but may be empty. It must only contains instances of TriggerSequence.
method,org/eclipse/jface/bindings/TriggerSequence/getTriggers/, Returns the list of triggers. @return The triggers; never null and guaranteed to only contain instances of Trigger.
method,org/eclipse/jface/bindings/TriggerSequence/TriggerSequence/Trigger[], Constructs a new instance of TriggerSequence. @param triggers The triggers contained within this sequence; must not be null or contain null elements. May be empty.
field,org/eclipse/jface/bindings/TriggerSequence/triggers, The list of trigger in this sequence. This value is never null, and never contains null elements.
method,org/eclipse/jface/bindings/SchemeEvent/SchemeEvent/Scheme;boolean;boolean;boolean;boolean, Creates a new instance of this class. @param scheme the instance of the interface that changed; must not be null. @param definedChanged true, iff the defined property changed. @param nameChanged true, iff the name property changed. @param descriptionChanged true if the description property changed; false otherwise. @param parentIdChanged true, iff the parentId property changed.
method,org/eclipse/jface/bindings/Scheme/define/String;String;String, Defines this scheme by giving it a name, and possibly a description and a parent identifier as well. The defined property for the scheme automatically becomes true. Notification is sent to all listeners that something has changed. @param name The name of this scheme; must not be null. @param description The description for this scheme; may be null. @param parentId The parent identifier for this scheme; may be null.
method,org/eclipse/jface/bindings/Scheme/getParentId/, Returns the identifier of the parent of the scheme represented by this handle. Notification is sent to all registered listeners if this attribute changes. @return the identifier of the parent of the scheme represented by this handle. May be null. @throws NotDefinedException if the scheme represented by this handle is not defined.
class,org/eclipse/jface/bindings/Trigger, The abstract class for any object that can be used as a trigger for a binding. This ensures that trigger conform to certain minimum requirements. Namely, triggers need to be hashable. @since 3.1
method,org/eclipse/jface/bindings/Trigger/equals/Object, Tests whether this object is equal to another object. A handle object is only equal to another trigger with the same properties. @param object The object with which to compare; may be null. @return true if the objects are equal; false otherwise.
class,org/eclipse/jface/bindings/BindingManager, A central repository for bindings -- both in the defined and undefined states. Schemes and bindings can be created and retrieved using this manager. It is possible to listen to changes in the collection of schemes and bindings by adding a listener to the manager. The binding manager is very sensitive to performance. Misusing the manager can render an application unenjoyable to use. As such, each of the public methods states the current run-time performance. In future releases, it is guaranteed that the method will run in at least the stated time constraint -- though it might get faster. Where possible, we have also tried to be memory efficient. @since 3.1
method,org/eclipse/jface/bindings/BindingManager/addBinding/Binding, Adds a single new binding to the existing array of bindings. If the array is currently null, then a new array is created and this binding is added to it. This method does not detect duplicates. This method completes in amortized O(1). @param binding The binding to be added; must not be null.
method,org/eclipse/jface/bindings/BindingManager/addBindingManagerListener/IBindingManagerListener, Adds a listener to this binding manager. The listener will be notified when the set of defined schemes or bindings changes. This can be used to track the global appearance and disappearance of bindings. This method completes in amortized constant time (O(1)). @param listener The listener to attach; must not be null.
method,org/eclipse/jface/bindings/BindingManager/contextManagerChanged/ContextManagerEvent, Notifies this manager that the context manager has changed. This method is intended for internal use only. This method completes in O(1). 
method,org/eclipse/jface/bindings/BindingManager/getActiveBindingsDisregardingContext/, Computes the bindings for the current state of the application, but disregarding the current contexts. This can be useful when trying to display all the possible bindings. This method completes in O(n), where n is the number of bindings. @return A map of trigger (TriggerSequence) to bindings ( Collection containing Binding). This map may be empty, but it is never null.
method,org/eclipse/jface/bindings/BindingManager/getActiveBindingsDisregardingContextFlat/, Computes the bindings for the current state of the application, but disregarding the current contexts. This can be useful when trying to display all the possible bindings. This method completes in O(n), where n is the number of bindings. @return All of the active bindings (Binding), not sorted in any fashion. This collection may be empty, but it is never null.
method,org/eclipse/jface/bindings/BindingManager/getActiveBindingsFor/ParameterizedCommand, Returns the active bindings for a particular command identifier. This method operates in O(n) time over the number of bindings. This method completes in O(1). If the active bindings are not yet computed, then this completes in O(nn), where n is the number of bindings. @param parameterizedCommand The fully-parameterized command whose bindings are requested. This argument may be null. @return The array of active triggers (TriggerSequence) for a particular command identifier. This value is guaranteed to never be null, but it may be empty.
method,org/eclipse/jface/bindings/BindingManager/getActiveScheme/, Gets the currently active scheme. This method completes in O(1). @return The active scheme; may be null if there is no active scheme. If a scheme is returned, it is guaranteed to be defined.
method,org/eclipse/jface/bindings/BindingManager/getBestActiveBindingFor/String, Gets the best active binding for a command. The best binding is the one that would be most appropriate to show in a menu. Bindings which belong to a child scheme are given preference over those in a parent scheme. Bindings which belong to a particular locale or platform are given preference over those that do not. The rest of the calculaton is based most on various concepts of length, as well as giving some modifier keys preference (e.g., Alt is less likely to appear than Ctrl). @param commandId The identifier of the command for which the best active binding should be retrieved; must not be null. @return The trigger sequence for the best binding; may be null if no bindings are active for the given command. @since 3.2
method,org/eclipse/jface/bindings/BindingManager/getBestActiveBindingFormattedFor/String, Gets the formatted string representing the best active binding for a command. The best binding is the one that would be most appropriate to show in a menu. Bindings which belong to a child scheme are given preference over those in a parent scheme. The rest of the calculaton is based most on various concepts of length, as well as giving some modifier keys preference (e.g., Alt is less likely to appear than Ctrl). @param commandId The identifier of the command for which the best active binding should be retrieved; must not be null. @return The formatted string for the best binding; may be null if no bindings are active for the given command. @since 3.2
method,org/eclipse/jface/bindings/BindingManager/getBindings/, Returns the set of all bindings managed by this class. This method completes in O(1). @return The array of all bindings. This value may be null and it may be empty.
method,org/eclipse/jface/bindings/BindingManager/getDefinedSchemes/, Returns the array of schemes that are defined. This method completes in O(1). @return The array of defined schemes; this value may be empty or null.
method,org/eclipse/jface/bindings/BindingManager/getPerfectMatch/TriggerSequence, Returns the command identifier for the active binding matching this trigger, if any. This method completes in O(1). If the bindings aren't currently computed, then this completes in O(n), where n is the number of bindings. @param trigger The trigger to match; may be null. @return The binding that matches, if any; null otherwise.
method,org/eclipse/jface/bindings/BindingManager/getPlatform/, Returns the active platform for this binding manager. The platform is in the same format as SWT.getPlatform(). This method completes in O(1). @return The active platform; never null.
method,org/eclipse/jface/bindings/BindingManager/getScheme/String, Gets the scheme with the given identifier. If the scheme does not already exist, then a new (undefined) scheme is created with that identifier. This guarantees that schemes will remain unique. This method completes in amortized O(1). @param schemeId The identifier for the scheme to retrieve; must not be null. @return A scheme with the given identifier.
method,org/eclipse/jface/bindings/BindingManager/isPartialMatch/TriggerSequence, Returns whether the given trigger sequence is a partial match for the given sequence. This method completes in O(1). If the bindings aren't currently computed, then this completes in O(n), where n is the number of bindings. @param trigger The sequence which should be the prefix for some binding; should not be null. @return true if the trigger can be found in the active bindings; false otherwise.
method,org/eclipse/jface/bindings/BindingManager/isPerfectMatch/TriggerSequence, Returns whether the given trigger sequence is a perfect match for the given sequence. This method completes in O(1). If the bindings aren't currently computed, then this completes in O(n), where n is the number of bindings. @param trigger The sequence which should match exactly; should not be null. @return true if the trigger can be found in the active bindings; false otherwise.
method,org/eclipse/jface/bindings/BindingManager/removeBinding/Binding, Remove the specific binding by identity. Does nothing if the binding is not in the manager. This method completes in O(n), where n is the number of bindings. @param binding The binding to be removed; must not be null. @since 3.2
method,org/eclipse/jface/bindings/BindingManager/removeBindingManagerListener/IBindingManagerListener, Removes a listener from this binding manager. This method completes in amortized O(1). @param listener The listener to be removed; must not be null.
method,org/eclipse/jface/bindings/BindingManager/removeBindings/TriggerSequence;String;String;String;String;String;int, Removes any binding that matches the given values -- regardless of command identifier. This method completes in O(n), where n is the number of bindings. @param sequence The sequence to match; may be null. @param schemeId The scheme id to match; may be null. @param contextId The context id to match; may be null. @param locale The locale to match; may be null. @param platform The platform to match; may be null. @param windowManager The window manager to match; may be null. TODO Currently ignored. @param type The type to look for. 
method,org/eclipse/jface/bindings/BindingManager/schemeChanged/SchemeEvent, Notifies this manager that a scheme has changed. This method is intended for internal use only. This method calls out to listeners, and so the time it takes to complete is dependent on third-party code. @param schemeEvent An event describing the change in the scheme.
method,org/eclipse/jface/bindings/BindingManager/getConflictsFor/TriggerSequence, Provides the current conflicts in the keybindings for the given TriggerSequence as a {@link Collection} of {@link Binding} @param sequence The sequence for which conflict info is required @return Collection of KeyBinding. If no conflicts, then returns a null @since 3.5
method,org/eclipse/jface/bindings/BindingManager/setActiveScheme/Scheme, Selects one of the schemes as the active scheme. This scheme must be defined. This method completes in O(n), where n is the height of the context tree. @param scheme The scheme to become active; must not be null. @throws NotDefinedException If the given scheme is currently undefined.
method,org/eclipse/jface/bindings/BindingManager/setLocale/String, Changes the locale for this binding manager. The locale can be used to provide locale-specific bindings. If the locale is different than the current locale, this will force a recomputation of the bindings. The locale is in the same format as Locale.getDefault().toString(). This method completes in O(1). @param locale The new locale; must not be null. @see Locale#getDefault()
method,org/eclipse/jface/bindings/BindingManager/BindingManager/ContextManager;CommandManager, Constructs a new instance of BindingManager. This method completes in amortized constant time (O(1)). @param contextManager The context manager that will support this binding manager. This value must not be null. @param commandManager The command manager that will support this binding manager. This value must not be null.
field,org/eclipse/jface/bindings/BindingManager/DEBUG, This flag can be set to true if the binding manager should print information to System.out when certain boundary conditions occur.
class,org/eclipse/jface/bindings/Binding, A binding is a link between user input and the triggering of a particular command. The most common example of a binding is a keyboard shortcut, but there are also mouse and gesture bindings. Bindings are linked to particular conditions within the application. Some of these conditions change infrequently (e.g., locale, scheme), while some will tend to change quite frequently (e.g., context). This allows the bindings to be tailored to particular situations. For example, a set of bindings may be appropriate only inside a text editor. Or, perhaps, a set of bindings might be appropriate only for a given locale, such as bindings that coexist with the Input Method Editor (IME) on Chinese locales. It is also possible to remove a particular binding. This is typically done as part of user configuration (e.g., user changing keyboard shortcuts). However, it can also be helpful when trying to change a binding on a particular locale or platform. An unbinding is really just a binding with no command identifier. For it to unbind a particular binding, it must match that binding in its context identifier and scheme identifier. Subclasses (e.g., KeyBinding) may require other properties to match (e.g., keySequence). If these properties match, then this is an unbinding. Note: the locale and platform can be different. For example, imagine you have a key binding that looks like this: KeyBinding(command, scheme, context, &quot;Ctrl+Shift+F&quot;) On GTK+, the Ctrl+Shift+F interferes with some native behaviour. To change the binding, we first unbind the Ctrl+Shift+F key sequence by assigning it a null command on the gtk platform. We then create a new binding that maps the command to the Esc Ctrl+F key sequence. KeyBinding(Ctrl+Shift+F,null,scheme,context,null,gtk,null,SYSTEM) KeyBinding(Esc Ctrl+F,parameterizedCommand,scheme,context,null,gtk,SYSTEM) Bindings are intended to be immutable objects. @since 3.1
method,org/eclipse/jface/bindings/Binding/equals/Object, Tests whether this binding is equal to another object. Bindings are only equal to other bindings with equivalent values. @param object The object with which to compare; may be null. @return true if the object is a binding with equivalent values for all of its properties; false otherwise.
method,org/eclipse/jface/bindings/Binding/getParameterizedCommand/, Returns the parameterized command to which this binding applies. If the identifier is null, then this binding is unbinding an existing binding. @return The fully-parameterized command; may be null.
method,org/eclipse/jface/bindings/Binding/getLocale/, Returns the locale in which this binding applies. If the locale is null, then this binding applies to all locales. This string is the same format as returned by Locale.getDefault().toString(). @return The locale; may be null.
method,org/eclipse/jface/bindings/Binding/getPlatform/, Returns the platform on which this binding applies. If the platform is null, then this binding applies to all platforms. This string is the same format as returned by SWT.getPlatform(). @return The platform; may be null.
method,org/eclipse/jface/bindings/Binding/Binding/ParameterizedCommand;String;String;String;String;String;int, Constructs a new instance of Binding. @param command The parameterized command to which this binding applies; this value may be null if the binding is meant to unbind a previously defined binding. @param schemeId The scheme to which this binding belongs; this value must not be null. @param contextId The context to which this binding applies; this value must not be null. @param locale The locale to which this binding applies; this value may be null if it applies to all locales. @param platform The platform to which this binding applies; this value may be null if it applies to all platforms. @param windowManager The window manager to which this binding applies; this value may be null if it applies to all window managers. This value is currently ignored. @param type The type of binding. This should be either SYSTEM or USER.
class,org/eclipse/jface/bindings/keys/KeySequenceText, A wrapper around the SWT text widget that traps literal key presses and converts them into key sequences for display. There are two types of key strokes that are displayed: complete and incomplete. A complete key stroke is one with a natural key, while an incomplete one has no natural key. Incomplete key strokes are only displayed until they are made complete or their component key presses are released. @since 3.1
method,org/eclipse/jface/bindings/keys/KeySequenceText/addPropertyChangeListener/IPropertyChangeListener, Adds a property change listener to this key sequence widget. It will be notified when the key sequence changes. @param listener The listener to be notified when changes occur; must not be null. @since 3.2
method,org/eclipse/jface/bindings/keys/KeySequenceText/firePropertyChangeEvent/KeySequence, Fires a property change event to all of the listeners. @param oldKeySequence The old key sequence; must not be null. @since 3.2
method,org/eclipse/jface/bindings/keys/KeySequenceText/getKeySequence/, An accessor for the KeySequence that corresponds to the current state of the text field. This includes incomplete strokes. @return The key sequence representation; never null.
method,org/eclipse/jface/bindings/keys/KeySequenceText/insert/KeyStroke, Inserts the key stroke at the current insertion point. This does a regular delete and insert, as if the key had been pressed. @param stroke The key stroke to insert; must not be null.
method,org/eclipse/jface/bindings/keys/KeySequenceText/setKeySequence/KeySequence, A mutator for the key sequence stored within this widget. The text and caret position are updated. All sequences are limited to maxStrokes number of strokes in length. If there are already that number of strokes, then it does not show incomplete strokes, and does not keep track of them. @param newKeySequence The new key sequence for this widget; may be null if none.
method,org/eclipse/jface/bindings/keys/KeySequenceText/setKeyStrokeLimit/int, A mutator for the maximum number of strokes that are permitted in this widget at one time. @param keyStrokeLimit The maximum number of strokes; must be a positive integer or INFINITE.
method,org/eclipse/jface/bindings/keys/KeySequenceText/KeySequenceText/Text, Constructs an instance of KeySequenceTextField with the text field to use. If the platform is carbon (MacOS X), then the font is set to be the same font used to display accelerators in the menus. @param wrappedText The text widget to wrap; must not be null.
field,org/eclipse/jface/bindings/keys/KeySequenceText/INFINITE, The special integer value for the maximum number of strokes indicating that an infinite number should be allowed.
method,org/eclipse/jface/bindings/keys/KeyLookupFactory/getSWTKeyLookup/, Provides an instance of SWTKeyLookup. @return The SWT look-up table for key stroke format information; never null.
method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertAcceleratorToKeyStroke/int, Given an SWT accelerator value, provide the corresponding key stroke. @param accelerator The accelerator to convert; should be a valid SWT accelerator value. @return The equivalent key stroke; never null.
method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertEventToModifiedAccelerator/Event, Converts the given event into an SWT accelerator value -- considering the modified character with the shift modifier. This is the third accelerator value that should be checked when processing incoming key events. For example, on a standard US keyboard, Ctrl+Shift+5 would be viewed as Ctrl+Shift+%. @param event The event to be converted; must not be null. @return The combination of the state mask and the unmodified character.
method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertEventToUnmodifiedAccelerator/Event, Converts the given event into an SWT accelerator value -- considering the unmodified character with all modifier keys. This is the first accelerator value that should be checked when processing incoming key events. However, all alphabetic characters are considered as their uppercase equivalents. For example, on a standard US keyboard, Ctrl+Shift+5 would be viewed as Ctrl+Shift+5. @param event The event to be converted; must not be null. @return The combination of the state mask and the unmodified character.
method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertEventToUnmodifiedAccelerator/KeyEvent, Converts the given event into an SWT accelerator value -- considering the unmodified character with all modifier keys. This is the first accelerator value that should be checked. However, all alphabetic characters are considered as their uppercase equivalents. For example, on a standard US keyboard, Ctrl+Shift+5 would be viewed as Ctrl+%. @param event The event to be converted; must not be null. @return The combination of the state mask and the unmodified character.
method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertEventToUnshiftedModifiedAccelerator/Event, Converts the given event into an SWT accelerator value -- considering the modified character without the shift modifier. This is the second accelerator value that should be checked when processing incoming key events. Key strokes with alphabetic natural keys are run through convertEventToUnmodifiedAccelerator. @param event The event to be converted; must not be null. @return The combination of the state mask without shift, and the modified character.
method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertKeyStrokeToAccelerator/KeyStroke, Given a key stroke, this method provides the equivalent SWT accelerator value. The functional inverse of convertAcceleratorToKeyStroke. @param keyStroke The key stroke to convert; must not be null. @return The SWT accelerator value
method,org/eclipse/jface/bindings/keys/SWTKeySupport/SWTKeySupport/, This class should never be instantiated.
method,org/eclipse/jface/bindings/keys/IKeyLookup/formalKeyLookup/String, Looks up a single natural key by its formal name, and returns the integer representation for this natural key @param name The formal name of the natural key to look-up; must not be null. @return The integer representation of this key. If the natural key cannot be found, then this method returns 0.
method,org/eclipse/jface/bindings/keys/IKeyLookup/formalKeyLookupInteger/String, Looks up a single natural key by its formal name, and returns the integer representation for this natural key @param name The formal name of the natural key to look-up; must not be null. @return The integer representation of this key. If the natural key cannot be found, then this method returns 0.
method,org/eclipse/jface/bindings/keys/IKeyLookup/formalModifierLookup/String, Looks up a single modifier key by its formal name, and returns the integer representation for this modifier key @param name The formal name of the modifier key to look-up; must not be null. @return The integer representation of this key. If the modifier key cannot be found, then this method returns 0.
field,org/eclipse/jface/bindings/keys/IKeyLookup/CAPS_LOCK_NAME, The formal name for the 'Caps Lock' key.
field,org/eclipse/jface/bindings/keys/IKeyLookup/DELETE_NAME, An alternative name for the delete key.
field,org/eclipse/jface/bindings/keys/IKeyLookup/ENTER_NAME, An alternative name for the enter key.
field,org/eclipse/jface/bindings/keys/IKeyLookup/ESCAPE_NAME, An alternative name for the escape key.
field,org/eclipse/jface/bindings/keys/IKeyLookup/RETURN_NAME, An alternative name for the enter key.
field,org/eclipse/jface/bindings/keys/IKeyLookup/SCROLL_LOCK_NAME, The formal name for the 'Scroll Lock' key.
method,org/eclipse/jface/bindings/keys/KeySequence/getInstance/KeyStroke[], Creates an instance of KeySequence given an array of key strokes. @param keyStrokes the array of key strokes. This array may be empty, but it must not be null. This array must not contain null elements. @return a key sequence. Guaranteed not to be null.
method,org/eclipse/jface/bindings/keys/KeySequence/getInstance/List, Creates an instance of KeySequence given a list of key strokes. @param keyStrokes the list of key strokes. This list may be empty, but it must not be null. If this list is not empty, it must only contain instances of KeyStroke. @return a key sequence. Guaranteed not to be null.
method,org/eclipse/jface/bindings/keys/KeySequence/format/, Formats this key sequence into the current default look. @return A string representation for this key sequence using the default look; never null.
method,org/eclipse/jface/bindings/keys/KeySequence/getKeyStrokes/, Returns the list of key strokes for this key sequence. @return the list of key strokes keys. This list may be empty, but is guaranteed not to be null. If this list is not empty, it is guaranteed to only contain instances of KeyStroke.
method,org/eclipse/jface/bindings/keys/KeySequence/KeySequence/KeyStroke[], Constructs an instance of KeySequence given a list of key strokes. @param keyStrokes the list of key strokes. This list may be empty, but it must not be null. If this list is not empty, it must only contain instances of KeyStroke.
field,org/eclipse/jface/bindings/keys/KeySequence/KEY_STROKE_DELIMITER, The delimiter between multiple key strokes in a single key sequence -- expressed in the formal key stroke grammar. This is not to be displayed to the user. It is only intended as an internal representation.
class,org/eclipse/jface/bindings/keys/KeyBinding, A keyboard shortcut. This is a binding between some keyboard input and the triggering of a command. This object is immutable. @since 3.1
method,org/eclipse/jface/bindings/keys/KeyBinding/getKeySequence/, Returns the key sequence which triggers this binding. The key sequence will not be null, empty or incomplete. @return The key sequence; never null.
method,org/eclipse/jface/bindings/keys/KeyBinding/KeyBinding/KeySequence;ParameterizedCommand;String;String;String;String;String;int, Constructs a new instance of KeyBinding. @param keySequence The key sequence which should trigger this binding. This value must not be null. It also must be a complete, non-empty key sequence. @param command The parameterized command to which this binding applies; this value may be null if the binding is meant to unbind a previously defined binding. @param schemeId The scheme to which this binding belongs; this value must not be null. @param contextId The context to which this binding applies; this value must not be null. @param locale The locale to which this binding applies; this value may be null if it applies to all locales. @param platform The platform to which this binding applies; this value may be null if it applies to all platforms. @param windowManager The window manager to which this binding applies; this value may be null if it applies to all window managers. This value is currently ignored. @param type The type of binding. This should be either SYSTEM or USER.
method,org/eclipse/jface/bindings/keys/KeyStroke/format/, Formats this key stroke into the current default look. @return A string representation for this key stroke using the default look; never null.
field,org/eclipse/jface/bindings/keys/KeyStroke/KEY_DELIMITER, The delimiter between multiple keys in a single key strokes -- expressed in the formal key stroke grammar. This is not to be displayed to the user. It is only intended as an internal representation.
method,org/eclipse/jface/bindings/keys/formatting/IKeyFormatter/format/int, Formats an individual key into a human readable format. This uses an internationalization resource bundle to look up the key. This does not do any platform-specific formatting (e.g., Carbon's command character). @param key The key to format. @return The key formatted as a string; should not be null.
method,org/eclipse/jface/bindings/keys/formatting/IKeyFormatter/format/KeyStroke, Format the given key strokes into a string. The manner of the conversion is dependent on the formatter. It is required that unequal key strokes return unequal strings. @param keyStroke The key stroke to convert; must not be null. @return A string representation of the key stroke; must not be null
method,org/eclipse/jface/bindings/keys/formatting/KeyFormatterFactory/getEmacsKeyFormatter/, Provides an instance of EmacsKeyFormatter. @return The Xemacs formatter; never null.
method,org/eclipse/jface/bindings/keys/formatting/KeyFormatterFactory/getFormalKeyFormatter/, Provides an instance of FormalKeyFormatter. @return The formal formatter; never null.
method,org/eclipse/jface/bindings/keys/formatting/EmacsKeyFormatter/format/int, Formats an individual key into a human readable format. This converts the key into a format similar to Xemacs. @param key The key to format; must not be null. @return The key formatted as a string; should not be null.
method,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/getKeyDelimiter/, An accessor for the delimiter you wish to use between keys. This is used by the default format implementations to determine the key delimiter. @return The delimiter to use between keys; should not be null.
method,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/getKeyStrokeDelimiter/, An accessor for the delimiter you wish to use between key strokes. This used by the default format implementations to determine the key stroke delimiter. @return The delimiter to use between key strokes; should not be null.
method,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/sortModifierKeys/int, Separates the modifier keys from each other, and then places them in an array in some sorted order. The sort order is dependent on the type of formatter. @param modifierKeys The modifier keys from the key stroke. @return An array of modifier key values -- separated and sorted in some order. Any values in this array that are KeyStroke.NO_KEY should be ignored.
field,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/KEY_DELIMITER_KEY, The key for the delimiter between keys. This is used in the internationalization bundles.
field,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/KEY_STROKE_DELIMITER_KEY, The key for the delimiter between key strokes. This is used in the internationalization bundles.
method,org/eclipse/jface/bindings/keys/formatting/NativeKeyFormatter/format/int, Formats an individual key into a human readable format. This uses an internationalization resource bundle to look up the key. This does the platform-specific formatting for Carbon. @param key The key to format. @return The key formatted as a string; should not be null.
interface,org/eclipse/jface/viewers/ILazyTreePathContentProvider, The ILazyTreePathContentProvider is a tree path-based content provider for tree viewers created using the SWT.VIRTUAL flag that only wish to return their contents as they are queried. @since 3.3
method,org/eclipse/jface/viewers/ILazyTreePathContentProvider/updateChildCount/TreePath;int, Called when the TreeViewer needs an up-to-date child count for the given tree path, for example from {@link TreeViewer#refresh()} and {@link TreeViewer#setInput(Object)}. If the content provider knows the element at the given tree path, it should respond by calling {@link TreeViewer#setChildCount(Object, int)}. If the given current child count is already correct, no action has to be taken by this content provider. @param treePath The tree path for which an up-to-date child count is needed, or if the number of root elements is requested, the empty tree path @param currentChildCount 			 The current child count for the element that needs updating
method,org/eclipse/jface/viewers/ILazyTreePathContentProvider/updateHasChildren/TreePath, Called when the TreeViewer needs up-to-date information whether the node at the given tree path can be expanded. If the content provider knows the element at the given tree path, it should respond by calling {@link TreeViewer#setHasChildren(Object, boolean)}. The content provider may also choose to call {@link TreeViewer#setChildCount(Object, int)} instead if it knows the number of children. Intended as an optimization for when the viewer does not need the actual children. Clients may be able to implement this more efficiently than updateChildCount. @param path The tree path for which up-to-date information about children is needed
method,org/eclipse/jface/viewers/ILazyTreePathContentProvider/getParents/Object, Return the possible parent paths for the given element. An empty array can be returned if the paths cannot be computed. In this case the tree-structured viewer can't expand a given node correctly if requested. If the element is a potential child of the input of the viewer, an empty tree path should be an entry in the returned array. @param element the element @return the possible parent paths for the given element
method,org/eclipse/jface/viewers/ColumnViewer/setLabelProvider/IBaseLabelProvider, The column viewer implementation of this Viewer framework method ensures that the given label provider is an instance of ITableLabelProvider, ILabelProvider, or CellLabelProvider. If the label provider is an {@link ITableLabelProvider} , then it provides a separate label text and image for each column. Implementers of ITableLabelProvider may also implement {@link ITableColorProvider} and/or {@link ITableFontProvider} to provide colors and/or fonts. If the label provider is an ILabelProvider , then it provides only the label text and image for the first column, and any remaining columns are blank. Implementers of ILabelProvider may also implement {@link IColorProvider} and/or {@link IFontProvider} to provide colors and/or fonts. 
method,org/eclipse/jface/viewers/ColumnViewer/cancelEditing/, Cancels a currently active cell editor if one is active. All changes already done in the cell editor are lost. @since 3.1 (in subclasses, added in 3.3 to abstract class)
method,org/eclipse/jface/viewers/ColumnViewer/editElement/Object;int, Starts editing the given element at the given column index. @param element 		the model element @param column 		the column index @since 3.1 (in subclasses, added in 3.3 to abstract class)
method,org/eclipse/jface/viewers/ColumnViewer/doGetColumnCount/, Returns the number of columns contained in the receiver. If no columns were created by the programmer, this value is zero, despite the fact that visually, one column of items may be visible. This occurs when the programmer uses the column viewer like a list, adding elements but never creating a column. @return the number of columns @since 3.3
method,org/eclipse/jface/viewers/ColumnViewer/triggerEditorActivationEvent/ColumnViewerEditorActivationEvent, Invoking this method fires an editor activation event which tries to enable the editor but before this event is passed to {@link ColumnViewerEditorActivationStrategy} to see if this event should really trigger editor activation @param event 		the activation event
method,org/eclipse/jface/viewers/ViewerCell/getNeighbor/int;boolean, Returns the specified neighbor of this cell, or null if no neighbor exists in the given direction. Direction constants can be combined by bitwise OR; for example, this method will return the cell to the upper-left of the current cell by passing {@link #ABOVE} | {@link #LEFT}. If sameLevel is true, only cells in sibling rows (under the same parent) will be considered. @param directionMask the direction mask used to identify the requested neighbor cell @param sameLevel if true, only consider cells from sibling rows @return the requested neighbor cell, or null if not found
method,org/eclipse/jface/viewers/ViewerCell/getTextBounds/, The location and bounds of the area where the text is drawn depends on various things (image displayed, control with SWT.CHECK) @return The bounds of the of the text area. May return null if the underlying widget implementation doesn't provide this information @since 3.4
method,org/eclipse/jface/viewers/ViewerCell/getImageBounds/, Returns the location and bounds of the area where the image is drawn @return The bounds of the of the image area. May return null if the underlying widget implementation doesn't provide this information @since 3.4
method,org/eclipse/jface/viewers/AbstractListViewer/listGetSelectionIndices/, Returns the zero-relative indices of the items which are currently selected in the underlying widget. The array is empty if no items are selected. Note: This is not the actual structure used by the receiver to maintain its selection, so modifying the array will not affect the receiver. @return the array of indices of the selected items
method,org/eclipse/jface/viewers/AbstractListViewer/listSetSelection/int[], Selects the items at the given zero-relative indices in the underlying widget. The current selection is cleared before the new items are selected. Indices that are out of range and duplicate indices are ignored. If the receiver is single-select and multiple indices are specified, then all indices are ignored. @param ixs the indices of the items to select
method,org/eclipse/jface/viewers/AbstractListViewer/add/Object[], Adds the given elements to this list viewer. If this viewer does not have a sorter, the elements are added at the end in the order given; otherwise the elements are inserted at appropriate positions. This method should be called (by the content provider) when elements have been added to the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param elements the elements to add
method,org/eclipse/jface/viewers/AbstractListViewer/insert/Object;int, Inserts the given element into this list viewer at the given position. If this viewer has a sorter, the position is ignored and the element is inserted at the correct position in the sort order. This method should be called (by the content provider) when elements have been added to the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param element the element @param position a 0-based position relative to the model, or -1 to indicate the last position @since 3.3
method,org/eclipse/jface/viewers/AbstractListViewer/indexForElement/Object, @param element the element to insert @return the index where the item should be inserted.
method,org/eclipse/jface/viewers/AbstractListViewer/remove/Object[], Removes the given elements from this list viewer. The selection is updated if required. This method should be called (by the content provider) when elements have been removed from the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param elements the elements to remove
interface,org/eclipse/jface/viewers/ILabelProvider, Extends IBaseLabelProvider with the methods to provide the text and/or image for the label of a given element. Used by most structured viewers, except table viewers.
method,org/eclipse/jface/viewers/CheckboxTableViewer/newCheckList/Composite;int, Creates a table viewer on a newly-created table control under the given parent. The table control is created using the given SWT style bits, plus the SWT.CHECK style bit. The table shows its contents in a single column, with no header. The viewer has no input, no content provider, a default label provider, no sorter, and no filters. No TableColumn is added. SWT does not require a TableColumn if showing only a single column with no header. SWT correctly handles the initial sizing and subsequent resizes in this case. @param parent the parent control @param style SWT style bits @since 2.0 @return CheckboxTableViewer
method,org/eclipse/jface/viewers/CheckboxTableViewer/setCheckStateProvider/ICheckStateProvider, Sets the {@link ICheckStateProvider} for this {@link CheckboxTreeViewer}. The check state provider will supply the logic for deciding whether the check box associated with each item should be checked, grayed or unchecked. @param checkStateProvider	The provider. @since 3.5
method,org/eclipse/jface/viewers/CheckboxTableViewer/setAllChecked/boolean, Sets to the given value the checked state for all elements in this viewer. Does not fire events to check state listeners. @param state true if the element should be checked, and false if it should be unchecked
method,org/eclipse/jface/viewers/CheckboxTableViewer/setAllGrayed/boolean, Sets to the given value the grayed state for all elements in this viewer. @param state true if the element should be grayed, and false if it should be ungrayed
method,org/eclipse/jface/viewers/CheckboxTableViewer/setCheckedElements/Object[], Sets which nodes are checked in this viewer. The given list contains the elements that are to be checked; all other nodes are to be unchecked. Does not fire events to check state listeners. This method is typically used when restoring the interesting state of a viewer captured by an earlier call to getCheckedElements. @param elements the list of checked elements (element type: Object) @see #getCheckedElements
method,org/eclipse/jface/viewers/CheckboxTableViewer/setGrayed/Object;boolean, Sets the grayed state for the given element in this viewer. @param element the element @param state true if the item should be grayed, and false if it should be ungrayed @return true if the element is visible and the gray state could be set, and false otherwise
method,org/eclipse/jface/viewers/CheckboxTableViewer/setGrayedElements/Object[], Sets which nodes are grayed in this viewer. The given list contains the elements that are to be grayed; all other nodes are to be ungrayed. This method is typically used when restoring the interesting state of a viewer captured by an earlier call to getGrayedElements. @param elements the array of grayed elements @see #getGrayedElements
method,org/eclipse/jface/viewers/CheckboxTableViewer/CheckboxTableViewer/Composite, Creates a table viewer on a newly-created table control under the given parent. The table control is created using the SWT style bits: SWT.CHECK and SWT.BORDER. The table has one column. The viewer has no input, no content provider, a default label provider, no sorter, and no filters. This is equivalent to calling new CheckboxTableViewer(parent, SWT.BORDER). See that constructor for more details. @param parent the parent control @deprecated use newCheckList(Composite, int) or new CheckboxTableViewer(Table) instead (see below for details)
method,org/eclipse/jface/viewers/CheckboxTableViewer/CheckboxTableViewer/Table, Creates a table viewer on the given table control. The SWT.CHECK style bit must be set on the given table control. The viewer has no input, no content provider, a default label provider, no sorter, and no filters. @param table the table control
method,org/eclipse/jface/viewers/DecoratingLabelProvider/setLabelDecorator/ILabelDecorator, Sets the label decorator. Removes all known listeners from the old decorator, and adds all known listeners to the new decorator. The old decorator is not disposed. Fires a label provider changed event indicating that all labels should be updated. Has no effect if the given decorator is identical to the current one. @param decorator the label decorator, or null if no decorations are to be applied
method,org/eclipse/jface/viewers/TableTreeViewer/getLabelProvider/, The table tree viewer implementation of this Viewer framework method returns the label provider, which in the case of table tree viewers will be an instance of either ITableLabelProvider or ILabelProvider. If it is an ITableLabelProvider, then it provides a separate label text and image for each column. If it is an ILabelProvider, then it provides only the label text and image for the first column, and any remaining columns are blank.
method,org/eclipse/jface/viewers/TableTreeViewer/setColumnProperties/String[], Sets the column properties of this table viewer. The properties must correspond with the columns of the table control. They are used to identify the column in a cell modifier. @param columnProperties the list of column properties
method,org/eclipse/jface/viewers/ColumnViewerEditorActivationStrategy/isEditorActivationEvent/ColumnViewerEditorActivationEvent, @param event the event triggering the action @return true if this event should open the editor
method,org/eclipse/jface/viewers/StyledString/append/char;Styler, Appends the string representation of the given character with a style to the {@link StyledString}. The appended character will have the given style associated. @param ch the character to append @param styler the styler to use for styling the character to append or null if no styler should be associated with the appended character @return returns a reference to this object
method,org/eclipse/jface/viewers/StyledString/append/String;Styler, Appends a string with a style to the {@link StyledString}. The appended string will be styled using the given styler. @param string the string to append @param styler the styler to use for styling the string to append or null if no styler should be associated with the appended string. @return returns a reference to this object
method,org/eclipse/jface/viewers/StyledString/append/char[];Styler, Appends the string representation of the given character array with a style to the {@link StyledString}. The appended character array will be styled using the given styler. @param chars the character array to append @param styler the styler to use for styling the character array to append or null if no styler should be associated with the appended character array @return returns a reference to this object
method,org/eclipse/jface/viewers/StyledString/setStyle/int;int;Styler, Sets a styler to use for the given source range. The range must be subrange of actual string of this {@link StyledString}. Stylers previously set for that range will be overwritten. @param offset the start offset of the range @param length the length of the range @param styler the styler to set @throws StringIndexOutOfBoundsException if start is less than zero, or if offset plus length is greater than the length of this object.
method,org/eclipse/jface/viewers/ViewerFilter/filter/Viewer;Object;Object[], Filters the given elements for the given viewer. The input array is not modified. The default implementation of this method calls select on each element in the array, and returns only those elements for which select returns true. @param viewer the viewer @param parent the parent element @param elements the elements to filter @return the filtered elements
method,org/eclipse/jface/viewers/IStructuredSelection/toList/, Returns the elements in this selection as a List. Note In the default implementation of {@link #toList()} in {@link StructuredSelection} the returned list is not a copy of the elements of the receiver and modifying it will modify the contents of the selection. @return the selected elements as a list
class,org/eclipse/jface/viewers/OpenEvent, Event object describing an open which may be generated from a selection or default selection event. The source of these events is a viewer. @see IOpenListener
method,org/eclipse/jface/viewers/ViewerDropAdapter/clearState/, Clears internal state of this drop adapter. This method can be called when no DnD operation is underway, to clear internal state from previous drop operations. @since 3.5
method,org/eclipse/jface/viewers/ViewerDropAdapter/determineLocation/DropTargetEvent, Returns the position of the given event's coordinates relative to its target. The position is determined to be before, after, or on the item, based on some threshold value. @param event the event @return one of the LOCATION_* constants defined in this class
method,org/eclipse/jface/viewers/ViewerDropAdapter/determineTarget/DropTargetEvent, Returns the target item of the given drop event. @param event the event @return The target of the drop, may be null.
method,org/eclipse/jface/viewers/ViewerDropAdapter/getCurrentLocation/, Returns a constant describing the position of the mouse relative to the target (before, on, or after the target. @return one of the LOCATION_* constants defined in this type
method,org/eclipse/jface/viewers/ViewerDropAdapter/getCurrentEvent/, Returns the current {@link DropTargetEvent}. This may be called only inside of the {@link #validateDrop(Object, int, TransferData)} or {@link #performDrop(Object)} methods. @return the DropTargetEvent @since 3.5
method,org/eclipse/jface/viewers/ViewerDropAdapter/getFeedbackEnabled/, Returns whether visible insertion feedback should be presented to the user. Typical insertion feedback is the horizontal insertion bars that appear between adjacent items while dragging. @return true if visual feedback is desired, and false if not
method,org/eclipse/jface/viewers/ViewerDropAdapter/overrideOperation/int, Overrides the current operation for a drop that happens immediately after the current validateDrop. This maybe called only from within a {@link #validateDrop(Object, int, TransferData)} method @param operation the operation to be used for the drop. @see DND#DROP_COPY @see DND#DROP_MOVE @see DND#DROP_LINK @see DND#DROP_NONE @since 3.5
method,org/eclipse/jface/viewers/ViewerDropAdapter/setFeedbackEnabled/boolean, Sets whether visible insertion feedback should be presented to the user. Typical insertion feedback is the horizontal insertion bars that appear between adjacent items while dragging. @param value true if visual feedback is desired, and false if not
method,org/eclipse/jface/viewers/ViewerDropAdapter/setSelectionFeedbackEnabled/boolean, Sets whether selection feedback should be provided during dragging. @param value true if selection feedback is desired, and false if not @since 3.2
method,org/eclipse/jface/viewers/ViewerDropAdapter/setScrollExpandEnabled/boolean, Sets whether auto scrolling and expanding should be provided during dragging. @param value true if scrolling and expanding is desired, and false if not @since 2.0
method,org/eclipse/jface/viewers/ViewerDropAdapter/setExpandEnabled/boolean, Sets whether auto expanding should be provided during dragging. @param value true if expanding is desired, and false if not @since 3.4
method,org/eclipse/jface/viewers/ViewerDropAdapter/setScrollEnabled/boolean, Sets whether auto scrolling should be provided during dragging. @param value true if scrolling is desired, and false if not @since 3.4
field,org/eclipse/jface/viewers/ViewerDropAdapter/LOCATION_BEFORE, Constant describing the position of the cursor relative to the target object. This means the mouse is positioned slightly before the target. @see #getCurrentLocation()
field,org/eclipse/jface/viewers/ViewerDropAdapter/LOCATION_AFTER, Constant describing the position of the cursor relative to the target object. This means the mouse is positioned slightly after the target. @see #getCurrentLocation()
class,org/eclipse/jface/viewers/TableLayout, A layout for a table. Call addColumnData to add columns. The TableLayout {@link ColumnLayoutData} is only valid until the table is resized. To keep the proportions constant when the table is resized see {@link TableColumnLayout}
method,org/eclipse/jface/viewers/OwnerDrawLabelProvider/setUpOwnerDraw/ColumnViewer, Set up the owner draw callbacks for the viewer. @param viewer the viewer the owner draw is set up @deprecated Since 3.4, the default implementation of {@link CellLabelProvider#initialize(ColumnViewer, ViewerColumn)} in this class will set up the necessary owner draw callbacks automatically. Calls to this method can be removed.
method,org/eclipse/jface/viewers/OwnerDrawLabelProvider/setOwnerDrawEnabled/ColumnViewer;ViewerColumn;boolean, Enables or disables owner draw for the given viewer and column. This method will attach or remove a listener to the underlying control as necessary. This method is called from {@link #initialize(ColumnViewer, ViewerColumn)} and {@link #dispose(ColumnViewer, ViewerColumn)} but may be called from subclasses to enable or disable owner draw dynamically. @param viewer the viewer @param column the column, or null if a column is not available @param enabled true if owner draw should be enabled, false otherwise @since 3.4
class,org/eclipse/jface/viewers/ContentViewer, A content viewer is a model-based adapter on a widget which accesses its model by means of a content provider and a label provider. A viewer's model consists of elements, represented by objects. A viewer defines and implements generic infrastructure for handling model input, updates, and selections in terms of elements. Input is obtained by querying an IContentProvider which returns elements. The elements themselves are not displayed directly. They are mapped to labels, containing text and/or an image, using the viewer's ILabelProvider. Implementing a concrete content viewer typically involves the following steps: create SWT controls for viewer (in constructor) (optional) initialize SWT controls from input (inputChanged) define viewer-specific update methods support selections (setSelection, getSelection) 
class,org/eclipse/jface/viewers/CellNavigationStrategy, This class implementation the strategy how the table is navigated using the keyboard. Subclasses can implement their custom navigation algorithms @since 3.3 
method,org/eclipse/jface/viewers/ArrayContentProvider/getInstance/, Returns an instance of ArrayContentProvider. Since instances of this class do not maintain any state, they can be shared between multiple clients. @return an instance of ArrayContentProvider @since 3.5
method,org/eclipse/jface/viewers/ArrayContentProvider/getElements/Object, Returns the elements in the input, which must be either an array or a Collection. 
class,org/eclipse/jface/viewers/DecorationOverlayIcon, A DecorationOverlayIcon is an image descriptor that can be used to overlay decoration images on to the 4 corner quadrants of a base image. The four quadrants are {@link IDecoration#TOP_LEFT}, {@link IDecoration#TOP_RIGHT}, {@link IDecoration#BOTTOM_LEFT} and {@link IDecoration#BOTTOM_RIGHT}. Additionally, the overlay can be used to provide an underlay corresponding to {@link IDecoration#UNDERLAY}. @since 3.3 @see IDecoration
field,org/eclipse/jface/viewers/IDecoration/REPLACE, Constant for replacing the original image. Note that for this to have an effect on the resulting decorated image, {@link #ENABLE_REPLACE} has to be set to {@link Boolean#TRUE} in the {@link IDecorationContext} (opt-in model). If replacement behavior is enabled, the resulting decorated image will be constructed by first painting the underlay, then the replacement image, and then the regular quadrant images. @since 3.4
interface,org/eclipse/jface/viewers/IViewerLabelProvider, Extends IBaseLabelProvider with the methods to update the label for a given element. The label is represented by a ViewerLabel. Unlike ILabelProvider, this allows the text and image to be set in the same request, rather than via separate requests. It also allows the current values for the text and image to be considered by the label provider, allowing for potential optimizations. For example, decorating label providers that run in the background can hold off applying an update to a previously populated label until the decoration is ready, thereby reducing flicker. @see IDelayedLabelDecorator @since 3.0
method,org/eclipse/jface/viewers/IBaseLabelProvider/dispose/, Disposes of this label provider. When a label provider is attached to a viewer, the viewer will automatically call this method when the viewer is being closed. When label providers are used outside of the context of a viewer, it is the client's responsibility to ensure that this method is called when the provider is no longer needed.
interface,org/eclipse/jface/viewers/ITableLabelProvider, Extends IBaseLabelProvider with the methods to provide the text and/or image for each column of a given element. Used by table viewers. @see TableViewer
class,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener, Parties interested in activation and deactivation of editors extend this class and implement any or all of the methods @since 3.3 
method,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener/beforeEditorActivated/ColumnViewerEditorActivationEvent, Called before an editor is activated @param event the event
method,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener/afterEditorActivated/ColumnViewerEditorActivationEvent, Called after an editor has been activated @param event the event
method,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener/beforeEditorDeactivated/ColumnViewerEditorDeactivationEvent, Called before an editor is deactivated @param event the event
method,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener/afterEditorDeactivated/ColumnViewerEditorDeactivationEvent, Called after an editor is deactivated @param event the event
method,org/eclipse/jface/viewers/ICellModifier/modify/Object;String;Object, Modifies the value for the given property of the given element. Has no effect if the element does not have the given property, or if the property cannot be modified. Note that it is possible for an SWT Item to be passed instead of the model element. To handle this case in a safe way, use: if (element instanceof Item) { element = ((Item) element).getData(); } // modify the element's property here @param element the model element or SWT Item (see above) @param property the property @param value the new property value @see org.eclipse.swt.widgets.Item
method,org/eclipse/jface/viewers/DecoratingStyledCellLabelProvider/setLabelDecorator/ILabelDecorator, Sets the label decorator. Removes all known listeners from the old decorator, and adds all known listeners to the new decorator. The old decorator is not disposed. Fires a label provider changed event indicating that all labels should be updated. Has no effect if the given decorator is identical to the current one. @param newDecorator the label decorator, or null if no decorations are to be applied
method,org/eclipse/jface/viewers/DecoratingStyledCellLabelProvider/DecoratingStyledCellLabelProvider/IStyledLabelProvider;ILabelDecorator;IDecorationContext, Creates a {@link DecoratingStyledCellLabelProvider} that delegates the requests for styled labels and for images to a {@link DelegatingStyledCellLabelProvider.IStyledLabelProvider}. @param labelProvider the styled label provider @param decorator a label decorator or null to not decorate the label @param decorationContext a decoration context or null if the no decorator is configured or the default decorator should be used
method,org/eclipse/jface/viewers/TreePath/hashCode/IElementComparer, Returns a hash code computed from the hash codes of the segments, using the given comparer to compute the hash codes of the segments. @param comparer comparer to use or null if the segments' hash codes should be computed by calling their hashCode() methods. @return the computed hash code
method,org/eclipse/jface/viewers/TreePath/equals/TreePath;IElementComparer, Returns whether this path is equivalent to the given path using the specified comparer to compare individual elements. @param otherPath tree path to compare to @param comparer comparator to use or null if segments should be compared using equals() @return whether the paths are equal
method,org/eclipse/jface/viewers/TreePath/startsWith/TreePath;IElementComparer, Returns whether this path starts with the same segments as the given path, using the given comparer to compare segments. @param treePath path to compare to @param comparer the comparer to use, or null if equals() should be used to compare segments @return whether the given path is a prefix of this path, or the same as this path
method,org/eclipse/jface/viewers/ViewerLabel/setBackground/Color, Set the background Color. @param background Color. This value should not be null. @since 3.1
method,org/eclipse/jface/viewers/ViewerLabel/setFont/Font, Set the font. @param font Font This value should not be null. @since 3.1
method,org/eclipse/jface/viewers/ViewerLabel/setForeground/Color, Set the foreground Color. @param foreground Color This value should not be null. @since 3.1
method,org/eclipse/jface/viewers/ViewerLabel/setTooltipText/String, Set the tool tip text. @param tooltipText The tooltipText {@link String} to set. This value should not be null. @since 3.3
method,org/eclipse/jface/viewers/ViewerLabel/setTooltipBackgroundColor/Color, Set the background {@link Color} for tool tip. @param tooltipBackgroundColor The {@link Color} to set. This value should not be null. @since 3.3
class,org/eclipse/jface/viewers/LabelDecorator, The LabelDecorator is an abstract superclass of ILabelDecorators that support IDecorationContext. @see IDecorationContext @since 3.2
method,org/eclipse/jface/viewers/FocusCellOwnerDrawHighlighter/onlyTextHighlighting/ViewerCell, Controls whether the whole cell or only the text-area is highlighted @param cell the cell which is highlighted @return true if only the text area should be highlighted @since 3.4
method,org/eclipse/jface/viewers/LabelProviderChangedEvent/LabelProviderChangedEvent/IBaseLabelProvider, Creates a new event for the given source, indicating that all labels provided by the source are no longer valid and should be updated. @param source the label provider
method,org/eclipse/jface/viewers/LabelProviderChangedEvent/LabelProviderChangedEvent/IBaseLabelProvider;Object[], Creates a new event for the given source, indicating that the label provided by the source for the given elements is no longer valid and should be updated. @param source the label provider @param elements the element whose labels have changed
method,org/eclipse/jface/viewers/LabelProviderChangedEvent/LabelProviderChangedEvent/IBaseLabelProvider;Object, Creates a new event for the given source, indicating that the label provided by the source for the given element is no longer valid and should be updated. @param source the label provider @param element the element whose label needs to be updated
method,org/eclipse/jface/viewers/CellLabelProvider/useNativeToolTip/Object, Return whether or not to use the native tool tip. If you switch to native tool tips only the value from {@link #getToolTipText(Object)} is used all other features from custom tool tips are not supported. To reset the control to native behavior you should return true from this method and null from {@link #getToolTipText(Object)} or null from {@link #getToolTipText(Object)} and {@link #getToolTipImage(Object)} at the same time @param object the {@link Object} for which the tool tip is shown @return true if native tool tips should be used
method,org/eclipse/jface/viewers/ViewerRow/getNeighbor/int;boolean, Returns a neighboring row, or null if no neighbor exists in the given direction. If sameLevel is true, only sibling rows (under the same parent) will be considered. @param direction the direction {@link #BELOW} or {@link #ABOVE} @param sameLevel if true, search only within sibling rows @return the row above/below, or null if not found
method,org/eclipse/jface/viewers/ViewerRow/getTextBounds/int, The location and bounds of the area where the text is drawn depends on various things (image displayed, control with SWT.CHECK) @param index the column index @return the bounds of the of the text area. May return null if the underlying widget implementation doesn't provide this information @since 3.4
method,org/eclipse/jface/viewers/ViewerRow/getImageBounds/int, Returns the location and bounds of the area where the image is drawn. @param index the column index @return the bounds of the of the image area. May return null if the underlying widget implementation doesn't provide this information @since 3.4
method,org/eclipse/jface/viewers/ColumnViewerToolTipSupport/enableFor/ColumnViewer, Enable ToolTip support for the viewer by creating an instance from this class. To get all necessary informations this support class consults the {@link CellLabelProvider}. @param viewer the viewer the support is attached to
method,org/eclipse/jface/viewers/ColumnViewerToolTipSupport/enableFor/ColumnViewer;int, Enable ToolTip support for the viewer by creating an instance from this class. To get all necessary informations this support class consults the {@link CellLabelProvider}. @param viewer the viewer the support is attached to @param style style passed to control tool tip behavior @see ToolTip#RECREATE @see ToolTip#NO_RECREATE
method,org/eclipse/jface/viewers/ColumnViewerToolTipSupport/createToolTipContentArea/Event;Composite, Instead of overwriting this method subclasses should overwrite {@link #createViewerToolTipContentArea(Event, ViewerCell, Composite)}
method,org/eclipse/jface/viewers/ColumnViewerToolTipSupport/ColumnViewerToolTipSupport/ColumnViewer;int;boolean, Enable ToolTip support for the viewer by creating an instance from this class. To get all necessary informations this support class consults the {@link CellLabelProvider}. @param viewer the viewer the support is attached to @param style style passed to control tool tip behavior @param manualActivation true if the activation is done manually using {@link #show(Point)}
method,org/eclipse/jface/viewers/StructuredSelection/StructuredSelection/Object, Creates a structured selection containing a single object. The object must not be null. @param element the element
method,org/eclipse/jface/viewers/StructuredSelection/StructuredSelection/List;IElementComparer, Creates a structured selection from the given List and element comparer. If an element comparer is provided, it will be used to determine equality between structured selection objects provided that they both are based on the same (identical) comparer. See bug @param elements list of selected elements @param comparer the comparer, or null @since 3.4
field,org/eclipse/jface/viewers/StructuredSelection/EMPTY, The canonical empty selection. This selection should be used instead of null.
method,org/eclipse/jface/viewers/ICheckable/setChecked/Object;boolean, Sets the checked state for the given element in this viewer. Does not fire events to check state listeners. @param element the element @param state true if the item should be checked, and false if it should be unchecked @return true if the checked state could be set, and false otherwise
method,org/eclipse/jface/viewers/TreeNode/getParent/, Returns the parent node. @return The parent node; may be null if there are no parent nodes.
method,org/eclipse/jface/viewers/TreeNode/getValue/, Returns the value held by this node. @return The value; may be anything.
method,org/eclipse/jface/viewers/TreeNode/setChildren/TreeNode[], Sets the children for this node. @param children The child nodes; may be null or empty. There should be no null children in the array.
method,org/eclipse/jface/viewers/TreeNode/setParent/TreeNode, Sets the parent for this node. @param parent The parent node; may be null.
method,org/eclipse/jface/viewers/TreeNode/TreeNode/Object, Constructs a new instance of TreeNode. @param value The value held by this node; may be anything.
field,org/eclipse/jface/viewers/TreeNode/value, The value contained in this node. This value may be anything.
field,org/eclipse/jface/viewers/ColumnViewerEditorActivationEvent/keyCode, Only set for {@link #KEY_PRESSED}
field,org/eclipse/jface/viewers/ColumnViewerEditorActivationEvent/character, Only set for {@link #KEY_PRESSED}
method,org/eclipse/jface/viewers/ICellEditorListener/applyEditorValue/, Notifies that the end user has requested applying a value. All cell editors send this notification. The normal reaction is to update the model with the current cell editor value. However, if the value is not valid, it should not be applied. A typical text-based cell editor would send this message when the end user hits Return, whereas other editors would send it whenever their value changes. 
method,org/eclipse/jface/viewers/ICellEditorListener/cancelEditor/, Notifies that the end user has canceled editing. All cell editors send this notification. A listener should not update the model based on this notification; see applyEditorValue.
method,org/eclipse/jface/viewers/ICellEditorListener/editorValueChanged/boolean;boolean, Notifies that the end user is changing the value in the cell editor. This notification is normally sent only by text-based editors in response to a keystroke, so that the listener may show an error message reflecting the current valid state. This notification is sent while the value is being actively edited, before the value is applied or canceled. A listener should not update the model based on this notification; see applyEditorValue. If the newValidState parameter is true, the new value may be retrieved by calling ICellEditor.getValue on the appropriate cell editor. @param oldValidState the valid state before the end user changed the value @param newValidState the current valid state
interface,org/eclipse/jface/viewers/IContentProvider, A content provider mediates between the viewer's model and the viewer itself. @see org.eclipse.jface.viewers.ContentViewer#setContentProvider(IContentProvider)
method,org/eclipse/jface/viewers/IContentProvider/dispose/, Disposes of this content provider. This is called by the viewer when it is disposed. The viewer should not be updated during this call, as it is in the process of being disposed. 
method,org/eclipse/jface/viewers/IContentProvider/inputChanged/Viewer;Object;Object, Notifies this content provider that the given viewer's input has been switched to a different element. A typical use for this method is registering the content provider as a listener to changes on the new input (using model-specific means), and deregistering the viewer from the old input. In response to these change notifications, the content provider should update the viewer (see the add, remove, update and refresh methods on the viewers). The viewer should not be updated during this call, as it might be in the process of being disposed. @param viewer the viewer @param oldInput the old input element, or null if the viewer did not previously have an input @param newInput the new input element, or null if the viewer does not have an input
class,org/eclipse/jface/viewers/StructuredViewer, Abstract base implementation for structure-oriented viewers (trees, lists, tables). Supports custom sorting, filtering, and rendering. Any number of viewer filters can be added to this viewer (using addFilter). When the viewer receives an update, it asks each of its filters if it is out of date, and refilters elements as required. @see ViewerFilter @see ViewerComparator
method,org/eclipse/jface/viewers/StructuredViewer/addDragSupport/int;Transfer[];DragSourceListener, Adds support for dragging items out of this viewer via a user drag-and-drop operation. @param operations a bitwise OR of the supported drag and drop operation types ( DROP_COPY,DROP_LINK, and DROP_MOVE) @param transferTypes the transfer types that are supported by the drag operation @param listener the callback that will be invoked to set the drag data and to cleanup after the drag and drop operation finishes @see org.eclipse.swt.dnd.DND
method,org/eclipse/jface/viewers/StructuredViewer/addDropSupport/int;Transfer[];DropTargetListener, Adds support for dropping items into this viewer via a user drag-and-drop operation. @param operations a bitwise OR of the supported drag and drop operation types ( DROP_COPY,DROP_LINK, and DROP_MOVE) @param transferTypes the transfer types that are supported by the drop operation @param listener the callback that will be invoked after the drag and drop operation finishes @see org.eclipse.swt.dnd.DND
method,org/eclipse/jface/viewers/StructuredViewer/filter/Object[], Returns the result of running the given elements through the filters. @param elements the elements to filter @return only the elements which all filters accept
method,org/eclipse/jface/viewers/StructuredViewer/findItem/Object, Finds the widget which represents the given element. The default implementation of this method tries first to find the widget for the given element assuming that it is the viewer's input; this is done by calling doFindInputItem. If it is not found there, it is looked up in the internal element map provided that this feature has been enabled. If the element map is disabled, the widget is found via doFindInputItem. @param element the element @return the corresponding widget, or null if none
method,org/eclipse/jface/viewers/StructuredViewer/findItems/Object, Finds the widgets which represent the given element. The returned array must not be changed by clients; it might change upon calling other methods on this viewer. This method was introduced to support multiple equal elements in a viewer (@see {@link AbstractTreeViewer}). Multiple equal elements are only supported if the element map is enabled by calling {@link #setUseHashlookup(boolean)} and passing true. The default implementation of this method tries first to find the widget for the given element assuming that it is the viewer's input; this is done by calling doFindInputItem. If it is not found there, the widgets are looked up in the internal element map provided that this feature has been enabled. If the element map is disabled, the widget is found via doFindInputItem. @param element the element @return the corresponding widgets @since 3.2
method,org/eclipse/jface/viewers/StructuredViewer/getFilteredChildren/Object, Returns the filtered array of children of the given element. The resulting array must not be modified, as it may come directly from the model's internal state. @param parent the parent element @return a filtered array of child elements
method,org/eclipse/jface/viewers/StructuredViewer/getRawChildren/Object, Returns the children of the given parent without sorting and filtering them. The resulting array must not be modified, as it may come directly from the model's internal state. Returns an empty array if the given parent is null. @param parent the parent element @return the child elements
method,org/eclipse/jface/viewers/StructuredViewer/getSortedChildren/Object, Returns the sorted and filtered set of children of the given element. The resulting array must not be modified, as it may come directly from the model's internal state. @param parent the parent element @return a sorted and filtered array of child elements
method,org/eclipse/jface/viewers/StructuredViewer/getComparator/, Return this viewer's comparator used to sort elements. This method should be used instead of getSorter(). @return a viewer comparator, or null if none @since 3.2
method,org/eclipse/jface/viewers/StructuredViewer/preservingSelection/Runnable, Attempts to preserves the current selection across a run of the given code. This method should not preserve the selection if {link #getPreserveSelection()} returns false. The default implementation of this method: discovers the old selection (via getSelection) runs the given runnable attempts to restore the old selection (using setSelectionToWidget rediscovers the resulting selection (via getSelection) calls handleInvalidSelection if the resulting selection is different from the old selection @param updateCode the code to run see #getPreserveSelection()
method,org/eclipse/jface/viewers/StructuredViewer/refresh/boolean, Refreshes this viewer with information freshly obtained from this viewer's model. If updateLabels is true then labels for otherwise unaffected elements are updated as well. Otherwise, it assumes labels for existing elements are unchanged, and labels are only obtained as needed (for example, for new elements). Calling refresh(true) has the same effect as refresh(). Note that the implementation may still obtain labels for existing elements even if updateLabels is false. The intent is simply to allow optimization where possible. @param updateLabels true to update labels for existing elements, false to only update labels as needed, assuming that labels for existing elements are unchanged. @since 2.0
method,org/eclipse/jface/viewers/StructuredViewer/removeFilter/ViewerFilter, Removes the given filter from this viewer, and triggers refiltering and resorting of the elements if required. Has no effect if the identical filter is not registered. If you want to remove more than one filter consider using {@link StructuredViewer#setFilters(ViewerFilter[])}. @param filter a viewer filter @see StructuredViewer#setFilters(ViewerFilter[])
method,org/eclipse/jface/viewers/StructuredViewer/reveal/Object, Ensures that the given element is visible, scrolling the viewer if necessary. The selection is unchanged. @param element the element to reveal
method,org/eclipse/jface/viewers/StructuredViewer/setComparator/ViewerComparator, Sets this viewer's comparator to be used for sorting elements, and triggers refiltering and resorting of this viewer's element. null turns sorting off. To get the viewer's comparator, call getComparator(). IMPORTANT: This method was introduced in 3.2. If a reference to this viewer object is passed to clients who call getSorter(), null may be returned from from that method even though the viewer is sorting its elements using the viewer's comparator. @param comparator a viewer comparator, or null if none @since 3.2
method,org/eclipse/jface/viewers/StructuredViewer/setUseHashlookup/boolean, Configures whether this structured viewer uses an internal hash table to speeds up the mapping between elements and SWT items. This must be called before the viewer is given an input (via setInput). @param enable true to enable hash lookup, and false to disable it
method,org/eclipse/jface/viewers/StructuredViewer/usingElementMap/, Returns whether this structured viewer is configured to use an internal map to speed up the mapping between elements and SWT items. The default implementation of this framework method checks whether the internal map has been initialized. @return true if the element map is enabled, and false if disabled
method,org/eclipse/jface/viewers/StructuredViewer/ColorAndFontCollectorWithProviders/applyFontsAndColors/TableItem, Apply the fonts and colors to the control if required. @param control
method,org/eclipse/jface/viewers/StructuredViewer/ColorAndFontCollector/applyFontsAndColors/TableItem, Apply the fonts and colors to the control if required. @param control
method,org/eclipse/jface/viewers/StructuredViewer/ColorAndFontCollector/applyFontsAndColors/TreeItem, Apply the fonts and colors to the control if required. @param control
method,org/eclipse/jface/viewers/StructuredViewer/ColorAndFontCollector/applyFontsAndColors/TableTreeItem, Apply the fonts and colors to the control if required. @param control
method,org/eclipse/jface/viewers/ITreeContentProvider/getChildren/Object, Returns the child elements of the given parent element. The difference between this method and IStructuredContentProvider.getElements is that getElements is called to obtain the tree viewer's root elements, whereas getChildren is used to obtain the children of a given parent element in the tree (including a root). The result is not modified by the viewer. @param parentElement the parent element @return an array of child elements
method,org/eclipse/jface/viewers/ITreeContentProvider/hasChildren/Object, Returns whether the given element has children. Intended as an optimization for when the viewer does not need the actual children. Clients may be able to implement this more efficiently than getChildren. @param element the element @return true if the given element has children, and false if it has no children
interface,org/eclipse/jface/viewers/ILazyTreeContentProvider, The ILazyTreeContentProvider is the content provider for tree viewers created using the SWT.VIRTUAL flag that only wish to return their contents as they are queried. @since 3.2
method,org/eclipse/jface/viewers/ILazyTreeContentProvider/updateChildCount/Object;int, Called when the TreeViewer needs an up-to-date child count for the given element, for example from {@link TreeViewer#refresh()} and {@link TreeViewer#setInput(Object)}. If the content provider knows the given element, it should respond by calling {@link TreeViewer#setChildCount(Object, int)}. If the given current child count is already correct, no action has to be taken by this content provider. @param element The element for which an up-to-date child count is needed, or the viewer's input if the number of root elements is requested @param currentChildCount 			 The current child count for the element that needs updating
method,org/eclipse/jface/viewers/AbstractTableViewer/add/Object[], Adds the given elements to this table viewer. If this viewer does not have a sorter, the elements are added at the end in the order given; otherwise the elements are inserted at appropriate positions. This method should be called (by the content provider) when elements have been added to the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param elements the elements to add
method,org/eclipse/jface/viewers/AbstractTableViewer/internalCreateNewRowPart/int;int, Create a new row. Callers can only use the returned object locally and before making the next call on the viewer since it may be re-used for subsequent method calls. @param style the style for the new row @param rowIndex the index of the row or -1 if the row is appended at the end @return the newly created row
method,org/eclipse/jface/viewers/AbstractTableViewer/getLabelProvider/, The table viewer implementation of this Viewer framework method returns the label provider, which in the case of table viewers will be an instance of either ITableLabelProvider or ILabelProvider. If it is an ITableLabelProvider, then it provides a separate label text and image for each column. If it is an ILabelProvider, then it provides only the label text and image for the first column, and any remaining columns are blank.
method,org/eclipse/jface/viewers/AbstractTableViewer/indexForElement/Object, @param element the element to insert @return the index where the item should be inserted.
method,org/eclipse/jface/viewers/AbstractTableViewer/insert/Object;int, Inserts the given element into this table viewer at the given position. If this viewer has a sorter, the position is ignored and the element is inserted at the correct position in the sort order. This method should be called (by the content provider) when elements have been added to the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param element the element @param position a 0-based position relative to the model, or -1 to indicate the last position
method,org/eclipse/jface/viewers/AbstractTableViewer/remove/Object[], Removes the given elements from this table viewer. The selection is updated if required. This method should be called (by the content provider) when elements have been removed from the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param elements the elements to remove
method,org/eclipse/jface/viewers/AbstractTableViewer/replace/Object;int, Replace the element at the given index with the given element. This method will not call the content provider to verify. Note that this method will materialize a TableItem the given index.. @param element @param index @see ILazyContentProvider @since 3.1
method,org/eclipse/jface/viewers/AbstractTableViewer/doRemove/int;int, Removes the items from the receiver which are between the given zero-relative start and end indices (inclusive). @param start the start of the range @param end the end of the range @exception IllegalArgumentException - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive) @since 3.3
method,org/eclipse/jface/viewers/AbstractTableViewer/doSetSelection/Item[], Sets the receiver's selection to be the given array of items. The current selection is cleared before the new items are selected. Items that are not in the receiver are ignored. If the receiver is single-select and multiple items are specified, then all items are ignored. @param items the array of items @exception IllegalArgumentException - if the array of items is null @since 3.3
method,org/eclipse/jface/viewers/AbstractTableViewer/doSelect/int[], Selects the items at the given zero-relative indices in the receiver. The current selection is not cleared before the new items are selected. If the item at a given index is not selected, it is selected. If the item at a given index was already selected, it remains selected. Indices that are out of range and duplicate indices are ignored. If the receiver is single-select and multiple indices are specified, then all indices are ignored. @param indices the array of indices for the items to select @exception IllegalArgumentException - if the array of indices is null
method,org/eclipse/jface/viewers/AbstractTreeViewer/add/Object;Object[], Adds the given child elements to this viewer as children of the given parent element. If this viewer does not have a sorter, the elements are added at the end of the parent's list of children in the order given; otherwise, the elements are inserted at the appropriate positions. This method should be called (by the content provider) when elements have been added to the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param parentElementOrTreePath the parent element @param childElements the child elements to add
method,org/eclipse/jface/viewers/AbstractTreeViewer/internalAdd/Widget;Object;Object[], Adds the given child elements to this viewer as children of the given parent element. EXPERIMENTAL. Not to be used except by JDT. This method was added to support JDT's explorations into grouping by working sets. This method cannot be removed without breaking binary backwards compatibility, but should not be called by clients. @param widget the widget for the parent element @param parentElementOrTreePath the parent element @param childElements the child elements to add @since 3.1
method,org/eclipse/jface/viewers/AbstractTreeViewer/indexForElement/Widget;Object, Returns the index where the item should be inserted. @param parent The parent widget the element will be inserted into. @param element The element to insert. @return the index of the element
method,org/eclipse/jface/viewers/AbstractTreeViewer/createTreeItem/Widget;Object;int, Creates a single item for the given parent and synchronizes it with the given element. @param parent the parent widget @param element the element @param index if non-negative, indicates the position to insert the item into its parent
method,org/eclipse/jface/viewers/AbstractTreeViewer/getNextItem/Item;boolean, Returns the item after the given item in the tree, or null if there is no next item. @param item the item @param includeChildren true if the children are considered in determining which item is next, and false if subtrees are ignored @return the next item, or null if none
method,org/eclipse/jface/viewers/AbstractTreeViewer/getPreviousItem/Item, Returns the item before the given item in the tree, or null if there is no previous item. @param item the item @return the previous item, or null if none
method,org/eclipse/jface/viewers/AbstractTreeViewer/internalInitializeTree/Control, Initializes the tree with root items, expanding to the appropriate level if necessary. @param tree the tree control @since 3.3
method,org/eclipse/jface/viewers/AbstractTreeViewer/internalExpand/Object;boolean, Tries to create a path of tree items for the given element or tree path. This method recursively walks up towards the root of the tree and in the case of an element (rather than a tree path) assumes that getParent returns the correct parent of an element. @param elementOrPath the element @param expand true if all nodes on the path should be expanded, and false otherwise @return Widget
method,org/eclipse/jface/viewers/AbstractTreeViewer/internalRefresh/Widget;Object;boolean;boolean, Refreshes the tree starting at the given widget. EXPERIMENTAL. Not to be used except by JDT. This method was added to support JDT's explorations into grouping by working sets. This method cannot be removed without breaking binary backwards compatibility, but should not be called by clients. @param widget the widget @param element the element @param doStruct true if structural changes are to be picked up, and false if only label provider changes are of interest @param updateLabels true to update labels for existing elements, false to only update labels as needed, assuming that labels for existing elements are unchanged. @since 3.1
method,org/eclipse/jface/viewers/AbstractTreeViewer/internalRemove/Object[], Removes the given elements from this viewer. EXPERIMENTAL. Not to be used except by JDT. This method was added to support JDT's explorations into grouping by working sets. This method cannot be removed without breaking binary backwards compatibility, but should not be called by clients. @param elementsOrPaths the elements or element paths to remove @since 3.1
method,org/eclipse/jface/viewers/AbstractTreeViewer/remove/Object[], Removes the given elements from this viewer. The selection is updated if required. This method should be called (by the content provider) when elements have been removed from the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param elementsOrTreePaths the elements to remove
method,org/eclipse/jface/viewers/AbstractTreeViewer/remove/Object;Object[], Removes the given elements from this viewer whenever they appear as children of the given parent element. If the given elements also appear as children of some other parent, the other parent will remain unchanged. The selection is updated if required. This method should be called (by the content provider) when elements have been removed from the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param parent the parent of the elements to remove @param elements the elements to remove @since 3.2
method,org/eclipse/jface/viewers/AbstractTreeViewer/setAutoExpandLevel/int, Sets the auto-expand level to be used when the input of the viewer is set using {@link #setInput(Object)}. The value 0 means that there is no auto-expand; 1 means that the invisible root element is expanded (since most concrete subclasses do not show the root element, there is usually no practical difference between using the values 0 and 1); 2 means that top-level elements are expanded, but not their children; 3 means that top-level elements are expanded, and their children, but not grandchildren; and so on. The value ALL_LEVELS means that all subtrees should be expanded. Note that in previous releases, the Javadoc for this method had an off-by one error. See bug 177669 for details. @param level non-negative level, or ALL_LEVELS to expand all levels of the tree
method,org/eclipse/jface/viewers/AbstractTreeViewer/setExpandedElements/Object[], Sets which nodes are expanded in this viewer's tree. The given list contains the elements that are to be expanded; all other nodes are to be collapsed. This method is typically used when restoring the interesting state of a viewer captured by an earlier call to getExpandedElements. @param elements the array of expanded elements @see #getExpandedElements
method,org/eclipse/jface/viewers/AbstractTreeViewer/setExpandedTreePaths/TreePath[], Sets which nodes are expanded in this viewer's tree. The given list contains the tree paths that are to be expanded; all other nodes are to be collapsed. This method is typically used when restoring the interesting state of a viewer captured by an earlier call to getExpandedTreePaths. @param treePaths the array of expanded tree paths @see #getExpandedTreePaths() @since 3.2
method,org/eclipse/jface/viewers/AbstractTreeViewer/updateChildren/Widget;Object;Object[], Updates the tree items to correspond to the child elements of the given parent element. If null is passed for the children, this method obtains them (only if needed). @param widget the widget @param parent the parent element @param elementChildren the child elements, or null @deprecated this is no longer called by the framework
method,org/eclipse/jface/viewers/AbstractTreeViewer/getChildren/Widget;Object[], Not to be called by clients. Return the items to be refreshed as part of an update. elementChildren are the new elements. @param widget @param elementChildren @since 3.4 @return Item[] @deprecated This method was inadvertently released as API but is not intended to be called by clients.
method,org/eclipse/jface/viewers/AbstractTreeViewer/updatePlus/Item;Object, Updates the +/- icon of the tree node from the given element. It calls isExpandable to determine whether an element is expandable. @param item the item @param element the element
method,org/eclipse/jface/viewers/AbstractTreeViewer/getVisibleExpandedElements/, Gets the expanded elements that are visible to the user. An expanded element is only visible if the parent is expanded. @return the visible expanded elements @since 2.0
method,org/eclipse/jface/viewers/AbstractTreeViewer/insert/Object;Object;int, Inserts the given element as a new child element of the given parent element at the given position. If this viewer has a sorter, the position is ignored and the element is inserted at the correct position in the sort order. This method should be called (by the content provider) when elements have been added to the model, in order to cause the viewer to accurately reflect the model. This method only affects the viewer, not the model. @param parentElementOrTreePath the parent element, or the tree path to the parent @param element the element @param position a 0-based position relative to the model, or -1 to indicate the last position @since 3.2
method,org/eclipse/jface/viewers/AbstractTreeViewer/buildLabel/ViewerLabel;Object, This implementation of buildLabel handles tree paths as well as elements. @param updateLabel the ViewerLabel to collect the result in @param elementOrPath the element or tree path for which a label should be built @see org.eclipse.jface.viewers.StructuredViewer#buildLabel(org.eclipse.jface.viewers.ViewerLabel, java.lang.Object)
field,org/eclipse/jface/viewers/AbstractTreeViewer/ALL_LEVELS, Constant indicating that all levels of the tree should be expanded or collapsed. @see #expandToLevel(int) @see #collapseToLevel(Object, int)
method,org/eclipse/jface/viewers/ICheckStateProvider/isChecked/Object, Indicates if an element's representation should appear as checked or gray instead of unchecked. If this method returns true the {@link ICheckStateProvider#isGrayed(Object)} method will determine whether the check box displays a check mark (checked) or a box (grayed). @param element @return true if the element should be checked or grayed, false if it 		should be unchecked
method,org/eclipse/jface/viewers/ICheckStateProvider/isGrayed/Object, Indicates whether the check box associated with an element, when checked as indicated by the {@link ICheckStateProvider#isChecked(Object)} method, should display the gray (boxed) state instead of the check mark. @param element @return true if the element should be gray
method,org/eclipse/jface/viewers/TableViewer/setSelection/ISelection;boolean, Sets a new selection for this viewer and optionally makes it visible. The TableViewer implementation of this method is inefficient for the ILazyContentProvider as lookup is done by indices rather than elements and may require population of the entire table in worse case. Use Table#setSelection(int[] indices) and Table#showSelection() if you wish to set selection more efficiently when using a ILazyContentProvider. @param selection 		the new selection @param reveal 		true if the selection is to be made visible, and 		false otherwise @see Table#setSelection(int[]) @see Table#showSelection()
method,org/eclipse/jface/viewers/TableViewer/refresh/boolean;boolean, Refreshes this viewer with information freshly obtained from this viewer's model. If updateLabels is true then labels for otherwise unaffected elements are updated as well. Otherwise, it assumes labels for existing elements are unchanged, and labels are only obtained as needed (for example, for new elements). Calling refresh(true) has the same effect as refresh(). Note that the implementation may still obtain labels for existing elements even if updateLabels is false. The intent is simply to allow optimization where possible. @param updateLabels 		true to update labels for existing elements, 		false to only update labels as needed, assuming that labels 		for existing elements are unchanged. @param reveal 		true to make the preserved selection visible afterwards @since 3.3
method,org/eclipse/jface/viewers/CheckboxTreeViewer/setCheckStateProvider/ICheckStateProvider, Sets the {@link ICheckStateProvider} for this {@link CheckboxTreeViewer}. The check state provider will supply the logic for deciding whether the check box associated with each item should be checked, grayed or unchecked. @param checkStateProvider	The provider. @since 3.5
method,org/eclipse/jface/viewers/CheckboxTreeViewer/setCheckedElements/Object[], Sets which elements are checked in this viewer's tree. The given list contains the elements that are to be checked; all other elements are to be unchecked. Does not fire events to check state listeners. This method is typically used when restoring the interesting state of a viewer captured by an earlier call to getCheckedElements. @param elements the array of checked elements @see #getCheckedElements
method,org/eclipse/jface/viewers/CheckboxTreeViewer/setGrayed/Object;boolean, Sets the grayed state for the given element in this viewer. @param element the element @param state true if the item should be grayed, and false if it should be ungrayed @return true if the gray state could be set, and false otherwise
method,org/eclipse/jface/viewers/CheckboxTreeViewer/setGrayChecked/Object;boolean, Check and gray the selection rather than calling both setGrayed and setChecked as an optimization. Does not fire events to check state listeners. @param element the item being checked @param state a boolean indicating selection or deselection @return boolean indicating success or failure.
method,org/eclipse/jface/viewers/CheckboxTreeViewer/setGrayedElements/Object[], Sets which elements are grayed in this viewer's tree. The given list contains the elements that are to be grayed; all other elements are to be ungrayed. This method is typically used when restoring the interesting state of a viewer captured by an earlier call to getGrayedElements. @param elements the array of grayed elements @see #getGrayedElements
method,org/eclipse/jface/viewers/CheckboxTreeViewer/setParentsGrayed/Object;boolean, Sets the grayed state for the given element and its parents in this viewer. @param element the element @param state true if the item should be grayed, and false if it should be ungrayed @return true if the element is visible and the gray state could be set, and false otherwise @see #setGrayed
method,org/eclipse/jface/viewers/CheckboxTreeViewer/CheckboxTreeViewer/Tree, Creates a tree viewer on the given tree control. The SWT.CHECK style bit must be set on the given tree control. The viewer has no input, no content provider, a default label provider, no sorter, and no filters. @param tree the tree control
method,org/eclipse/jface/viewers/ITreePathContentProvider/getChildren/TreePath, Returns the child elements of the last element in the given path. Implementors may want to use the additional context of the complete path of a parent element in order to decide which children to return. The provided path is relative to the input. The root elements must be obtained by calling {@link IStructuredContentProvider#getElements(Object)}. The result is not modified by the viewer. @param parentPath the path of the parent element @return an array of child elements
method,org/eclipse/jface/viewers/ITreePathContentProvider/hasChildren/TreePath, Returns whether the last element of the given path has children. Intended as an optimization for when the viewer does not need the actual children. Clients may be able to implement this more efficiently than getChildren. @param path the path @return true if the lat element of the path has children, and false if it has no children
method,org/eclipse/jface/viewers/ITreePathContentProvider/getParents/Object, Return the possible parent paths for the given element. An empty array can be returned if the paths cannot be computed. If the element is a potential child of the input of the viewer, an empty tree path should be an entry in the returned array. @param element the element @return the possible parent paths for the given element
class,org/eclipse/jface/viewers/CellEditor, Abstract base class for cell editors. Implements property change listener handling, and SWT window management. Subclasses implement particular kinds of cell editors. This package contains various specialized cell editors: TextCellEditor - for simple text strings ColorCellEditor - for colors ComboBoxCellEditor - value selected from drop-down combo box CheckboxCellEditor - boolean valued checkbox DialogCellEditor - value from arbitrary dialog 
method,org/eclipse/jface/viewers/CellEditor/fireEditorValueChanged/boolean;boolean, Notifies all registered cell editor listeners of a value change. @param oldValidState the valid state before the end user changed the value @param newValidState the current valid state @see ICellEditorListener#editorValueChanged
method,org/eclipse/jface/viewers/CellEditor/getErrorMessage/, Returns the current error message for this cell editor. @return the error message if the cell editor is in an invalid state, and null if the cell editor is valid
method,org/eclipse/jface/viewers/CellEditor/isDirty/, Returns whether the value of this cell editor has changed since the last call to setValue. @return true if the value has changed, and false if unchanged
method,org/eclipse/jface/viewers/CellEditor/setErrorMessage/String, Sets or clears the current error message for this cell editor. No formatting is done here, the message to be set is expected to be fully formatted before being passed in. @param message the error message, or null to clear
method,org/eclipse/jface/viewers/CellEditor/valueChanged/boolean;boolean, The value has changed. Updates the valid state flag, marks this cell editor as dirty, and notifies all registered cell editor listeners of a value change. @param oldValidState the valid state before the end user changed the value @param newValidState the current valid state @see ICellEditorListener#editorValueChanged
method,org/eclipse/jface/viewers/CellEditor/activate/ColumnViewerEditorActivationEvent, Activate the editor but also inform the editor which event triggered its activation. The default implementation simply calls {@link #activate()} @param activationEvent the editor activation event @since 3.3
field,org/eclipse/jface/viewers/CellEditor/LayoutData/grabHorizontal, Indicates control grabs additional space; true by default.
interface,org/eclipse/jface/viewers/ILazyContentProvider, The ILazyContentProvider is the content provider for table viewers created using the SWT.VIRTUAL flag that only wish to return their contents as they are queried. NOTE: As the ILazyContentProvider does not have API for determining the total item count any changes to the number of items for this object while require a call to #setItemCount on the viewer that uses it.
interface,org/eclipse/jface/viewers/IDelayedLabelDecorator, A delayed label decorator is a label decorator that may not have a decoration available immediately. This interface defines the methods for requesting the preparation of a decorator for an object and for querying if the decorator is ready. Interested parties should register an ILabelProviderListener with a delayed label decorator in order to be informed when the decoration is ready. @since 3.0
class,org/eclipse/jface/viewers/Viewer, A viewer is a model-based adapter on a widget. A viewer can be created as an adapter on a pre-existing control (e.g., creating a ListViewer on an existing List control). All viewers also provide a convenience constructor for creating the control. Implementing a concrete viewer typically involves the following steps: create SWT controls for viewer (in constructor) (optional) initialize SWT controls from input (inputChanged) define viewer-specific update methods support selections (setSelection, getSelection) 
method,org/eclipse/jface/viewers/Viewer/getData/String, Returns the value of the property with the given name, or null if the property is not found. The default implementation performs a (linear) search of an internal table. Overriding this method is generally not required if the number of different keys is small. If a more efficient representation of a viewer's properties is required, override both getData and setData. @param key the property name @return the property value, or null if the property is not found
method,org/eclipse/jface/viewers/Viewer/setData/String;Object, Sets the value of the property with the given name to the given value, or to null if the property is to be removed. If this viewer has such a property, its value is replaced; otherwise a new property is added. The default implementation records properties in an internal table which is searched linearly. Overriding this method is generally not required if the number of different keys is small. If a more efficient representation of a viewer's properties is required, override both getData and setData. @param key the property name @param value the property value, or null if the property is not found
method,org/eclipse/jface/viewers/Viewer/setSelection/ISelection, The viewer implementation of this ISelectionProvider method make the new selection for this viewer without making it visible. This method is equivalent to setSelection(selection,false). Note that some implementations may not be able to set the selection without also revealing it, for example (as of 3.3) TreeViewer. 
method,org/eclipse/jface/viewers/NamedHandleObjectLabelProvider/getText/Object, The text of the element is simply the name of the element if its a defined instance of NamedHandleObject. Otherwise, this method just returns null. @param element The element for which the text should be retrieved; may be null. @return the name of the handle object; null if there is no name or if the element is not a named handle object.
method,org/eclipse/jface/viewers/StyledCellLabelProvider/setOwnerDrawEnabled/boolean, Specifies whether owner draw rendering is enabled for this label provider. By default owner draw rendering is enabled. If owner draw rendering is disabled, rendering is done by the viewer and no styled ranges (see {@link ViewerCell#getStyleRanges()}) are drawn. It is the caller's responsibility to also call {@link StructuredViewer#refresh()} or similar methods to update the underlying widget. @param enabled specifies if owner draw rendering is enabled
method,org/eclipse/jface/viewers/StructuredViewerInternals/AssociateListener/associate/Object;Item, Call when an element is associated with an Item @param element @param item
method,org/eclipse/jface/viewers/StructuredViewerInternals/AssociateListener/disassociate/Item, Called when an Item is no longer associated @param item
interface,org/eclipse/jface/viewers/IIndexableLazyContentProvider, Adds efficient element indexing support to ILazyContentProvider. @since 3.5
method,org/eclipse/jface/viewers/IIndexableLazyContentProvider/findElement/Object, Find the row index of the parameter element in the set of contents provided by this object. Under normal usage, this method will only be used to implement StructuredViewer#setSelection(ISelection) more efficiently. @param element the element to find within the contents served here @return the zero-based index of the element, or -1 if the element is not found
class,org/eclipse/jface/viewers/EditingSupport, EditingSupport is the abstract superclass of the support for cell editing. @since 3.3
field,org/eclipse/jface/viewers/TreeSelection/EMPTY, The canonical empty selection. This selection should be used instead of null.
method,org/eclipse/jface/viewers/TreeViewer/getLabelProvider/, The tree viewer implementation of this Viewer framework method ensures that the given label provider is an instance of either ITableLabelProvider or ILabelProvider. If it is an ITableLabelProvider, then it provides a separate label text and image for each column. If it is an ILabelProvider, then it provides only the label text and image for the first column, and any remaining columns are blank.
method,org/eclipse/jface/viewers/TreeViewer/remove/Object;int, Removes the element at the specified index of the parent. The selection is updated if required. @param parentOrTreePath the parent element, the input element, or a tree path to the parent element @param index child index @since 3.3
method,org/eclipse/jface/viewers/TreeViewer/setHasChildren/Object;boolean, For a TreeViewer with a tree with the VIRTUAL style bit set, inform the viewer about whether the given element or tree path has children. Avoid calling this method if the number of children has already been set. @param elementOrTreePath the element, or tree path @param hasChildren @since 3.3
method,org/eclipse/jface/viewers/TreeViewer/setSelection/ISelection;boolean, Sets a new selection for this viewer and optionally makes it visible. Currently the reveal parameter is not honored because {@link Tree} does not provide an API to only select an item without scrolling it into view @param selection the new selection @param reveal true if the selection is to be made visible, and false otherwise
field,org/eclipse/jface/viewers/ColumnViewerEditor/TABBING_MOVE_TO_ROW_NEIGHBOR, Should if the end of the row is reach started from the start/end of the row below/above
field,org/eclipse/jface/viewers/ColumnViewerEditor/TABBING_CYCLE_IN_ROW, Should if the end of the row is reach started from the beginning in the same row
field,org/eclipse/jface/viewers/ColumnViewerEditor/TABBING_HORIZONTAL, Should tabbing from column to column with in one row be supported
method,org/eclipse/jface/viewers/deferred/DeferredContentProvider/setSortOrder/Comparator, Sets the sort order for this content provider. This sort order takes priority over anything that was supplied to the TableViewer. @param sortOrder new sort order. The comparator must be able to support being used in a background thread.
method,org/eclipse/jface/viewers/deferred/DeferredContentProvider/setFilter/IFilter, Sets the filter for this content provider. This filter takes priority over anything that was supplied to the TableViewer. The filter must be capable of being used in a background thread. @param toSet filter to set
method,org/eclipse/jface/viewers/deferred/DeferredContentProvider/setLimit/int, Sets the maximum number of rows in the table. If the model contains more than this number of elements, only the top elements will be shown based on the current sort order. @param limit maximum number of rows to show or -1 if unbounded
class,org/eclipse/jface/viewers/deferred/LazySortedCollection, This object maintains a collection of elements, sorted by a comparator given in the constructor. The collection is lazily sorted, allowing more efficient runtimes for most methods. There are several methods on this object that allow objects to be queried by their position in the sorted collection. This is a modified binary search tree. Each subtree has a value, a left and right subtree, a count of the number of children, and a set of unsorted children. Insertion happens lazily. When a new node N is inserted into a subtree T, it is initially added to the set of unsorted children for T without actually comparing it with the value for T. The unsorted children will remain in the unsorted set until some subsequent operation requires us to know the exact set of elements in one of the subtrees. At that time, we partition T by comparing all of its unsorted children with T's value and moving them into the left or right subtrees. @since 3.1
method,org/eclipse/jface/viewers/deferred/LazySortedCollection/testInvariants/, Tests if this object's internal state is valid. Throws a runtime exception if the state is invalid, indicating a programming error in this class. This method is intended for use in test suites and should not be called by clients.
method,org/eclipse/jface/viewers/deferred/LazySortedCollection/retainFirst/int, Retains the n smallest items in the collection, removing the rest. When this method returns, the size of the collection will be n. Note that this is a no-op if n > the current size of the collection. @param n number of items to retain
method,org/eclipse/jface/viewers/deferred/LazySortedCollection/getFirst/Object[];boolean, Fills in an array of size n with the n smallest elements from the collection. Can compute the result in sorted or unsorted order. @param result array to be filled @param sorted if true, the result array will be sorted. If false, the result array may be unsorted. This does not affect which elements appear in the result. It only affects their order. Computing an unsorted result is asymptotically faster. @return the number of items inserted into the result array. This will be equal to the minimum of result.length and container.size()
method,org/eclipse/jface/viewers/deferred/LazySortedCollection/getRange/Object[];int;boolean, Computes the n through n+k items in this collection. Computing the result in unsorted order is more efficient. Sorting the result will not change which elements actually show up in the result. That is, even if the result is unsorted, it will still contain the same elements as would have been at that range in a fully sorted collection. @param result array containing the result @param rangeStart index of the first element to be inserted into the result array @param sorted true iff the result will be computed in sorted order @return the number of items actually inserted into the result array (will be the minimum of result.length and this.size())
method,org/eclipse/jface/viewers/deferred/LazySortedCollection/getItems/boolean, Returns the contents of this collection as a sorted or unsorted array. Computing an unsorted array is more efficient. @param sorted if true, the result will be in sorted order. If false, the result may be in unsorted order. @return the contents of this collection as an array.
field,org/eclipse/jface/viewers/deferred/LazySortedCollection/enableDebug, Disables randomization and enables additional runtime error checking. Severely degrades performance if set to true. Intended for use in test suites only.
method,org/eclipse/jface/viewers/deferred/IConcurrentModel/requestUpdate/IConcurrentModelListener, Requests that the receiver to call the given listener's setContents(...) method at its earliest convenience. The receiver is allowed to compute the elements asynchronously. That is, it can compute the result in a background thread and call setContents(...) once the result is ready. If the result is too large to return in one batch, it can call setContents with an empty array followed by a sequence of adds. Has no effect if an update is already queued for an identical listener. @param listener listener whose setContents method should be called. The listener must have been previously registered with addListener.
method,org/eclipse/jface/viewers/deferred/IConcurrentModel/addListener/IConcurrentModelListener, Adds a listener to this model. The listener should be given the model's current contents (either through setContents or a sequence of adds) at the receiver's earliest convenience. The receiver will notify the listener about any changes in state until the listener is removed. Has no effect if an identical listener is already registered. @param listener listener to add
method,org/eclipse/jface/viewers/deferred/IConcurrentModel/removeListener/IConcurrentModelListener, Removes a listener from this model. The receiver will stop sending notifications to the given listener as soon as possible (although some additional notifications may still if arrive if the receiver was in the process of sending notifications in another thread). Any pending updates for this listener will be cancelled. Has no effect if the given listener is not known to this model. @param listener listener to remove
class,org/eclipse/jface/viewers/deferred/SetModel, Trivial implementation of an IConcurrentModel. Implements an unordered set of elements that fires off change notifications whenever elements are added or removed from the set. All notifications are sent synchronously. @since 3.1
method,org/eclipse/jface/viewers/deferred/IConcurrentModelListener/add/Object[], Called when elements are added to the model @param added elements added to the model
method,org/eclipse/jface/viewers/deferred/IConcurrentModelListener/remove/Object[], Called when elements are removed from the model @param removed elements removed from the model
method,org/eclipse/jface/viewers/deferred/IConcurrentModelListener/update/Object[], Called when elements in the model have changed @param changed elements that have changed
method,org/eclipse/jface/viewers/deferred/IConcurrentModelListener/setContents/Object[], Notifies the receiver about the complete set of elements in the model. Most models will not call this method unless the listener explicitly requests it by calling IConcurrentModel.requestUpdate @param newContents contents of the model
interface,org/eclipse/jface/window/IShellProvider, Interface for objects that can return a shell. This is normally used for opening child windows. An object that wants to open child shells can take an IShellProvider in its constructor, and the object that implements IShellProvider can dynamically choose where child shells should be opened. @since 3.1
method,org/eclipse/jface/window/IShellProvider/getShell/, Returns the current shell (or null if none). This return value may change over time, and should not be cached. @return the current shell or null if none
class,org/eclipse/jface/window/WindowManager, A manager for a group of windows. Window managers are an optional JFace feature used in applications which create many different windows (dialogs, wizards, etc.) in addition to a main window. A window manager can be used to remember all the windows that an application has created (independent of whether they are presently open or closed). There can be several window managers, and they can be arranged into a tree. This kind of organization makes it simple to close whole subgroupings of windows. Creating a window manager is as simple as creating an instance of WindowManager. Associating a window with a window manager is done with WindowManager.add(Window). A window is automatically removed from its window manager as a side effect of closing the window. @see Window
method,org/eclipse/jface/window/Window/create/, Creates this window's widgetry in a new top-level shell. The default implementation of this framework method creates this window's shell (by calling createShell), and its controls (by calling createContents), then initializes this window's shell bounds (by calling initializeBounds). 
method,org/eclipse/jface/window/Window/setBlockOnOpen/boolean, Sets whether the open method should block until the window closes. @param shouldBlock true if the open method should not return until the window closes, and false if the open method should return immediately
method,org/eclipse/jface/window/Window/setShellStyle/int, Sets the shell style bits. This method has no effect after the shell is created. The shell style bits are used by the framework method createShell when creating this window's shell. @param newShellStyle the new shell style bits
method,org/eclipse/jface/window/Window/setWindowManager/WindowManager, Sets the window manager of this window. Note that this method is used by WindowManager to maintain a backpointer. Clients must not call the method directly. @param manager the window manager, or null if none
method,org/eclipse/jface/window/Window/setExceptionHandler/IExceptionHandler, Sets the exception handler for this application. Note that the handler may only be set once. Subsequent calls to this method will be ignored. @param handler the exception handler for the application.
method,org/eclipse/jface/window/Window/Window/Shell, Creates a window instance, whose shell will be created under the given parent shell. Note that the window will have no visual representation until it is told to open. By default, open does not block. @param parentShell the parent shell, or null to create a top-level shell. Try passing (Shell)null to this method instead of null if your compiler complains about an ambiguity error. @see #setBlockOnOpen @see #getDefaultOrientation()
interface,org/eclipse/jface/window/Window/IExceptionHandler, This interface defines a Exception Handler which can be set as a global handler and will be called if an exception happens in the event loop.
class,org/eclipse/jface/window/ApplicationWindow, An application window is a high-level main window, with built-in support for an optional menu bar with standard menus, an optional toolbar, and an optional status line. Creating an application window involves the following steps: creating an instance of ApplicationWindow assigning the window to a window manager (optional) opening the window by calling open Only on the last step, when the window is told to open, are the window's shell and widget tree created. When the window is closed, the shell and widget tree are disposed of and are no longer referenced, and the window is automatically removed from its window manager. Like all windows, an application window may be reopened. An application window is also a suitable context in which to perform long-running operations (that is, it implements IRunnableContext). 
method,org/eclipse/jface/window/ApplicationWindow/configureShell/Shell, Extends the super implementation by creating the trim widgets using createTrimWidgets. 
method,org/eclipse/jface/window/ApplicationWindow/showTopSeperator/, Returns whether to show a top separator line between the menu bar and the rest of the window contents. On some platforms such as the Mac, the menu is separated from the main window already, so a separator line is not desired. @return true to show the top separator, false to not show it @since 3.0
method,org/eclipse/jface/window/ApplicationWindow/createStatusLine/Shell, Create the status line if required. @param shell
field,org/eclipse/jface/window/ApplicationWindow/seperator1, The seperator between the menu bar and the rest of the window.
method,org/eclipse/jface/window/ToolTip/setRespectDisplayBounds/boolean, Set to false if display bounds should not be respected or to true if the tooltip is should repositioned to not overlap the display bounds. Default is true @param respectDisplayBounds
method,org/eclipse/jface/window/ToolTip/setRespectMonitorBounds/boolean, Set to false if monitor bounds should not be respected or to true if the tooltip is should repositioned to not overlap the monitors bounds. The monitor the tooltip belongs to is the same is control's monitor the tooltip is shown for. Default is true @param respectMonitorBounds
method,org/eclipse/jface/window/ToolTip/getToolTipArea/Event, This method is called to check for which area the tooltip is created/hidden for. In case of {@link #NO_RECREATE} this is used to decide if the tooltip is hidden recreated. By the default it is the widget the tooltip is created for but could be any object. To decide if the area changed the {@link Object#equals(Object)} method is used. @param event the event @return the area responsible for the tooltip creation or null this could be any object describing the area (e.g. the {@link Control} onto which the tooltip is bound to, a part of this area e.g. for {@link ColumnViewer} this could be a {@link ViewerCell})
method,org/eclipse/jface/window/ToolTip/setHideDelay/int, Set the hide delay. @param hideDelay the delay before the tooltip is hidden. If 0 the tooltip is shown until user moves to other item
method,org/eclipse/jface/window/ToolTip/setPopupDelay/int, Set the popup delay. @param popupDelay the delay before the tooltip is shown to the user. If 0 the tooltip is shown immediately
method,org/eclipse/jface/window/ToolTip/setHideOnMouseDown/boolean, If you don't want the tool tip to be hidden when the user clicks inside the tool tip set this to false. You maybe also need to hide the tool tip yourself depending on what you do after clicking in the tooltip (e.g. if you open a new {@link Shell}) @param hideOnMouseDown flag to indicate of tooltip is hidden automatically on mouse down inside the tool tip
class,org/eclipse/jface/window/DefaultToolTip, Default implementation of ToolTip that provides an iconofied label with font and color controls by subclass. @since 3.3
method,org/eclipse/jface/window/DefaultToolTip/getImage/Event, The {@link Image} displayed in the {@link CLabel} in the default implementation implementation @param event the event triggered the popup of the tooltip @return the {@link Image} or null if no image should be displayed
method,org/eclipse/jface/window/DefaultToolTip/getForegroundColor/Event, The foreground {@link Color} used by {@link CLabel} in the default implementation @param event the event triggered the popup of the tooltip @return the {@link Color} or null if default foreground color should be used
method,org/eclipse/jface/window/DefaultToolTip/getBackgroundColor/Event, The background {@link Color} used by {@link CLabel} in the default implementation @param event the event triggered the popup of the tooltip @return the {@link Color} or null if default background color should be used
method,org/eclipse/jface/window/DefaultToolTip/getBackgroundImage/Event, The background {@link Image} used by {@link CLabel} in the default implementation @param event the event triggered the popup of the tooltip @return the {@link Image} or null if no image should be displayed in the background
method,org/eclipse/jface/window/DefaultToolTip/getFont/Event, The {@link Font} used by {@link CLabel} in the default implementation @param event the event triggered the popup of the tooltip @return the {@link Font} or null if the default font should be used
method,org/eclipse/jface/window/DefaultToolTip/setBackgroundColor/Color, The background {@link Image} used by {@link CLabel} in the default implementation @param backgroundColor the {@link Color} or null if default background color ({@link SWT#COLOR_INFO_BACKGROUND}) should be used
method,org/eclipse/jface/window/DefaultToolTip/setBackgroundImage/Image, The background {@link Image} used by {@link CLabel} in the default implementation @param backgroundImage the {@link Image} or null if no image should be displayed in the background
method,org/eclipse/jface/window/DefaultToolTip/setFont/Font, The {@link Font} used by {@link CLabel} in the default implementation @param font the {@link Font} or null if the default font should be used
method,org/eclipse/jface/window/DefaultToolTip/setForegroundColor/Color, The foreground {@link Color} used by {@link CLabel} in the default implementation @param foregroundColor the {@link Color} or null if default foreground color should be used
method,org/eclipse/jface/window/DefaultToolTip/setImage/Image, The {@link Image} displayed in the {@link CLabel} in the default implementation implementation @param image the {@link Image} or null if no image should be displayed
method,org/eclipse/jface/window/SameShellProvider/SameShellProvider/Control, Returns a shell provider that always returns the current shell for the given control. @param targetControl control whose shell will be tracked, or null if getShell() should always return null
method,org/eclipse/jface/menus/AbstractTrimWidget/fill/Composite;int;int, This method is called to initially construct the widget and is also called whenever the widget's composite has been moved to a trim area on a different side of the workbench. It is the client's responsibility to control the life-cycle of the Control it manages. For example: If the implementation is constructing a {@link ToolBar} and the orientation were to change from horizontal to vertical it would have to dispose its old ToolBar and create a new one with the correct orientation. The sides can be one of: {@link SWT#TOP} {@link SWT#BOTTOM} {@link SWT#LEFT} {@link SWT#RIGHT} @param parent The parent to (re)create the widget under @param oldSide The previous side ({@link SWT#DEFAULT} on the initial fill) @param newSide The current side
method,org/eclipse/jface/menus/IWidget/dispose/, Disposes of the underlying widgets. This can be called when the widget is becoming hidden.
field,org/eclipse/jface/menus/IMenuStateIds/STYLE, The state id used for indicating the widget style of a command presented in the menus and tool bars. This state must be an instance of {@link ToggleState} or {@link RadioState}.
method,org/eclipse/jface/text/IPainter/deactivate/boolean, Deactivates this painter. If the painter is inactive, this call does not have any effect. redraw indicates whether the painter should remove any decoration it previously applied. A deactivated painter can be reactivated by calling paint. @param redraw true if any previously applied decoration should be removed @see #paint(int)
method,org/eclipse/jface/text/ITextOperationTarget/doOperation/int, Performs the operation specified by the operation code on the target. doOperation must only be called if canDoOperation returns true. @param operation the operation code
interface,org/eclipse/jface/text/IWidgetTokenKeeper, A widget token keeper may require a widget token from an {@link org.eclipse.jface.text.IWidgetTokenOwner} and release the token to the owner after usage. A widget token owner may request the token from the token keeper. The keeper may deny the return of the token. The widget token owner and keeper interplay is used by a text viewer in order to manage the appearance and disappearance of addition, on-top popup windows such as text hovers, content assist, etc. In order to provide backward compatibility for clients of IWidgetTokeKeeper, extension interfaces are used as a means of evolution. The following extension interfaces exist: {@link org.eclipse.jface.text.IWidgetTokenKeeperExtension} since version 3.0 introducing priorities when requesting a widget token and thus replacing the non-prioritized scheme. It also allows a client to force a widget token keeper to accept focus. @see org.eclipse.jface.text.IWidgetTokenKeeperExtension @since 2.0
interface,org/eclipse/jface/text/IRewriteTarget, A target publishing the required functions to modify a document that is displayed in a text viewer. It provides access to the document and control over the redraw behavior and the grouping of document changes into undo commands. @see org.eclipse.jface.text.ITextViewer @see org.eclipse.jface.text.IDocument @see org.eclipse.jface.text.IUndoManager @since 2.0
method,org/eclipse/jface/text/IRewriteTarget/setRedraw/boolean, Disables/enables redrawing while modifying the target's document. @param redraw true if the document's visible presentation should be updated, false otherwise
method,org/eclipse/jface/text/IRewriteTarget/beginCompoundChange/, If an undo manager is connected to the document's visible presentation, this method tells the undo manager to fold all subsequent changes into one single undo command until endCompoundChange is called.
method,org/eclipse/jface/text/IRewriteTarget/endCompoundChange/, If an undo manager is connected to the document's visible presentation, this method tells the undo manager to stop the folding of changes into a single undo command. After this call, all subsequent changes are considered to be individually undo-able.
method,org/eclipse/jface/text/IMarkSelection/getOffset/, Returns the mark position. The offset may be -1 if there's no marked region. @return the mark position or -1 if there is no marked region
method,org/eclipse/jface/text/IMarkSelection/getLength/, Returns the length of the mark selection. The length may be negative, if the caret is before the mark position. The length has no meaning if getOffset() returns -1. @return the length of the mark selection. Result is undefined for getOffset == -1
interface,org/eclipse/jface/text/ITextViewerExtension8, Extension interface for {@link org.eclipse.jface.text.ITextViewer}. Adds the ability to print and set how hovers should be enriched when the mouse is moved into them. @since 3.4
method,org/eclipse/jface/text/ITextViewerExtension8/setHoverEnrichMode/EnrichMode, Sets the hover enrich mode. A non-null mode defines when hovers should be enriched once the mouse is moved into them. If mode is null, hovers are automatically closed when the mouse is moved out of the {@link ITextHover#getHoverRegion(ITextViewer, int) hover region}. Note that a hover can only be enriched if its {@link IInformationControlExtension5#getInformationPresenterControlCreator()} is not null. @param mode the enrich mode, or null
field,org/eclipse/jface/text/ITextViewerExtension8/EnrichMode/AFTER_DELAY, Enrich the hover shortly after the mouse has been moved into it and stopped moving. @see ITextViewerExtension8#setHoverEnrichMode(org.eclipse.jface.text.ITextViewerExtension8.EnrichMode)
method,org/eclipse/jface/text/AbstractHoverInformationControlManager/setEnabled/boolean, {@inheritDoc} @deprecated visibility will be changed to protected
method,org/eclipse/jface/text/IInputChangedListener/inputChanged/Object, Called when a the input has changed. @param newInput the new input, or null iff the listener should not show any new input
method,org/eclipse/jface/text/IPaintPositionManager/managePosition/Position, Starts managing the given position until unmanagePosition is called. @param position the position to manage @see #unmanagePosition(Position)
method,org/eclipse/jface/text/IPaintPositionManager/unmanagePosition/Position, Stops managing the given position. If the position is not managed by this managed, this call has no effect. @param position the position that should no longer be managed
interface,org/eclipse/jface/text/IInformationControlExtension3, Extension interface for {@link org.eclipse.jface.text.IInformationControl}. Adds API which allows to get this information control's bounds and introduces the concept of persistent size and location by introducing predicates for whether the information control supports restoring of size and location. Note: An information control which implements this interface can ignore calls to {@link org.eclipse.jface.text.IInformationControl#setSizeConstraints(int, int)} or use it as hint for its very first appearance. @see org.eclipse.jface.text.IInformationControl @since 3.0
method,org/eclipse/jface/text/IInformationControlExtension3/getBounds/, Returns a rectangle describing the receiver's size and location relative to its parent (or its display if its parent is null). Note: If the receiver is already disposed then this methods must return the last valid location and size. @return the receiver's bounding rectangle
method,org/eclipse/jface/text/IInformationControlExtension3/restoresSize/, Tells whether this control allows to restore the previously used size. Note: This is not a static property - it can change during the lifetime of this control. @return true if restoring size is supported
method,org/eclipse/jface/text/IInformationControlExtension3/restoresLocation/, Tells whether this control allows to restore the previously used location. Note: This is not a static property - it can change during the lifetime of this control. @return true if restoring location is supported
method,org/eclipse/jface/text/ITextInputListener/inputDocumentAboutToBeChanged/IDocument;IDocument, Called before the input document is replaced. @param oldInput the text viewer's previous input document @param newInput the text viewer's new input document
method,org/eclipse/jface/text/ITextInputListener/inputDocumentChanged/IDocument;IDocument, Called after the input document has been replaced. @param oldInput the text viewer's previous input document @param newInput the text viewer's new input document
class,org/eclipse/jface/text/DefaultInformationControl, Default implementation of {@link org.eclipse.jface.text.IInformationControl}. Displays textual information in a {@link org.eclipse.swt.custom.StyledText} widget. Before displaying, the information set to this information control is processed by an IInformationPresenter. @since 2.0
method,org/eclipse/jface/text/DefaultInformationControl/widgetDisposed/DisposeEvent, @see org.eclipse.swt.events.DisposeListener#widgetDisposed(org.eclipse.swt.events.DisposeEvent) @since 3.0 @deprecated As of 3.2, no longer used and called
method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;boolean, Creates a default information control with the given shell as parent. An information presenter that can handle simple HTML is used to process the information to be displayed. @param parent the parent shell @param isResizeable true if the control should be resizable @since 3.4
method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;String;IInformationPresenter, Creates a default information control with the given shell as parent. The given information presenter is used to process the information to be displayed. @param parent the parent shell @param statusFieldText the text to be used in the status field or null to hide the status field @param presenter the presenter to be used, or null if no presenter should be used @since 3.4
method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;int;int;IInformationPresenter, Creates a default information control with the given shell as parent. The given information presenter is used to process the information to be displayed. The given styles are applied to the created styled text widget. @param parent the parent shell @param shellStyle the additional styles for the shell @param style the additional styles for the styled text widget @param presenter the presenter to be used @deprecated As of 3.4, replaced by simpler constructors
method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;int;int;IInformationPresenter;String, Creates a default information control with the given shell as parent. The given information presenter is used to process the information to be displayed. The given styles are applied to the created styled text widget. @param parentShell the parent shell @param shellStyle the additional styles for the shell @param style the additional styles for the styled text widget @param presenter the presenter to be used @param statusFieldText the text to be used in the status field or null to hide the status field @since 3.0 @deprecated As of 3.4, replaced by simpler constructors
method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;int;IInformationPresenter, Creates a default information control with the given shell as parent. The given information presenter is used to process the information to be displayed. @param parent the parent shell @param textStyles the additional styles for the styled text widget @param presenter the presenter to be used @deprecated As of 3.4, replaced by {@link #DefaultInformationControl(Shell, DefaultInformationControl.IInformationPresenter)}
method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;int;IInformationPresenter;String, Creates a default information control with the given shell as parent. The given information presenter is used to process the information to be displayed. @param parent the parent shell @param textStyles the additional styles for the styled text widget @param presenter the presenter to be used @param statusFieldText the text to be used in the status field or null to hide the status field @since 3.0 @deprecated As of 3.4, replaced by {@link #DefaultInformationControl(Shell, String, DefaultInformationControl.IInformationPresenter)}
method,org/eclipse/jface/text/DefaultInformationControl/IInformationPresenter/updatePresentation/Display;String;TextPresentation;int;int, Updates the given presentation of the given information and thereby may manipulate the information to be displayed. The manipulation could be the extraction of textual encoded style information etc. Returns the manipulated information. Note: The given display must only be used for measuring. @param display the display of the information control @param hoverInfo the information to be presented @param presentation the presentation to be updated @param maxWidth the maximal width in pixels @param maxHeight the maximal height in pixels @return the manipulated information @deprecated As of 3.2, replaced by {@link DefaultInformationControl.IInformationPresenterExtension#updatePresentation(Drawable, String, TextPresentation, int, int)}
method,org/eclipse/jface/text/IViewportListener/viewportChanged/int, Informs that the view port changed. The given vertical position is the new vertical scrolling offset measured in pixels. Note: This event will not be sent when the viewer is resized. @param verticalOffset the vertical offset measured in pixels
interface,org/eclipse/jface/text/IUndoManager, An undo manager is connected to at most one {@link org.eclipse.jface.text.ITextViewer}. It monitors the text viewer and keeps a history of the changes applied to the viewer. The undo manager groups those changes into user interactions which on an undo request are rolled back in one atomic change. In order to provide backward compatibility for clients of IUndoManager, extension interfaces are used as a means of evolution. The following extension interfaces exist: {@link org.eclipse.jface.text.IUndoManagerExtension} since version 3.1 introducing access to the undo context. Clients may implement this interface or use the standard implementation TextViewerUndoManager. @see TextViewerUndoManager @see IUndoManagerExtension
method,org/eclipse/jface/text/IUndoManager/disconnect/, Disconnects this undo manager from its text viewer. If this undo manager hasn't been connected before this operation has no effect.
method,org/eclipse/jface/text/IUndoManager/beginCompoundChange/, Signals the undo manager that all subsequent changes until endCompoundChange is called are to be undone in one piece.
method,org/eclipse/jface/text/IUndoManager/reset/, Resets the history of the undo manager. After that call, there aren't any undo-able or redo-able text changes.
method,org/eclipse/jface/text/IUndoManager/redoable/, Returns whether at least one text change can be repeated. A text change can be repeated only if it was executed and rolled back. @return true if at least on text change can be repeated
interface,org/eclipse/jface/text/IWidgetTokenOwner, In order to display information in a temporary window, a widget token must be acquired. The intent behind this concept is that only one temporary window should be presented at any moment in time and also to avoid overlapping temporary windows. This concept is used by the {@link org.eclipse.jface.text.ITextViewer}. In order to provide backward compatibility for clients of IWidgetTokenOwner, extension interfaces are used as a means of evolution. The following extension interfaces exist: {@link org.eclipse.jface.text.IWidgetTokenOwnerExtension} since version 3.0 introducing priorities when requesting a widget token and thus replacing the non-prioritized scheme. @see org.eclipse.jface.text.IWidgetTokenOwnerExtension @since 2.0
interface,org/eclipse/jface/text/IFindReplaceTargetExtension3, Extension interface for {@link org.eclipse.jface.text.IFindReplaceTarget}. Extends the find replace target's findAndSelect and replaceSelection methods to allow and be aware of regular expression find/replace. @since 3.0
method,org/eclipse/jface/text/IFindReplaceTargetExtension3/findAndSelect/int;String;boolean;boolean;boolean;boolean, Searches for a string starting at the given offset and using the specified search directives. If a string has been found it is selected and its start offset is returned. If regExSearch is true the findString is interpreted as a regular expression. @param offset the offset at which searching starts @param findString the specification of what should be found @param searchForward true searches forward, false backwards @param caseSensitive true performs a case sensitive search, false an insensitive search @param wholeWord if true only occurrences are reported in which the findString stands as a word by itself. 				Must not be used in combination with regExSearch. @param regExSearch if true findString represents a regular expression 				Must not be used in combination with wholeWord. @return the position of the specified string, or -1 if the string has not been found @throws java.util.regex.PatternSyntaxException if regExSearch is true and findString is an invalid regular expression
method,org/eclipse/jface/text/TextViewer/handleDispose/, Frees all resources allocated by this viewer. Internally called when the viewer's control has been disposed.
method,org/eclipse/jface/text/TextViewer/getEmptySelectionChangedEventDelay/, The delay in milliseconds before an empty selection changed event is sent by the cursor listener. Note: The return value is used to initialize the cursor listener. To return a non-constant value has no effect. The same value (500) is used in OpenStrategy.TIME. @return delay in milliseconds @see org.eclipse.jface.util.OpenStrategy @since 3.0
method,org/eclipse/jface/text/TextViewer/setAutoIndentStrategy/IAutoIndentStrategy;String, {@inheritDoc} @deprecated since 3.1, use {@link ITextViewerExtension2#prependAutoEditStrategy(IAutoEditStrategy, String)} and {@link ITextViewerExtension2#removeAutoEditStrategy(IAutoEditStrategy, String)} instead
method,org/eclipse/jface/text/TextViewer/setAutoEditStrategies/IAutoEditStrategy[];String, Sets the given edit strategy as the only strategy for the given content type. @param strategies the auto edit strategies @param contentType the content type @since 3.1
method,org/eclipse/jface/text/TextViewer/setHoverEnrichMode/EnrichMode, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/TextViewer/markChanged/int;int, Sends out a mark selection changed event to all registered listeners. @param offset the offset of the mark selection in the visible document, the offset is -1 if the mark was cleared @param length the length of the mark selection, may be negative if the caret is before the mark. @since 2.0
method,org/eclipse/jface/text/TextViewer/updateViewportListeners/int, Checks whether the view port changed and if so informs all registered listeners about the change. @param origin describes under which circumstances this method has been called. @see IViewportListener
method,org/eclipse/jface/text/TextViewer/getVisibleLinesInViewport/, Returns the number of lines that can fully fit into the viewport. This is computed by dividing the widget's client area height by the widget's line height. The result is only accurate if the widget does not use variable line heights - for that reason, clients should not use this method any longer and use the client area height of the text widget to find out how much content fits into it. @return the view port height in lines @deprecated as of 3.2
method,org/eclipse/jface/text/TextViewer/initializeDocumentInformationMapping/IDocument, Initializes the document information mapping between the given slave document and its master document. @param visibleDocument the slave document @since 2.1
method,org/eclipse/jface/text/TextViewer/customizeDocumentCommand/DocumentCommand, Hook called on receipt of a VerifyEvent. The event has been translated into a DocumentCommand which can now be manipulated by interested parties. By default, the hook forwards the command to the installed instances of IAutoEditStrategy. @param command the document command representing the verify event
method,org/eclipse/jface/text/TextViewer/ignoreAutoEditStrategies/boolean, Tells this viewer whether the registered auto edit strategies should be ignored. @param ignore true if the strategies should be ignored. @since 2.1
method,org/eclipse/jface/text/TextViewer/copyMarkedRegion/boolean, Copies/cuts the marked region. @param delete true if the region should be deleted rather than copied. @since 2.0
method,org/eclipse/jface/text/TextViewer/shift/boolean;boolean, Shifts a text block to the right or left using the specified set of prefix characters. The prefixes must start at the beginning of the line. @param useDefaultPrefixes says whether the configured default or indent prefixes should be used @param right says whether to shift to the right or the left @deprecated use shift(boolean, boolean, boolean) instead
method,org/eclipse/jface/text/TextViewer/shift/boolean;boolean;boolean, Shifts a text block to the right or left using the specified set of prefix characters. If white space should be ignored the prefix characters must not be at the beginning of the line when shifting to the left. There may be whitespace in front of the prefixes. @param useDefaultPrefixes says whether the configured default or indent prefixes should be used @param right says whether to shift to the right or the left @param ignoreWhitespace says whether whitespace in front of prefixes is allowed @since 2.0
method,org/eclipse/jface/text/TextViewer/print/StyledTextPrintOptions, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/TextViewer/print/, Brings up a print dialog and calls printContents(Printer) which performs the actual print.
method,org/eclipse/jface/text/TextViewer/findAndSelect/int;String;boolean;boolean;boolean, Adheres to the contract of {@link IFindReplaceTarget#findAndSelect(int, String, boolean, boolean, boolean)}. @param startPosition the start position @param findString the find string specification @param forwardSearch the search direction @param caseSensitive true if case sensitive, false otherwise @param wholeWord true if match must be whole words, false otherwise @return the model offset of the first match @deprecated as of 3.0 use {@link #findAndSelect(int, String, boolean, boolean, boolean, boolean)}
method,org/eclipse/jface/text/TextViewer/findAndSelect/int;String;boolean;boolean;boolean;boolean, Adheres to the contract of {@link org.eclipse.jface.text.IFindReplaceTargetExtension3#findAndSelect(int, String, boolean, boolean, boolean, boolean)}. @param startPosition the start position @param findString the find string specification @param forwardSearch the search direction @param caseSensitive true if case sensitive, false otherwise @param wholeWord true if matches must be whole words, false otherwise @param regExSearch true if findString is a regular expression, false otherwise @return the model offset of the first match
method,org/eclipse/jface/text/TextViewer/findAndSelectInRange/int;String;boolean;boolean;boolean;int;int;boolean, Adheres to the contract of {@link org.eclipse.jface.text.IFindReplaceTargetExtension3#findAndSelect(int, String, boolean, boolean, boolean, boolean)}. @param startPosition the start position @param findString the find string specification @param forwardSearch the search direction @param caseSensitive true if case sensitive, false otherwise @param wholeWord true if matches must be whole words, false otherwise @param rangeOffset the search scope offset @param rangeLength the search scope length @param regExSearch true if findString is a regular expression, false otherwise @return the model offset of the first match @since 3.0
method,org/eclipse/jface/text/TextViewer/setRedraw/boolean;int, Basically same functionality as ITextViewerExtension.setRedraw(boolean). Adds a way for subclasses to pass in a desired top index that should be used when redraw is true. If topIndex is -1, this method is identical to ITextViewerExtension.setRedraw(boolean). @see ITextViewerExtension#setRedraw(boolean) @param redraw true if redraw is enabled @param topIndex the top index @since 3.0
method,org/eclipse/jface/text/TextViewer/getClosestWidgetLineForModelLine/int, Returns the line of the widget whose corresponding line in the viewer's document is closest to the given line in the viewer's document or -1. @param modelLine the line in the viewer's document @return the line in the widget that corresponds best to the given line in the viewer's document or -1 @since 2.1
method,org/eclipse/jface/text/TextViewer/setHyperlinkPresenter/IHyperlinkPresenter, Sets the hyperlink presenter. This is only valid as long as the hyperlink manager hasn't been created yet. @param hyperlinkPresenter the hyperlink presenter @throws IllegalStateException if the hyperlink manager has already been created @since 3.1
method,org/eclipse/jface/text/TextViewer/TextViewer/, Internal use only
field,org/eclipse/jface/text/TextViewer/TRACE_ERRORS,Internal flag to indicate the debug state. 
field,org/eclipse/jface/text/TextViewer/fIgnoreAutoIndent,Should the auto indent strategies ignore the next edit operation 
field,org/eclipse/jface/text/TextViewer/fReplaceTextPresentation,Indicates whether the viewer's text presentation should be replaced are modified. 
field,org/eclipse/jface/text/TextViewer/fInformationMapping, The mapping between model and visible document. @since 2.1
class,org/eclipse/jface/text/TextViewer/WidgetCommand, Represents a replace command that brings the text viewer's text widget back in synchronization with text viewer's document after the document has been changed.
class,org/eclipse/jface/text/TextViewer/TextHoverKey, Value object used as key in the text hover configuration table. It is modifiable only inside this compilation unit to allow the reuse of created objects for efficiency reasons @since 2.1
method,org/eclipse/jface/text/AbstractInformationControl/restoresLocation/, {@inheritDoc} The default implementation always returns false. @see org.eclipse.jface.text.IInformationControlExtension3#restoresLocation()
method,org/eclipse/jface/text/AbstractInformationControl/restoresSize/, {@inheritDoc} The default implementation always returns false. @see org.eclipse.jface.text.IInformationControlExtension3#restoresSize()
method,org/eclipse/jface/text/AbstractInformationControl/isFocusControl/, {@inheritDoc} This method is not intended to be overridden by subclasses.
method,org/eclipse/jface/text/AbstractInformationControl/addFocusListener/FocusListener, {@inheritDoc} This method is not intended to be overridden by subclasses.
method,org/eclipse/jface/text/AbstractInformationControl/removeFocusListener/FocusListener, {@inheritDoc} This method is not intended to be overridden by subclasses.
method,org/eclipse/jface/text/AbstractInformationControl/setStatusText/String, Sets the text of the status field. The default implementation currently only updates the status field when the popup shell is not visible. The status field can currently only be shown if the information control has been created with a non-null status field text. @param statusFieldText the text to be used in the optional status field or null if the status field should be hidden @see org.eclipse.jface.text.IInformationControlExtension4#setStatusText(java.lang.String)
method,org/eclipse/jface/text/ITextViewerExtension2/removeTextHovers/String, Removes all text hovers for the given content type independent from their state mask. Note: To remove a hover for a given content type and state mask use {@link #setTextHover(ITextHover, String, int)} with null as parameter for the text hover. @param contentType the type for which all text hovers are to be unregistered
method,org/eclipse/jface/text/ITextViewerExtension2/prependAutoEditStrategy/IAutoEditStrategy;String, Prepends the given auto edit strategy to the existing list of strategies for the specified content type. The strategies are called in the order in which they appear in the list of strategies. @param strategy the auto edit strategy @param contentType the content type
method,org/eclipse/jface/text/ITextViewerExtension2/removePainter/IPainter, Removes the given painter from this viewer. If the painter has not been added to this viewer, this call is without effect. @param painter the painter to be removed
interface,org/eclipse/jface/text/IInformationControlExtension, Extension interface {@link org.eclipse.jface.text.IInformationControl}. As it is the responsibility of the implementer of {@link org.eclipse.jface.text.IInformationControl} and {@link org.eclipse.jface.text.IInformationControlExtension2} to specify the concrete nature of the information control's input, only the implementer can know whether it has something to show or not. @since 2.0
method,org/eclipse/jface/text/IFindReplaceTargetExtension/beginSession/, Indicates that a session with the target begins. All calls except beginSession() and endSession() to IFindReplaceTarget and IFindReplaceTargetExtension must be embedded within calls to beginSession() and endSession(). @see #endSession()
method,org/eclipse/jface/text/IFindReplaceTargetExtension/getScope/, Returns the find scope of the target, null for global scope. @return returns the find scope of the target, may be null
method,org/eclipse/jface/text/IFindReplaceTargetExtension/setScope/IRegion, Sets the find scope of the target to operate on. null indicates that the global scope should be used. @param scope the find scope of the target, may be null
method,org/eclipse/jface/text/IFindReplaceTargetExtension/setReplaceAllMode/boolean, Sets the target's replace-all mode. @param replaceAll true if this target should switch into replace-all mode, 	false if it should leave the replace-all state
method,org/eclipse/jface/text/IInformationControlExtension4/setStatusText/String, Sets the text of the status field. The implementor can specify whether the new text affects an already visible information control. @param statusFieldText the text to be used in the optional status field or null if the status field should be hidden @since 3.2
class,org/eclipse/jface/text/TextEvent, This event is sent to implementers of {@link org.eclipse.jface.text.ITextListener}. It represents a change applied to text viewer. The change is specified as a replace command using offset, length, inserted text, and replaced text. The text viewer issues a text event after the viewer has been changed either in response to a change of the viewer's document or when the viewer's visual content has been changed. In the first case, the text event also carries the original document event. Depending on the viewer's presentation mode, the text event coordinates are different from the document event's coordinates. An empty text event usually indicates a change of the viewer's redraw state. Clients other than text viewer's don't create instances of this class. @see org.eclipse.jface.text.ITextListener @see org.eclipse.jface.text.ITextViewer @see org.eclipse.jface.text.DocumentEvent
method,org/eclipse/jface/text/TextEvent/getDocumentEvent/, Returns the corresponding document event that caused the viewer change @return the corresponding document event, null if a visual change only
interface,org/eclipse/jface/text/ITextSelection, This interface represents a textual selection. A text selection is a range of characters. Although a text selection is a snapshot taken at a particular point in time, it must not copy the line information and the selected text from the selection provider. If, for example, the selection provider is a text viewer ( {@link org.eclipse.jface.text.ITextViewer}), and a text selection is created for the range [5, 10], the line formation for the 5th character must not be determined and remembered at the point of creation. It can rather be determined at the point, when getStartLine is called. If the source viewer range [0, 15] has been changed in the meantime between the creation of the text selection object and the invocation of getStartLine, the returned line number may differ from the line number of the 5th character at the point of creation of the text selection object. The contract of this interface is that weak in order to allow for efficient implementations. Clients may implement this interface or use the default implementation provided by {@link org.eclipse.jface.text.TextSelection}. @see org.eclipse.jface.text.TextSelection
method,org/eclipse/jface/text/ITextSelection/getStartLine/, Returns number of the line containing the offset of the selected text. If the underlying text has been changed between the creation of this selection object and the call of this method, the value returned might differ from what it would have been at the point of creation. @return the start line of this selection or -1 if there is no valid line information
method,org/eclipse/jface/text/ITextSelection/getEndLine/, Returns the number of the line containing the last character of the selected text. If the underlying text has been changed between the creation of this selection object and the call of this method, the value returned might differ from what it would have been at the point of creation. @return the end line of this selection or -1 if there is no valid line information
method,org/eclipse/jface/text/ITextSelection/getText/, Returns the selected text. If the underlying text has been changed between the creation of this selection object and the call of this method, the value returned might differ from what it would have been at the point of creation. @return the selected text or null if there is no valid text information
method,org/eclipse/jface/text/WhitespaceCharacterPainter/WhitespaceCharacterPainter/ITextViewer, Creates a new painter for the given text viewer. @param textViewer the text viewer the painter should be attached to
class,org/eclipse/jface/text/TextPresentation, Describes the presentation styles for a section of an indexed text such as a document or string. A text presentation defines a default style for the whole section and in addition style differences for individual subsections. Text presentations can be narrowed down to a particular result window. All methods are result window aware, i.e. ranges outside the result window are always ignored. All iterators provided by a text presentation assume that they enumerate non overlapping, consecutive ranges inside the default range. Thus, all these iterators do not include the default range. The default style range must be explicitly asked for using getDefaultStyleRange.
method,org/eclipse/jface/text/TextPresentation/setResultWindow/IRegion, Sets the result window for this presentation. When dealing with this presentation all ranges which are outside the result window are ignored. For example, the size of the presentation is 0 when there is no range inside the window even if there are ranges outside the window. All methods are aware of the result window. @param resultWindow the result window
method,org/eclipse/jface/text/TextPresentation/addStyleRange/StyleRange, Add the given range to the presentation. The range must be a subrange of the presentation's default range. @param range the range to be added
method,org/eclipse/jface/text/TextPresentation/mergeStyleRanges/StyleRange[], Merges the given ranges into this presentation. Each range must be a subrange of the presentation's default range. The ranges must be ordered by increasing offset and must not overlap (but may be adjacent). @param ranges the ranges to be added @since 3.0
interface,org/eclipse/jface/text/ITextViewerExtension, Extension interface for {@link org.eclipse.jface.text.ITextViewer}. This extension interface replaces the event consumer mechanism ( {@link org.eclipse.jface.text.ITextViewer#setEventConsumer(IEventConsumer)}) with a set of methods that allow to manage a sequence of {@link org.eclipse.swt.custom.VerifyKeyListener}objects. It also adds access to the control of this viewer marked region support as in emacs control of the viewer's redraw behavior by introducing setRedraw(boolean) access to the viewer's rewrite target. A rewrite target ({@link org.eclipse.jface.text.IRewriteTarget}) represents an facade offering the necessary methods to manipulate a document that is the input document of a text viewer. @since 2.0
method,org/eclipse/jface/text/ITextViewerExtension/prependVerifyKeyListener/VerifyKeyListener, Inserts the verify key listener at the beginning of the viewer's list of verify key listeners. If the listener is already registered with the viewer this call moves the listener to the beginning of the list. @param listener the listener to be inserted
method,org/eclipse/jface/text/ITextViewerExtension/appendVerifyKeyListener/VerifyKeyListener, Appends a verify key listener to the viewer's list of verify key listeners. If the listener is already registered with the viewer this call moves the listener to the end of the list. @param listener the listener to be added
method,org/eclipse/jface/text/ITextViewerExtension/removeVerifyKeyListener/VerifyKeyListener, Removes the verify key listener from the viewer's list of verify key listeners. If the listener is not registered with this viewer, this call has no effect. @param listener the listener to be removed
method,org/eclipse/jface/text/ITextViewerExtension/setRedraw/boolean, Enables/disables the redrawing of this text viewer. This temporarily disconnects the viewer from its underlying {@link org.eclipse.swt.custom.StyledText}widget. While being disconnected only the viewer's selection may be changed using setSelectedRange. Any direct manipulation of the widget as well as calls to methods that change the viewer's presentation state (such as enabling the segmented view) are not allowed. When redrawing is disabled the viewer does not send out any selection or view port change notification. When redrawing is enabled again, a selection change notification is sent out for the selected range and this range is revealed causing a view port changed notification. @param redraw true to enable redrawing, false otherwise
method,org/eclipse/jface/text/IWidgetTokenKeeperExtension/setFocus/IWidgetTokenOwner, Requests the receiver to give focus to its popup shell, hover, or similar. There is no assumption made whether the receiver actually succeeded in taking the focus. The return value gives a hint whether the receiver tried to take focus. @param owner the token owner @return true if the receiver tried to take focus, false if it did not.
method,org/eclipse/jface/text/ITextViewerExtension5/exposeModelRange/IRegion, Exposes the given model range. Returns whether this call caused a change of the set of exposed model ranges. @param modelRange the model range to be exposed @return true if the set of exposed model ranges changed, false otherwise
interface,org/eclipse/jface/text/IDocumentAdapterExtension, Extension interface for {@link org.eclipse.jface.text.IDocumentAdapter}. Introduces the concepts of batching a series of document changes into a single styled text content change notification. Batching start when a client calls stopForwardingDocumentChanges. After that call this document adapter does not send out styled text content change notifications until resumeForwardingDocumentChanges is called. On resumeForwardingDocumentChanges, it sends out one styled text content change notification that covers all changes that have been applied to the document since calling stopForwardingDocumentChanges. @since 2.0
method,org/eclipse/jface/text/IDocumentAdapterExtension/resumeForwardingDocumentChanges/, Resumes forwarding document changes to the styled text. Also forces the styled text to catch up with all the changes that have been applied since stopForwardingDocumentChanges has been called.
class,org/eclipse/jface/text/TextSelection, Standard implementation of {@link org.eclipse.jface.text.ITextSelection}. Takes advantage of the weak contract of correctness of its interface. If generated from a selection provider, it only remembers its offset and length and computes the remaining information on request.
method,org/eclipse/jface/text/TextSelection/TextSelection/int;int, Creates a text selection for the given range. This selection object describes generically a text range and is intended to be an argument for the setSelection method of selection providers. @param offset the offset of the range, must not be negative @param length the length of the range, must not be negative
method,org/eclipse/jface/text/TextSelection/TextSelection/IDocument;int;int, Creates a text selection for the given range of the given document. This selection object is created by selection providers in responds getSelection. @param document the document whose text range is selected in a viewer @param offset the offset of the selected range, must not be negative @param length the length of the selected range, must not be negative
class,org/eclipse/jface/text/AbstractInformationControlManager, Manages the life cycle, visibility, layout, and contents of an {@link org.eclipse.jface.text.IInformationControl}. This manager can be installed on and removed from a control, referred to as the subject control, i.e. the one from which the subject of the information to be shown is retrieved. Also a manager can be enabled or disabled. An installed and enabled manager can be forced to show information in its information control using showInformation. An information control manager uses an IInformationControlCloser to define the behavior when a presented information control must be closed. The disposal of the subject and the information control are internally handled by the information control manager and are not the responsibility of the information control closer. @see org.eclipse.jface.text.IInformationControl @since 2.0
method,org/eclipse/jface/text/AbstractInformationControlManager/computeInformation/, Computes the information to be displayed and the area in which the computed information is valid. Implementation of this method must finish their computation by setting the computation results using setInformation.
method,org/eclipse/jface/text/AbstractInformationControlManager/setInformation/String;Rectangle, Sets the parameters of the information to be displayed. These are the information itself and the area for which the given information is valid. This so called subject area is a graphical region of the information control's subject control. This method calls presentInformation() to trigger the presentation of the computed information. @param information the information, or null if none is available @param subjectArea the subject area, or null if none is available
method,org/eclipse/jface/text/AbstractInformationControlManager/setInformation/Object;Rectangle, Sets the parameters of the information to be displayed. These are the information itself and the area for which the given information is valid. This so called subject area is a graphical region of the information control's subject control. This method calls presentInformation() to trigger the presentation of the computed information. @param information the information, or null if none is available @param subjectArea the subject area, or null if none is available @since 2.1
method,org/eclipse/jface/text/AbstractInformationControlManager/setFallbackAnchors/Anchor[], Sets the anchors fallback sequence used to layout the information control if the original anchor can not be used because the information control would not fit in the display client area. The fallback anchor for a given anchor is the one that comes directly after the given anchor or is the first one in the sequence if the given anchor is the last one in the sequence. Note: This sequence is ignored if the original anchor is not contained in this list. @param fallbackAnchors the array with the anchor fallback sequence @see #setAnchor(AbstractInformationControlManager.Anchor)
method,org/eclipse/jface/text/AbstractInformationControlManager/setCustomInformationControlCreator/IInformationControlCreator, Sets the temporary custom control creator, overriding this manager's default information control creator. @param informationControlCreator the creator, possibly null @since 3.0
method,org/eclipse/jface/text/AbstractInformationControlManager/takesFocusWhenVisible/boolean, Tells the manager whether it should set the focus to the information control when made visible. @param takesFocus true if information control should take focus when made visible
method,org/eclipse/jface/text/AbstractInformationControlManager/updateLocation/Point;Point;Rectangle;Anchor, Checks whether a control of the given size at the given location would be completely visible in the given display area when laid out by using the given anchor. If not, this method tries to shift the control orthogonal to the direction given by the anchor to make it visible. If possible it updates the location. This method returns true if the potentially updated position results in a completely visible control, or false otherwise. @param location the location of the control @param size the size of the control @param displayArea the display area in which the control should be visible @param anchor anchor for lying out the control @return trueif the updated location is useful
method,org/eclipse/jface/text/AbstractInformationControlManager/showInformation/, Computes information to be displayed as well as the subject area and initiates that this information is presented in the information control. This happens only if this controller is enabled.
method,org/eclipse/jface/text/AbstractInformationControlManager/showInformationControl/Rectangle, Shows the information control and starts the information control closer. This method may not be called by clients. @param subjectArea the information area
method,org/eclipse/jface/text/AbstractInformationControlManager/dispose/, Disposes this manager and if necessary all dependent parts such as the information control. For symmetry it first disables this manager.
interface,org/eclipse/jface/text/AbstractInformationControlManager/IInformationControlCloser, Interface of an information control closer. An information control closer monitors its information control and its subject control and closes the information control if necessary. Clients must implement this interface in order to equip an information control manager accordingly.
method,org/eclipse/jface/text/MarkSelection/MarkSelection/IDocument;int;int, Creates a MarkSelection. @param document the marked document @param offset the offset of the mark @param length the length of the mark, may be negative if caret before offset
interface,org/eclipse/jface/text/IBlockTextSelection, A rectangular selection in a text document. A column selection spans the visually identical range of columns on a contiguous range of lines. The character count of the same visually perceived column may not be equal for two different lines, therefore computing the set of disjunct character ranges covered by a column selection is influenced by the used font and tabulator width. Using column selections with proportional fonts may render unexpected results. Virtual Spaces The {@linkplain #getStartColumn() start column} and {@linkplain #getEndColumn() end column} may refer to &quot;virtual offsets&quot; in the white space beyond the end of the line. Such an offset can be realized by inserting a space for each missing character. The {@linkplain ITextSelection#getOffset() offset} and {@linkplain ITextSelection#getLength() length} of an {@link IBlockTextSelection} refer to the smallest non-virtual range that comprises the entire rectangular selection. Clients may implement this interface or use the default implementation provided by {@link org.eclipse.jface.text.BlockTextSelection}. @see org.eclipse.jface.text.BlockTextSelection @since 3.5
method,org/eclipse/jface/text/IBlockTextSelection/getStartColumn/, Returns the column on the {@linkplain ITextSelection#getStartLine() start line} at which the selection starts. The returned column is a character count measured from the start of the line. It may be larger than the length of the line, in which case it is a virtual offset. @return the start column measured from the line start
method,org/eclipse/jface/text/IBlockTextSelection/getEndColumn/, Returns the exclusive column on the {@linkplain ITextSelection#getEndLine() end line} at which the selection ends. The returned column is a character count measured from the start of the line. It may be larger than the length of the line, in which case it is a virtual offset. @return the end column measured from the line start
method,org/eclipse/jface/text/IBlockTextSelection/getText/, {@inheritDoc} The returned text does not necessarily correspond to the total {@linkplain ITextSelection#getOffset() offset} and {@link ITextSelection#getLength() length}, as only the text within the selected columns is returned. Any virtual spaces beyond the end of the selected lines are materialized and returned as text. @see org.eclipse.jface.text.ITextSelection#getText()
method,org/eclipse/jface/text/DefaultTextDoubleClickStrategy/findExtendedDoubleClickSelection/IDocument;int, Tries to find a suitable double click selection for the given offset. Note: This method must return null if it simply selects the word at the given offset. @param document the document @param offset the offset @return the selection or null if none to indicate simple word selection @since 3.5
interface,org/eclipse/jface/text/ITextDoubleClickStrategy, A text double click strategy defines the reaction of a text viewer to mouse double click events. The strategy must be installed on an {@link org.eclipse.jface.text.ITextViewer}. Clients may implement this interface or use the standard implementation DefaultTextDoubleClickStrategy. @see org.eclipse.jface.text.ITextViewer @see org.eclipse.swt.events.MouseListener#mouseDoubleClick(org.eclipse.swt.events.MouseEvent)
method,org/eclipse/jface/text/DefaultTextHover/getHoverInfo/ITextViewer;IRegion, {@inheritDoc} @deprecated As of 3.4, replaced by {@link ITextHoverExtension2#getHoverInfo2(ITextViewer, IRegion)}
method,org/eclipse/jface/text/DefaultTextHover/isIncluded/Annotation, Tells whether the annotation should be included in the computation. @param annotation the annotation to test @return true if the annotation is included in the computation
class,org/eclipse/jface/text/PropagatingFontFieldEditor, This font field editor implements chaining between a source preference store and a target preference store. Any time the source preference store changes, the change is propagated to the target store. Propagation means that the actual value stored in the source store is set as default value in the target store. If the target store does not contain a value other than the default value, the new default value is immediately effective. @see FontFieldEditor @since 2.0 @deprecated since 3.0 not longer in use, no longer supported
method,org/eclipse/jface/text/PropagatingFontFieldEditor/PropagatingFontFieldEditor/String;String;Composite;String, Creates a new font field editor with the given parameters. @param name the editor's name @param labelText the text shown as editor description @param parent the editor's parent widget @param defaultFontLabel the label shown in the editor value field when the default value should be taken
method,org/eclipse/jface/text/JFaceTextUtil/getBottomIndex/StyledText, Returns the last fully visible line of the widget. The exact semantics of last fully visible line are: the last line of which the last pixel is visible, if any otherwise, the only line that is partially visible @param widget the widget @return the last fully visible line
method,org/eclipse/jface/text/JFaceTextUtil/getPartialTopIndex/StyledText, Returns the index of the first (possibly only partially) visible line of the widget @param widget the widget @return the index of the first line of which a pixel is visible
method,org/eclipse/jface/text/JFaceTextUtil/getPartialBottomIndex/StyledText, Returns the index of the last (possibly only partially) visible line of the widget @param widget the text widget @return the index of the last line of which a pixel is visible
method,org/eclipse/jface/text/JFaceTextUtil/computeArea/IRegion;ITextViewer, Determines the graphical area covered by the given text region in the given viewer. @param region the region whose graphical extend must be computed @param textViewer the text viewer containing the region @return the graphical extend of the given region in the given viewer @since 3.4
method,org/eclipse/jface/text/JFaceTextUtil/isEmpty/ITextViewer;ITextSelection, Returns true if the text covered by selection does not contain any characters in the given viewer. Note the difference to {@link ITextSelection#isEmpty()}, which returns true only for invalid selections. @param viewer the viewer @param selection the selection @return true if selection does not contain any text, false otherwise @throws BadLocationException if accessing the document failed @since 3.5
interface,org/eclipse/jface/text/ITextViewerExtension4, Extension interface for {@link org.eclipse.jface.text.ITextViewer}. Introduces the concept of text presentation listeners and improves focus handling among widget token keepers. A {@link org.eclipse.jface.text.ITextPresentationListener}is a listener that is informed by the viewer that a text presentation is about to be applied. During this callback the listener is allowed to modify the presentation. Text presentation listeners are thus a mean to participate in the process of text presentation creation. @since 3.0
method,org/eclipse/jface/text/ITextViewerExtension4/addTextPresentationListener/ITextPresentationListener, Adds the given text presentation listener to this text viewer. This call has no effect if the listener is already registered with this text viewer. @param listener the text presentation listener
method,org/eclipse/jface/text/ITextViewerExtension4/removeTextPresentationListener/ITextPresentationListener, Removes the given text presentation listener from this text viewer. This call has no effect if the listener is not registered with this text viewer. @param listener the text presentation listener
method,org/eclipse/jface/text/MarginPainter/setMarginRulerColumn/int, Sets the column after which to draw the margin line. @param width the column
method,org/eclipse/jface/text/MarginPainter/initialize/, Initializes this painter, by flushing and recomputing all caches and causing the widget to be redrawn. Must be called explicitly when font of text widget changes.
method,org/eclipse/jface/text/IInformationControl/setSizeConstraints/int;int, Sets the information control's size constraints. A constraint value of {@link SWT#DEFAULT} indicates no constraint. This method must be called before {@link #computeSizeHint()} is called. Note: An information control which implements {@link IInformationControlExtension3} may ignore this method or use it as hint for its very first appearance. @param maxWidth the maximal width of the control to present the information, or {@link SWT#DEFAULT} for not constraint @param maxHeight the maximal height of the control to present the information, or {@link SWT#DEFAULT} for not constraint
method,org/eclipse/jface/text/IInformationControl/setVisible/boolean, Controls the visibility of this information control. Note: The information control must not grab focus when made visible. @param visible true if the control should be visible
method,org/eclipse/jface/text/IInformationControl/removeDisposeListener/DisposeListener, Removes the given listeners from the list of dispose listeners. If the listener is not registered this call has no effect. @param listener the listener to be removed
method,org/eclipse/jface/text/IInformationControl/removeFocusListener/FocusListener, Removes the given listeners from the list of focus listeners. If the listener is not registered this call has no affect. @param listener the listener to be removed
method,org/eclipse/jface/text/IFindReplaceTarget/findAndSelect/int;String;boolean;boolean;boolean, Searches for a string starting at the given widget offset and using the specified search directives. If a string has been found it is selected and its start offset is returned. Replaced by {@link IFindReplaceTargetExtension3#findAndSelect(int, String, boolean, boolean, boolean, boolean)}. @param widgetOffset the widget offset at which searching starts @param findString the string which should be found @param searchForward true searches forward, false backwards @param caseSensitive true performs a case sensitive search, false an insensitive search @param wholeWord if true only occurrences are reported in which the findString stands as a word by itself @return the position of the specified string, or -1 if the string has not been found
method,org/eclipse/jface/text/ITextViewerExtension7/setTabsToSpacesConverter/IAutoEditStrategy, Sets an auto edit strategy can converts tabs to spaces. @param converter the converter or null if none should be used
method,org/eclipse/jface/text/PaintManager/dispose/, Disposes this paint manager. The paint manager uninstalls itself and clears all registered painters. This method is also called when the last painter is removed from the list of managed painters.
class,org/eclipse/jface/text/TabsToSpacesConverter, Auto edit strategy that converts tabs into spaces. Clients usually instantiate and configure this class but can also extend it in their own subclass. @since 3.3
method,org/eclipse/jface/text/DocumentCommand/addCommand/int;int;String;IDocumentListener, Adds an additional replace command. The added replace command must not overlap with existing ones. If the document command owner is not null, it will not get document change notifications for the particular command. @param commandOffset the offset of the region to replace @param commandLength the length of the region to replace @param commandText the text to replace with, may be null @param commandOwner the command owner, may be null @throws BadLocationException if the added command intersects with an existing one @since 2.1
field,org/eclipse/jface/text/DocumentCommand/doit,Must the command be updated 
field,org/eclipse/jface/text/DocumentCommand/caretOffset, The caret offset with respect to the document before the document command is executed. @since 2.1
field,org/eclipse/jface/text/DocumentCommand/shiftsCaret, Indicates whether the caret should be shifted by this command. @since 3.0
method,org/eclipse/jface/text/ITextHover/getHoverInfo/ITextViewer;IRegion, Returns the information which should be presented when a hover popup is shown for the specified hover region. The hover region has the same semantics as the region returned by getHoverRegion. If the returned information is null or empty no hover popup will be shown. @param textViewer the viewer on which the hover popup should be shown @param hoverRegion the text range in the viewer which is used to determine 		the hover display information @return the hover popup display information, or null if none available @deprecated As of 3.4, replaced by {@link ITextHoverExtension2#getHoverInfo2(ITextViewer, IRegion)}
method,org/eclipse/jface/text/ITextHover/getHoverRegion/ITextViewer;int, Returns the text region which should serve as the source of information to compute the hover popup display information. The popup has been requested for the given offset. For example, if hover information can be provided on a per method basis in a source viewer, the offset should be used to find the enclosing method and the source range of the method should be returned. @param textViewer the viewer on which the hover popup should be shown @param offset the offset for which the hover request has been issued @return the hover region used to compute the hover display information
method,org/eclipse/jface/text/IEditingSupport/isOriginator/DocumentEvent;IRegion, Returns true if the receiver is the originator of a DocumentEvent and if that event is related to subjectRegion. The relationship between event and subjectRegion is not always obvious. Often, the main editing area being monitored by the caller will be at subjectRegion, when the receiver modifies the underlying document at a different location without wanting to interrupt the normal typing flow of the user. An example would be an editor that automatically increments the section number of the next section when the user typed in a new section title. In this example, the subject region is the current typing location, while the increment results in a document change further down in the text. @param event the DocumentEvent in question @param subjectRegion the region that the caller is interested in @return true if event was triggered by the receiver and relates to subjectRegion
method,org/eclipse/jface/text/ITextPresentationListener/applyTextPresentation/TextPresentation, This method is called when a text presentation is about to be applied to the text viewer. The receiver is allowed to change the text presentation during that call. @param textPresentation the current text presentation
method,org/eclipse/jface/text/ITextViewer/getTextWidget/, Returns this viewer's SWT control, null if the control is disposed. Calling API directly on the widget can interfere with features provided by a text viewer. Clients who call API directly on the widget are responsible to resolve such conflicts on their side. @return the SWT control or null
method,org/eclipse/jface/text/ITextViewer/activatePlugins/, Activates the installed plug-ins. If the plug-ins are already activated this call has no effect.
method,org/eclipse/jface/text/ITextViewer/addViewportListener/IViewportListener, Adds the given view port listener to this viewer. If the listener is already registered with this viewer, this call has no effect. @param listener the listener to be added
method,org/eclipse/jface/text/ITextViewer/removeViewportListener/IViewportListener, Removes the given listener from this viewer's set of view port listeners. If the listener is not registered with this viewer, this call has no effect. @param listener the listener to be removed
method,org/eclipse/jface/text/ITextViewer/addTextListener/ITextListener, Adds a text listener to this viewer. If the listener is already registered with this viewer, this call has no effect. @param listener the listener to be added
method,org/eclipse/jface/text/ITextViewer/removeTextListener/ITextListener, Removes the given listener from this viewer's set of text listeners. If the listener is not registered with this viewer, this call has no effect. @param listener the listener to be removed
method,org/eclipse/jface/text/ITextViewer/addTextInputListener/ITextInputListener, Adds a text input listener to this viewer. If the listener is already registered with this viewer, this call has no effect. @param listener the listener to be added
method,org/eclipse/jface/text/ITextViewer/removeTextInputListener/ITextInputListener, Removes the given listener from this viewer's set of text input listeners. If the listener is not registered with this viewer, this call has no effect. @param listener the listener to be removed
method,org/eclipse/jface/text/ITextViewer/getVisibleRegion/, Returns the current visible region of this viewer's document. The result may differ from the argument passed to setVisibleRegion if the document has been modified since then. The visible region is supposed to be a consecutive region in viewer's input document and every character inside that region is supposed to visible in the viewer's widget. Viewers implementing {@link ITextViewerExtension5} may be forced to change the fractions of the input document that are shown, in order to fulfill this contract. @return this viewer's current visible region
method,org/eclipse/jface/text/ITextViewer/overlapsWithVisibleRegion/int;int, Returns whether a given range overlaps with the visible region of this viewer's document. Viewers implementing {@link ITextViewerExtension5}may be forced to change the fractions of the input document that are shown in order to fulfill this request. This is because the overlap is supposed to be without gaps. @param offset the offset @param length the length @return true if the specified range overlaps with the visible region
method,org/eclipse/jface/text/ITextViewer/changeTextPresentation/TextPresentation;boolean, Applies the color information encoded in the given text presentation. controlRedraw tells this viewer whether it should take care of redraw management or not. If, e.g., this call is one in a sequence of multiple presentation calls, it is more appropriate to explicitly control redrawing at the beginning and the end of the sequence. @param presentation the presentation to be applied to this viewer @param controlRedraw indicates whether this viewer should manage redraws
method,org/eclipse/jface/text/ITextViewer/setTextColor/Color;int;int;boolean, Applies the given color as text foreground color to the specified section of this viewer. controlRedraw tells this viewer whether it should take care of redraw management or not. @param color the color to be applied @param offset the offset of the range to be changed @param length the length of the range to be changed @param controlRedraw indicates whether this viewer should manage redraws
method,org/eclipse/jface/text/ITextViewer/getSelectionProvider/, Returns a selection provider dedicated to this viewer. Subsequent calls to this method return always the same selection provider. @return this viewer's selection provider
method,org/eclipse/jface/text/ITextViewer/setTopIndex/int, Scrolls the widget so that the given index is the line with the smallest line number of all visible lines. @param index the line which should become the top most line
method,org/eclipse/jface/text/IEventConsumer/processEvent/VerifyEvent, Processes the given event and marks it as done if it should be ignored by subsequent receivers. @param event the verify event which will be investigated
method,org/eclipse/jface/text/revisions/Revision/addRange/ILineRange, Adds a line range to this revision. The range must be non-empty and have a legal start line (not -1). @param range a line range that was changed with this revision @throws IndexOutOfBoundsException if the line range is empty or has a negative start line
method,org/eclipse/jface/text/revisions/Revision/getRegions/, Returns the contained {@link RevisionRange}s adapted to the current diff state. The returned information is only valid at the moment it is returned, and may change as the annotated document is modified. @return an unmodifiable view of the contained ranges (element type: {@link RevisionRange})
method,org/eclipse/jface/text/revisions/Revision/getColor/, Returns the author color for this revision. This color can be used to visually distinguish one revision from another, for example as background color. Revisions from the same author must return the same color and revisions from different authors must return distinct colors. @return the RGB color for this revision's author
method,org/eclipse/jface/text/revisions/Revision/getId/, Returns the unique (within the document) id of this revision. This may be the version string or a different identifier. @return the id of this revision
class,org/eclipse/jface/text/revisions/RevisionInformation, Encapsulates revision information for one line-based document. Clients may instantiate. @since 3.2 @see Revision
method,org/eclipse/jface/text/revisions/RevisionInformation/getRanges/, Returns the line ranges of this revision information. The returned information is only valid at the moment it is returned, and may change as the annotated document is modified. See {@link IRevisionListener} for a way to be informed when the revision information changes. The returned list is sorted by document offset. @return an unmodifiable view of the line ranges (element type: {@link RevisionRange}) @see IRevisionListener @since 3.3
method,org/eclipse/jface/text/revisions/RevisionInformation/getInformationPresenterControlCreator/, {@inheritDoc} @return the information control creator or null @since 3.3
method,org/eclipse/jface/text/revisions/RevisionInformation/setHoverControlCreator/IInformationControlCreator, Sets the hover control creator. Note: The created information control must be able to display the object returned by the concrete implementation of {@link Revision#getHoverInfo()}. @param creator the control creator @since 3.3
method,org/eclipse/jface/text/reconciler/IReconciler/install/ITextViewer, Installs the reconciler on the given text viewer. After this method has been finished, the reconciler is operational, i.e., it works without requesting further client actions until uninstall is called. @param textViewer the viewer on which the reconciler is installed
interface,org/eclipse/jface/text/reconciler/IReconcilingStrategyExtension, Extends {@link org.eclipse.jface.text.reconciler.IReconcilingStrategy} with the following functions: 	usage of a progress monitor 	initial reconciling step: if a reconciler runs as periodic activity in the background, this 		methods offers the reconciler a chance for initializing its strategies and achieving a 		reconciled state before the periodic activity starts. @since 2.0
method,org/eclipse/jface/text/reconciler/IReconcilingStrategyExtension/initialReconcile/, Called only once in the life time of this reconciling strategy.
method,org/eclipse/jface/text/reconciler/IReconcilingStrategy/reconcile/DirtyRegion;IRegion, Activates incremental reconciling of the specified dirty region. As a dirty region might span multiple content types, the segment of the dirty region which should be investigated is also provided to this reconciling strategy. The given regions refer to the document passed into the most recent call of {@link #setDocument(IDocument)}. @param dirtyRegion the document region which has been changed @param subRegion the sub region in the dirty region which should be reconciled
method,org/eclipse/jface/text/reconciler/IReconcilingStrategy/reconcile/IRegion, Activates non-incremental reconciling. The reconciling strategy is just told that there are changes and that it should reconcile the given partition of the document most recently passed into {@link #setDocument(IDocument)}. @param partition the document partition to be reconciled
method,org/eclipse/jface/text/reconciler/AbstractReconciler/setDelay/int, Tells the reconciler how long it should wait for further text changes before activating the appropriate reconciling strategies. @param delay the duration in milliseconds of a change collection period.
method,org/eclipse/jface/text/reconciler/AbstractReconciler/setIsAllowedToModifyDocument/boolean, Tells the reconciler whether it is allowed to change the document inside its reconciler thread. If this is set to false an {@link UnsupportedOperationException} will be thrown when this restriction will be violated. @param isAllowedToModify indicates whether this reconciler is allowed to modify the document @since 3.2
method,org/eclipse/jface/text/reconciler/AbstractReconciler/initialProcess/, This method is called on startup of the background activity. It is called only once during the life time of the reconciler. Clients may reimplement this method.
method,org/eclipse/jface/text/reconciler/AbstractReconciler/forceReconciling/, Forces the reconciler to reconcile the structure of the whole document. Clients may extend this method.
method,org/eclipse/jface/text/reconciler/AbstractReconciler/startReconciling/, Starts the reconciler to reconcile the queued dirty-regions. Clients may extend this method.
method,org/eclipse/jface/text/reconciler/AbstractReconciler/reconcilerReset/, Hook that is called after the reconciler thread has been reset.
method,org/eclipse/jface/text/reconciler/AbstractReconciler/isRunningInReconcilerThread/, Tells whether the code is running in this reconciler's background thread. @return true if running in this reconciler's background thread @since 3.4
interface,org/eclipse/jface/text/reconciler/IReconcilerExtension, Extends {@link org.eclipse.jface.text.reconciler.IReconciler} with the ability to be aware of documents with multiple partitionings. @since 3.0
method,org/eclipse/jface/text/reconciler/IReconcileStep/reconcile/DirtyRegion;IRegion, Activates incremental reconciling of the specified dirty region. As a dirty region might span multiple content types, the segment of the dirty region which should be investigated is also provided to this reconciling strategy. The given regions refer to the document passed into the most recent call of {@link IReconcilingStrategy#setDocument(org.eclipse.jface.text.IDocument)}. @param dirtyRegion the document region which has been changed @param subRegion the sub region in the dirty region which should be reconciled @return an array with reconcile results
method,org/eclipse/jface/text/reconciler/IReconcileStep/reconcile/IRegion, Activates non-incremental reconciling. The reconciling strategy is just told that there are changes and that it should reconcile the given partition of the document most recently passed into {@link IReconcilingStrategy#setDocument(org.eclipse.jface.text.IDocument)}. @param partition the document partition to be reconciled @return an array with reconcile results
method,org/eclipse/jface/text/reconciler/AbstractReconcileStep/reconcileModel/DirtyRegion;IRegion, Reconciles the model of this reconcile step. The result is based on the input model. @param dirtyRegion the document region which has been changed @param subRegion the sub region in the dirty region which should be reconciled @return an array with reconcile results
method,org/eclipse/jface/text/link/ProposalPosition/getChoices/, Returns the proposals attached to this position. The returned array is owned by this ProposalPosition and may not be modified by clients. @return an array of choices, including the initial one. Callers must not modify it.
method,org/eclipse/jface/text/link/LinkedModeUI/setExitPosition/LinkedModeUITarget;int;int;int, Sets the exit position to move the caret to when linked mode mode is exited. @param target the target where the exit position is located @param offset the offset of the exit position @param length the length of the exit position (in case there should be a selection) @param sequence set to the tab stop position of the exit position, or LinkedPositionGroup.NO_STOP if there should be no tab stop. @throws BadLocationException if the position is not valid in the viewer's document
method,org/eclipse/jface/text/link/LinkedModeUI/setExitPosition/ITextViewer;int;int;int, Sets the exit position to move the caret to when linked mode is exited. @param viewer the viewer where the exit position is located @param offset the offset of the exit position @param length the length of the exit position (in case there should be a selection) @param sequence set to the tab stop position of the exit position, or 		 LinkedPositionGroup.NO_STOP if there should be no tab stop. @throws BadLocationException if the position is not valid in the viewer's document
method,org/eclipse/jface/text/link/LinkedModeUI/setDoContextInfo/boolean, Sets the context info property. If set to true, context info will be invoked on the current target's viewer whenever a position is switched. @param doContextInfo true if context information should be displayed
method,org/eclipse/jface/text/link/LinkedModeUI/setPositionListener/ILinkedModeUIFocusListener, Sets the focus callback which will get informed when the focus of the linked mode UI changes. If there is a listener installed already, it will be replaced. @param listener the new listener, never null.
method,org/eclipse/jface/text/link/LinkedModeUI/setSimpleMode/boolean, Sets the simple mode of the receiver. A linked mode UI in simple mode merely draws the exit position, but not the target, focus, and slave positions. Default is false. This method must be called before it is entered. @param simple true if the UI should be in simple mode.
method,org/eclipse/jface/text/link/LinkedModeUI/LinkedModeUI/LinkedModeModel;LinkedModeUITarget[], Creates a new UI on the given model and the set of viewers. The model must provide a tab stop sequence with a non-empty list of tab stops. @param model the linked mode model @param targets the non-empty list of targets upon which the linked mode UI should act
method,org/eclipse/jface/text/link/LinkedModeUI/LinkedModeUI/LinkedModeModel;ITextViewer, Convenience constructor for just one viewer. @param model the linked mode model @param viewer the viewer upon which the linked mode UI should act
method,org/eclipse/jface/text/link/LinkedModeUI/LinkedModeUI/LinkedModeModel;ITextViewer[], Convenience constructor for multiple viewers. @param model the linked mode model @param viewers the non-empty list of viewers upon which the linked mode UI should act
method,org/eclipse/jface/text/link/LinkedModeUI/LinkedModeUI/LinkedModeModel;LinkedModeUITarget, Convenience constructor for one target. @param model the linked mode model @param target the target upon which the linked mode UI should act
field,org/eclipse/jface/text/link/LinkedModeUI/CYCLE_NEVER, Constant indicating that this UI should never cycle from the last position to the first and vice versa.
field,org/eclipse/jface/text/link/LinkedModeUI/CYCLE_ALWAYS, Constant indicating that this UI should always cycle from the last position to the first and vice versa.
field,org/eclipse/jface/text/link/LinkedModeUI/CYCLE_WHEN_NO_PARENT, Constant indicating that this UI should cycle from the last position to the first and vice versa if its model is not nested.
method,org/eclipse/jface/text/link/LinkedModeUI/ILinkedModeUIFocusListener/linkingFocusLost/LinkedPosition;LinkedModeUITarget, Called when the UI for the linked mode leaves a linked position. @param position the position being left @param target the target where position resides in
method,org/eclipse/jface/text/link/LinkedModeUI/ILinkedModeUIFocusListener/linkingFocusGained/LinkedPosition;LinkedModeUITarget, Called when the UI for the linked mode gives focus to a linked position. @param position the position being entered @param target the target where position resides in
method,org/eclipse/jface/text/link/LinkedModeUI/IExitPolicy/doExit/LinkedModeModel;VerifyEvent;int;int, Checks whether the linked mode should be left after receiving the given VerifyEvent and selection. Note that the event carries widget coordinates as opposed to offset and length which are document coordinates. @param model the linked mode model @param event the verify event @param offset the offset of the current selection @param length the length of the current selection @return valid exit flags or null if no special action should be taken
method,org/eclipse/jface/text/contentassist/ICompletionListenerExtension/assistSessionRestarted/ContentAssistEvent, Called when code assist is invoked when there is already a current code assist session. @param event the content assist event
interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension, Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with the following functions: 	handling of trigger characters other than ENTER 	completion proposal validation for a given offset 	context information can be freely positioned @since 2.0
interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension3, Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with the following functions: 	provision of a custom information control creator	provide a custom completion text and offset for prefix completion @since 3.0
method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension3/getPrefixCompletionText/IDocument;int, Returns the string that would be inserted at the position returned from {@link #getPrefixCompletionStart(IDocument, int)} if this proposal was applied. If the replacement string cannot be determined, null may be returned. @param document the document that the receiver applies to @param completionOffset the offset into document where the completion takes place @return the replacement string or null if it cannot be determined
interface,org/eclipse/jface/text/contentassist/IContextInformationExtension, Extends {@link org.eclipse.jface.text.contentassist.IContextInformation} with the ability to freely position the context information. @since 2.0
method,org/eclipse/jface/text/contentassist/ContentAssistant/enableAutoInsert/boolean, Enables the content assistant's auto insertion mode. If enabled, the content assistant inserts a proposal automatically if it is the only proposal. In the case of ambiguities, the user must make the choice. @param enabled indicates whether auto insertion is enabled or not @since 2.0
method,org/eclipse/jface/text/contentassist/ContentAssistant/createAutoAssistListener/, This method allows subclasses to provide their own {@link AutoAssistListener}. @return a new auto assist listener @since 3.4
method,org/eclipse/jface/text/contentassist/ContentAssistant/getAutoActivationDelay/, Gets the delay after which the content assistant is automatically invoked if the cursor is behind an auto activation character. @return the auto activation delay (will not be negative) @since 3.4
method,org/eclipse/jface/text/contentassist/ContentAssistant/setProposalPopupOrientation/int, Sets the proposal pop-ups' orientation. The following values may be used: PROPOSAL_OVERLAY proposal popup windows should overlay each other PROPOSAL_REMOVE any currently shown proposal popup should be closed PROPOSAL_STACKED proposal popup windows should be vertical stacked, with no overlap, beneath the line containing the current cursor location @param orientation the popup's orientation
method,org/eclipse/jface/text/contentassist/ContentAssistant/setContextInformationPopupOrientation/int, Sets the context information popup's orientation. The following values may be used: CONTEXT_ABOVE context information popup should always appear above the line containing the current cursor location CONTEXT_BELOW context information popup should always appear below the line containing the current cursor location @param orientation the popup's orientation
method,org/eclipse/jface/text/contentassist/ContentAssistant/setInformationControlCreator/IInformationControlCreator, Sets the information control creator for the additional information control. @param creator the information control creator for the additional information control @since 2.0
method,org/eclipse/jface/text/contentassist/ContentAssistant/possibleCompletionsClosed/, Callback to signal this content assistant that the presentation of the possible completions has been stopped. @since 2.1
method,org/eclipse/jface/text/contentassist/ContentAssistant/contextInformationClosed/, Callback to signal this content assistant that the presentation of the context information has been stopped. @since 2.1
method,org/eclipse/jface/text/contentassist/ContentAssistant/getHandler/String, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/contentassist/ContentAssistant/ContentAssistant/, Creates a new content assistant. The content assistant is not automatically activated, overlays the completion proposals with context information list if necessary, and shows the context information above the location at which it was activated. If auto activation will be enabled, without further configuration steps, this content assistant is activated after a 500 milliseconds delay. It uses the default partitioning.
class,org/eclipse/jface/text/contentassist/ContentAssistant/AutoAssistListener, An implementation of IContentAssistListener, this class is used to monitor key events in support of automatic activation of the content assistant. If enabled, the implementation utilizes a thread to watch for input characters matching the activation characters specified by the content assist processor, and if detected, will wait the indicated delay interval before activating the content assistant. @since 3.4 protected, was added in 2.1 as private class
interface,org/eclipse/jface/text/contentassist/IContentAssistantExtension2, Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} with the following functions: completion listeners repeated invocation mode a local status line for the completion popup control over the behavior when no proposals are available @since 3.2
method,org/eclipse/jface/text/contentassist/IContentAssistantExtension2/addCompletionListener/ICompletionListener, Adds a completion listener that will be informed before proposals are computed. @param listener the listener
method,org/eclipse/jface/text/contentassist/IContentAssistantExtension2/setRepeatedInvocationMode/boolean, Enables repeated invocation mode, which will trigger re-computation of the proposals when code assist is executed repeatedly. The default is no false. @param cycling true to enable repetition mode, false to disable
method,org/eclipse/jface/text/contentassist/IContentAssistantExtension2/setStatusLineVisible/boolean, Enables displaying a status line below the proposal popup. The default is not to show the status line. The contents of the status line may be set via {@link #setStatusMessage(String)}. @param show true to show a message line, false to not show one.
interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2, Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with the following functions: 	handling of trigger characters with modifiers	visual indication for selection of a proposal @since 2.1
method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2/apply/ITextViewer;char;int;int, Applies the proposed completion to the given document. The insertion has been triggered by entering the given character with a modifier at the given offset. This method assumes that {@link #validate(IDocument, int, DocumentEvent)} returns true if called for offset. @param viewer the text viewer into which to insert the proposed completion @param trigger the trigger to apply the completion @param stateMask the state mask of the modifiers @param offset the offset at which the trigger has been activated
method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2/selected/ITextViewer;boolean, Called when the proposal is selected. @param viewer the text viewer. @param smartToggle the smart toggle key was pressed
method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2/unselected/ITextViewer, Called when the proposal is unselected. @param viewer the text viewer.
method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2/validate/IDocument;int;DocumentEvent, Requests the proposal to be validated with respect to the document event. If the proposal cannot be validated, the methods returns false. If the document event was null, only the caret offset was changed, but not the document. This method replaces {@link ICompletionProposalExtension#isValidFor(IDocument, int)} @param document the document @param offset the caret offset @param event the document event, may be null @return boolean
interface,org/eclipse/jface/text/contentassist/IContentAssistantExtension3, Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} with the following function: a key-sequence to listen for in repeated invocation mode @since 3.2
method,org/eclipse/jface/text/contentassist/IContentAssistantExtension3/setRepeatedInvocationTrigger/KeySequence, Sets the key sequence to listen for in repeated invocation mode. If the key sequence is encountered, a step in the repetition iteration is triggered. @param sequence the key sequence used for the repeated invocation mode or null if none
interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension6, Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with the following function: 	Allow styled ranges in the display string. @since 3.4
method,org/eclipse/jface/text/contentassist/ICompletionProposal/getSelection/IDocument, Returns the new selection after the proposal has been applied to the given document in absolute document coordinates. If it returns null, no new selection is set. A document change can trigger other document changes, which have to be taken into account when calculating the new selection. Typically, this would be done by installing a document listener or by using a document position during {@link #apply(IDocument)}. @param document the document into which the proposed completion has been inserted @return the new selection in absolute document coordinates
method,org/eclipse/jface/text/contentassist/ICompletionProposal/getImage/, Returns the image to be displayed in the list of completion proposals. The image would typically be shown to the left of the display string. @return the image to be shown or null if no image is desired
method,org/eclipse/jface/text/contentassist/IContextInformation/getImage/, Returns the image for this context information. The image will be shown to the left of the display string. @return the image to be shown or null if no image is desired
method,org/eclipse/jface/text/contentassist/ICompletionListener/assistSessionStarted/ContentAssistEvent, Called when code assist is invoked when there is no current code assist session. @param event the content assist event
method,org/eclipse/jface/text/contentassist/ICompletionListener/assistSessionEnded/ContentAssistEvent, Called when a code assist session ends (for example, the proposal popup is closed). @param event the content assist event
method,org/eclipse/jface/text/contentassist/ICompletionListener/selectionChanged/ICompletionProposal;boolean, Called when the selection in the proposal popup is changed or if the insert-mode changed. @param proposal the newly selected proposal, possibly null @param smartToggle true if the insert-mode toggle is being pressed, false otherwise
method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/computeCompletionProposals/ITextViewer;int, Returns a list of completion proposals based on the specified location within the document that corresponds to the current cursor position within the text viewer. @param viewer the viewer whose document is used to compute the proposals @param offset an offset within the document for which completions should be computed @return an array of completion proposals or null if no proposals are possible
method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/computeContextInformation/ITextViewer;int, Returns information about possible contexts based on the specified location within the document that corresponds to the current cursor position within the text viewer. @param viewer the viewer whose document is used to compute the possible contexts @param offset an offset within the document for which context information should be computed @return an array of context information objects or null if no context could be found
method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/getCompletionProposalAutoActivationCharacters/, Returns the characters which when entered by the user should automatically trigger the presentation of possible completions. @return the auto activation characters for completion proposal or null		if no auto activation is desired
method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/getContextInformationAutoActivationCharacters/, Returns the characters which when entered by the user should automatically trigger the presentation of context information. @return the auto activation characters for presenting context information		or null if no auto activation is desired
method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/getErrorMessage/, Returns the reason why this content assist processor was unable to produce any completion proposals or context information. @return an error message or null if no error occurred
method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/getContextInformationValidator/, Returns a validator used to determine when displayed context information should be dismissed. May only return null if the processor is incapable of computing context information. @return a context information validator, or null if the processor 			is incapable of computing context information
interface,org/eclipse/jface/text/contentassist/IContentAssistantExtension4, Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} with the following function: allows to get a handler for the given command identifier @since 3.4
method,org/eclipse/jface/text/contentassist/IContentAssistantExtension4/getHandler/String, Returns the handler for the given command identifier. The same handler instance will be returned when called a more than once with the same command identifier. @param commandId the command identifier @return the handler for the given command identifier @throws IllegalArgumentException if the command is not supported by this content assistant @throws IllegalStateException if called when this content assistant is uninstalled
method,org/eclipse/jface/text/contentassist/IContextInformationValidator/install/IContextInformation;ITextViewer;int, Installs this validator for the given context information. @param info the context information which this validator should check @param viewer the text viewer on which the information is presented @param offset the document offset for which the information has been computed
interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension4, Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with the following functions: specify whether a proposal is automatically insertable @since 3.1
method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension4/isAutoInsertable/, Returns true if the proposal may be automatically inserted, false otherwise. Automatic insertion can happen if the proposal is the only one being proposed, in which case the content assistant may decide to not prompt the user with a list of proposals, but simply insert the single proposal. A proposal may veto this behavior by returning false to a call to this method. @return true if the proposal may be inserted automatically, false if not
method,org/eclipse/jface/text/contentassist/IContextInformationPresenter/install/IContextInformation;ITextViewer;int, Installs this presenter for the given context information. @param info the context information which this presenter should style @param viewer the text viewer on which the information is presented @param offset the document offset for which the information has been computed
method,org/eclipse/jface/text/contentassist/ContextInformation/ContextInformation/Image;String;String, Creates a new context information with an image. @param image the image to display when presenting the context information @param contextDisplayString the string to be used when presenting the context @param informationDisplayString the string to be displayed when presenting the context information,		may not be null
method,org/eclipse/jface/text/contentassist/IContentAssistant/showPossibleCompletions/, Shows all possible completions of the content at the viewer's cursor position. @return an optional error message if no proposals can be computed
method,org/eclipse/jface/text/contentassist/IContentAssistant/showContextInformation/, Shows context information for the content at the viewer's cursor position. @return an optional error message if no context information can be computed
field,org/eclipse/jface/text/contentassist/IContentAssistant/PROPOSAL_REMOVE,The completion proposal list will be removed before the context info list will be shown. 
interface,org/eclipse/jface/text/contentassist/IContentAssistantExtension, Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} with the following functions: 	handle documents with multiple partitions 	insertion of common completion prefixes @since 3.0
method,org/eclipse/jface/text/contentassist/IContentAssistantExtension/completePrefix/, Inserts the common prefix of the available completions. If no common prefix can be computed it is identical to {@link IContentAssistant#showPossibleCompletions()}. @return an optional error message if no proposals can be computed
interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension5, Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with the following function: Allow background computation of the additional info. @since 3.2
method,org/eclipse/jface/text/contentassist/CompletionProposal/CompletionProposal/String;int;int;int;Image;String;IContextInformation;String, Creates a new completion proposal. All fields are initialized based on the provided information. @param replacementString the actual string to be inserted into the document @param replacementOffset the offset of the text to be replaced @param replacementLength the length of the text to be replaced @param cursorPosition the position of the cursor following the insert relative to replacementOffset @param image the image to display for this proposal @param displayString the string to be displayed for the proposal @param contextInformation the context information associated with this proposal @param additionalProposalInfo the additional information associated with this proposal
method,org/eclipse/jface/text/templates/TemplateProposal/apply/ITextViewer;char;int;int, Inserts the template offered by this proposal into the viewer's document and sets up a LinkedModeUI on the viewer to edit any of the template's unresolved variables. @param viewer {@inheritDoc} @param trigger {@inheritDoc} @param stateMask {@inheritDoc} @param offset {@inheritDoc}
method,org/eclipse/jface/text/templates/TemplateCompletionProcessor/createContext/ITextViewer;IRegion, Creates a concrete template context for the given region in the document. This involves finding out which context type is valid at the given location, and then creating a context of this type. The default implementation returns a DocumentTemplateContext for the context type at the given location. @param viewer the viewer for which the context is created @param region the region into document for which the context is created @return a template context that can handle template insertion at the given location, or null
method,org/eclipse/jface/text/templates/TemplateCompletionProcessor/getRelevance/Template;String, Returns the relevance of a template given a prefix. The default implementation returns a number greater than zero if the template name starts with the prefix, and zero otherwise. @param template the template to compute the relevance for @param prefix the prefix after which content assist was requested @return the relevance of template @see #extractPrefix(ITextViewer, int)
method,org/eclipse/jface/text/templates/TemplateCompletionProcessor/getImage/Template, Returns the image to be used for the proposal for template. @param template the template for which an image should be returned @return the image for template
method,org/eclipse/jface/text/templates/persistence/TemplateReaderWriter/read/Reader;ResourceBundle, Reads templates from a stream and adds them to the templates. @param reader the reader to read templates from @param bundle a resource bundle to use for translating the read templates, or null if no translation should occur @return the read templates, encapsulated in instances of TemplatePersistenceData @throws IOException if reading from the stream fails
method,org/eclipse/jface/text/templates/persistence/TemplateReaderWriter/read/InputStream;ResourceBundle, Reads templates from a stream and adds them to the templates. @param stream the byte stream to read templates from @param bundle a resource bundle to use for translating the read templates, or null if no translation should occur @return the read templates, encapsulated in instances of TemplatePersistenceData @throws IOException if reading from the stream fails
method,org/eclipse/jface/text/templates/persistence/TemplatePersistenceData/isDeleted/, Returns the deletion state of the stored template. This is only relevant of contributed templates. @return the deletion state of the stored template
method,org/eclipse/jface/text/templates/persistence/TemplatePersistenceData/TemplatePersistenceData/Template;boolean;String, Creates a new instance. If id is not null, the instance is represents a template that is contributed and can be identified via its id. @param template the template which is stored by the new instance @param enabled whether the template is enabled @param id the id of the template, or null if a user-added instance should be created
method,org/eclipse/jface/text/templates/persistence/TemplateStore/startListeningForPreferenceChanges/, Starts listening for property changes on the preference store. If the configured preference key changes, the template store is {@link #load() reloaded}. Call {@link #stopListeningForPreferenceChanges()} to remove any listener and stop the auto-updating behavior. @since 3.2
method,org/eclipse/jface/text/templates/persistence/TemplateStore/stopListeningForPreferenceChanges/, Stops the auto-updating behavior started by calling {@link #startListeningForPreferenceChanges()}. @since 3.2
method,org/eclipse/jface/text/templates/persistence/TemplateStore/loadContributedTemplates/, Hook method to load contributed templates. Contributed templates are superseded by customized versions of user added templates stored in the preferences. The default implementation does nothing. @throws IOException if loading fails
method,org/eclipse/jface/text/templates/persistence/TemplateStore/internalAdd/TemplatePersistenceData, Adds a template to the internal store. The added templates must have a unique id. @param data the template data to add
method,org/eclipse/jface/text/templates/persistence/TemplateStore/restoreDefaults/boolean, Deletes all user-added templates and reverts all contributed templates. @param doSave true if the store should be saved after restoring @since 3.5
method,org/eclipse/jface/text/templates/persistence/TemplateStore/restoreDefaults/, Deletes all user-added templates and reverts all contributed templates. Note: the store will be saved after restoring. 
method,org/eclipse/jface/text/templates/persistence/TemplateStore/getTemplates/String, Returns all enabled templates for the given context type. @param contextTypeId the id of the context type of the requested templates, or null if all templates should be returned @return all enabled templates for the given context type
method,org/eclipse/jface/text/templates/persistence/TemplateStore/TemplateStore/ContextTypeRegistry;IPreferenceStore;String, Creates a new template store with a context type registry. Only templates that specify a context type contained in the registry will be loaded by this store if the registry is not null. @param registry a context type registry, or null if all templates should be loaded @param store the preference store in which to store custom templates under key @param key the key into store where to store custom templates
interface,org/eclipse/jface/text/information/IInformationPresenterExtension, Extends {@link org.eclipse.jface.text.information.IInformationPresenter} with the ability to handle documents with multiple partitions. @see org.eclipse.jface.text.information.IInformationPresenter @since 3.0
method,org/eclipse/jface/text/information/IInformationProvider/getSubject/ITextViewer;int, Returns the region of the text viewer's document close to the given offset that contains a subject about which information can be provided. For example, if information can be provided on a per code block basis, the offset should be used to find the enclosing code block and the source range of the block should be returned. @param textViewer the text viewer in which information has been requested @param offset the offset at which information has been requested @return the region of the text viewer's document containing the information subject
method,org/eclipse/jface/text/information/IInformationProvider/getInformation/ITextViewer;IRegion, Returns the information about the given subject or null if no information is available. It depends on the concrete configuration in which format the information is to be provided. For example, information presented in an information control displaying HTML, should be provided in HTML. @param textViewer the viewer in whose document the subject is contained @param subject the text region constituting the information subject @return the information about the subject @see IInformationPresenter @deprecated As of 2.1, replaced by {@link IInformationProviderExtension#getInformation2(ITextViewer, IRegion)}
method,org/eclipse/jface/text/information/InformationPresenter/setOffset/int, Sets a offset to override the selection. Setting the value to -1 will disable overriding. @param offset the offset to override selection or -1
interface,org/eclipse/jface/text/information/IInformationProviderExtension2, Extends {@link org.eclipse.jface.text.information.IInformationProvider} with the ability to provide its own information presenter control creator. @see org.eclipse.jface.text.IInformationControlCreator @see org.eclipse.jface.text.information.IInformationProvider @since 3.0
interface,org/eclipse/jface/text/information/IInformationProviderExtension, Extends {@link org.eclipse.jface.text.information.IInformationProvider} with the ability to provide the element for a given subject. @see org.eclipse.jface.text.information.IInformationProvider @since 2.1
method,org/eclipse/jface/text/information/IInformationPresenter/install/ITextViewer, Installs the information presenter on the given text viewer. After this method has been finished, the presenter is operational, i.e. the method {@link #showInformation()} can be called until {@link #uninstall()} is called. @param textViewer the viewer on which the presenter is installed
class,org/eclipse/jface/text/rules/EndOfLineRule, A specific configuration of a single line rule whereby the pattern begins with a specific sequence but is only ended by a line delimiter.
method,org/eclipse/jface/text/rules/EndOfLineRule/EndOfLineRule/String;IToken;char;boolean, Creates a rule for the given starting sequence which, if detected, will return the specified token. Any character which follows the given escape character will be ignored. In addition, an escape character immediately before an end of line can be set to continue the line. @param startSequence the pattern's start sequence @param token the token to be returned on success @param escapeCharacter the escape character @param escapeContinuesLine indicates whether the specified escape character is used for line continuation, so that an end of line immediately after the escape character does not terminate the line, even if breakOnEOL is true @since 3.0
class,org/eclipse/jface/text/rules/RuleBasedScanner, A generic scanner which can be programmed with a sequence of rules. The scanner is used to get the next token by evaluating its rule in sequence until one is successful. If a rule returns a token which is undefined, the scanner will proceed to the next rule. Otherwise the token provided by the rule will be returned by the scanner. If no rule returned a defined token, this scanner returns a token which returns true when calling isOther, unless the end of the file is reached. In this case the token returns true when calling isEOF. @see IRule
method,org/eclipse/jface/text/rules/NumberRule/setColumnConstraint/int, Sets a column constraint for this rule. If set, the rule's token will only be returned if the pattern is detected starting at the specified column. If the column is smaller then 0, the column constraint is considered removed. @param column the column in which the pattern starts
method,org/eclipse/jface/text/rules/RuleBasedDamagerRepairer/RuleBasedDamagerRepairer/RuleBasedScanner;TextAttribute, Creates a damager/repairer that uses the given scanner and returns the given default text attribute if the current token does not carry a text attribute. @param scanner the rule based scanner to be used @param defaultTextAttribute the text attribute to be returned if none is specified by the current token, 			may not be null @deprecated use RuleBasedDamagerRepairer(RuleBasedScanner) instead
method,org/eclipse/jface/text/rules/ITokenScanner/setRange/IDocument;int;int, Configures the scanner by providing access to the document range that should be scanned. @param document the document to scan @param offset the offset of the document range to scan @param length the length of the document range to scan
method,org/eclipse/jface/text/rules/WhitespaceRule/evaluate/ICharacterScanner, {@inheritDoc} @return {@link #fWhitespaceToken} if whitespace got detected, {@link Token#UNDEFINED} otherwise
class,org/eclipse/jface/text/rules/PatternRule, Standard implementation of IPredicateRule. Is is capable of detecting a pattern which begins with a given start sequence and ends with a given end sequence. If the end sequence is not specified, it can be either end of line, end or file, or both. Additionally, the pattern can be constrained to begin in a certain column. The rule can also be used to check whether the text to scan covers half of the pattern, i.e. contains the end sequence required by the rule.
method,org/eclipse/jface/text/rules/PatternRule/setColumnConstraint/int, Sets a column constraint for this rule. If set, the rule's token will only be returned if the pattern is detected starting at the specified column. If the column is smaller then 0, the column constraint is considered removed. @param column the column in which the pattern starts
method,org/eclipse/jface/text/rules/PatternRule/doEvaluate/ICharacterScanner;boolean, Evaluates this rules without considering any column constraints. Resumes detection, i.e. look sonly for the end sequence required by this rule if the resume flag is set. @param scanner the character scanner to be used @param resume true if detection should be resumed, false otherwise @return the token resulting from this evaluation @since 2.0
method,org/eclipse/jface/text/rules/PatternRule/PatternRule/String;String;IToken;char;boolean, Creates a rule for the given starting and ending sequence. When these sequences are detected the rule will return the specified token. Alternatively, the sequence can also be ended by the end of the line. Any character which follows the given escapeCharacter will be ignored. @param startSequence the pattern's start sequence @param endSequence the pattern's end sequence, null is a legal value @param token the token which will be returned on success @param escapeCharacter any character following this one will be ignored @param breaksOnEOL indicates whether the end of the line also terminates the pattern
method,org/eclipse/jface/text/rules/PatternRule/PatternRule/String;String;IToken;char;boolean;boolean, Creates a rule for the given starting and ending sequence. When these sequences are detected the rule will return the specified token. Alternatively, the sequence can also be ended by the end of the line or the end of the file. Any character which follows the given escapeCharacter will be ignored. @param startSequence the pattern's start sequence @param endSequence the pattern's end sequence, null is a legal value @param token the token which will be returned on success @param escapeCharacter any character following this one will be ignored @param breaksOnEOL indicates whether the end of the line also terminates the pattern @param breaksOnEOF indicates whether the end of the file also terminates the pattern @since 2.1
method,org/eclipse/jface/text/rules/PatternRule/PatternRule/String;String;IToken;char;boolean;boolean;boolean, Creates a rule for the given starting and ending sequence. When these sequences are detected the rule will return the specified token. Alternatively, the sequence can also be ended by the end of the line or the end of the file. Any character which follows the given escapeCharacter will be ignored. An end of line immediately after the given lineContinuationCharacter will not cause the pattern to terminate even if breakOnEOL is set to true. @param startSequence the pattern's start sequence @param endSequence the pattern's end sequence, null is a legal value @param token the token which will be returned on success @param escapeCharacter any character following this one will be ignored @param breaksOnEOL indicates whether the end of the line also terminates the pattern @param breaksOnEOF indicates whether the end of the file also terminates the pattern @param escapeContinuesLine indicates whether the specified escape character is used for line continuation, so that an end of line immediately after the escape character does not terminate the pattern, even if breakOnEOL is set @since 3.0
interface,org/eclipse/jface/text/rules/IPredicateRule, Defines the interface for a rule used in the scanning of text for the purpose of document partitioning or text styling. A predicate rule can only return one single token after having successfully detected content. This token is called success token. Also, it also returns a token indicating that this rule has not been successful. @see ICharacterScanner @since 2.0
method,org/eclipse/jface/text/rules/FastPartitioner/checkInitialization/, Calls {@link #initialize()} if the receiver is not yet initialized.
method,org/eclipse/jface/text/rules/FastPartitioner/clearPositionCache/, Clears the position cache. Needs to be called whenever the positions have been updated.
method,org/eclipse/jface/text/rules/FastPartitioner/FastPartitioner/IPartitionTokenScanner;String[], Creates a new partitioner that uses the given scanner and may return partitions of the given legal content types. @param scanner the scanner this partitioner is supposed to use @param legalContentTypes the legal content types of this partitioner
field,org/eclipse/jface/text/rules/FastPartitioner/fPreviousDocumentLength,The document length before a document change occurred 
class,org/eclipse/jface/text/rules/WordRule, An implementation of {@link IRule} capable of detecting words. A word rule also allows to associate a token to a word. That is, not only can the rule be used to provide tokens for exact matches, but also for the generalized notion of a word in the context in which it is used. A word rule uses a word detector to determine what a word is. @see IWordDetector
method,org/eclipse/jface/text/rules/WordRule/addWord/String;IToken, Adds a word and the token to be returned if it is detected. @param word the word this rule will search for, may not be null @param token the token to be returned if the word has been found, may not be null
method,org/eclipse/jface/text/rules/WordRule/setColumnConstraint/int, Sets a column constraint for this rule. If set, the rule's token will only be returned if the pattern is detected starting at the specified column. If the column is smaller then 0, the column constraint is considered removed. @param column the column in which the pattern starts
method,org/eclipse/jface/text/rules/WordRule/WordRule/IWordDetector, Creates a rule which, with the help of an word detector, will return the token associated with the detected word. If no token has been associated, the scanner will be rolled back and an undefined token will be returned in order to allow any subsequent rules to analyze the characters. @param detector the word detector to be used by this rule, may not be null @see #addWord(String, IToken)
method,org/eclipse/jface/text/rules/WordRule/WordRule/IWordDetector;IToken, Creates a rule which, with the help of a word detector, will return the token associated with the detected word. If no token has been associated, the specified default token will be returned. @param detector the word detector to be used by this rule, may not be null @param defaultToken the default token to be returned on success			if nothing else is specified, may not be null @see #addWord(String, IToken)
method,org/eclipse/jface/text/rules/WordRule/WordRule/IWordDetector;IToken;boolean, Creates a rule which, with the help of a word detector, will return the token associated with the detected word. If no token has been associated, the specified default token will be returned. @param detector the word detector to be used by this rule, may not be null @param defaultToken the default token to be returned on success			if nothing else is specified, may not be null @param ignoreCase the case sensitivity associated with this rule @see #addWord(String, IToken) @since 3.3
method,org/eclipse/jface/text/rules/RuleBasedPartitioner/RuleBasedPartitioner/RuleBasedScanner;String[], Creates a new partitioner that uses the given scanner and may return partitions of the given legal content types. @param scanner the scanner this partitioner is supposed to use @param legalContentTypes the legal content types of this partitioner
field,org/eclipse/jface/text/rules/RuleBasedPartitioner/fPreviousDocumentLength,The document length before a document change occurred 
method,org/eclipse/jface/text/rules/WordPatternRule/unreadBuffer/ICharacterScanner, Returns the characters in the buffer to the scanner. Note that the rule must also return the characters read in as part of the start sequence expect the first one. @param scanner the scanner to be used
class,org/eclipse/jface/text/rules/MultiLineRule, A rule for detecting patterns which begin with a given sequence and may end with a given sequence thereby spanning multiple lines.
method,org/eclipse/jface/text/rules/DefaultPartitioner/DefaultPartitioner/IPartitionTokenScanner;String[], Creates a new partitioner that uses the given scanner and may return partitions of the given legal content types. @param scanner the scanner this partitioner is supposed to use @param legalContentTypes the legal content types of this partitioner
field,org/eclipse/jface/text/rules/DefaultPartitioner/fPreviousDocumentLength,The document length before a document change occurred 
interface,org/eclipse/jface/text/rules/ICharacterScanner, Defines the interface of a character scanner used by rules. Rules may request the next character or ask the character scanner to unread the last read character.
method,org/eclipse/jface/text/rules/ICharacterScanner/getLegalLineDelimiters/, Provides rules access to the legal line delimiters. The returned object may not be modified by clients. @return the legal line delimiters
method,org/eclipse/jface/text/rules/ICharacterScanner/unread/, Rewinds the scanner before the last read character.
class,org/eclipse/jface/text/rules/SingleLineRule, A specific configuration of pattern rule whereby the pattern begins with a specific sequence and may end with a specific sequence, but will not span more than a single line.
method,org/eclipse/jface/text/rules/SingleLineRule/SingleLineRule/String;String;IToken;char;boolean, Creates a rule for the given starting and ending sequence which, if detected, will return the specified token. Alternatively, the line can also be ended with the end of the file. Any character which follows the given escape character will be ignored. @param startSequence the pattern's start sequence @param endSequence the pattern's end sequence @param token the token to be returned on success @param escapeCharacter the escape character @param breaksOnEOF indicates whether the end of the file successfully terminates this rule @since 2.1
method,org/eclipse/jface/text/rules/SingleLineRule/SingleLineRule/String;String;IToken;char;boolean;boolean, Creates a rule for the given starting and ending sequence which, if detected, will return the specified token. Alternatively, the line can also be ended with the end of the file. Any character which follows the given escape character will be ignored. In addition, an escape character immediately before an end of line can be set to continue the line. @param startSequence the pattern's start sequence @param endSequence the pattern's end sequence @param token the token to be returned on success @param escapeCharacter the escape character @param breaksOnEOF indicates whether the end of the file successfully terminates this rule @param escapeContinuesLine indicates whether the specified escape character is used for line continuation, so that an end of line immediately after the escape character does not terminate the line, even if breakOnEOL is true @since 3.0
method,org/eclipse/jface/text/rules/Token/setData/Object, Re-initializes the data of this token. The token may not represent undefined, whitespace, or EOF. @param data to be attached to the token @since 2.0
method,org/eclipse/jface/text/rules/DefaultDamagerRepairer/endOfLineOf/int, Returns the end offset of the line that contains the specified offset or if the offset is inside a line delimiter, the end offset of the next line. @param offset the offset whose line end offset must be computed @return the line end offset for the given offset @exception BadLocationException if offset is invalid in the current document
method,org/eclipse/jface/text/rules/DefaultDamagerRepairer/addRange/TextPresentation;int;int;TextAttribute, Adds style information to the given text presentation. @param presentation the text presentation to be extended @param offset the offset of the range to be styled @param length the length of the range to be styled @param attr the attribute describing the style of the range to be styled
method,org/eclipse/jface/text/rules/DefaultDamagerRepairer/DefaultDamagerRepairer/ITokenScanner;TextAttribute, Creates a damager/repairer that uses the given scanner and returns the given default text attribute if the current token does not carry a text attribute. @param scanner the token scanner to be used @param defaultTextAttribute the text attribute to be returned if non is specified by the current token, 			may not be null @deprecated use DefaultDamagerRepairer(ITokenScanner) instead
method,org/eclipse/jface/text/formatter/IContentFormatter/format/IDocument;IRegion, Formats the given region of the specified document.The formatter may safely assume that it is the only subject that modifies the document at this point in time. @param document the document to be formatted @param region the region within the document to be formatted
method,org/eclipse/jface/text/formatter/IFormattingStrategy/format/String;boolean;String;int[], Formats the given string. During the formatting process this strategy must update the given character positions according to the changes applied to the given string. @param content the initial string to be formatted @param isLineStart indicates whether the beginning of content is a line start in its document @param indentation the indentation string to be used @param positions the character positions to be updated @return the formatted string
method,org/eclipse/jface/text/formatter/IFormattingContext/dispose/, Dispose of the formatting context. Must be called after the formatting context has been used in a formatting process.
method,org/eclipse/jface/text/formatter/IFormattingContext/mapToStore/Map;IPreferenceStore, Stores the preferences from a map to a preference store. Note that the preference keys returned by {@link #getPreferenceKeys()} must not be used in the preference store. Otherwise the preferences are overwritten. @param map Map to retrieve the preferences from @param store Preference store to store the preferences in
method,org/eclipse/jface/text/formatter/IFormattingContext/setProperty/Object;Object, Stores the property key in the formatting context. @param key Key of the property to store in the context @param property Property to store in the context. If already present, the new property overwrites the present one.
method,org/eclipse/jface/text/formatter/IFormattingContext/storeToMap/IPreferenceStore;Map;boolean, Retrieves the preferences from a preference store in a map. Note that the preference keys returned by {@link #getPreferenceKeys()} must not be used in the map. Otherwise the preferences are overwritten. @param store Preference store to retrieve the preferences from @param map Map to store the preferences in @param useDefault true if the default preferences should be used, false otherwise
class,org/eclipse/jface/text/formatter/MultiPassContentFormatter, Content formatter for edit-based formatting strategies. Two kinds of formatting strategies can be registered with this formatter: one master formatting strategy for the default content type one formatting strategy for each non-default content type The master formatting strategy always formats the whole region to be formatted in the first pass. In a second pass, all partitions of the region to be formatted that are not of master content type are formatted using the slave formatting strategy registered for the underlying content type. All formatting strategies must implement {@link IFormattingStrategyExtension}. Regions to be formatted with the master formatting strategy always have an offset aligned to the line start. Regions to be formatted with slave formatting strategies are aligned on partition boundaries. @see IFormattingStrategyExtension @since 3.0
method,org/eclipse/jface/text/formatter/MultiPassContentFormatter/formatSlave/IFormattingContext;IDocument;int;int;String, Formats the document specified in the formatting context with the formatting strategy registered for the content type. For this formatting type only slave strategies are used. The region to be formatted is aligned on partition boundaries of the underlying content type. The exact formatting strategy is determined by the underlying content type of the document partitioning. @param context The formatting context to use @param document The document to operate on @param offset The offset of the region to format @param length The length of the region to format @param type The content type of the region to format
method,org/eclipse/jface/text/formatter/MultiPassContentFormatter/setMasterStrategy/IFormattingStrategy, Registers a master formatting strategy. The strategy may already be registered with a certain content type as slave strategy. The master strategy is registered for the default content type of documents. If a master strategy has already been registered, it is overridden by the new one. @param strategy The master formatting strategy, must implement 	{@link IFormattingStrategyExtension}
method,org/eclipse/jface/text/formatter/MultiPassContentFormatter/setSlaveStrategy/IFormattingStrategy;String, Registers a slave formatting strategy for a certain content type. The strategy may already be registered as master strategy. An already registered slave strategy for the specified content type will be replaced. However, the same strategy may be registered with several content types. Slave strategies cannot be registered for the default content type of documents. @param strategy The slave formatting strategy @param type The content type to register this strategy with, 	must implement {@link IFormattingStrategyExtension}
method,org/eclipse/jface/text/formatter/ContentFormatter/setFormattingStrategy/IFormattingStrategy;String, Registers a strategy for a particular content type. If there is already a strategy registered for this type, the new strategy is registered instead of the old one. If the given content type is null the given strategy is registered for all content types as is called only once per formatting session. @param strategy the formatting strategy to register, or null to remove an existing one @param contentType the content type under which to register
method,org/eclipse/jface/text/formatter/ContentFormatter/setPartitionManagingPositionCategories/String[], Informs this content formatter about the names of those position categories which are used to manage the document's partitioning information and thus should be ignored when this formatter updates positions. @param categories the categories to be ignored @deprecated incompatible with an open set of document partitionings. The provided information is only used 		if this formatter can not compute the partition managing position categories.
method,org/eclipse/jface/text/formatter/ContentFormatter/enablePartitionAwareFormatting/boolean, Sets the formatter's operation mode. @param enable indicates whether the formatting process should be partition ware
method,org/eclipse/jface/text/formatter/ContentFormatter/updateAffectedPositions/IDocument;int[];int, Updates all the overlapping positions. Note, all other positions are automatically updated by their document position updaters. @param document the document to has been formatted @param positions the adapted character positions to be used to update the document positions @param offset the offset of the document region that has been formatted
method,org/eclipse/jface/text/formatter/ContentFormatter/positionAboutToBeAdded/IDocument;String;Position, The given position is about to be added to the given position category of the given document. This default implementation return true. @param document the document @param category the position category @param position the position that will be added @return true if the position can be added, false if it should be ignored
method,org/eclipse/jface/text/formatter/ContentFormatter/ContentFormatter/, Creates a new content formatter. The content formatter operates by default in the partition-aware mode. There are no preconfigured formatting strategies. Will use the default document partitioning if not further configured.
class,org/eclipse/jface/text/formatter/ContextBasedFormattingStrategy, Formatting strategy for context based content formatting. Retrieves the preferences set on the formatting context's {@link FormattingContextProperties#CONTEXT_PREFERENCES} property and makes them available to subclasses. @since 3.0
method,org/eclipse/jface/text/hyperlink/IHyperlink/getTypeLabel/, Optional label for this type of hyperlink. This type label can be used by {@link IHyperlinkPresenter}s which show several hyperlinks at once. @return the type label or null if none
method,org/eclipse/jface/text/hyperlink/IHyperlinkDetector/detectHyperlinks/ITextViewer;IRegion;boolean, Tries to detect hyperlinks for the given region in the given text viewer and returns them. In most of the cases only one hyperlink should be returned. @param textViewer the text viewer on which the hover popup should be shown @param region the text range in the text viewer which is used to detect the hyperlinks @param canShowMultipleHyperlinks tells whether the caller is able to show multiple links 						to the user. 						If true {@link IHyperlink#open()} should directly open 							the link and not show any additional UI to select from a list. 						If false this method should only return one hyperlink 							which upon {@link IHyperlink#open()} may allow to select from a list. @return the hyperlinks or null if no hyperlink was detected
method,org/eclipse/jface/text/hyperlink/MultipleHyperlinkPresenter/MultipleHyperlinkPresenter/RGB, Creates a new multiple hyperlink presenter. @param color the hyperlink color, to be disposed by the caller
method,org/eclipse/jface/text/hyperlink/HyperlinkManager/mouseExit/MouseEvent, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/hyperlink/HyperlinkManager/mouseEnter/MouseEvent, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/hyperlink/HyperlinkManager/mouseHover/MouseEvent, {@inheritDoc} @since 3.4
field,org/eclipse/jface/text/hyperlink/HyperlinkManager/ALL, All detected hyperlinks from all detectors are collected and passed to the hyperlink presenter. This strategy is only allowed if {@link IHyperlinkPresenter#canShowMultipleHyperlinks()} returns true. 
field,org/eclipse/jface/text/hyperlink/HyperlinkManager/LONGEST_REGION_ALL, All detected hyperlinks from all detectors are collected and all those with the longest region are passed to the hyperlink presenter. This strategy is only allowed if {@link IHyperlinkPresenter#canShowMultipleHyperlinks()} returns true. 
field,org/eclipse/jface/text/hyperlink/HyperlinkManager/LONGEST_REGION_FIRST, All detected hyperlinks from all detectors are collected and form all those with the longest region only the first one is passed to the hyperlink presenter.
method,org/eclipse/jface/text/hyperlink/AbstractHyperlinkDetector/getAdapter/Class, Returns an object which is an instance of the given class and provides additional context for this hyperlink detector. @param adapterClass the adapter class to look up @return an instance that can be cast to the given class,			or null if this object does not			have an adapter for the given class
class,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter, The default hyperlink presenter underlines the link and colors the line and the text with the given color. It can only be used together with the {@link HyperlinkManager#FIRST} or the {@link HyperlinkManager#LONGEST_REGION_FIRST} hyperlink strategy. @since 3.1
method,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter/canHideHyperlinks/, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter/setColor/Color, Sets the hyperlink foreground color. @param color the hyperlink foreground color or null if the existing text color should be preserved
method,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter/DefaultHyperlinkPresenter/Color, Creates a new default hyperlink presenter. @param color the hyperlink color or null if the existing text color should be preserved; to be disposed by the caller
method,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter/DefaultHyperlinkPresenter/RGB, Creates a new default hyperlink presenter. @param color the hyperlink color or null if the existing text color should be preserved
interface,org/eclipse/jface/text/presentation/IPresentationDamager, A presentation damager is a strategy used by a presentation reconciler to determine the region of the document's presentation which must be rebuilt because of a document change. A presentation damager is assumed to be specific for a particular document content type. A presentation damager is expected to return a damage region which is a valid input for a presentation repairer. I.e. having access to the damage region only the repairer must be able to derive all the information needed to successfully repair this region. This interface must either be implemented by clients or clients use the rule-based default implementation {@link org.eclipse.jface.text.rules.DefaultDamagerRepairer}. Implementers should be registered with a presentation reconciler in order get involved in the reconciling process. @see IPresentationReconciler @see IDocument @see DocumentEvent @see IPresentationRepairer
method,org/eclipse/jface/text/presentation/IPresentationDamager/getDamageRegion/ITypedRegion;DocumentEvent;boolean, Returns the damage in the document's presentation caused by the given document change. The damage is restricted to the specified partition for which the presentation damager is responsible. The damage may also depend on whether the document change also caused changes of the document's partitioning. @param partition the partition inside which the damage must be determined @param event the event describing the change whose damage must be determined @param documentPartitioningChanged indicates whether the given change changed the document's partitioning @return the computed damage
interface,org/eclipse/jface/text/presentation/IPresentationReconciler, An IPresentationReconciler defines and maintains the representation of a text viewer's document in the presence of changes applied to the document. An IPresentationReconciler is a ITextViewer add-on. The presentation reconciler keeps track of changes applied to the text viewer. It sends each change to presentation damagers which are registered for the content types of the regions in which the change occurred. The presentation reconciler passes the computed damage to presentation repairer which construct text presentations. When applied to the presentation reconciler's text viewer, those text presentations bring the document's presentation in sync with the document's content and thus repair the damage. A presentation damager is expected to return damage which is a valid input for a presentation repairer registered for the same content type as the damager. A presentation reconciler should always be configured with a pair of damager/repairer strategies. I.e. for each damager there should be a corresponding repairer. The interface may be implemented by clients. Clients may use PresentationReconciler as the standard implementation of this interface. In order to provided backward compatibility for clients of IPresentationReconciler, extension interfaces are used to provide a means of evolution. The following extension interface exists: {@link org.eclipse.jface.text.presentation.IPresentationReconcilerExtension} since version 3.0 adding support for documents with multiple partitionings. @see org.eclipse.jface.text.presentation.IPresentationReconcilerExtension @see org.eclipse.jface.text.ITextViewer @see org.eclipse.jface.text.presentation.IPresentationDamager @see org.eclipse.jface.text.presentation.IPresentationRepairer @see org.eclipse.jface.text.TextPresentation
method,org/eclipse/jface/text/presentation/PresentationReconciler/createPresentation/IRegion;IDocument, Constructs a repair description for the given damage and returns this description as a text presentation. For this, it queries the partitioning of the damage region and asks the appropriate presentation repairer for each partition to construct the repair description for this partition. @param damage the damage to be repaired @param document the document whose presentation must be repaired @return the presentation repair description as text presentation or null if the partitioning could not be computed
interface,org/eclipse/jface/text/presentation/IPresentationReconcilerExtension, Extension interface for {@link IPresentationReconciler}. Adds awareness of documents with multiple partitions. @since 3.0
method,org/eclipse/jface/text/source/AnnotationBarHoverManager/AnnotationBarHoverManager/ISourceViewer;IVerticalRuler;IAnnotationHover;IInformationControlCreator, Creates an annotation hover manager with the given parameters. In addition, the hovers anchor is RIGHT and the margin is 5 points to the right. @param sourceViewer the source viewer this manager connects to @param ruler the vertical ruler this manager connects to @param annotationHover the annotation hover providing the information to be displayed @param creator the information control creator @deprecated As of 2.1, replaced by {@link AnnotationBarHoverManager#AnnotationBarHoverManager(IVerticalRulerInfo, ISourceViewer, IAnnotationHover, IInformationControlCreator)}
method,org/eclipse/jface/text/source/AnnotationBarHoverManager/AnnotationBarHoverManager/IVerticalRulerInfo;ISourceViewer;IAnnotationHover;IInformationControlCreator, Creates an annotation hover manager with the given parameters. In addition, the hovers anchor is RIGHT and the margin is 5 points to the right. @param rulerInfo the vertical ruler this manager connects to @param sourceViewer the source viewer this manager connects to @param annotationHover the annotation hover providing the information to be displayed or null if none @param creator the information control creator @since 2.1
class,org/eclipse/jface/text/source/AnnotationBarHoverManager/Closer, The information control closer for the hover information. Closes the information control as soon as the mouse pointer leaves the subject area, a mouse button is pressed, the user presses a key, or the subject control is resized or moved. @since 3.0 @deprecated As of 3.4, no longer used as closer from super class is used
method,org/eclipse/jface/text/source/AnnotationBarHoverManager/Closer/stop/boolean, Stops the information control and if delayRestart is set allows restart only after a certain delay. @param delayRestart true if restart should be delayed @deprecated As of 3.4, replaced by {@link #stop()}. Note that delayRestart was never honored.
method,org/eclipse/jface/text/source/ICharacterPairMatcher/clear/, Clears this pair matcher. I.e. the matcher throws away all state it might remember and prepares itself for a new call of the match method.
interface,org/eclipse/jface/text/source/IAnnotationAccessExtension2, Extension interface for {@link org.eclipse.jface.text.source.IAnnotationAccess}. This interface allows clients to set a quick assist assistant. @see org.eclipse.jface.text.source.IAnnotationAccess @since 3.2
method,org/eclipse/jface/text/source/IAnnotationAccessExtension2/setQuickAssistAssistant/IQuickAssistAssistant, Provides this annotation access with a quick assist assistant that is used to decide whether the quick fix image should be shown. @param assistant the quick assist assistant
method,org/eclipse/jface/text/source/ILineDiffInfo/getRemovedLinesBelow/, Returns the number of deleted lines after this line. @return the number of lines after this line.
method,org/eclipse/jface/text/source/ILineDiffInfo/getRemovedLinesAbove/, Returns the number of deleted lines before this line. @return the number of lines before this line.
method,org/eclipse/jface/text/source/ILineDiffInfo/hasChanges/, Returns whether this line has any changes (to itself, or any deletions before or after it). @return true, if the line's state (as returned by getType) is either CHANGED or ADDED or either of getRemovedLinesBelow and getRemovedLinesAbove would return a number &gt; 0
method,org/eclipse/jface/text/source/ILineDiffInfo/getOriginalText/, Returns the original text of this changed region @return the original text of this changed region, including any deleted lines. The returned value and its elements may not be null/code>, it may however be of zero length
interface,org/eclipse/jface/text/source/ISourceViewerExtension, Extension interface {@link org.eclipse.jface.text.source.ISourceViewer}. Extends the source viewer with the concept of an annotation overview. The annotation overview differs from the annotation presentation in that it is independent from the viewer's view port, i.e. the annotations of the whole document are visible. There are no assumptions about the area in which the annotation overview is shown. As the visibility of annotation overview can dynamically be changed, it is assumed that the presentation area can dynamically be hidden if it is different from the text widget. @see org.eclipse.jface.text.source.ISourceViewer @since 2.1
method,org/eclipse/jface/text/source/ISourceViewerExtension/showAnnotationsOverview/boolean, Shows/hides an overview representation of the annotations of the whole document of this viewer. @param show true if annotation overview should be visible, false otherwise
interface,org/eclipse/jface/text/source/IChangeRulerColumn, An IChangeRulerColumn can display quick diff information. @since 3.0
method,org/eclipse/jface/text/source/IChangeRulerColumn/setBackground/Color, Sets the background color for normal lines. The color has to be disposed of by the caller when the receiver is no longer used. @param backgroundColor the new color to be used as standard line background
method,org/eclipse/jface/text/source/IChangeRulerColumn/setAddedColor/Color, Sets the background color for added lines. The color has to be disposed of by the caller when the receiver is no longer used. @param addedColor the new color to be used for the added lines background
method,org/eclipse/jface/text/source/IChangeRulerColumn/setChangedColor/Color, Sets the background color for changed lines. The color has to be disposed of by the caller when the receiver is no longer used. @param changedColor the new color to be used for the changed lines background
method,org/eclipse/jface/text/source/IChangeRulerColumn/setDeletedColor/Color, Sets the color for the deleted lines indicator. The color has to be disposed of by the caller when the receiver is no longer used. @param deletedColor the new color to be used for the deleted lines indicator.
field,org/eclipse/jface/text/source/IChangeRulerColumn/QUICK_DIFF_MODEL_ID,The ID under which the quick diff model is registered with a document's annotation model. 
class,org/eclipse/jface/text/source/DefaultCharacterPairMatcher, A character pair matcher that matches a specified set of character pairs against each other. Only characters that occur in the same partitioning are matched. @since 3.3
method,org/eclipse/jface/text/source/DefaultCharacterPairMatcher/DefaultCharacterPairMatcher/char[];String, Creates a new character pair matcher that matches the specified characters within the specified partitioning. The specified list of characters must have the form { start, end, start, end, ..., start, end } For instance: char[] chars = new char[] {'(', ')', '{', '}', '[', ']'}; new SimpleCharacterPairMatcher(chars, ...); @param chars a list of characters @param partitioning the partitioning to match within
method,org/eclipse/jface/text/source/DefaultCharacterPairMatcher/DefaultCharacterPairMatcher/char[], Creates a new character pair matcher that matches characters within the default partitioning. The specified list of characters must have the form { start, end, start, end, ..., start, end } For instance: char[] chars = new char[] {'(', ')', '{', '}', '[', ']'}; new SimpleCharacterPairMatcher(chars); @param chars a list of characters
interface,org/eclipse/jface/text/source/IOverviewRuler, This interface defines a visual component which may serve text viewers as an overview annotation presentation area. This means, presentation of annotations is independent from the actual view port of the text viewer. The annotations of the viewer's whole document are visible in the overview ruler. This interfaces embodies three contracts: 	The overview ruler retrieves the annotations it presents from an annotation model. 	The ruler is a visual component which must be integrated in a hierarchy of SWT controls. The ruler provides interested clients with mapping and 		interaction information. This covers the mapping between 		coordinates of the ruler's control and line numbers based 		on the connected text viewer's document (IVerticalRulerInfo). Clients may implement this interface or use the default implementation provided by OverviewlRuler. @see org.eclipse.jface.text.ITextViewer @since 2.1
method,org/eclipse/jface/text/source/IOverviewRuler/addAnnotationType/Object, Adds the given annotation type to this overview ruler. Starting with this call, annotations of the given type are shown in the overview ruler. @param annotationType the annotation type
method,org/eclipse/jface/text/source/IOverviewRuler/addHeaderAnnotationType/Object, Adds the given annotation type to the header of this ruler. Starting with this call, the presence of annotations is tracked and the header is drawn in the configured color. @param annotationType the annotation type to be tracked
method,org/eclipse/jface/text/source/IOverviewRuler/getHeaderControl/, Returns this rulers header control. This is the little area between the top of the text widget and the top of this overview ruler. @return the header control of this overview ruler.
method,org/eclipse/jface/text/source/LineChangeHover/decorateText/List;int, Takes a list of ILineDiffInfos and computes a hover of at most maxLines. Added lines are prefixed with a '+', changed lines with '>' and deleted lines with '-'. Deleted and added lines can even each other out, so that a number of deleted lines get displayed where - in the current document - the added lines are. @param diffInfos a List of ILineDiffInfo @param maxLines the maximum number of lines. Note that adding up all annotations might give more than that due to deleted lines. @return a String suitable for hover display
method,org/eclipse/jface/text/source/ISourceViewer/setDocument/IDocument;IAnnotationModel;int;int, Sets the given document as this viewer's text model and the given annotation model as the model for this viewer's visual annotations. The presentation is accordingly updated whereby only the specified region is exposed. An appropriate TextEvent is issued. The text event does not carry a related document event. This method is a convenience method for setDocument(document, annotationModel);setVisibleRegion(offset, length). @param document the new input document @param annotationModel the model of the viewer's visual annotations @param modelRangeOffset the offset of the model range @param modelRangeLength the length of the model range @see ITextViewer#setDocument(IDocument, int, int)
method,org/eclipse/jface/text/source/ISourceViewer/setRangeIndication/int;int;boolean, Sets the viewers's range indication to the specified range. Its is indicated whether the cursor should also be moved to the beginning of the specified range. @param offset the offset of the range @param length the length of the range @param moveCursor indicates whether the cursor should be moved to the given offset
method,org/eclipse/jface/text/source/ISourceViewer/removeRangeIndication/, Removes the viewer's range indication. There is no visible range indication after this method completed.
field,org/eclipse/jface/text/source/ISourceViewer/QUICK_ASSIST, Text operation code for requesting quick assist. This will normally show quick assist and quick fix proposals for the current position. @since 3.2
class,org/eclipse/jface/text/source/VerticalRuler, A vertical ruler which is connected to a text viewer. Single column standard implementation of {@link org.eclipse.jface.text.source.IVerticalRuler}. The same can be achieved by using CompositeRuler configured with an AnnotationRulerColumn. Clients may use this class as is. @see org.eclipse.jface.text.ITextViewer
method,org/eclipse/jface/text/source/VerticalRuler/update/, Thread-safe implementation. Can be called from any thread.
interface,org/eclipse/jface/text/source/ILineRange, Describes a range of lines. Note that the number of lines is 1-based, e.g. getStartLine() + getNumberOfLines() computes the first line after the range, and a range with getNumberOfLines() == 0 is empty. @since 3.0
interface,org/eclipse/jface/text/source/IVerticalRulerInfo, A vertical ruler is a visual component which may serve text viewers as an annotation presentation area. The vertical ruler info provides interested clients with the mapping and interaction aspect of the vertical ruler. This covers the mapping between coordinates of the ruler's control and line numbers based on the connected text viewer's document. In order to provide backward compatibility for clients of IVerticalRulerInfo, extension interfaces are used as a means of evolution. The following extension interfaces exist: {@link org.eclipse.jface.text.source.IVerticalRulerInfoExtension} since version 3.0 allowing custom annotation hovers and specific annotation models. @see org.eclipse.jface.text.source.IVerticalRulerInfoExtension @since 2.0
method,org/eclipse/jface/text/source/AnnotationPainter/setAnnotationTypeColor/Object;Color, Sets the color in which the squiggly for the given annotation type should be drawn. @param annotationType the annotation type @param color the color
method,org/eclipse/jface/text/source/AnnotationPainter/addAnnotationType/Object, Adds the given annotation type to the list of annotation types whose annotations should be painted by this painter using squiggly drawing. If the annotation type is already in this list, this method is without effect. @param annotationType the annotation type
method,org/eclipse/jface/text/source/AnnotationPainter/addAnnotationType/Object;Object, Adds the given annotation type to the list of annotation types whose annotations should be painted by this painter using the given drawing strategy. If the annotation type is already in this list, the old drawing strategy gets replaced. @param annotationType the annotation type @param drawingStrategyID the id of the drawing strategy that should be used for this annotation type @since 3.0
method,org/eclipse/jface/text/source/AnnotationPainter/addHighlightAnnotationType/Object, Adds the given annotation type to the list of annotation types whose annotations should be highlighted this painter. If the annotation type is already in this list, this method is without effect. @param annotationType the annotation type @since 3.0
method,org/eclipse/jface/text/source/AnnotationPainter/skip/Annotation, Should the given annotation be skipped when handling draw requests? @param annotation the annotation @return true iff the given annotation should be skipped when handling draw requests @since 3.0
method,org/eclipse/jface/text/source/AnnotationPainter/IDrawingStrategy/draw/Annotation;GC;StyledText;int;int;Color, Draws a decoration for an annotation onto the specified GC at the given text range. There are two different invocation modes of the draw method: drawing mode: the passed GC is the graphics context of a paint event occurring on the text widget. The strategy should draw the decoration onto the graphics context, such that the decoration appears at the given range in the text widget. clearing mode: the passed GC is null. In this case the strategy must invalidate enough of the text widget's client area to cover any decoration drawn in drawing mode. This can usually be accomplished by calling {@linkplain StyledText#redrawRange(int, int, boolean) textWidget.redrawRange(offset, length, true)}. @param annotation the annotation to be drawn @param gc the graphics context, null when in clearing mode @param textWidget the text widget to draw on @param offset the offset of the line @param length the length of the line @param color the color of the line
class,org/eclipse/jface/text/source/AbstractRulerColumn, Abstract implementation of a {@link IVerticalRulerColumn} that uses a {@link Canvas} to draw the ruler contents and which handles scrolling and mouse selection. Painting Subclasses can hook into the paint loop at three levels: Override {@link #paint(GC, ILineRange)} to control the entire painting of the ruler. Override {@link #paintLine(GC, int, int, int, int)} to control the painting of a line. Leave the painting to the default implementation, but override {@link #computeBackground(int)}, {@link #computeForeground(int)} and {@link #computeText(int)} to specify the ruler appearance for a line. Invalidation Subclasses may call {@link #redraw()} to mark the entire ruler as needing to be redrawn. Alternatively, use {@link #redraw(ILineRange)} to only invalidate a certain line range, for example due to changes to the display model. Configuration Subclasses can set the following properties. Setting them may trigger redrawing. The {@link #setFont(Font) font} used to draw text in {@link #paintLine(GC, int, int, int, int)}. The horizontal {@link #setTextInset(int) text inset} for text drawn. The {@link #setDefaultBackground(Color) default background color} of the ruler. The {@link #setWidth(int) width} of the ruler. @since 3.3
method,org/eclipse/jface/text/source/AbstractRulerColumn/getParentRuler/, Returns the parent ruler, null before {@link #createControl(CompositeRuler, Composite)} has been called. @return the parent ruler or null
method,org/eclipse/jface/text/source/AbstractRulerColumn/setFont/Font, {@inheritDoc} @param font the font or null to use the default font
method,org/eclipse/jface/text/source/AbstractRulerColumn/getDefaultBackground/, Returns the background color. May return null if the system is shutting down. @return the background color
method,org/eclipse/jface/text/source/DefaultAnnotationHover/isIncluded/Annotation, Tells whether the annotation should be included in the computation. @param annotation the annotation to test @return true if the annotation is included in the computation
method,org/eclipse/jface/text/source/DefaultAnnotationHover/formatSingleMessage/String, Hook method to format the given single message. Subclasses can change this to create a different format like HTML. @param message the message to format @return the formatted message
method,org/eclipse/jface/text/source/DefaultAnnotationHover/formatMultipleMessages/List, Hook method to formats the given messages. Subclasses can change this to create a different format like HTML. @param messages the messages to format @return the formatted message
method,org/eclipse/jface/text/source/DefaultAnnotationHover/DefaultAnnotationHover/boolean, Creates a new default annotation hover. @param showLineNumber true if the line number should be shown when no annotation is found @since 3.4
method,org/eclipse/jface/text/source/ISourceViewerExtension2/unconfigure/, Rolls back the configuration process of this source viewer. The source viewer can be configured again after a call to this method. Unlike {@link ISourceViewer#configure(SourceViewerConfiguration)} this method can be called more than once without interleaving calls to {@link ISourceViewer#configure(SourceViewerConfiguration)}.
class,org/eclipse/jface/text/source/LineNumberChangeRulerColumn, A vertical ruler column displaying line numbers and serving as a UI for quick diff. Clients usually instantiate and configure object of this class. @since 3.0
method,org/eclipse/jface/text/source/LineNumberChangeRulerColumn/showLineNumbers/boolean, Sets the line number display mode. @param showNumbers true to show numbers, false to only show diff / revision info. @since 3.3
interface,org/eclipse/jface/text/source/ISourceViewerExtension3, Extension interface for {@link org.eclipse.jface.text.source.ISourceViewer}. It introduces the concept of a quick assist assistant and provides access to the quick assist invocation context. It also gives access to any currently showing annotation hover. @see IQuickAssistAssistant @see IQuickAssistInvocationContext @since 3.2
method,org/eclipse/jface/text/source/ISourceViewerExtension3/getQuickAssistInvocationContext/, Returns this viewer's quick assist invocation context. @return the quick assist invocation context or null if none is available
class,org/eclipse/jface/text/source/ChangeRulerColumn, A vertical ruler column displaying line numbers and serving as a UI for quick diff. Clients instantiate and configure object of this class. @since 3.0
method,org/eclipse/jface/text/source/ChangeRulerColumn/postRedraw/, Triggers a redraw in the display thread.
method,org/eclipse/jface/text/source/MatchingCharacterPainter/MatchingCharacterPainter/ISourceViewer;ICharacterPairMatcher, Creates a new MatchingCharacterPainter for the given source viewer using the given character pair matcher. The character matcher is not adopted by this painter. Thus, it is not disposed. However, this painter requires exclusive access to the given pair matcher. @param sourceViewer the source viewer @param matcher the character pair matcher
method,org/eclipse/jface/text/source/AnnotationRulerColumn/mouseClicked/int, Hook method for a mouse click event on the given ruler line. Note: The event is sent on mouse up. @param rulerLine the ruler line @since 3.0
method,org/eclipse/jface/text/source/AnnotationRulerColumn/addAnnotationType/Object, Adds the given annotation type to this annotation ruler column. Starting with this call, annotations of the given type are shown in this annotation ruler column. @param annotationType the annotation type @since 3.0
method,org/eclipse/jface/text/source/IAnnotationAccess/isMultiLine/Annotation, Returns whether the given annotation spans multiple lines. @param annotation the annotation @return true if the annotation spans multiple lines, 	false otherwise @deprecated assumed to always return true
interface,org/eclipse/jface/text/source/ILineDifferExtension, Extension interface for {@link ILineDiffer}. Introduces the concept of suspending a differ. A ILineDiffer may be suspended into a dormant state, and resumed to normal operation. @since 3.1
method,org/eclipse/jface/text/source/ILineDifferExtension/resume/, Resumes the receiver. Must only be called after suspend.
method,org/eclipse/jface/text/source/SourceViewer/ensureAnnotationHoverManagerInstalled/, After this method has been executed the caller knows that any installed annotation hover has been installed.
method,org/eclipse/jface/text/source/SourceViewer/ensureOverviewHoverManagerInstalled/, After this method has been executed the caller knows that any installed overview hover has been installed.
method,org/eclipse/jface/text/source/SourceViewer/getContentAssistantFacade/, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/source/SourceViewer/rememberSelection/, Remembers and returns the current selection. The saved selection can be restored by calling restoreSelection(). @return the current selection @see org.eclipse.jface.text.ITextViewer#getSelectedRange() @since 3.0
method,org/eclipse/jface/text/source/SourceViewer/SourceViewer/Composite;IVerticalRuler;IOverviewRuler;boolean;int, Constructs a new source viewer. The vertical ruler is initially visible. The overview ruler visibility is controlled by the value of showAnnotationsOverview. The viewer has not yet been initialized with a source viewer configuration. @param parent the parent of the viewer's control @param verticalRuler the vertical ruler used by this source viewer @param overviewRuler the overview ruler @param showAnnotationsOverview true if the overview ruler should be visible, false otherwise @param styles the SWT style bits for the viewer's control, 			if SWT.WRAP is set then a custom document adapter needs to be provided, see {@link #createDocumentAdapter()} @since 2.1
field,org/eclipse/jface/text/source/SourceViewer/GAP_SIZE, The size of the gap between the vertical ruler and the text widget (value 2). Note: As of 3.2, the text editor framework is no longer using 2 as gap but 1, see {{@link #GAP_SIZE_1 }. 
field,org/eclipse/jface/text/source/SourceViewer/GAP_SIZE_1, The size of the gap between the vertical ruler and the text widget (value 1). @since 3.2
field,org/eclipse/jface/text/source/SourceViewer/fQuickAssistAssistant, This viewer's quick assist assistant. @since 3.2
field,org/eclipse/jface/text/source/SourceViewer/fQuickAssistAssistantInstalled, Flag indicating whether this viewer's quick assist assistant is installed. @since 3.2
method,org/eclipse/jface/text/source/SourceViewer/RulerLayout/SourceViewer/RulerLayout/int, Creates a new ruler layout with the given gap between text viewer and vertical ruler. @param gap the gap between text viewer and vertical ruler
field,org/eclipse/jface/text/source/SourceViewer/RulerLayout/fGap,The gap between the text viewer and the vertical ruler. 
method,org/eclipse/jface/text/source/LineNumberRulerColumn/updateNumberOfDigits/, Computes the number of digits to be displayed. Returns true if the number of digits changed compared to the previous call of this method. If the method is called for the first time, the return value is also true. @return whether the number of digits has been changed @since 3.0
method,org/eclipse/jface/text/source/LineNumberRulerColumn/paintLine/int;int;int;GC;Display, Paints the line. After this method is called the line numbers are painted on top of the result of this method. @param line the line of the document which the ruler is painted for @param y the y-coordinate of the box being painted for line, relative to gc @param lineheight the height of one line (and therefore of the box being painted) @param gc the drawing context the client may choose to draw on. @param display the display the drawing occurs on @since 3.0
method,org/eclipse/jface/text/source/LineNumberRulerColumn/postRedraw/, Triggers a redraw in the display thread. @since 3.0
method,org/eclipse/jface/text/source/OverviewRuler/OverviewRuler/IAnnotationAccess;int;ISharedTextColors, Constructs a overview ruler of the given width using the given annotation access and the given color manager. Note: As of 3.4, temporary annotations are no longer discolored. Use {@link #OverviewRuler(IAnnotationAccess, int, ISharedTextColors, boolean)} if you want to keep the old behavior. @param annotationAccess the annotation access @param width the width of the vertical ruler @param sharedColors the color manager
method,org/eclipse/jface/text/source/OverviewRuler/OverviewRuler/IAnnotationAccess;int;ISharedTextColors;boolean, Constructs a overview ruler of the given width using the given annotation access and the given color manager. @param annotationAccess the annotation access @param width the width of the vertical ruler @param sharedColors the color manager @param discolorTemporaryAnnotation true if temporary annotations should be discolored @since 3.4
method,org/eclipse/jface/text/source/IAnnotationHoverExtension/canHandleMouseCursor/, Returns whether the provided information control can interact with the mouse cursor. I.e. the hover must implement custom information control management. @return true if the mouse cursor can be handled
method,org/eclipse/jface/text/source/IAnnotationHoverExtension/getHoverInfo/ISourceViewer;ILineRange;int, Returns the object which should be presented in the a hover popup window. The information is requested based on the specified line range. @param sourceViewer the source viewer this hover is registered with @param lineRange the line range for which information is requested @param visibleNumberOfLines the number of visible lines @return the requested information or null if no such information exists
method,org/eclipse/jface/text/source/ILineDiffer/revertSelection/int;int, Reverts a range of lines to their original state, including any deleted lines inside the block or at its borders. @param line any line in the block to be reverted. @param nLines the number of lines to be reverted, must be &gt; 0. @throws BadLocationException if line is out of bounds.
method,org/eclipse/jface/text/source/ILineDiffer/restoreAfterLine/int, Restores the deleted lines after line. @param line the deleted lines following this line number are restored. @return the number of restored lines. @throws BadLocationException if line is out of bounds.
method,org/eclipse/jface/text/source/IVerticalRulerListener/annotationSelected/VerticalRulerEvent, Called when an annotation is selected in the vertical ruler. @param event the annotation event that occurred
method,org/eclipse/jface/text/source/IVerticalRulerListener/annotationDefaultSelected/VerticalRulerEvent, Called when a default selection occurs on an annotation in the vertical ruler. @param event the annotation event that occurred
method,org/eclipse/jface/text/source/IVerticalRulerListener/annotationContextMenuAboutToShow/VerticalRulerEvent;Menu, Called when the context menu is opened on an annotation in the vertical ruler. @param event the annotation event that occurred @param menu the menu that is about to be shown
method,org/eclipse/jface/text/source/CompositeRuler/CompositeRuler/int, Constructs a new composite ruler with the given gap between its columns. @param gap the gap
method,org/eclipse/jface/text/source/IVerticalRulerInfoExtension/removeVerticalRulerListener/IVerticalRulerListener, Removes a previously registered listener. If listener is not registered with the receiver, calling this method has no effect. @param listener the listener to be removed
interface,org/eclipse/jface/text/source/IVerticalRuler, This interface defines a visual component which may serve text viewers as an annotation presentation area. Implementers of this interface have to define the presentation modus. This can either depend on the connected viewer's view port or not. If the modus is view port dependent the ruler only shows those annotations that are attached to document regions that are visible in the view port. If independent, the presented annotations can also be attached to invisible document regions. This interfaces comprises three contracts: The vertical ruler retrieves the annotations it presents from an annotation model. The ruler is a visual component which must be integrated in a hierarchy of SWT controls. The ruler provides interested clients with mapping and interaction information. This covers the mapping between coordinates of the ruler's control and line numbers based on the connected text viewer's document (see {@link org.eclipse.jface.text.source.IVerticalRulerInfo}). In order to provide backward compatibility for clients of IVerticalRuler, extension interfaces are used as a means of evolution. The following extension interfaces exist: {@link org.eclipse.jface.text.source.IVerticalRulerExtension} since version 2.0 introducing setters for font and mouse button activity location. Clients may implement this interface or use the default implementation provided by {@link org.eclipse.jface.text.source.CompositeRuler} and {@link org.eclipse.jface.text.source.VerticalRuler}. @see org.eclipse.jface.text.source.IVerticalRulerExtension @see org.eclipse.jface.text.ITextViewer
method,org/eclipse/jface/text/source/IVerticalRuler/setModel/IAnnotationModel, Associates an annotation model with this ruler. A value null is acceptable and clears the ruler. @param model the new annotation model, may be null
method,org/eclipse/jface/text/source/IVerticalRuler/update/, Forces the vertical ruler to synchronize itself with its annotation model and its viewer's view port.
method,org/eclipse/jface/text/source/IVerticalRulerColumn/setModel/IAnnotationModel, Associates an annotation model with this ruler column. A value null is acceptable and clears the ruler. @param model the new annotation model, may be null
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getUndoManager/ISourceViewer, Returns the undo manager for the given source viewer. This implementation always returns a new instance of DefaultUndoManager whose history length is set to 25. @param sourceViewer the source viewer to be configured by this configuration @return an undo manager or null if no undo/redo should not be supported
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getReconciler/ISourceViewer, Returns the reconciler ready to be used with the given source viewer. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @return a reconciler or null if reconciling should not be supported
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getPresentationReconciler/ISourceViewer, Returns the presentation reconciler ready to be used with the given source viewer. @param sourceViewer the source viewer @return the presentation reconciler or null if presentation reconciling should not be supported
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getContentFormatter/ISourceViewer, Returns the content formatter ready to be used with the given source viewer. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @return a content formatter or null if formatting should not be supported
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getContentAssistant/ISourceViewer, Returns the content assistant ready to be used with the given source viewer. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @return a content assistant or null if content assist should not be supported
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getQuickAssistAssistant/ISourceViewer, Returns the quick assist assistant ready to be used with the given source viewer. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @return a quick assist assistant or null if quick assist should not be supported @since 3.2
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getDefaultPrefixes/ISourceViewer;String, Returns the default prefixes to be used by the line-prefix operation in the given source viewer for text of the given content type. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @param contentType the content type for which the prefix is applicable @return the default prefixes or null if the prefix operation should not be supported @since 2.0
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getDoubleClickStrategy/ISourceViewer;String, Returns the double-click strategy ready to be used in this viewer when double clicking onto text of the given content type. This implementation always returns a new instance of DefaultTextDoubleClickStrategy. @param sourceViewer the source viewer to be configured by this configuration @param contentType the content type for which the strategy is applicable @return a double-click strategy or null if double clicking should not be supported
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getAnnotationHover/ISourceViewer, Returns the annotation hover which will provide the information to be shown in a hover popup window when requested for the given source viewer. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @return an annotation hover or null if no hover support should be installed
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getOverviewRulerAnnotationHover/ISourceViewer, Returns the annotation hover which will provide the information to be shown in a hover popup window when requested for the overview ruler of the given source viewer.This implementation always returns the general annotation hover returned by getAnnotationHover. @param sourceViewer the source viewer to be configured by this configuration @return an annotation hover or null if no hover support should be installed @since 3.0
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getTextHover/ISourceViewer;String;int, Returns the text hover which will provide the information to be shown in a text hover popup window when requested for the given source viewer and the given content type. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @param contentType the content type @param stateMask the SWT event state mask @return a text hover or null if no hover support should be installed @since 2.1
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getTextHover/ISourceViewer;String, Returns the text hover which will provide the information to be shown in a text hover popup window when requested for the given source viewer and the given content type. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @param contentType the content type @return a text hover or null if no hover support should be installed
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getInformationControlCreator/ISourceViewer, Returns the information control creator. The creator is a factory creating information controls for the given source viewer. This implementation always returns a creator for DefaultInformationControl instances. @param sourceViewer the source viewer to be configured by this configuration @return the information control creator or null if no information support should be installed @since 2.0
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getInformationPresenter/ISourceViewer, Returns the information presenter which will determine and shown information requested for the current cursor position. This implementation always returns null. @param sourceViewer the source viewer to be configured by this configuration @return an information presenter null if no information presenter should be installed @since 2.0
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getConfiguredContentTypes/ISourceViewer, Returns all configured content types for the given source viewer. This list tells the caller which content types must be configured for the given source viewer, i.e. for which content types the given source viewer's functionalities must be specified. This implementation always returns new String[] { IDocument.DEFAULT_CONTENT_TYPE }. @param sourceViewer the source viewer to be configured by this configuration @return the configured content types for the given viewer
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getHyperlinkDetectors/ISourceViewer, Returns the hyperlink detectors which be used to detect hyperlinks in the given source viewer. This implementation always returns an array with an URL hyperlink detector. @param sourceViewer the source viewer to be configured by this configuration @return an array with hyperlink detectors or null if no hyperlink support should be installed @since 3.1
method,org/eclipse/jface/text/source/SourceViewerConfiguration/getHyperlinkPresenter/ISourceViewer, Returns the hyperlink presenter for the given source viewer. This implementation always returns the {@link DefaultHyperlinkPresenter}. @param sourceViewer the source viewer to be configured by this configuration @return the hyperlink presenter or null if no hyperlink support should be installed @since 3.1
method,org/eclipse/jface/text/source/IAnnotationAccessExtension/isSubtype/Object;Object, Returns true if the given annotation is of the given type or false otherwise. @param annotationType the annotation type @param potentialSupertype the potential super annotation type @return true if annotation type is a sub-type of the potential annotation super type
method,org/eclipse/jface/text/source/IAnnotationAccessExtension/getSupertypes/Object, Returns the list of super types for the given annotation type. This does not include the type itself. The index in the array of super types indicates the length of the path in the hierarchy graph to the given annotation type. @param annotationType the annotation type to check @return the super types for the given annotation type
method,org/eclipse/jface/text/source/ContentAssistantFacade/getHandler/String, Returns the handler for the given command identifier. The same handler instance will be returned when called a more than once with the same command identifier. @param commandId the command identifier @return the handler for the given command identifier @throws IllegalArgumentException if the command is not supported by this content assistant @throws IllegalStateException if called when the content assistant is uninstalled
method,org/eclipse/jface/text/source/ContentAssistantFacade/addCompletionListener/ICompletionListener, Adds a completion listener that will be informed before proposals are computed. @param listener the listener @throws IllegalStateException if called when the content assistant is uninstalled
method,org/eclipse/jface/text/source/ContentAssistantFacade/removeCompletionListener/ICompletionListener, Removes a completion listener. @param listener the listener to remove @throws IllegalStateException if called when the content assistant is uninstalled
method,org/eclipse/jface/text/source/IAnnotationHover/getHoverInfo/ISourceViewer;int, Returns the text which should be presented in the a hover popup window. This information is requested based on the specified line number. @param sourceViewer the source viewer this hover is registered with @param lineNumber the line number for which information is requested @return the requested information or null if no such information exists
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/setInformationControlCreator/IInformationControlCreator, Sets the information control creator for the additional information control. @param creator the information control creator for the additional information control
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/uninstall/, Uninstalls quick assist support from the source viewer it has previously be installed on.
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/showPossibleQuickAssists/, Shows all possible quick fixes and quick assists at the viewer's cursor position. @return an optional error message if no proposals can be computed
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/setQuickAssistProcessor/IQuickAssistProcessor, Registers a given quick assist processor for a particular content type. If there is already a processor registered, the new processor is registered instead of the old one. @param processor the quick assist processor to register, or null to remove an existing one
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/getQuickAssistProcessor/, Returns the quick assist processor to be used for the given content type. @return the quick assist processor or null if none exists
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/canAssist/IQuickAssistInvocationContext, Tells whether this assistant has assists for the given invocation context. @param invocationContext the invocation context @return true if the assistant has a fix for the given annotation
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/addCompletionListener/ICompletionListener, Adds a completion listener that will be informed before proposals are computed. @param listener the listener
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/setStatusLineVisible/boolean, Enables displaying a status line below the proposal popup. The default is not to show the status line. The contents of the status line may be set via {@link #setStatusMessage(String)}. @param show true to show a message line, false to not show one.
method,org/eclipse/jface/text/quickassist/IQuickFixableAnnotation/setQuickFixable/boolean, Sets whether there are quick fixes available for this annotation. @param state true if there are quick fixes available, false otherwise
method,org/eclipse/jface/text/quickassist/IQuickFixableAnnotation/isQuickFixable/, Tells whether there are quick fixes for this annotation. Note: This method must only be called if {@link #isQuickFixableStateSet()} returns true. @return true if this annotation offers quick fixes @throws AssertionFailedException if called when {@link #isQuickFixableStateSet()} is false
method,org/eclipse/jface/text/quickassist/IQuickAssistProcessor/getErrorMessage/, Returns the reason why this quick assist processor was unable to produce any completion proposals. @return an error message or null if no error occurred
method,org/eclipse/jface/text/quickassist/IQuickAssistProcessor/canAssist/IQuickAssistInvocationContext, Tells whether this assistant has assists for the given invocation context. @param invocationContext the invocation context @return true if the assistant has a fix for the given annotation
method,org/eclipse/jface/text/quickassist/IQuickAssistProcessor/computeQuickAssistProposals/IQuickAssistInvocationContext, Returns a list of quick assist and quick fix proposals for the given invocation context. @param invocationContext the invocation context @return an array of completion proposals or null if no proposals are available
interface,org/eclipse/jface/text/quickassist/IQuickAssistAssistantExtension, Extends {@link IQuickAssistAssistant} with the following function: 	allows to get a handler for the given command identifier 	allows to enable support for colored labels in the proposal popup @since 3.4
method,org/eclipse/jface/text/quickassist/IQuickAssistAssistantExtension/getHandler/String, Returns the handler for the given command identifier. The same handler instance will be returned when called a more than once with the same command identifier. @param commandId the command identifier @return the handler for the given command identifier @throws IllegalArgumentException if the command is not supported by this content assistant @throws IllegalStateException if called when this content assistant is uninstalled
method,org/eclipse/jface/text/quickassist/QuickAssistAssistant/possibleCompletionsClosed/, Callback to signal this quick assist assistant that the presentation of the possible completions has been stopped.
method,org/eclipse/jface/text/quickassist/QuickAssistAssistant/getHandler/String, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/quickassist/QuickAssistAssistant/enableColoredLabels/boolean, {@inheritDoc} @since 3.4
method,org/eclipse/jface/text/quickassist/IQuickAssistInvocationContext/getOffset/, Returns the offset where quick assist was invoked. @return the invocation offset or -1 if unknown
method,org/eclipse/jface/text/quickassist/IQuickAssistInvocationContext/getLength/, Returns the length of the selection at the invocation offset. @return the length of the current selection or -1 if none or unknown
method,org/eclipse/jface/commands/PersistentState/setShouldPersist/boolean, Sets whether this state should be persisted. @param persisted Whether this state should be persisted.
method,org/eclipse/jface/commands/RadioState/setRadioGroupIdentifier/String, Sets the identifier of the radio group for this piece of state. If the identifier is cleared, then the state is unregistered. @param identifier The identifier of the radio group for this state; may be null if the identifier is being cleared. 
method,org/eclipse/jface/commands/RadioState/setValue/Object, Sets the value for this object. This notifies the radio state manager of the change. @param value The new value; should be a Boolean.
class,org/eclipse/jface/action/SubStatusLineManager, A SubStatusLineManager is used to define a set of contribution items within a parent manager. Once defined, the visibility of the entire set can be changed as a unit.
method,org/eclipse/jface/action/IContributionItem/isDynamic/, Returns whether this contribution item is dynamic. A dynamic contribution item contributes items conditionally, dependent on some internal state. @return true if this item is dynamic, and false for normal items
method,org/eclipse/jface/action/IContributionItem/saveWidgetState/, Saves any state information of the control(s) owned by this contribution item. The contribution manager calls this method before disposing of the controls. @since 3.0
method,org/eclipse/jface/action/IContributionItem/setVisible/boolean, Sets whether this contribution item is visibile within its manager. @param visible true if this item should be visible, and false otherwise
method,org/eclipse/jface/action/IContributionItem/update/, Updates any SWT controls cached by this contribution item with any changes which have been made to this contribution item since the last update. Called by contribution manager update methods.
method,org/eclipse/jface/action/ICoolBarManager/setLockLayout/boolean, Locks or unlocks the layout of the underlying cool bar widget. Once the cool bar is locked, cool items cannot be repositioned by the user. Note that items can be added or removed programmatically even while the cool bar is locked. @param value true to lock the cool bar, false to unlock
method,org/eclipse/jface/action/MenuManager/createContextMenu/Control, Creates and returns an SWT context menu control for this menu, and installs all registered contributions. Does not create a new control if one already exists. Note that the menu is not expected to be dynamic. @param parent the parent control @return the menu control
method,org/eclipse/jface/action/MenuManager/createMenuBar/Shell, Creates and returns an SWT menu bar control for this menu, for use in the given Shell, and installs all registered contributions. Does not create a new control if one already exists. This implementation simply calls the createMenuBar(Decorations) method @param parent the parent decorations @return the menu control @deprecated use createMenuBar(Decorations) instead.
method,org/eclipse/jface/action/MenuManager/dispose/, Disposes of this menu manager and frees all allocated SWT resources. Notifies all contribution items of the dispose. Note that this method does not clean up references between this menu manager and its associated contribution items. Use removeAll for that purpose.
method,org/eclipse/jface/action/MenuManager/setOverrides/IContributionManagerOverrides, Sets the overrides for this contribution manager @param newOverrides the overrides for the items of this manager @since 2.0
method,org/eclipse/jface/action/MenuManager/setActionDefinitionId/String, Sets the action definition id of this action. This simply allows the menu item text to include a short cut if available. It can be used to notify a user of a key combination that will open a quick menu. @param definitionId the command definition id @since 3.4
method,org/eclipse/jface/action/MenuManager/doItemFill/IContributionItem;int, Call an IContributionItem's fill method with the implementation's widget. The default is to use the Menu widget. fill(Menu menu, int index) @param ci An IContributionItem whose fill() method should be called. @param index The position the fill() method should start inserting at. @since 3.4
method,org/eclipse/jface/action/CoolBarManager/dispose/, Disposes of this cool bar manager and frees all allocated SWT resources. Notifies all contribution items of the dispose. Note that this method does not clean up references between this cool bar manager and its associated contribution items. Use removeAll for that purpose.
interface,org/eclipse/jface/action/IToolBarManager, The IToolBarManager interface provides protocol for managing contributions to a tool bar. It extends IContributionManager but does not declare any new members; it exists only to increase the readability of code using tool bars. This package also provides a concrete tool bar manager implementation, {@link ToolBarManager ToolBarManager}. 
method,org/eclipse/jface/action/LegacyActionTools/extractMnemonic/String, Extracts the mnemonic text from the given string. @param text The text from which the mnemonic should be extracted; may be null @return The text of the mnemonic; will be {@link #MNEMONIC_NONE} if there is no mnemonic;
method,org/eclipse/jface/action/LegacyActionTools/findKeyCode/String, Maps a standard keyboard key name to an SWT key code. Key names are converted to upper case before comparison. If the key name is a single letter, for example S, its character code is returned. The following key names are known (case is ignored): BACKSPACE TAB RETURN ENTER ESC ESCAPE DELETE SPACE ARROW_UP, ARROW_DOWN, ARROW_LEFT, and ARROW_RIGHT PAGE_UP and PAGE_DOWN HOME END INSERT F1, F2 through F12 @param token the key name @return the SWT key code, -1 if no match was found @see SWT
method,org/eclipse/jface/action/LegacyActionTools/findModifier/String, Maps standard keyboard modifier key names to the corresponding SWT modifier bit. The following modifier key names are recognized (case is ignored): CTRL, SHIFT, ALT, and COMMAND. The given modifier key name is converted to upper case before comparison. @param token the modifier key name @return the SWT modifier bit, or 0 if no match was found @see SWT
method,org/eclipse/jface/action/ToolBarManager/dispose/, Disposes of this tool bar manager and frees all allocated SWT resources. Notifies all contribution items of the dispose. Note that this method does not clean up references between this tool bar manager and its associated contribution items. Use removeAll for that purpose.
method,org/eclipse/jface/action/ToolBarManager/getControl/, Returns the tool bar control for this manager. @return the tool bar control, or null if none (before creating or after disposal)
method,org/eclipse/jface/action/ToolBarManager/ToolBarManager/ToolBar, Creates a tool bar manager for an existing tool bar control. This manager becomes responsible for the control, and will dispose of it when the manager is disposed. NOTE When creating a ToolBarManager from an existing {@link ToolBar} you will not get the accessible listener provided by JFace. @see #ToolBarManager() @see #ToolBarManager(int) @param toolbar the tool bar control
method,org/eclipse/jface/action/IMenuCreator/dispose/, Disposes the menu returned by getMenu. Does nothing if there is no menu. This method will be executed only when the parent of the menu is disposed. 
class,org/eclipse/jface/action/SubToolBarManager, A SubToolBarManager monitors the additional and removal of items from a parent manager so that visibility of the entire set can be changed as a unit.
interface,org/eclipse/jface/action/IContributionManager, A contribution manager organizes contributions to such UI components as menus, toolbars and status lines. A contribution manager keeps track of a list of contribution items. Each contribution item may has an optional identifier, which can be used to retrieve items from a manager, and for positioning items relative to each other. The list of contribution items can be subdivided into named groups using special contribution items that serve as group markers. The IContributionManager interface provides general protocol for adding, removing, and retrieving contribution items. It also provides convenience methods that make it convenient to contribute actions. This interface should be implemented by all objects that wish to manage contributions. There are several implementions of this interface in this package, including ones for menus ({@link MenuManager MenuManager}), tool bars ({@link ToolBarManager ToolBarManager}), and status lines ({@link StatusLineManager StatusLineManager}). 
method,org/eclipse/jface/action/IContributionManager/getOverrides/, Returns the overrides for the items of this manager. @return the overrides for the items of this manager @since 2.0 
method,org/eclipse/jface/action/IContributionManager/insertAfter/String;IAction, Inserts a contribution item for the given action after the item with the given id. Equivalent to insertAfter(id,new ActionContributionItem(action)). @param id the contribution item id @param action the action to insert @exception IllegalArgumentException if there is no item with the given id
method,org/eclipse/jface/action/IContributionManager/insertAfter/String;IContributionItem, Inserts a contribution item after the item with the given id. @param id the contribution item id @param item the contribution item to insert @exception IllegalArgumentException if there is no item with the given id
method,org/eclipse/jface/action/IContributionManager/insertBefore/String;IContributionItem, Inserts a contribution item before the item with the given id. @param id the contribution item id @param item the contribution item to insert @exception IllegalArgumentException if there is no item with the given id
method,org/eclipse/jface/action/ContributionManager/allowItem/IContributionItem, This method allows subclasses of ContributionManager to prevent certain items in the contributions list. ContributionManager will either block or allow an addition based on the result of this method call. This can be used to prevent duplication, for example. @param itemToAdd The contribution item to be added; may be null. @return true if the addition should be allowed; false otherwise. The default implementation allows all items. @since 3.0
method,org/eclipse/jface/action/ContributionManager/dumpStatistics/, Internal debug method for printing statistics about this manager to System.out.
method,org/eclipse/jface/action/ContributionManager/getOverrides/, The ContributionManager implementation of this method declared on IContributionManager returns the current overrides. If there is no overrides it lazily creates one which overrides no item state. @since 2.0
method,org/eclipse/jface/action/ContributionManager/hasDynamicItems/, Returns whether this contribution manager contains dynamic items. A dynamic contribution item contributes items conditionally, dependent on some internal state. @return true if this manager contains dynamic items, and false otherwise
method,org/eclipse/jface/action/ContributionManager/indexOf/IContributionItem, Returns the index of the object in the internal structure. This is different from indexOf(String id) since some contribution items may not have an id. @param item The contribution item @return the index, or -1 if the item is not found @since 3.0
method,org/eclipse/jface/action/ContributionManager/replaceItem/String;IContributionItem, Replaces the item of the given identifier with another contribution item. This can be used, for example, to replace large contribution items with placeholders to avoid memory leaks. If the identifier cannot be found in the current list of items, then this does nothing. If multiple occurrences are found, then the replacement items is put in the first position and the other positions are removed. @param identifier The identifier to look for in the list of contributions; should not be null. @param replacementItem The contribution item to replace the old item; must not be null. Use {@link org.eclipse.jface.action.ContributionManager#remove(java.lang.String) remove} if that is what you want to do. @return true if the given identifier can be; @since 3.0
method,org/eclipse/jface/action/ContributionManager/setOverrides/IContributionManagerOverrides, Sets the overrides for this contribution manager @param newOverrides the overrides for the items of this manager @since 2.0
method,org/eclipse/jface/action/IMenuManager/getRemoveAllWhenShown/, Returns whether all items should be removed when the menu is about to show, but before notifying menu listeners. The default is false. @return true if all items should be removed when shown, false if not
method,org/eclipse/jface/action/IMenuManager/isEnabled/, Returns whether this menu should be enabled or not. @return true if enabled, and false if disabled
method,org/eclipse/jface/action/IMenuManager/setRemoveAllWhenShown/boolean, Sets whether all items should be removed when the menu is about to show, but before notifying menu listeners. @param removeAll true if all items should be removed when shown, false if not
method,org/eclipse/jface/action/IAction/getDescription/, Returns the action's description if it has one. Otherwise it returns getToolTipText(). @return a description for the action; may be null 
method,org/eclipse/jface/action/IAction/isChecked/, Returns the checked status of this action. Applicable only if the style is AS_CHECK_BOX or AS_RADIO_BUTTON. This method is associated with the CHECKED property; property change events are reported when its value changes. @return the checked status @see #CHECKED
method,org/eclipse/jface/action/IAction/isHandled/, Returns whether this action is handled. In the default case, this is always true. However, if the action delegates some of its behaviour to some other object, then this method should answer whether such an object is currently available. @return true if all of the action's behaviour is available; false otherwise. @since 3.1
method,org/eclipse/jface/action/IAction/run/, Runs this action. Each action implementation must define the steps needed to carry out this action. The default implementation of this method in Action does nothing.
method,org/eclipse/jface/action/IAction/runWithEvent/Event, Runs this action, passing the triggering SWT event. As of 2.0, ActionContributionItem calls this method instead of run(). The default implementation of this method in Action simply calls run() for backwards compatibility. @param event the SWT event which triggered this action being run @since 2.0
method,org/eclipse/jface/action/IAction/setDisabledImageDescriptor/ImageDescriptor, Sets the disabled image for this action, as an image descriptor. Disabled images will be used on platforms that support changing the image when the item is disabled.Fires a property change event for the IMAGE property if the image actually changes as a consequence. @param newImage the image, or null if this action should not have an image @see #IMAGE
method,org/eclipse/jface/action/IAction/setHoverImageDescriptor/ImageDescriptor, Sets the hover image for this action, as an image descriptor. Hover images will be used on platforms that support changing the image when the user hovers over the item.Fires a property change event for the IMAGE property if the image actually changes as a consequence. @param newImage the image, or null if this action should not have an image @see #IMAGE
method,org/eclipse/jface/action/IAction/setImageDescriptor/ImageDescriptor, Sets the image for this action, as an image descriptor. Fires a property change event for the IMAGE property if the image actually changes as a consequence. Note: This operation is a hint and is not supported in all contexts on platforms that do not have this concept (for example, Windows NT). Furthermore, some platforms (such as GTK), cannot display both a check box and an image at the same time. Instead, they hide the image and display the check box. @param newImage the image, or null if this action should not have an image @see #IMAGE
method,org/eclipse/jface/action/IAction/setText/String, Sets the text for this action. An accelerator specification may follow the actual text, separated from it by an '@' or a '\t' character. An accelerator specification consists of zero or more modifier tokens followed by a key code token. The tokens are separated by a '+' character. Fires a property change event for the TEXT property if the text actually changes as a consequence. @param text the text, or null if none @see #TEXT @see Action#findModifier @see Action#findKeyCode
field,org/eclipse/jface/action/IAction/AS_UNSPECIFIED, Action style constant (value 0) indicating action style is not specified yet. By default, the action will assume a push button style. If setChecked is called, then the style will change to a check box, or if setMenuCreator is called, then the style will change to a drop down menu. @since 2.1
field,org/eclipse/jface/action/IAction/HANDLED, Property name of an action's handler. Some actions delegate some or all of their behaviour or state to another object. In this case, if the object to which behaviour has been delegated changes, then a property change event should be sent with this name. This is used to support backward compatibility of actions within the commands framework. @since 3.1
class,org/eclipse/jface/action/SubCoolBarManager, A SubCoolBarManager monitors the additional and removal of items from a parent manager so that visibility of the entire set can be changed as a unit. @since 3.0
method,org/eclipse/jface/action/Action/findKeyCode/String, Maps a standard keyboard key name to an SWT key code. Key names are converted to upper case before comparison. If the key name is a single letter, for example S, its character code is returned. The following key names are known (case is ignored): BACKSPACE TAB RETURN ENTER ESC ESCAPE DELETE SPACE ARROW_UP, ARROW_DOWN, ARROW_LEFT, and ARROW_RIGHT PAGE_UP and PAGE_DOWN HOME END INSERT F1, F2 through F12 @param token the key name @return the SWT key code, -1 if no match was found @see org.eclipse.swt.SWT
method,org/eclipse/jface/action/Action/findModifier/String, Maps standard keyboard modifier key names to the corresponding SWT modifier bit. The following modifier key names are recognized (case is ignored): CTRL, SHIFT, ALT, and COMMAND. The given modifier key name is converted to upper case before comparison. @param token the modifier key name @return the SWT modifier bit, or 0 if no match was found @see org.eclipse.swt.SWT
method,org/eclipse/jface/action/Action/setMenuCreator/IMenuCreator, Sets the menu creator for this action. Note that if this method is called, it overrides the check status. @param creator the menu creator, or null if none
method,org/eclipse/jface/action/Action/setText/String, Sets the text for this action. Fires a property change event for the TEXT property if the text actually changes as a consequence. The accelerator is identified by the last index of a tab character. If there are no tab characters, then it is identified by the last index of a '@' character. If neither, then there is no accelerator text. Note that if you want to insert a '@' character into the text (but no accelerator, you can simply insert a '@' or a tab at the end of the text. @param text the text, or null if none
method,org/eclipse/jface/action/Action/Action/String, Creates a new action with the given text and no image. Calls the zero-arg constructor, then setText. @param text the string used as the text for the action, or null if there is no text @see #setText
method,org/eclipse/jface/action/Action/Action/String;ImageDescriptor, Creates a new action with the given text and image. Calls the zero-arg constructor, then setText and setImageDescriptor. @param text the action's text, or null if there is no text @param image the action's image, or null if there is no image @see #setText @see #setImageDescriptor
method,org/eclipse/jface/action/ExternalActionManager/getInstance/, Retrieves the current singleton instance of this class. @return The singleton instance; this value is never null.
method,org/eclipse/jface/action/ExternalActionManager/getCallback/, An accessor for the current call back. @return The current callback mechanism being used. This is the callback that should be queried for extra information about actions and action contribution items. This value may be null if there is no extra information.
method,org/eclipse/jface/action/ExternalActionManager/setCallback/ICallback, A mutator for the current call back @param callbackToUse The new callback mechanism to use; this value may be null if the default is acceptable (i.e., no extra information will provided to actions).
method,org/eclipse/jface/action/ExternalActionManager/CommandCallback/getActiveBindingsFor/String, Returns the active bindings for a particular command identifier. @param commandId The identifier of the command whose bindings are requested. This argument may be null. It is assumed that the command has no parameters. @return The array of active triggers (TriggerSequence) for a particular command identifier. This value is guaranteed not to be null, but it may be empty. @since 3.2
method,org/eclipse/jface/action/ExternalActionManager/CommandCallback/isActive/String, {@inheritDoc} Calling this method with an undefined command id will generate a log message.
method,org/eclipse/jface/action/ExternalActionManager/CommandCallback/notEnabled/IAction;NotEnabledException, @since 3.4
interface,org/eclipse/jface/action/ExternalActionManager/IActiveChecker, Defines a callback mechanism for developer who wish to further control the visibility of legacy action-based contribution items. @since 3.1
method,org/eclipse/jface/action/ExternalActionManager/IActiveChecker/isActive/String, Checks whether the command with the given identifier should be considered active. This can be used in systems using some kind of user interface filtering (e.g., activities in the Eclipse workbench). @param commandId The identifier for the command; must not be null @return true if the command is active; false otherwise.
method,org/eclipse/jface/action/ExternalActionManager/IBindingManagerCallback/getActiveBindingsFor/String, Returns the active bindings for a particular command identifier. @param commandId The identifier of the command whose bindings are requested. This argument may be null. It is assumed that the command has no parameters. @return The array of active triggers (TriggerSequence) for a particular command identifier. This value is guaranteed not to be null, but it may be empty.
interface,org/eclipse/jface/action/ExternalActionManager/IExecuteApplicable, An overridable mechanism to filter certain IActions from the execution bridge. @since 3.4
method,org/eclipse/jface/action/ExternalActionManager/IExecuteApplicable/isApplicable/IAction, Allow the callback to filter out actions that should not fire execution events. @param action The action with an actionDefinitionId @return true if this action should be considered.
method,org/eclipse/jface/action/ExternalActionManager/IExecuteCallback/notEnabled/IAction;NotEnabledException, Fires a NotEnabledException because the action was not enabled. @param action 			The action contribution that caused the exception, 			never null. @param exception 			The NotEnabledException, never null.
method,org/eclipse/jface/action/ExternalActionManager/IExecuteCallback/notDefined/IAction;NotDefinedException, Fires a NotDefinedException because the action was not defined. @param action 			The action contribution that caused the exception, 			never null. @param exception 			The NotDefinedException, never null.
method,org/eclipse/jface/action/ExternalActionManager/IExecuteCallback/postExecuteFailure/IAction;ExecutionException, Creates an ExecutionException when the action returned a failure. @param action 			The action contribution that caused the exception, 			never null. @param exception 			The ExecutionException, never null.
interface,org/eclipse/jface/action/ExternalActionManager/ICallback, A callback mechanism for some external tool to communicate extra information to actions and action contribution items. @since 3.0
method,org/eclipse/jface/action/ExternalActionManager/ICallback/getAccelerator/String, An accessor for the accelerator associated with the item indicated by the identifier. This identifier is specific to mechanism being used. In the case of the Eclipse workbench, this is the command identifier. @param identifier The identifier of the item from which the accelerator should be obtained ; must not be null. @return An integer representation of the accelerator. This is the same accelerator format used by SWT.
method,org/eclipse/jface/action/ExternalActionManager/ICallback/isActive/String, Checks whether the item matching this identifier is active. This is used to decide whether a contribution item with this identifier should be made visible. An inactive item is not visible. @param identifier The identifier of the item from which the active state should be retrieved; must not be null. @return true if the item is active; false otherwise.
method,org/eclipse/jface/action/ExternalActionManager/ICallback/removePropertyChangeListener/String;IPropertyChangeListener, Removes a listener from the object referenced by identifier. This identifier is specific to mechanism being used. In the case of the Eclipse workbench, this is the command identifier. @param identifier The identifier of the item to from the listener should be removed; must not be null. @param listener The listener to be removed; must not be null.
method,org/eclipse/jface/action/ContributionItem/isVisible/, The default implementation of this IContributionItem method returns the value recorded in an internal state variable, which is true by default. setVisible should be used to change this setting.
method,org/eclipse/jface/action/ContributionItem/toString/, Returns a string representation of this contribution item suitable only for debugging.
method,org/eclipse/jface/action/ContributionItem/update/String, The ContributionItem implementation of this method declared on IContributionItem does nothing. Subclasses should override to update their state.
method,org/eclipse/jface/action/ContributionItem/ContributionItem/, Creates a contribution item with a null id. Calls this(String) with null.
method,org/eclipse/jface/action/AbstractGroupMarker/AbstractGroupMarker/, Constructor for use by subclasses.
method,org/eclipse/jface/action/IContributionManagerOverrides/getEnabled/IContributionItem, Find out the enablement of the item @param item the contribution item for which the enable override value is determined @return 				Boolean.TRUE if the given contribution item should be enabled 				Boolean.FALSE if the item should be disabled 				null if the item may determine its own enablement 			 @since 2.0 
method,org/eclipse/jface/action/IContributionManagerOverrides/getVisible/IContributionItem, Visiblity override. @param item the contribution item in question @return 				Boolean.TRUE if the given contribution item should be visible 				Boolean.FALSE if the item should not be visible 				null if the item may determine its own visibility 			 @since 3.5
class,org/eclipse/jface/action/SubMenuManager, A SubMenuManager is used to define a set of contribution items within a parent manager. Once defined, the visibility of the entire set can be changed as a unit. A client may ask for and make additions to a submenu. The visibility of these items is also controlled by the visibility of the SubMenuManager. 
method,org/eclipse/jface/action/SubMenuManager/findMenuUsingPath/String, The menu returned is wrapped within a SubMenuManager to monitor additions and removals. If the visibility of this menu is modified the visibility of the submenus is also modified. 
method,org/eclipse/jface/action/SubMenuManager/getWrapper/IMenuManager, Returns the menu wrapper for a menu manager. The sub menus within this menu are wrapped within a SubMenuManager to monitor additions and removals. If the visibility of this menu is modified the visibility of the sub menus is also modified. @param mgr the menu manager to be wrapped @return the menu wrapper
interface,org/eclipse/jface/action/IStatusLineManager, The IStatusLineManager interface provides protocol for displaying messages on a status line, for monitoring progress, and for managing contributions to the status line. Note: An error message overrides the current message until the error message is cleared. This package also provides a concrete status line manager implementation, {@link StatusLineManager StatusLineManager}. 
method,org/eclipse/jface/action/IStatusLineManager/getProgressMonitor/, Returns a progress monitor which reports progress in the status line. Note that the returned progress monitor may only be accessed from the UI thread. @return the progress monitor Note: There is a delay after a beginTask message before the monitor is shown. This may not be appropriate for all apps.
method,org/eclipse/jface/action/IStatusLineManager/setErrorMessage/String, Sets the error message text to be displayed on the status line. The image on the status line is cleared. An error message overrides the current message until the error message is cleared (set to null). @param message the error message, or null to clear 		the current error message.
method,org/eclipse/jface/action/IStatusLineManager/setErrorMessage/Image;String, Sets the image and error message to be displayed on the status line. An error message overrides the current message until the error message is cleared (set to null). @param image the image to use, or null for no image @param message the error message, or null to clear 		the current error message.
method,org/eclipse/jface/action/IStatusLineManager/setMessage/String, Sets the message text to be displayed on the status line. The image on the status line is cleared. This method replaces the current message but does not affect the error message. That is, the error message, if set, will continue to be displayed until it is cleared (set to null). @param message the message, or null for no message
method,org/eclipse/jface/action/IStatusLineManager/setMessage/Image;String, Sets the image and message to be displayed on the status line. This method replaces the current message but does not affect the error message. That is, the error message, if set, will continue to be displayed until it is cleared (set to null). @param image the image to use, or null for no image @param message the message, or null for no message
method,org/eclipse/jface/action/StatusLineManager/createControl/Composite, Creates and returns this manager's status line control. Does not create a new control if one already exists. Note: Since 3.0 the return type is Control. Before 3.0, the return type was the package-private class StatusLine. @param parent the parent control @return the status line control
method,org/eclipse/jface/action/StatusLineManager/dispose/, Disposes of this status line manager and frees all allocated SWT resources. Notifies all contribution items of the dispose. Note that this method does not clean up references between this status line manager and its associated contribution items. Use removeAll for that purpose.
field,org/eclipse/jface/action/ToolBarContributionItem/SHOW_ALL_ITEMS, A constant used by setMinimumItemsToShow and getMinimumItemsToShow to indicate that all tool items should be shown in the cool item.
method,org/eclipse/jface/action/ActionContributionItem/getUseColorIconsInToolbars/, Returns whether color icons should be used in toolbars. @return true if color icons should be used in toolbars, false otherwise
method,org/eclipse/jface/action/ActionContributionItem/setUseColorIconsInToolbars/boolean, Sets whether color icons should be used in toolbars. @param useColorIcons true if color icons should be used in toolbars, false otherwise
method,org/eclipse/jface/action/ActionContributionItem/getMode/, Returns the presentation mode, which is the bitwise-or of the MODE_* constants. The default mode setting is 0, meaning that for menu items, both text and image are shown (if present), but for tool items, the text is shown only if there is no image. @return the presentation mode settings @since 3.0
method,org/eclipse/jface/action/ActionContributionItem/isVisible/, The ActionContributionItem implementation of this ContributionItem method extends the super implementation by also checking whether the command corresponding to this action is active.
method,org/eclipse/jface/action/ActionContributionItem/update/, The action item implementation of this IContributionItem method calls update(null).
method,org/eclipse/jface/action/ActionContributionItem/update/String, Synchronizes the UI with the given property. @param propertyName the name of the property, or null meaning all applicable properties
method,org/eclipse/jface/action/ActionContributionItem/getWidget/, Return the widget associated with this contribution item. It should not be cached, as it can be disposed and re-created by its containing ContributionManager, which controls all of the widgets lifecycle methods. This can be used to set layout data on the widget if appropriate. The actual type of the widget can be any valid control for this ContributionItem's current ContributionManager. @return the widget, or null depending on the lifecycle. @since 3.4
field,org/eclipse/jface/action/ActionContributionItem/MODE_FORCE_TEXT, Mode bit: Show text on tool items or buttons, even if an image is present. If this mode bit is not set, text is only shown on tool items if there is no image present. @since 3.0
class,org/eclipse/jface/action/SubContributionManager, A SubContributionManager is used to define a set of contribution items within a parent manager. Once defined, the visibility of the entire set can be changed as a unit.
method,org/eclipse/jface/action/SubContributionManager/unwrap/IContributionItem, Unwraps a nested contribution item. If the contribution item is an instance of SubContributionItem, then its inner item is returned. Otherwise, the item itself is returned. @param item The item to unwrap; may be null. @return The inner item of item, if item is a SubContributionItem;item otherwise.
method,org/eclipse/jface/action/StatusLineContributionItem/setText/String, Sets the text to be displayed in the status line. @param text the text to be displayed, must not be null
class,org/eclipse/jface/util/DelegatingDragAdapter, A DelegatingDragAdapter is a DragSourceListener that maintains and delegates to a set of {@link TransferDragSourceListener}s. Each TransferDragSourceListener can then be implemented as if it were the DragSource's only DragSourceListener. When a drag is started, a subset of all TransferDragSourceListeners is generated and stored in a list of active listeners. This subset is calculated by forwarding {@link DragSourceListener#dragStart(DragSourceEvent)} to every listener, and checking if the {@link DragSourceEvent#doit doit} field is left set to true. The DragSource's set of supported Transfer types ({@link DragSource#setTransfer(Transfer[])}) is updated to reflect the Transfer types corresponding to the active listener subset. If and when {@link #dragSetData(DragSourceEvent)} is called, a single TransferDragSourceListener is chosen, and only it is allowed to set the drag data. The chosen listener is the first listener in the subset of active listeners whose Transfer supports ({@link Transfer#isSupportedType(TransferData)}) the dataType in the DragSourceEvent. The following example snippet shows a DelegatingDragAdapter with two TransferDragSourceListeners. One implements drag of text strings, the other supports file transfer and demonstrates how a listener can be disabled using the dragStart method. 		final TreeViewer viewer = new TreeViewer(shell, SWT.NONE);				DelegatingDragAdapter dragAdapter = new DelegatingDragAdapter();				dragAdapter.addDragSourceListener(new TransferDragSourceListener() {			public Transfer getTransfer() {				return TextTransfer.getInstance();			}			public void dragStart(DragSourceEvent event) {				// always enabled, can control enablement based on selection etc.			}			public void dragSetData(DragSourceEvent event) {				event.data = Transfer data;			}			public void dragFinished(DragSourceEvent event) {				// no clean-up required			}		});		dragAdapter.addDragSourceListener(new TransferDragSourceListener() {			public Transfer getTransfer() {				return FileTransfer.getInstance();			}			public void dragStart(DragSourceEvent event) {				// enable drag listener if there is a viewer selection				event.doit = !viewer.getSelection().isEmpty();			}			public void dragSetData(DragSourceEvent event) {				File file1 = new File(C:/temp/file1);				File file2 = new File(C:/temp/file2);				event.data = new String[] {file1.getAbsolutePath(), file2.getAbsolutePath()};			}			public void dragFinished(DragSourceEvent event) {				// no clean-up required			}		});		viewer.addDragSupport(DND.DROP_COPY | DND.DROP_MOVE, dragAdapter.getTransfers(), dragAdapter); @since 3.0
method,org/eclipse/jface/util/DelegatingDragAdapter/removeDragSourceListener/TransferDragSourceListener, Removes the given TransferDragSourceListener. Listeners should not be removed while a drag and drop operation is in progress. @param listener the TransferDragSourceListener to remove
interface,org/eclipse/jface/util/TransferDragSourceListener, A TransferDragSourceListener is a DragSourceListener that can handle one type of SWT {@link Transfer}. The purpose of a TransferDragSourceListener is to: Determine enablement for a drag operation. A TransferDragSourceListener 	will not be used in a drag operation if the DragSourceEvent#doit field 	is set to false in DragSourceListener#dragStart(DragSourceEvent). Set data for a single type of drag and Transfer type. A DelegatingDragAdapter allows these functions to be implemented separately for unrelated types of drags. DelegatingDragAdapter then combines the function of each TransferDragSourceListener, while allowing them to be implemented as if they were the only DragSourceListener. @since 3.0
method,org/eclipse/jface/util/LocalSelectionTransfer/javaToNative/Object;TransferData, Overrides org.eclipse.swt.dnd.ByteArrayTransfer#javaToNative(Object, TransferData). Only encode the transfer type name since the selection is read and written in the same process. @see org.eclipse.swt.dnd.ByteArrayTransfer#javaToNative(java.lang.Object, org.eclipse.swt.dnd.TransferData)
method,org/eclipse/jface/util/LocalSelectionTransfer/nativeToJava/TransferData, Overrides org.eclipse.swt.dnd.ByteArrayTransfer#nativeToJava(TransferData). Test if the native drop data matches this transfer type. @see org.eclipse.swt.dnd.ByteArrayTransfer#nativeToJava(TransferData)
method,org/eclipse/jface/util/LocalSelectionTransfer/LocalSelectionTransfer/, Only the singleton instance of this class may be used. 
class,org/eclipse/jface/util/Assert, Assert is useful for for embedding runtime sanity checks in code. The static predicate methods all test a condition and throw some type of unchecked exception if the condition does not hold. Assertion failure exceptions, like most runtime exceptions, are thrown when something is misbehaving. Assertion failures are invariably unspecified behavior; consequently, clients should never rely on these being thrown (or not thrown). If you find yourself in the position where you need to catch an assertion failure, you have most certainly written your program incorrectly. Note that an assert statement is slated to be added to the Java language in JDK 1.4, rending this class obsolete. @deprecated As of 3.3, replaced by {@link org.eclipse.core.runtime.Assert} 
method,org/eclipse/jface/util/Assert/isLegal/boolean;String, Asserts that an argument is legal. If the given boolean is not true, an IllegalArgumentException is thrown. The given message is included in that exception, to aid debugging. @param expression the outcome of the check @param message the message to include in the exception @return true if the check passes (does not return if the check fails) @exception IllegalArgumentException if the legality test failed
method,org/eclipse/jface/util/Assert/isTrue/boolean;String, Asserts that the given boolean is true. If this is not the case, some kind of unchecked exception is thrown. The given message is included in that exception, to aid debugging. @param expression the outcome of the check @param message the message to include in the exception @return true if the check passes (does not return if the check fails)
method,org/eclipse/jface/util/Geometry/distanceSquared/Point;Point, Returns the square of the distance between two points. This is preferred over the real distance when searching for the closest point, since it avoids square roots. @param p1 first endpoint @param p2 second endpoint @return the square of the distance between the two points @since 3.0
method,org/eclipse/jface/util/Geometry/subtract/Rectangle;Rectangle, Returns a new difference Rectangle whose x, y, width, and height are equal to the difference of the corresponding attributes from the given rectangles Example: Compute the margins for a given Composite, and apply those same margins to a new GridLayout // Compute the client area, in the coordinate system of the input composite's parent Rectangle clientArea = Display.getCurrent().map(inputComposite, 	inputComposite.getParent(), inputComposite.getClientArea()); // Compute the margins for a given Composite by subtracting the client area from the composite's bounds Rectangle margins = Geometry.subtract(inputComposite.getBounds(), clientArea); // Now apply these margins to a new GridLayout GridLayout layout = GridLayoutFactory.fillDefaults().margins(margins).create(); @param rect1 first rectangle @param rect2 rectangle to subtract @return the difference between the two rectangles (computed as rect1 - rect2) @since 3.3
method,org/eclipse/jface/util/Geometry/getExtrudedEdge/Rectangle;int;int, Extrudes the given edge inward by the given distance. That is, if one side of the rectangle was sliced off with a given thickness, this returns the rectangle that forms the slice. Note that the returned rectangle will be inside the given rectangle if size > 0. @param toExtrude the rectangle to extrude. The resulting rectangle will share three sides with this rectangle. @param size distance to extrude. A negative size will extrude outwards (that is, the resulting rectangle will overlap the original iff this is positive). @param orientation the side to extrude. One of SWT.LEFT, SWT.RIGHT, SWT.TOP, or SWT.BOTTOM. The resulting rectangle will always share this side with the original rectangle. @return a rectangle formed by extruding the given side of the rectangle by the given distance. @since 3.0
method,org/eclipse/jface/util/Geometry/normalize/Rectangle, Normalizes the given rectangle. That is, any rectangle with negative width or height becomes a rectangle with positive width or height that extends to the upper-left of the original rectangle. @param rect rectangle to modify @since 3.0
method,org/eclipse/jface/util/Geometry/getDistanceFrom/Rectangle;Point, Returns the distance from the point to the nearest edge of the given rectangle. Returns negative values if the point lies outside the rectangle. @param boundary rectangle to test @param toTest point to test @return the distance between the given point and the nearest edge of the rectangle. Returns positive values for points inside the rectangle and negative values for points outside the rectangle. @since 3.1
method,org/eclipse/jface/util/Geometry/moveInside/Rectangle;Rectangle, Repositions the 'inner' rectangle to lie completely within the bounds of the 'outer' rectangle if possible. One use for this is to ensure that, when setting a control's bounds, that they will always lie within its parent's client area (to avoid clipping). @param inner The 'inner' rectangle to be repositioned (should be smaller than the 'outer' rectangle) @param outer The 'outer' rectangle
method,org/eclipse/jface/util/IPropertyChangeListener/propertyChange/PropertyChangeEvent, Notification that a property has changed. This method gets called when the observed object fires a property change event. @param event the property change event object describing which property changed and how
method,org/eclipse/jface/util/IOpenEventListener/handleOpen/SelectionEvent, Called when a selection or default selection occurs depending on the user preference. @param e the selection event
method,org/eclipse/jface/util/PropertyChangeEvent/getProperty/, Returns the name of the property that changed. Warning: there is no guarantee that the property name returned is a constant string. Callers must compare property names using equals, not ==. @return the name of the property that changed
method,org/eclipse/jface/util/PropertyChangeEvent/PropertyChangeEvent/Object;String;Object;Object, Creates a new property change event. @param source the object whose property has changed @param property the property that has changed (must not be null) @param oldValue the old value of the property, or null if none @param newValue the new value of the property, or null if none
method,org/eclipse/jface/util/OpenStrategy/activateOnOpen/, @return true if editors should be activated when opened. 
field,org/eclipse/jface/util/OpenStrategy/FILE_EXPLORER,A single click will generate an open event and key arrows will generate an open event after a small time. @deprecated
class,org/eclipse/jface/util/Policy, The Policy class handles settings for behaviour, debug flags and logging within JFace. @since 3.0
method,org/eclipse/jface/util/Policy/setLog/ILogger, Sets the logger used by JFace to log errors. @param logger the logger to use, or null to use the default logger @since 3.1
method,org/eclipse/jface/util/Policy/getLog/, Returns the logger used by JFace to log errors. The default logger prints the status to System.err. @return the logger @since 3.1
method,org/eclipse/jface/util/Policy/setErrorSupportProvider/ErrorSupportProvider, Set the error support provider for error dialogs. @param provider @since 3.3
method,org/eclipse/jface/util/Policy/getErrorSupportProvider/, Return the ErrorSupportProvider for the receiver. @return ErrorSupportProvider or null if this has not been set @since 3.3
field,org/eclipse/jface/util/Policy/DEFAULT, Constant for the the default setting for debug options.
field,org/eclipse/jface/util/Policy/DEBUG_DIALOG_NO_PARENT, A flag to indicate whether unparented dialogs should be checked.
interface,org/eclipse/jface/util/TransferDropTargetListener, A TransferDropTargetListener is a DropTragetListener that handles one type of SWT {@link Transfer}. The purpose of a TransferDropTargetListener is to: Determine enablement for a drop operation. A TransferDropTargetListener 		will not be used if isEnabled returns false. When enabled, optionally show feedback on the DropTarget. Perform the actual drop A DelegatingDropAdapter allows these functions to be implemented separately for unrelated types of drags. DelegatingDropAdapter then combines the function of each TransferDropTargetListener, while allowing them to be implemented as if they were the only DragSourceListener. @since 3.0
method,org/eclipse/jface/util/TransferDropTargetListener/isEnabled/DropTargetEvent, Returns true if this listener can handle the drop based on the given DropTargetEvent. This method is called by the DelegatingDropAdapter only if the DropTargetEvent contains a transfer data type supported by this listener. The Transfer returned by the #getTransfer() method is used for this purpose. @param event the drop target event @return true if the listener is enabled for the given 	drop target event.
class,org/eclipse/jface/util/SafeRunnable, Implements a default implementation of ISafeRunnable. The default implementation of handleException opens a dialog to show any errors as they accumulate. This may be executed on any thread.
method,org/eclipse/jface/util/SafeRunnable/getIgnoreErrors/boolean, Flag to avoid interactive error dialogs during automated testing. @param flag @return true if errors should be ignored @deprecated use getIgnoreErrors()
method,org/eclipse/jface/util/SafeRunnable/getIgnoreErrors/, Flag to avoid interactive error dialogs during automated testing. @return true if errors should be ignored @since 3.0
method,org/eclipse/jface/util/SafeRunnable/setIgnoreErrors/boolean, Flag to avoid interactive error dialogs during automated testing. @param flag set to true if errors should be ignored
method,org/eclipse/jface/util/SafeRunnable/SafeRunnable/, Creates a new instance of SafeRunnable with a default error message.
method,org/eclipse/jface/util/SafeRunnable/SafeRunnable/String, Creates a new instance of SafeRunnable with the given error message. @param message the error message to use
class,org/eclipse/jface/util/StatusHandler, A mechanism to handle statuses throughout JFace. Clients may provide their own implementation to change how statuses are handled from within JFace. @see org.eclipse.jface.util.Policy#getStatusHandler() @see org.eclipse.jface.util.Policy#setStatusHandler(StatusHandler) @since 3.4
interface,org/eclipse/jface/util/ILogger, A mechanism to log errors throughout JFace. Clients may provide their own implementation to change how errors are logged from within JFace. @see org.eclipse.jface.util.Policy#getLog() @see org.eclipse.jface.util.Policy#setLog(ILogger) @since 3.1
interface,org/eclipse/jface/util/ISafeRunnableRunner, Runs a safe runnables. Clients may provide their own implementation to change how safe runnables are run from within JFace. @see SafeRunnable#getRunner() @see SafeRunnable#setRunner(ISafeRunnableRunner) @see SafeRunnable#run(ISafeRunnable) @since 3.1
method,org/eclipse/jface/util/ListenerList/ListenerList/int, Creates a listener list with the given initial capacity. @param capacity the number of listeners which this list can initially accept without growing its internal representation; must be at least 1
method,org/eclipse/jface/util/Util/assertInstance/Object;Class, Verifies that the given object is an instance of the given class. @param object The object to check; may be null. @param c The class which the object should be; must not be null.
method,org/eclipse/jface/util/Util/compare/Comparable;Comparable, Compares to comparable objects -- defending against null. @param left The left object to compare; may be null. @param right The right object to compare; may be null. @return The result of the comparison. null is considered to be the least possible value.
method,org/eclipse/jface/util/Util/compare/Comparable[];Comparable[], Compares two arrays of comparable objects -- accounting for null. @param left The left array to be compared; may be null. @param right The right array to be compared; may be null. @return The result of the comparison. null is considered to be the least possible value. A shorter array is considered less than a longer array.
method,org/eclipse/jface/util/Util/compare/List;List, Compares two lists -- account for null. The lists must contain comparable objects. @param left The left list to compare; may be null. This list must only contain instances of Comparable. @param right The right list to compare; may be null. This list must only contain instances of Comparable. @return The result of the comparison. null is considered to be the least possible value. A shorter list is considered less than a longer list.
method,org/eclipse/jface/util/Util/endsWith/Object[];Object[];boolean, Tests whether the first array ends with the second array. @param left The array to check (larger); may be null. @param right The array that should be a subsequence (smaller); may be null. @param equals Whether the two array are allowed to be equal. @return true if the second array is a subsequence of the array list, and they share end elements.
method,org/eclipse/jface/util/Util/equals/Object;Object, Checks whether the two objects are null -- allowing for null. @param left The left object to compare; may be null. @param right The right object to compare; may be null. @return true if the two objects are equivalent; false otherwise.
method,org/eclipse/jface/util/Util/equals/Object[];Object[], Tests whether two arrays of objects are equal to each other. The arrays must not be null, but their elements may be null. @param leftArray The left array to compare; may be null, and may be empty and may contain null elements. @param rightArray The right array to compare; may be null, and may be empty and may contain null elements. @return true if the arrays are equal length and the elements at the same position are equal; false otherwise.
method,org/eclipse/jface/util/Util/hashCode/Object, Provides a hash code for the object -- defending against null. @param object The object for which a hash code is required. @return object.hashCode or 0 if object if null.
method,org/eclipse/jface/util/Util/hashCode/Object[], Computes the hash code for an array of objects, but with defense against null. @param objects The array of objects for which a hash code is needed; may be null. @return The hash code for objects; or 0 if objects is null.
method,org/eclipse/jface/util/Util/startsWith/Object[];Object[];boolean, Checks whether the second array is a subsequence of the first array, and that they share common starting elements. @param left The first array to compare (large); may be null. @param right The second array to compare (small); may be null. @param equals Whether it is allowed for the two arrays to be equivalent. @return true if the first arrays starts with the second list; false otherwise.
method,org/eclipse/jface/util/Util/translateString/ResourceBundle;String;String, Provides a translation of a particular key from the resource bundle. @param resourceBundle The key to look up in the resource bundle; should not be null. @param key The key to look up in the resource bundle; should not be null. @param defaultString The value to return if the resource cannot be found; may be null. @return The value of the translated resource at key. If the key cannot be found, then it is simply the defaultString.
field,org/eclipse/jface/util/Util/EMPTY_SORTED_SET, An unmodifiable, empty, sorted set. This value is guaranteed to never change and never be null.
class,org/eclipse/jface/util/DelegatingDropAdapter, A DelegatingDropAdapter is a DropTargetListener that maintains and delegates to a set of {@link TransferDropTargetListener}s. Each TransferDropTargetListener can then be implemented as if it were the DropTarget's only DropTargetListener. On dragEnter, dragOperationChanged, dragOver and drop, a current listener is obtained from the set of all TransferDropTargetListeners. The current listener is the first listener to return true for {@link TransferDropTargetListener#isEnabled(DropTargetEvent)}. The current listener is forwarded all DropTargetEvents until some other listener becomes the current listener, or the drop terminates. After adding all TransferDropTargetListeners to the DelegatingDropAdapter the combined set of Transfers should be set in the SWT DropTarget. #getTransfers() provides the set of Transfer types of all TransferDropTargetListeners. The following example snippet shows a DelegatingDropAdapter with two TransferDropTargetListeners. One supports dropping resources and demonstrates how a listener can be disabled in the isEnabled method. The other listener supports text transfer. 		final TreeViewer viewer = new TreeViewer(shell, SWT.NONE); 		DelegatingDropAdapter dropAdapter = new DelegatingDropAdapter();		dropAdapter.addDropTargetListener(new TransferDropTargetListener() {			public Transfer getTransfer() {				return ResourceTransfer.getInstance();			}			public boolean isEnabled(DropTargetEvent event) {				// disable drop listener if there is no viewer selection				if (viewer.getSelection().isEmpty())					return false;				return true;			}			public void dragEnter(DropTargetEvent event) {}			public void dragLeave(DropTargetEvent event) {}			public void dragOperationChanged(DropTargetEvent event) {}			public void dragOver(DropTargetEvent event) {}			public void drop(DropTargetEvent event) {				if (event.data == null)					return;				IResource[] resources = (IResource[]) event.data;				if (event.detail == DND.DROP_COPY) {					// copy resources				} else {					// move resources				}								}			public void dropAccept(DropTargetEvent event) {}		});		dropAdapter.addDropTargetListener(new TransferDropTargetListener() {			public Transfer getTransfer() {				return TextTransfer.getInstance();			}			public boolean isEnabled(DropTargetEvent event) {				return true;			}			public void dragEnter(DropTargetEvent event) {}			public void dragLeave(DropTargetEvent event) {}			public void dragOperationChanged(DropTargetEvent event) {}			public void dragOver(DropTargetEvent event) {}			public void drop(DropTargetEvent event) {				if (event.data == null)					return;				System.out.println(event.data);			}			public void dropAccept(DropTargetEvent event) {}		});				viewer.addDropSupport(DND.DROP_COPY | DND.DROP_MOVE, dropAdapter.getTransfers(), dropAdapter); @since 3.0
method,org/eclipse/jface/fieldassist/SimpleContentProposalProvider/getProposals/String;int, Return an array of Objects representing the valid content proposals for a field. @param contents the current contents of the field (only consulted if filtering is set to true) @param position the current cursor position within the field (ignored) @return the array of Objects that represent valid proposals for the field given its current content.
method,org/eclipse/jface/fieldassist/SimpleContentProposalProvider/setFiltering/boolean, Set the boolean that controls whether proposals are filtered according to the current field content. @param filterProposals true if the proposals should be filtered to show only those that match the current contents of the field, and false if the proposals should remain the same, ignoring the field content. @since 3.3
class,org/eclipse/jface/fieldassist/FieldDecoration, FieldDecoration is a simple data structure class for specifying a decoration for a field. A decoration may be rendered in different ways depending on the type of field it is used with. @see FieldDecorationRegistry @since 3.2
method,org/eclipse/jface/fieldassist/FieldDecoration/setImage/Image, Set the image shown in the decoration, or null if no image is specified. It is up to the caller to update any decorated fields that are showing the description in order to display the new image. @param image the image shown in the decoration. A value of null signifies a blank decoration.
method,org/eclipse/jface/fieldassist/FieldDecoration/setDescription/String, Set the description for the decoration shown when the user hovers over the decoration. It is up to the caller to update any decorated fields showing the description. @param description the String description of the decoration. A value of null indicates that no description will be shown.
method,org/eclipse/jface/fieldassist/FieldDecoration/FieldDecoration/Image;String, Create a decoration for a field with the specified image and description text. @param image the image shown in the decoration. A null image will result in a blank decoration, which may be used to reserve space near the field. @param description the description shown when the user hovers over the decoration. A null description indicates that there will be no hover for the decoration.
method,org/eclipse/jface/fieldassist/ControlDecoration/addMenuDetectListener/MenuDetectListener, Adds the listener to the collection of listeners who will be notified when the platform-specific context menu trigger has occurred, by sending it one of the messages defined in the MenuDetectListener interface. The widget field in the SelectionEvent will contain the Composite on which the decoration is rendered that received the click. The x and y fields will be in coordinates relative to the display. The data field will contain the decoration that received the event. @param listener the listener which should be notified @see org.eclipse.swt.events.MenuDetectListener @see org.eclipse.swt.events.MenuDetectEvent @see #removeMenuDetectListener
method,org/eclipse/jface/fieldassist/ControlDecoration/removeMenuDetectListener/MenuDetectListener, Removes the listener from the collection of listeners who will be notified when the platform-specific context menu trigger has occurred. @param listener the listener which should no longer be notified. This message has no effect if the listener was not previously added to the receiver. @see org.eclipse.swt.events.MenuDetectListener @see #addMenuDetectListener
method,org/eclipse/jface/fieldassist/ControlDecoration/addSelectionListener/SelectionListener, Adds the listener to the collection of listeners who will be notified when the decoration is selected, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the decoration is selected (by mouse click). widgetDefaultSelected is called when the decoration is double-clicked. The widget field in the SelectionEvent will contain the Composite on which the decoration is rendered that received the click. The x and y fields will be in coordinates relative to that widget. The data field will contain the decoration that received the event. @param listener the listener which should be notified @see org.eclipse.swt.events.SelectionListener @see org.eclipse.swt.events.SelectionEvent @see #removeSelectionListener
method,org/eclipse/jface/fieldassist/ControlDecoration/removeSelectionListener/SelectionListener, Removes the listener from the collection of listeners who will be notified when the decoration is selected. @param listener the listener which should no longer be notified. This message has no effect if the listener was not previously added to the receiver. @see org.eclipse.swt.events.SelectionListener @see #addSelectionListener
method,org/eclipse/jface/fieldassist/ControlDecoration/getControl/, Get the control that is decorated by the receiver. @return the Control decorated by the receiver. May be null if the control has been uninstalled.
method,org/eclipse/jface/fieldassist/ControlDecoration/showHoverText/String, Show the specified text using the same hover dialog as is used to show decorator descriptions. When {@link #setShowHover(boolean)} has been set to true, a decoration's description text will be shown in an info hover over the field's control whenever the mouse hovers over the decoration. This method can be used to show a decoration's description text at other times (such as when the control receives focus), or to show other text associated with the field. The hover will not be shown if the decoration is hidden. @param text the text to be shown in the info hover, or null if no text should be shown.
method,org/eclipse/jface/fieldassist/ControlDecoration/show/, Show the control decoration. This message has no effect if the decoration is already showing. If {@link #setShowOnlyOnFocus(boolean)} is set to true, the decoration will only be shown if the control has focus.
method,org/eclipse/jface/fieldassist/ControlDecoration/getDescriptionText/, Get the description text that may be shown in a hover for this decoration. @return the text to be shown as a description for the decoration, or null if none has been set.
method,org/eclipse/jface/fieldassist/ControlDecoration/setImage/Image, Set the image shown in this control decoration. Update the rendered decoration. @param image the image to be shown adjacent to the control. Should never be null.
method,org/eclipse/jface/fieldassist/ControlDecoration/getShowOnlyOnFocus/, Get the boolean that controls whether the decoration is shown only when the control has focus. The default value of this setting is false. @return true if the decoration should only be shown when the control has focus, and false if it should always be shown. Note that if the control is not capable of receiving focus (SWT.NO_FOCUS), then the decoration will never show when this value is true.
method,org/eclipse/jface/fieldassist/ControlDecoration/setShowOnlyOnFocus/boolean, Set the boolean that controls whether the decoration is shown only when the control has focus. The default value of this setting is false. @param showOnlyOnFocus true if the decoration should only be shown when the control has focus, and false if it should always be shown. Note that if the control is not capable of receiving focus (SWT.NO_FOCUS), then the decoration will never show when this value is true.
method,org/eclipse/jface/fieldassist/ControlDecoration/getShowHover/, Get the boolean that controls whether the decoration's description text should be shown in a hover when the user hovers over the decoration. The default value of this setting is true. @return true if a hover popup containing the decoration's description text should be shown when the user hovers over the decoration, and false if a hover should not be shown.
method,org/eclipse/jface/fieldassist/ControlDecoration/setShowHover/boolean, Set the boolean that controls whether the decoration's description text should be shown in a hover when the user hovers over the decoration. The default value of this setting is true. @param showHover true if a hover popup containing the decoration's description text should be shown when the user hovers over the decoration, and false if a hover should not be shown.
method,org/eclipse/jface/fieldassist/ControlDecoration/getMarginWidth/, Get the margin width in pixels that should be used between the decorator and the horizontal edge of the control. The default value of this setting is 0. @return the number of pixels that should be reserved between the horizontal edge of the control and the adjacent edge of the decoration.
method,org/eclipse/jface/fieldassist/ControlDecoration/setMarginWidth/int, Set the margin width in pixels that should be used between the decorator and the horizontal edge of the control. The default value of this setting is 0. @param marginWidth the number of pixels that should be reserved between the horizontal edge of the control and the adjacent edge of the decoration.
method,org/eclipse/jface/fieldassist/ControlDecoration/getDecorationRectangle/Control, Return the rectangle in which the decoration should be rendered, in coordinates relative to the specified control. If the specified control is null, return the rectangle in display coordinates. @param targetControl the control whose coordinates should be used @return the rectangle in which the decoration should be rendered
method,org/eclipse/jface/fieldassist/ControlDecoration/ControlDecoration/Control;int, Construct a ControlDecoration for decorating the specified control at the specified position relative to the control. Render the decoration on top of any Control that happens to appear at the specified location. SWT constants are used to specify the position of the decoration relative to the control. The position should include style bits describing both the vertical and horizontal orientation. SWT.LEFT and SWT.RIGHT describe the horizontal placement of the decoration relative to the control, and the constants SWT.TOP, SWT.CENTER, and SWT.BOTTOM describe the vertical alignment of the decoration relative to the control. Decorations always appear on either the left or right side of the control, never above or below it. For example, a decoration appearing on the left side of the field, at the top, is specified as SWT.LEFT | SWT.TOP. If no position style bits are specified, the control decoration will be positioned to the left and center of the control (SWT.LEFT | SWT.CENTER). @param control the control to be decorated @param position bit-wise or of position constants (SWT.TOP, SWT.BOTTOM, SWT.LEFT, SWT.RIGHT, and SWT.CENTER).
method,org/eclipse/jface/fieldassist/ControlDecoration/ControlDecoration/Control;int;Composite, Construct a ControlDecoration for decorating the specified control at the specified position relative to the control. Render the decoration only on the specified Composite or its children. The decoration will be clipped if it does not appear within the visible bounds of the composite or its child composites. SWT constants are used to specify the position of the decoration relative to the control. The position should include style bits describing both the vertical and horizontal orientation. SWT.LEFT and SWT.RIGHT describe the horizontal placement of the decoration relative to the control, and the constants SWT.TOP, SWT.CENTER, and SWT.BOTTOM describe the vertical alignment of the decoration relative to the control. Decorations always appear on either the left or right side of the control, never above or below it. For example, a decoration appearing on the left side of the field, at the top, is specified as SWT.LEFT | SWT.TOP. If no position style bits are specified, the control decoration will be positioned to the left and center of the control (SWT.LEFT | SWT.CENTER). @param control the control to be decorated @param position bit-wise or of position constants (SWT.TOP, SWT.BOTTOM, SWT.LEFT, SWT.RIGHT, and SWT.CENTER). @param composite The SWT composite within which the decoration should be rendered. The decoration will be clipped to this composite, but it may be rendered on a child of the composite. The decoration will not be visible if the specified composite or its child composites are not visible in the space relative to the control, where the decoration is to be rendered. If this value is null, then the decoration will be rendered on whichever composite (or composites) are located in the specified position.
interface,org/eclipse/jface/fieldassist/IContentProposalListener2, This interface is used to listen to additional notifications from a {@link ContentProposalAdapter}. @since 3.3
method,org/eclipse/jface/fieldassist/DecoratedField/addFieldDecoration/FieldDecoration;int;boolean, Adds an image decoration to the field. @param decoration A FieldDecoration describing the image and description for the decoration @param position The SWT constant indicating the position of the decoration relative to the field's control. The position should include style bits describing both the vertical and horizontal orientation. SWT.LEFT and SWT.RIGHT describe the horizontal placement of the decoration relative to the field, and the constants SWT.TOP and SWT.BOTTOM describe the vertical alignment of the decoration relative to the field. Decorations always appear on either horizontal side of the field, never above or below it. For example, a decoration appearing on the left side of the field, at the top, is specified as SWT.LEFT | SWT.TOP. If an image decoration already exists in the specified position, it will be replaced by the one specified. @param showOnFocus true if the decoration should only be shown when the associated control has focus, false if it should always be shown. 
method,org/eclipse/jface/fieldassist/DecoratedField/getLayoutControl/, Get the control that represents the decorated field. This composite should be used to lay out the field within its parent. @return the Control that should be layed out in the field's parent's layout. This is typically not the control itself, since additional controls are used to represent the decorations.
method,org/eclipse/jface/fieldassist/DecoratedField/showHoverText/String, Show the specified text using the same hover dialog as is used to show decorator descriptions. Normally, a decoration's description text will be shown in an info hover over the field's control whenever the mouse hovers over the decoration. This method can be used to show a decoration's description text at other times (such as when the control receives focus), or to show other text associated with the field. If there is currently a hover visible, the hover's text will be replaced with the specified text. @param text the text to be shown in the info hover, or null if no text should be shown.
method,org/eclipse/jface/fieldassist/DecoratedField/updateDecoration/FieldDecoration, Update the specified decoration. This message should be used if the image or description in the decoration have changed. This message has no immediate effect if the decoration is not visible, and no effect at all if the decoration was not previously added to the field. @param decoration the decoration to be hidden.
method,org/eclipse/jface/fieldassist/DecoratedField/setUseMaximumDecorationWidth/boolean, Set a boolean that indicates whether the receiver should use the decoration registry's maximum decoration width when allocating space for decorations. The default value is true. Using the maximum decoration width is useful so that decorated fields on the same dialog that have different decoration widths will all align. This also allows client dialogs to align non-decorated fields with decorated fields by consulting the maximum decoration width. Clients may wish to set this value to false in cases where space usage is more important than alignment of fields. This value must be set before the decorations are added in order to ensure proper alignment. @param useMaximumWidth true if the maximum decoration width should be used as the size for all decorations, false if only the decoration size should be used. @see FieldDecorationRegistry#getMaximumDecorationWidth()
method,org/eclipse/jface/fieldassist/DecoratedField/DecoratedField/Composite;int;IControlCreator, Construct a decorated field which is parented by the specified composite and has the given style bits. Use the controlCreator to create the specific kind of control that is decorated inside the field. @param parent the parent of the decorated field. @param style the desired style bits for the field. @param controlCreator the IControlCreator used to specify the specific kind of control that is to be decorated. @see IControlCreator
method,org/eclipse/jface/fieldassist/IControlContentAdapter/getInsertionBounds/Control, Get the bounds (in pixels) of the insertion point for the control content. This is a rectangle, in coordinates relative to the control, where the insertion point is displayed. If the implementer does not have an insertion point, or cannot determine the location of the insertion point, it is appropriate to return the bounds of the entire control. This value may be used to position a content proposal popup. @param control the control whose offset is to be retrieved. @return the pixel width representing the distance between the edge of the control and the insertion point.
class,org/eclipse/jface/fieldassist/FieldAssistColors, FieldAssistColors defines protocol for retrieving colors that can be used to provide visual cues with fields. For consistency with JFace dialogs and wizards, it is recommended that FieldAssistColors is used when colors are used to annotate fields. Color resources that are returned using methods in this class are maintained in the JFace color registries, or by SWT. Users of any color resources provided by this class are not responsible for the lifecycle of the color. Colors provided by this class should never be disposed by clients. In some cases, clients are provided information, such as RGB values, in order to create their own color resources. In these cases, the client should manage the lifecycle of any created resource. @since 3.2 @deprecated As of 3.3, this class is no longer necessary.
method,org/eclipse/jface/fieldassist/FieldAssistColors/getRequiredFieldBackgroundColor/Control, Return the color that should be used for the background of a control to indicate that the control is a required field and does not have content. This color is managed by FieldAssistResources and should never be disposed by clients. @param control the control on which the background color will be used. @return the color used to indicate that a field is required.
method,org/eclipse/jface/fieldassist/IContentProposal/getCursorPosition/, Return the integer position within the contents that the cursor should be placed after the proposal is accepted. @return the zero-based index position within the contents where the cursor should be placed after the proposal is accepted.
class,org/eclipse/jface/fieldassist/FieldDecorationRegistry, FieldDecorationRegistry is a common registry used to define shared field decorations within an application. Unlike resource registries, the FieldDecorationRegistry does not perform any lifecycle management of the decorations. Clients may specify images for the decorations in several different ways. Images may be described by their image id in a specified {@link ImageRegistry}. In this case, the life cycle of the image is managed by the image registry, and the decoration registry will not attempt to obtain an image from the image registry until the decoration is actually requested. In cases where the client has access to an already-created image, the image itself can be specified when registering the decoration. In this case, the life cycle should be managed by the specifying client. @see FieldDecoration @see ImageRegistry @since 3.2
method,org/eclipse/jface/fieldassist/FieldDecorationRegistry/registerFieldDecoration/String;String;Image, Registers a field decoration using the specified id. The lifecyle of the supplied image should be managed by the client. That is, it will never be disposed by this registry and the decoration should be removed from the registry if the image is ever disposed elsewhere. @param id the String id used to identify and access the decoration. @param description the String description to be used in the decoration, or null if the decoration has no description. @param image the image to be used in the decoration
method,org/eclipse/jface/fieldassist/FieldDecorationRegistry/unregisterFieldDecoration/String, Unregisters the field decoration with the specified id. No lifecycle management is performed on the decoration's image. This message has no effect if no field decoration with the specified id was previously registered. This method need not be called if the registered decoration's image is managed in an image registry. In that case, leaving the decoration in the registry will do no harm since the image will remain valid and will be properly disposed when the application is shut down. This method should be used in cases where the caller intends to dispose of the image referred to by the decoration, or otherwise determines that the decoration should no longer be used. @param id the String id of the decoration to be unregistered.
field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_CONTENT_PROPOSAL, Decoration id for the decoration that should be used to cue the user that content proposals are available.
field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_REQUIRED, Decoration id for the decoration that should be used to cue the user that a field is required.
field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_ERROR, Decoration id for the decoration that should be used to cue the user that a field has an error.
field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_WARNING, Decoration id for the decoration that should be used to cue the user that a field has a warning.
field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_INFORMATION, Decoration id for the decoration that should be used to cue the user that a field has additional information. @since 3.3
field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_ERROR_QUICKFIX, Decoration id for the decoration that should be used to cue the user that a field has an error with quick fix available. @since 3.3
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setLabelProvider/ILabelProvider, Set the label provider that is used to show proposals. The lifecycle of the specified label provider is not managed by this adapter. Clients must dispose the label provider when it is no longer needed. @param labelProvider the (@link ILabelProvider} used to show proposals.
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getContentProposalProvider/, Return the proposal provider that provides content proposals given the current content of the field. A value of null indicates that there are no content proposals available for the field. @return the {@link IContentProposalProvider} used to show proposals. May be null.
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getAutoActivationDelay/, Set the delay, in milliseconds, used before any autoactivation is triggered. @return the time in milliseconds that will pass before a popup is automatically opened
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setAutoActivationDelay/int, Set the delay, in milliseconds, used before autoactivation is triggered. @param delay the time in milliseconds that will pass before a popup is automatically opened
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getProposalAcceptanceStyle/, Get the integer style that indicates how an accepted proposal affects the control's content. @return a constant indicating how an accepted proposal should affect the control's content. Should be one of PROPOSAL_INSERT, PROPOSAL_REPLACE, or PROPOSAL_IGNORE. (Default is PROPOSAL_INSERT).
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setProposalAcceptanceStyle/int, Set the integer style that indicates how an accepted proposal affects the control's content. @param acceptance a constant indicating how an accepted proposal should affect the control's content. Should be one of PROPOSAL_INSERT, PROPOSAL_REPLACE, or PROPOSAL_IGNORE
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setPopupSize/Point, Set the size, in pixels, of the content proposal popup. This size will be used the next time the content proposal popup is opened. @param size a Point specifying the desired width and height, in pixels, of the content proposal popup.
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getPropagateKeys/, Get the boolean that indicates whether key events (including auto-activation characters) received by the content proposal popup should also be propagated to the adapted control when the proposal popup is open. @return a boolean that indicates whether key events (including auto-activation characters) should be propagated to the adapted control when the proposal popup is open. Default value is true.
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setPropagateKeys/boolean, Set the boolean that indicates whether key events (including auto-activation characters) received by the content proposal popup should also be propagated to the adapted control when the proposal popup is open. @param propagateKeys a boolean that indicates whether key events (including auto-activation characters) should be propagated to the adapted control when the proposal popup is open.
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/openProposalPopup/, Open the proposal popup and display the proposals provided by the proposal provider. This method returns immediately. That is, it does not wait for a proposal to be selected. This method is used by subclasses to explicitly invoke the opening of the popup. If there are no proposals to show, the popup will not open and a beep will be sounded.
method,org/eclipse/jface/fieldassist/ContentProposalAdapter/hasProposalPopupFocus/, Returns whether the content proposal popup has the focus. This includes both the primary popup and any secondary info popup that may have focus. @return true if the proposal popup or its secondary info popup has the focus @since 3.4
field,org/eclipse/jface/fieldassist/ContentProposalAdapter/DEBUG, Flag that controls the printing of debug info.
field,org/eclipse/jface/fieldassist/ContentProposalAdapter/PROPOSAL_INSERT, Indicates that a chosen proposal should be inserted into the field.
field,org/eclipse/jface/fieldassist/ContentProposalAdapter/PROPOSAL_REPLACE, Indicates that a chosen proposal should replace the entire contents of the field.
field,org/eclipse/jface/fieldassist/ContentProposalAdapter/PROPOSAL_IGNORE, Indicates that the contents of the control should not be modified when a proposal is chosen. This is typically used when a client needs more specialized behavior when a proposal is chosen. In this case, clients typically register an IContentProposalListener so that they are notified when a proposal is chosen.
field,org/eclipse/jface/fieldassist/ContentProposalAdapter/FILTER_NONE, Indicates that there should be no filter applied as keys are typed in the popup.
field,org/eclipse/jface/fieldassist/ContentProposalAdapter/FILTER_CUMULATIVE, Indicates that a cumulative filter applies as keys are typed in the popup. That is, each character typed will be added to the filter. @deprecated As of 3.4, filtering that is sensitive to changes in the control content should be performed by the supplied {@link IContentProposalProvider}, such as that performed by {@link SimpleContentProposalProvider}
class,org/eclipse/jface/fieldassist/TextControlCreator, An {@link IControlCreator} for SWT Text controls. This is a convenience class for creating text controls to be supplied to a decorated field. @since 3.2 @deprecated As of 3.3, clients should use {@link ControlDecoration} instead of {@link DecoratedField}. 
method,org/apache/commons/collections/Closure/execute/Object, Performs an action on the specified input object. @param input the input to execute on @throws ClassCastException (runtime) if the input is the wrong class @throws IllegalArgumentException (runtime) if the input is invalid @throws FunctorException (runtime) if any other error occurs
interface,org/apache/commons/collections/Transformer, Defines a functor interface implemented by classes that transform one object into another. A Transformer converts the input object to the output object. The input object should be left unchanged. Transformers are typically used for type conversions, or extracting data from an object. Standard implementations of common transformers are provided by {@link TransformerUtils}. These include method invokation, returning a constant, cloning and returning the string value. @param the input type to the transformer @param the output type from the transformer @since Commons Collections 1.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author James Strachan @author Stephen Colebourne
class,org/apache/commons/collections/ClosureUtils, ClosureUtils provides reference implementations and utilities for the Closure functor interface. The supplied closures are: Invoker - invokes a method on the input object For - repeatedly calls a closure for a fixed number of times While - repeatedly calls a closure while a predicate is true DoWhile - repeatedly calls a closure while a predicate is true Chained - chains two or more closures together Switch - calls one closure based on one or more predicates SwitchMap - calls one closure looked up from a Map Transformer - wraps a Transformer as a Closure NOP - does nothing Exception - always throws an exception All the supplied closures are Serializable. @since Commons Collections 3.0 @version $Revision: 815034 $ $Date: 2009-09-15 07:54:39 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne @author Matt Benson
method,org/apache/commons/collections/ClosureUtils/forClosure/int;Closure, Creates a Closure that will call the closure count times. A null closure or zero count returns the NOPClosure. @see org.apache.commons.collections.functors.ForClosure @param count the number of times to loop @param closure the closure to call repeatedly @return the for closure
method,org/apache/commons/collections/ClosureUtils/invokerClosure/String, Creates a Closure that will invoke a specific method on the closure's input object by reflection. @see org.apache.commons.collections.functors.InvokerTransformer @see org.apache.commons.collections.functors.TransformerClosure @param methodName the name of the method @return the invoker closure @throws IllegalArgumentException if the method name is null
method,org/apache/commons/collections/ClosureUtils/invokerClosure/String;Class[];Object[], Creates a Closure that will invoke a specific method on the closure's input object by reflection. @see org.apache.commons.collections.functors.InvokerTransformer @see org.apache.commons.collections.functors.TransformerClosure @param methodName the name of the method @param paramTypes the parameter types @param args the arguments @return the invoker closure @throws IllegalArgumentException if the method name is null @throws IllegalArgumentException if the paramTypes and args don't match
method,org/apache/commons/collections/ClosureUtils/chainedClosure/Closure;Closure, Create a new Closure that calls two Closures, passing the result of the first into the second. @see org.apache.commons.collections.functors.ChainedClosure @param closure1 the first closure @param closure2 the second closure @return the chained closure @throws IllegalArgumentException if either closure is null
method,org/apache/commons/collections/ClosureUtils/chainedClosure/Closure[], Create a new Closure that calls each closure in turn, passing the result into the next closure. @see org.apache.commons.collections.functors.ChainedClosure @param closures an array of closures to chain @return the chained closure @throws IllegalArgumentException if the closures array is null @throws IllegalArgumentException if any closure in the array is null
method,org/apache/commons/collections/ClosureUtils/chainedClosure/Collection, Create a new Closure that calls each closure in turn, passing the result into the next closure. The ordering is that of the iterator() method on the collection. @see org.apache.commons.collections.functors.ChainedClosure @param closures a collection of closures to chain @return the chained closure @throws IllegalArgumentException if the closures collection is null @throws IllegalArgumentException if the closures collection is empty @throws IllegalArgumentException if any closure in the collection is null
method,org/apache/commons/collections/ClosureUtils/switchClosure/Predicate[];Closure[], Create a new Closure that calls one of the closures depending on the predicates. The closure at array location 0 is called if the predicate at array location 0 returned true. Each predicate is evaluated until one returns true. @see org.apache.commons.collections.functors.SwitchClosure @param predicates an array of predicates to check, not null @param closures an array of closures to call, not null @return the switch closure @throws IllegalArgumentException if the either array is null @throws IllegalArgumentException if any element in the arrays is null @throws IllegalArgumentException if the arrays are different sizes
method,org/apache/commons/collections/ClosureUtils/switchClosure/Predicate[];Closure[];Closure, Create a new Closure that calls one of the closures depending on the predicates. The closure at array location 0 is called if the predicate at array location 0 returned true. Each predicate is evaluated until one returns true. If no predicates evaluate to true, the default closure is called. @see org.apache.commons.collections.functors.SwitchClosure @param predicates an array of predicates to check, not null @param closures an array of closures to call, not null @param defaultClosure the default to call if no predicate matches @return the switch closure @throws IllegalArgumentException if the either array is null @throws IllegalArgumentException if any element in the arrays is null @throws IllegalArgumentException if the arrays are different sizes
method,org/apache/commons/collections/MapUtils/toProperties/Map, Gets a new Properties object initialised with the values from a Map. A null input will return an empty properties object. @param map the map to convert to a Properties object, may not be null @return the properties object
method,org/apache/commons/collections/MapUtils/toMap/ResourceBundle, Creates a new HashMap using data copied from a ResourceBundle. @param resourceBundle the resource bundle to convert, may not be null @return the hashmap containing the data @throws NullPointerException if the bundle is null
method,org/apache/commons/collections/MapUtils/isEmpty/Map, Null-safe check if the specified map is empty. Null returns true. @param map the map to check, may be null @return true if empty or null @since Commons Collections 3.2
method,org/apache/commons/collections/MapUtils/isNotEmpty/Map, Null-safe check if the specified map is not empty. Null returns false. @param map the map to check, may be null @return true if non-null and non-empty @since Commons Collections 3.2
method,org/apache/commons/collections/MapUtils/multiValueMap/Map;Class, Creates a multi-value map backed by the given map which returns collections of the specified type. @param map the map to decorate @param collectionClass the type of collections to return from the map (must contain public no-arg constructor and extend Collection). @return a multi-value map backed by the given map which returns collections of the specified type @see MultiValueMap @since Commons Collections 3.2
method,org/apache/commons/collections/MapUtils/iterableMap/Map, Get the specified {@link Map} as an {@link IterableMap}. @param @param @param map to wrap if necessary. @return IterableMap @since Commons Collections 5 @TODO fix version
method,org/apache/commons/collections/MapUtils/iterableSortedMap/SortedMap, Get the specified {@link SortedMap} as an {@link IterableSortedMap}. @param @param @param sortedMap to wrap if necessary @return {@link IterableSortedMap} @since Commons Collections 5 @TODO fix version
method,org/apache/commons/collections/MapUtils/MapUtils/, MapUtils should not normally be instantiated.
interface,org/apache/commons/collections/Factory, Defines a functor interface implemented by classes that create objects. A Factory creates an object without using an input parameter. If an input parameter is required, then {@link Transformer} is more appropriate. Standard implementations of common factories are provided by {@link FactoryUtils}. These include factories that return a constant, a copy of a prototype or a new instance. @param the type that the factory creates @since Commons Collections 2.1 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Arron Bates @author Stephen Colebourne
method,org/apache/commons/collections/IteratorUtils/chainedIterator/Iterator;Iterator, Gets an iterator that iterates through two {@link Iterator}s one after another. @param iterator1 the first iterators to use, not null @param iterator2 the first iterators to use, not null @return a combination iterator over the iterators @throws NullPointerException if either iterator is null
method,org/apache/commons/collections/IteratorUtils/chainedIterator/Iterator[], Gets an iterator that iterates through an array of {@link Iterator}s one after another. @param iterators the iterators to use, not null or empty or contain nulls @return a combination iterator over the iterators @throws NullPointerException if iterators array is null or contains a null
method,org/apache/commons/collections/IteratorUtils/chainedIterator/Collection, Gets an iterator that iterates through a collections of {@link Iterator}s one after another. @param iterators the iterators to use, not null or empty or contain nulls @return a combination iterator over the iterators @throws NullPointerException if iterators collection is null or contains a null @throws ClassCastException if the iterators collection contains the wrong object type
method,org/apache/commons/collections/IteratorUtils/collatedIterator/Comparator;Iterator;Iterator, Gets an iterator that provides an ordered iteration over the elements contained in a collection of ordered {@link Iterator}s. Given two ordered {@link Iterator}s A and B, the {@link Iterator#next()} method will return the lesser of A.next() and B.next(). The comparator is optional. If null is specified then natural order is used. @param comparator the comparator to use, may be null for natural order @param iterator1 the first iterators to use, not null @param iterator2 the first iterators to use, not null @return a combination iterator over the iterators @throws NullPointerException if either iterator is null
method,org/apache/commons/collections/IteratorUtils/collatedIterator/Comparator;Iterator[], Gets an iterator that provides an ordered iteration over the elements contained in an array of {@link Iterator}s. Given two ordered {@link Iterator}s A and B, the {@link Iterator#next()} method will return the lesser of A.next() and B.next() and so on. The comparator is optional. If null is specified then natural order is used. @param comparator the comparator to use, may be null for natural order @param iterators the iterators to use, not null or empty or contain nulls @return a combination iterator over the iterators @throws NullPointerException if iterators array is null or contains a null
method,org/apache/commons/collections/IteratorUtils/collatedIterator/Comparator;Collection, Gets an iterator that provides an ordered iteration over the elements contained in a collection of {@link Iterator}s. Given two ordered {@link Iterator}s A and B, the {@link Iterator#next()} method will return the lesser of A.next() and B.next() and so on. The comparator is optional. If null is specified then natural order is used. @param comparator the comparator to use, may be null for natural order @param iterators the iterators to use, not null or empty or contain nulls @return a combination iterator over the iterators @throws NullPointerException if iterators collection is null or contains a null @throws ClassCastException if the iterators collection contains the wrong object type
method,org/apache/commons/collections/IteratorUtils/getIterator/Object, Gets a suitable Iterator for the given object. This method can handle objects as follows null - empty iterator Iterator - returned directly Enumeration - wrapped Collection - iterator from collection returned Map - values iterator returned Dictionary - values (elements) enumeration returned as iterator array - iterator over array returned object with iterator() public method accessed by reflection object - singleton iterator @param obj the object to convert to an iterator @return a suitable iterator, never null
field,org/apache/commons/collections/IteratorUtils/EMPTY_ITERATOR, An iterator over no elements. WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1. Use EmptyIterator.INSTANCE for compatability with Commons Collections 2.1.1.
field,org/apache/commons/collections/IteratorUtils/EMPTY_LIST_ITERATOR, A list iterator over no elements. WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1. Use EmptyListIterator.INSTANCE for compatability with Commons Collections 2.1.1.
interface,org/apache/commons/collections/BoundedMap, Defines a map that is bounded in size. The size of the map can vary, but it can never exceed a preset maximum number of elements. This interface allows the querying of details associated with the maximum number of elements. @since Commons Collections 3.0 @version $Revision: 815026 $ $Date: 2009-09-15 07:54:23 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
interface,org/apache/commons/collections/KeyValue, Defines a simple key value pair. A Map Entry has considerable additional semantics over and above a simple key-value pair. This interface defines the minimum key value, with just the two get methods. @param the type of the key @param the type of the value @since Commons Collections 3.0 @version $Revision: 815006 $ $Date: 2009-09-15 07:44:36 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
class,org/apache/commons/collections/BufferUnderflowException, The BufferUnderflowException is used when the buffer is already empty. NOTE: From version 3.0, this exception extends NoSuchElementException. @since Commons Collections 2.1 @version $Revision: 956279 $ $Date: 2010-06-19 21:47:48 +0200 (Sat, 19 Jun 2010) $ @author Avalon @author Berin Loritsch @author Jeff Turner @author Paul Jack @author Stephen Colebourne
interface,org/apache/commons/collections/Bag, Defines a collection that counts the number of times an object appears in the collection. Suppose you have a Bag that contains {a, a, b, c}. Calling {@link #getCount(Object)} on a would return 2, while calling {@link #uniqueSet()} would return {a, b, c}. NOTE: This interface violates the {@link Collection} contract. The behavior specified in many of these methods is not the same as the behavior specified by Collection. The noncompliant methods are clearly marked with (Violation). Exercise caution when using a bag as a Collection. This violation resulted from the original specification of this interface. In an ideal world, the interface would be changed to fix the problems, however it has been decided to maintain backwards compatibility instead. @param the type held in the bag @since Commons Collections 2.0 @version $Revision: 815019 $ $Date: 2009-09-15 07:54:10 +0200 (Tue, 15 Sep 2009) $ @author Chuck Burdick @author Stephen Colebourne
method,org/apache/commons/collections/Bag/containsAll/Collection, (Violation) Returns true if the bag contains all elements in the given collection, respecting cardinality. That is, if the given collection coll contains n copies of a given object, calling {@link #getCount(Object)} on that object must be &gt;= n for all n in coll. The {@link Collection#containsAll(Collection)} method specifies that cardinality should not be respected; this method should return true if the bag contains at least one of every object contained in the given collection. @param coll the collection to check against @return true if the Bag contains all the collection
method,org/apache/commons/collections/Bag/removeAll/Collection, (Violation) Remove all elements represented in the given collection, respecting cardinality. That is, if the given collection coll contains n copies of a given object, the bag will have n fewer copies, assuming the bag had at least n copies to begin with. The {@link Collection#removeAll(Collection)} method specifies that cardinality should not be respected; this method should remove all occurrences of every object contained in the given collection. @param coll the collection to remove @return true if this call changed the collection
method,org/apache/commons/collections/Bag/retainAll/Collection, (Violation) Remove any members of the bag that are not in the given collection, respecting cardinality. That is, if the given collection coll contains n copies of a given object and the bag has m &gt; n copies, then delete m - n copies from the bag. In addition, if e is an object in the bag but !coll.contains(e), then remove e and any of its copies. The {@link Collection#retainAll(Collection)} method specifies that cardinality should not be respected; this method should keep all occurrences of every object contained in the given collection. @param coll the collection to retain @return true if this call changed the collection
method,org/apache/commons/collections/Bag/iterator/, Returns an {@link Iterator} over the entire set of members, including copies due to cardinality. This iterator is fail-fast and will not tolerate concurrent modifications. @return iterator over all elements in the Bag
class,org/apache/commons/collections/TransformerUtils, TransformerUtils provides reference implementations and utilities for the Transformer functor interface. The supplied transformers are: Invoker - returns the result of a method call on the input object Clone - returns a clone of the input object Constant - always returns the same object Closure - performs a Closure and returns the input object Predicate - returns the result of the predicate as a Boolean Factory - returns a new object from a factory Chained - chains two or more transformers together Switch - calls one transformer based on one or more predicates SwitchMap - calls one transformer looked up from a Map Instantiate - the Class input object is instantiated Map - returns an object from a supplied Map Null - always returns null NOP - returns the input object, which should be immutable Exception - always throws an exception StringValue - returns a java.lang.String representation of the input object All the supplied transformers are Serializable. @since Commons Collections 3.0 @version $Revision: 815106 $ $Date: 2009-09-15 07:56:51 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne @author James Carman
method,org/apache/commons/collections/TransformerUtils/chainedTransformer/Transformer;Transformer, Create a new Transformer that calls two transformers, passing the result of the first into the second. @see org.apache.commons.collections.functors.ChainedTransformer @param transformer1 the first transformer @param transformer2 the second transformer @return the transformer @throws IllegalArgumentException if either transformer is null
method,org/apache/commons/collections/TransformerUtils/chainedTransformer/Transformer[], Create a new Transformer that calls each transformer in turn, passing the result into the next transformer. @see org.apache.commons.collections.functors.ChainedTransformer @param transformers an array of transformers to chain @return the transformer @throws IllegalArgumentException if the transformers array is null @throws IllegalArgumentException if any transformer in the array is null
method,org/apache/commons/collections/TransformerUtils/chainedTransformer/Collection, Create a new Transformer that calls each transformer in turn, passing the result into the next transformer. The ordering is that of the iterator() method on the collection. @see org.apache.commons.collections.functors.ChainedTransformer @param transformers a collection of transformers to chain @return the transformer @throws IllegalArgumentException if the transformers collection is null @throws IllegalArgumentException if any transformer in the collection is null
method,org/apache/commons/collections/TransformerUtils/switchTransformer/Predicate[];Transformer[], Create a new Transformer that calls one of the transformers depending on the predicates. The transformer at array location 0 is called if the predicate at array location 0 returned true. Each predicate is evaluated until one returns true. If no predicates evaluate to true, null is returned. @see org.apache.commons.collections.functors.SwitchTransformer @param predicates an array of predicates to check @param transformers an array of transformers to call @return the transformer @throws IllegalArgumentException if the either array is null @throws IllegalArgumentException if the either array has 0 elements @throws IllegalArgumentException if any element in the arrays is null @throws IllegalArgumentException if the arrays are different sizes
method,org/apache/commons/collections/SetUtils/isEqualSet/Collection;Collection, Tests two sets for equality as per the equals() contract in {@link java.util.Set#equals(java.lang.Object)}. This method is useful for implementing Set when you cannot extend AbstractSet. The method takes Collection instances to enable other collection types to use the Set implementation algorithm. The relevant text (slightly paraphrased as this is a static method) is: Two sets are considered equal if they have the same size, and every member of the first set is contained in the second. This ensures that the equals method works properly across different implementations of the Set interface. This implementation first checks if the two sets are the same object: if so it returns true. Then, it checks if the two sets are identical in size; if not, it returns false. If so, it returns a.containsAll((Collection) b). @see java.util.Set @param set1 the first set, may be null @param set2 the second set, may be null @return whether the sets are equal by value comparison
method,org/apache/commons/collections/SetUtils/hashCodeForSet/Collection, Generates a hash code using the algorithm specified in {@link java.util.Set#hashCode()}. This method is useful for implementing Set when you cannot extend AbstractSet. The method takes Collection instances to enable other collection types to use the Set implementation algorithm. @see java.util.Set#hashCode() @param set the set to calculate the hash code for, may be null @return the hash code
method,org/apache/commons/collections/CollectionUtils/cardinality/Object;Iterable, Returns the number of occurrences of obj in coll. @param obj the object to find the cardinality of @param coll the {@link Iterable} to search @param the type of object that the {@link Iterable} may contain. @return the the number of occurrences of obj in coll
method,org/apache/commons/collections/CollectionUtils/forAllDo/Collection;Closure, Executes the given closure on each element in the collection. If the input collection or closure is null, there is no change made. @param collection the collection to get the input from, may be null @param closure the closure to perform, may be null @return closure
method,org/apache/commons/collections/CollectionUtils/filter/Iterable;Predicate, Filter the collection by applying a Predicate to each element. If the predicate returns false, remove the element. If the input collection or predicate is null, there is no change made. @param collection the collection to get the input from, may be null @param predicate the predicate to use as a filter, may be null
method,org/apache/commons/collections/CollectionUtils/transform/Collection;Transformer, Transform the collection by applying a Transformer to each element. If the input collection or transformer is null, there is no change made. This routine is best for Lists, for which set() is used to do the transformations in place. For other Collections, clear() and addAll() are used to replace elements. If the input collection controls its input, such as a Set, and the Transformer creates duplicates (or are otherwise invalid), the collection may reduce in size due to calling this method. @param collection the {@link Iterable} to get the input from, may be null @param transformer the transformer to perform, may be null
method,org/apache/commons/collections/CollectionUtils/size/Object, Gets the size of the collection/iterator specified. This method can handles objects as follows Collection - the collection size Map - the map size Array - the array size Iterator - the number of elements remaining in the iterator Enumeration - the number of elements remaining in the enumeration @param object the object to get the size of, may be null @return the size of the specified collection or 0 if the object was null @throws IllegalArgumentException thrown if object is not recognised @since Commons Collections 3.1
method,org/apache/commons/collections/CollectionUtils/sizeIsEmpty/Object, Checks if the specified collection/array/iterator is empty. This method can handles objects as follows Collection - via collection isEmpty Map - via map isEmpty Array - using array size Iterator - via hasNext Enumeration - via hasMoreElements Note: This method is named to avoid clashing with {@link #isEmpty(Collection)}. @param object the object to get the size of, may be null @return true if empty or null @throws IllegalArgumentException thrown if object is not recognised @since Commons Collections 3.2
method,org/apache/commons/collections/CollectionUtils/CollectionUtils/, CollectionUtils should not normally be instantiated.
field,org/apache/commons/collections/CollectionUtils/EMPTY_COLLECTION, An empty unmodifiable collection. The JDK provides empty Set and List implementations which could be used for this purpose. However they could be cast to Set or List which might be undesirable. This implementation only implements Collection.
method,org/apache/commons/collections/BidiMap/put/Object;Object, Puts the key-value pair into the map, replacing any previous pair. When adding a key-value pair, the value may already exist in the map against a different key. That mapping is removed, to ensure that the value only occurs once in the inverse map. BidiMap map1 = new DualHashBidiMap(); map.put(A,B); // contains A mapped to B, as per Map map.put(A,C); // contains A mapped to C, as per Map BidiMap map2 = new DualHashBidiMap(); map.put(A,B); // contains A mapped to B, as per Map map.put(C,B); // contains C mapped to B, key A is removed @param key the key to store @param value the value to store @return the previous value mapped to this key @throws UnsupportedOperationException if the put method is not supported @throws ClassCastException (optional) if the map limits the type of the value and the specified value is inappropriate @throws IllegalArgumentException (optional) if the map limits the values in some way and the value was invalid @throws NullPointerException (optional) if the map limits the values to non-null and null was specified
method,org/apache/commons/collections/BufferUtils/BufferUtils/, BufferUtils should not normally be instantiated.
interface,org/apache/commons/collections/Buffer, Defines a collection that allows objects to be removed in some well-defined order. The removal order can be based on insertion order (eg, a FIFO queue or a LIFO stack), on access order (eg, an LRU cache), on some arbitrary comparator (eg, a priority queue) or on any other well-defined ordering. Note that the removal order is not necessarily the same as the iteration order. A Buffer implementation may have equivalent removal and iteration orders, but this is not required. This interface does not specify any behavior for {@link Object#equals(Object)} and {@link Object#hashCode} methods. It is therefore possible for a Buffer implementation to also also implement {@link java.util.List}, {@link java.util.Set} or {@link Bag}. @param the type of the elements in the buffer @since Commons Collections 2.1 @version $Revision: 815006 $ $Date: 2009-09-15 07:44:36 +0200 (Tue, 15 Sep 2009) $ @author Avalon @author Berin Loritsch @author Paul Jack @author Stephen Colebourne
class,org/apache/commons/collections/FunctorException, Runtime exception thrown from functors. If required, a root cause error can be wrapped within this one. @since Commons Collections 3.0 @version $Revision: 956279 $ $Date: 2010-06-19 21:47:48 +0200 (Sat, 19 Jun 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/FunctorException/FunctorException/String, Constructs a new FunctorException with specified detail message. @param msg the error message.
method,org/apache/commons/collections/FunctorException/FunctorException/Throwable, Constructs a new FunctorException with specified nested Throwable root cause. @param rootCause the exception or error that caused this exception to be thrown.
method,org/apache/commons/collections/FunctorException/FunctorException/String;Throwable, Constructs a new FunctorException with specified detail message and nested Throwable root cause. @param msg the error message. @param rootCause the exception or error that caused this exception to be thrown.
method,org/apache/commons/collections/BagUtils/BagUtils/, Instantiation of BagUtils is not intended or required. However, some tools require an instance to operate.
class,org/apache/commons/collections/ArrayStack, An implementation of the {@link java.util.Stack} API that is based on an ArrayList instead of a Vector, so it is not synchronized to protect against multi-threaded access. The implementation is therefore operates faster in environments where you do not need to worry about multiple thread contention. The removal order of an ArrayStack is based on insertion order: The most recently added element is removed first. The iteration order is not the same as the removal order. The iterator returns elements from the bottom up, whereas the {@link #remove()} method removes them from the top down. Unlike Stack, ArrayStack accepts null entries. @see java.util.Stack @since Commons Collections 1.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Craig R. McClanahan @author Paul Jack @author Stephen Colebourne
method,org/apache/commons/collections/ArrayStack/push/Object, Pushes a new item onto the top of this stack. The pushed item is also returned. This is equivalent to calling add. @param item the item to be added @return the item just pushed
method,org/apache/commons/collections/OrderedMap/mapIterator/, Obtains an OrderedMapIterator over the map. A ordered map iterator is an efficient way of iterating over maps in both directions. @return a map iterator
method,org/apache/commons/collections/OrderedMap/nextKey/Object, Gets the next key after the one specified. @param key the key to search for next from @return the next key, null if no match or at end
method,org/apache/commons/collections/OrderedMap/previousKey/Object, Gets the previous key before the one specified. @param key the key to search for previous from @return the previous key, null if no match or at start
interface,org/apache/commons/collections/MultiMap, Defines a map that holds a collection of values against each key. A MultiMap is a Map with slightly different semantics. Putting a value into the map will add the value to a Collection at that key. Getting a value will return a Collection, holding all the values put to that key. For example: MultiMap mhm = new MultiHashMap(); mhm.put(key, A); mhm.put(key, B); mhm.put(key, C); Collection coll = (Collection) mhm.get(key); coll will be a collection containing A, B, C. NOTE: Additional methods were added to this interface in Commons Collections 3.1. These were added solely for documentation purposes and do not change the interface as they were defined in the superinterface Map anyway. @since Commons Collections 2.0 @version $Revision: 815090 $ $Date: 2009-09-15 07:56:27 +0200 (Tue, 15 Sep 2009) $ @author Christopher Berry @author James Strachan @author Stephen Colebourne
method,org/apache/commons/collections/MultiMap/size/, Gets the number of keys in this map. Implementations typically return only the count of keys in the map This cannot be mandated due to backwards compatability of this interface. @return the number of key-collection mappings in this map
method,org/apache/commons/collections/MultiMap/containsValue/Object, Checks whether the map contains the value specified. Implementations typically check all collections against all keys for the value. This cannot be mandated due to backwards compatability of this interface. @param value the value to search for @return true if the map contains the value @throws ClassCastException if the value is of an invalid type @throws NullPointerException if the value is null and null value are invalid
method,org/apache/commons/collections/MultiMap/values/, Gets a collection containing all the values in the map. Inplementations typically return a collection containing the combination of values from all keys. This cannot be mandated due to backwards compatability of this interface. @return a collection view of the values contained in this map
method,org/apache/commons/collections/FactoryUtils/nullFactory/, Gets a Factory that will return null each time the factory is used. This could be useful during testing as a placeholder. @see org.apache.commons.collections.functors.ConstantFactory @param the type of null object the factory should return. @return the factory
method,org/apache/commons/collections/ComparatorUtils/transformedComparator/Comparator;Transformer, Gets a Comparator that passes transformed objects to the given comparator. Objects passed to the returned comparator will first be transformed by the given transformer before they are compared by the given comparator. @param comparator the sort order to use @param transformer the transformer to use @return a comparator that transforms its input objects before comparing them @see TransformingComparator
class,org/apache/commons/collections/PredicateUtils, PredicateUtils provides reference implementations and utilities for the Predicate functor interface. The supplied predicates are: Invoker - returns the result of a method call on the input object InstanceOf - true if the object is an instanceof a class Equal - true if the object equals() a specified object Identity - true if the object == a specified object Null - true if the object is null NotNull - true if the object is not null Unique - true if the object has not already been evaluated And/All - true if all of the predicates are true Or/Any - true if any of the predicates is true Either/One - true if only one of the predicate is true Neither/None - true if none of the predicates are true Not - true if the predicate is false, and vice versa Transformer - wraps a Transformer as a Predicate True - always return true False - always return false Exception - always throws an exception NullIsException/NullIsFalse/NullIsTrue - check for null input Transformed - transforms the input before calling the predicate All the supplied predicates are Serializable. @since Commons Collections 3.0 @version $Revision: 815446 $ $Date: 2009-09-15 20:52:25 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne @author Ola Berg
method,org/apache/commons/collections/PredicateUtils/instanceofPredicate/Class, Creates a Predicate that checks if the object passed in is of a particular type, using instanceof. A null input object will return false. @see org.apache.commons.collections.functors.InstanceofPredicate @param type the type to check for, may not be null @return the predicate @throws IllegalArgumentException if the class is null
method,org/apache/commons/collections/PredicateUtils/nullIsExceptionPredicate/Predicate, Gets a Predicate that throws an exception if the input object is null, otherwise it calls the specified Predicate. This allows null handling behaviour to be added to Predicates that don't support nulls. @see org.apache.commons.collections.functors.NullIsExceptionPredicate @param predicate the predicate to wrap, may not be null @return the predicate @throws IllegalArgumentException if the predicate is null.
method,org/apache/commons/collections/PredicateUtils/nullIsFalsePredicate/Predicate, Gets a Predicate that returns false if the input object is null, otherwise it calls the specified Predicate. This allows null handling behaviour to be added to Predicates that don't support nulls. @see org.apache.commons.collections.functors.NullIsFalsePredicate @param predicate the predicate to wrap, may not be null @return the predicate @throws IllegalArgumentException if the predicate is null.
method,org/apache/commons/collections/PredicateUtils/nullIsTruePredicate/Predicate, Gets a Predicate that returns true if the input object is null, otherwise it calls the specified Predicate. This allows null handling behaviour to be added to Predicates that don't support nulls. @see org.apache.commons.collections.functors.NullIsTruePredicate @param predicate the predicate to wrap, may not be null @return the predicate @throws IllegalArgumentException if the predicate is null.
class,org/apache/commons/collections/IndexedCollection, An IndexedCollection is a Map-like view onto a Collection. It accepts a keyTransformer to define how the keys are converted from the values. Modifications made to this decorator modify the index as well as the decorated {@link Collection}. However, modifications to the underlying {@link Collection} will not updated the index and it will get out of sync. If modification to the decorated {@link Collection} is unavoidable, then a call to {@link #reindex()} will update the index to the current contents of the {@link Collection}. @param the type of object in the index. @param the type of object in the collection. @author Stephen Kestle
method,org/apache/commons/collections/ListUtils/hashCodeForList/Collection, Generates a hash code using the algorithm specified in {@link java.util.List#hashCode()}. This method is useful for implementing List when you cannot extend AbstractList. The method takes Collection instances to enable other collection types to use the List implementation algorithm. @see java.util.List#hashCode() @param list the list to generate the hashCode for, may be null @return the hash code
method,org/apache/commons/collections/ListUtils/ListUtils/, ListUtils should not normally be instantiated.
class,org/apache/commons/collections/ExtendedProperties, This class extends normal Java properties by adding the possibility to use the same key many times concatenating the value strings instead of overwriting them. Please consider using the {@link org.apache.commons.configuration.PropertiesConfiguration} class in Commons Configuration. It's an evolution of ExtendedProperties supporting more features like automatic reloading, advanced interpolation, more type conversions, changes notifications and file layout preservation. The Extended Properties syntax is explained here: Each property has the syntax key = value The key may use any character but the equal sign '='. value may be separated on different lines if a backslash is placed at the end of the line that continues below. If value is a list of strings, each token is separated by a comma ','. Commas in each token are escaped placing a backslash right before the comma. Backslashes are escaped by using two consecutive backslashes i.e. \\ If a key is used more than once, the values are appended as if they were on the same line separated with commas. Blank lines and lines starting with character '#' are skipped. If a property is named include (or whatever is defined by setInclude() and getInclude() and the value of that property is the full path to a file on disk, that file will be included into the ConfigurationsRepository. You can also pull in files relative to the parent configuration file. So if you have something like the following: include = additional.properties Then additional.properties is expected to be in the same directory as the parent configuration file. Duplicate name values will be replaced, so be careful. Here is an example of a valid extended properties file: # lines starting with # are comments # This is the simplest property key = value # A long property may be separated on multiple lines longvalue = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \ aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa # This is a property with many tokens tokens_on_a_line = first token, second token # This sequence generates exactly the same result tokens_on_multiple_lines = first token tokens_on_multiple_lines = second token # commas may be escaped in tokens commas.escaped = Hi\, what'up? NOTE: this class has not been written for performance nor low memory usage. In fact, it's way slower than it could be and generates too much memory garbage. But since performance is not an issue during intialization (and there is not much time to improve it), I wrote it this way. If you don't like it, go ahead and tune it up! @since Commons Collections 1.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stefano Mazzocchi @author Jon S. Stevens @author Dave Bryson @author Jason van Zyl @author Geir Magnusson Jr. @author Leon Messerschmidt @author Kent Johnson @author Daniel Rall @author Ilkka Priha @author Janek Bogucki @author Mohan Kishore @author Stephen Colebourne @author Shinobu Kawai @author Henning P. Schmiedehausen
method,org/apache/commons/collections/ExtendedProperties/interpolate/String, Interpolate key names to handle ${key} stuff @param base string to interpolate @return returns the key name with the ${key} substituted
method,org/apache/commons/collections/ExtendedProperties/isInitialized/, Indicate to client code whether property resources have been initialized or not.
method,org/apache/commons/collections/ExtendedProperties/getInclude/, Gets the property value for including other properties files. By default it is include. @return the property name which includes another property
method,org/apache/commons/collections/ExtendedProperties/setInclude/String, Sets the property value for including other properties files. By default it is include. @param inc the property name which includes another property, empty converted to null
method,org/apache/commons/collections/ExtendedProperties/getProperty/String, Gets a property from the configuration. @param key property to retrieve @return value as object. Will return user value if exists, if not then default value if exists, otherwise null
method,org/apache/commons/collections/ExtendedProperties/addProperty/String;Object, Add a property to the configuration. If it already exists then the value stated here will be added to the configuration entry. For example, if resource.loader = file is already present in the configuration and you addProperty(resource.loader, classpath) Then you will end up with a Vector like the following: [file, classpath] @param key the key to add @param value the value to add
method,org/apache/commons/collections/ExtendedProperties/setProperty/String;Object, Set a property, this will replace any previously set values. Set values is implicitly a call to clearProperty(key), addProperty(key,value). @param key the key to set @param value the value to set
method,org/apache/commons/collections/ExtendedProperties/combine/ExtendedProperties, Combines an existing Hashtable with this Hashtable. Warning: It will overwrite previous entries without warning. @param props the properties to combine
method,org/apache/commons/collections/ExtendedProperties/clearProperty/String, Clear a property in the configuration. @param key the property key to remove along with corresponding value
method,org/apache/commons/collections/ExtendedProperties/getKeys/, Get the list of the keys contained in the configuration repository. @return an Iterator over the keys
method,org/apache/commons/collections/ExtendedProperties/getKeys/String, Get the list of the keys contained in the configuration repository that match the specified prefix. @param prefix the prefix to match @return an Iterator of keys that match the prefix
method,org/apache/commons/collections/ExtendedProperties/subset/String, Create an ExtendedProperties object that is a subset of this one. Take into account duplicate keys by using the setProperty() in ExtendedProperties. @param prefix the prefix to get a subset for @return a new independent ExtendedProperties
method,org/apache/commons/collections/ExtendedProperties/display/, Display the configuration for debugging purposes to System.out.
method,org/apache/commons/collections/ExtendedProperties/getString/String, Get a string associated with the given configuration key. @param key The configuration key. @return The associated string. @throws ClassCastException is thrown if the key maps to an object that is not a String.
method,org/apache/commons/collections/ExtendedProperties/getString/String;String, Get a string associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated string if key is found, default value otherwise. @throws ClassCastException is thrown if the key maps to an object that is not a String.
method,org/apache/commons/collections/ExtendedProperties/getProperties/String, Get a list of properties associated with the given configuration key. @param key The configuration key. @return The associated properties if key is found. @throws ClassCastException is thrown if the key maps to an object that is not a String/List. @throws IllegalArgumentException if one of the tokens is malformed (does not contain an equals sign).
method,org/apache/commons/collections/ExtendedProperties/getProperties/String;Properties, Get a list of properties associated with the given configuration key. @param key The configuration key. @return The associated properties if key is found. @throws ClassCastException is thrown if the key maps to an object that is not a String/List. @throws IllegalArgumentException if one of the tokens is malformed (does not contain an equals sign).
method,org/apache/commons/collections/ExtendedProperties/getStringArray/String, Get an array of strings associated with the given configuration key. @param key The configuration key. @return The associated string array if key is found. @throws ClassCastException is thrown if the key maps to an object that is not a String/List.
method,org/apache/commons/collections/ExtendedProperties/getVector/String, Get a Vector of strings associated with the given configuration key. @param key The configuration key. @return The associated Vector. @throws ClassCastException is thrown if the key maps to an object that is not a Vector.
method,org/apache/commons/collections/ExtendedProperties/getVector/String;Vector, Get a Vector of strings associated with the given configuration key. The list is a copy of the internal data of this object, and as such you may alter it freely. @param key The configuration key. @param defaultValue The default value. @return The associated Vector. @throws ClassCastException is thrown if the key maps to an object that is not a Vector.
method,org/apache/commons/collections/ExtendedProperties/getList/String, Get a List of strings associated with the given configuration key. The list is a copy of the internal data of this object, and as such you may alter it freely. @param key The configuration key. @return The associated List object. @throws ClassCastException is thrown if the key maps to an object that is not a List. @since Commons Collections 3.2
method,org/apache/commons/collections/ExtendedProperties/getList/String;List, Get a List of strings associated with the given configuration key. The list is a copy of the internal data of this object, and as such you may alter it freely. @param key The configuration key. @param defaultValue The default value. @return The associated List. @throws ClassCastException is thrown if the key maps to an object that is not a List. @since Commons Collections 3.2
method,org/apache/commons/collections/ExtendedProperties/getBoolean/String, Get a boolean associated with the given configuration key. @param key The configuration key. @return The associated boolean. @throws NoSuchElementException is thrown if the key doesn't map to an existing object. @throws ClassCastException is thrown if the key maps to an object that is not a Boolean.
method,org/apache/commons/collections/ExtendedProperties/getBoolean/String;boolean, Get a boolean associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated boolean. @throws ClassCastException is thrown if the key maps to an object that is not a Boolean.
method,org/apache/commons/collections/ExtendedProperties/getBoolean/String;Boolean, Get a boolean associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated boolean if key is found and has valid format, default value otherwise. @throws ClassCastException is thrown if the key maps to an object that is not a Boolean.
method,org/apache/commons/collections/ExtendedProperties/testBoolean/String, Test whether the string represent by value maps to a boolean value or not. We will allow true, on, and yes for a true boolean value, and false, off, and no for false boolean values. Case of value to test for boolean status is ignored. @param value the value to test for boolean state @return true or false if the supplied text maps to a boolean value, or null otherwise.
method,org/apache/commons/collections/ExtendedProperties/getByte/String, Get a byte associated with the given configuration key. @param key The configuration key. @return The associated byte. @throws NoSuchElementException is thrown if the key doesn't map to an existing object. @throws ClassCastException is thrown if the key maps to an object that is not a Byte. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getByte/String;byte, Get a byte associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated byte. @throws ClassCastException is thrown if the key maps to an object that is not a Byte. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getByte/String;Byte, Get a byte associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated byte if key is found and has valid format, default value otherwise. @throws ClassCastException is thrown if the key maps to an object that is not a Byte. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getShort/String, Get a short associated with the given configuration key. @param key The configuration key. @return The associated short. @throws NoSuchElementException is thrown if the key doesn't map to an existing object. @throws ClassCastException is thrown if the key maps to an object that is not a Short. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getShort/String;short, Get a short associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated short. @throws ClassCastException is thrown if the key maps to an object that is not a Short. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getShort/String;Short, Get a short associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated short if key is found and has valid format, default value otherwise. @throws ClassCastException is thrown if the key maps to an object that is not a Short. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getInt/String, The purpose of this method is to get the configuration resource with the given name as an integer. @param name The resource name. @return The value of the resource as an integer.
method,org/apache/commons/collections/ExtendedProperties/getInt/String;int, The purpose of this method is to get the configuration resource with the given name as an integer, or a default value. @param name The resource name @param def The default value of the resource. @return The value of the resource as an integer.
method,org/apache/commons/collections/ExtendedProperties/getInteger/String, Get a int associated with the given configuration key. @param key The configuration key. @return The associated int. @throws NoSuchElementException is thrown if the key doesn't map to an existing object. @throws ClassCastException is thrown if the key maps to an object that is not a Integer. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getInteger/String;int, Get a int associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated int. @throws ClassCastException is thrown if the key maps to an object that is not a Integer. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getInteger/String;Integer, Get a int associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated int if key is found and has valid format, default value otherwise. @throws ClassCastException is thrown if the key maps to an object that is not a Integer. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getLong/String, Get a long associated with the given configuration key. @param key The configuration key. @return The associated long. @throws NoSuchElementException is thrown if the key doesn't map to an existing object. @throws ClassCastException is thrown if the key maps to an object that is not a Long. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getLong/String;long, Get a long associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated long. @throws ClassCastException is thrown if the key maps to an object that is not a Long. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getLong/String;Long, Get a long associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated long if key is found and has valid format, default value otherwise. @throws ClassCastException is thrown if the key maps to an object that is not a Long. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getFloat/String, Get a float associated with the given configuration key. @param key The configuration key. @return The associated float. @throws NoSuchElementException is thrown if the key doesn't map to an existing object. @throws ClassCastException is thrown if the key maps to an object that is not a Float. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getFloat/String;float, Get a float associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated float. @throws ClassCastException is thrown if the key maps to an object that is not a Float. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getFloat/String;Float, Get a float associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated float if key is found and has valid format, default value otherwise. @throws ClassCastException is thrown if the key maps to an object that is not a Float. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getDouble/String, Get a double associated with the given configuration key. @param key The configuration key. @return The associated double. @throws NoSuchElementException is thrown if the key doesn't map to an existing object. @throws ClassCastException is thrown if the key maps to an object that is not a Double. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getDouble/String;double, Get a double associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated double. @throws ClassCastException is thrown if the key maps to an object that is not a Double. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/getDouble/String;Double, Get a double associated with the given configuration key. @param key The configuration key. @param defaultValue The default value. @return The associated double if key is found and has valid format, default value otherwise. @throws ClassCastException is thrown if the key maps to an object that is not a Double. @throws NumberFormatException is thrown if the value mapped by the key has not a valid number format.
method,org/apache/commons/collections/ExtendedProperties/convertProperties/Properties, Convert a standard properties class into a configuration class. NOTE: From Commons Collections 3.2 this method will pick up any default parent Properties of the specified input object. As with java.util.Properties(Properties), any non-String values will not be passed on in the new ExtendedProperties object. @param props the properties object to convert @return new ExtendedProperties created from props
method,org/apache/commons/collections/ExtendedProperties/put/Object;Object, Add a new property specified by the key to the ExtendedProperties. @param key specifying the property @param value for the property @return old value of the property
method,org/apache/commons/collections/ExtendedProperties/putAll/Map, Add a map full of key/value pairs to the ExtendedProperties. If the added map is an ExtendedProperties class, then the order of the added properties is maintained. @param map full of key/value pair data
method,org/apache/commons/collections/ExtendedProperties/remove/Object, Remove the property specified by the key from the ExtendedProperties. @param key specifying the property @return old value of the property
method,org/apache/commons/collections/ExtendedProperties/ExtendedProperties/, Creates an empty extended properties object.
field,org/apache/commons/collections/ExtendedProperties/file, The file connected to this repository (holding comments and such). @serial
field,org/apache/commons/collections/ExtendedProperties/basePath, Base path of the configuration file used to create this ExtendedProperties object.
field,org/apache/commons/collections/ExtendedProperties/fileSeparator, File separator.
field,org/apache/commons/collections/ExtendedProperties/isInitialized, Has this configuration been intialized.
field,org/apache/commons/collections/ExtendedProperties/keysAsListed, These are the keys in the order they listed in the configuration file. This is useful when you wish to perform operations with configuration information in a particular order.
field,org/apache/commons/collections/ExtendedProperties/START_TOKEN,
field,org/apache/commons/collections/ExtendedProperties/END_TOKEN,
interface,org/apache/commons/collections/Unmodifiable, Marker interface for collections, maps and iterators that are unmodifiable. This interface enables testing such as: if (coll instanceof Unmodifiable) { coll = new ArrayList(coll); } // now we know coll is modifiable Of course all this only works if you use the Unmodifiable classes defined in this library. If you use the JDK unmodifiable class via java util Collections then the interface won't be there. @since Commons Collections 3.0 @version $Revision: 814126 $ $Date: 2009-09-12 11:38:27 +0200 (Sat, 12 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/comparators/BooleanComparator/sortsTrueFirst/, Returns true iff I sort true values before false values. In other words, returns true iff {@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)} returns a positive value. @return the trueFirst flag
method,org/apache/commons/collections/comparators/BooleanComparator/BooleanComparator/, Creates a BooleanComparator that sorts false values before true values. Equivalent to {@link #BooleanComparator(boolean) BooleanComparator(false)}. Please use the static factory instead whenever possible.
method,org/apache/commons/collections/comparators/BooleanComparator/BooleanComparator/boolean, Creates a BooleanComparator that sorts trueFirst values before &#x21;trueFirst values. Please use the static factories instead whenever possible. @param trueFirst when true, sort true boolean values before false
method,org/apache/commons/collections/comparators/NullComparator/compare/Object;Object, Perform a comparison between two objects. If both objects are null, a 0 value is returned. If one object is null and the other is not, the result is determined on whether the Comparator was constructed to have nulls as higher or lower than other objects. If neither object is null, an underlying comparator specified in the constructor (or the default) is used to compare the non-null objects. @param o1 the first object to compare @param o2 the object to compare it to. @return -1 if o1 is lower than (less than, before, etc.) o2; 1 if o1 is higher than (greater than, after, etc.) o2; or 0 if o1 and o2 are equal.
method,org/apache/commons/collections/comparators/NullComparator/NullComparator/boolean, Construct an instance that sorts null higher or lower than any non-null object it is compared with. When comparing two non-null objects, the {@link ComparableComparator} is used. @param nullsAreHigh a true value indicates that null should be compared as higher than a non-null object. A false value indicates that null should be compared as lower than a non-null object.
method,org/apache/commons/collections/comparators/NullComparator/NullComparator/Comparator;boolean, Construct an instance that sorts null higher or lower than any non-null object it is compared with. When comparing two non-null objects, the specified {@link Comparator} is used. @param nonNullComparator the comparator to use when comparing two non-null objects. This argument cannot be null @param nullsAreHigh a true value indicates that null should be compared as higher than a non-null object. A false value indicates that null should be compared as lower than a non-null object. @exception NullPointerException if nonNullComparator is null
class,org/apache/commons/collections/comparators/ComparableComparator, A {@link Comparator Comparator} that compares {@link Comparable Comparable} objects. This Comparator is useful, for example, for enforcing the natural order in custom implementations of SortedSet and SortedMap. Note: In the 2.0 and 2.1 releases of Commons Collections, this class would throw a {@link ClassCastException} if either of the arguments to {@link #compare(Object, Object) compare} were null, not {@link Comparable Comparable}, or for which {@link Comparable#compareTo(Object) compareTo} gave inconsistent results. This is no longer the case. See {@link #compare(Object, Object) compare} for details. @since Commons Collections 2.0 @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $ @see java.util.Collections#reverseOrder()
method,org/apache/commons/collections/comparators/FixedOrderComparator/checkLocked/, Checks to see whether the comparator is now locked against further changes. @throws UnsupportedOperationException if the comparator is locked
method,org/apache/commons/collections/comparators/FixedOrderComparator/add/Object, Adds an item, which compares as after all items known to the Comparator. If the item is already known to the Comparator, its old position is replaced with the new position. @param obj the item to be added to the Comparator. @return true if obj has been added for the first time, false if it was already known to the Comparator. @throws UnsupportedOperationException if a comparison has already been made
method,org/apache/commons/collections/comparators/FixedOrderComparator/compare/Object;Object, Compares two objects according to the order of this Comparator. It is important to note that this class will throw an IllegalArgumentException in the case of an unrecognised object. This is not specified in the Comparator interface, but is the most appropriate exception. @param obj1 the first object to compare @param obj2 the second object to compare @return negative if obj1 is less, positive if greater, zero if equal @throws IllegalArgumentException if obj1 or obj2 are not known to this Comparator and an alternative behavior has not been set via {@link #setUnknownObjectBehavior(UnknownObjectBehavior)}.
field,org/apache/commons/collections/comparators/FixedOrderComparator/UnknownObjectBehavior/BEFORE,
field,org/apache/commons/collections/comparators/FixedOrderComparator/UnknownObjectBehavior/AFTER,
method,org/apache/commons/collections/comparators/ComparatorChain/ComparatorChain/List;BitSet, Construct a ComparatorChain from the Comparators in the given List. The sort order of each column will be drawn from the given BitSet. When determining the sort order for Comparator at index i in the List, the ComparatorChain will call BitSet.get(i). If that method returns false, the forward sort order is used; a return value of true indicates reverse sort order. @param list List of Comparators. NOTE: This constructor does not perform a defensive copy of the list @param bits Sort order for each Comparator. Extra bits are ignored, unless extra Comparators are added by another method.
field,org/apache/commons/collections/comparators/ComparatorChain/isLocked,Whether the chain has been locked. 
class,org/apache/commons/collections/list/AbstractLinkedList, An abstract implementation of a linked list which provides numerous points for subclasses to override. Overridable methods are provided to change the storage node and to change how nodes are added to and removed. Hopefully, all you need for unusual subclasses is here. @since Commons Collections 3.0 @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $ @author Rich Dougherty @author Phil Steitz @author Stephen Colebourne
method,org/apache/commons/collections/list/AbstractLinkedList/addNodeBefore/Node;Object, Creates a new node with the specified object as its value and inserts it before node. This implementation uses {@link #createNode(Object)} and {@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}. @param node node to insert before @param value value of the newly added node @throws NullPointerException if node is null
method,org/apache/commons/collections/list/AbstractLinkedList/addNodeAfter/Node;Object, Creates a new node with the specified object as its value and inserts it after node. This implementation uses {@link #createNode(Object)} and {@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}. @param node node to insert after @param value value of the newly added node @throws NullPointerException if node is null
method,org/apache/commons/collections/list/AbstractLinkedList/addNode/Node;Node, Inserts a new node into the list. @param nodeToInsert new node to insert @param insertBeforeNode node to insert before @throws NullPointerException if either node is null
method,org/apache/commons/collections/list/AbstractLinkedList/doWriteObject/ObjectOutputStream, Serializes the data held in this object to the stream specified. The first serializable subclass must call this method from writeObject.
method,org/apache/commons/collections/list/AbstractLinkedList/doReadObject/ObjectInputStream, Deserializes the data held in this object to the stream specified. The first serializable subclass must call this method from readObject.
method,org/apache/commons/collections/list/AbstractLinkedList/AbstractLinkedList/, Constructor that does nothing intended for deserialization. If this constructor is used by a serializable subclass then the init() method must be called.
field,org/apache/commons/collections/list/AbstractLinkedList/Node/previous,A pointer to the node before this node 
field,org/apache/commons/collections/list/AbstractLinkedList/Node/next,A pointer to the node after this node 
method,org/apache/commons/collections/list/AbstractLinkedList/LinkedListIterator/checkModCount/, Checks the modification count of the list is the value that this object expects. @throws ConcurrentModificationException If the list's modification count isn't the value that was expected.
method,org/apache/commons/collections/list/AbstractLinkedList/LinkedListIterator/getLastNodeReturned/, Gets the last node returned. @throws IllegalStateException If {@link #next()} or {@link #previous()} haven't been called, or if the node has been removed with {@link #remove()} or a new node added with {@link #add(Object)}.
field,org/apache/commons/collections/list/AbstractLinkedList/LinkedListIterator/current, The last node that was returned by {@link #next()} or {@link #previous()}. Set to null if {@link #next()} or {@link #previous()} haven't been called, or if the node has been removed with {@link #remove()} or a new node added with {@link #add(Object)}. Should be accessed through {@link #getLastNodeReturned()} to enforce this behaviour.
field,org/apache/commons/collections/list/AbstractLinkedList/LinkedListIterator/expectedModCount, The modification count that the list is expected to have. If the list doesn't have this count, then a {@link java.util.ConcurrentModificationException} may be thrown by the operations.
method,org/apache/commons/collections/list/SetUniqueList/add/int;Object, Adds an element to a specific index in the list if it is not already present. (Violation) The List interface makes the assumption that the element is always inserted. This may not happen with this implementation. @param index the index to insert at @param object the object to add
method,org/apache/commons/collections/list/SetUniqueList/addAll/Collection, Adds a collection of objects to the end of the list avoiding duplicates. Only elements that are not already in this list will be added, and duplicates from the specified collection will be ignored. (Violation) The List interface makes the assumption that the elements are always inserted. This may not happen with this implementation. @param coll the collection to add in iterator order @return true if this collection changed
method,org/apache/commons/collections/list/SetUniqueList/addAll/int;Collection, Adds a collection of objects a specific index in the list avoiding duplicates. Only elements that are not already in this list will be added, and duplicates from the specified collection will be ignored. (Violation) The List interface makes the assumption that the elements are always inserted. This may not happen with this implementation. @param index the index to insert at @param coll the collection to add in iterator order @return true if this collection changed
class,org/apache/commons/collections/list/AbstractSerializableListDecorator, Serializable subclass of AbstractListDecorator. @author Stephen Colebourne @since Commons Collections 3.1
method,org/apache/commons/collections/list/TreeList/add/int;Object, Adds a new element to the list. @param index the index to add before @param obj the element to add
method,org/apache/commons/collections/list/GrowthList/add/int;Object, Decorate the add method to perform the growth behaviour. If the requested index is greater than the current size, the list will grow to the new size. Indices between the old size and the requested size will be filled with null. If the index is less than the current size, the value will be added to the underlying list directly. If the index is less than zero, the underlying list is called, which will probably throw an IndexOutOfBoundsException. @param index the index to add at @param element the object to add at the specified index @throws UnsupportedOperationException if the underlying list doesn't implement set @throws ClassCastException if the underlying list rejects the element @throws IllegalArgumentException if the underlying list rejects the element
method,org/apache/commons/collections/list/GrowthList/addAll/int;Collection, Decorate the addAll method to perform the growth behaviour. If the requested index is greater than the current size, the list will grow to the new size. Indices between the old size and the requested size will be filled with null. If the index is less than the current size, the values will be added to the underlying list directly. If the index is less than zero, the underlying list is called, which will probably throw an IndexOutOfBoundsException. @param index the index to add at @param coll the collection to add at the specified index @return true if the list changed @throws UnsupportedOperationException if the underlying list doesn't implement set @throws ClassCastException if the underlying list rejects the element @throws IllegalArgumentException if the underlying list rejects the element
method,org/apache/commons/collections/list/GrowthList/set/int;Object, Decorate the set method to perform the growth behaviour. If the requested index is greater than the current size, the list will grow to the new size. Indices between the old size and the requested size will be filled with null. If the index is less than the current size, the value will be set onto the underlying list directly. If the index is less than zero, the underlying list is called, which will probably throw an IndexOutOfBoundsException. @param index the index to set @param element the object to set at the specified index @return the object previously at that index @throws UnsupportedOperationException if the underlying list doesn't implement set @throws ClassCastException if the underlying list rejects the element @throws IllegalArgumentException if the underlying list rejects the element
class,org/apache/commons/collections/list/AbstractListDecorator, Decorates another List to provide additional behaviour. Methods are forwarded directly to the decorated list. @param the type of the elements in the list @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/list/CursorableLinkedList/init/, The equivalent of a default constructor called by any constructor and by readObject.
method,org/apache/commons/collections/list/CursorableLinkedList/iterator/, Returns an iterator that does not support concurrent modification. If the underlying list is modified while iterating using this iterator a ConcurrentModificationException will occur. The cursor behaviour is available via {@link #listIterator()}. @return a new iterator that does not support concurrent modification
method,org/apache/commons/collections/list/CursorableLinkedList/addNode/Node;Node, Inserts a new node into the list. @param nodeToInsert new node to insert @param insertBeforeNode node to insert before @throws NullPointerException if either node is null
class,org/apache/commons/collections/list/CursorableLinkedList/Cursor, An extended ListIterator that allows concurrent changes to the underlying list.
method,org/apache/commons/collections/list/CursorableLinkedList/Cursor/checkModCount/, Override superclass modCount check, and replace it with our valid flag.
method,org/apache/commons/collections/list/NodeCachingLinkedList/shrinkCacheToMaximumSize/, Reduce the size of the cache to the maximum, if necessary.
method,org/apache/commons/collections/list/NodeCachingLinkedList/removeAllNodes/, Removes all the nodes from the list, storing as many as required in the cache for reuse. 
class,org/apache/commons/collections/list/SynchronizedList, Decorates another List to synchronize its behaviour for a multi-threaded environment. Methods are synchronized, then forwarded to the decorated list. This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 815067 $ $Date: 2009-09-15 07:55:45 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/list/SynchronizedList/getList/, Gets the decorated list. @return the decorated list
method,org/apache/commons/collections/list/SynchronizedList/add/int;Object,
method,org/apache/commons/collections/list/SynchronizedList/addAll/int;Collection,
method,org/apache/commons/collections/list/SynchronizedList/get/int,
method,org/apache/commons/collections/list/SynchronizedList/indexOf/Object,
method,org/apache/commons/collections/list/SynchronizedList/lastIndexOf/Object,
method,org/apache/commons/collections/list/SynchronizedList/listIterator/, Iterators must be manually synchronized. synchronized (coll) { ListIterator it = coll.listIterator(); // do stuff with iterator } @return an iterator that must be manually synchronized on the collection
method,org/apache/commons/collections/list/SynchronizedList/listIterator/int, Iterators must be manually synchronized. synchronized (coll) { ListIterator it = coll.listIterator(3); // do stuff with iterator } @return an iterator that must be manually synchronized on the collection
method,org/apache/commons/collections/list/SynchronizedList/remove/int,
method,org/apache/commons/collections/list/SynchronizedList/set/int;Object,
method,org/apache/commons/collections/list/SynchronizedList/subList/int;int,
class,org/apache/commons/collections/list/PredicatedList, Decorates another List to validate that all additions match a specified predicate. This list exists to provide validation for the decorated list. It is normally created to decorate an empty list. If an object cannot be added to the list, an IllegalArgumentException is thrown. One usage would be to ensure that no null entries are added to the list. List list = PredicatedList.decorate(new ArrayList(), NotNullPredicate.INSTANCE); This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 966315 $ $Date: 2010-07-21 19:03:58 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Paul Jack
class,org/apache/commons/collections/list/LazyList, Decorates another List to create objects in the list on demand. When the {@link #get(int)} method is called with an index greater than the size of the list, the list will automatically grow in size and return a new object from the specified factory. The gaps will be filled by null. If a get method call encounters a null, it will be replaced with a new object from the factory. Thus this list is unsuitable for storing null objects. For instance: Factory factory = new Factory() { public Object create() { return new Date(); } } List lazy = LazyList.decorate(new ArrayList(), factory); Object obj = lazy.get(3); After the above code is executed, obj will contain a new Date instance. Furthermore, that Date instance is the fourth element in the list. The first, second, and third element are all set to null. This class differs from {@link GrowthList} because here growth occurs on get, where GrowthList grows on set and add. However, they could easily be used together by decorating twice. This class is Serializable from Commons Collections 3.1. @see GrowthList @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Arron Bates @author Paul Jack
method,org/apache/commons/collections/list/LazyList/get/int, Decorate the get method to perform the lazy behaviour. If the requested index is greater than the current size, the list will grow to the new size and a new object will be returned from the factory. Indexes in-between the old size and the requested size are left with a placeholder that is replaced with a factory object when requested. @param index the index to retrieve
class,org/apache/commons/collections/functors/FactoryTransformer, Transformer implementation that calls a Factory and returns the result. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/FactoryTransformer/getInstance/Factory, Factory method that performs validation. @param factory the factory to call, not null @return the factory transformer @throws IllegalArgumentException if the factory is null
method,org/apache/commons/collections/functors/FactoryTransformer/transform/Object, Transforms the input by ignoring the input and returning the result of calling the decorated factory. @param input the input object to transform @return the transformed result
method,org/apache/commons/collections/functors/FactoryTransformer/FactoryTransformer/Factory, Constructor that performs no validation. Use getInstance if you want that. @param factory the factory to call, not null
class,org/apache/commons/collections/functors/StringValueTransformer, Transformer implementation that returns the result of calling String.valueOf on the input object. @since Commons Collections 3.0 @version $Revision: 894507 $ $Date: 2009-12-30 00:12:18 +0100 (Wed, 30 Dec 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/StringValueTransformer/transform/Object, Transforms the input to result by calling String.valueOf. @param input the input object to transform @return the transformed result
class,org/apache/commons/collections/functors/NonePredicate, Predicate implementation that returns true if none of the predicates return true. If the array of predicates is empty, then this predicate returns true. NOTE: In versions prior to 3.2 an array size of zero or one threw an exception. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne @author Matt Benson
class,org/apache/commons/collections/functors/TransformerClosure, Closure implementation that calls a Transformer using the input object and ignore the result. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/TransformerClosure/execute/Object, Executes the closure by calling the decorated transformer. @param input the input object
method,org/apache/commons/collections/functors/TransformerClosure/TransformerClosure/Transformer, Constructor that performs no validation. Use getInstance if you want that. @param transformer the transformer to call, not null
class,org/apache/commons/collections/functors/SwitchClosure, Closure implementation calls the closure whose predicate returns true, like a switch statement. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/ChainedClosure/getInstance/Collection, Create a new Closure that calls each closure in turn, passing the result into the next closure. The ordering is that of the iterator() method on the collection. @param closures a collection of closures to chain @return the chained closure @throws IllegalArgumentException if the closures collection is null @throws IllegalArgumentException if any closure in the collection is null
class,org/apache/commons/collections/functors/ClosureTransformer, Transformer implementation that calls a Closure using the input object and then returns the input. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/ClosureTransformer/getInstance/Closure, Factory method that performs validation. @param closure the closure to call, not null @return the closure transformer @throws IllegalArgumentException if the closure is null
method,org/apache/commons/collections/functors/ClosureTransformer/ClosureTransformer/Closure, Constructor that performs no validation. Use getInstance if you want that. @param closure the closure to call, not null
method,org/apache/commons/collections/functors/NullIsFalsePredicate/evaluate/Object, Evaluates the predicate returning the result of the decorated predicate once a null check is performed. @param object the input object @return true if decorated predicate returns true, false if input is null
method,org/apache/commons/collections/functors/NullIsFalsePredicate/NullIsFalsePredicate/Predicate, Constructor that performs no validation. Use getInstance if you want that. @param predicate the predicate to call after the null check
class,org/apache/commons/collections/functors/InvokerTransformer, Transformer implementation that creates a new object instance by reflection. @since Commons Collections 3.0 @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/InvokerTransformer/getInstance/String, Gets an instance of this transformer calling a specific method with no arguments. @param methodName the method name to call @return an invoker transformer @since Commons Collections 3.1
method,org/apache/commons/collections/functors/InvokerTransformer/getInstance/String;Class[];Object[], Gets an instance of this transformer calling a specific method with specific values. @param methodName the method name to call @param paramTypes the parameter types of the method @param args the arguments to pass to the method @return an invoker transformer
method,org/apache/commons/collections/functors/InvokerTransformer/transform/Object, Transforms the input to result by invoking a method on the input. @param input the input object to transform @return the transformed result, null if null input
method,org/apache/commons/collections/functors/InvokerTransformer/InvokerTransformer/String;Class[];Object[], Constructor that performs no validation. Use getInstance if you want that. @param methodName the method to call @param paramTypes the constructor parameter types, not cloned @param args the constructor arguments, not cloned
method,org/apache/commons/collections/functors/InstanceofPredicate/getInstance/Class, Factory to create the identity predicate. @param type the type to check for, may not be null @return the predicate @throws IllegalArgumentException if the class is null
class,org/apache/commons/collections/functors/TransformedPredicate, Predicate implementation that transforms the given object before invoking another Predicate. @since Commons Collections 3.1 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Alban Peignier @author Stephen Colebourne
method,org/apache/commons/collections/functors/TransformedPredicate/evaluate/Object, Evaluates the predicate returning the result of the decorated predicate once the input has been transformed @param object the input object which will be transformed @return true if decorated predicate returns true
class,org/apache/commons/collections/functors/AnyPredicate, Predicate implementation that returns true if any of the predicates return true. If the array of predicates is empty, then this predicate returns false. NOTE: In versions prior to 3.2 an array size of zero or one threw an exception. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne @author Matt Benson
class,org/apache/commons/collections/functors/IfClosure, Closure implementation acts as an if statement calling one or other closure based on a predicate. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne @author Matt Benson
method,org/apache/commons/collections/functors/IfClosure/getTrueClosure/, Gets the closure called when true. @return the closure @since Commons Collections 3.1
method,org/apache/commons/collections/functors/IfClosure/getFalseClosure/, Gets the closure called when false. @return the closure @since Commons Collections 3.1
class,org/apache/commons/collections/functors/ForClosure, Closure implementation that calls another closure n times, like a for loop. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
class,org/apache/commons/collections/functors/AllPredicate, Predicate implementation that returns true if all the predicates return true. If the array of predicates is empty, then this predicate returns true. NOTE: In versions prior to 3.2 an array size of zero or one threw an exception. @since Commons Collections 3.0 @version $Revision: 815431 $ $Date: 2009-09-15 20:11:17 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne @author Matt Benson @author Stephen Kestle
class,org/apache/commons/collections/functors/PredicateTransformer, Transformer implementation that calls a Predicate using the input object and then returns the result. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/PredicateTransformer/getInstance/Predicate, Factory method that performs validation. @param predicate the predicate to call, not null @return the predicate transformer @throws IllegalArgumentException if the predicate is null
method,org/apache/commons/collections/functors/PredicateTransformer/transform/Object, Transforms the input to result by calling a predicate. @param input the input object to transform @return the transformed result
method,org/apache/commons/collections/functors/PredicateTransformer/PredicateTransformer/Predicate, Constructor that performs no validation. Use getInstance if you want that. @param predicate the predicate to call, not null
method,org/apache/commons/collections/functors/ConstantTransformer/equals/Object, {@inheritDoc}
method,org/apache/commons/collections/functors/ConstantTransformer/hashCode/, {@inheritDoc}
class,org/apache/commons/collections/functors/SwitchTransformer, Transformer implementation calls the transformer whose predicate returns true, like a switch statement. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/SwitchTransformer/transform/Object, Transforms the input to result by calling the transformer whose matching predicate returns true. @param input the input object to transform @return the transformed result
method,org/apache/commons/collections/functors/NotPredicate/NotPredicate/Predicate, Constructor that performs no validation. Use getInstance if you want that. @param predicate the predicate to call after the null check
class,org/apache/commons/collections/functors/WhileClosure, Closure implementation that executes a closure repeatedly until a condition is met, like a do-while or while loop. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/functors/ChainedTransformer/getInstance/Collection, Create a new Transformer that calls each transformer in turn, passing the result into the next transformer. The ordering is that of the iterator() method on the collection. @param transformers a collection of transformers to chain @return the chained transformer @throws IllegalArgumentException if the transformers collection is null @throws IllegalArgumentException if any transformer in the collection is null
class,org/apache/commons/collections/functors/OnePredicate, Predicate implementation that returns true if only one of the predicates return true. If the array of predicates is empty, then this predicate returns false. NOTE: In versions prior to 3.2 an array size of zero or one threw an exception. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne @author Matt Benson
method,org/apache/commons/collections/functors/OnePredicate/evaluate/Object, Evaluates the predicate returning true if only one decorated predicate returns true. @param object the input object @return true if only one decorated predicate returns true
interface,org/apache/commons/collections/functors/Equator, An equation function, which determines equality between objects of type T. It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}. @param the types of object this {@link Equator} can evaluate. @author Stephen Kestle @since 4.0
method,org/apache/commons/collections/functors/Equator/hash/Object, Calculates the hash for the object, based on the method of equality used in the equate method. This is used for classes that delegate their {@link #equals(Object)} method to an Equator (and so must also delegate their {@link #hashCode()} method), or for implementations of {@link HashedMap} that use an Equator for the key objects. @param o the object to calculate the hash for. @return the hash of the object.
method,org/apache/commons/collections/functors/NullIsTruePredicate/evaluate/Object, Evaluates the predicate returning the result of the decorated predicate once a null check is performed. @param object the input object @return true if decorated predicate returns true or input is null
method,org/apache/commons/collections/functors/NullIsTruePredicate/NullIsTruePredicate/Predicate, Constructor that performs no validation. Use getInstance if you want that. @param predicate the predicate to call after the null check
method,org/apache/commons/collections/functors/NullIsExceptionPredicate/evaluate/Object, Evaluates the predicate returning the result of the decorated predicate once a null check is performed. @param object the input object @return true if decorated predicate returns true @throws FunctorException if input is null
method,org/apache/commons/collections/functors/NullIsExceptionPredicate/NullIsExceptionPredicate/Predicate, Constructor that performs no validation. Use getInstance if you want that. @param predicate the predicate to call after the null check
class,org/apache/commons/collections/iterators/FilterListIterator, Decorates another {@link ListIterator} using a predicate to filter elements. This iterator decorates the underlying iterator, only allowing through those elements that match the specified {@link Predicate Predicate}. @since Commons Collections 2.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Rodney Waldhoff
method,org/apache/commons/collections/iterators/FilterListIterator/FilterListIterator/, Constructs a new FilterListIterator that will not function until {@link #setListIterator(ListIterator) setListIterator} and {@link #setPredicate(Predicate) setPredicate} are invoked.
method,org/apache/commons/collections/iterators/EnumerationIterator/remove/, Removes the last retrieved element if a collection is attached. Functions if an associated Collection is known. If so, the first occurrence of the last returned object from this iterator will be removed from the collection. @exception IllegalStateException next() not called. @exception UnsupportedOperationException if no associated collection
method,org/apache/commons/collections/iterators/EnumerationIterator/EnumerationIterator/, Constructs a new EnumerationIterator that will not function until {@link #setEnumeration(Enumeration)} is called.
class,org/apache/commons/collections/iterators/EmptyIterator, Provides an implementation of an empty iterator. This class provides an implementation of an empty iterator. This class provides for binary compatability between Commons Collections 2.1.1 and 3.1 due to issues with IteratorUtils. @since Commons Collections 2.1.1 and 3.1 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
class,org/apache/commons/collections/iterators/UniqueFilterIterator, A FilterIterator which only returns unique Objects. Internally, the Iterator maintains a Set of objects it has already encountered, and duplicate Objects are skipped. @since Commons Collections 2.1 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Morgan Delagrange
class,org/apache/commons/collections/iterators/ObjectArrayIterator, An {@link Iterator} over an array of objects. This iterator does not support {@link #remove}, as the object array cannot be structurally modified. The iterator implements a {@link #reset} method, allowing the reset of the iterator back to the start if required. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author James Strachan @author Mauricio S. Moura @author Michael A. Smith @author Neil O'Toole @author Stephen Colebourne @author Phil Steitz
method,org/apache/commons/collections/iterators/ObjectArrayIterator/getArray/, Gets the array that this iterator is iterating over. @return the array this iterator iterates over, or null if the no-arg constructor was used and {@link #setArray} has never been called with a valid array.
method,org/apache/commons/collections/iterators/ObjectArrayIterator/ObjectArrayIterator/, Constructor for use with setArray. Using this constructor, the iterator is equivalent to an empty iterator until {@link #setArray} is called to establish the array to iterate over.
class,org/apache/commons/collections/iterators/ListIteratorWrapper, Converts an {@link Iterator} into a {@link ResettableListIterator}. For plain Iterators this is accomplished by caching the returned elements. This class can also be used to simply add {@link ResettableIterator} functionality to a given {@link ListIterator}. The ListIterator interface has additional useful methods for navigation - previous() and the index methods. This class allows a regular Iterator to behave as a ListIterator. It achieves this by building a list internally of as the underlying iterator is traversed. The optional operations of ListIterator are not supported for plain Iterators. This class implements ResettableListIterator from Commons Collections 3.2. @since Commons Collections 2.1 @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $ @author Morgan Delagrange @author Stephen Colebourne @author Matt Benson
method,org/apache/commons/collections/iterators/ListIteratorWrapper/remove/, Throws {@link UnsupportedOperationException} if {@link #previous()} has ever been called. @throws UnsupportedOperationException always
method,org/apache/commons/collections/iterators/ArrayListIterator/ArrayListIterator/, Constructor for use with setArray. Using this constructor, the iterator is equivalent to an empty iterator until {@link #setArray(Object)} is called to establish the array to iterate over.
method,org/apache/commons/collections/iterators/LoopingListIterator/hasNext/, Returns whether this iterator has any more elements. Returns false only if the list originally had zero elements, or all elements have been {@link #remove removed}. @return true if there are more elements
method,org/apache/commons/collections/iterators/LoopingListIterator/next/, Returns the next object in the list. If at the end of the list, returns the first element. @return the object after the last element returned @throws NoSuchElementException if there are no elements in the list
method,org/apache/commons/collections/iterators/LoopingListIterator/hasPrevious/, Returns whether this iterator has any more previous elements. Returns false only if the list originally had zero elements, or all elements have been {@link #remove removed}. @return true if there are more elements
method,org/apache/commons/collections/iterators/LoopingListIterator/LoopingListIterator/List, Constructor that wraps a list. There is no way to reset a ListIterator instance without recreating it from the original source, so the List must be passed in and a reference to it held. @param list the list to wrap @throws NullPointerException if the list it null
class,org/apache/commons/collections/iterators/FilterIterator, Decorates another {@link Iterator} using a predicate to filter elements. This iterator decorates the underlying iterator, only allowing through those elements that match the specified {@link Predicate Predicate}. @since Commons Collections 1.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author James Strachan @author Jan Sorensen @author Ralph Wagner @author Stephen Colebourne
method,org/apache/commons/collections/iterators/FilterIterator/FilterIterator/, Constructs a new FilterIterator that will not function until {@link #setIterator(Iterator) setIterator} is invoked.
method,org/apache/commons/collections/iterators/IteratorEnumeration/IteratorEnumeration/, Constructs a new IteratorEnumeration that will not function until {@link #setIterator(Iterator) setIterator} is invoked.
class,org/apache/commons/collections/iterators/ObjectArrayListIterator, Implements a {@link ListIterator} over an array of objects. This iterator does not support {@link #add} or {@link #remove}, as the object array cannot be structurally modified. The {@link #set} method is supported however. The iterator implements a {@link #reset} method, allowing the reset of the iterator back to the start if required. @see org.apache.commons.collections.iterators.ObjectArrayIterator @see java.util.Iterator @see java.util.ListIterator @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Neil O'Toole @author Stephen Colebourne @author Phil Steitz
method,org/apache/commons/collections/iterators/ObjectArrayListIterator/add/Object, This iterator does not support modification of its backing array's size, and so will always throw an {@link UnsupportedOperationException} when this method is invoked. @param obj the object to add @throws UnsupportedOperationException always thrown.
method,org/apache/commons/collections/iterators/ObjectArrayListIterator/ObjectArrayListIterator/, Constructor for use with setArray. Using this constructor, the iterator is equivalent to an empty iterator until {@link #setArray} is called to establish the array to iterate over.
method,org/apache/commons/collections/iterators/ObjectGraphIterator/remove/, Removes from the underlying collection the last element returned. This method calls remove() on the underlying Iterator and it may throw an UnsupportedOperationException if the underlying Iterator does not support this method. @throws UnsupportedOperationException if the remove operator is not supported by the underlying Iterator @throws IllegalStateException if the next method has not yet been called, or the remove method has already been called after the last call to the next method.
method,org/apache/commons/collections/iterators/ObjectGraphIterator/ObjectGraphIterator/Iterator, Constructs a ObjectGraphIterator that will handle an iterator of iterators. This constructor exists for convenience to emphasise that this class can be used to iterate over nested iterators. That is to say that the iterator passed in here contains other iterators, which may in turn contain further iterators. @param rootIterator the root iterator, null will result in an empty iterator
method,org/apache/commons/collections/iterators/ArrayIterator/checkBound/int;String, Checks whether the index is valid or not. @param bound the index to check @param type the index type (for error messages) @throws IndexOutOfBoundsException if the index is invalid
method,org/apache/commons/collections/iterators/ArrayIterator/getArray/, Gets the array that this iterator is iterating over. @return the array this iterator iterates over, or null if the no-arg constructor was used and {@link #setArray(Object)} has never been called with a valid array.
method,org/apache/commons/collections/iterators/ArrayIterator/ArrayIterator/, Constructor for use with setArray. Using this constructor, the iterator is equivalent to an empty iterator until {@link #setArray(Object)} is called to establish the array to iterate over.
class,org/apache/commons/collections/iterators/EmptyListIterator, Provides an implementation of an empty list iterator. This class provides an implementation of an empty list iterator. This class provides for binary compatability between Commons Collections 2.1.1 and 3.1 due to issues with IteratorUtils. @since Commons Collections 2.1.1 and 3.1 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/iterators/TransformIterator/TransformIterator/, Constructs a new TransformIterator that will not function until the {@link #setIterator(Iterator) setIterator} and {@link #setTransformer(Transformer)} methods are invoked.
method,org/apache/commons/collections/iterators/SingletonListIterator/nextIndex/, Returns the index of the element that would be returned by a subsequent call to next. @return 0 or 1 depending on current state. 
method,org/apache/commons/collections/iterators/SingletonListIterator/remove/, Remove the object from this iterator. @throws IllegalStateException if the next or previous method has not yet been called, or the remove method has already been called after the last call to next or previous.
method,org/apache/commons/collections/iterators/SingletonListIterator/set/Object, Set sets the value of the singleton. @param obj the object to set @throws IllegalStateException if next has not been called or the object has been removed
method,org/apache/commons/collections/iterators/LoopingIterator/hasNext/, Has the iterator any more elements. Returns false only if the collection originally had zero elements, or all the elements have been {@link #remove removed}. @return true if there are more elements
method,org/apache/commons/collections/iterators/LoopingIterator/LoopingIterator/Collection, Constructor that wraps a collection. There is no way to reset an Iterator instance without recreating it from the original source, so the Collection must be passed in. @param coll the collection to wrap @throws NullPointerException if the collection is null
method,org/apache/commons/collections/iterators/IteratorChain/remove/, Removes from the underlying collection the last element returned by the Iterator. As with next() and hasNext(), this method calls remove() on the underlying Iterator. Therefore, this method may throw an UnsupportedOperationException if the underlying Iterator does not support this method. @throws UnsupportedOperationException if the remove operator is not supported by the underlying Iterator @throws IllegalStateException if the next method has not yet been called, or the remove method has already been called after the last call to the next method.
method,org/apache/commons/collections/iterators/IteratorChain/IteratorChain/, Construct an IteratorChain with no Iterators. You will normally use {@link #addIterator(Iterator)} to add some iterators after using this constructor.
field,org/apache/commons/collections/iterators/IteratorChain/isLocked, ComparatorChain is locked after the first time compare(Object,Object) is called
class,org/apache/commons/collections/iterators/ReverseListIterator, Iterates backwards through a List, starting with the last element and continuing to the first. This is useful for looping around a list in reverse order without needing to actually reverse the list. The first call to next() will return the last element from the list, and so on. The hasNext() method works in concert with the next() method as expected. However, the nextIndex() method returns the correct index in the list, thus it starts high and reduces as the iteration continues. The previous methods work similarly. @author Serge Knystautas @author Stephen Colebourne @since Commons Collections 3.2 @version $Revision: $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $
method,org/apache/commons/collections/iterators/ReverseListIterator/add/Object, Adds a new element to the list between the next and previous elements. @param obj the object to add @throws UnsupportedOperationException if the list is unmodifiable @throws IllegalStateException if the iterator is not in a valid state for set
method,org/apache/commons/collections/splitmap/SplitMapUtils/SplitMapUtils/, SplitMapUtils should not normally be instantiated.
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/containsKey/Object, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/containsValue/Object, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/entrySet/, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/get/Object, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/remove/Object, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/isEmpty/, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/keySet/, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/size/, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/values/, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/equals/Object, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/hashCode/, {@inheritDoc}
method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/toString/, {@inheritDoc}
method,org/apache/commons/collections/splitmap/TransformedMap/transformKey/Object, Transforms a key. The transformer itself may throw an exception if necessary. @param object the object to transform @throws the transformed object
method,org/apache/commons/collections/splitmap/TransformedMap/transformValue/Object, Transforms a value. The transformer itself may throw an exception if necessary. @param object the object to transform @throws the transformed object
method,org/apache/commons/collections/splitmap/TransformedMap/transformMap/Map, Transforms a map. The transformer itself may throw an exception if necessary. @param map the map to transform @throws the transformed object
method,org/apache/commons/collections/splitmap/TransformedMap/put/Object;Object, {@inheritDoc}
method,org/apache/commons/collections/splitmap/TransformedMap/putAll/Map, {@inheritDoc}
method,org/apache/commons/collections/splitmap/TransformedMap/clear/, {@inheritDoc}
method,org/apache/commons/collections/buffer/PriorityBuffer/percolateDownMinHeap/int, Percolates element down heap from the position given by the index. Assumes it is a minimum heap. @param index the index for the element
method,org/apache/commons/collections/buffer/PriorityBuffer/percolateDownMaxHeap/int, Percolates element down heap from the position given by the index. Assumes it is a maximum heap. @param index the index of the element
method,org/apache/commons/collections/buffer/PriorityBuffer/percolateUpMinHeap/int, Percolates element up heap from the position given by the index. Assumes it is a minimum heap. @param index the index of the element to be percolated up
method,org/apache/commons/collections/buffer/PriorityBuffer/percolateUpMinHeap/Object, Percolates a new element up heap from the bottom. Assumes it is a minimum heap. @param element the element
method,org/apache/commons/collections/buffer/PriorityBuffer/percolateUpMaxHeap/int, Percolates element up heap from from the position given by the index. Assume it is a maximum heap. @param index the index of the element to be percolated up
method,org/apache/commons/collections/buffer/PriorityBuffer/percolateUpMaxHeap/Object, Percolates a new element up heap from the bottom. Assume it is a maximum heap. @param element the element
method,org/apache/commons/collections/buffer/PriorityBuffer/grow/, Increases the size of the heap to support additional elements
method,org/apache/commons/collections/buffer/BoundedFifoBuffer/BoundedFifoBuffer/Collection, Constructs a new BoundedFifoBuffer big enough to hold all of the elements in the specified collection. That collection's elements will also be added to the buffer. @param coll the collection whose elements to add, may not be null @throws NullPointerException if the collection is null
class,org/apache/commons/collections/buffer/SynchronizedBuffer, Decorates another Buffer to synchronize its behaviour for a multi-threaded environment. Methods are synchronized, then forwarded to the decorated buffer. This class is Serializable from Commons Collections 3.1. @param the type of the elements in the buffer @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/buffer/SynchronizedBuffer/decorated/, Gets the buffer being decorated. @return the decorated buffer
method,org/apache/commons/collections/buffer/SynchronizedBuffer/get/,
method,org/apache/commons/collections/buffer/SynchronizedBuffer/remove/,
method,org/apache/commons/collections/buffer/CircularFifoBuffer/CircularFifoBuffer/Collection, Constructor that creates a buffer from the specified collection. The collection size also sets the buffer size @param coll the collection to copy into the buffer, may not be null @throws NullPointerException if the collection is null
class,org/apache/commons/collections/buffer/AbstractBufferDecorator, Decorates another Buffer to provide additional behaviour. Methods are forwarded directly to the decorated buffer. @param the type of the elements in the buffer @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
class,org/apache/commons/collections/buffer/PredicatedBuffer, Decorates another Buffer to validate that additions match a specified predicate. This buffer exists to provide validation for the decorated buffer. It is normally created to decorate an empty buffer. If an object cannot be added to the buffer, an IllegalArgumentException is thrown. One usage would be to ensure that no null entries are added to the buffer. Buffer buffer = PredicatedBuffer.decorate(new UnboundedFifoBuffer(), NotNullPredicate.INSTANCE); This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Paul Jack
class,org/apache/commons/collections/buffer/BlockingBuffer, Decorates another Buffer to make {@link #get()} and {@link #remove()} block when the Buffer is empty. If either get or remove is called on an empty Buffer, the calling thread waits for notification that an add or addAll operation has completed. When one or more entries are added to an empty Buffer, all threads blocked in get or remove are notified. There is no guarantee that concurrent blocked get or remove requests will be unblocked and receive data in the order that they arrive. This class is Serializable from Commons Collections 3.1. This class contains an extra field in 3.2, however the serialization specification will handle this gracefully. @author Stephen Colebourne @author Janek Bogucki @author Phil Steitz @author James Carman @param the type of the elements in the buffer @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $ @since Commons Collections 3.0
method,org/apache/commons/collections/bidimap/DualTreeBidiMap/inverseBidiMap/, {@inheritDoc}
class,org/apache/commons/collections/bidimap/DualHashBidiMap, Implementation of BidiMap that uses two HashMap instances. Two HashMap instances are used in this class. This provides fast lookups at the expense of storing two sets of map entries. Commons Collections would welcome the addition of a direct hash-based implementation of the BidiMap interface. NOTE: From Commons Collections 3.1, all subclasses will use HashMap and the flawed createMap method is ignored. @since Commons Collections 3.0 @version $Id: DualHashBidiMap.java 966315 2010-07-21 17:03:58Z sebb $ @author Matthew Hawthorne @author Stephen Colebourne
class,org/apache/commons/collections/bidimap/TreeBidiMap, Red-Black tree-based implementation of BidiMap where all objects added implement the Comparable interface. This class guarantees that the map will be in both ascending key order and ascending value order, sorted according to the natural order for the key's and value's classes. This Map is intended for applications that need to be able to look up a key-value pairing by either key or value, and need to do so with equal efficiency. While that goal could be accomplished by taking a pair of TreeMaps and redirecting requests to the appropriate TreeMap (e.g., containsKey would be directed to the TreeMap that maps values to keys, containsValue would be directed to the TreeMap that maps keys to values), there are problems with that implementation. If the data contained in the TreeMaps is large, the cost of redundant storage becomes significant. The {@link DualTreeBidiMap} and {@link DualHashBidiMap} implementations use this approach. This solution keeps minimizes the data storage by holding data only once. The red-black algorithm is based on java util TreeMap, but has been modified to simultaneously map a tree node by key and by value. This doubles the cost of put operations (but so does using two TreeMaps), and nearly doubles the cost of remove operations (there is a savings in that the lookup of the node to be removed only has to be performed once). And since only one node contains the key and value, storage is significantly less than that required by two TreeMaps. The Map.Entry instances returned by the appropriate methods will not allow setValue() and will throw an UnsupportedOperationException on attempts to call that method. @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0) @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Marc Johnson @author Stephen Colebourne @author Matt Benson
method,org/apache/commons/collections/bidimap/TreeBidiMap/mapIterator/, {@inheritDoc}
method,org/apache/commons/collections/bidimap/AbstractDualBidiMap/createBidiMap/Map;Map;BidiMap, Creates a new instance of the subclass. @param normalMap the normal direction map @param reverseMap the reverse direction map @param inverseMap this map, which is the inverse in the new map @return the inverse map
method,org/apache/commons/collections/bidimap/AbstractDualBidiMap/mapIterator/, Obtains a MapIterator over the map. The iterator implements ResetableMapIterator. This implementation relies on the entrySet iterator. The setValue() methods only allow a new value to be set. If the value being set is already in the map, an IllegalArgumentException is thrown (as setValue cannot change the size of the map). @return a map iterator
method,org/apache/commons/collections/bidimap/AbstractDualBidiMap/entrySet/, Gets an entrySet view of the map. Changes made on the set are reflected in the map. The set supports remove and clear but not add. The Map Entry setValue() method only allow a new value to be set. If the value being set is already in the map, an IllegalArgumentException is thrown (as setValue cannot change the size of the map). @return the entrySet view
method,org/apache/commons/collections/bidimap/AbstractDualBidiMap/AbstractDualBidiMap/Map;Map;BidiMap, Constructs a map that decorates the specified maps, used by the subclass createBidiMap implementation. @param normalMap the normal direction map @param reverseMap the reverse direction map @param inverseBidiMap the inverse BidiMap
class,org/apache/commons/collections/bidimap/AbstractOrderedBidiMapDecorator, Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration. Methods are forwarded directly to the decorated map. This implementation does not perform any special processing with the map views. Instead it simply returns the inverse from the wrapped map. This may be undesirable, for example if you are trying to write a validating implementation it would provide a loophole around the validation. But, you might want that loophole, so this class is kept simple. @since Commons Collections 3.0 @version $Revision: 966315 $ $Date: 2010-07-21 19:03:58 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
class,org/apache/commons/collections/bidimap/AbstractSortedBidiMapDecorator, Provides a base decorator that enables additional functionality to be added to a SortedBidiMap via decoration. Methods are forwarded directly to the decorated map. This implementation does not perform any special processing with the map views. Instead it simply returns the inverse from the wrapped map. This may be undesirable, for example if you are trying to write a validating implementation it would provide a loophole around the validation. But, you might want that loophole, so this class is kept simple. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
class,org/apache/commons/collections/bidimap/AbstractBidiMapDecorator, Provides a base decorator that enables additional functionality to be added to a BidiMap via decoration. Methods are forwarded directly to the decorated map. This implementation does not perform any special processing with the map views. Instead it simply returns the set/collection from the wrapped map. This may be undesirable, for example if you are trying to write a validating implementation it would provide a loophole around the validation. But, you might want that loophole, so this class is kept simple. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
class,org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator, Provides a base decorator that allows additional functionality to be added to a {@link java.util.Map.Entry Map.Entry}. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/keyvalue/MultiKey/toString/, Gets a debugging string version of the key. @return a debugging string
class,org/apache/commons/collections/keyvalue/UnmodifiableMapEntry, A {@link java.util.Map.Entry Map.Entry} that throws UnsupportedOperationException when setValue is called. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/keyvalue/AbstractMapEntry/setValue/Object, Sets the value stored in this Map.Entry. This Map.Entry is not connected to a Map, so only the local data is changed. @param value the new value @return the previous value
method,org/apache/commons/collections/keyvalue/AbstractKeyValue/toString/, Gets a debugging String view of the pair. @return a String view of the entry
class,org/apache/commons/collections/keyvalue/DefaultMapEntry, A restricted implementation of {@link java.util.Map.Entry} that prevents the Map.Entry contract from being broken. @since Commons Collections 3.0 @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author James Strachan @author Michael A. Smith @author Neil O'Toole @author Stephen Colebourne
class,org/apache/commons/collections/bag/TreeBag, Implements SortedBag, using a TreeMap to provide the data storage. This is the standard implementation of a sorted bag. Order will be maintained among the bag members and can be viewed through the iterator. A Bag stores each object in the collection together with a count of occurrences. Extra methods on the interface allow multiple copies of an object to be added or removed at once. It is important to read the interface javadoc carefully as several methods violate the Collection interface specification. @since Commons Collections 3.0 (previously in main package v2.0) @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Chuck Burdick @author Stephen Colebourne
method,org/apache/commons/collections/bag/TreeBag/getMap/, {@inheritDoc}
class,org/apache/commons/collections/bag/PredicatedSortedBag, Decorates another SortedBag to validate that additions match a specified predicate. This bag exists to provide validation for the decorated bag. It is normally created to decorate an empty bag. If an object cannot be added to the bag, an IllegalArgumentException is thrown. One usage would be to ensure that no null entries are added to the bag. SortedBag bag = PredicatedSortedBag.decorate(new TreeBag(), NotNullPredicate.INSTANCE); This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Paul Jack
method,org/apache/commons/collections/bag/SynchronizedSortedBag/getSortedBag/, Gets the bag being decorated. @return the decorated bag
method,org/apache/commons/collections/bag/SynchronizedSortedBag/first/,
method,org/apache/commons/collections/bag/SynchronizedSortedBag/last/,
method,org/apache/commons/collections/bag/SynchronizedSortedBag/comparator/,
class,org/apache/commons/collections/bag/PredicatedBag, Decorates another Bag to validate that additions match a specified predicate. This bag exists to provide validation for the decorated bag. It is normally created to decorate an empty bag. If an object cannot be added to the bag, an IllegalArgumentException is thrown. One usage would be to ensure that no null entries are added to the bag. Bag bag = PredicatedBag.decorate(new HashBag(), NotNullPredicate.INSTANCE); This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Paul Jack
class,org/apache/commons/collections/bag/HashBag, Implements Bag, using a HashMap to provide the data storage. This is the standard implementation of a bag. A Bag stores each object in the collection together with a count of occurrences. Extra methods on the interface allow multiple copies of an object to be added or removed at once. It is important to read the interface javadoc carefully as several methods violate the Collection interface specification. @since Commons Collections 3.0 (previously in main package v2.0) @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $ @author Chuck Burdick @author Stephen Colebourne
class,org/apache/commons/collections/bag/AbstractBagDecorator, Decorates another Bag to provide additional behaviour. Methods are forwarded directly to the decorated bag. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
class,org/apache/commons/collections/bag/AbstractMapBag, Abstract implementation of the {@link Bag} interface to simplify the creation of subclass implementations. Subclasses specify a Map implementation to use as the internal storage. The map will be used to map bag elements to a number; the number represents the number of occurrences of that element in the bag. @since Commons Collections 3.0 (previously DefaultMapBag v2.0) @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $ @author Chuck Burdick @author Michael A. Smith @author Stephen Colebourne @author Janek Bogucki @author Steve Clark
method,org/apache/commons/collections/bag/AbstractMapBag/iterator/, Gets an iterator over the bag elements. Elements present in the Bag more than once will be returned repeatedly. @return the iterator
method,org/apache/commons/collections/bag/AbstractMapBag/addAll/Collection, Invokes {@link #add(Object)} for each element in the given collection. @param coll the collection to add @return true if this call changed the bag
method,org/apache/commons/collections/bag/AbstractMapBag/retainAll/Collection, Remove any members of the bag that are not in the given bag, respecting cardinality. @param coll the collection to retain @return true if this call changed the collection
method,org/apache/commons/collections/bag/AbstractMapBag/toString/, Implement a toString() method suitable for debugging. @return a debugging toString
method,org/apache/commons/collections/bag/AbstractMapBag/AbstractMapBag/, Constructor needed for subclass serialisation. 
class,org/apache/commons/collections/bag/AbstractSortedBagDecorator, Decorates another SortedBag to provide additional behaviour. Methods are forwarded directly to the decorated bag. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/bag/SynchronizedBag/getBag/, Gets the bag being decorated. @return the decorated bag
method,org/apache/commons/collections/bag/SynchronizedBag/add/Object;int,
method,org/apache/commons/collections/bag/SynchronizedBag/remove/Object;int,
method,org/apache/commons/collections/bag/SynchronizedBag/uniqueSet/,
method,org/apache/commons/collections/bag/SynchronizedBag/getCount/Object,
method,org/apache/commons/collections/set/CompositeSet/getCollections/, {@inheritDoc}
method,org/apache/commons/collections/set/CompositeSet/remove/Object, If a CollectionMutator is defined for this CompositeSet then this method will be called anyway. @param obj Object to be removed @return true if the object is removed, false otherwise
method,org/apache/commons/collections/set/CompositeSet/getMutator/, {@inheritDoc}
interface,org/apache/commons/collections/set/CompositeSet/SetMutator, Define callbacks for mutation operations. Defining remove() on implementations of SetMutator is pointless as they are never called by CompositeSet.
method,org/apache/commons/collections/set/CompositeSet/SetMutator/resolveCollision/CompositeSet;Set;Set;Collection, Called when a Set is added to the CompositeSet and there is a collision between existing and added sets. If added and existing still have any intersects after this method returns an IllegalArgumentException will be thrown. @param comp The CompositeSet being modified @param existing The Set already existing in the composite @param added the Set being added to the composite @param intersects the intersection of th existing and added sets
class,org/apache/commons/collections/set/MapBackedSet, Decorates a Map to obtain Set behaviour. This class is used to create a Set with the same properties as the key set of any map. Thus, a ReferenceSet can be created by wrapping a ReferenceMap in an instance of this class. Most map implementation can be used to create a set by passing in dummy values. Exceptions include BidiMap implementations, as they require unique values. @since Commons Collections 3.1 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
class,org/apache/commons/collections/set/AbstractSetDecorator, Decorates another Set to provide additional behaviour. Methods are forwarded directly to the decorated set. @param the type of the elements in the set @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
class,org/apache/commons/collections/set/AbstractSortedSetDecorator, Decorates another SortedSet to provide additional behaviour. Methods are forwarded directly to the decorated set. @param the type of the elements in the sorted set @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
class,org/apache/commons/collections/set/SynchronizedSet, Decorates another Set to synchronize its behaviour for a multi-threaded environment. Methods are synchronized, then forwarded to the decorated set. This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 815100 $ $Date: 2009-09-15 07:56:43 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/set/SynchronizedSet/getSet/, Gets the decorated set. @return the decorated set
class,org/apache/commons/collections/set/PredicatedSortedSet, Decorates another SortedSet to validate that all additions match a specified predicate. This set exists to provide validation for the decorated set. It is normally created to decorate an empty set. If an object cannot be added to the set, an IllegalArgumentException is thrown. One usage would be to ensure that no null entries are added to the set. SortedSet set = PredicatedSortedSet.decorate(new TreeSet(), NotNullPredicate.INSTANCE); This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Paul Jack
class,org/apache/commons/collections/set/SynchronizedSortedSet, Decorates another SortedSet to synchronize its behaviour for a multi-threaded environment. Methods are synchronized, then forwarded to the decorated set. This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 815101 $ $Date: 2009-09-15 07:56:44 +0200 (Tue, 15 Sep 2009) $ @author Stephen Colebourne
method,org/apache/commons/collections/set/SynchronizedSortedSet/getSortedSet/, Gets the decorated set. @return the decorated set
method,org/apache/commons/collections/set/SynchronizedSortedSet/subSet/Object;Object,
method,org/apache/commons/collections/set/SynchronizedSortedSet/headSet/Object,
method,org/apache/commons/collections/set/SynchronizedSortedSet/tailSet/Object,
method,org/apache/commons/collections/set/SynchronizedSortedSet/first/,
method,org/apache/commons/collections/set/SynchronizedSortedSet/last/,
method,org/apache/commons/collections/set/SynchronizedSortedSet/comparator/,
class,org/apache/commons/collections/set/PredicatedSet, Decorates another Set to validate that all additions match a specified predicate. This set exists to provide validation for the decorated set. It is normally created to decorate an empty set. If an object cannot be added to the set, an IllegalArgumentException is thrown. One usage would be to ensure that no null entries are added to the set. Set set = PredicatedSet.decorate(new HashSet(), NotNullPredicate.INSTANCE); This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Paul Jack
class,org/apache/commons/collections/set/AbstractSerializableSetDecorator, Serializable subclass of AbstractSetDecorator. @author Stephen Colebourne @since Commons Collections 3.1
class,org/apache/commons/collections/set/ListOrderedSet, Decorates another Set to ensure that the order of addition is retained and used by the iterator. If an object is added to the set for a second time, it will remain in the original position in the iteration. The order can be observed from the set via the iterator or toArray methods. The ListOrderedSet also has various useful direct methods. These include many from List, such as get(int), remove(int) and indexOf(int). An unmodifiable List view of the set can be obtained via asList(). This class cannot implement the List interface directly as various interface methods (notably equals/hashCode) are incompatable with a set. This class is Serializable from Commons Collections 3.1. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Henning P. Schmiedehausen
method,org/apache/commons/collections/map/CompositeMap/addComposited/Map, Add an additional Map to the composite. @param map the Map to be added to the composite @throws IllegalArgumentException if there is a key collision and there is no MapMutator set to handle it.
method,org/apache/commons/collections/map/CompositeMap/clear/, Calls clear() on all composited Maps. @throws UnsupportedOperationException if any of the composited Maps do not support clear()
method,org/apache/commons/collections/map/CompositeMap/get/Object, Returns the value to which this map maps the specified key. Returns null if the map contains no mapping for this key. A return value of null does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to null. The containsKey operation may be used to distinguish these two cases. More formally, if this map contains a mapping from a key k to a value v such that (key==null ? k==null : key.equals(k)), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) @param key key whose associated value is to be returned. @return the value to which this map maps the specified key, or null if the map contains no mapping for this key. @throws ClassCastException if the key is of an inappropriate type for this map (optional). @throws NullPointerException key is null and this map does not not permit null keys (optional). @see #containsKey(Object)
interface,org/apache/commons/collections/map/CompositeMap/MapMutator, This interface allows definition for all of the indeterminate mutators in a CompositeMap, as well as providing a hook for callbacks on key collisions.
method,org/apache/commons/collections/map/CompositeMap/MapMutator/resolveCollision/CompositeMap;Map;Map;Collection, Called when adding a new Composited Map results in a key collision. @param composite the CompositeMap with the collision @param existing the Map already in the composite which contains the offending key @param added the Map being added @param intersect the intersection of the keysets of the existing and added maps
method,org/apache/commons/collections/map/CompositeMap/MapMutator/put/CompositeMap;Map[];Object;Object, Called when the CompositeMap.put() method is invoked. @param map the CompositeMap which is being modified @param composited array of Maps in the CompositeMap being modified @param key key with which the specified value is to be associated. @param value value to be associated with the specified key. @return previous value associated with specified key, or null if there was no mapping for key. A null return can also indicate that the map previously associated null with the specified key, if the implementation supports null values. @throws UnsupportedOperationException if not defined @throws ClassCastException if the class of the specified key or value prevents it from being stored in this map. @throws IllegalArgumentException if some aspect of this key or value prevents it from being stored in this map. @throws NullPointerException this map does not permit null keys or values, and the specified key or value is null.
method,org/apache/commons/collections/map/CompositeMap/MapMutator/putAll/CompositeMap;Map[];Map, Called when the CompositeMap.putAll() method is invoked. @param map the CompositeMap which is being modified @param composited array of Maps in the CompositeMap being modified @param mapToAdd Mappings to be stored in this CompositeMap @throws UnsupportedOperationException if not defined @throws ClassCastException if the class of the specified key or value prevents it from being stored in this map. @throws IllegalArgumentException if some aspect of this key or value prevents it from being stored in this map. @throws NullPointerException this map does not permit null keys or values, and the specified key or value is null.
method,org/apache/commons/collections/map/CaseInsensitiveMap/convertKey/Object, Overrides convertKey() from {@link AbstractHashedMap} to convert keys to lower case. Returns {@link AbstractHashedMap#NULL} if key is null. @param key the key convert @return the converted key
method,org/apache/commons/collections/map/CaseInsensitiveMap/CaseInsensitiveMap/Map, Constructor copying elements from another map. Keys will be converted to lower case strings, which may cause some entries to be removed (if string representation of keys differ only by character case). @param map the map to copy @throws NullPointerException if the map is null
method,org/apache/commons/collections/map/MultiKeyMap/decorated/, {@inheritDoc}
method,org/apache/commons/collections/map/MultiValueMap/decorate/Map;Factory, Creates a map which decorates the given map and creates the value collections using the supplied collectionFactory. @param map the map to decorate @param collectionFactory the collection factory (must return a Collection object).
method,org/apache/commons/collections/map/MultiValueMap/putAll/Map, Override superclass to ensure that MultiMap instances are correctly handled. If you call this method with a normal map, each entry is added using put(Object,Object). If you call this method with a multi map, each entry is added using putAll(Object,Collection). @param map the map to copy (either a normal or multi map)
method,org/apache/commons/collections/map/AbstractIterableMap/mapIterator/, {@inheritDoc}
class,org/apache/commons/collections/map/AbstractSortedMapDecorator, Provides a base decorator that enables additional functionality to be added to a Map via decoration. Methods are forwarded directly to the decorated map. This implementation does not perform any special processing with the map views. Instead it simply returns the set/collection from the wrapped map. This may be undesirable, for example if you are trying to write a validating implementation it would provide a loophole around the validation. But, you might want that loophole, so this class is kept simple. @param the type of the keys in the map @param the type of the values in the map @since Commons Collections 3.0 @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/map/AbstractSortedMapDecorator/mapIterator/, {@inheritDoc}
method,org/apache/commons/collections/map/AbstractSortedMapDecorator/SortedMapIterator/reset/, {@inheritDoc}
method,org/apache/commons/collections/map/AbstractSortedMapDecorator/SortedMapIterator/hasPrevious/, {@inheritDoc}
method,org/apache/commons/collections/map/AbstractSortedMapDecorator/SortedMapIterator/previous/, {@inheritDoc}
method,org/apache/commons/collections/map/ReferenceIdentityMap/hashEntry/Object;Object, Gets the hash code for a MapEntry. This implementation uses the identity hash code. @param key the key to get a hash code for, may be null @param value the value to get a hash code for, may be null @return the hash code, as per the MapEntry specification
method,org/apache/commons/collections/map/ReferenceIdentityMap/isEqualKey/Object;Object, Compares two keys for equals. This implementation converts the key from the entry to a real reference before comparison and uses ==. @param key1 the first key to compare passed in from outside @param key2 the second key extracted from the entry via entry.key @return true if equal by identity
class,org/apache/commons/collections/map/AbstractOrderedMapDecorator, Provides a base decorator that enables additional functionality to be added to an OrderedMap via decoration. Methods are forwarded directly to the decorated map. This implementation does not perform any special processing with the map views. Instead it simply returns the set/collection from the wrapped map. This may be undesirable, for example if you are trying to write a validating implementation it would provide a loophole around the validation. But, you might want that loophole, so this class is kept simple. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/map/AbstractLinkedMap/init/, Initialise this subclass during construction. NOTE: As from v3.2 this method calls {@link #createEntry(HashEntry, int, Object, Object)} to create the map entry object.
method,org/apache/commons/collections/map/AbstractLinkedMap/nextKey/Object, Gets the next key in sequence. @param key the key to get after @return the next key
method,org/apache/commons/collections/map/AbstractLinkedMap/previousKey/Object, Gets the previous key in sequence. @param key the key to get before @return the previous key
method,org/apache/commons/collections/map/AbstractLinkedMap/removeEntry/HashEntry;int;HashEntry, Removes an entry from the map and the linked list. This implementation removes the entry from the linked list chain, then calls the superclass implementation. @param entry the entry to remove @param hashIndex the index into the data structure @param previous the previous entry in the chain
method,org/apache/commons/collections/map/AbstractLinkedMap/mapIterator/, {@inheritDoc}
field,org/apache/commons/collections/map/AbstractLinkedMap/LinkEntry/before,The entry before this one in the order 
field,org/apache/commons/collections/map/AbstractLinkedMap/LinkEntry/after,The entry after this one in the order 
method,org/apache/commons/collections/map/StaticBucketMap/size/, Gets the current size of the map. The value is computed fresh each time the method is called. @return the current size
class,org/apache/commons/collections/map/AbstractMapDecorator, Provides a base decorator that enables additional functionality to be added to a Map via decoration. Methods are forwarded directly to the decorated map. This implementation does not perform any special processing with {@link #entrySet()}, {@link #keySet()} or {@link #values()}. Instead it simply returns the set/collection from the wrapped map. This may be undesirable, for example if you are trying to write a validating implementation it would provide a loophole around the validation. But, you might want that loophole, so this class is kept simple. @param the type of the keys in the map @param the type of the values in the map @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Daniel Rall @author Stephen Colebourne
method,org/apache/commons/collections/map/LRUMap/doWriteObject/ObjectOutputStream, Writes the data necessary for put() to work in deserialization.
method,org/apache/commons/collections/map/LRUMap/doReadObject/ObjectInputStream, Reads the data necessary for put() to work in the superclass.
class,org/apache/commons/collections/map/SingletonMap, A Map implementation that holds a single item and is fixed size. The single key/value pair is specified at creation. The map is fixed size so any action that would change the size is disallowed. However, the put or setValue methods can change the value associated with the key. If trying to remove or clear the map, an UnsupportedOperationException is thrown. If trying to put a new mapping into the map, an IllegalArgumentException is thrown. The put method will only suceed if the key specified is the same as the singleton key. The key and value can be obtained by: normal Map methods and views the MapIterator, see {@link #mapIterator()} the KeyValue interface (just cast - no object creation) @since Commons Collections 3.1 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/map/SingletonMap/mapIterator/, {@inheritDoc}
method,org/apache/commons/collections/map/SingletonMap/firstKey/, Gets the first (and only) key in the map. @return the key
method,org/apache/commons/collections/map/SingletonMap/lastKey/, Gets the last (and only) key in the map. @return the key
method,org/apache/commons/collections/map/AbstractHashedMap/init/, Initialise subclasses during construction, cloning or deserialization.
method,org/apache/commons/collections/map/AbstractHashedMap/getEntry/Object, Gets the entry mapped to the key specified. This method exists for subclasses that may need to perform a multi-step process accessing the entry. The public methods in this class don't use this method to gain a small performance boost. @param key the key @return the entry, null if no match
method,org/apache/commons/collections/map/AbstractHashedMap/checkCapacity/, Checks the capacity of the map and enlarges it if necessary. This implementation uses the threshold to check if the map needs enlarging
method,org/apache/commons/collections/map/AbstractHashedMap/AbstractHashedMap/int;float;int, Constructor which performs no validation on the passed in parameters. @param initialCapacity the initial capacity, must be a power of two @param loadFactor the load factor, must be &gt; 0.0f and generally &lt; 1.0f @param threshold the threshold, must be sensible
class,org/apache/commons/collections/map/AbstractHashedMap/HashEntry, HashEntry used to store the data. If you subclass AbstractHashedMap but not HashEntry then you will not be able to access the protected fields. The entryXxx() methods on AbstractHashedMap exist to provide the necessary access.
method,org/apache/commons/collections/map/AbstractReferenceMap/init/, Initialise this subclass during construction, cloning or deserialization.
method,org/apache/commons/collections/map/AbstractReferenceMap/mapIterator/, Gets a MapIterator over the reference map. The iterator only returns valid key/value pairs. @return a map iterator
method,org/apache/commons/collections/map/AbstractReferenceMap/entrySet/, Returns a set view of this map's entries. An iterator returned entry is valid until next() is called again. The setValue() method on the toArray entries has no effect. @return a set view of this map's entries
method,org/apache/commons/collections/map/AbstractReferenceMap/isEqualKey/Object;Object, Compares two keys, in internal converted form, to see if they are equal. This implementation converts the key from the entry to a real reference before comparison. @param key1 the first key to compare passed in from outside @param key2 the second key extracted from the entry via entry.key @return true if equal
field,org/apache/commons/collections/map/AbstractReferenceMap/purgeValues, Should the value be automatically purged when the associated key has been collected?
method,org/apache/commons/collections/map/AbstractReferenceMap/ReferenceEntry/getKey/, Gets the key from the entry. This method dereferences weak and soft keys and thus may return null. @return the key, which may be null if it was garbage collected
method,org/apache/commons/collections/map/AbstractReferenceMap/ReferenceEntry/getValue/, Gets the value from the entry. This method dereferences weak and soft value and thus may return null. @return the value, which may be null if it was garbage collected
method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/getKey/, {@inheritDoc}
method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/getValue/, {@inheritDoc}
method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/setValue/Object, {@inheritDoc}
method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/hasNext/, {@inheritDoc}
method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/next/, {@inheritDoc}
method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/reset/, {@inheritDoc}
method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/remove/, {@inheritDoc}
method,org/apache/commons/collections/map/ListOrderedMap/put/int;Object;Object, Puts a key-value mapping into the map at the specified index. If the map already contains the key, then the original mapping is removed and the new mapping added at the specified index. The remove may change the effect of the index. The index is always calculated relative to the original state of the map. Thus the steps are: (1) remove the existing key-value mapping, then (2) insert the new key-value mapping at the position it would have been inserted had the remove not ocurred. @param index the index at which the mapping should be inserted @param key the key @param value the value @return the value previously mapped to the key @throws IndexOutOfBoundsException if the index is out of range @since Commons Collections 3.2
method,org/apache/commons/collections/map/TransformedMap/transformKey/Object, Transforms a key. The transformer itself may throw an exception if necessary. @param object the object to transform @throws the transformed object
method,org/apache/commons/collections/map/TransformedMap/transformValue/Object, Transforms a value. The transformer itself may throw an exception if necessary. @param object the object to transform @throws the transformed object
method,org/apache/commons/collections/map/TransformedMap/transformMap/Map, Transforms a map. The transformer itself may throw an exception if necessary. @param map the map to transform @throws the transformed object
class,org/apache/commons/collections/collection/AbstractCollectionDecorator, Decorates another Collection to provide additional behaviour. Each method call made on this Collection is forwarded to the decorated Collection. This class is used as a framework on which to build to extensions such as synchronized and unmodifiable behaviour. The main advantage of decoration is that one decorator can wrap any implementation of Collection, whereas sub-classing requires a new class to be written for each implementation. This implementation does not perform any special processing with {@link #iterator()}. Instead it simply returns the value from the wrapped collection. This may be undesirable, for example if you are trying to write an unmodifiable implementation it might provide a loophole. @param the type of the elements in the collection @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Paul Jack
class,org/apache/commons/collections/collection/AbstractUntypedCollectionDecorator, Decorates another Collection to provide additional behaviour without guaranteeing that the provided Collection type is the same as that of the decorated Collection. Each untyped method call made on this Collection is forwarded to the decorated Collection. This class is used as a framework on which to build to extensions such as synchronized and unmodifiable behaviour. The main advantage of decoration is that one decorator can wrap any implementation of Collection, whereas sub-classing requires a new class to be written for each implementation. This implementation does not perform any special processing with {@link #iterator()}. Instead it simply returns the value from the wrapped collection. This may be undesirable, for example if you are trying to write an unmodifiable implementation it might provide a loophole. @param the type of the elements in the decorated collection @param the element type of the Collection implementation @since Commons Collections 5 @version $Revision$ $Date$ @author Stephen Colebourne @author Paul Jack @author Matt Benson
class,org/apache/commons/collections/collection/UnmodifiableBoundedCollection, UnmodifiableBoundedCollection decorates another BoundedCollection to ensure it can't be altered. If a BoundedCollection is first wrapped in some other collection decorator, such as synchronized or predicated, the BoundedCollection methods are no longer accessible. The factory on this class will attempt to retrieve the bounded nature by examining the package scope variables. This class is Serializable from Commons Collections 3.1. Attempts to modify it will result in an UnsupportedOperationException. @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/collection/UnmodifiableBoundedCollection/decorated/, {@inheritDoc}
method,org/apache/commons/collections/collection/TransformedCollection/transform/Object, Transforms an object. The transformer itself may throw an exception if necessary. @param object the object to transform @return a transformed object
method,org/apache/commons/collections/collection/TransformedCollection/transform/Collection, Transforms a collection. The transformer itself may throw an exception if necessary. @param coll the collection to transform @return a transformed object
class,org/apache/commons/collections/collection/PredicatedCollection, Decorates another Collection to validate that additions match a specified predicate. This collection exists to provide validation for the decorated collection. It is normally created to decorate an empty collection. If an object cannot be added to the collection, an IllegalArgumentException is thrown. One usage would be to ensure that no null entries are added to the collection. Collection coll = PredicatedCollection.decorate(new ArrayList(), NotNullPredicate.INSTANCE); This class is Serializable from Commons Collections 3.1. @param the type of the elements in the collection @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne @author Paul Jack
class,org/apache/commons/collections/collection/SynchronizedCollection, Decorates another Collection to synchronize its behaviour for a multi-threaded environment. Iterators must be manually synchronized: synchronized (coll) { Iterator it = coll.iterator(); // do stuff with iterator } This class is Serializable from Commons Collections 3.1. @param the type of the elements in the collection @since Commons Collections 3.0 @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $ @author Stephen Colebourne
method,org/apache/commons/collections/collection/SynchronizedCollection/decorated/, Gets the collection being decorated. @return the decorated collection
method,org/apache/commons/collections/collection/SynchronizedCollection/add/Object,
method,org/apache/commons/collections/collection/SynchronizedCollection/addAll/Collection,
method,org/apache/commons/collections/collection/SynchronizedCollection/clear/,
method,org/apache/commons/collections/collection/SynchronizedCollection/contains/Object,
method,org/apache/commons/collections/collection/SynchronizedCollection/containsAll/Collection,
method,org/apache/commons/collections/collection/SynchronizedCollection/isEmpty/,
method,org/apache/commons/collections/collection/SynchronizedCollection/iterator/, Iterators must be manually synchronized. synchronized (coll) { Iterator it = coll.iterator(); // do stuff with iterator } @return an iterator that must be manually synchronized on the collection
method,org/apache/commons/collections/collection/SynchronizedCollection/toArray/,
method,org/apache/commons/collections/collection/SynchronizedCollection/toArray/Object[],
method,org/apache/commons/collections/collection/SynchronizedCollection/remove/Object,
method,org/apache/commons/collections/collection/SynchronizedCollection/removeAll/Collection,
method,org/apache/commons/collections/collection/SynchronizedCollection/retainAll/Collection,
method,org/apache/commons/collections/collection/SynchronizedCollection/size/,
method,org/apache/commons/collections/collection/SynchronizedCollection/equals/Object,
method,org/apache/commons/collections/collection/SynchronizedCollection/hashCode/,
method,org/apache/commons/collections/collection/SynchronizedCollection/toString/,
field,org/apache/commons/collections/collection/SynchronizedCollection/collection,The collection to decorate 
field,org/apache/commons/collections/collection/SynchronizedCollection/lock,The object to lock on, needed for List/SortedSet views 
method,org/apache/commons/collections/collection/CompositeCollection/size/, Gets the size of this composite collection. This implementation calls size() on each collection. @return total number of elements in all contained containers
method,org/apache/commons/collections/collection/CompositeCollection/isEmpty/, Checks whether this composite collection is empty. This implementation calls isEmpty() on each collection. @return true if all of the contained collections are empty
method,org/apache/commons/collections/collection/CompositeCollection/contains/Object, Checks whether this composite collection contains the object. This implementation calls contains() on each collection. @param obj the object to search for @return true if obj is contained in any of the contained collections
method,org/apache/commons/collections/collection/CompositeCollection/iterator/, Gets an iterator over all the collections in this composite. This implementation uses an IteratorChain. @return an IteratorChain instance which supports remove(). Iteration occurs over contained collections in the order they were added, but this behavior should not be relied upon. @see IteratorChain
method,org/apache/commons/collections/collection/CompositeCollection/containsAll/Collection, Checks whether this composite contains all the elements in the specified collection. This implementation calls contains() for each element in the specified collection. @param coll the collection to check for @return true if all elements contained
method,org/apache/commons/collections/collection/CompositeCollection/removeAll/Collection, Removes the elements in the specified collection from this composite collection. This implementation calls removeAll on each collection. @param coll the collection to remove @return true if the collection was modified @throws UnsupportedOperationException if removeAll is unsupported
method,org/apache/commons/collections/collection/CompositeCollection/retainAll/Collection, Retains all the elements in the specified collection in this composite collection, removing all others. This implementation calls retainAll() on each collection. @param coll the collection to remove @return true if the collection was modified @throws UnsupportedOperationException if retainAll is unsupported
method,org/apache/commons/collections/collection/CompositeCollection/clear/, Removes all of the elements from this collection . This implementation calls clear() on each collection. @throws UnsupportedOperationException if clear is unsupported
method,org/apache/commons/collections/collection/CompositeCollection/CollectionMutator/add/CompositeCollection;List;Object, Called when an object is to be added to the composite. @param composite the CompositeCollection being changed @param collections all of the Collection instances in this CompositeCollection @param obj the object being added @return true if the collection is changed @throws UnsupportedOperationException if add is unsupported @throws ClassCastException if the object cannot be added due to its type @throws NullPointerException if the object cannot be added because its null @throws IllegalArgumentException if the object cannot be added
method,org/apache/commons/collections/collection/CompositeCollection/CollectionMutator/addAll/CompositeCollection;List;Collection, Called when a collection is to be added to the composite. @param composite the CompositeCollection being changed @param collections all of the Collection instances in this CompositeCollection @param coll the collection being added @return true if the collection is changed @throws UnsupportedOperationException if add is unsupported @throws ClassCastException if the object cannot be added due to its type @throws NullPointerException if the object cannot be added because its null @throws IllegalArgumentException if the object cannot be added
method,org/apache/commons/collections/collection/CompositeCollection/CollectionMutator/remove/CompositeCollection;List;Object, Called when an object is to be removed to the composite. @param composite the CompositeCollection being changed @param collections all of the Collection instances in this CompositeCollection @param obj the object being removed @return true if the collection is changed @throws UnsupportedOperationException if removed is unsupported @throws ClassCastException if the object cannot be removed due to its type @throws NullPointerException if the object cannot be removed because its null @throws IllegalArgumentException if the object cannot be removed
class,java/io/Writer, Abstract class for writing to character streams. The only methods that a subclass must implement are write(char[], int, int), flush(), and close(). Most subclasses, however, will override some of the methods defined here in order to provide higher efficiency, additional functionality, or both. @see Writer @see BufferedWriter @see CharArrayWriter @see FilterWriter @see OutputStreamWriter @see FileWriter @see PipedWriter @see PrintWriter @see StringWriter @see Reader @version 	1.30, 10/03/23 @author	Mark Reinhold @since	JDK1.1
method,java/io/Writer/write/char[], Writes an array of characters. @param cbuf Array of characters to be written @throws IOException If an I/O error occurs
method,java/io/Writer/write/char[];int;int, Writes a portion of an array of characters. @param cbuf Array of characters @param off Offset from which to start writing characters @param len Number of characters to write @throws IOException If an I/O error occurs
method,java/io/Writer/write/String, Writes a string. @param str String to be written @throws IOException If an I/O error occurs
method,java/io/Writer/write/String;int;int, Writes a portion of a string. @param str A String @param off Offset from which to start writing characters @param len Number of characters to write @throws IndexOutOfBoundsException If off is negative, or len is negative, or off+len is negative or greater than the length of the given string @throws IOException If an I/O error occurs
method,java/io/Writer/append/CharSequence, Appends the specified character sequence to this writer. An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation out.write(csq.toString()) Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit. @param csq The character sequence to append. If csq is null, then the four characters null are appended to this writer. @return This writer @throws IOException If an I/O error occurs @since 1.5
method,java/io/Writer/append/CharSequence;int;int, Appends a subsequence of the specified character sequence to this writer. Appendable. An invocation of this method of the form out.append(csq, start, end) when csq is not null behaves in exactly the same way as the invocation out.write(csq.subSequence(start, end).toString()) @param csq The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters null. @param start The index of the first character in the subsequence @param end The index of the character following the last character in the subsequence @return This writer @throws IndexOutOfBoundsException If start or end are negative, start is greater than end, or end is greater than csq.length() @throws IOException If an I/O error occurs @since 1.5
method,java/io/Writer/append/char, Appends the specified character to this writer. An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation out.write(c) @param c The 16-bit character to append @return This writer @throws IOException If an I/O error occurs @since 1.5
method,java/io/Writer/flush/, Flushes the stream. If the stream has saved any characters from the various write() methods in a buffer, write them immediately to their intended destination. Then, if that destination is another character or byte stream, flush it. Thus one flush() invocation will flush all the buffers in a chain of Writers and OutputStreams. If the intended destination of this stream is an abstraction provided by the underlying operating system, for example a file, then flushing the stream guarantees only that bytes previously written to the stream are passed to the operating system for writing; it does not guarantee that they are actually written to a physical device such as a disk drive. @throws IOException If an I/O error occurs
method,java/io/Writer/Writer/, Creates a new character-stream writer whose critical sections will synchronize on the writer itself.
method,java/io/Writer/Writer/Object, Creates a new character-stream writer whose critical sections will synchronize on the given object. @param lock Object to synchronize on
class,java/io/WriteAbortedException, Signals that one of the ObjectStreamExceptions was thrown during a write operation. Thrown during a read operation when one of the ObjectStreamExceptions was thrown during a write operation. The exception that terminated the write can be found in the detail field. The stream is reset to it's initial state and all references to objects already deserialized are discarded. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The exception causing the abort that is provided at construction time and accessed via the public {@link #detail} field is now known as the cause, and may be accessed via the {@link Throwable#getCause()} method, as well as the aforementioned legacy field. @author unascribed @version 1.22, 03/23/10 @since JDK1.1
method,java/io/WriteAbortedException/getCause/, Returns the exception that terminated the operation (the cause). @return the exception that terminated the operation (the cause), which may be null. @since 1.4
method,java/io/UTFDataFormatException/UTFDataFormatException/, Constructs a UTFDataFormatException with null as its error detail message.
method,java/io/StringWriter/append/CharSequence, Appends the specified character sequence to this writer. An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation out.write(csq.toString()) Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit. @param csq The character sequence to append. If csq is null, then the four characters null are appended to this writer. @return This writer @since 1.5
method,java/io/StringWriter/append/CharSequence;int;int, Appends a subsequence of the specified character sequence to this writer. An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation out.write(csq.subSequence(start, end).toString()) @param csq The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters null. @param start The index of the first character in the subsequence @param end The index of the character following the last character in the subsequence @return This writer @throws IndexOutOfBoundsException If start or end are negative, start is greater than end, or end is greater than csq.length() @since 1.5
method,java/io/StringWriter/append/char, Appends the specified character to this writer. An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation out.write(c) @param c The 16-bit character to append @return This writer @since 1.5
method,java/io/StringWriter/close/, Closing a StringWriter has no effect. The methods in this class can be called after the stream has been closed without generating an IOException.
method,java/io/StringWriter/StringWriter/int, Create a new string writer using the specified initial string-buffer size. @param initialSize The number of char values that will fit into this buffer before it is automatically expanded @throws IllegalArgumentException If initialSize is negative
class,java/io/StringBufferInputStream, This class allows an application to create an input stream in which the bytes read are supplied by the contents of a string. Applications can also read bytes from a byte array by using a ByteArrayInputStream. Only the low eight bits of each character in the string are used by this class. @author Arthur van Hoff @version 1.28, 03/23/10 @see java.io.ByteArrayInputStream @see java.io.StringReader @since JDK1.0 @deprecated This class does not properly convert characters into bytes. As of JDK&nbsp;1.1, the preferred way to create a stream from a string is via the StringReader class.
class,java/io/StreamTokenizer, The StreamTokenizer class takes an input stream and parses it into tokens, allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment styles. Each byte read from the input stream is regarded as a character in the range '&#92;u0000' through '&#92;u00FF'. The character value is used to look up five possible attributes of the character: white space, alphabetic, numeric, string quote, and comment character. Each character can have zero or more of these attributes. In addition, an instance has four flags. These flags indicate: Whether line terminators are to be returned as tokens or treated as white space that merely separates tokens. Whether C-style comments are to be recognized and skipped. Whether C++-style comments are to be recognized and skipped. Whether the characters of identifiers are converted to lowercase. A typical application first constructs an instance of this class, sets up the syntax tables, and then repeatedly loops calling the nextToken method in each iteration of the loop until it returns the value TT_EOF. @author James Gosling @version 1.48, 03/23/10 @see java.io.StreamTokenizer#nextToken() @see java.io.StreamTokenizer#TT_EOF @since JDK1.0
method,java/io/StreamTokenizer/whitespaceChars/int;int, Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are white space characters. White space characters serve only to separate tokens in the input stream. Any other attribute settings for the characters in the specified range are cleared. @param low the low end of the range. @param hi the high end of the range.
method,java/io/StreamTokenizer/ordinaryChar/int, Specifies that the character argument is ordinary in this tokenizer. It removes any special significance the character has as a comment character, word component, string delimiter, white space, or number character. When such a character is encountered by the parser, the parser treats it as a single-character token and sets ttype field to the character value. Making a line terminator character ordinary may interfere with the ability of a StreamTokenizer to count lines. The lineno method may no longer reflect the presence of such terminator characters in its line count. @param ch the character. @see java.io.StreamTokenizer#ttype
method,java/io/StreamTokenizer/quoteChar/int, Specifies that matching pairs of this character delimit string constants in this tokenizer. When the nextToken method encounters a string constant, the ttype field is set to the string delimiter and the sval field is set to the body of the string. If a string quote character is encountered, then a string is recognized, consisting of all characters after (but not including) the string quote character, up to (but not including) the next occurrence of that same string quote character, or a line terminator, or end of file. The usual escape sequences such as &#92;n and &#92;t are recognized and converted to single characters as the string is parsed. Any other attribute settings for the specified character are cleared. @param ch the character. @see java.io.StreamTokenizer#nextToken() @see java.io.StreamTokenizer#sval @see java.io.StreamTokenizer#ttype
method,java/io/StreamTokenizer/parseNumbers/, Specifies that numbers should be parsed by this tokenizer. The syntax table of this tokenizer is modified so that each of the twelve characters: 0 1 2 3 4 5 6 7 8 9 . - has the numeric attribute. When the parser encounters a word token that has the format of a double precision floating-point number, it treats the token as a number rather than a word, by setting the ttype field to the value TT_NUMBER and putting the numeric value of the token into the nval field. @see java.io.StreamTokenizer#nval @see java.io.StreamTokenizer#TT_NUMBER @see java.io.StreamTokenizer#ttype
method,java/io/StreamTokenizer/eolIsSignificant/boolean, Determines whether or not ends of line are treated as tokens. If the flag argument is true, this tokenizer treats end of lines as tokens; the nextToken method returns TT_EOL and also sets the ttype field to this value when an end of line is read. A line is a sequence of characters ending with either a carriage-return character ('&#92;r') or a newline character ('&#92;n'). In addition, a carriage-return character followed immediately by a newline character is treated as a single end-of-line token. If the flag is false, end-of-line characters are treated as white space and serve only to separate tokens. @param flag true indicates that end-of-line characters are separate tokens; false indicates that end-of-line characters are white space. @see java.io.StreamTokenizer#nextToken() @see java.io.StreamTokenizer#ttype @see java.io.StreamTokenizer#TT_EOL
method,java/io/StreamTokenizer/slashStarComments/boolean, Determines whether or not the tokenizer recognizes C-style comments. If the flag argument is true, this stream tokenizer recognizes C-style comments. All text between successive occurrences of /* and *&#47; are discarded. If the flag argument is false, then C-style comments are not treated specially. @param flag true indicates to recognize and ignore C-style comments.
method,java/io/StreamTokenizer/slashSlashComments/boolean, Determines whether or not the tokenizer recognizes C++-style comments. If the flag argument is true, this stream tokenizer recognizes C++-style comments. Any occurrence of two consecutive slash characters ('/') is treated as the beginning of a comment that extends to the end of the line. If the flag argument is false, then C++-style comments are not treated specially. @param flag true indicates to recognize and ignore C++-style comments.
method,java/io/StreamTokenizer/lowerCaseMode/boolean, Determines whether or not word token are automatically lowercased. If the flag argument is true, then the value in the sval field is lowercased whenever a word token is returned (the ttype field has the value TT_WORD by the nextToken method of this tokenizer. If the flag argument is false, then the sval field is not modified. @param fl true indicates that all word tokens should be lowercased. @see java.io.StreamTokenizer#nextToken() @see java.io.StreamTokenizer#ttype @see java.io.StreamTokenizer#TT_WORD
method,java/io/StreamTokenizer/pushBack/, Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field. @see java.io.StreamTokenizer#nextToken() @see java.io.StreamTokenizer#nval @see java.io.StreamTokenizer#sval @see java.io.StreamTokenizer#ttype
field,java/io/StreamTokenizer/ttype, After a call to the nextToken method, this field contains the type of the token just read. For a single character token, its value is the single character, converted to an integer. For a quoted string token, its value is the quote character. Otherwise, its value is one of the following: TT_WORD indicates that the token is a word. TT_NUMBER indicates that the token is a number. TT_EOL indicates that the end of line has been read. The field can only have this value if the eolIsSignificant method has been called with the argument true. TT_EOF indicates that the end of the input stream has been reached. The initial value of this field is -4. @see java.io.StreamTokenizer#eolIsSignificant(boolean) @see java.io.StreamTokenizer#nextToken() @see java.io.StreamTokenizer#quoteChar(int) @see java.io.StreamTokenizer#TT_EOF @see java.io.StreamTokenizer#TT_EOL @see java.io.StreamTokenizer#TT_NUMBER @see java.io.StreamTokenizer#TT_WORD
class,java/io/SerializablePermission, This class is for Serializable permissions. A SerializablePermission contains a name (also referred to as a target name) but no actions list; you either have the named permission or you don't. The target name is the name of the Serializable permission (see below). The following table lists all the possible SerializablePermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission. Permission Target Name What the Permission Allows Risks of Allowing this Permission enableSubclassImplementation Subclass implementation of ObjectOutputStream or ObjectInputStream to override the default serialization or deserialization, respectively, of objects Code can use this to serialize or deserialize classes in a purposefully malfeasant manner. For example, during serialization, malicious code can use this to purposefully store confidential private field data in a way easily accessible to attackers. Or, during deserialization it could, for example, deserialize a class with all its private fields zeroed out. enableSubstitution Substitution of one object for another during serialization or deserialization This is dangerous because malicious code can replace the actual object with one which has incorrect or malignant data. @see java.security.BasicPermission @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @see java.lang.SecurityManager @version 1.24, 03/23/10 @author Joe Fialli @since 1.2
class,java/io/Reader, Abstract class for reading character streams. The only methods that a subclass must implement are read(char[], int, int) and close(). Most subclasses, however, will override some of the methods defined here in order to provide higher efficiency, additional functionality, or both. @see BufferedReader @see LineNumberReader @see CharArrayReader @see InputStreamReader @see FileReader @see FilterReader @see PushbackReader @see PipedReader @see StringReader @see Writer @version 	1.31, 10/03/23 @author	Mark Reinhold @since	JDK1.1
method,java/io/Reader/read/CharBuffer, Attempts to read characters into the specified character buffer. The buffer is used as a repository of characters as-is: the only changes made are the results of a put operation. No flipping or rewinding of the buffer is performed. @param target the buffer to read characters into @return The number of characters added to the buffer, or -1 if this source of characters is at its end @throws IOException if an I/O error occurs @throws NullPointerException if target is null @throws ReadOnlyBufferException if target is a read only buffer @since 1.5
method,java/io/Reader/mark/int, Marks the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point. Not all character-input streams support the mark() operation. @param readAheadLimit Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail. @exception IOException If the stream does not support mark(), or if some other I/O error occurs
method,java/io/Reader/Reader/, Creates a new character-stream reader whose critical sections will synchronize on the reader itself.
method,java/io/Reader/Reader/Object, Creates a new character-stream reader whose critical sections will synchronize on the given object. @param lock The Object to synchronize on.
method,java/io/RandomAccessFile/read/byte[], Reads up to b.length bytes of data from this file into an array of bytes. This method blocks until at least one byte of input is available. Although RandomAccessFile is not a subclass of InputStream, this method behaves in exactly the same way as the {@link InputStream#read(byte[])} method of InputStream. @param b the buffer into which the data is read. @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of this file has been reached. @exception IOException If the first byte cannot be read for any reason other than end of file, or if the random access file has been closed, or if some other I/O error occurs. @exception NullPointerException If b is null.
method,java/io/RandomAccessFile/seek/long, Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs. The offset may be set beyond the end of the file. Setting the offset beyond the end of the file does not change the file length. The file length will change only by writing after the offset has been set beyond the end of the file. @param pos the offset position, measured in bytes from the beginning of the file, at which to set the file pointer. @exception IOException if pos is less than 0 or if an I/O error occurs.
method,java/io/RandomAccessFile/RandomAccessFile/String;String, Creates a random access file stream to read from, and optionally to write to, a file with the specified name. A new {@link FileDescriptor} object is created to represent the connection to the file. The mode argument specifies the access mode with which the file is to be opened. The permitted values and their meanings are as specified for the RandomAccessFile(File,String) constructor. If there is a security manager, its checkRead method is called with the name argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager's checkWrite method is also called with the name argument as its argument to see if write access to the file is allowed. @param name the system-dependent filename @param mode the access mode @exception IllegalArgumentException if the mode argument is not equal to one of r, rw, rws, or rwd @exception FileNotFoundException if the mode is r but the given string does not denote an existing regular file, or if the mode begins with rw but the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @exception SecurityException if a security manager exists and its checkRead method denies read access to the file or the mode is rw and the security manager's checkWrite method denies write access to the file @see java.lang.SecurityException @see java.lang.SecurityManager#checkRead(java.lang.String) @see java.lang.SecurityManager#checkWrite(java.lang.String) @revised 1.4 @spec JSR-51
method,java/io/RandomAccessFile/RandomAccessFile/File;String, Creates a random access file stream to read from, and optionally to write to, the file specified by the {@link File} argument. A new {@link FileDescriptor} object is created to represent this file connection. The mode argument specifies the access mode in which the file is to be opened. The permitted values and their meanings are: ValueMeaning r Open for reading only. Invoking any of the write methods of the resulting object will cause an {@link java.io.IOException} to be thrown. rw Open for reading and writing. If the file does not already exist then an attempt will be made to create it. rws Open for reading and writing, as with rw, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device. rwd&nbsp;&nbsp; Open for reading and writing, as with rw, and also require that every update to the file's content be written synchronously to the underlying storage device. The rws and rwd modes work much like the {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method of the {@link java.nio.channels.FileChannel} class, passing arguments of true and false, respectively, except that they always apply to every I/O operation and are therefore often more efficient. If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash. If the file does not reside on a local device then no such guarantee is made. The rwd mode can be used to reduce the number of I/O operations performed. Using rwd only requires updates to the file's content to be written to storage; using rws requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. If there is a security manager, its checkRead method is called with the pathname of the file argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager's checkWrite method is also called with the path argument to see if write access to the file is allowed. @param file the file object @param mode the access mode, as described above @exception IllegalArgumentException if the mode argument is not equal to one of r, rw, rws, or rwd @exception FileNotFoundException if the mode is r but the given file object does not denote an existing regular file, or if the mode begins with rw but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @exception SecurityException if a security manager exists and its checkRead method denies read access to the file or the mode is rw and the security manager's checkWrite method denies write access to the file @see java.lang.SecurityManager#checkRead(java.lang.String) @see java.lang.SecurityManager#checkWrite(java.lang.String) @see java.nio.channels.FileChannel#force(boolean) @revised 1.4 @spec JSR-51
method,java/io/PushbackReader/unread/int, Pushes back a single character by copying it to the front of the pushback buffer. After this method returns, the next character to be read will have the value (char)c. @param c The int value representing a character to be pushed back @exception IOException If the pushback buffer is full, or if some other I/O error occurs
class,java/io/PushbackInputStream, A PushbackInputStream adds functionality to another input stream, namely the ability to push back or unread one byte. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can unread it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read. @author David Connelly @author Jonathan Payne @version 1.44, 03/23/10 @since JDK1.0
method,java/io/PushbackInputStream/read/, Reads the next byte of data from this input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. This method returns the most recently pushed-back byte, if there is one, and otherwise calls the read method of its underlying input stream and returns whatever value that method returns. @return the next byte of data, or -1 if the end of the stream has been reached. @exception IOException if this input stream has been closed by		 invoking its {@link #close()} method,		 or an I/O error occurs. @see java.io.InputStream#read()
method,java/io/PushbackInputStream/unread/int, Pushes back a byte by copying it to the front of the pushback buffer. After this method returns, the next byte to be read will have the value (byte)b. @param b the int value whose low-order 			byte is to be pushed back. @exception IOException If there is not enough room in the pushback		 buffer for the byte, or this input stream has been closed by		 invoking its {@link #close()} method.
method,java/io/PushbackInputStream/unread/byte[];int;int, Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer. After this method returns, the next byte to be read will have the value b[off], the byte after that will have the value b[off+1], and so forth. @param b the byte array to push back. @param off the start offset of the data. @param len the number of bytes to push back. @exception IOException If there is not enough room in the pushback		 buffer for the specified number of bytes,		 or this input stream has been closed by		 invoking its {@link #close()} method. @since JDK1.1
method,java/io/PushbackInputStream/unread/byte[], Pushes back an array of bytes by copying it to the front of the pushback buffer. After this method returns, the next byte to be read will have the value b[0], the byte after that will have the value b[1], and so forth. @param b the byte array to push back @exception IOException If there is not enough room in the pushback		 buffer for the specified number of bytes,		 or this input stream has been closed by		 invoking its {@link #close()} method. @since JDK1.1
method,java/io/PushbackInputStream/available/, Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes. The method returns the sum of the number of bytes that have been pushed back and the value returned by {@link java.io.FilterInputStream#available available}. @return the number of bytes that can be read (or skipped over) from the input stream without blocking. @exception IOException if this input stream has been closed by 		 invoking its {@link #close()} method,		 or an I/O error occurs. @see java.io.FilterInputStream#in @see java.io.InputStream#available()
method,java/io/PushbackInputStream/skip/long, Skips over and discards n bytes of data from this input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly zero. If n is negative, no bytes are skipped. The skip method of PushbackInputStream first skips over the bytes in the pushback buffer, if any. It then calls the skip method of the underlying input stream if more bytes need to be skipped. The actual number of bytes skipped is returned. @param	 n {@inheritDoc} @return {@inheritDoc} @exception IOException if the stream does not support seek,		 or the stream has been closed by		 invoking its {@link #close()} method,		 or an I/O error occurs. @see java.io.FilterInputStream#in @see java.io.InputStream#skip(long n) @since 1.2
method,java/io/PushbackInputStream/mark/int, Marks the current position in this input stream. The mark method of PushbackInputStream does nothing. @param readlimit the maximum limit of bytes that can be read before the mark position becomes invalid. @see java.io.InputStream#reset()
method,java/io/PushbackInputStream/reset/, Repositions this stream to the position at the time the mark method was last called on this input stream. The method reset for class PushbackInputStream does nothing except throw an IOException. @exception IOException if this method is invoked. @see java.io.InputStream#mark(int) @see java.io.IOException
class,java/io/PrintWriter, Prints formatted representations of objects to a text-output stream. This class implements all of the print methods found in {@link PrintStream}. It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams. Unlike the {@link PrintStream} class, if automatic flushing is enabled it will be done only when one of the println, printf, or format methods is invoked, rather than whenever a newline character happens to be output. These methods use the platform's own notion of line separator rather than the newline character. Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking {@link #checkError checkError()}. @version 	1.44, 03/23/10 @author	Frank Yellin @author	Mark Reinhold @since	JDK1.1
method,java/io/PrintWriter/checkError/, Flushes the stream if it's not closed and checks its error state. @return true if the print stream has encountered an error, 		either on the underlying output stream or during a format		conversion.
method,java/io/PrintWriter/setError/, Indicates that an error has occurred. This method will cause subsequent invocations of {@link #checkError()} to return true until {@link #clearError()} is invoked.
method,java/io/PrintWriter/clearError/, Clears the error state of this stream. This method will cause subsequent invocations of {@link #checkError()} to return false until another write operation fails and invokes {@link #setError()}. @since 1.6
method,java/io/PrintWriter/write/char[], Writes an array of characters. This method cannot be inherited from the Writer class because it must suppress I/O exceptions. @param buf Array of characters to be written
method,java/io/PrintWriter/write/String, Writes a string. This method cannot be inherited from the Writer class because it must suppress I/O exceptions. @param s String to be written
method,java/io/PrintWriter/println/, Terminates the current line by writing the line separator string. The line separator string is defined by the system property line.separator, and is not necessarily a single newline character ('').
method,java/io/PrintWriter/println/boolean, Prints a boolean value and then terminates the line. This method behaves as though it invokes {@link #print(boolean)} and then {@link #println()}. @param x the boolean value to be printed
method,java/io/PrintWriter/println/char, Prints a character and then terminates the line. This method behaves as though it invokes {@link #print(char)} and then {@link #println()}. @param x the char value to be printed
method,java/io/PrintWriter/println/int, Prints an integer and then terminates the line. This method behaves as though it invokes {@link #print(int)} and then {@link #println()}. @param x the int value to be printed
method,java/io/PrintWriter/println/long, Prints a long integer and then terminates the line. This method behaves as though it invokes {@link #print(long)} and then {@link #println()}. @param x the long value to be printed
method,java/io/PrintWriter/println/float, Prints a floating-point number and then terminates the line. This method behaves as though it invokes {@link #print(float)} and then {@link #println()}. @param x the float value to be printed
method,java/io/PrintWriter/println/double, Prints a double-precision floating-point number and then terminates the line. This method behaves as though it invokes {@link #print(double)} and then {@link #println()}. @param x the double value to be printed
method,java/io/PrintWriter/println/char[], Prints an array of characters and then terminates the line. This method behaves as though it invokes {@link #print(char[])} and then {@link #println()}. @param x the array of char values to be printed
method,java/io/PrintWriter/println/String, Prints a String and then terminates the line. This method behaves as though it invokes {@link #print(String)} and then {@link #println()}. @param x the String value to be printed
method,java/io/PrintWriter/println/Object, Prints an Object and then terminates the line. This method calls at first String.valueOf(x) to get the printed object's string value, then behaves as though it invokes {@link #print(String)} and then {@link #println()}. @param x The Object to be printed.
method,java/io/PrintWriter/append/CharSequence, Appends the specified character sequence to this writer. An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation out.write(csq.toString()) Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit. @param csq The character sequence to append. If csq is null, then the four characters null are appended to this writer. @return This writer @since 1.5
method,java/io/PrintWriter/append/CharSequence;int;int, Appends a subsequence of the specified character sequence to this writer. An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation out.write(csq.subSequence(start, end).toString()) @param csq The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters null. @param start The index of the first character in the subsequence @param end The index of the character following the last character in the subsequence @return This writer @throws IndexOutOfBoundsException If start or end are negative, start is greater than end, or end is greater than csq.length() @since 1.5
method,java/io/PrintWriter/append/char, Appends the specified character to this writer. An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation out.write(c) @param c The 16-bit character to append @return This writer @since 1.5
method,java/io/PrintWriter/PrintWriter/OutputStream, Creates a new PrintWriter, without automatic line flushing, from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding. @param out An output stream @see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)
method,java/io/PrintWriter/PrintWriter/OutputStream;boolean, Creates a new PrintWriter from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding. @param out An output stream @param autoFlush A boolean; if true, the println, printf, or format methods will flush the output buffer @see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)
method,java/io/PrintWriter/PrintWriter/String, Creates a new PrintWriter, without automatic line flushing, with the specified file name. This convenience constructor creates the necessary intermediate {@link java.io.OutputStreamWriter OutputStreamWriter}, which will encode characters using the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this instance of the Java virtual machine. @param fileName The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @throws FileNotFoundException If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write access to the file @since 1.5
method,java/io/PrintWriter/PrintWriter/String;String, Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate {@link java.io.OutputStreamWriter OutputStreamWriter}, which will encode characters using the provided charset. @param fileName The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @param csn The name of a supported {@linkplain java.nio.charset.Charset charset} @throws FileNotFoundException If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write access to the file @throws UnsupportedEncodingException If the named charset is not supported @since 1.5
method,java/io/PrintWriter/PrintWriter/File, Creates a new PrintWriter, without automatic line flushing, with the specified file. This convenience constructor creates the necessary intermediate {@link java.io.OutputStreamWriter OutputStreamWriter}, which will encode characters using the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this instance of the Java virtual machine. @param file The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies write access to the file @since 1.5
method,java/io/PrintWriter/PrintWriter/File;String, Creates a new PrintWriter, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate {@link java.io.OutputStreamWriter OutputStreamWriter}, which will encode characters using the provided charset. @param file The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @param csn The name of a supported {@linkplain java.nio.charset.Charset charset} @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies write access to the file @throws UnsupportedEncodingException If the named charset is not supported @since 1.5
method,java/io/PrintStream/checkError/, Flushes the stream and checks its error state. The internal error state is set to true when the underlying output stream throws an IOException other than InterruptedIOException, and when the setError method is invoked. If an operation on the underlying output stream throws an InterruptedIOException, then the PrintStream converts the exception back into an interrupt by doing: Thread.currentThread().interrupt(); or the equivalent. @return true if and only if this stream has encountered an IOException other than InterruptedIOException, or the setError method has been invoked
method,java/io/PrintStream/setError/, Sets the error state of the stream to true. This method will cause subsequent invocations of {@link #checkError()} to return true until {@link #clearError()} is invoked. @since JDK1.1
method,java/io/PrintStream/clearError/, Clears the internal error state of this stream. This method will cause subsequent invocations of {@link #checkError()} to return false until another write operation fails and invokes {@link #setError()}. @since 1.6
method,java/io/PrintStream/write/int, Writes the specified byte to this stream. If the byte is a newline and automatic flushing is enabled then the flush method will be invoked. Note that the byte is written as given; to write a character that will be translated according to the platform's default character encoding, use the print(char) or println(char) methods. @param b The byte to be written @see #print(char) @see #println(char)
method,java/io/PrintStream/write/byte[];int;int, Writes len bytes from the specified byte array starting at offset off to this stream. If automatic flushing is enabled then the flush method will be invoked. Note that the bytes will be written as given; to write characters that will be translated according to the platform's default character encoding, use the print(char) or println(char) methods. @param buf A byte array @param off Offset from which to start taking bytes @param len Number of bytes to write
method,java/io/PrintStream/println/, Terminates the current line by writing the line separator string. The line separator string is defined by the system property line.separator, and is not necessarily a single newline character ('').
method,java/io/PrintStream/println/boolean, Prints a boolean and then terminate the line. This method behaves as though it invokes {@link #print(boolean)} and then {@link #println()}. @param x The boolean to be printed
method,java/io/PrintStream/println/char, Prints a character and then terminate the line. This method behaves as though it invokes {@link #print(char)} and then {@link #println()}. @param x The char to be printed.
method,java/io/PrintStream/println/int, Prints an integer and then terminate the line. This method behaves as though it invokes {@link #print(int)} and then {@link #println()}. @param x The int to be printed.
method,java/io/PrintStream/println/long, Prints a long and then terminate the line. This method behaves as though it invokes {@link #print(long)} and then {@link #println()}. @param x a The long to be printed.
method,java/io/PrintStream/println/float, Prints a float and then terminate the line. This method behaves as though it invokes {@link #print(float)} and then {@link #println()}. @param x The float to be printed.
method,java/io/PrintStream/println/double, Prints a double and then terminate the line. This method behaves as though it invokes {@link #print(double)} and then {@link #println()}. @param x The double to be printed.
method,java/io/PrintStream/println/char[], Prints an array of characters and then terminate the line. This method behaves as though it invokes {@link #print(char[])} and then {@link #println()}. @param x an array of chars to print.
method,java/io/PrintStream/println/String, Prints a String and then terminate the line. This method behaves as though it invokes {@link #print(String)} and then {@link #println()}. @param x The String to be printed.
method,java/io/PrintStream/println/Object, Prints an Object and then terminate the line. This method calls at first String.valueOf(x) to get the printed object's string value, then behaves as though it invokes {@link #print(String)} and then {@link #println()}. @param x The Object to be printed.
method,java/io/PrintStream/append/CharSequence, Appends the specified character sequence to this output stream. An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation out.print(csq.toString()) Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking then toString method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit. @param csq The character sequence to append. If csq is null, then the four characters null are appended to this output stream. @return This output stream @since 1.5
method,java/io/PrintStream/append/CharSequence;int;int, Appends a subsequence of the specified character sequence to this output stream. An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation out.print(csq.subSequence(start, end).toString()) @param csq The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters null. @param start The index of the first character in the subsequence @param end The index of the character following the last character in the subsequence @return This output stream @throws IndexOutOfBoundsException If start or end are negative, start is greater than end, or end is greater than csq.length() @since 1.5
method,java/io/PrintStream/append/char, Appends the specified character to this output stream. An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation out.print(c) @param c The 16-bit character to append @return This output stream @since 1.5
method,java/io/PrintStream/PrintStream/OutputStream;boolean, Creates a new print stream. @param out The output stream to which values and objects will be printed @param autoFlush A boolean; if true, the output buffer will be flushed whenever a byte array is written, one of the println methods is invoked, or a newline character or byte ('') is written @see java.io.PrintWriter#PrintWriter(java.io.OutputStream, boolean)
method,java/io/PrintStream/PrintStream/OutputStream;boolean;String, Creates a new print stream. @param out The output stream to which values and objects will be printed @param autoFlush A boolean; if true, the output buffer will be flushed whenever a byte array is written, one of the println methods is invoked, or a newline character or byte ('') is written @param encoding The name of a supported character encoding @throws UnsupportedEncodingException If the named encoding is not supported @since 1.4
method,java/io/PrintStream/PrintStream/String, Creates a new print stream, without automatic line flushing, with the specified file name. This convenience constructor creates the necessary intermediate {@link java.io.OutputStreamWriter OutputStreamWriter}, which will encode characters using the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this instance of the Java virtual machine. @param fileName The name of the file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write access to the file @since 1.5
method,java/io/PrintStream/PrintStream/String;String, Creates a new print stream, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate {@link java.io.OutputStreamWriter OutputStreamWriter}, which will encode characters using the provided charset. @param fileName The name of the file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @param csn The name of a supported {@linkplain java.nio.charset.Charset charset} @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write access to the file @throws UnsupportedEncodingException If the named charset is not supported @since 1.5
method,java/io/PrintStream/PrintStream/File, Creates a new print stream, without automatic line flushing, with the specified file. This convenience constructor creates the necessary intermediate {@link java.io.OutputStreamWriter OutputStreamWriter}, which will encode characters using the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this instance of the Java virtual machine. @param file The file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies write access to the file @since 1.5
method,java/io/PrintStream/PrintStream/File;String, Creates a new print stream, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate {@link java.io.OutputStreamWriter OutputStreamWriter}, which will encode characters using the provided charset. @param file The file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @param csn The name of a supported {@linkplain java.nio.charset.Charset charset} @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is presentand {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies write access to the file @throws UnsupportedEncodingException If the named charset is not supported @since 1.5
method,java/io/PipedWriter/write/int, Writes the specified char to the piped output stream. If a thread was reading data characters from the connected piped input stream, but the thread is no longer alive, then an IOException is thrown. Implements the write method of Writer. @param c the char to be written. @exception IOException if the pipe is 		 broken,		{@link #connect(java.io.PipedReader) unconnected}, closed 		or an I/O error occurs.
method,java/io/PipedWriter/write/char[];int;int, Writes len characters from the specified character array starting at offset off to this piped output stream. This method blocks until all the characters are written to the output stream. If a thread was reading data characters from the connected piped input stream, but the thread is no longer alive, then an IOException is thrown. @param cbuf the data. @param off the start offset in the data. @param len the number of characters to write. @exception IOException if the pipe is 		 broken,		{@link #connect(java.io.PipedReader) unconnected}, closed		or an I/O error occurs.
method,java/io/PipedWriter/flush/, Flushes this output stream and forces any buffered output characters to be written out. This will notify any readers that characters are waiting in the pipe. @exception IOException if the pipe is closed, or an I/O error occurs.
method,java/io/PipedReader/read/, Reads the next character of data from this piped stream. If no character is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. @return the next character of data, or -1 if the end of the stream is reached. @exception IOException if the pipe is		 broken,		{@link #connect(java.io.PipedWriter) unconnected}, closed,		or an I/O error occurs.
method,java/io/PipedReader/read/char[];int;int, Reads up to len characters of data from this piped stream into an array of characters. Less than len characters will be read if the end of the data stream is reached or if len exceeds the pipe's buffer size. This method blocks until at least one character of input is available. @param cbuf the buffer into which the data is read. @param off the start offset of the data. @param len the maximum number of characters read. @return the total number of characters read into the buffer, or -1 if there is no more data because the end of the stream has been reached. @exception IOException if the pipe is			 broken, 	{@link #connect(java.io.PipedWriter) unconnected}, closed,			or an I/O error occurs.
method,java/io/PipedOutputStream/write/int, Writes the specified byte to the piped output stream. Implements the write method of OutputStream. @param b the byte to be written. @exception IOException if the pipe is broken,		{@link #connect(java.io.PipedInputStream) unconnected},		closed, or if an I/O error occurs.
method,java/io/PipedOutputStream/write/byte[];int;int, Writes len bytes from the specified byte array starting at offset off to this piped output stream. This method blocks until all the bytes are written to the output stream. @param b the data. @param off the start offset in the data. @param len the number of bytes to write. @exception IOException if the pipe is broken, {@link #connect(java.io.PipedInputStream) unconnected},		closed, or if an I/O error occurs.
method,java/io/PipedInputStream/receive/int, Receives a byte of data. This method will block if no input is available. @param b the byte being received @exception IOException If the pipe is broken,		{@link #connect(java.io.PipedOutputStream) unconnected},		closed, or if an I/O error occurs. @since JDK1.1
method,java/io/PipedInputStream/read/, Reads the next byte of data from this piped input stream. The value byte is returned as an int in the range 0 to 255. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. @return the next byte of data, or -1 if the end of the stream is reached. @exception IOException if the pipe is		 {@link #connect(java.io.PipedOutputStream) unconnected},		 broken, closed,		 or if an I/O error occurs.
method,java/io/OutputStreamWriter/getEncoding/, Returns the name of the character encoding being used by this stream. If the encoding has an historical name then that name is returned; otherwise the encoding's canonical name is returned. If this instance was created with the {@link #OutputStreamWriter(OutputStream, String)} constructor then the returned name, being unique for the encoding, may differ from the name passed to the constructor. This method may return null if the stream has been closed. @return The historical name of this encoding, or possibly null if the stream has been closed @see java.nio.charset.Charset @revised 1.4 @spec JSR-51
class,java/io/OutputStream, This abstract class is the superclass of all classes representing an output stream of bytes. An output stream accepts output bytes and sends them to some sink. Applications that need to define a subclass of OutputStream must always provide at least a method that writes one byte of output. @author Arthur van Hoff @version 1.31, 03/23/10 @see java.io.BufferedOutputStream @see java.io.ByteArrayOutputStream @see java.io.DataOutputStream @see java.io.FilterOutputStream @see java.io.InputStream @see java.io.OutputStream#write(int) @since JDK1.0
class,java/io/OptionalDataException, Exception indicating the failure of an object read operation due to unread primitive data, or the end of data belonging to a serialized object in the stream. This exception may be thrown in two cases: An attempt was made to read an object when the next element in the stream is primitive data. In this case, the OptionalDataException's length field is set to the number of bytes of primitive data immediately readable from the stream, and the eof field is set to false. An attempt was made to read past the end of data consumable by a class-defined readObject or readExternal method. In this case, the OptionalDataException's eof field is set to true, and the length field is set to 0. @author unascribed @version 1.24, 03/23/10 @since JDK1.1
method,java/io/ObjectStreamField/isPrimitive/, Return true if this field has a primitive type. @return	true if and only if this field corresponds to a primitive type
method,java/io/ObjectStreamField/ObjectStreamField/String;Class;boolean, Creates an ObjectStreamField representing a serializable field with the given name and type. If unshared is false, values of the represented field are serialized and deserialized in the default manner--if the field is non-primitive, object values are serialized and deserialized as if they had been written and read by calls to writeObject and readObject. If unshared is true, values of the represented field are serialized and deserialized as if they had been written and read by calls to writeUnshared and readUnshared. @param name field name @param type field type @param unshared if false, write/read field values in the same manner as writeObject/readObject; if true, write/read in the same manner as writeUnshared/readUnshared @since 1.4
class,java/io/ObjectStreamException, Superclass of all exceptions specific to Object Stream classes. @author unascribed @version 1.17, 03/23/10 @since JDK1.1
field,java/io/ObjectStreamConstants/SUBCLASS_IMPLEMENTATION_PERMISSION, Enable overriding of readObject and writeObject. @see java.io.ObjectOutputStream#writeObjectOverride(Object) @see java.io.ObjectInputStream#readObjectOverride() @since 1.2
field,java/io/ObjectStreamConstants/PROTOCOL_VERSION_1, A Stream Protocol Version. All externalizable data is written in JDK 1.1 external data format after calling this method. This version is needed to write streams containing Externalizable data that can be read by pre-JDK 1.1.6 JVMs. @see java.io.ObjectOutputStream#useProtocolVersion(int) @since 1.2
method,java/io/ObjectOutputStream/useProtocolVersion/int, Specify stream protocol version to use when writing the stream. This routine provides a hook to enable the current version of Serialization to write in a format that is backwards compatible to a previous version of the stream format. Every effort will be made to avoid introducing additional backwards incompatibilities; however, sometimes there is no other alternative. @param	version use ProtocolVersion from java.io.ObjectStreamConstants. @throws	IllegalStateException if called after any objects 		have been serialized. @throws	IllegalArgumentException if invalid version is passed in. @throws	IOException if I/O errors occur @see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1 @see java.io.ObjectStreamConstants#PROTOCOL_VERSION_2 @since	1.2
method,java/io/ObjectOutputStream/writeObject/Object, Write the specified object to the ObjectOutputStream. The class of the object, the signature of the class, and the values of the non-transient and non-static fields of the class and all of its supertypes are written. Default serialization for a class can be overridden using the writeObject and the readObject methods. Objects referenced by this object are written transitively so that a complete equivalent graph of objects can be reconstructed by an ObjectInputStream. Exceptions are thrown for problems with the OutputStream and for classes that should not be serialized. All exceptions are fatal to the OutputStream, which is left in an indeterminate state, and it is up to the caller to ignore or recover the stream state. @throws	InvalidClassException Something is wrong with a class used by		serialization. @throws	NotSerializableException Some object to be serialized does not		implement the java.io.Serializable interface. @throws	IOException Any exception thrown by the underlying 		OutputStream.
method,java/io/ObjectOutputStream/writeObjectOverride/Object, Method used by subclasses to override the default writeObject method. This method is called by trusted subclasses of ObjectInputStream that constructed ObjectInputStream using the protected no-arg constructor. The subclass is expected to provide an override method with the modifier final. @param	obj object to be written to the underlying stream @throws	IOException if there are I/O errors while writing to the 		underlying stream @see #ObjectOutputStream() @see #writeObject(Object) @since 1.2
method,java/io/ObjectOutputStream/defaultWriteObject/, Write the non-static and non-transient fields of the current class to this stream. This may only be called from the writeObject method of the class being serialized. It will throw the NotActiveException if it is called otherwise. @throws	IOException if I/O errors occur while writing to the underlying 		OutputStream
method,java/io/ObjectOutputStream/putFields/, Retrieve the object used to buffer persistent fields to be written to the stream. The fields will be written to the stream when writeFields method is called. @return	an instance of the class Putfield that holds the serializable 		fields @throws	IOException if I/O errors occur @since 1.2
method,java/io/ObjectOutputStream/writeFields/, Write the buffered fields to the stream. @throws	IOException if I/O errors occur while writing to the underlying 		stream @throws	NotActiveException Called when a classes writeObject method was 		not called to write the state of the object. @since 1.2
method,java/io/ObjectOutputStream/reset/, Reset will disregard the state of any objects already written to the stream. The state is reset to be the same as a new ObjectOutputStream. The current point in the stream is marked as reset so the corresponding ObjectInputStream will be reset at the same point. Objects previously written to the stream will not be refered to as already being in the stream. They will be written to the stream again. @throws	IOException if reset() is invoked while serializing an object.
method,java/io/ObjectOutputStream/enableReplaceObject/boolean, Enable the stream to do replacement of objects in the stream. When enabled, the replaceObject method is called for every object being serialized. If enable is true, and there is a security manager installed, this method first calls the security manager's checkPermission method with a SerializablePermission(enableSubstitution) permission to ensure it's ok to enable the stream to do replacement of objects in the stream. @param	enable boolean parameter to enable replacement of objects @return	the previous setting before this method was invoked @throws	SecurityException if a security manager exists and its 		checkPermission method denies enabling the stream 		to do replacement of objects in the stream. @see SecurityManager#checkPermission @see java.io.SerializablePermission
method,java/io/ObjectOutputStream/writeStreamHeader/, The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream. It writes the magic number and version to the stream. @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/write/int, Writes a byte. This method will block until the byte is actually written. @param	val the byte to be written to the stream @throws	IOException If an I/O error has occurred.
method,java/io/ObjectOutputStream/write/byte[], Writes an array of bytes. This method will block until the bytes are actually written. @param	buf the data to be written @throws	IOException If an I/O error has occurred.
method,java/io/ObjectOutputStream/write/byte[];int;int, Writes a sub array of bytes. @param	buf the data to be written @param	off the start offset in the data @param	len the number of bytes that are written @throws	IOException If an I/O error has occurred.
method,java/io/ObjectOutputStream/flush/, Flushes the stream. This will write any buffered output bytes and flush through to the underlying stream. @throws	IOException If an I/O error has occurred.
method,java/io/ObjectOutputStream/drain/, Drain any buffered data in ObjectOutputStream. Similar to flush but does not propagate the flush to the underlying stream. @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeBoolean/boolean, Writes a boolean. @param	val the boolean to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeByte/int, Writes an 8 bit byte. @param	val the byte value to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeShort/int, Writes a 16 bit short. @param	val the short value to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeChar/int, Writes a 16 bit char. @param	val the char value to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeInt/int, Writes a 32 bit int. @param	val the integer value to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeLong/long, Writes a 64 bit long. @param	val the long value to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeFloat/float, Writes a 32 bit float. @param	val the float value to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeDouble/double, Writes a 64 bit double. @param	val the double value to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeBytes/String, Writes a String as a sequence of bytes. @param	str the String of bytes to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/writeChars/String, Writes a String as a sequence of chars. @param	str the String of chars to be written @throws	IOException if I/O errors occur while writing to the underlying 		stream
method,java/io/ObjectOutputStream/ObjectOutputStream/OutputStream, Creates an ObjectOutputStream that writes to the specified OutputStream. This constructor writes the serialization stream header to the underlying stream; callers may wish to flush the stream immediately to ensure that constructors for receiving ObjectInputStreams will not block when reading the header. If a security manager is installed, this constructor will check for the enableSubclassImplementation SerializablePermission when invoked directly or indirectly by the constructor of a subclass which overrides the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared methods. @param	out output stream to write to @throws	IOException if an I/O error occurs while writing stream header @throws	SecurityException if untrusted subclass illegally overrides 		security-sensitive methods @throws	NullPointerException if out is null @since	1.4 @see	ObjectOutputStream#ObjectOutputStream() @see	ObjectOutputStream#putFields() @see	ObjectInputStream#ObjectInputStream(InputStream)
method,java/io/ObjectOutputStream/ObjectOutputStream/, Provide a way for subclasses that are completely reimplementing ObjectOutputStream to not have to allocate private data just used by this implementation of ObjectOutputStream. If there is a security manager installed, this method first calls the security manager's checkPermission method with a SerializablePermission(enableSubclassImplementation) permission to ensure it's ok to enable subclassing. @throws	SecurityException if a security manager exists and its 		checkPermission method denies enabling 		subclassing. @see SecurityManager#checkPermission @see java.io.SerializablePermission
method,java/io/ObjectOutputStream/PutField/put/String;Object, Put the value of the named Object field into the persistent field. @param name the name of the serializable field @param val the value to assign to the field (which may be null) @throws IllegalArgumentException if name does not match the name of a serializable field for the class whose fields are being written, or if the type of the named field is not a reference type
interface,java/io/ObjectOutput, ObjectOutput extends the DataOutput interface to include writing of objects. DataOutput includes methods for output of primitive types, ObjectOutput extends that interface to include objects, arrays, and Strings. @author unascribed @version 1.18, 03/23/10 @see java.io.InputStream @see java.io.ObjectOutputStream @see java.io.ObjectInputStream @since JDK1.1
method,java/io/ObjectOutput/write/int, Writes a byte. This method will block until the byte is actually written. @param b	the byte @exception IOException If an I/O error has occurred.
method,java/io/ObjectOutput/write/byte[], Writes an array of bytes. This method will block until the bytes are actually written. @param b	the data to be written @exception IOException If an I/O error has occurred.
method,java/io/ObjectOutput/write/byte[];int;int, Writes a sub array of bytes. @param b	the data to be written @param off	the start offset in the data @param len	the number of bytes that are written @exception IOException If an I/O error has occurred.
method,java/io/ObjectOutput/flush/, Flushes the stream. This will write any buffered output bytes. @exception IOException If an I/O error has occurred.
interface,java/io/ObjectInputValidation, Callback interface to allow validation of objects within a graph. Allows an object to be called when a complete graph of objects has been deserialized. @author unascribed @version 1.20, 03/23/10 @see ObjectInputStream @see ObjectInputStream#registerValidation(java.io.ObjectInputValidation, int) @since JDK1.1
method,java/io/ObjectInputStream/readObject/, Read an object from the ObjectInputStream. The class of the object, the signature of the class, and the values of the non-transient and non-static fields of the class and all of its supertypes are read. Default deserializing for a class can be overriden using the writeObject and readObject methods. Objects referenced by this object are read transitively so that a complete equivalent graph of objects is reconstructed by readObject. The root object is completely restored when all of its fields and the objects it references are completely restored. At this point the object validation callbacks are executed in order based on their registered priorities. The callbacks are registered by objects (in the readObject special methods) as they are individually restored. Exceptions are thrown for problems with the InputStream and for classes that should not be deserialized. All exceptions are fatal to the InputStream and leave it in an indeterminate state; it is up to the caller to ignore or recover the stream state. @throws	ClassNotFoundException Class of a serialized object cannot be 		found. @throws	InvalidClassException Something is wrong with a class used by 		serialization. @throws	StreamCorruptedException Control information in the 		stream is inconsistent. @throws	OptionalDataException Primitive data was found in the 		stream instead of objects. @throws	IOException Any of the usual Input/Output related exceptions.
method,java/io/ObjectInputStream/readObjectOverride/, This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor. The subclass is expected to provide an override method with the modifier final. @return	the Object read from the stream. @throws	ClassNotFoundException Class definition of a serialized object 		cannot be found. @throws	OptionalDataException Primitive data was found in the stream 		instead of objects. @throws	IOException if I/O errors occurred while reading from the 		underlying stream @see #ObjectInputStream() @see #readObject() @since 1.2
method,java/io/ObjectInputStream/defaultReadObject/, Read the non-static and non-transient fields of the current class from this stream. This may only be called from the readObject method of the class being deserialized. It will throw the NotActiveException if it is called otherwise. @throws	ClassNotFoundException if the class of a serialized object 		could not be found. @throws	IOException if an I/O error occurs. @throws	NotActiveException if the stream is not currently reading 		objects.
method,java/io/ObjectInputStream/readFields/, Reads the persistent fields from the stream and makes them available by name. @return	the GetField object representing the persistent 		fields of the object being deserialized @throws	ClassNotFoundException if the class of a serialized object 		could not be found. @throws	IOException if an I/O error occurs. @throws	NotActiveException if the stream is not currently reading 		objects. @since 1.2
method,java/io/ObjectInputStream/enableResolveObject/boolean, Enable the stream to allow objects read from the stream to be replaced. When enabled, the resolveObject method is called for every object being deserialized. If enable is true, and there is a security manager installed, this method first calls the security manager's checkPermission method with the SerializablePermission(enableSubstitution) permission to ensure it's ok to enable the stream to allow objects read from the stream to be replaced. @param	enable true for enabling use of resolveObject for 		every object being deserialized @return	the previous setting before this method was invoked @throws	SecurityException if a security manager exists and its 		checkPermission method denies enabling the stream 		to allow objects read from the stream to be replaced. @see SecurityManager#checkPermission @see java.io.SerializablePermission
method,java/io/ObjectInputStream/readStreamHeader/, The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers. It reads and verifies the magic number and version number. @throws	IOException if there are I/O errors while reading from the 		underlying InputStream @throws	StreamCorruptedException if control information in the stream 		is inconsistent
method,java/io/ObjectInputStream/readClassDescriptor/, Read a class descriptor from the serialization stream. This method is called when the ObjectInputStream expects a class descriptor as the next item in the serialization stream. Subclasses of ObjectInputStream may override this method to read in class descriptors that have been written in non-standard formats (by subclasses of ObjectOutputStream which have overridden the writeClassDescriptor method). By default, this method reads class descriptors according to the format defined in the Object Serialization specification. @return	the class descriptor read @throws	IOException If an I/O error has occurred. @throws	ClassNotFoundException If the Class of a serialized object used 		in the class descriptor representation cannot be found @see java.io.ObjectOutputStream#writeClassDescriptor(java.io.ObjectStreamClass) @since 1.3
method,java/io/ObjectInputStream/read/, Reads a byte of data. This method will block if no input is available. @return	the byte read, or -1 if the end of the stream is reached. @throws	IOException If an I/O error has occurred.
method,java/io/ObjectInputStream/read/byte[];int;int, Reads into an array of bytes. This method will block until some input is available. Consider using java.io.DataInputStream.readFully to read exactly 'length' bytes. @param	buf the buffer into which the data is read @param	off the start offset of the data @param	len the maximum number of bytes read @return	the actual number of bytes read, -1 is returned when the end of 		the stream is reached. @throws	IOException If an I/O error has occurred. @see java.io.DataInputStream#readFully(byte[],int,int)
method,java/io/ObjectInputStream/available/, Returns the number of bytes that can be read without blocking. @return	the number of available bytes. @throws	IOException if there are I/O errors while reading from the 		underlying InputStream
method,java/io/ObjectInputStream/readBoolean/, Reads in a boolean. @return	the boolean read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readByte/, Reads an 8 bit byte. @return	the 8 bit byte read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readUnsignedByte/, Reads an unsigned 8 bit byte. @return	the 8 bit byte read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readChar/, Reads a 16 bit char. @return	the 16 bit char read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readShort/, Reads a 16 bit short. @return	the 16 bit short read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readUnsignedShort/, Reads an unsigned 16 bit short. @return	the 16 bit short read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readInt/, Reads a 32 bit int. @return	the 32 bit integer read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readLong/, Reads a 64 bit long. @return	the read 64 bit long. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readFloat/, Reads a 32 bit float. @return	the 32 bit float read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readDouble/, Reads a 64 bit double. @return	the 64 bit double read. @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readFully/byte[], Reads bytes, blocking until all bytes are read. @param	buf the buffer into which the data is read @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/readFully/byte[];int;int, Reads bytes, blocking until all bytes are read. @param	buf the buffer into which the data is read @param	off the start offset of the data @param	len the maximum number of bytes to read @throws	EOFException If end of file is reached. @throws	IOException If other I/O error has occurred.
method,java/io/ObjectInputStream/skipBytes/int, Skips bytes. @param	len the number of bytes to be skipped @return	the actual number of bytes skipped. @throws	IOException If an I/O error has occurred.
method,java/io/ObjectInputStream/readLine/, Reads in a line that has been terminated by a , \r, \r or EOF. @return	a String copy of the line. @throws	IOException if there are I/O errors while reading from the 		underlying InputStream @deprecated This method does not properly convert bytes to characters. 		see DataInputStream for the details and alternatives.
method,java/io/ObjectInputStream/readUTF/, Reads a String in modified UTF-8 format. @return	the String. @throws	IOException if there are I/O errors while reading from the 		underlying InputStream @throws	UTFDataFormatException if read bytes do not represent a valid 		modified UTF-8 encoding of a string
method,java/io/ObjectInputStream/ObjectInputStream/InputStream, Creates an ObjectInputStream that reads from the specified InputStream. A serialization stream header is read from the stream and verified. This constructor will block until the corresponding ObjectOutputStream has written and flushed the header. If a security manager is installed, this constructor will check for the enableSubclassImplementation SerializablePermission when invoked directly or indirectly by the constructor of a subclass which overrides the ObjectInputStream.readFields or ObjectInputStream.readUnshared methods. @param	in input stream to read from @throws	StreamCorruptedException if the stream header is incorrect @throws	IOException if an I/O error occurs while reading stream header @throws	SecurityException if untrusted subclass illegally overrides 		security-sensitive methods @throws	NullPointerException if in is null @see	ObjectInputStream#ObjectInputStream() @see	ObjectInputStream#readFields() @see	ObjectOutputStream#ObjectOutputStream(OutputStream)
method,java/io/ObjectInputStream/ObjectInputStream/, Provide a way for subclasses that are completely reimplementing ObjectInputStream to not have to allocate private data just used by this implementation of ObjectInputStream. If there is a security manager installed, this method first calls the security manager's checkPermission method with the SerializablePermission(enableSubclassImplementation) permission to ensure it's ok to enable subclassing. @throws	SecurityException if a security manager exists and its 		checkPermission method denies enabling 		subclassing. @see SecurityManager#checkPermission @see java.io.SerializablePermission
method,java/io/ObjectInputStream/GetField/defaulted/String, Return true if the named field is defaulted and has no value in this stream. @param name the name of the field @return true, if and only if the named field is defaulted @throws IOException if there are I/O errors while reading from 	 the underlying InputStream @throws IllegalArgumentException if name does not 	 correspond to a serializable field
method,java/io/ObjectInputStream/GetField/get/String;boolean, Get the value of the named boolean field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named boolean field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
method,java/io/ObjectInputStream/GetField/get/String;byte, Get the value of the named byte field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named byte field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
method,java/io/ObjectInputStream/GetField/get/String;char, Get the value of the named char field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named char field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
method,java/io/ObjectInputStream/GetField/get/String;short, Get the value of the named short field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named short field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
method,java/io/ObjectInputStream/GetField/get/String;int, Get the value of the named int field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named int field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
method,java/io/ObjectInputStream/GetField/get/String;long, Get the value of the named long field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named long field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
method,java/io/ObjectInputStream/GetField/get/String;float, Get the value of the named float field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named float field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
method,java/io/ObjectInputStream/GetField/get/String;double, Get the value of the named double field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named double field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
method,java/io/ObjectInputStream/GetField/get/String;Object, Get the value of the named Object field from the persistent field. @param name the name of the field @param val the default value to use if name does not 	 have a value @return the value of the named Object field @throws IOException if there are I/O errors while reading from the 	 underlying InputStream @throws IllegalArgumentException if type of name is 	 not serializable or if the field type is incorrect
interface,java/io/ObjectInput, ObjectInput extends the DataInput interface to include the reading of objects. DataInput includes methods for the input of primitive types, ObjectInput extends that interface to include objects, arrays, and Strings. @author unascribed @version 1.21, 03/23/10 @see java.io.InputStream @see java.io.ObjectOutputStream @see java.io.ObjectInputStream @since JDK1.1
method,java/io/ObjectInput/read/, Reads a byte of data. This method will block if no input is available. @return 	the byte read, or -1 if the end of the		stream is reached. @exception IOException If an I/O error has occurred.
method,java/io/ObjectInput/read/byte[], Reads into an array of bytes. This method will block until some input is available. @param b	the buffer into which the data is read @return the actual number of bytes read, -1 is 		returned when the end of the stream is reached. @exception IOException If an I/O error has occurred.
method,java/io/ObjectInput/read/byte[];int;int, Reads into an array of bytes. This method will block until some input is available. @param b	the buffer into which the data is read @param off the start offset of the data @param len the maximum number of bytes read @return the actual number of bytes read, -1 is 		returned when the end of the stream is reached. @exception IOException If an I/O error has occurred.
method,java/io/ObjectInput/skip/long, Skips n bytes of input. @param n the number of bytes to be skipped @return	the actual number of bytes skipped. @exception IOException If an I/O error has occurred.
method,java/io/ObjectInput/available/, Returns the number of bytes that can be read without blocking. @return the number of available bytes. @exception IOException If an I/O error has occurred.
class,java/io/NotSerializableException, Thrown when an instance is required to have a Serializable interface. The serialization runtime or the class of the instance can throw this exception. The argument should be the name of the class. @author unascribed @version 1.18, 03/23/10 @since JDK1.1
class,java/io/LineNumberReader, A buffered character-input stream that keeps track of line numbers. This class defines methods {@link #setLineNumber(int)} and {@link #getLineNumber()} for setting and getting the current line number respectively. By default, line numbering begins at 0. This number increments at every line terminator as the data is read, and can be changed with a call to setLineNumber(int). Note however, that setLineNumber(int) does not actually change the current position in the stream; it only changes the value that will be returned by getLineNumber(). A line is considered to be terminated by any one of a line feed (''), a carriage return ('\r'), or a carriage return followed immediately by a linefeed. @version 	1.24, 10/03/23 @author	Mark Reinhold @since JDK1.1
method,java/io/LineNumberReader/read/, Read a single character. Line terminators are compressed into single newline ('') characters. Whenever a line terminator is read the current line number is incremented. @return The character read, or -1 if the end of the stream has been reached @throws IOException If an I/O error occurs
method,java/io/LineNumberReader/read/char[];int;int, Read characters into a portion of an array. Whenever a line terminator is read the current line number is incremented. @param cbuf Destination buffer @param off Offset at which to start storing characters @param len Maximum number of characters to read @return The number of bytes read, or -1 if the end of the stream has already been reached @throws IOException If an I/O error occurs
method,java/io/LineNumberReader/readLine/, Read a line of text. Whenever a line terminator is read the current line number is incremented. @return A String containing the contents of the line, not including any line termination characters, or null if the end of the stream has been reached @throws IOException If an I/O error occurs
method,java/io/LineNumberReader/skip/long, Skip characters. @param n The number of characters to skip @return The number of characters actually skipped @throws IOException If an I/O error occurs @throws IllegalArgumentException If n is negative
method,java/io/LineNumberReader/mark/int, Mark the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point, and will also reset the line number appropriately. @param readAheadLimit Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail. @throws IOException If an I/O error occurs
class,java/io/LineNumberInputStream, This class is an input stream filter that provides the added functionality of keeping track of the current line number. A line is a sequence of bytes ending with a carriage return character ('&#92;r'), a newline character ('&#92;n'), or a carriage return character followed immediately by a linefeed character. In all three cases, the line terminating character(s) are returned as a single newline character. The line number begins at 0, and is incremented by 1 when a read returns a newline character. @author Arthur van Hoff @version 1.29, 03/23/10 @see java.io.LineNumberReader @since JDK1.0 @deprecated This class incorrectly assumes that bytes adequately represent characters. As of JDK&nbsp;1.1, the preferred way to operate on character streams is via the new character-stream classes, which include a class for counting line numbers.
method,java/io/LineNumberInputStream/mark/int, Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes. The mark method of LineNumberInputStream remembers the current line number in a private variable, and then calls the mark method of the underlying input stream. @param readlimit the maximum limit of bytes that can be read before the mark position becomes invalid. @see java.io.FilterInputStream#in @see java.io.LineNumberInputStream#reset()
class,java/io/InvalidObjectException, Indicates that one or more deserialized objects failed validation tests. The argument should provide the reason for the failure. @see ObjectInputValidation @since JDK1.1 @author unascribed @version 1.20, 03/23/10 @since JDK1.1
class,java/io/InterruptedIOException, Signals that an I/O operation has been interrupted. An InterruptedIOException is thrown to indicate that an input or output transfer has been terminated because the thread performing it was interrupted. The field {@link #bytesTransferred} indicates how many bytes were successfully transferred before the interruption occurred. @author unascribed @version 1.21, 03/23/10 @see java.io.InputStream @see java.io.OutputStream @see java.lang.Thread#interrupt() @since JDK1.0
method,java/io/InterruptedIOException/InterruptedIOException/, Constructs an InterruptedIOException with null as its error detail message.
field,java/io/InterruptedIOException/bytesTransferred, Reports how many bytes had been transferred as part of the I/O operation before it was interrupted. @serial
class,java/io/InputStreamReader, An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified {@link java.nio.charset.Charset charset}. The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted. Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream. To enable the efficient conversion of bytes to characters, more bytes may be read ahead from the underlying stream than are necessary to satisfy the current read operation. For top efficiency, consider wrapping an InputStreamReader within a BufferedReader. For example: BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); @see BufferedReader @see InputStream @see java.nio.charset.Charset @version 1.48, 10/03/23 @author Mark Reinhold @since JDK1.1
method,java/io/InputStreamReader/getEncoding/, Returns the name of the character encoding being used by this stream. If the encoding has an historical name then that name is returned; otherwise the encoding's canonical name is returned. If this instance was created with the {@link #InputStreamReader(InputStream, String)} constructor then the returned name, being unique for the encoding, may differ from the name passed to the constructor. This method will return null if the stream has been closed. @return The historical name of this encoding, or null if the stream has been closed @see java.nio.charset.Charset @revised 1.4 @spec JSR-51
class,java/io/InputStream, This abstract class is the superclass of all classes representing an input stream of bytes. Applications that need to define a subclass of InputStream must always provide a method that returns the next byte of input. @author Arthur van Hoff @version 1.53, 03/23/10 @see java.io.BufferedInputStream @see java.io.ByteArrayInputStream @see java.io.DataInputStream @see java.io.FilterInputStream @see java.io.InputStream#read() @see java.io.OutputStream @see java.io.PushbackInputStream @since JDK1.0
method,java/io/InputStream/read/byte[], Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If the length of b is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into b. The first byte read is stored into element b[0], the next one into b[1], and so on. The number of bytes read is, at most, equal to the length of b. Let k be the number of bytes actually read; these bytes will be stored in elements b[0] through b[k-1], leaving elements b[k] through b[b.length-1] unaffected. The read(b) method for class InputStream has the same effect as: read(b, 0, b.length) @param b the buffer into which the data is read. @return the total number of bytes read into the buffer, or -1 is there is no more data because the end of the stream has been reached. @exception IOException If the first byte cannot be read for any reason other than the end of the file, if the input stream has been closed, or if some other I/O error occurs. @exception NullPointerException if b is null. @see java.io.InputStream#read(byte[], int, int)
method,java/io/InputStream/reset/, Repositions this stream to the position at the time the mark method was last called on this input stream. The general contract of reset is: If the method markSupported returns true, then: If the method mark has not been called since the stream was created, or the number of bytes read from the stream since mark was last called is larger than the argument to mark at that last call, then an IOException might be thrown. If such an IOException is not thrown, then the stream is reset to a state such that all the bytes read since the most recent call to mark (or since the start of the file, if mark has not been called) will be resupplied to subsequent callers of the read method, followed by any bytes that otherwise would have been the next input data as of the time of the call to reset. If the method markSupported returns false, then: The call to reset may throw an IOException. If an IOException is not thrown, then the stream is reset to a fixed state that depends on the particular type of the input stream and how it was created. The bytes that will be supplied to subsequent callers of the read method depend on the particular type of the input stream. The method reset for class InputStream does nothing except throw an IOException. @exception IOException if this stream has not been marked or if the mark has been invalidated. @see java.io.InputStream#mark(int) @see java.io.IOException
method,java/io/IOException/IOException/, Constructs an {@code IOException} with {@code null} as its error detail message.
method,java/io/IOException/IOException/String;Throwable, Constructs an {@code IOException} with the specified detail message and cause. Note that the detail message associated with {@code cause} is not automatically incorporated into this exception's detail message. @param message The detail message (which is saved for later retrieval by the {@link #getMessage()} method) @param cause The cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.6
class,java/io/IOError, Thrown when a serious I/O error has occurred. @author Xueming Shen @version 1.4 03/23/10 @since 1.6
method,java/io/IOError/IOError/Throwable, Constructs a new instance of IOError with the specified cause. The IOError is created with the detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause). @param cause The cause of this error, or null if the cause is not known
interface,java/io/Flushable, A Flushable is a destination of data that can be flushed. The flush method is invoked to write any buffered output to the underlying stream. @version 1.3 10/03/23 @since 1.5
method,java/io/Flushable/flush/, Flushes this stream by writing any buffered output to the underlying stream. @throws IOException If an I/O error occurs
class,java/io/FilterOutputStream, This class is the superclass of all classes that filter output streams. These streams sit on top of an already existing output stream (the underlying output stream) which it uses as its basic sink of data, but possibly transforming the data along the way or providing additional functionality. The class FilterOutputStream itself simply overrides all methods of OutputStream with versions that pass all requests to the underlying output stream. Subclasses of FilterOutputStream may further override some of these methods as well as provide additional methods and fields. @author Jonathan Payne @version 1.33, 03/23/10 @since JDK1.0
method,java/io/FilterInputStream/skip/long, {@inheritDoc} This method simply performs in.skip(n).
method,java/io/FilterInputStream/mark/int, Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes. The readlimit argument tells this input stream to allow that many bytes to be read before the mark position gets invalidated. This method simply performs in.mark(readlimit). @param readlimit the maximum limit of bytes that can be read before the mark position becomes invalid. @see java.io.FilterInputStream#in @see java.io.FilterInputStream#reset()
method,java/io/FilterInputStream/reset/, Repositions this stream to the position at the time the mark method was last called on this input stream. This method simply performs in.reset(). Stream marks are intended to be used in situations where you need to read ahead a little to see what's in the stream. Often this is most easily done by invoking some general parser. If the stream is of the type handled by the parse, it just chugs along happily. If the stream is not of that type, the parser should toss an exception when it fails. If this happens within readlimit bytes, it allows the outer code to reset the stream and try another parser. @exception IOException if the stream has not been marked or if the mark has been invalidated. @see java.io.FilterInputStream#in @see java.io.FilterInputStream#mark(int)
method,java/io/FilenameFilter/accept/File;String, Tests if a specified file should be included in a file list. @param dir the directory in which the file was found. @param name the name of the file. @return true if and only if the name should be included in the file list; false otherwise.
class,java/io/FileWriter, Convenience class for writing character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are acceptable. To specify these values yourself, construct an OutputStreamWriter on a FileOutputStream. Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one FileWriter (or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open. FileWriter is meant for writing streams of characters. For writing streams of raw bytes, consider using a FileOutputStream. @see OutputStreamWriter @see FileOutputStream @version 	1.20, 10/03/23 @author	Mark Reinhold @since	JDK1.1
class,java/io/FilePermission, This class represents access to a file or directory. A FilePermission consists of a pathname and a set of actions valid for that pathname. Pathname is the pathname of the file or directory granted the specified actions. A pathname that ends in /* (where / is the file separator character, File.separatorChar) indicates all the files and directories contained in that directory. A pathname that ends with /- indicates (recursively) all files and subdirectories contained in that directory. A pathname consisting of the special token &lt;&lt;ALL FILES&gt;&gt; matches any file. Note: A pathname consisting of a single * indicates all the files in the current directory, while a pathname consisting of a single - indicates all the files in the current directory and (recursively) all files and subdirectories contained in the current directory. The actions to be granted are passed to the constructor in a string containing a list of one or more comma-separated keywords. The possible keywords are read, write, execute, and delete. Their meaning is defined as follows: read read permission write write permission execute execute permission. Allows Runtime.exec to be called. Corresponds to SecurityManager.checkExec. delete delete permission. Allows File.delete to be called. Corresponds to SecurityManager.checkDelete. The actions string is converted to lowercase before processing. Be careful when granting FilePermissions. Think about the implications of granting read and especially write access to various files and directories. The &lt;&lt;ALL FILES>> permission with write action is especially dangerous. This grants permission to write to the entire file system. One thing this effectively allows is replacement of the system binary, including the JVM runtime environment. Please note: Code can always read a file from the same directory it's in (or a subdirectory of that directory); it does not need explicit permission to do so. @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @version 1.81 10/03/23 @author Marianne Mueller @author Roland Schemers @since 1.2 @serial exclude
method,java/io/FilePermission/getActions/, Returns the canonical string representation of the actions. That is, this method always returns present actions in the following order: read, write, execute, delete. For example, if this FilePermission object allows both write and read actions, a call to getActions will return the string read,write. @return the canonical string representation of the actions.
method,java/io/FilePermission/newPermissionCollection/, Returns a new PermissionCollection object for storing FilePermission objects. FilePermission objects must be stored in a manner that allows them to be inserted into the collection in any order, but that also enables the PermissionCollection implies method to be implemented in an efficient (and consistent) manner. For example, if you have two FilePermissions: /tmp/-, read /tmp/scratch/foo, write and you are calling the implies method with the FilePermission: /tmp/scratch/foo, read,write, then the implies function must take into account both the /tmp/- and /tmp/scratch/foo permissions, so the effective permission is read,write, and implies returns true. The implies semantics for FilePermissions are handled properly by the PermissionCollection object returned by this newPermissionCollection method. @return a new PermissionCollection object suitable for storing FilePermissions.
method,java/io/FilePermission/FilePermission/String;String, Creates a new FilePermission object with the specified actions. path is the pathname of a file or directory, and actions contains a comma-separated list of the desired actions granted on the file or directory. Possible actions are read, write, execute, and delete. A pathname that ends in /* (where / is the file separator character, File.separatorChar) indicates all the files and directories contained in that directory. A pathname that ends with /- indicates (recursively) all files and subdirectories contained in that directory. The special pathname &lt;&lt;ALL FILES&gt;&gt; matches any file. A pathname consisting of a single * indicates all the files in the current directory, while a pathname consisting of a single - indicates all the files in the current directory and (recursively) all files and subdirectories contained in the current directory. A pathname containing an empty string represents an empty path. @param path the pathname of the file/directory. @param actions the action string. @throws IllegalArgumentException		If actions is null, empty or contains an action		other than the specified possible actions.
class,java/io/FileOutputStream, A file output stream is an output stream for writing data to a File or to a FileDescriptor. Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one FileOutputStream (or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open. FileOutputStream is meant for writing streams of raw bytes such as image data. For writing streams of characters, consider using FileWriter. @author Arthur van Hoff @version 1.59, 03/23/10 @see java.io.File @see java.io.FileDescriptor @see java.io.FileInputStream @since JDK1.0
method,java/io/FileOutputStream/FileOutputStream/String, Creates an output file stream to write to the file with the specified name. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkWrite method is called with name as its argument. If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown. @param name the system-dependent filename @exception FileNotFoundException if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason @exception SecurityException if a security manager exists and its checkWrite method denies write access to the file. @see java.lang.SecurityManager#checkWrite(java.lang.String)
method,java/io/FileOutputStream/FileOutputStream/String;boolean, Creates an output file stream to write to the file with the specified name. If the second argument is true, then bytes will be written to the end of the file rather than the beginning. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkWrite method is called with name as its argument. If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown. @param name the system-dependent file name @param append if true, then bytes will be written to the end of the file rather than the beginning @exception FileNotFoundException if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason. @exception SecurityException if a security manager exists and its checkWrite method denies write access to the file. @see java.lang.SecurityManager#checkWrite(java.lang.String) @since JDK1.1
method,java/io/FileOutputStream/FileOutputStream/File, Creates a file output stream to write to the file represented by the specified File object. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkWrite method is called with the path represented by the file argument as its argument. If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown. @param file the file to be opened for writing. @exception FileNotFoundException if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason @exception SecurityException if a security manager exists and its checkWrite method denies write access to the file. @see java.io.File#getPath() @see java.lang.SecurityException @see java.lang.SecurityManager#checkWrite(java.lang.String)
method,java/io/FileOutputStream/FileOutputStream/File;boolean, Creates a file output stream to write to the file represented by the specified File object. If the second argument is true, then bytes will be written to the end of the file rather than the beginning. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkWrite method is called with the path represented by the file argument as its argument. If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown. @param file the file to be opened for writing. @param append if true, then bytes will be written to the end of the file rather than the beginning @exception FileNotFoundException if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason @exception SecurityException if a security manager exists and its checkWrite method denies write access to the file. @see java.io.File#getPath() @see java.lang.SecurityException @see java.lang.SecurityManager#checkWrite(java.lang.String) @since 1.4
method,java/io/FileOutputStream/FileOutputStream/FileDescriptor, Creates an output file stream to write to the specified file descriptor, which represents an existing connection to an actual file in the file system. First, if there is a security manager, its checkWrite method is called with the file descriptor fdObj argument as its argument. @param fdObj the file descriptor to be opened for writing @exception SecurityException if a security manager exists and its checkWrite method denies write access to the file descriptor @see java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)
class,java/io/FileNotFoundException, Signals that an attempt to open the file denoted by a specified pathname has failed. This exception will be thrown by the {@link FileInputStream}, {@link FileOutputStream}, and {@link RandomAccessFile} constructors when a file with the specified pathname does not exist. It will also be thrown by these constructors if the file does exist but for some reason is inaccessible, for example when an attempt is made to open a read-only file for writing. @author unascribed @version 1.25, 03/23/10 @since JDK1.0
method,java/io/FileNotFoundException/FileNotFoundException/, Constructs a FileNotFoundException with null as its error detail message.
method,java/io/FileInputStream/skip/long, Skips over and discards n bytes of data from the input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. If n is negative, an IOException is thrown, even though the skip method of the {@link InputStream} superclass does nothing in this case. The actual number of bytes skipped is returned. This method may skip more bytes than are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file. @param n the number of bytes to be skipped. @return the actual number of bytes skipped. @exception IOException if n is negative, if the stream does not support seek, or if an I/O error occurs.
method,java/io/FileInputStream/available/, Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes. In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks. @return an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking. @exception IOException if this file input stream has been closed by calling {@code close} or an I/O error occurs.
method,java/io/FileInputStream/FileInputStream/String, Creates a FileInputStream by opening a connection to an actual file, the file named by the path name name in the file system. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkRead method is called with the name argument as its argument. If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a FileNotFoundException is thrown. @param name the system-dependent file name. @exception FileNotFoundException if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading. @exception SecurityException if a security manager exists and its checkRead method denies read access to the file. @see java.lang.SecurityManager#checkRead(java.lang.String)
method,java/io/FileInputStream/FileInputStream/File, Creates a FileInputStream by opening a connection to an actual file, the file named by the File object file in the file system. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkRead method is called with the path represented by the file argument as its argument. If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a FileNotFoundException is thrown. @param file the file to be opened for reading. @exception FileNotFoundException if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading. @exception SecurityException if a security manager exists and its checkRead method denies read access to the file. @see java.io.File#getPath() @see java.lang.SecurityManager#checkRead(java.lang.String)
method,java/io/FileInputStream/FileInputStream/FileDescriptor, Creates a FileInputStream by using the file descriptor fdObj, which represents an existing connection to an actual file in the file system. If there is a security manager, its checkRead method is called with the file descriptor fdObj as its argument to see if it's ok to read the file descriptor. If read access is denied to the file descriptor a SecurityException is thrown. If fdObj is null then a NullPointerException is thrown. @param fdObj the file descriptor to be opened for reading. @throws SecurityException if a security manager exists and its checkRead method denies read access to the file descriptor. @see SecurityManager#checkRead(java.io.FileDescriptor)
interface,java/io/FileFilter, A filter for abstract pathnames. Instances of this interface may be passed to the {@link File#listFiles(java.io.FileFilter) listFiles(FileFilter)} method of the {@link java.io.File} class. @since 1.2
method,java/io/FileFilter/accept/File, Tests whether or not the specified abstract pathname should be included in a pathname list. @param pathname The abstract pathname to be tested @return true if and only if pathname should be included
class,java/io/File, An abstract representation of file and directory pathnames. User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames. An abstract pathname has two components: An optional system-dependent prefix string, such as a disk-drive specifier, /&nbsp;for the UNIX root directory, or \\\\&nbsp;for a Microsoft Windows UNC pathname, and A sequence of zero or more string names. The first name in an abstract pathname may be a directory name or, in the case of Microsoft Windows UNC pathnames, a hostname. Each subsequent name in an abstract pathname denotes a directory; the last name may denote either a directory or a file. The empty abstract pathname has no prefix and an empty name sequence. The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is separated from the next by a single copy of the default separator character. The default name-separator character is defined by the system property file.separator, and is made available in the public static fields {@link #separator} and {@link #separatorChar} of this class. When a pathname string is converted into an abstract pathname, the names within it may be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system. A pathname, whether abstract or in string form, may be either absolute or relative. An absolute pathname is complete in that no other information is required in order to locate the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the java.io package always resolve relative pathnames against the current user directory. This directory is named by the system property user.dir, and is typically the directory in which the Java virtual machine was invoked. The parent of an abstract pathname may be obtained by invoking the {@link #getParent} method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any File object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname /usr is an ancestor of the directory denoted by the pathname /usr/local/bin. The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows: For UNIX platforms, the prefix of an absolute pathname is always /. Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix / and an empty name sequence. For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by : and possibly followed by \\ if the pathname is absolute. The prefix of a UNC pathname is \\\\; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix. Instances of this class may or may not denote an actual file-system object such as a file or a directory. If it does denote such an object then that object resides in a partition. A partition is an operating system-specific portion of storage for a file system. A single storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may contain multiple partitions. The object, if any, will reside on the partition named by some ancestor of the absolute form of this pathname. A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as access permissions. The file system may have multiple sets of access permissions on a single object. For example, one set may apply to the object's owner, and another may apply to all other users. The access permissions on an object may cause some methods in this class to fail. Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change. @version 1.144, 03/23/10 @author unascribed @since JDK1.0
method,java/io/File/canRead/, Tests whether the application can read the file denoted by this abstract pathname. @return true if and only if the file specified by this abstract pathname exists and can be read by the application; false otherwise @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the file
method,java/io/File/exists/, Tests whether the file or directory denoted by this abstract pathname exists. @return true if and only if the file or directory denoted by this abstract pathname exists; false otherwise @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the file or directory
method,java/io/File/isDirectory/, Tests whether the file denoted by this abstract pathname is a directory. @return true if and only if the file denoted by this abstract pathname exists and is a directory; false otherwise @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the file
method,java/io/File/isFile/, Tests whether the file denoted by this abstract pathname is a normal file. A file is normal if it is not a directory and, in addition, satisfies other system-dependent criteria. Any non-directory file created by a Java application is guaranteed to be a normal file. @return true if and only if the file denoted by this abstract pathname exists and is a normal file; false otherwise @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the file
method,java/io/File/isHidden/, Tests whether the file named by this abstract pathname is a hidden file. The exact definition of hidden is system-dependent. On UNIX systems, a file is considered to be hidden if its name begins with a period character ('.'). On Microsoft Windows systems, a file is considered to be hidden if it has been marked as such in the filesystem. @return true if and only if the file denoted by this abstract pathname is hidden according to the conventions of the underlying platform @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the file @since 1.2
method,java/io/File/lastModified/, Returns the time that the file denoted by this abstract pathname was last modified. @return A long value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or 0L if the file does not exist or if an I/O error occurs @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the file
method,java/io/File/length/, Returns the length of the file denoted by this abstract pathname. The return value is unspecified if this pathname denotes a directory. @return The length, in bytes, of the file denoted by this abstract pathname, or 0L if the file does not exist. Some operating systems may return 0L for pathnames denoting system-dependent entities such as devices or pipes. @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the file
method,java/io/File/list/, Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of strings is returned, one for each file or directory in the directory. Names denoting the directory itself and the directory's parent directory are not included in the result. Each string is a file name rather than a complete path. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order. @return An array of strings naming the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs. @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the directory
method,java/io/File/list/FilenameFilter, Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the {@link #list()} method, except that the strings in the returned array must satisfy the filter. If the given filter is null then all names are accepted. Otherwise, a name satisfies the filter if and only if the value true results when the {@link FilenameFilter#accept} method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes. @param filter A filename filter @return An array of strings naming the files and directories in the directory denoted by this abstract pathname that were accepted by the given filter. The array will be empty if the directory is empty or if no names were accepted by the filter. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs. @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the directory
method,java/io/File/listFiles/, Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of File objects is returned, one for each file or directory in the directory. Pathnames denoting the directory itself and the directory's parent directory are not included in the result. Each resulting abstract pathname is constructed from this abstract pathname using the {@link #File(java.io.File, java.lang.String) File(File,&nbsp;String)} constructor. Therefore if this pathname is absolute then each resulting pathname is absolute; if this pathname is relative then each resulting pathname will be relative to the same directory. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order. @return An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs. @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the directory @since 1.2
method,java/io/File/listFiles/FilenameFilter, Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the {@link #listFiles()} method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the {@link FilenameFilter#accept} method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes. @param filter A filename filter @return An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs. @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the directory @since 1.2
method,java/io/File/listFiles/FileFilter, Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the {@link #listFiles()} method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the {@link FileFilter#accept(java.io.File)} method of the filter is invoked on the pathname. @param filter A file filter @return An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs. @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to the directory @since 1.2
method,java/io/File/mkdir/, Creates the directory named by this abstract pathname. @return true if and only if the directory was created; false otherwise @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkWrite(java.lang.String)} method does not permit the named directory to be created
method,java/io/File/mkdirs/, Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. Note that if this operation fails it may have succeeded in creating some of the necessary parent directories. @return true if and only if the directory was created, along with all necessary parent directories; false otherwise @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method does not permit verification of the existence of the named directory and all necessary parent directories; or if the {@link java.lang.SecurityManager#checkWrite(java.lang.String)} method does not permit the named directory and all necessary parent directories to be created
method,java/io/File/setLastModified/long, Sets the last-modified time of the file or directory named by this abstract pathname. All platforms support file-modification times to the nearest second, but some provide more precision. The argument will be truncated to fit the supported precision. If the operation succeeds and no intervening operations on the file take place, then the next invocation of the {@link #lastModified} method will return the (possibly truncated) time argument that was passed to this method. @param time The new last-modified time, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970) @return true if and only if the operation succeeded; false otherwise @throws IllegalArgumentException If the argument is negative @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkWrite(java.lang.String)} method denies write access to the named file @since 1.2
method,java/io/File/setWritable/boolean;boolean, Sets the owner's or everybody's write permission for this abstract pathname. @param writable If true, sets the access permission to allow write operations; if false to disallow write operations @param ownerOnly If true, the write permission applies only to the owner's write permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner's write permission from that of others, then the permission will apply to everybody, regardless of this value. @return true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkWrite(java.lang.String)} method denies write access to the named file @since 1.6
method,java/io/File/canExecute/, Tests whether the application can execute the file denoted by this abstract pathname. @return true if and only if the abstract pathname exists and the application is allowed to execute the file @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkExec(java.lang.String)} method denies execute access to the file @since 1.6
method,java/io/File/listRoots/, List the available filesystem roots. A particular Java platform may support zero or more hierarchically-organized file systems. Each file system has a root directory from which all other files in that file system can be reached. Windows platforms, for example, have a root directory for each active drive; UNIX platforms have a single root directory, namely /. The set of available filesystem roots is affected by various system-level operations such as the insertion or ejection of removable media and the disconnecting or unmounting of physical or virtual disk drives. This method returns an array of File objects that denote the root directories of the available filesystem roots. It is guaranteed that the canonical pathname of any file physically present on the local machine will begin with one of the roots returned by this method. The canonical pathname of a file that resides on some other machine and is accessed via a remote-filesystem protocol such as SMB or NFS may or may not begin with one of the roots returned by this method. If the pathname of a remote file is syntactically indistinguishable from the pathname of a local file then it will begin with one of the roots returned by this method. Thus, for example, File objects denoting the root directories of the mapped network drives of a Windows platform will be returned by this method, while File objects containing UNC pathnames will not be returned by this method. Unlike most methods in this class, this method does not throw security exceptions. If a security manager exists and its {@link java.lang.SecurityManager#checkRead(java.lang.String)} method denies read access to a particular root directory, then that directory will not appear in the result. @return An array of File objects denoting the available filesystem roots, or null if the set of roots could not be determined. The array will be empty if there are no filesystem roots. @since 1.2
method,java/io/File/getFreeSpace/, Returns the number of unallocated bytes in the partition named by this abstract path name. The returned number of unallocated bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of unallocated bytes is most likely to be accurate immediately after this call. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine. This method makes no guarantee that write operations to this file system will succeed. @return The number of unallocated bytes on the partition 0L if the abstract pathname does not name a partition. This value will be less than or equal to the total file system size returned by {@link #getTotalSpace}. @throws SecurityException If a security manager has been installed and it denies {@link RuntimePermission}(getFileSystemAttributes) or its {@link SecurityManager#checkRead(String)} method denies read access to the file named by this abstract pathname @since 1.6
method,java/io/File/equals/Object, Tests this abstract pathname for equality with the given object. Returns true if and only if the argument is not null and is an abstract pathname that denotes the same file or directory as this abstract pathname. Whether or not two abstract pathnames are equal depends upon the underlying system. On UNIX systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows systems it is not. @param obj The object to be compared with this abstract pathname @return true if and only if the objects are the same; false otherwise
method,java/io/File/File/String;String, Creates a new File instance from a parent pathname string and a child pathname string. If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. Otherwise the parent pathname string is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty string then the new File instance is created by converting child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent. @param parent The parent pathname string @param child The child pathname string @throws NullPointerException If child is null
method,java/io/File/File/File;String, Creates a new File instance from a parent abstract pathname and a child pathname string. If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. Otherwise the parent abstract pathname is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty abstract pathname then the new File instance is created by converting child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent. @param parent The parent abstract pathname @param child The child pathname string @throws NullPointerException If child is null
method,java/io/File/File/URI, Creates a new File instance by converting the given file: URI into an abstract pathname. The exact form of a file: URI is system-dependent, hence the transformation performed by this constructor is also system-dependent. For a given abstract pathname f it is guaranteed that new File(&nbsp;f.{@link #toURI() toURI}()).equals(&nbsp;f.{@link #getAbsoluteFile() getAbsoluteFile}()) so long as the original abstract pathname, the URI, and the new abstract pathname are all created in (possibly different invocations of) the same Java virtual machine. This relationship typically does not hold, however, when a file: URI that is created in a virtual machine on one operating system is converted into an abstract pathname in a virtual machine on a different operating system. @param uri An absolute, hierarchical URI with a scheme equal to file, a non-empty path component, and undefined authority, query, and fragment components @throws NullPointerException If uri is null @throws IllegalArgumentException If the preconditions on the parameter do not hold @see #toURI() @see java.net.URI @since 1.4
class,java/io/EOFException, Signals that an end of file or end of stream has been reached unexpectedly during input. This exception is mainly used by data input streams to signal end of stream. Note that many other input operations return a special value on end of stream rather than throwing an exception. @author Frank Yellin @version 1.15, 03/23/10 @see java.io.DataInputStream @see java.io.IOException @since JDK1.0
method,java/io/EOFException/EOFException/, Constructs an EOFException with null as its error detail message.
method,java/io/EOFException/EOFException/String, Constructs an EOFException with the specified detail message. The string s may later be retrieved by the {@link java.lang.Throwable#getMessage} method of class java.lang.Throwable. @param s the detail message.
class,java/io/DataOutputStream, A data output stream lets an application write primitive Java data types to an output stream in a portable way. An application can then use a data input stream to read the data back in. @author unascribed @version 1.45, 03/23/10 @see java.io.DataInputStream @since JDK1.0
method,java/io/DataOutput/write/int, Writes to the output stream the eight low-order bits of the argument b. The 24 high-order bits of b are ignored. @param b the byte to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/write/byte[], Writes to the output stream all the bytes in array b. If b is null, a NullPointerException is thrown. If b.length is zero, then no bytes are written. Otherwise, the byte b[0] is written first, then b[1], and so on; the last byte written is b[b.length-1]. @param b the data. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/write/byte[];int;int, Writes len bytes from array b, in order, to the output stream. If b is null, a NullPointerException is thrown. If off is negative, or len is negative, or off+len is greater than the length of the array b, then an IndexOutOfBoundsException is thrown. If len is zero, then no bytes are written. Otherwise, the byte b[off] is written first, then b[off+1], and so on; the last byte written is b[off+len-1]. @param b the data. @param off the start offset in the data. @param len the number of bytes to write. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeBoolean/boolean, Writes a boolean value to this output stream. If the argument v is true, the value (byte)1 is written; if v is false, the value (byte)0 is written. The byte written by this method may be read by the readBoolean method of interface DataInput, which will then return a boolean equal to v. @param v the boolean to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeByte/int, Writes to the output stream the eight low- order bits of the argument v. The 24 high-order bits of v are ignored. (This means that writeByte does exactly the same thing as write for an integer argument.) The byte written by this method may be read by the readByte method of interface DataInput, which will then return a byte equal to (byte)v. @param v the byte value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeShort/int, Writes two bytes to the output stream to represent the value of the argument. The byte values to be written, in the order shown, are: (byte)(0xff &amp; (v &gt;&gt; 8)) (byte)(0xff &amp; v) The bytes written by this method may be read by the readShort method of interface DataInput , which will then return a short equal to (short)v. @param v the short value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeChar/int, Writes a char value, which is comprised of two bytes, to the output stream. The byte values to be written, in the order shown, are: (byte)(0xff &amp; (v &gt;&gt; 8)) (byte)(0xff &amp; v) The bytes written by this method may be read by the readChar method of interface DataInput , which will then return a char equal to (char)v. @param v the char value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeInt/int, Writes an int value, which is comprised of four bytes, to the output stream. The byte values to be written, in the order shown, are: (byte)(0xff &amp; (v &gt;&gt; 24)) (byte)(0xff &amp; (v &gt;&gt; 16)) (byte)(0xff &amp; (v &gt;&gt; &#32; &#32;8)) (byte)(0xff &amp; v) The bytes written by this method may be read by the readInt method of interface DataInput , which will then return an int equal to v. @param v the int value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeLong/long, Writes a long value, which is comprised of eight bytes, to the output stream. The byte values to be written, in the order shown, are: (byte)(0xff &amp; (v &gt;&gt; 56)) (byte)(0xff &amp; (v &gt;&gt; 48)) (byte)(0xff &amp; (v &gt;&gt; 40)) (byte)(0xff &amp; (v &gt;&gt; 32)) (byte)(0xff &amp; (v &gt;&gt; 24)) (byte)(0xff &amp; (v &gt;&gt; 16)) (byte)(0xff &amp; (v &gt;&gt; 8)) (byte)(0xff &amp; v) The bytes written by this method may be read by the readLong method of interface DataInput , which will then return a long equal to v. @param v the long value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeFloat/float, Writes a float value, which is comprised of four bytes, to the output stream. It does this as if it first converts this float value to an int in exactly the manner of the Float.floatToIntBits method and then writes the int value in exactly the manner of the writeInt method. The bytes written by this method may be read by the readFloat method of interface DataInput, which will then return a float equal to v. @param v the float value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeDouble/double, Writes a double value, which is comprised of eight bytes, to the output stream. It does this as if it first converts this double value to a long in exactly the manner of the Double.doubleToLongBits method and then writes the long value in exactly the manner of the writeLong method. The bytes written by this method may be read by the readDouble method of interface DataInput, which will then return a double equal to v. @param v the double value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeBytes/String, Writes a string to the output stream. For every character in the string s, taken in order, one byte is written to the output stream. If s is null, a NullPointerException is thrown. If s.length is zero, then no bytes are written. Otherwise, the character s[0] is written first, then s[1], and so on; the last character written is s[s.length-1]. For each character, one byte is written, the low-order byte, in exactly the manner of the writeByte method . The high-order eight bits of each character in the string are ignored. @param s the string of bytes to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeChars/String, Writes every character in the string s, to the output stream, in order, two bytes per character. If s is null, a NullPointerException is thrown. If s.length is zero, then no characters are written. Otherwise, the character s[0] is written first, then s[1], and so on; the last character written is s[s.length-1]. For each character, two bytes are actually written, high-order byte first, in exactly the manner of the writeChar method. @param s the string value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataOutput/writeUTF/String, Writes two bytes of length information to the output stream, followed by the modified UTF-8 representation of every character in the string s. If s is null, a NullPointerException is thrown. Each character in the string s is converted to a group of one, two, or three bytes, depending on the value of the character. If a character c is in the range &#92;u0001 through &#92;u007f, it is represented by one byte: (byte)c If a character c is &#92;u0000 or is in the range &#92;u0080 through &#92;u07ff, then it is represented by two bytes, to be written in the order shown: (byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6))) (byte)(0x80 | (0x3f &amp; c)) If a character c is in the range &#92;u0800 through uffff, then it is represented by three bytes, to be written in the order shown: (byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12))) (byte)(0x80 | (0x3f &amp; (c &gt;&gt; 6))) (byte)(0x80 | (0x3f &amp; c)) First, the total number of bytes needed to represent all the characters of s is calculated. If this number is larger than 65535, then a UTFDataFormatException is thrown. Otherwise, this length is written to the output stream in exactly the manner of the writeShort method; after this, the one-, two-, or three-byte representation of each character in the string s is written. The bytes written by this method may be read by the readUTF method of interface DataInput , which will then return a String equal to s. @param s the string value to be written. @throws IOException if an I/O error occurs.
method,java/io/DataInputStream/read/byte[], Reads some number of bytes from the contained input stream and stores them into the buffer array b. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If b is null, a NullPointerException is thrown. If the length of b is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b. The first byte read is stored into element b[0], the next one into b[1], and so on. The number of bytes read is, at most, equal to the length of b. Let k be the number of bytes actually read; these bytes will be stored in elements b[0] through b[k-1], leaving elements b[k] through b[b.length-1] unaffected. The read(b) method has the same effect as: read(b, 0, b.length) @param b the buffer into which the data is read. @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached. @exception IOException if the first byte cannot be read for any reason other than end of file, the stream has been closed and the underlying input stream does not support reading after close, or another I/O error occurs. @see java.io.FilterInputStream#in @see java.io.InputStream#read(byte[], int, int)
method,java/io/DataInputStream/readFully/byte[], See the general contract of the readFully method of DataInput. Bytes for this operation are read from the contained input stream. @param b the buffer into which the data is read. @exception EOFException if this input stream reaches the end before reading all the bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readFully/byte[];int;int, See the general contract of the readFully method of DataInput. Bytes for this operation are read from the contained input stream. @param b the buffer into which the data is read. @param off the start offset of the data. @param len the number of bytes to read. @exception EOFException if this input stream reaches the end before reading all the bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/skipBytes/int, See the general contract of the skipBytes method of DataInput. Bytes for this operation are read from the contained input stream. @param n the number of bytes to be skipped. @return the actual number of bytes skipped. @exception IOException if the contained input stream does not support		 seek, or the stream has been closed and		 the contained input stream does not support 		 reading after close, or another I/O error occurs.
method,java/io/DataInputStream/readBoolean/, See the general contract of the readBoolean method of DataInput. Bytes for this operation are read from the contained input stream. @return the boolean value read. @exception EOFException if this input stream has reached the end. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readByte/, See the general contract of the readByte method of DataInput. Bytes for this operation are read from the contained input stream. @return the next byte of this input stream as a signed 8-bit byte. @exception EOFException if this input stream has reached the end. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readUnsignedByte/, See the general contract of the readUnsignedByte method of DataInput. Bytes for this operation are read from the contained input stream. @return the next byte of this input stream, interpreted as an unsigned 8-bit number. @exception EOFException if this input stream has reached the end. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readShort/, See the general contract of the readShort method of DataInput. Bytes for this operation are read from the contained input stream. @return the next two bytes of this input stream, interpreted as a signed 16-bit number. @exception EOFException if this input stream reaches the end before reading two bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readUnsignedShort/, See the general contract of the readUnsignedShort method of DataInput. Bytes for this operation are read from the contained input stream. @return the next two bytes of this input stream, interpreted as an unsigned 16-bit integer. @exception EOFException if this input stream reaches the end before reading two bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readChar/, See the general contract of the readChar method of DataInput. Bytes for this operation are read from the contained input stream. @return the next two bytes of this input stream, interpreted as a		 char. @exception EOFException if this input stream reaches the end before reading two bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readInt/, See the general contract of the readInt method of DataInput. Bytes for this operation are read from the contained input stream. @return the next four bytes of this input stream, interpreted as an int. @exception EOFException if this input stream reaches the end before reading four bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readLong/, See the general contract of the readLong method of DataInput. Bytes for this operation are read from the contained input stream. @return the next eight bytes of this input stream, interpreted as a long. @exception EOFException if this input stream reaches the end before reading eight bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/DataInputStream/readFloat/, See the general contract of the readFloat method of DataInput. Bytes for this operation are read from the contained input stream. @return the next four bytes of this input stream, interpreted as a float. @exception EOFException if this input stream reaches the end before reading four bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.DataInputStream#readInt() @see java.lang.Float#intBitsToFloat(int)
method,java/io/DataInputStream/readDouble/, See the general contract of the readDouble method of DataInput. Bytes for this operation are read from the contained input stream. @return the next eight bytes of this input stream, interpreted as a double. @exception EOFException if this input stream reaches the end before reading eight bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @see java.io.DataInputStream#readLong() @see java.lang.Double#longBitsToDouble(long)
method,java/io/DataInputStream/readUTF/, See the general contract of the readUTF method of DataInput. Bytes for this operation are read from the contained input stream. @return a Unicode string. @exception EOFException if this input stream reaches the end before reading all the bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @exception UTFDataFormatException if the bytes do not represent a valid modified UTF-8 encoding of a string. @see java.io.DataInputStream#readUTF(java.io.DataInput)
method,java/io/DataInputStream/readUTF/DataInput, Reads from the stream in a representation of a Unicode character string encoded in modified UTF-8 format; this string of characters is then returned as a String. The details of the modified UTF-8 representation are exactly the same as for the readUTF method of DataInput. @param in a data input stream. @return a Unicode string. @exception EOFException if the input stream reaches the end before all the bytes. @exception IOException the stream has been closed and the contained 		 input stream does not support reading after close, or 		 another I/O error occurs. @exception UTFDataFormatException if the bytes do not represent a valid modified UTF-8 encoding of a Unicode string. @see java.io.DataInputStream#readUnsignedShort()
interface,java/io/DataInput, The DataInput interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types. There is also a facility for reconstructing a String from data in modified UTF-8 format. It is generally true of all the reading routines in this interface that if end of file is reached before the desired number of bytes has been read, an EOFException (which is a kind of IOException) is thrown. If any byte cannot be read for any reason other than end of file, an IOException other than EOFException is thrown. In particular, an IOException may be thrown if the input stream has been closed. Modified UTF-8 Implementations of the DataInput and DataOutput interfaces represent Unicode strings in a format that is a slight modification of UTF-8. (For information regarding the standard UTF-8 format, see section 3.9 Unicode Encoding Forms of The Unicode Standard, Version 4.0). Note that in the following tables, the most significant bit appears in the far left-hand column. All characters in the range '&#92;u0001' to '&#92;u007F' are represented by a single byte: Bit Values Byte 1 0 bits 6-0 The null character '&#92;u0000' and characters in the range '&#92;u0080' to '&#92;u07FF' are represented by a pair of bytes: Bit Values Byte 1 1 1 0 bits 10-6 Byte 2 1 0 bits 5-0 char values in the range '&#92;u0800' to '&#92;uFFFF' are represented by three bytes: Bit Values Byte 1 1 1 1 0 bits 15-12 Byte 2 1 0 bits 11-6 Byte 3 1 0 bits 5-0 The differences between this format and the standard UTF-8 format are the following: The null byte '&#92;u0000' is encoded in 2-byte format rather than 1-byte, so that the encoded strings never have embedded nulls. Only the 1-byte, 2-byte, and 3-byte formats are used. Supplementary characters are represented in the form of surrogate pairs. @author Frank Yellin @version 1.26, 03/23/10 @see java.io.DataInputStream @see java.io.DataOutput @since JDK1.0
method,java/io/Console/reader/, Retrieves the unique {@link java.io.Reader Reader} object associated with this console. This method is intended to be used by sophisticated applications, for example, a {@link java.util.Scanner} object which utilizes the rich parsing/scanning functionality provided by the Scanner: Console con = System.console(); if (con != null) { Scanner sc = new Scanner(con.reader()); ... } For simple applications requiring only line-oriented reading, use {@link #readLine}. The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) }, {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)} on the returned object will not read in characters beyond the line bound for each invocation, even if the destination buffer has space for more characters. A line bound is considered to be any one of a line feed (''), a carriage return ('\r'), a carriage return followed immediately by a linefeed, or an end of stream. @return The reader associated with this console
method,java/io/Console/readLine/, Reads a single line of text from the console. @throws IOError If an I/O error occurs. @return A string containing the line read from the console, not including any line-termination characters, or null if an end of stream has been reached.
method,java/io/Console/readPassword/, Reads a password or passphrase from the console with echoing disabled @throws IOError If an I/O error occurs. @return A character array containing the password or passphrase read from the console, not including any line-termination characters, or null if an end of stream has been reached.
interface,java/io/Closeable, A Closeable is a source or destination of data that can be closed. The close method is invoked to release resources that the object is holding (such as open files). @version 1.6 10/03/23 @since 1.5
method,java/io/Closeable/close/, Closes this stream and releases any system resources associated with it. If the stream is already closed then invoking this method has no effect. @throws IOException if an I/O error occurs
class,java/io/CharArrayWriter, This class implements a character buffer that can be used as an Writer. The buffer automatically grows when data is written to the stream. The data can be retrieved using toCharArray() and toString(). Note: Invoking close() on this class has no effect, and methods of this class can be called after the stream has closed without generating an IOException. @author	Herb Jellinek @version 	1.26, 03/23/10 @since JDK1.1
method,java/io/CharArrayWriter/writeTo/Writer, Writes the contents of the buffer to another character stream. @param out	the output stream to write to @throws IOException If an I/O error occurs.
method,java/io/CharArrayWriter/append/CharSequence, Appends the specified character sequence to this writer. An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation out.write(csq.toString()) Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit. @param csq The character sequence to append. If csq is null, then the four characters null are appended to this writer. @return This writer @since 1.5
method,java/io/CharArrayWriter/append/CharSequence;int;int, Appends a subsequence of the specified character sequence to this writer. An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation out.write(csq.subSequence(start, end).toString()) @param csq The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters null. @param start The index of the first character in the subsequence @param end The index of the character following the last character in the subsequence @return This writer @throws IndexOutOfBoundsException If start or end are negative, start is greater than end, or end is greater than csq.length() @since 1.5
method,java/io/CharArrayWriter/append/char, Appends the specified character to this writer. An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation out.write(c) @param c The 16-bit character to append @return This writer @since 1.5
method,java/io/CharArrayWriter/close/, Close the stream. This method does not release the buffer, since its contents might still be required. Note: Invoking this method in this class will have no effect.
method,java/io/CharArrayReader/skip/long, Skips characters. Returns the number of characters that were skipped. The n parameter may be negative, even though the skip method of the {@link Reader} superclass throws an exception in this case. If n is negative, then this method does nothing and returns 0. @param n The number of characters to skip @return The number of characters actually skipped @exception IOException If the stream is closed, or an I/O error occurs
method,java/io/CharArrayReader/close/, Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.
method,java/io/ByteArrayOutputStream/ByteArrayOutputStream/, Creates a new byte array output stream. The buffer capacity is initially 32 bytes, though its size increases if necessary. 
method,java/io/ByteArrayInputStream/mark/int, Set the current marked position in the stream. ByteArrayInputStream objects are marked at position zero by default when constructed. They may be marked at another position within the buffer by this method. If no mark has been set, then the value of the mark is the offset passed to the constructor (or 0 if the offset was not supplied). Note: The readAheadLimit for this class has no meaning. @since JDK1.1
field,java/io/ByteArrayInputStream/buf, An array of bytes that was provided by the creator of the stream. Elements buf[0] through buf[count-1] are the only bytes that can ever be read from the stream; element buf[pos] is the next byte to be read.
field,java/io/ByteArrayInputStream/mark, The currently marked position in the stream. ByteArrayInputStream objects are marked at position zero by default when constructed. They may be marked at another position within the buffer by the mark() method. The current buffer position is set to this point by the reset() method. If no mark has been set, then the value of mark is the offset passed to the constructor (or 0 if the offset was not supplied). @since JDK1.1
class,java/io/BufferedReader, Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines. The buffer size may be specified, or the default size may be used. The default is large enough for most purposes. In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream. It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders. For example, BufferedReader in = new BufferedReader(new FileReader(foo.in)); will buffer the input from the specified file. Without buffering, each invocation of read() or readLine() could cause bytes to be read from the file, converted into characters, and then returned, which can be very inefficient. Programs that use DataInputStreams for textual input can be localized by replacing each DataInputStream with an appropriate BufferedReader. @see FileReader @see InputStreamReader @version 	1.38, 10/03/23 @author	Mark Reinhold @since	JDK1.1
method,java/io/BufferedReader/reset/, Resets the stream to the most recent mark. @exception IOException If the stream has never been marked, or if the mark has been invalidated
class,java/io/BufferedOutputStream, The class implements a buffered output stream. By setting up such an output stream, an application can write bytes to the underlying output stream without necessarily causing a call to the underlying system for each byte written. @author Arthur van Hoff @version 1.35, 03/23/10 @since JDK1.0
class,java/io/BufferedInputStream, A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset methods. When the BufferedInputStream is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The mark operation remembers a point in the input stream and the reset operation causes all the bytes read since the most recent mark operation to be reread before new bytes are taken from the contained input stream. @author Arthur van Hoff @version 1.58, 03/23/10 @since JDK1.0
method,java/io/BufferedInputStream/read/, See the general contract of the read method of InputStream. @return the next byte of data, or -1 if the end of the stream is reached. @exception IOException if this input stream has been closed by				invoking its {@link #close()} method,				or an I/O error occurs. @see java.io.FilterInputStream#in
method,java/io/BufferedInputStream/skip/long, See the general contract of the skip method of InputStream. @exception IOException if the stream does not support seek,				or if this input stream has been closed by				invoking its {@link #close()} method, or an				I/O error occurs.
method,java/io/BufferedInputStream/available/, Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes. This method returns the sum of the number of bytes remaining to be read in the buffer (count&nbsp;- pos) and the result of calling the {@link java.io.FilterInputStream#in in}.available(). @return an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking. @exception IOException if this input stream has been closed by invoking its {@link #close()} method, or an I/O error occurs.
method,java/io/BufferedInputStream/mark/int, See the general contract of the mark method of InputStream. @param readlimit the maximum limit of bytes that can be read before the mark position becomes invalid. @see java.io.BufferedInputStream#reset()
method,java/io/BufferedInputStream/reset/, See the general contract of the reset method of InputStream. If markpos is -1 (no mark has been set or the mark has been invalidated), an IOException is thrown. Otherwise, pos is set equal to markpos. @exception IOException if this stream has not been marked or,			if the mark has been invalidated, or the stream 			has been closed by invoking its {@link #close()}			method, or an I/O error occurs. @see java.io.BufferedInputStream#mark(int)
field,java/io/BufferedInputStream/buf, The internal buffer array where the data is stored. When necessary, it may be replaced by another array of a different size.
field,java/io/BufferedInputStream/marklimit, The maximum read ahead allowed after a call to the mark method before subsequent calls to the reset method fail. Whenever the difference between pos and markpos exceeds marklimit, then the mark may be dropped by setting markpos to -1. @see java.io.BufferedInputStream#mark(int) @see java.io.BufferedInputStream#reset()
class,java/rmi/UnmarshalException, An UnmarshalException can be thrown while unmarshalling the parameters or results of a remote method call if any of the following conditions occur: if an exception occurs while unmarshalling the call header if the protocol for the return value is invalid if a java.io.IOException occurs unmarshalling parameters (on the server side) or the return value (on the client side). if a java.lang.ClassNotFoundException occurs during unmarshalling parameters or return values if no skeleton can be loaded on the server-side; note that skeletons are required in the 1.1 stub protocol, but not in the 1.2 stub protocol. if the method hash is invalid (i.e., missing method). if there is a failure to create a remote reference object for a remote object's stub when it is unmarshalled. @version 1.14, 03/23/10 @author Ann Wollrath @since JDK1.1
class,java/rmi/UnknownHostException, An UnknownHostException is thrown if a java.net.UnknownHostException occurs while creating a connection to the remote host for a remote method call. @version 1.15, 03/23/10 @since JDK1.1
class,java/rmi/UnexpectedException, An UnexpectedException is thrown if the client of a remote method call receives, as a result of the call, a checked exception that is not among the checked exception types declared in the throws clause of the method in the remote interface. @version 1.14, 03/23/10 @author Roger Riggs @since JDK1.1
class,java/rmi/StubNotFoundException, A StubNotFoundException is thrown if a valid stub class could not be found for a remote object when it is exported. A StubNotFoundException may also be thrown when an activatable object is registered via the java.rmi.activation.Activatable.register method. @version 1.18, 03/23/10 @author Roger Riggs @since JDK1.1 @see	 java.rmi.server.UnicastRemoteObject @see java.rmi.activation.Activatable
class,java/rmi/ServerRuntimeException, From a server executing on JDK&nbsp;1.1, a ServerRuntimeException is thrown as a result of a remote method invocation when a RuntimeException is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value. A ServerRuntimeException instance contains the original RuntimeException that occurred as its cause. A ServerRuntimeException is not thrown from servers executing on the Java 2 platform v1.2 or later versions. @version 1.20, 03/23/10 @author Ann Wollrath @since JDK1.1 @deprecated no replacement
class,java/rmi/ServerException, A ServerException is thrown as a result of a remote method invocation when a RemoteException is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself. A ServerException instance contains the original RemoteException that occurred as its cause. @version 1.17, 03/23/10 @author Ann Wollrath @since JDK1.1
class,java/rmi/ServerError, A ServerError is thrown as a result of a remote method invocation when an Error is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value. A ServerError instance contains the original Error that occurred as its cause. @version 1.15, 03/23/10 @author Ann Wollrath @since JDK1.1
method,java/rmi/ServerError/ServerError/String;Error, Constructs a ServerError with the specified detail message and nested error. @param s the detail message @param err the nested error @since JDK1.1
method,java/rmi/RemoteException/getCause/, Returns the cause of this exception. This method returns the value of the {@link #detail} field. @return the cause, which may be null. @since 1.4
interface,java/rmi/Remote, The Remote interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine. Any object that is a remote object must directly or indirectly implement this interface. Only those methods specified in a remote interface, an interface that extends java.rmi.Remote are available remotely. Implementation classes can implement any number of remote interfaces and can extend other remote implementation classes. RMI provides some convenience classes that remote object implementations can extend which facilitate remote object creation. These classes are java.rmi.server.UnicastRemoteObject and java.rmi.activation.Activatable. For complete details on RMI, see the RMI Specification which describes the RMI API and system. @version 1.19, 03/23/10 @since JDK1.1 @author Ann Wollrath @see	 java.rmi.server.UnicastRemoteObject @see java.rmi.activation.Activatable
class,java/rmi/NoSuchObjectException, A NoSuchObjectException is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine. If a NoSuchObjectException occurs attempting to invoke a method on a remote object, the call may be retransmitted and still preserve RMI's at most once call semantics. A NoSuchObjectException is also thrown by the method java.rmi.server.RemoteObject.toStub and by the unexportObject methods of java.rmi.server.UnicastRemoteObject and java.rmi.activation.Activatable and @version 1.14, 03/23/10 @author Ann Wollrath @since JDK1.1 @see java.rmi.server.RemoteObject#toStub(Remote) @see java.rmi.server.UnicastRemoteObject#unexportObject(Remote,boolean) @see java.rmi.activation.Activatable#unexportObject(Remote,boolean)
method,java/rmi/Naming/list/String, Returns an array of the names bound in the registry. The names are URL-formatted (without the scheme component) strings. The array contains a snapshot of the names present in the registry at the time of the call. @param 	name a registry name in URL format (without the scheme		component) @return 	an array of names (in the appropriate format) bound 		in the registry @exception MalformedURLException if the name is not an appropriately formatted URL @exception RemoteException if registry could not be contacted. @since JDK1.1
class,java/rmi/MarshalledObject, A MarshalledObject contains a byte stream with the serialized representation of an object given to its constructor. The get method returns a new copy of the original object, as deserialized from the contained byte stream. The contained object is serialized and deserialized with the same serialization semantics used for marshaling and unmarshaling parameters and return values of RMI calls: When the serialized form is created: classes are annotated with a codebase URL from where the class can be loaded (if available), and any remote object in the MarshalledObject is represented by a serialized instance of its stub. When copy of the object is retrieved (via the get method), if the class is not available locally, it will be loaded from the appropriate location (specified the URL annotated with the class descriptor when the class was serialized. MarshalledObject facilitates passing objects in RMI calls that are not automatically deserialized immediately by the remote peer. @param the type of the object contained in this MarshalledObject @version 1.36, 03/23/10 @author Ann Wollrath @author Peter Jones @since 1.2
method,java/rmi/MarshalledObject/get/, Returns a new copy of the contained marshalledobject. The internal representation is deserialized with the semantics used for unmarshaling paramters for RMI calls. @return a copy of the contained object @exception IOException if an IOException occurs while deserializing the object from its internal representation. @exception ClassNotFoundException if a ClassNotFoundException occurs while deserializing the object from its internal representation. could not be found @since 1.2
method,java/rmi/MarshalledObject/equals/Object, Compares this MarshalledObject to another object. Returns true if and only if the argument refers to a MarshalledObject that contains exactly the same serialized representation of an object as this one does. The comparison ignores any class codebase annotation, meaning that two objects are equivalent if they have the same serialized representation except for the codebase of each class in the serialized representation. @param obj the object to compare with this MarshalledObject @return true if the argument contains an equaivalent serialized object; false otherwise @since 1.2
class,java/rmi/MarshalException, A MarshalException is thrown if a java.io.IOException occurs while marshalling the remote call header, arguments or return value for a remote method call. A MarshalException is also thrown if the receiver does not support the protocol version of the sender. If a MarshalException occurs during a remote method call, the call may or may not have reached the server. If the call did reach the server, parameters may have been deserialized. A call may not be retransmitted after a MarshalException and reliably preserve at most once call semantics. @version 1.14, 03/23/10 @author Ann Wollrath @since JDK1.1
class,java/rmi/ConnectIOException, A ConnectIOException is thrown if an IOException occurs while making a connection to the remote host for a remote method call. @version 1.14, 03/23/10 @author Ann Wollrath @since JDK1.1
class,java/rmi/ConnectException, A ConnectException is thrown if a connection is refused to the remote host for a remote method call. @version 1.15, 03/23/10 @author Ann Wollrath @since JDK1.1
class,java/rmi/AccessException, An AccessException is thrown by certain methods of the java.rmi.Naming class (specifically bind, rebind, and unbind) and methods of the java.rmi.activation.ActivationSystem interface to indicate that the caller does not have permission to perform the action requested by the method call. If the method was invoked from a non-local host, then an AccessException is thrown. @version 1.14, 03/23/10 @author Ann Wollrath @author Roger Riggs @since JDK1.1 @see java.rmi.Naming @see java.rmi.activation.ActivationSystem
class,java/rmi/activation/UnknownObjectException, An UnknownObjectException is thrown by methods of classes and interfaces in the java.rmi.activation package when the ActivationID parameter to the method is determined to be invalid. An ActivationID is invalid if it is not currently known by the ActivationSystem. An ActivationID is obtained by the ActivationSystem.registerObject method. An ActivationID is also obtained during the Activatable.register call. @version 1.13, 03/23/10 @author Ann Wollrath @since 1.2 @see java.rmi.activation.Activatable @see java.rmi.activation.ActivationGroup @see java.rmi.activation.ActivationID @see java.rmi.activation.ActivationMonitor @see java.rmi.activation.ActivationSystem @see java.rmi.activation.Activator
interface,java/rmi/activation/Activator, The Activator facilitates remote object activation. A faulting remote reference calls the activator's activate method to obtain a live reference to a activatable remote object. Upon receiving a request for activation, the activator looks up the activation descriptor for the activation identifier, id, determines the group in which the object should be activated initiates object re-creation via the group's ActivationInstantiator (via a call to the newInstance method). The activator initiates the execution of activation groups as necessary. For example, if an activation group for a specific group identifier is not already executing, the activator initiates the execution of a VM for the group. The Activator works closely with ActivationSystem, which provides a means for registering groups and objects within those groups, and ActivationMonitor, which recives information about active and inactive objects and inactive groups. The activator is responsible for monitoring and detecting when activation groups fail so that it can remove stale remote references to groups and active object's within those groups. @author 	Ann Wollrath @version	1.21, 03/23/10 @see 	ActivationInstantiator @see		ActivationGroupDesc @see		ActivationGroupID @since 	1.2
method,java/rmi/activation/Activator/activate/ActivationID;boolean, Activate the object associated with the activation identifier, id. If the activator knows the object to be active already, and force is false , the stub with a live reference is returned immediately to the caller; otherwise, if the activator does not know that corresponding the remote object is active, the activator uses the activation descriptor information (previously registered) to determine the group (VM) in which the object should be activated. If an ActivationInstantiator corresponding to the object's group descriptor already exists, the activator invokes the activation group's newInstance method passing it the object's id and descriptor. If the activation group for the object's group descriptor does not yet exist, the activator starts an ActivationInstantiator executing (by spawning a child process, for example). When the activator receives the activation group's call back (via the ActivationSystem's activeGroup method) specifying the activation group's reference, the activator can then invoke that activation instantiator's newInstance method to forward each pending activation request to the activation group and return the result (a marshalled remote object reference, a stub) to the caller. Note that the activator receives a marshalled object instead of a Remote object so that the activator does not need to load the code for that object, or participate in distributed garbage collection for that object. If the activator kept a strong reference to the remote object, the activator would then prevent the object from being garbage collected under the normal distributed garbage collection mechanism. @param id the activation identifier for the object being activated @param force if true, the activator contacts the group to obtain the remote object's reference; if false, returning the cached value is allowed. @return the remote object (a stub) in a marshalled form @exception ActivationException if object activation fails @exception UnknownObjectException if object is unknown (not registered) @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationSystem/registerObject/ActivationDesc, The registerObject method is used to register an activation descriptor, desc, and obtain an activation identifier for a activatable remote object. The ActivationSystem creates an ActivationID (a activation identifier) for the object specified by the descriptor, desc, and records, in stable storage, the activation descriptor and its associated identifier for later use. When the Activator receives an activate request for a specific identifier, it looks up the activation descriptor (registered previously) for the specified identifier and uses that information to activate the object. @param desc the object's activation descriptor @return the activation id that can be used to activate the object @exception ActivationException if registration fails (e.g., database update failure, etc). @exception UnknownGroupException if group referred to in desc is not registered with this system @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationSystem/unregisterObject/ActivationID, Remove the activation id and associated descriptor previously registered with the ActivationSystem; the object can no longer be activated via the object's activation id. @param id the object's activation id (from previous registration) @exception ActivationException if unregister fails (e.g., database update failure, etc). @exception UnknownObjectException if object is unknown (not registered) @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationSystem/activeGroup/ActivationGroupID;ActivationInstantiator;long, Callback to inform activation system that group is now active. This call is made internally by the ActivationGroup.createGroup method to inform the ActivationSystem that the group is now active. @param id the activation group's identifier @param group the group's instantiator @param incarnation the group's incarnation number @return monitor for activation group @exception UnknownGroupException if group is not registered @exception ActivationException if a group for the specified id is already active and that group is not equal to the specified group or that group has a different incarnation than the specified group @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationSystem/unregisterGroup/ActivationGroupID, Remove the activation group. An activation group makes this call back to inform the activator that the group should be removed (destroyed). If this call completes successfully, objects can no longer be registered or activated within the group. All information of the group and its associated objects is removed from the system. @param id the activation group's identifier @exception ActivationException if unregister fails (e.g., database update failure, etc). @exception UnknownGroupException if group is not registered @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationSystem/setActivationDesc/ActivationID;ActivationDesc, Set the activation descriptor, desc for the object with the activation identifier, id. The change will take effect upon subsequent activation of the object. @param id the activation identifier for the activatable object @param desc the activation descriptor for the activatable object @exception UnknownGroupException the group associated with desc is not a registered group @exception UnknownObjectException the activation id is not registered @exception ActivationException for general failure (e.g., unable to update log) @exception RemoteException if remote call fails @return the previous value of the activation descriptor @see #getActivationDesc @since 1.2
method,java/rmi/activation/ActivationSystem/setActivationGroupDesc/ActivationGroupID;ActivationGroupDesc, Set the activation group descriptor, desc for the object with the activation group identifier, id. The change will take effect upon subsequent activation of the group. @param id the activation group identifier for the activation group @param desc the activation group descriptor for the activation group @exception UnknownGroupException the group associated with id is not a registered group @exception ActivationException for general failure (e.g., unable to update log) @exception RemoteException if remote call fails @return the previous value of the activation group descriptor @see #getActivationGroupDesc @since 1.2
method,java/rmi/activation/ActivationSystem/getActivationDesc/ActivationID, Returns the activation descriptor, for the object with the activation identifier, id. @param id the activation identifier for the activatable object @exception UnknownObjectException if id is not registered @exception ActivationException for general failure @exception RemoteException if remote call fails @return the activation descriptor @see #setActivationDesc @since 1.2
method,java/rmi/activation/ActivationSystem/getActivationGroupDesc/ActivationGroupID, Returns the activation group descriptor, for the group with the activation group identifier, id. @param id the activation group identifier for the group @exception UnknownGroupException if id is not registered @exception ActivationException for general failure @exception RemoteException if remote call fails @return the activation group descriptor @see #setActivationGroupDesc @since 1.2
interface,java/rmi/activation/ActivationMonitor, An ActivationMonitor is specific to an ActivationGroup and is obtained when a group is reported active via a call to ActivationSystem.activeGroup (this is done internally). An activation group is responsible for informing its ActivationMonitor when either: its objects become active or inactive, or the group as a whole becomes inactive. @author 	Ann Wollrath @version	1.18, 03/23/10 @see		Activator @see		ActivationSystem @see 	ActivationGroup @since	1.2
method,java/rmi/activation/ActivationMonitor/inactiveObject/ActivationID, An activation group calls its monitor's inactiveObject method when an object in its group becomes inactive (deactivates). An activation group discovers that an object (that it participated in activating) in its VM is no longer active, via calls to the activation group's inactiveObject method. The inactiveObject call informs the ActivationMonitor that the remote object reference it holds for the object with the activation identifier, id, is no longer valid. The monitor considers the reference associated with id as a stale reference. Since the reference is considered stale, a subsequent activate call for the same activation identifier results in re-activating the remote object. @param id the object's activation identifier @exception UnknownObjectException if object is unknown @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationMonitor/activeObject/ActivationID;MarshalledObject, Informs that an object is now active. An ActivationGroup informs its monitor if an object in its group becomes active by other means than being activated directly (i.e., the object is registered and activated itself). @param id the active object's id @param obj the marshalled form of the object's stub @exception UnknownObjectException if object is unknown @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationMonitor/inactiveGroup/ActivationGroupID;long, Informs that the group is now inactive. The group will be recreated upon a subsequent request to activate an object within the group. A group becomes inactive when all objects in the group report that they are inactive. @param id the group's id @param incarnation the group's incarnation number @exception UnknownGroupException if group is unknown @exception RemoteException if remote call fails @since 1.2
interface,java/rmi/activation/ActivationInstantiator, An ActivationInstantiator is responsible for creating instances of activatable objects. A concrete subclass of ActivationGroup implements the newInstance method to handle creating objects within the group. @author 	Ann Wollrath @version	1.18, 03/23/10 @see 	ActivationGroup @since	1.2
method,java/rmi/activation/ActivationInstantiator/newInstance/ActivationID;ActivationDesc, The activator calls an instantiator's newInstance method in order to recreate in that group an object with the activation identifier, id, and descriptor, desc. The instantiator is responsible for: determining the class for the object using the descriptor's getClassName method, loading the class from the code location obtained from the descriptor (using the getLocation method), creating an instance of the class by invoking the special activation constructor of the object's class that takes two arguments: the object's ActivationID, and the MarshalledObject containing object specific initialization data, and returning a MarshalledObject containing the stub for the remote object it created @param id the object's activation identifier @param desc the object's descriptor @return a marshalled object containing the serialized representation of remote object's stub @exception ActivationException if object activation fails @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationID/activate/boolean, Activate the object for this id. @param force if true, forces the activator to contact the group when activating the object (instead of returning a cached reference); if false, returning a cached value is acceptable. @return the reference to the active remote object @exception ActivationException if activation fails @exception UnknownObjectException if the object is unknown @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/ActivationID/equals/Object, Compares two activation ids for content equality. Returns true if both of the following conditions are true: 1) the unique identifiers equivalent (by content), and 2) the activator specified in each identifier refers to the same remote object. @param	obj	the Object to compare with @return	true if these Objects are equal; false otherwise. @see		java.util.Hashtable @since 1.2
class,java/rmi/activation/ActivationGroupID, The identifier for a registered activation group serves several purposes: identifies the group uniquely within the activation system, and contains a reference to the group's activation system so that the group can contact its activation system when necessary. The ActivationGroupID is returned from the call to ActivationSystem.registerGroup and is used to identify the group within the activation system. This group id is passed as one of the arguments to the activation group's special constructor when an activation group is created/recreated. @author 	Ann Wollrath @version	1.17, 03/23/10 @see 	ActivationGroup @see		ActivationGroupDesc @since	1.2
method,java/rmi/activation/ActivationGroupID/equals/Object, Compares two group identifiers for content equality. Returns true if both of the following conditions are true: 1) the unique identifiers are equivalent (by content), and 2) the activation system specified in each refers to the same remote object. @param	obj	the Object to compare with @return	true if these Objects are equal; false otherwise. @see		java.util.Hashtable @since 1.2
method,java/rmi/activation/ActivationGroupDesc/getPropertyOverrides/, Returns the group's property-override list. @return the property-override list, or null @since 1.2
method,java/rmi/activation/ActivationGroupDesc/ActivationGroupDesc/Properties;CommandEnvironment, Constructs a group descriptor that uses the system defaults for group implementation and code location. Properties specify Java environment overrides (which will override system properties in the group implementation's VM). The command environment can control the exact command/options used in starting the child VM, or can be null to accept rmid's default. This constructor will create an ActivationGroupDesc with a null group class name, which indicates the system's default ActivationGroup implementation. @param overrides the set of properties to set when the group is recreated. @param cmd the controlling options for executing the VM in another process (or null). @since 1.2
method,java/rmi/activation/ActivationGroupDesc/ActivationGroupDesc/String;String;MarshalledObject;Properties;CommandEnvironment, Specifies an alternate group implementation and execution environment to be used for the group. @param className the group's package qualified class name or null. A null group class name indicates the system's default ActivationGroup implementation. @param location the location from where to load the group's class @param data the group's initialization data contained in marshalled form (could contain properties, for example) @param overrides a properties map which will override those set by default in the subprocess environment (will be translated into -D options), or null. @param cmd the controlling options for executing the VM in another process (or null). @since 1.2
class,java/rmi/activation/ActivationGroupDesc/CommandEnvironment, Startup options for ActivationGroup implementations. This class allows overriding default system properties and specifying implementation-defined options for ActivationGroups. @since 1.2
method,java/rmi/activation/ActivationGroup/setSystem/ActivationSystem, Set the activation system for the VM. The activation system can only be set it if no group is currently active. If the activation system is not set via this call, then the getSystem method attempts to obtain a reference to the ActivationSystem by looking up the name java.rmi.activation.ActivationSystem in the Activator's registry. By default, the port number used to look up the activation system is defined by ActivationSystem.SYSTEM_PORT. This port can be overridden by setting the property java.rmi.activation.port. If there is a security manager, this method first calls the security manager's checkSetFactory method. This could result in a SecurityException. @param system remote reference to the ActivationSystem @exception ActivationException if activation system is already set @exception SecurityException if permission to set the activation system is denied. (Note: The default implementation of the security manager checkSetFactory method requires the RuntimePermission setFactory) @see #getSystem @see SecurityManager#checkSetFactory @since 1.2
method,java/rmi/activation/ActivationGroup/getSystem/, Returns the activation system for the VM. The activation system may be set by the setSystem method. If the activation system is not set via the setSystem method, then the getSystem method attempts to obtain a reference to the ActivationSystem by looking up the name java.rmi.activation.ActivationSystem in the Activator's registry. By default, the port number used to look up the activation system is defined by ActivationSystem.SYSTEM_PORT. This port can be overridden by setting the property java.rmi.activation.port. @return the activation system for the VM/group @exception ActivationException if activation system cannot be obtained or is not bound (means that it is not running) @see #setSystem @since 1.2
method,java/rmi/activation/ActivationGroup/activeObject/ActivationID;MarshalledObject, This protected method is necessary for subclasses to make the activeObject callback to the group's monitor. The call is simply forwarded to the group's ActivationMonitor. @param id the object's identifier @param mobj a marshalled object containing the remote object's stub @exception UnknownObjectException if object is not registered @exception RemoteException if call informing monitor fails @exception ActivationException if an activation error occurs @since 1.2
method,java/rmi/activation/ActivationGroup/inactiveGroup/, This protected method is necessary for subclasses to make the inactiveGroup callback to the group's monitor. The call is simply forwarded to the group's ActivationMonitor. Also, the current group for the VM is set to null. @exception UnknownGroupException if group is not registered @exception RemoteException if call informing monitor fails @since 1.2
class,java/rmi/activation/ActivationException, General exception used by the activation interfaces. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The detail exception that may be provided at construction time and accessed via the public {@link #detail} field is now known as the cause, and may be accessed via the {@link Throwable#getCause()} method, as well as the aforementioned legacy field. Invoking the method {@link Throwable#initCause(Throwable)} on an instance of ActivationException always throws {@link IllegalStateException}. @author 	Ann Wollrath @version	1.26, 03/23/10 @since 	1.2
method,java/rmi/activation/ActivationException/getCause/, Returns the cause of this exception. This method returns the value of the {@link #detail} field. @return the cause, which may be null. @since 1.4
class,java/rmi/activation/ActivationDesc, An activation descriptor contains the information necessary to activate an object: the object's group identifier, the object's fully-qualified class name, the object's code location (the location of the class), a codebase URL path, the object's restart mode, and, a marshalled object that can contain object specific initialization data. A descriptor registered with the activation system can be used to recreate/activate the object specified by the descriptor. The MarshalledObject in the object's descriptor is passed as the second argument to the remote object's constructor for object to use during reinitialization/activation. @author 	Ann Wollrath @version	1.30, 03/23/10 @since 	1.2 @see java.rmi.activation.Activatable
method,java/rmi/activation/ActivationDesc/getRestartMode/, Returns the restart mode of the object associated with this activation descriptor. @return true if the activatable object associated with this activation descriptor is restarted via the activation daemon when either the daemon comes up or the object's group is restarted after an unexpected crash; otherwise it returns false, meaning that the object is only activated on demand via a method call. Note that if the restart mode is true, the activator does not force an initial immediate activation of a newly registered object; initial activation is lazy. @since 1.2
method,java/rmi/activation/ActivationDesc/ActivationDesc/String;String;MarshalledObject;boolean, Constructs an object descriptor for an object whose class name is className, that can be loaded from the code location and whose initialization information is data. If this form of the constructor is used, the groupID defaults to the current id for ActivationGroup for this VM. All objects with the same ActivationGroupID are activated in the same VM. This constructor will throw ActivationException if there is no current activation group for this VM. To create an ActivationGroup use the ActivationGroup.createGroup method. @param className the object's fully package qualified class name @param location the object's code location (from where the class is loaded) @param data the object's initialization (activation) data contained in marshalled form. @param restart if true, the object is restarted (reactivated) when either the activator is restarted or the object's activation group is restarted after an unexpected crash; if false, the object is only activated on demand. Specifying restart to be true does not force an initial immediate activation of a newly registered object; initial activation is lazy. @exception ActivationException if the current group is nonexistent @since 1.2
class,java/rmi/activation/ActivateFailedException, This exception is thrown by the RMI runtime when activation fails during a remote call to an activatable object. @author 	Ann Wollrath @version	1.12, 03/23/10 @since 	1.2
class,java/rmi/activation/Activatable, The Activatable class provides support for remote objects that require persistent access over time and that can be activated by the system. For the constructors and static exportObject methods, the stub for a remote object being exported is obtained as described in {@link java.rmi.server.UnicastRemoteObject}. An attempt to serialize explicitly an instance of this class will fail. @author	Ann Wollrath @version	1.39, 10/03/23 @since	1.2 @serial	exclude
method,java/rmi/activation/Activatable/getID/, Returns the object's activation identifier. The method is protected so that only subclasses can obtain an object's identifier. @return the object's activation identifier @since 1.2
method,java/rmi/activation/Activatable/register/ActivationDesc, Register an object descriptor for an activatable remote object so that is can be activated on demand. @param desc the object's descriptor @return the stub for the activatable remote object @exception UnknownGroupException if group id in desc is not registered with the activation system @exception ActivationException if activation system is not running @exception RemoteException if remote call fails @since 1.2
method,java/rmi/activation/Activatable/inactive/ActivationID, Informs the system that the object with the corresponding activation id is currently inactive. If the object is currently active, the object is unexported from the RMI runtime (only if there are no pending or in-progress calls) so the that it can no longer receive incoming calls. This call informs this VM's ActivationGroup that the object is inactive, that, in turn, informs its ActivationMonitor. If this call completes successfully, a subsequent activate request to the activator will cause the object to reactivate. The operation may still succeed if the object is considered active but has already unexported itself. @param id the object's activation identifier @return true if the operation succeeds (the operation will succeed if the object in currently known to be active and is either already unexported or is currently exported and has no pending/executing calls); false is returned if the object has pending/executing calls in which case it cannot be deactivated @exception UnknownObjectException if object is not known (it may already be inactive) @exception ActivationException if group is not active @exception RemoteException if call informing monitor fails @since 1.2
method,java/rmi/activation/Activatable/unregister/ActivationID, Revokes previous registration for the activation descriptor associated with id. An object can no longer be activated via that id. @param id the object's activation identifier @exception UnknownObjectException if object (id) is unknown @exception ActivationException if activation system is not running @exception RemoteException if remote call to activation system fails @since 1.2
method,java/rmi/activation/Activatable/exportObject/Remote;ActivationID;int, Export the activatable remote object to the RMI runtime to make the object available to receive incoming calls. The object is exported on an anonymous port, if port is zero. During activation, this exportObject method should be invoked explicitly by an activatable object, that does not extend the Activatable class. There is no need for objects that do extend the Activatable class to invoke this method directly because the object is exported during construction. @return the stub for the activatable remote object @param obj the remote object implementation @param id the object's activation identifier @param port the port on which the object is exported (an anonymous port is used if port=0) @exception RemoteException if object export fails @since 1.2
method,java/rmi/activation/Activatable/exportObject/Remote;ActivationID;int;RMIClientSocketFactory;RMIServerSocketFactory, Export the activatable remote object to the RMI runtime to make the object available to receive incoming calls. The object is exported on an anonymous port, if port is zero. During activation, this exportObject method should be invoked explicitly by an activatable object, that does not extend the Activatable class. There is no need for objects that do extend the Activatable class to invoke this method directly because the object is exported during construction. @return the stub for the activatable remote object @param obj the remote object implementation @param id the object's activation identifier @param port the port on which the object is exported (an anonymous port is used if port=0) @param csf the client-side socket factory for making calls to the remote object @param ssf the server-side socket factory for receiving remote calls @exception RemoteException if object export fails @since 1.2
method,java/rmi/activation/Activatable/unexportObject/Remote;boolean, Remove the remote object, obj, from the RMI runtime. If successful, the object can no longer accept incoming RMI calls. If the force parameter is true, the object is forcibly unexported even if there are pending calls to the remote object or the remote object still has calls in progress. If the force parameter is false, the object is only unexported if there are no pending or in progress calls to the object. @param obj the remote object to be unexported @param force if true, unexports the object even if there are pending or in-progress calls; if false, only unexports the object if there are no pending or in-progress calls @return true if operation is successful, false otherwise @exception NoSuchObjectException if the remote object is not currently exported @since 1.2
method,java/rmi/dgc/VMID/VMID/, Create a new VMID. Each new VMID returned from this constructor is unique for all Java virtual machines under the following conditions: a) the conditions for uniqueness for objects of the class java.rmi.server.UID are satisfied, and b) an address can be obtained for this host that is unique and constant for the lifetime of this object. 
method,java/rmi/dgc/Lease/Lease/VMID;long, Constructs a lease with a specific VMID and lease duration. The vmid may be null. @param id VMID associated with this lease @param duration lease duration
method,java/rmi/dgc/DGC/clean/ObjID[];long;VMID;boolean, The clean call removes the 'vmid' from the reference list of each remote object indicated in 'id's. The sequence number is used to detect late clean calls. If the argument 'strong' is true, then the clean call is a result of a failed dirty call, thus the sequence number for the client 'vmid' needs to be remembered. @param ids IDs of objects to mark as unreferenced by calling client @param sequenceNum sequence number @param vmid client VMID @param strong make 'strong' clean call @throws RemoteException if clean call fails
method,java/rmi/server/Unreferenced/unreferenced/, Called by the RMI runtime sometime after the runtime determines that the reference list, the list of clients referencing the remote object, becomes empty. @since JDK1.1
method,java/rmi/server/UnicastRemoteObject/exportObject/Remote, Exports the remote object to make it available to receive incoming calls using an anonymous port. @param obj the remote object to be exported @return remote object stub @exception RemoteException if export fails @since JDK1.1
method,java/rmi/server/UnicastRemoteObject/exportObject/Remote;int, Exports the remote object to make it available to receive incoming calls, using the particular supplied port. @param obj the remote object to be exported @param port the port to export the object on @return remote object stub @exception RemoteException if export fails @since 1.2
method,java/rmi/server/UnicastRemoteObject/exportObject/Remote;int;RMIClientSocketFactory;RMIServerSocketFactory, Exports the remote object to make it available to receive incoming calls, using a transport specified by the given socket factory. @param obj the remote object to be exported @param port the port to export the object on @param csf the client-side socket factory for making calls to the remote object @param ssf the server-side socket factory for receiving remote calls @return remote object stub @exception RemoteException if export fails @since 1.2
method,java/rmi/server/UnicastRemoteObject/unexportObject/Remote;boolean, Removes the remote object, obj, from the RMI runtime. If successful, the object can no longer accept incoming RMI calls. If the force parameter is true, the object is forcibly unexported even if there are pending calls to the remote object or the remote object still has calls in progress. If the force parameter is false, the object is only unexported if there are no pending or in progress calls to the object. @param obj the remote object to be unexported @param force if true, unexports the object even if there are pending or in-progress calls; if false, only unexports the object if there are no pending or in-progress calls @return true if operation is successful, false otherwise @exception NoSuchObjectException if the remote object is not currently exported @since 1.2
method,java/rmi/server/UnicastRemoteObject/UnicastRemoteObject/int, Creates and exports a new UnicastRemoteObject object using the particular supplied port. @param port the port number on which the remote object receives calls (if port is zero, an anonymous port is chosen) @throws RemoteException if failed to export object @since 1.2
method,java/rmi/server/UnicastRemoteObject/UnicastRemoteObject/int;RMIClientSocketFactory;RMIServerSocketFactory, Creates and exports a new UnicastRemoteObject object using the particular supplied port and socket factories. @param port the port number on which the remote object receives calls (if port is zero, an anonymous port is chosen) @param csf the client-side socket factory for making calls to the remote object @param ssf the server-side socket factory for receiving remote calls @throws RemoteException if failed to export object @since 1.2
class,java/rmi/server/UID, A UID represents an identifier that is unique over time with respect to the host it is generated on, or one of 216 well-known identifiers. The {@link #UID()} constructor can be used to generate an identifier that is unique over time with respect to the host it is generated on. The {@link #UID(short)} constructor can be used to create one of 216 well-known identifiers. A UID instance contains three primitive values: unique, an int that uniquely identifies the VM that this UID was generated in, with respect to its host and at the time represented by the time value (an example implementation of the unique value would be a process identifier), or zero for a well-known UID time, a long equal to a time (as returned by {@link System#currentTimeMillis()}) at which the VM that this UID was generated in was alive, or zero for a well-known UID count, a short to distinguish UIDs generated in the same VM with the same time value An independently generated UID instance is unique over time with respect to the host it is generated on as long as the host requires more than one millisecond to reboot and its system clock is never set backward. A globally unique identifier can be constructed by pairing a UID instance with a unique host identifier, such as an IP address. @author	Ann Wollrath @author	Peter Jones @version	1.25, 10/03/23 @since	JDK1.1
method,java/rmi/server/UID/equals/Object, Compares the specified object with this UID for equality. This method returns true if and only if the specified object is a UID instance with the same unique, time, and count values as this one. @param	obj the object to compare this UID to @return	true if the given object is equivalent to this one, and false otherwise
method,java/rmi/server/UID/write/DataOutput, Marshals a binary representation of this UID to a DataOutput instance. Specifically, this method first invokes the given stream's {@link DataOutput#writeInt(int)} method with this UID's unique value, then it invokes the stream's {@link DataOutput#writeLong(long)} method with this UID's time value, and then it invokes the stream's {@link DataOutput#writeShort(int)} method with this UID's count value. @param	out the DataOutput instance to write this UID to @throws	IOException if an I/O error occurs while performing this operation
method,java/rmi/server/UID/read/DataInput, Constructs and returns a new UID instance by unmarshalling a binary representation from an DataInput instance. Specifically, this method first invokes the given stream's {@link DataInput#readInt()} method to read a unique value, then it invoke's the stream's {@link DataInput#readLong()} method to read a time value, then it invoke's the stream's {@link DataInput#readShort()} method to read a count value, and then it creates and returns a new UID instance that contains the unique, time, and count values that were read from the stream. @param	in the DataInput instance to read UID from @return	unmarshalled UID instance @throws	IOException if an I/O error occurs while performing this operation
class,java/rmi/server/SocketSecurityException, An obsolete subclass of {@link ExportException}. @version 1.15, 03/23/10 @author Ann Wollrath @since JDK1.1
method,java/rmi/server/Skeleton/dispatch/Remote;RemoteCall;int;long, Unmarshals arguments, calls the actual remote object implementation, and marshals the return value or any exception. @param obj remote implementation to dispatch call to @param theCall object representing remote call @param opnum operation number @param hash stub/skeleton interface hash @exception java.lang.Exception if a general exception occurs. @since JDK1.1 @deprecated no replacement
method,java/rmi/server/ServerRef/exportObject/Remote;Object, Creates a client stub object for the supplied Remote object. If the call completes successfully, the remote object should be able to accept incoming calls from clients. @param obj the remote object implementation @param data information necessary to export the object @return the stub for the remote object @exception RemoteException if an exception occurs attempting to export the object (e.g., stub class could not be found) @since JDK1.1
method,java/rmi/server/ServerRef/getClientHost/, Returns the hostname of the current client. When called from a thread actively handling a remote method invocation the hostname of the client is returned. @return the client's host name @exception ServerNotActiveException if called outside of servicing a remote method invocation @since JDK1.1
class,java/rmi/server/ServerNotActiveException, An ServerNotActiveException is an Exception thrown during a call to RemoteServer.getClientHost if the getClientHost method is called outside of servicing a remote method call. @version 1.15, 03/23/10 @author Roger Riggs @since JDK1.1 @see java.rmi.server.RemoteServer#getClientHost()
class,java/rmi/server/ServerCloneException, A ServerCloneException is thrown if a remote exception occurs during the cloning of a UnicastRemoteObject. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The nested exception that may be provided at construction time and accessed via the public {@link #detail} field is now known as the cause, and may be accessed via the {@link Throwable#getCause()} method, as well as the aforementioned legacy field. Invoking the method {@link Throwable#initCause(Throwable)} on an instance of ServerCloneException always throws {@link IllegalStateException}. @version 1.22, 03/23/10 @author Ann Wollrath @since JDK1.1 @see java.rmi.server.UnicastRemoteObject#clone()
method,java/rmi/server/ServerCloneException/getCause/, Returns the cause of this exception. This method returns the value of the {@link #detail} field. @return the cause, which may be null. @since 1.4
class,java/rmi/server/RemoteStub, The RemoteStub class is the common superclass to client stubs and provides the framework to support a wide range of remote reference semantics. Stub objects are surrogates that support exactly the same set of remote interfaces defined by the actual implementation of the remote object. @version 1.23, 03/23/10 @author Ann Wollrath @since JDK1.1
class,java/rmi/server/RemoteServer, The RemoteServer class is the common superclass to server implementations and provides the framework to support a wide range of remote reference semantics. Specifically, the functions needed to create and export remote objects (i.e. to make them remotely available) are provided abstractly by RemoteServer and concretely by its subclass(es). @version 1.34, 03/23/10 @author Ann Wollrath @since JDK1.1
method,java/rmi/server/RemoteServer/getClientHost/, Returns a string representation of the client host for the remote method invocation being processed in the current thread. @return 	a string representation of the client host @throws	ServerNotActiveException if no remote method invocation is being processed in the current thread @since	JDK1.1
method,java/rmi/server/RemoteServer/setLog/OutputStream, Log RMI calls to the output stream out. If out is null, call logging is turned off. If there is a security manager, its checkPermission method will be invoked with a java.util.logging.LoggingPermission(control) permission; this could result in a SecurityException. @param	out the output stream to which RMI calls should be logged @throws	SecurityException if there is a security manager and 		the invocation of its checkPermission method		fails @see #getLog @since JDK1.1
method,java/rmi/server/RemoteServer/getLog/, Returns stream for the RMI call log. @return the call log @see #setLog @since JDK1.1
interface,java/rmi/server/RemoteRef, RemoteRef represents the handle for a remote object. A RemoteStub uses a remote reference to carry out a remote method invocation to a remote object. @version 1.25, 03/23/10 @author Ann Wollrath @since JDK1.1 @see java.rmi.server.RemoteStub
method,java/rmi/server/RemoteRef/invoke/Remote;Method;Object[];long, Invoke a method. This form of delegating method invocation to the reference allows the reference to take care of setting up the connection to the remote host, marshaling some representation for the method and parameters, then communicating the method invocation to the remote host. This method either returns the result of a method invocation on the remote object which resides on the remote host or throws a RemoteException if the call failed or an application-level exception if the remote invocation throws an exception. @param obj the object that contains the RemoteRef (e.g., the RemoteStub for the object. @param method the method to be invoked @param params the parameter list @param opnum a hash that may be used to represent the method @return result of remote method invocation @exception Exception if any exception occurs during remote method invocation @since 1.2
method,java/rmi/server/RemoteRef/newCall/RemoteObject;Operation[];int;long, Creates an appropriate call object for a new remote method invocation on this object. Passing operation array and index, allows the stubs generator to assign the operation indexes and interpret them. The remote reference may need the operation to encode in the call. @since JDK1.1 @deprecated 1.2 style stubs no longer use this method. Instead of using a sequence of method calls on the stub's the remote reference (newCall, invoke, and done), a stub uses a single method, invoke(Remote, Method, Object[], int), on the remote reference to carry out parameter marshalling, remote method executing and unmarshalling of the return value. @param obj remote stub through which to make call @param op array of stub operations @param opnum operation number @param hash stub/skeleton interface hash @return call object representing remote call @throws RemoteException if failed to initiate new remote call @see #invoke(Remote,java.lang.reflect.Method,Object[],long)
field,java/rmi/server/RemoteRef/packagePrefix, Initialize the server package prefix: assumes that the implementation of server ref classes (e.g., UnicastRef, UnicastServerRef) are located in the package defined by the prefix.
class,java/rmi/server/RemoteObjectInvocationHandler, An implementation of the InvocationHandler interface for use with Java Remote Method Invocation (Java RMI). This invocation handler can be used in conjunction with a dynamic proxy instance as a replacement for a pregenerated stub class. Applications are not expected to use this class directly. A remote object exported to use a dynamic proxy with {@link UnicastRemoteObject} or {@link Activatable} has an instance of this class as that proxy's invocation handler. @version 1.6, 10/03/23 @author Ann Wollrath @since 1.5
method,java/rmi/server/RemoteObjectInvocationHandler/invoke/Object;Method;Object[], Processes a method invocation made on the encapsulating proxy instance, proxy, and returns the result. RemoteObjectInvocationHandler implements this method as follows: If method is one of the following methods, it is processed as described below: {@link Object#hashCode Object.hashCode}: Returns the hash code value for the proxy. {@link Object#equals Object.equals}: Returns true if the argument (args[0]) is an instance of a dynamic proxy class and this invocation handler is equal to the invocation handler of that argument, and returns false otherwise. {@link Object#toString Object.toString}: Returns a string representation of the proxy. Otherwise, a remote call is made as follows: If proxy is not an instance of the interface {@link Remote}, then an {@link IllegalArgumentException} is thrown. Otherwise, the {@link RemoteRef#invoke invoke} method is invoked on this invocation handler's RemoteRef, passing proxy, method, args, and the method hash (defined in section 8.3 of the Java Remote Method Invocation (RMI) Specification) for method, and the result is returned. If an exception is thrown by RemoteRef.invoke and that exception is a checked exception that is not assignable to any exception in the throws clause of the method implemented by the proxy's class, then that exception is wrapped in an {@link UnexpectedException} and the wrapped exception is thrown. Otherwise, the exception thrown by invoke is thrown by this method. The semantics of this method are unspecified if the arguments could not have been produced by an instance of some valid dynamic proxy class containing this invocation handler. @param proxy the proxy instance that the method was invoked on @param method the Method instance corresponding to the interface method invoked on the proxy instance @param args an array of objects containing the values of the arguments passed in the method invocation on the proxy instance, or null if the method takes no arguments @return the value to return from the method invocation on the proxy instance @throws	Throwable the exception to throw from the method invocation on the proxy instance @see
method,java/rmi/server/RemoteObject/toStub/Remote, Returns the stub for the remote object obj passed as a parameter. This operation is only valid after the object has been exported. @param obj the remote object whose stub is needed @return the stub for the remote object, obj. @exception NoSuchObjectException if the stub for the remote object could not be found. @since 1.2
method,java/rmi/server/RemoteObject/equals/Object, Compares two remote objects for equality. Returns a boolean that indicates whether this remote object is equivalent to the specified Object. This method is used when a remote object is stored in a hashtable. If the specified Object is not itself an instance of RemoteObject, then this method delegates by returning the result of invoking the equals method of its parameter with this remote object as the argument. @param	obj	the Object to compare with @return	true if these Objects are equal; false otherwise. @see		java.util.Hashtable
interface,java/rmi/server/RemoteCall, RemoteCall is an abstraction used solely by the RMI runtime (in conjunction with stubs and skeletons of remote objects) to carry out a call to a remote object. The RemoteCall interface is deprecated because it is only used by deprecated methods of java.rmi.server.RemoteRef. @version 1.22, 03/23/10 @since JDK1.1 @author Ann Wollrath @author Roger Riggs @see java.rmi.server.RemoteRef @deprecated no replacement.
method,java/rmi/server/RemoteCall/getOutputStream/, Return the output stream the stub/skeleton should put arguments/results into. @return output stream for arguments/results @exception java.io.IOException if an I/O error occurs. @since JDK1.1 @deprecated no replacement
method,java/rmi/server/RemoteCall/releaseOutputStream/, Release the output stream; in some transports this would release the stream. @exception java.io.IOException if an I/O error occurs. @since JDK1.1 @deprecated no replacement
method,java/rmi/server/RemoteCall/getInputStream/, Get the InputStream that the stub/skeleton should get results/arguments from. @return input stream for reading arguments/results @exception java.io.IOException if an I/O error occurs. @since JDK1.1 @deprecated no replacement
method,java/rmi/server/RemoteCall/releaseInputStream/, Release the input stream. This would allow some transports to release the channel early. @exception java.io.IOException if an I/O error occurs. @since JDK1.1 @deprecated no replacement
method,java/rmi/server/RemoteCall/executeCall/, Do whatever it takes to execute the call. @exception java.lang.Exception if a general exception occurs. @since JDK1.1 @deprecated no replacement
method,java/rmi/server/RemoteCall/done/, Allow cleanup after the remote call has completed. @exception java.io.IOException if an I/O error occurs. @since JDK1.1 @deprecated no replacement
class,java/rmi/server/RMISocketFactory, An RMISocketFactory instance is used by the RMI runtime in order to obtain client and server sockets for RMI calls. An application may use the setSocketFactory method to request that the RMI runtime use its socket factory instance instead of the default implementation. The default socket factory implementation used goes through a three-tiered approach to creating client sockets. First, a direct socket connection to the remote VM is attempted. If that fails (due to a firewall), the runtime uses HTTP with the explicit port number of the server. If the firewall does not allow this type of communication, then HTTP to a cgi-bin script on the server is used to POST the RMI call. @version 1.23, 03/23/10 @author Ann Wollrath @author Peter Jones @since JDK1.1
method,java/rmi/server/RMISocketFactory/setSocketFactory/RMISocketFactory, Set the global socket factory from which RMI gets sockets (if the remote object is not associated with a specific client and/or server socket factory). The RMI socket factory can only be set once. Note: The RMISocketFactory may only be set if the current security manager allows setting a socket factory; if disallowed, a SecurityException will be thrown. @param fac the socket factory @exception IOException if the RMI socket factory is already set @exception SecurityException if a security manager exists and its checkSetFactory method doesn't allow the operation. @see #getSocketFactory @see java.lang.SecurityManager#checkSetFactory() @since JDK1.1
method,java/rmi/server/RMISocketFactory/setFailureHandler/RMIFailureHandler, Sets the failure handler to be called by the RMI runtime if server socket creation fails. By default, if no failure handler is installed and server socket creation fails, the RMI runtime does attempt to recreate the server socket. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException. @param fh the failure handler @throws	SecurityException if a security manager exists and its 		checkSetFactory method doesn't allow the		operation. @see #getFailureHandler @see java.rmi.server.RMIFailureHandler#failure(Exception) @since JDK1.1
interface,java/rmi/server/RMIFailureHandler, An RMIFailureHandler can be registered via the RMISocketFactory.setFailureHandler call. The failure method of the handler is invoked when the RMI runtime is unable to create a ServerSocket to listen for incoming calls. The failure method returns a boolean indicating whether the runtime should attempt to re-create the ServerSocket. @author 	Ann Wollrath @version	@(#)RMIFailureHandler.java	1.13, 10/03/23 @since 	JDK1.1
method,java/rmi/server/RMIFailureHandler/failure/Exception, The failure callback is invoked when the RMI runtime is unable to create a ServerSocket via the RMISocketFactory. An RMIFailureHandler is registered via a call to RMISocketFacotry.setFailureHandler. If no failure handler is installed, the default behavior is to attempt to re-create the ServerSocket. @param ex the exception that occurred during ServerSocket creation @return if true, the RMI runtime attempts to retry ServerSocket creation @see java.rmi.server.RMISocketFactory#setFailureHandler(RMIFailureHandler) @since JDK1.1
class,java/rmi/server/RMIClassLoaderSpi, RMIClassLoaderSpi is the service provider interface for RMIClassLoader. In particular, an RMIClassLoaderSpi instance provides an implementation of the following static methods of RMIClassLoader: {@link RMIClassLoader#loadClass(URL,String)} {@link RMIClassLoader#loadClass(String,String)} {@link RMIClassLoader#loadClass(String,String,ClassLoader)} {@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)} {@link RMIClassLoader#getClassLoader(String)} {@link RMIClassLoader#getClassAnnotation(Class)} When one of those methods is invoked, its behavior is to delegate to a corresponding method on an instance of this class. The details of how each method delegates to the provider instance is described in the documentation for each particular method. See the documentation for {@link RMIClassLoader} for a description of how a provider instance is chosen. @version	1.17, 10/03/23 @author	Peter Jones @author	Laird Dornin @see		RMIClassLoader @since	1.4
method,java/rmi/server/RMIClassLoaderSpi/getClassLoader/String, Provides the implementation for {@link RMIClassLoader#getClassLoader(String)}. Returns a class loader that loads classes from the given codebase URL path. If there is a security manger, its checkPermission method will be invoked with a RuntimePermission(getClassLoader) permission; this could result in a SecurityException. The implementation of this method may also perform further security checks to verify that the calling context has permission to connect to all of the URLs in the codebase URL path. @param	codebase the list of URLs (space-separated) from which the returned class loader will load classes from, or null @return a class loader that loads classes from the given codebase URL path @throws	MalformedURLException if codebase is non-null and contains an invalid URL, or if codebase is null and a provider-specific URL used to identify the class loader is invalid @throws	SecurityException if there is a security manager and the invocation of its checkPermission method fails, or if the caller does not have permission to connect to all of the URLs in the codebase URL path
class,java/rmi/server/RMIClassLoader, RMIClassLoader comprises static methods to support dynamic class loading with RMI. Included are methods for loading classes from a network location (one or more URLs) and obtaining the location from which an existing class should be loaded by remote parties. These methods are used by the RMI runtime when marshalling and unmarshalling classes contained in the arguments and return values of remote method calls, and they also may be invoked directly by applications in order to mimic RMI's dynamic class loading behavior. The implementation of the following static methods {@link #loadClass(URL,String)} {@link #loadClass(String,String)} {@link #loadClass(String,String,ClassLoader)} {@link #loadProxyClass(String,String[],ClassLoader)} {@link #getClassLoader(String)} {@link #getClassAnnotation(Class)} is provided by an instance of {@link RMIClassLoaderSpi}, the service provider interface for those methods. When one of the methods is invoked, its behavior is to delegate to a corresponding method on the service provider instance. The details of how each method delegates to the provider instance is described in the documentation for each particular method. The service provider instance is chosen as follows: If the system property java.rmi.server.RMIClassLoaderSpi is defined, then if its value equals the string default, the provider instance will be the value returned by an invocation of the {@link #getDefaultProviderInstance()} method, and for any other value, if a class named with the value of the property can be loaded by the system class loader (see {@link ClassLoader#getSystemClassLoader}) and that class is assignable to {@link RMIClassLoaderSpi} and has a public no-argument constructor, then that constructor will be invoked to create the provider instance. If the property is defined but any other of those conditions are not true, then an unspecified Error will be thrown to code that attempts to use RMIClassLoader, indicating the failure to obtain a provider instance. If a resource named META-INF/services/java.rmi.server.RMIClassLoaderSpi is visible to the system class loader, then the contents of that resource are interpreted as a provider-configuration file, and the first class name specified in that file is used as the provider class name. If a class with that name can be loaded by the system class loader and that class is assignable to {@link RMIClassLoaderSpi} and has a public no-argument constructor, then that constructor will be invoked to create the provider instance. If the resource is found but a provider cannot be instantiated as described, then an unspecified Error will be thrown to code that attempts to use RMIClassLoader, indicating the failure to obtain a provider instance. Otherwise, the provider instance will be the value returned by an invocation of the {@link #getDefaultProviderInstance()} method. @version	1.42, 10/03/23 @author	Ann Wollrath @author	Peter Jones @author	Laird Dornin @see		RMIClassLoaderSpi @since	JDK1.1
method,java/rmi/server/RMIClassLoader/loadClass/URL;String, Loads a class from a codebase URL. If codebase is null, then this method will behave the same as {@link #loadClass(String,String)} with a null codebase and the given class name. This method delegates to the {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)} method of the provider instance, passing the result of invoking {@link URL#toString} on the given URL (or null if codebase is null) as the first argument, name as the second argument, and null as the third argument. @param	codebase the URL to load the class from, or null @param	name the name of the class to load @return	the Class object representing the loaded class @throws MalformedURLException if codebase is null and a provider-specific URL used to load classes is invalid @throws	ClassNotFoundException if a definition for the class could not be found at the specified URL
method,java/rmi/server/RMIClassLoader/loadClass/String;String;ClassLoader, Loads a class from a codebase URL path, optionally using the supplied loader. This method should be used when the caller would like to make available to the provider implementation an additional contextual class loader to consider, such as the loader of a caller on the stack. Typically, a provider implementation will attempt to resolve the named class using the given defaultLoader, if specified, before attempting to resolve the class from the codebase URL path. This method delegates to the {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)} method of the provider instance, passing codebase as the first argument, name as the second argument, and defaultLoader as the third argument. @param	codebase the list of URLs (separated by spaces) to load the class from, or null @param	name the name of the class to load @param	defaultLoader additional contextual class loader to use, or null @return	the Class object representing the loaded class @throws MalformedURLException if codebase is non-null and contains an invalid URL, or if codebase is null and a provider-specific URL used to load classes is invalid @throws	ClassNotFoundException if a definition for the class could not be found at the specified location @since	1.4
method,java/rmi/server/RMIClassLoader/loadProxyClass/String;String[];ClassLoader, Loads a dynamic proxy class (see {@link java.lang.reflect.Proxy}) that implements a set of interfaces with the given names from a codebase URL path. The interfaces will be resolved similar to classes loaded via the {@link #loadClass(String,String)} method using the given codebase. This method delegates to the {@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)} method of the provider instance, passing codebase as the first argument, interfaces as the second argument, and defaultLoader as the third argument. @param	codebase the list of URLs (space-separated) to load classes from, or null @param	interfaces the names of the interfaces for the proxy class to implement @param	defaultLoader additional contextual class loader to use, or null @return	a dynamic proxy class that implements the named interfaces @throws	MalformedURLException if codebase is non-null and contains an invalid URL, or if codebase is null and a provider-specific URL used to load classes is invalid @throws	ClassNotFoundException if a definition for one of the named interfaces could not be found at the specified location, or if creation of the dynamic proxy class failed (such as if {@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])} would throw an IllegalArgumentException for the given interface list) @since	1.4
method,java/rmi/server/RMIClassLoader/getClassLoader/String, Returns a class loader that loads classes from the given codebase URL path. The class loader returned is the class loader that the {@link #loadClass(String,String)} method would use to load classes for the same codebase argument. This method delegates to the {@link RMIClassLoaderSpi#getClassLoader(String)} method of the provider instance, passing codebase as the argument. If there is a security manger, its checkPermission method will be invoked with a RuntimePermission(getClassLoader) permission; this could result in a SecurityException. The provider implementation of this method may also perform further security checks to verify that the calling context has permission to connect to all of the URLs in the codebase URL path. @param	codebase the list of URLs (space-separated) from which the returned class loader will load classes from, or null @return a class loader that loads classes from the given codebase URL path @throws	MalformedURLException if codebase is non-null and contains an invalid URL, or if codebase is null and a provider-specific URL used to identify the class loader is invalid @throws	SecurityException if there is a security manager and the invocation of its checkPermission method fails, or if the caller does not have permission to connect to all of the URLs in the codebase URL path @since	1.3
class,java/rmi/server/ObjID, An ObjID is used to identify a remote object exported to an RMI runtime. When a remote object is exported, it is assigned an object identifier either implicitly or explicitly, depending on the API used to export. The {@link #ObjID()} constructor can be used to generate a unique object identifier. Such an ObjID is unique over time with respect to the host it is generated on. The {@link #ObjID(int)} constructor can be used to create a well-known object identifier. The scope of a well-known ObjID depends on the RMI runtime it is exported to. An ObjID instance contains an object number (of type long) and an address space identifier (of type {@link UID}). In a unique ObjID, the address space identifier is unique with respect to a given host over time. In a well-known ObjID, the address space identifier is equivalent to one returned by invoking the {@link UID#UID(short)} constructor with the value zero. If the system property java.rmi.server.randomIDs is defined to equal the string true (case insensitive), then the {@link #ObjID()} constructor will use a cryptographically strong random number generator to choose the object number of the returned ObjID. @author	Ann Wollrath @author	Peter Jones @version	1.32, 10/03/23 @since	JDK1.1
method,java/rmi/server/ObjID/write/ObjectOutput, Marshals a binary representation of this ObjID to an ObjectOutput instance. Specifically, this method first invokes the given stream's {@link ObjectOutput#writeLong(long)} method with this object identifier's object number, and then it writes its address space identifier by invoking its {@link UID#write(DataOutput)} method with the stream. @param	out the ObjectOutput instance to write this ObjID to @throws	IOException if an I/O error occurs while performing this operation
method,java/rmi/server/ObjID/read/ObjectInput, Constructs and returns a new ObjID instance by unmarshalling a binary representation from an ObjectInput instance. Specifically, this method first invokes the given stream's {@link ObjectInput#readLong()} method to read an object number, then it invokes {@link UID#read(DataInput)} with the stream to read an address space identifier, and then it creates and returns a new ObjID instance that contains the object number and address space identifier that were read from the stream. @param	in the ObjectInput instance to read ObjID from @return	unmarshalled ObjID instance @throws	IOException if an I/O error occurs while performing this operation
method,java/rmi/server/ObjID/equals/Object, Compares the specified object with this ObjID for equality. This method returns true if and only if the specified object is an ObjID instance with the same object number and address space identifier as this one. @param	obj the object to compare this ObjID to @return	true if the given object is equivalent to this one, and false otherwise
method,java/rmi/server/ObjID/ObjID/, Generates a unique object identifier. If the system property java.rmi.server.randomIDs is defined to equal the string true (case insensitive), then this constructor will use a cryptographically strong random number generator to choose the object number of the returned ObjID.
class,java/rmi/server/LogStream, LogStream provides a mechanism for logging errors that are of possible interest to those monitoring a system. @version 1.22, 03/23/10 @author Ann Wollrath (lots of code stolen from Ken Arnold) @since JDK1.1 @deprecated no replacement
method,java/rmi/server/LogStream/log/String, Return the LogStream identified by the given name. If a log corresponding to name does not exist, a log using the default stream is created. @param name name identifying the desired LogStream @return log associated with given name @since JDK1.1 @deprecated no replacement
method,java/rmi/registry/RegistryHandler/registryStub/String;int, Returns a stub for contacting a remote registry on the specified host and port. @deprecated no replacement. As of the Java 2 platform v1.2, RMI no longer uses the RegistryHandler to obtain the registry's stub. @param host name of remote registry host @param port remote registry port @return remote registry stub @throws RemoteException if a remote error occurs @throws UnknownHostException if unable to resolve given hostname
method,java/rmi/registry/Registry/lookup/String, Returns the remote reference bound to the specified name in this registry. @param	name the name for the remote reference to look up @return	a reference to a remote object @throws	NotBoundException if name is not currently bound @throws	RemoteException if remote communication with the registry failed; if exception is a ServerException containing an AccessException, then the registry denies the caller access to perform this operation @throws	AccessException if this registry is local and it denies the caller access to perform this operation @throws	NullPointerException if name is null
method,java/rmi/registry/Registry/bind/String;Remote, Binds a remote reference to the specified name in this registry. @param	name the name to associate with the remote reference @param	obj a reference to a remote object (usually a stub) @throws	AlreadyBoundException if name is already bound @throws	RemoteException if remote communication with the registry failed; if exception is a ServerException containing an AccessException, then the registry denies the caller access to perform this operation (if originating from a non-local host, for example) @throws	AccessException if this registry is local and it denies the caller access to perform this operation @throws	NullPointerException if name is null, or if obj is null
method,java/rmi/registry/Registry/unbind/String, Removes the binding for the specified name in this registry. @param	name the name of the binding to remove @throws	NotBoundException if name is not currently bound @throws	RemoteException if remote communication with the registry failed; if exception is a ServerException containing an AccessException, then the registry denies the caller access to perform this operation (if originating from a non-local host, for example) @throws	AccessException if this registry is local and it denies the caller access to perform this operation @throws	NullPointerException if name is null
method,java/rmi/registry/Registry/rebind/String;Remote, Replaces the binding for the specified name in this registry with the supplied remote reference. If there is an existing binding for the specified name, it is discarded. @param	name the name to associate with the remote reference @param	obj a reference to a remote object (usually a stub) @throws	RemoteException if remote communication with the registry failed; if exception is a ServerException containing an AccessException, then the registry denies the caller access to perform this operation (if originating from a non-local host, for example) @throws	AccessException if this registry is local and it denies the caller access to perform this operation @throws	NullPointerException if name is null, or if obj is null
method,java/rmi/registry/Registry/list/, Returns an array of the names bound in this registry. The array will contain a snapshot of the names bound in this registry at the time of the given invocation of this method. @return	an array of the names bound in this registry @throws	RemoteException if remote communication with the registry failed; if exception is a ServerException containing an AccessException, then the registry denies the caller access to perform this operation @throws	AccessException if this registry is local and it denies the caller access to perform this operation
class,java/rmi/registry/LocateRegistry, LocateRegistry is used to obtain a reference to a bootstrap remote object registry on a particular host (including the local host), or to create a remote object registry that accepts calls on a specific port. Note that a getRegistry call does not actually make a connection to the remote host. It simply creates a local reference to the remote registry and will succeed even if no registry is running on the remote host. Therefore, a subsequent method invocation to a remote registry returned as a result of this method may fail. @version 1.35, 03/23/10 @author Ann Wollrath @author Peter Jones @since JDK1.1 @see java.rmi.registry.Registry
method,java/rmi/registry/LocateRegistry/createRegistry/int, Creates and exports a Registry instance on the local host that accepts requests on the specified port. The Registry instance is exported as if the static {@link UnicastRemoteObject.exportObject(Remote,int) UnicastRemoteObject.exportObject} method is invoked, passing the Registry instance and the specified port as arguments, except that the Registry instance is exported with a well-known object identifier, an {@link ObjID} instance constructed with the value {@link ObjID#REGISTRY_ID}. @param port the port on which the registry accepts requests @return the registry @exception RemoteException if the registry could not be exported @since JDK1.1
method,java/rmi/registry/LocateRegistry/createRegistry/int;RMIClientSocketFactory;RMIServerSocketFactory, Creates and exports a Registry instance on the local host that uses custom socket factories for communication with that instance. The registry that is created listens for incoming requests on the given port using a ServerSocket created from the supplied RMIServerSocketFactory. The Registry instance is exported as if the static {@link UnicastRemoteObject.exportObject(Remote,int,RMIClientSocketFactory,RMIServerSocketFactory) UnicastRemoteObject.exportObject} method is invoked, passing the Registry instance, the specified port, the specified RMIClientSocketFactory, and the specified RMIServerSocketFactory as arguments, except that the Registry instance is exported with a well-known object identifier, an {@link ObjID} instance constructed with the value {@link ObjID#REGISTRY_ID}. @param port port on which the registry accepts requests @param csf client-side Socket factory used to make connections to the registry @param ssf server-side ServerSocket factory used to accept connections to the registry @return the registry @exception RemoteException if the registry could not be exported @since 1.2
class,java/lang/VirtualMachineError, Thrown to indicate that the Java Virtual Machine is broken or has run out of resources necessary for it to continue operating. @author Frank Yellin @version 1.16, 03/23/10 @since JDK1.0
method,java/lang/UnsupportedOperationException/UnsupportedOperationException/String;Throwable, Constructs a new exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this exception's detail message. @param message the detail message (which is saved for later retrieval by the {@link Throwable#getMessage()} method). @param cause the cause (which is saved for later retrieval by the {@link Throwable#getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.5
class,java/lang/TypeNotPresentException, Thrown when an application tries to access a type using a string representing the type's name, but no definition for the type with the specified name can be found. This exception differs from {@link ClassNotFoundException} in that ClassNotFoundException is a checked exception, whereas this exception is unchecked. Note that this exception may be used when undefined type variables are accessed as well as when types (e.g., classes, interfaces or annotation types) are loaded. @author Josh Bloch @since 1.5
method,java/lang/Throwable/getMessage/, Returns the detail message string of this throwable. @return the detail message string of this Throwable instance (which may be null).
method,java/lang/Throwable/getCause/, Returns the cause of this throwable or null if the cause is nonexistent or unknown. (The cause is the throwable that caused this throwable to get thrown.) This implementation returns the cause that was supplied via one of the constructors requiring a Throwable, or that was set after creation with the {@link #initCause(Throwable)} method. While it is typically unnecessary to override this method, a subclass can override it to return a cause set by some other means. This is appropriate for a legacy chained throwable that predates the addition of chained exceptions to Throwable. Note that it is not necessary to override any of the PrintStackTrace methods, all of which invoke the getCause method to determine the cause of a throwable. @return the cause of this throwable or null if the cause is nonexistent or unknown. @since 1.4
method,java/lang/Throwable/initCause/Throwable, Initializes the cause of this throwable to the specified value. (The cause is the throwable that caused this throwable to get thrown.) This method can be called at most once. It is generally called from within the constructor, or immediately after creating the throwable. If this throwable was created with {@link #Throwable(Throwable)} or {@link #Throwable(String,Throwable)}, this method cannot be called even once. @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @return a reference to this Throwable instance. @throws IllegalArgumentException if cause is this throwable. (A throwable cannot be its own cause.) @throws IllegalStateException if this throwable was created with {@link #Throwable(Throwable)} or {@link #Throwable(String,Throwable)}, or this method has already been called on this throwable. @since 1.4
method,java/lang/Throwable/toString/, Returns a short description of this throwable. The result is the concatenation of: the {@linkplain Class#getName() name} of the class of this object : (a colon and a space) the result of invoking this object's {@link #getLocalizedMessage} method If getLocalizedMessage returns null, then just the class name is returned. @return a string representation of this throwable.
method,java/lang/Throwable/fillInStackTrace/, Fills in the execution stack trace. This method records within this Throwable object information about the current state of the stack frames for the current thread. @return a reference to this Throwable instance. @see java.lang.Throwable#printStackTrace()
method,java/lang/Throwable/getStackTrace/, Provides programmatic access to the stack trace information printed by {@link #printStackTrace()}. Returns an array of stack trace elements, each representing one stack frame. The zeroth element of the array (assuming the array's length is non-zero) represents the top of the stack, which is the last method invocation in the sequence. Typically, this is the point at which this throwable was created and thrown. The last element of the array (assuming the array's length is non-zero) represents the bottom of the stack, which is the first method invocation in the sequence. Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this throwable is permitted to return a zero-length array from this method. Generally speaking, the array returned by this method will contain one element for every frame that would be printed by printStackTrace. @return an array of stack trace elements representing the stack trace pertaining to this throwable. @since 1.4
method,java/lang/Throwable/setStackTrace/StackTraceElement[], Sets the stack trace elements that will be returned by {@link #getStackTrace()} and printed by {@link #printStackTrace()} and related methods. This method, which is designed for use by RPC frameworks and other advanced systems, allows the client to override the default stack trace that is either generated by {@link #fillInStackTrace()} when a throwable is constructed or deserialized when a throwable is read from a serialization stream. @param stackTrace the stack trace elements to be associated with this Throwable. The specified array is copied by this call; changes in the specified array after the method invocation returns will have no affect on this Throwable's stack trace. @throws NullPointerException if stackTrace is null, or if any of the elements of stackTrace are null @since 1.4
method,java/lang/Throwable/Throwable/, Constructs a new throwable with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}. The {@link #fillInStackTrace()} method is called to initialize the stack trace data in the newly created throwable.
method,java/lang/Throwable/Throwable/String, Constructs a new throwable with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}. The {@link #fillInStackTrace()} method is called to initialize the stack trace data in the newly created throwable. @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
method,java/lang/Throwable/Throwable/String;Throwable, Constructs a new throwable with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this throwable's detail message. The {@link #fillInStackTrace()} method is called to initialize the stack trace data in the newly created throwable. @param message the detail message (which is saved for later retrieval by the {@link #getMessage()} method). @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.4
method,java/lang/Throwable/Throwable/Throwable, Constructs a new throwable with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause). This constructor is useful for throwables that are little more than wrappers for other throwables (for example, {@link java.security.PrivilegedActionException}). The {@link #fillInStackTrace()} method is called to initialize the stack trace data in the newly created throwable. @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.4
class,java/lang/ThreadLocal, This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its get or set method) has its own, independently initialized copy of the variable. ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID). For example, the class below generates unique identifiers local to each thread. A thread's id is assigned the first time it invokes UniqueThreadIdGenerator.getCurrentThreadId() and remains unchanged on subsequent calls. import java.util.concurrent.atomic.AtomicInteger; public class UniqueThreadIdGenerator { private static final AtomicInteger uniqueId = new AtomicInteger(0); private static final ThreadLocal &lt; Integer > uniqueNum = new ThreadLocal &lt; Integer > () { &#64;Override protected Integer initialValue() { return uniqueId.getAndIncrement(); } }; public static int getCurrentThreadId() { return uniqueId.get(); } } // UniqueThreadIdGenerator Each thread holds an implicit reference to its copy of a thread-local variable as long as the thread is alive and the ThreadLocal instance is accessible; after a thread goes away, all of its copies of thread-local instances are subject to garbage collection (unless other references to these copies exist). @author Josh Bloch and Doug Lea @version 1.43, 03/23/10 @since 1.2
method,java/lang/ThreadLocal/get/, Returns the value in the current thread's copy of this thread-local variable. If the variable has no value for the current thread, it is first initialized to the value returned by an invocation of the {@link #initialValue} method. @return the current thread's value of this thread-local
method,java/lang/ThreadLocal/set/Object, Sets the current thread's copy of this thread-local variable to the specified value. Most subclasses will have no need to override this method, relying solely on the {@link #initialValue} method to set the values of thread-locals. @param value the value to be stored in the current thread's copy of this thread-local.
method,java/lang/ThreadLocal/remove/, Removes the current thread's value for this thread-local variable. If this thread-local variable is subsequently {@linkplain #get read} by the current thread, its value will be reinitialized by invoking its {@link #initialValue} method, unless its value is {@linkplain #set set} by the current thread in the interim. This may result in multiple invocations of the initialValue method in the current thread. @since 1.5
method,java/lang/ThreadLocal/ThreadLocal/, Creates a thread local variable.
class,java/lang/ThreadGroup, A thread group represents a set of threads. In addition, a thread group can also include other thread groups. The thread groups form a tree in which every thread group except the initial thread group has a parent. A thread is allowed to access information about its own thread group, but not to access information about its thread group's parent thread group or any other thread groups. @author unascribed @version 1.68, 03/23/10 @since JDK1.0
method,java/lang/ThreadGroup/getName/, Returns the name of this thread group. @return the name of this thread group. @since JDK1.0
method,java/lang/ThreadGroup/getParent/, Returns the parent of this thread group. First, if the parent is not null, the checkAccess method of the parent thread group is called with no arguments; this may result in a security exception. @return the parent of this thread group. The top-level thread group is the only thread group whose parent is null. @exception SecurityException if the current thread cannot modify this thread group. @see java.lang.ThreadGroup#checkAccess() @see java.lang.SecurityException @see java.lang.RuntimePermission @since JDK1.0
method,java/lang/ThreadGroup/getMaxPriority/, Returns the maximum priority of this thread group. Threads that are part of this group cannot have a higher priority than the maximum priority. @return the maximum priority that a thread in this thread group can have. @see #setMaxPriority @since JDK1.0
method,java/lang/ThreadGroup/isDaemon/, Tests if this thread group is a daemon thread group. A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed. @return true if this thread group is a daemon thread group; false otherwise. @since JDK1.0
method,java/lang/ThreadGroup/isDestroyed/, Tests if this thread group has been destroyed. @return true if this object is destroyed @since JDK1.1
method,java/lang/ThreadGroup/setDaemon/boolean, Changes the daemon status of this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed. @param daemon if true, marks this thread group as a daemon thread group; otherwise, marks this thread group as normal. @exception SecurityException if the current thread cannot modify this thread group. @see java.lang.SecurityException @see java.lang.ThreadGroup#checkAccess() @since JDK1.0
method,java/lang/ThreadGroup/setMaxPriority/int, Sets the maximum priority of the group. Threads in the thread group that already have a higher priority are not affected. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. If the pri argument is less than {@link Thread#MIN_PRIORITY} or greater than {@link Thread#MAX_PRIORITY}, the maximum priority of the group remains unchanged. Otherwise, the priority of this ThreadGroup object is set to the smaller of the specified pri and the maximum permitted priority of the parent of this thread group. (If this thread group is the system thread group, which has no parent, then its maximum priority is simply set to pri.) Then this method is called recursively, with pri as its argument, for every thread group that belongs to this thread group. @param pri the new priority of the thread group. @exception SecurityException if the current thread cannot modify this thread group. @see #getMaxPriority @see java.lang.SecurityException @see java.lang.ThreadGroup#checkAccess() @since JDK1.0
method,java/lang/ThreadGroup/parentOf/ThreadGroup, Tests if this thread group is either the thread group argument or one of its ancestor thread groups. @param g a thread group. @return true if this thread group is the thread group argument or one of its ancestor thread groups; false otherwise. @since JDK1.0
method,java/lang/ThreadGroup/checkAccess/, Determines if the currently running thread has permission to modify this thread group. If there is a security manager, its checkAccess method is called with this thread group as its argument. This may result in throwing a SecurityException. @exception SecurityException if the current thread is not allowed to access this thread group. @see java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup) @since JDK1.0
method,java/lang/ThreadGroup/stop/, Stops all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the stop method on all the threads in this thread group and in all of its subgroups. @exception SecurityException if the current thread is not allowed to access this thread group or any of the threads in the thread group. @see java.lang.SecurityException @see java.lang.Thread#stop() @see java.lang.ThreadGroup#checkAccess() @since JDK1.0 @deprecated This method is inherently unsafe. See {@link Thread#stop} for details.
method,java/lang/ThreadGroup/interrupt/, Interrupts all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the interrupt method on all the threads in this thread group and in all of its subgroups. @exception SecurityException if the current thread is not allowed to access this thread group or any of the threads in the thread group. @see java.lang.Thread#interrupt() @see java.lang.SecurityException @see java.lang.ThreadGroup#checkAccess() @since 1.2
method,java/lang/ThreadGroup/suspend/, Suspends all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the suspend method on all the threads in this thread group and in all of its subgroups. @exception SecurityException if the current thread is not allowed to access this thread group or any of the threads in the thread group. @see java.lang.Thread#suspend() @see java.lang.SecurityException @see java.lang.ThreadGroup#checkAccess() @since JDK1.0 @deprecated This method is inherently deadlock-prone. See {@link Thread#suspend} for details.
method,java/lang/ThreadGroup/resume/, Resumes all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the resume method on all the threads in this thread group and in all of its sub groups. @exception SecurityException if the current thread is not allowed to access this thread group or any of the threads in the thread group. @see java.lang.SecurityException @see java.lang.Thread#resume() @see java.lang.ThreadGroup#checkAccess() @since JDK1.0 @deprecated This method is used solely in conjunction with Thread.suspend and ThreadGroup.suspend, both of which have been deprecated, as they are inherently deadlock-prone. See {@link Thread#suspend} for details.
method,java/lang/ThreadGroup/list/, Prints information about this thread group to the standard output. This method is useful only for debugging. @since JDK1.0
method,java/lang/ThreadGroup/allowThreadSuspension/boolean, Used by VM to control lowmem implicit suspension. @param b boolean to allow or disallow suspension @return true on success @since JDK1.1 @deprecated The definition of this call depends on {@link #suspend},		 which is deprecated. Further, the behavior of this call		 was never specified.
method,java/lang/ThreadGroup/toString/, Returns a string representation of this Thread group. @return a string representation of this thread group. @since JDK1.0
method,java/lang/ThreadGroup/ThreadGroup/String, Constructs a new thread group. The parent of this new group is the thread group of the currently running thread. The checkAccess method of the parent thread group is called with no arguments; this may result in a security exception. @param name the name of the new thread group. @exception SecurityException if the current thread cannot create a thread in the specified thread group. @see java.lang.ThreadGroup#checkAccess() @since JDK1.0
method,java/lang/ThreadGroup/ThreadGroup/ThreadGroup;String, Creates a new thread group. The parent of this new group is the specified thread group. The checkAccess method of the parent thread group is called with no arguments; this may result in a security exception. @param parent the parent thread group. @param name the name of the new thread group. @exception NullPointerException if the thread group argument is null. @exception SecurityException if the current thread cannot create a thread in the specified thread group. @see java.lang.SecurityException @see java.lang.ThreadGroup#checkAccess() @since JDK1.0
method,java/lang/ThreadDeath/ThreadDeath/,
method,java/lang/Thread/currentThread/, Returns a reference to the currently executing thread object. @return the currently executing thread.
method,java/lang/Thread/yield/, Causes the currently executing thread object to temporarily pause and allow other threads to execute. 
method,java/lang/Thread/sleep/long, Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors. @param millis the length of time to sleep in milliseconds. @exception InterruptedException if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown. @see Object#notify()
method,java/lang/Thread/sleep/long;int, Causes the currently executing thread to sleep (cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors. @param millis the length of time to sleep in milliseconds. @param nanos 0-999999 additional nanoseconds to sleep. @exception IllegalArgumentException if the value of millis is negative or the value of nanos is not in the range 0-999999. @exception InterruptedException if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown. @see Object#notify()
method,java/lang/Thread/start/, Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread. The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method). It is never legal to start a thread more than once. In particular, a thread may not be restarted once it has completed execution. @exception IllegalThreadStateException if the thread was already started. @see #run() @see #stop()
method,java/lang/Thread/run/, If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns. Subclasses of Thread should override this method. @see #start() @see #stop() @see #Thread(ThreadGroup, Runnable, String)
method,java/lang/Thread/stop/Throwable, Forces the thread to stop executing. If there is a security manager installed, the checkAccess method of this thread is called, which may result in a SecurityException being raised (in the current thread). If this thread is different from the current thread (that is, the current thread is trying to stop a thread other than itself) or obj is not an instance of ThreadDeath, the security manager's checkPermission method (with the RuntimePermission(stopThread) argument) is called in addition. Again, this may result in throwing a SecurityException (in the current thread). If the argument obj is null, a NullPointerException is thrown (in the current thread). The thread represented by this thread is forced to stop whatever it is doing abnormally and to throw the Throwable object obj as an exception. This is an unusual action to take; normally, the stop method that takes no arguments should be used. It is permitted to stop a thread that has not yet been started. If the thread is eventually started, it immediately terminates. @param obj the Throwable object to be thrown. @exception SecurityException if the current thread cannot modify this thread. @throws NullPointerException if obj is null. @see #interrupt() @see #checkAccess() @see #run() @see #start() @see #stop() @see SecurityManager#checkAccess(Thread) @see SecurityManager#checkPermission @deprecated This method is inherently unsafe. See {@link #stop()} for details. An additional danger of this method is that it may be used to generate exceptions that the target thread is unprepared to handle (including checked exceptions that the thread could not possibly throw, were it not for this method). For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?.
method,java/lang/Thread/interrupt/, Interrupts this thread. Unless the current thread is interrupting itself, which is always permitted, the {@link #checkAccess() checkAccess} method of this thread is invoked, which may cause a {@link SecurityException} to be thrown. If this thread is blocked in an invocation of the {@link Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link Object#wait(long, int) wait(long, int)} methods of the {@link Object} class, or of the {@link #join()}, {@link #join(long)}, {@link #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)}, methods of this class, then its interrupt status will be cleared and it will receive an {@link InterruptedException}. If this thread is blocked in an I/O operation upon an {@link java.nio.channels.InterruptibleChannel interruptible channel} then the channel will be closed, the thread's interrupt status will be set, and the thread will receive a {@link java.nio.channels.ClosedByInterruptException}. If this thread is blocked in a {@link java.nio.channels.Selector} then the thread's interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector's {@link java.nio.channels.Selector#wakeup wakeup} method were invoked. If none of the previous conditions hold then this thread's interrupt status will be set. Interrupting a thread that is not alive need not have any effect. @throws SecurityException if the current thread cannot modify this thread @revised 6.0 @spec JSR-51
method,java/lang/Thread/isInterrupted/, Tests whether this thread has been interrupted. The interrupted status of the thread is unaffected by this method. A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false. @return true if this thread has been interrupted; false otherwise. @see #interrupted() @revised 6.0
method,java/lang/Thread/destroy/, Throws {@link NoSuchMethodError}. @deprecated This method was originally designed to destroy this thread without any cleanup. Any monitors it held would have remained locked. However, the method was never implemented. If if were to be implemented, it would be deadlock-prone in much the manner of {@link #suspend}. If the target thread held a lock protecting a critical system resource when it was destroyed, no thread could ever access this resource again. If another thread ever attempted to lock this resource, deadlock would result. Such deadlocks typically manifest themselves as frozen processes. For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?. @throws NoSuchMethodError always
method,java/lang/Thread/isAlive/, Tests if this thread is alive. A thread is alive if it has been started and has not yet died. @return true if this thread is alive; false otherwise.
method,java/lang/Thread/suspend/, Suspends this thread. First, the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException (in the current thread). If the thread is alive, it is suspended and makes no further progress unless and until it is resumed. @exception SecurityException if the current thread cannot modify this thread. @see #checkAccess @deprecated This method has been deprecated, as it is inherently deadlock-prone. If the target thread holds a lock on the monitor protecting a critical system resource when it is suspended, no thread can access this resource until the target thread is resumed. If the thread that would resume the target thread attempts to lock this monitor prior to calling resume, deadlock results. Such deadlocks typically manifest themselves as frozen processes. For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?.
method,java/lang/Thread/resume/, Resumes a suspended thread. First, the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException (in the current thread). If the thread is alive but suspended, it is resumed and is permitted to make progress in its execution. @exception SecurityException if the current thread cannot modify this thread. @see #checkAccess @see #suspend() @deprecated This method exists solely for use with {@link #suspend}, which has been deprecated because it is deadlock-prone. For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?.
method,java/lang/Thread/setPriority/int, Changes the priority of this thread. First the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException. Otherwise, the priority of this thread is set to the smaller of the specified newPriority and the maximum permitted priority of the thread's thread group. @param newPriority priority to set this thread to @exception IllegalArgumentException If the priority is not in the range MIN_PRIORITY to MAX_PRIORITY. @exception SecurityException if the current thread cannot modify this thread. @see #getPriority @see #checkAccess() @see #getThreadGroup() @see #MAX_PRIORITY @see #MIN_PRIORITY @see ThreadGroup#getMaxPriority()
method,java/lang/Thread/getPriority/, Returns this thread's priority. @return this thread's priority. @see #setPriority
method,java/lang/Thread/setName/String, Changes the name of this thread to be equal to the argument name. First the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException. @param name the new name for this thread. @exception SecurityException if the current thread cannot modify this thread. @see #getName @see #checkAccess()
method,java/lang/Thread/getName/, Returns this thread's name. @return this thread's name. @see #setName(String)
method,java/lang/Thread/getThreadGroup/, Returns the thread group to which this thread belongs. This method returns null if this thread has died (been stopped). @return this thread's thread group.
method,java/lang/Thread/activeCount/, Returns the number of active threads in the current thread's thread group. @return the number of active threads in the current thread's thread group.
method,java/lang/Thread/enumerate/Thread[], Copies into the specified array every active thread in the current thread's thread group and its subgroups. This method simply calls the enumerate method of the current thread's thread group with the array argument. First, if there is a security manager, that enumerate method calls the security manager's checkAccess method with the thread group as its argument. This may result in throwing a SecurityException. @param tarray an array of Thread objects to copy to @return the number of threads put into the array @exception SecurityException if a security manager exists and its checkAccess method doesn't allow the operation. @see ThreadGroup#enumerate(Thread[]) @see SecurityManager#checkAccess(ThreadGroup)
method,java/lang/Thread/countStackFrames/, Counts the number of stack frames in this thread. The thread must be suspended. @return the number of stack frames in this thread. @exception IllegalThreadStateException if this thread is not suspended. @deprecated The definition of this call depends on {@link #suspend},		 which is deprecated. Further, the results of this call		 were never well-defined.
method,java/lang/Thread/join/long, Waits at most millis milliseconds for this thread to die. A timeout of 0 means to wait forever. @param millis the time to wait in milliseconds. @exception InterruptedException if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown.
method,java/lang/Thread/join/, Waits for this thread to die. @exception InterruptedException if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown.
method,java/lang/Thread/isDaemon/, Tests if this thread is a daemon thread. @return true if this thread is a daemon thread; false otherwise. @see #setDaemon(boolean)
method,java/lang/Thread/checkAccess/, Determines if the currently running thread has permission to modify this thread. If there is a security manager, its checkAccess method is called with this thread as its argument. This may result in throwing a SecurityException. @exception SecurityException if the current thread is not allowed to access this thread. @see SecurityManager#checkAccess(Thread)
method,java/lang/Thread/toString/, Returns a string representation of this thread, including the thread's name, priority, and thread group. @return a string representation of this thread.
method,java/lang/Thread/getContextClassLoader/, Returns the context ClassLoader for this Thread. The context ClassLoader is provided by the creator of the thread for use by code running in this thread when loading classes and resources. If not set, the default is the ClassLoader context of the parent Thread. The context ClassLoader of the primordial thread is typically set to the class loader used to load the application. First, if there is a security manager, and the caller's class loader is not null and the caller's class loader is not the same as or an ancestor of the context class loader for the thread whose context class loader is being requested, then the security manager's checkPermission method is called with a RuntimePermission(getClassLoader) permission to see if it's ok to get the context ClassLoader.. @return the context ClassLoader for this Thread @throws SecurityException if a security manager exists and its checkPermission method doesn't allow getting the context ClassLoader. @see #setContextClassLoader @see SecurityManager#checkPermission @see RuntimePermission @since 1.2
method,java/lang/Thread/setContextClassLoader/ClassLoader, Sets the context ClassLoader for this Thread. The context ClassLoader can be set when a thread is created, and allows the creator of the thread to provide the appropriate class loader to code running in the thread when loading classes and resources. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(setContextClassLoader) permission to see if it's ok to set the context ClassLoader.. @param cl the context ClassLoader for this Thread @exception SecurityException if the current thread cannot set the context ClassLoader. @see #getContextClassLoader @see SecurityManager#checkPermission @see RuntimePermission @since 1.2 
method,java/lang/Thread/holdsLock/Object, Returns true if and only if the current thread holds the monitor lock on the specified object. This method is designed to allow a program to assert that the current thread already holds a specified lock: assert Thread.holdsLock(obj); @param obj the object on which to test lock ownership @throws NullPointerException if obj is null @return true if the current thread holds the monitor lock on the specified object. @since 1.4
method,java/lang/Thread/getStackTrace/, Returns an array of stack trace elements representing the stack dump of this thread. This method will return a zero-length array if this thread has not started or has terminated. If the returned array is of non-zero length then the first element of the array represents the top of the stack, which is the most recent method invocation in the sequence. The last element of the array represents the bottom of the stack, which is the least recent method invocation in the sequence. If there is a security manager, and this thread is not the current thread, then the security manager's checkPermission method is called with a RuntimePermission(getStackTrace) permission to see if it's ok to get the stack trace. Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this thread is permitted to return a zero-length array from this method. @return an array of StackTraceElement, each represents one stack frame. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow getting the stack trace of thread. @see SecurityManager#checkPermission @see RuntimePermission @see Throwable#getStackTrace @since 1.5
method,java/lang/Thread/getAllStackTraces/, Returns a map of stack traces for all live threads. The map keys are threads and each map value is an array of StackTraceElement that represents the stack dump of the corresponding Thread. The returned stack traces are in the format specified for the {@link #getStackTrace getStackTrace} method. The threads may be executing while this method is called. The stack trace of each thread only represents a snapshot and each stack trace may be obtained at different time. A zero-length array will be returned in the map value if the virtual machine has no stack trace information about a thread. If there is a security manager, then the security manager's checkPermission method is called with a RuntimePermission(getStackTrace) permission as well as RuntimePermission(modifyThreadGroup) permission to see if it is ok to get the stack trace of all threads. @return a Map from Thread to an array of StackTraceElement that represents the stack trace of the corresponding thread. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow getting the stack trace of thread. @see #getStackTrace @see SecurityManager#checkPermission @see RuntimePermission @see Throwable#getStackTrace @since 1.5
method,java/lang/Thread/getId/, Returns the identifier of this Thread. The thread ID is a positive long number generated when this thread was created. The thread ID is unique and remains unchanged during its lifetime. When a thread is terminated, this thread ID may be reused. @return this thread's ID. @since 1.5
method,java/lang/Thread/getState/, Returns the state of this thread. This method is designed for use in monitoring of the system state, not for synchronization control. @return this thread's state. @since 1.5
method,java/lang/Thread/getDefaultUncaughtExceptionHandler/, Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception. If the returned value is null, there is no default. @since 1.5 @see #setDefaultUncaughtExceptionHandler
method,java/lang/Thread/getUncaughtExceptionHandler/, Returns the handler invoked when this thread abruptly terminates due to an uncaught exception. If this thread has not had an uncaught exception handler explicitly set then this thread's ThreadGroup object is returned, unless this thread has terminated, in which case null is returned. @since 1.5
method,java/lang/Thread/setUncaughtExceptionHandler/UncaughtExceptionHandler, Set the handler invoked when this thread abruptly terminates due to an uncaught exception. A thread can take full control of how it responds to uncaught exceptions by having its uncaught exception handler explicitly set. If no such handler is set then the thread's ThreadGroup object acts as its handler. @param eh the object to use as this thread's uncaught exception handler. If null then this thread has no explicit handler. @throws SecurityException if the current thread is not allowed to modify this thread. @see #setDefaultUncaughtExceptionHandler @see ThreadGroup#uncaughtException @since 1.5
method,java/lang/Thread/Thread/, Allocates a new Thread object. This constructor has the same effect as Thread(null, null, gname), where gname is a newly generated name. Automatically generated names are of the form Thread-+n, where n is an integer. @see #Thread(ThreadGroup, Runnable, String)
method,java/lang/Thread/Thread/Runnable, Allocates a new Thread object. This constructor has the same effect as Thread(null, target, gname), where gname is a newly generated name. Automatically generated names are of the form Thread-+n, where n is an integer. @param target the object whose run method is called. @see #Thread(ThreadGroup, Runnable, String)
method,java/lang/Thread/Thread/ThreadGroup;Runnable, Allocates a new Thread object. This constructor has the same effect as Thread(group, target, gname), where gname is a newly generated name. Automatically generated names are of the form Thread-+n, where n is an integer. @param group the thread group. @param target the object whose run method is called. @exception SecurityException if the current thread cannot create a thread in the specified thread group. @see #Thread(ThreadGroup, Runnable, String)
method,java/lang/Thread/Thread/String, Allocates a new Thread object. This constructor has the same effect as Thread(null, null, name). @param name the name of the new thread. @see #Thread(ThreadGroup, Runnable, String)
method,java/lang/Thread/Thread/ThreadGroup;String, Allocates a new Thread object. This constructor has the same effect as Thread(group, null, name) @param group the thread group. @param name the name of the new thread. @exception SecurityException if the current thread cannot create a thread in the specified thread group. @see #Thread(ThreadGroup, Runnable, String)
method,java/lang/Thread/Thread/Runnable;String, Allocates a new Thread object. This constructor has the same effect as Thread(null, target, name). @param target the object whose run method is called. @param name the name of the new thread. @see #Thread(ThreadGroup, Runnable, String)
method,java/lang/Thread/Thread/ThreadGroup;Runnable;String, Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group. If group is null and there is a security manager, the group is determined by the security manager's getThreadGroup method. If group is null and there is not a security manager, or the security manager's getThreadGroup method returns null, the group is set to be the same ThreadGroup as the thread that is creating the new thread. If there is a security manager, its checkAccess method is called with the ThreadGroup as its argument. In addition, its checkPermission method is called with the RuntimePermission(enableContextClassLoaderOverride) permission when invoked directly or indirectly by the constructor of a subclass which overrides the getContextClassLoader or setContextClassLoader methods. This may result in a SecurityException. If the target argument is not null, the run method of the target is called when this thread is started. If the target argument is null, this thread's run method is called when this thread is started. The priority of the newly created thread is set equal to the priority of the thread creating it, that is, the currently running thread. The method setPriority may be used to change the priority to a new value. The newly created thread is initially marked as being a daemon thread if and only if the thread creating it is currently marked as a daemon thread. The method setDaemon may be used to change whether or not a thread is a daemon. @param group the thread group. @param target the object whose run method is called. @param name the name of the new thread. @exception SecurityException if the current thread cannot create a thread in the specified thread group or cannot override the context class loader methods. @see Runnable#run() @see #run() @see #setDaemon(boolean) @see #setPriority(int) @see ThreadGroup#checkAccess() @see SecurityManager#checkAccess
field,java/lang/Thread/MIN_PRIORITY, The minimum priority that a thread can have. 
field,java/lang/Thread/NORM_PRIORITY, The default priority that is assigned to a thread. 
field,java/lang/Thread/MAX_PRIORITY, The maximum priority that a thread can have. 
class,java/lang/Thread/State, A thread state. A thread can be in one of the following states: {@link #NEW} A thread that has not yet started is in this state. {@link #RUNNABLE} A thread executing in the Java virtual machine is in this state. {@link #BLOCKED} A thread that is blocked waiting for a monitor lock is in this state. {@link #WAITING} A thread that is waiting indefinitely for another thread to perform a particular action is in this state. {@link #TIMED_WAITING} A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state. {@link #TERMINATED} A thread that has exited is in this state. A thread can be in only one state at a given point in time. These states are virtual machine states which do not reflect any operating system thread states. @since 1.5 @see #getState
method,java/lang/Thread/State/values/,
method,java/lang/Thread/State/valueOf/String,
field,java/lang/Thread/State/NEW, Thread state for a thread which has not yet started.
field,java/lang/Thread/State/RUNNABLE, Thread state for a runnable thread. A thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating system such as processor.
field,java/lang/Thread/State/BLOCKED, Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling {@link Object#wait() Object.wait}.
field,java/lang/Thread/State/WAITING, Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods: {@link Object#wait() Object.wait} with no timeout {@link #join() Thread.join} with no timeout {@link LockSupport#park() LockSupport.park} A thread in the waiting state is waiting for another thread to perform a particular action. For example, a thread that has called Object.wait() on an object is waiting for another thread to call Object.notify() or Object.notifyAll() on that object. A thread that has called Thread.join() is waiting for a specified thread to terminate.
field,java/lang/Thread/State/TIMED_WAITING, Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time: {@link #sleep Thread.sleep} {@link Object#wait(long) Object.wait} with timeout {@link #join(long) Thread.join} with timeout {@link LockSupport#parkNanos LockSupport.parkNanos} {@link LockSupport#parkUntil LockSupport.parkUntil} 
field,java/lang/Thread/State/TERMINATED, Thread state for a terminated thread. The thread has completed execution.
method,java/lang/Thread/UncaughtExceptionHandler/uncaughtException/Thread;Throwable, Method invoked when the given thread terminates due to the given uncaught exception. Any exception thrown by this method will be ignored by the Java Virtual Machine. @param t the thread @param e the exception
class,java/lang/System, The System class contains several useful class fields and methods. It cannot be instantiated. Among the facilities provided by the System class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array. @author unascribed @version 1.162, 04/01/09 @since JDK1.0
method,java/lang/System/setIn/InputStream, Reassigns the standard input stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(setIO) permission to see if it's ok to reassign the standard input stream. @param in the new standard input stream. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow reassigning of the standard input stream. @see SecurityManager#checkPermission @see java.lang.RuntimePermission @since JDK1.1
method,java/lang/System/setOut/PrintStream, Reassigns the standard output stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(setIO) permission to see if it's ok to reassign the standard output stream. @param out the new standard output stream @throws SecurityException if a security manager exists and its checkPermission method doesn't allow reassigning of the standard output stream. @see SecurityManager#checkPermission @see java.lang.RuntimePermission @since JDK1.1
method,java/lang/System/setErr/PrintStream, Reassigns the standard error output stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(setIO) permission to see if it's ok to reassign the standard error output stream. @param err the new standard error output stream. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow reassigning of the standard error output stream. @see SecurityManager#checkPermission @see java.lang.RuntimePermission @since JDK1.1
method,java/lang/System/inheritedChannel/, Returns the channel inherited from the entity that created this Java virtual machine. This method returns the channel obtained by invoking the {@link java.nio.channels.spi.SelectorProvider#inheritedChannel inheritedChannel} method of the system-wide default {@link java.nio.channels.spi.SelectorProvider} object. In addition to the network-oriented channels described in {@link java.nio.channels.spi.SelectorProvider#inheritedChannel inheritedChannel}, this method may return other kinds of channels in the future. @return	The inherited channel, if any, otherwise null. @throws	IOException		If an I/O error occurs @throws	SecurityException		If a security manager is present and it does not		permit access to the channel. @since 1.5
method,java/lang/System/setSecurityManager/SecurityManager, Sets the System security. If there is a security manager already installed, this method first calls the security manager's checkPermission method with a RuntimePermission(setSecurityManager) permission to ensure it's ok to replace the existing security manager. This may result in throwing a SecurityException. Otherwise, the argument is established as the current security manager. If the argument is null and no security manager has been established, then no action is taken and the method simply returns. @param s the security manager. @exception SecurityException if the security manager has already been set and its checkPermission method doesn't allow it to be replaced. @see #getSecurityManager @see SecurityManager#checkPermission @see java.lang.RuntimePermission
method,java/lang/System/currentTimeMillis/, Returns the current time in milliseconds. Note that while the unit of time of the return value is a millisecond, the granularity of the value depends on the underlying operating system and may be larger. For example, many operating systems measure time in units of tens of milliseconds. See the description of the class Date for a discussion of slight discrepancies that may arise between computer time and coordinated universal time (UTC). @return the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC. @see java.util.Date
method,java/lang/System/nanoTime/, Returns the current value of the most precise available system timer, in nanoseconds. This method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary time (perhaps in the future, so values may be negative). This method provides nanosecond precision, but not necessarily nanosecond accuracy. No guarantees are made about how frequently values change. Differences in successive calls that span greater than approximately 292 years (263 nanoseconds) will not accurately compute elapsed time due to numerical overflow. For example, to measure how long some code takes to execute: long startTime = System.nanoTime(); // ... the code being measured ... long estimatedTime = System.nanoTime() - startTime; @return The current value of the system timer, in nanoseconds. @since 1.5
method,java/lang/System/arraycopy/Object;int;Object;int;int, Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array. A subsequence of array components are copied from the source array referenced by src to the destination array referenced by dest. The number of components copied is equal to the length argument. The components at positions srcPos through srcPos+length-1 in the source array are copied into positions destPos through destPos+length-1, respectively, of the destination array. If the src and dest arguments refer to the same array object, then the copying is performed as if the components at positions srcPos through srcPos+length-1 were first copied to a temporary array with length components and then the contents of the temporary array were copied into positions destPos through destPos+length-1 of the destination array. If dest is null, then a NullPointerException is thrown. If src is null, then a NullPointerException is thrown and the destination array is not modified. Otherwise, if any of the following is true, an ArrayStoreException is thrown and the destination is not modified: The src argument refers to an object that is not an array. The dest argument refers to an object that is not an array. The src argument and dest argument refer to arrays whose component types are different primitive types. The src argument refers to an array with a primitive component type and the dest argument refers to an array with a reference component type. The src argument refers to an array with a reference component type and the dest argument refers to an array with a primitive component type. Otherwise, if any of the following is true, an IndexOutOfBoundsException is thrown and the destination is not modified: The srcPos argument is negative. The destPos argument is negative. The length argument is negative. srcPos+length is greater than src.length, the length of the source array. destPos+length is greater than dest.length, the length of the destination array. Otherwise, if any actual component of the source array from position srcPos through srcPos+length-1 cannot be converted to the component type of the destination array by assignment conversion, an ArrayStoreException is thrown. In this case, let k be the smallest nonnegative integer less than length such that src[srcPos+k] cannot be converted to the component type of the destination array; when the exception is thrown, source array components from positions srcPos through srcPos+k-1 will already have been copied to destination array positions destPos through destPos+k-1 and no other positions of the destination array will have been modified. (Because of the restrictions already itemized, this paragraph effectively applies only to the situation where both arrays have component types that are reference types.) @param src the source array. @param srcPos starting position in the source array. @param dest the destination array. @param destPos starting position in the destination data. @param length the number of array elements to be copied. @exception IndexOutOfBoundsException if copying would cause access of data outside array bounds. @exception ArrayStoreException if an element in the src array could not be stored into the dest array because of a type mismatch. @exception NullPointerException if either src or dest is null.
method,java/lang/System/identityHashCode/Object, Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode(). The hash code for the null reference is zero. @param x object for which the hashCode is to be calculated @return the hashCode @since JDK1.1
method,java/lang/System/getProperties/, Determines the current system properties. First, if there is a security manager, its checkPropertiesAccess method is called with no arguments. This may result in a security exception. The current set of system properties for use by the {@link #getProperty(String)} method is returned as a Properties object. If there is no current set of system properties, a set of system properties is first created and initialized. This set of system properties always includes values for the following keys: Key Description of Associated Value java.version Java Runtime Environment version java.vendor Java Runtime Environment vendorjava.vendor.url Java vendor URL java.home Java installation directory java.vm.specification.version Java Virtual Machine specification version java.vm.specification.vendor Java Virtual Machine specification vendor java.vm.specification.name Java Virtual Machine specification name java.vm.version Java Virtual Machine implementation version java.vm.vendor Java Virtual Machine implementation vendor java.vm.name Java Virtual Machine implementation name java.specification.version Java Runtime Environment specification version java.specification.vendor Java Runtime Environment specification vendor java.specification.name Java Runtime Environment specification name java.class.version Java class format version number java.class.path Java class path java.library.path List of paths to search when loading libraries java.io.tmpdir Default temp file path java.compiler Name of JIT compiler to use java.ext.dirs Path of extension directory or directories os.name Operating system name os.arch Operating system architecture os.version Operating system version file.separator File separator (/ on UNIX) path.separator Path separator (: on UNIX) line.separator Line separator ( on UNIX) user.name User's account name user.home User's home directory user.dir User's current working directory Multiple paths in a system property value are separated by the path separator character of the platform. Note that even if the security manager does not permit the getProperties operation, it may choose to permit the {@link #getProperty(String)} operation. @return the system properties @exception SecurityException if a security manager exists and its checkPropertiesAccess method doesn't allow access to the system properties. @see #setProperties @see java.lang.SecurityException @see java.lang.SecurityManager#checkPropertiesAccess() @see java.util.Properties
method,java/lang/System/setProperties/Properties, Sets the system properties to the Properties argument. First, if there is a security manager, its checkPropertiesAccess method is called with no arguments. This may result in a security exception. The argument becomes the current set of system properties for use by the {@link #getProperty(String)} method. If the argument is null, then the current set of system properties is forgotten. @param props the new system properties. @exception SecurityException if a security manager exists and its checkPropertiesAccess method doesn't allow access to the system properties. @see #getProperties @see java.util.Properties @see java.lang.SecurityException @see java.lang.SecurityManager#checkPropertiesAccess()
method,java/lang/System/getProperty/String, Gets the system property indicated by the specified key. First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. This may result in a SecurityException. If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method. @param key the name of the system property. @return the string value of the system property, or null if there is no property with that key. @exception SecurityException if a security manager exists and its checkPropertyAccess method doesn't allow access to the specified system property. @exception NullPointerException if key is null. @exception IllegalArgumentException if key is empty. @see #setProperty @see java.lang.SecurityException @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String) @see java.lang.System#getProperties()
method,java/lang/System/getProperty/String;String, Gets the system property indicated by the specified key. First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method. @param key the name of the system property. @param def a default value. @return the string value of the system property, or the default value if there is no property with that key. @exception SecurityException if a security manager exists and its checkPropertyAccess method doesn't allow access to the specified system property. @exception NullPointerException if key is null. @exception IllegalArgumentException if key is empty. @see #setProperty @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String) @see java.lang.System#getProperties()
method,java/lang/System/setProperty/String;String, Sets the system property indicated by the specified key. First, if a security manager exists, its SecurityManager.checkPermission method is called with a PropertyPermission(key, write) permission. This may result in a SecurityException being thrown. If no exception is thrown, the specified property is set to the given value. @param key the name of the system property. @param value the value of the system property. @return the previous value of the system property, or null if it did not have one. @exception SecurityException if a security manager exists and its checkPermission method doesn't allow setting of the specified property. @exception NullPointerException if key or value is null. @exception IllegalArgumentException if key is empty. @see #getProperty @see java.lang.System#getProperty(java.lang.String) @see java.lang.System#getProperty(java.lang.String, java.lang.String) @see java.util.PropertyPermission @see SecurityManager#checkPermission @since 1.2
method,java/lang/System/clearProperty/String, Removes the system property indicated by the specified key. First, if a security manager exists, its SecurityManager.checkPermission method is called with a PropertyPermission(key, write) permission. This may result in a SecurityException being thrown. If no exception is thrown, the specified property is removed. @param key the name of the system property to be removed. @return the previous string value of the system property, or null if there was no property with that key. @exception SecurityException if a security manager exists and its checkPropertyAccess method doesn't allow access to the specified system property. @exception NullPointerException if key is null. @exception IllegalArgumentException if key is empty. @see #getProperty @see #setProperty @see java.util.Properties @see java.lang.SecurityException @see java.lang.SecurityManager#checkPropertiesAccess() @since 1.5
method,java/lang/System/exit/int, Terminates the currently running Java Virtual Machine. The argument serves as a status code; by convention, a nonzero status code indicates abnormal termination. This method calls the exit method in class Runtime. This method never returns normally. The call System.exit(n) is effectively equivalent to the call: Runtime.getRuntime().exit(n) @param status exit status. @throws SecurityException if a security manager exists and its checkExit method doesn't allow exit with the specified status. @see java.lang.Runtime#exit(int)
method,java/lang/System/gc/, Runs the garbage collector. Calling the gc method suggests that the Java Virtual Machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. When control returns from the method call, the Java Virtual Machine has made a best effort to reclaim space from all discarded objects. The call System.gc() is effectively equivalent to the call: Runtime.getRuntime().gc() @see java.lang.Runtime#gc()
method,java/lang/System/runFinalization/, Runs the finalization methods of any objects pending finalization. Calling this method suggests that the Java Virtual Machine expend effort toward running the finalize methods of objects that have been found to be discarded but whose finalize methods have not yet been run. When control returns from the method call, the Java Virtual Machine has made a best effort to complete all outstanding finalizations. The call System.runFinalization() is effectively equivalent to the call: Runtime.getRuntime().runFinalization() @see java.lang.Runtime#runFinalization()
method,java/lang/System/runFinalizersOnExit/boolean, Enable or disable finalization on exit; doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits. By default, finalization on exit is disabled. If there is a security manager, its checkExit method is first called with 0 as its argument to ensure the exit is allowed. This could result in a SecurityException. @deprecated This method is inherently unsafe. It may result in 	 finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic	 behavior or deadlock. @param value indicating enabling or disabling of finalization @throws SecurityException if a security manager exists and its checkExit method doesn't allow the exit. @see java.lang.Runtime#exit(int) @see java.lang.Runtime#gc() @see java.lang.SecurityManager#checkExit(int) @since JDK1.1
method,java/lang/System/loadLibrary/String, Loads the system library specified by the libname argument. The manner in which a library name is mapped to the actual system library is system dependent. The call System.loadLibrary(name) is effectively equivalent to the call Runtime.getRuntime().loadLibrary(name) @param libname the name of the library. @exception SecurityException if a security manager exists and its checkLink method doesn't allow loading of the specified dynamic library @exception UnsatisfiedLinkError if the library does not exist. @exception NullPointerException if libname is null @see java.lang.Runtime#loadLibrary(java.lang.String) @see java.lang.SecurityManager#checkLink(java.lang.String)
field,java/lang/System/err, The standard error output stream. This stream is already open and ready to accept output data. Typically this stream corresponds to display output or another output destination specified by the host environment or user. By convention, this output stream is used to display error messages or other information that should come to the immediate attention of a user even if the principal output stream, the value of the variable out, has been redirected to a file or other destination that is typically not continuously monitored.
method,java/lang/StringBuilder/append/StringBuffer, Appends the specified StringBuffer to this sequence. The characters of the StringBuffer argument are appended, in order, to this sequence, increasing the length of this sequence by the length of the argument. If sb is null, then the four characters null are appended to this sequence. Let n be the length of this character sequence just prior to execution of the append method. Then the character at index k in the new character sequence is equal to the character at index k in the old character sequence, if k is less than n; otherwise, it is equal to the character at index k-n in the argument sb. @param sb the StringBuffer to append. @return a reference to this object.
method,java/lang/StringBuilder/append/CharSequence, @throws IndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/append/CharSequence;int;int, @throws IndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/delete/int;int, @throws StringIndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/deleteCharAt/int, @throws StringIndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/replace/int;int;String, @throws StringIndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/insert/int;char[];int;int, @throws StringIndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/insert/int;Object, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(java.lang.Object) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuilder/insert/int;String, @throws StringIndexOutOfBoundsException {@inheritDoc} @see #length()
method,java/lang/StringBuilder/insert/int;char[], @throws StringIndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/insert/int;CharSequence, @throws IndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/insert/int;CharSequence;int;int, @throws IndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuilder/insert/int;boolean, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(boolean) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuilder/insert/int;char, @throws IndexOutOfBoundsException {@inheritDoc} @see #length()
method,java/lang/StringBuilder/insert/int;int, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(int) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuilder/insert/int;long, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(long) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuilder/insert/int;float, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(float) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuilder/insert/int;double, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(double) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuilder/indexOf/String, @throws NullPointerException {@inheritDoc}
method,java/lang/StringBuilder/indexOf/String;int, @throws NullPointerException {@inheritDoc}
method,java/lang/StringBuilder/lastIndexOf/String, @throws NullPointerException {@inheritDoc}
method,java/lang/StringBuilder/lastIndexOf/String;int, @throws NullPointerException {@inheritDoc}
method,java/lang/StringBuffer/setLength/int, @throws IndexOutOfBoundsException {@inheritDoc} @see #length()
method,java/lang/StringBuffer/charAt/int, @throws IndexOutOfBoundsException {@inheritDoc} @see #length()
method,java/lang/StringBuffer/getChars/int;int;char[];int, @throws NullPointerException {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuffer/setCharAt/int;char, @throws IndexOutOfBoundsException {@inheritDoc} @see #length()
method,java/lang/StringBuffer/append/StringBuffer, Appends the specified StringBuffer to this sequence. The characters of the StringBuffer argument are appended, in order, to the contents of this StringBuffer, increasing the length of this StringBuffer by the length of the argument. If sb is null, then the four characters null are appended to this StringBuffer. Let n be the length of the old character sequence, the one contained in the StringBuffer just prior to execution of the append method. Then the character at index k in the new character sequence is equal to the character at index k in the old character sequence, if k is less than n; otherwise, it is equal to the character at index k-n in the argument sb. This method synchronizes on this (the destination) object but does not synchronize on the source (sb). @param sb the StringBuffer to append. @return a reference to this object. @since 1.4
method,java/lang/StringBuffer/append/CharSequence, Appends the specified CharSequence to this sequence. The characters of the CharSequence argument are appended, in order, increasing the length of this sequence by the length of the argument. The result of this method is exactly the same as if it were an invocation of this.append(s, 0, s.length()); This method synchronizes on this (the destination) object but does not synchronize on the source (s). If s is null, then the four characters null are appended. @param s the CharSequence to append. @return a reference to this object. @since 1.5
method,java/lang/StringBuffer/append/CharSequence;int;int, @throws IndexOutOfBoundsException {@inheritDoc} @since 1.5
method,java/lang/StringBuffer/delete/int;int, @throws StringIndexOutOfBoundsException {@inheritDoc} @since 1.2
method,java/lang/StringBuffer/deleteCharAt/int, @throws StringIndexOutOfBoundsException {@inheritDoc} @since 1.2
method,java/lang/StringBuffer/replace/int;int;String, @throws StringIndexOutOfBoundsException {@inheritDoc} @since 1.2
method,java/lang/StringBuffer/substring/int, @throws StringIndexOutOfBoundsException {@inheritDoc} @since 1.2
method,java/lang/StringBuffer/subSequence/int;int, @throws IndexOutOfBoundsException {@inheritDoc} @since 1.4
method,java/lang/StringBuffer/substring/int;int, @throws StringIndexOutOfBoundsException {@inheritDoc} @since 1.2
method,java/lang/StringBuffer/insert/int;char[];int;int, @throws StringIndexOutOfBoundsException {@inheritDoc} @since 1.2
method,java/lang/StringBuffer/insert/int;Object, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(java.lang.Object) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuffer/insert/int;String, @throws StringIndexOutOfBoundsException {@inheritDoc} @see #length()
method,java/lang/StringBuffer/insert/int;char[], @throws StringIndexOutOfBoundsException {@inheritDoc}
method,java/lang/StringBuffer/insert/int;CharSequence, @throws IndexOutOfBoundsException {@inheritDoc} @since 1.5
method,java/lang/StringBuffer/insert/int;CharSequence;int;int, @throws IndexOutOfBoundsException {@inheritDoc} @since 1.5
method,java/lang/StringBuffer/insert/int;boolean, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(boolean) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuffer/insert/int;char, @throws IndexOutOfBoundsException {@inheritDoc} @see #length()
method,java/lang/StringBuffer/insert/int;int, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(int) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuffer/insert/int;long, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(long) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuffer/insert/int;float, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(float) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuffer/insert/int;double, @throws StringIndexOutOfBoundsException {@inheritDoc} @see java.lang.String#valueOf(double) @see #insert(int, java.lang.String) @see #length()
method,java/lang/StringBuffer/indexOf/String, @throws NullPointerException {@inheritDoc} @since 1.4
method,java/lang/StringBuffer/indexOf/String;int, @throws NullPointerException {@inheritDoc} @since 1.4
method,java/lang/StringBuffer/lastIndexOf/String, @throws NullPointerException {@inheritDoc} @since 1.4
method,java/lang/StringBuffer/lastIndexOf/String;int, @throws NullPointerException {@inheritDoc} @since 1.4
method,java/lang/String/isEmpty/, Returns true if, and only if, {@link #length()} is 0. @return true if {@link #length()} is 0, otherwise false @since 1.6
method,java/lang/String/codePointBefore/int, Returns the character (Unicode code point) before the specified index. The index refers to char values (Unicode code units) and ranges from 1 to {@link CharSequence#length() length}. If the char value at (index - 1) is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the char value at index - 1 is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned. @param index the index following the code point that should be returned @return the Unicode code point value before the given index. @exception IndexOutOfBoundsException if the index argument is less than 1 or greater than the length of this string. @since 1.5
method,java/lang/String/codePointCount/int;int, Returns the number of Unicode code points in the specified text range of this String. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each. @param beginIndex the index to the first char of the text range. @param endIndex the index after the last char of the text range. @return the number of Unicode code points in the specified text range @exception IndexOutOfBoundsException if the beginIndex is negative, or endIndex is larger than the length of this String, or beginIndex is larger than endIndex. @since 1.5
method,java/lang/String/offsetByCodePoints/int;int, Returns the index within this String that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each. @param index the index to be offset @param codePointOffset the offset in code points @return the index within this String @exception IndexOutOfBoundsException if index is negative or larger then the length of this String, or if codePointOffset is positive and the substring starting with index has fewer than codePointOffset code points, or if codePointOffset is negative and the substring before index has fewer than the absolute value of codePointOffset code points. @since 1.5
method,java/lang/String/getChars/int;int;char[];int, Copies characters from this string into the destination character array. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1 (thus the total number of characters to be copied is srcEnd-srcBegin). The characters are copied into the subarray of dst starting at index dstBegin and ending at index: dstbegin + (srcEnd-srcBegin) - 1 @param srcBegin index of the first character in the string to copy. @param srcEnd index after the last character in the string to copy. @param dst the destination array. @param dstBegin the start offset in the destination array. @exception IndexOutOfBoundsException If any of the following is true: srcBegin is negative. srcBegin is greater than srcEnd srcEnd is greater than the length of this string dstBegin is negative dstBegin+(srcEnd-srcBegin) is larger than dst.length
method,java/lang/String/getBytes/int;int;byte[];int, Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index {@code srcBegin}; the last character to be copied is at index {@code srcEnd-1}. The total number of characters to be copied is {@code srcEnd-srcBegin}. The characters, converted to bytes, are copied into the subarray of {@code dst} starting at index {@code dstBegin} and ending at index: dstbegin + (srcEnd-srcBegin) - 1 @deprecated This method does not properly convert characters into bytes. As of JDK&nbsp;1.1, the preferred way to do this is via the {@link #getBytes()} method, which uses the platform's default charset. @param srcBegin Index of the first character in the string to copy @param srcEnd Index after the last character in the string to copy @param dst The destination array @param dstBegin The start offset in the destination array @throws IndexOutOfBoundsException If any of the following is true: {@code srcBegin} is negative {@code srcBegin} is greater than {@code srcEnd} {@code srcEnd} is greater than the length of this String {@code dstBegin} is negative {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code dst.length} 
method,java/lang/String/equals/Object, Compares this string to the specified object. The result is {@code true} if and only if the argument is not {@code null} and is a {@code String} object that represents the same sequence of characters as this object. @param anObject The object to compare this {@code String} against @return {@code true} if the given object represents a {@code String} equivalent to this string, {@code false} otherwise @see #compareTo(String) @see #equalsIgnoreCase(String)
method,java/lang/String/contentEquals/StringBuffer, Compares this string to the specified {@code StringBuffer}. The result is {@code true} if and only if this {@code String} represents the same sequence of characters as the specified {@code StringBuffer}. @param sb The {@code StringBuffer} to compare this {@code String} against @return {@code true} if this {@code String} represents the same sequence of characters as the specified {@code StringBuffer}, {@code false} otherwise @since 1.4
method,java/lang/String/contentEquals/CharSequence, Compares this string to the specified {@code CharSequence}. The result is {@code true} if and only if this {@code String} represents the same sequence of char values as the specified sequence. @param cs The sequence to compare this {@code String} against @return {@code true} if this {@code String} represents the same sequence of char values as the specified sequence, {@code false} otherwise @since 1.5
method,java/lang/String/compareToIgnoreCase/String, Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of calling compareTo with normalized versions of the strings where case differences have been eliminated by calling Character.toLowerCase(Character.toUpperCase(character)) on each character. Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides collators to allow locale-sensitive ordering. @param str the String to be compared. @return a negative integer, zero, or a positive integer as the		specified String is greater than, equal to, or less		than this String, ignoring case considerations. @see java.text.Collator#compare(String, String) @since 1.2
method,java/lang/String/regionMatches/int;String;int;int, Tests if two string regions are equal. A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true: toffset is negative. ooffset is negative. toffset+len is greater than the length of this String object. ooffset+len is greater than the length of the other argument. There is some nonnegative integer k less than len such that: this.charAt(toffset+k)&nbsp;!=&nbsp;other.charAt(ooffset+k) @param toffset the starting offset of the subregion in this string. @param other the string argument. @param ooffset the starting offset of the subregion in the string argument. @param len the number of characters to compare. @return true if the specified subregion of this string exactly matches the specified subregion of the string argument; false otherwise.
method,java/lang/String/regionMatches/boolean;int;String;int;int, Tests if two string regions are equal. A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent character sequences that are the same, ignoring case if and only if ignoreCase is true. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true: toffset is negative. ooffset is negative. toffset+len is greater than the length of this String object. ooffset+len is greater than the length of the other argument. ignoreCase is false and there is some nonnegative integer k less than len such that: this.charAt(toffset+k) != other.charAt(ooffset+k) ignoreCase is true and there is some nonnegative integer k less than len such that: Character.toLowerCase(this.charAt(toffset+k)) != Character.toLowerCase(other.charAt(ooffset+k)) and: Character.toUpperCase(this.charAt(toffset+k)) != Character.toUpperCase(other.charAt(ooffset+k)) @param ignoreCase if true, ignore case when comparing characters. @param toffset the starting offset of the subregion in this string. @param other the string argument. @param ooffset the starting offset of the subregion in the string argument. @param len the number of characters to compare. @return true if the specified subregion of this string matches the specified subregion of the string argument; false otherwise. Whether the matching is exact or case insensitive depends on the ignoreCase argument.
method,java/lang/String/startsWith/String, Tests if this string starts with the specified prefix. @param prefix the prefix. @return true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise. Note also that true will be returned if the argument is an empty string or is equal to this String object as determined by the {@link #equals(Object)} method. @since 1. 0
method,java/lang/String/endsWith/String, Tests if this string ends with the specified suffix. @param suffix the suffix. @return true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise. Note that the result will be true if the argument is the empty string or is equal to this String object as determined by the {@link #equals(Object)} method.
method,java/lang/String/indexOf/int;int, Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value ch occurs in the character sequence represented by this String object at an index no smaller than fromIndex, then the index of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: (this.charAt(k) == ch) && (k &gt;= fromIndex) is true. For other values of ch, it is the smallest value k such that: (this.codePointAt(k) == ch) && (k &gt;= fromIndex) is true. In either case, if no such character occurs in this string at or after position fromIndex, then -1 is returned. There is no restriction on the value of fromIndex. If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: -1 is returned. All indices are specified in char values (Unicode code units). @param ch a character (Unicode code point). @param fromIndex the index to start the search from. @return the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to fromIndex, or -1 if the character does not occur.
method,java/lang/String/lastIndexOf/int;int, Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values of ch in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such that: (this.charAt(k) == ch) && (k &lt;= fromIndex) is true. For other values of ch, it is the largest value k such that: (this.codePointAt(k) == ch) && (k &lt;= fromIndex) is true. In either case, if no such character occurs in this string at or before position fromIndex, then -1 is returned. All indices are specified in char values (Unicode code units). @param ch a character (Unicode code point). @param fromIndex the index to start the search from. There is no restriction on the value of fromIndex. If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned. @return the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to fromIndex, or -1 if the character does not occur before that point.
method,java/lang/String/substring/int, Returns a new string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string. Examples: unhappy.substring(2) returns happy Harbison.substring(3) returns bison emptiness.substring(9) returns (an empty string) @param beginIndex the beginning index, inclusive. @return the specified substring. @exception IndexOutOfBoundsException if beginIndex is negative or larger than the length of this String object.
method,java/lang/String/substring/int;int, Returns a new string that is a substring of this string. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex. Examples: hamburger.substring(4, 8) returns urge smiles.substring(1, 5) returns mile @param beginIndex the beginning index, inclusive. @param endIndex the ending index, exclusive. @return the specified substring. @exception IndexOutOfBoundsException if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex.
method,java/lang/String/subSequence/int;int, Returns a new character sequence that is a subsequence of this sequence. An invocation of this method of the form str.subSequence(begin,&nbsp;end) behaves in exactly the same way as the invocation str.substring(begin,&nbsp;end) This method is defined so that the String class can implement the {@link CharSequence} interface. @param beginIndex the begin index, inclusive. @param endIndex the end index, exclusive. @return the specified subsequence. @throws IndexOutOfBoundsException if beginIndex or endIndex are negative, if endIndex is greater than length(), or if beginIndex is greater than startIndex @since 1.4 @spec JSR-51
method,java/lang/String/matches/String, Tells whether or not this string matches the given regular expression. An invocation of this method of the form str.matches(regex) yields exactly the same result as the expression {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence) matches}(regex, str) @param regex the regular expression to which this string is to be matched @return true if, and only if, this string matches the given regular expression @throws PatternSyntaxException if the regular expression's syntax is invalid @see java.util.regex.Pattern @since 1.4 @spec JSR-51
method,java/lang/String/contains/CharSequence, Returns true if and only if this string contains the specified sequence of char values. @param s the sequence to search for @return true if this string contains s, false otherwise @throws NullPointerException if s is null @since 1.5
method,java/lang/String/replaceFirst/String;String, Replaces the first substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str.replaceFirst(regex, repl) yields exactly the same result as the expression {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile compile}(regex).{@link java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(str).{@link java.util.regex.Matcher#replaceFirst replaceFirst}(repl) Note that backslashes (\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see {@link java.util.regex.Matcher#replaceFirst}. Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special meaning of these characters, if desired. @param regex the regular expression to which this string is to be matched @param replacement the string to be substituted for the first match @return The resulting String @throws PatternSyntaxException if the regular expression's syntax is invalid @see java.util.regex.Pattern @since 1.4 @spec JSR-51
method,java/lang/String/replaceAll/String;String, Replaces each substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str.replaceAll(regex, repl) yields exactly the same result as the expression {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile compile}(regex).{@link java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(str).{@link java.util.regex.Matcher#replaceAll replaceAll}(repl) Note that backslashes (\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}. Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special meaning of these characters, if desired. @param regex the regular expression to which this string is to be matched @param replacement the string to be substituted for each match @return The resulting String @throws PatternSyntaxException if the regular expression's syntax is invalid @see java.util.regex.Pattern @since 1.4 @spec JSR-51
method,java/lang/String/split/String;int, Splits this string around matches of the given regular expression. The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit n is greater than zero then the pattern will be applied at most n&nbsp;-&nbsp;1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter. If n is non-positive then the pattern will be applied as many times as possible and the array can have any length. If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. The string boo:and:foo, for example, yields the following results with these parameters: Regex Limit Result : 2 { boo, and:foo } : 5 { boo, and, foo } : -2 { boo, and, foo } o 5 { b, , :and:f, , } o -2 { b, , :and:f, , } o 0 { b, , :and:f } An invocation of this method of the form str.split(regex,&nbsp;n) yields the same result as the expression {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile compile}(regex).{@link java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(str,&nbsp;n) @param regex the delimiting regular expression @param limit the result threshold, as described above @return the array of strings computed by splitting this string around matches of the given regular expression @throws PatternSyntaxException if the regular expression's syntax is invalid @see java.util.regex.Pattern @since 1.4 @spec JSR-51
method,java/lang/String/split/String, Splits this string around matches of the given regular expression. This method works as if by invoking the two-argument {@link #split(String, int) split} method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The string boo:and:foo, for example, yields the following results with these expressions: Regex Result : { boo, and, foo } o { b, , :and:f } @param regex the delimiting regular expression @return the array of strings computed by splitting this string around matches of the given regular expression @throws PatternSyntaxException if the regular expression's syntax is invalid @see java.util.regex.Pattern @since 1.4 @spec JSR-51
method,java/lang/String/toLowerCase/Locale, Converts all of the characters in this String to lower case using the rules of the given Locale. Case mapping is based on the Unicode Standard version specified by the {@link java.lang.Character Character} class. Since case mappings are not always 1:1 char mappings, the resulting String may be a different length than the original String. Examples of lowercase mappings are in the following table: Language Code of Locale Upper Case Lower Case Description tr (Turkish) &#92;u0130 &#92;u0069 capital letter I with dot above -&gt; small letter i tr (Turkish) &#92;u0049 &#92;u0131 capital letter I -&gt; small letter dotless i (all) French Fries french fries lowercased all chars in String (all) lowercased all chars in String @param locale use the case transformation rules for this locale @return the String, converted to lowercase. @see java.lang.String#toLowerCase() @see java.lang.String#toUpperCase() @see java.lang.String#toUpperCase(Locale) @since 1.1
method,java/lang/String/toLowerCase/, Converts all of the characters in this String to lower case using the rules of the default locale. This is equivalent to calling toLowerCase(Locale.getDefault()). Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, TITLE.toLowerCase() in a Turkish locale returns tıtle, where 'ı' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use toLowerCase(Locale.ENGLISH). @return the String, converted to lowercase. @see java.lang.String#toLowerCase(Locale)
method,java/lang/String/toUpperCase/Locale, Converts all of the characters in this String to upper case using the rules of the given Locale. Case mapping is based on the Unicode Standard version specified by the {@link java.lang.Character Character} class. Since case mappings are not always 1:1 char mappings, the resulting String may be a different length than the original String. Examples of locale-sensitive and 1:M case mappings are in the following table. Language Code of Locale Lower Case Upper Case Description tr (Turkish) &#92;u0069 &#92;u0130 small letter i -&gt; capital letter I with dot above tr (Turkish) &#92;u0131 &#92;u0049 small letter dotless i -&gt; capital letter I (all) &#92;u00df &#92;u0053 &#92;u0053 small letter sharp s -&gt; two letters: SS (all) Fahrvergn&uuml;gen FAHRVERGN&Uuml;GEN @param locale use the case transformation rules for this locale @return the String, converted to uppercase. @see java.lang.String#toUpperCase() @see java.lang.String#toLowerCase() @see java.lang.String#toLowerCase(Locale) @since 1.1
method,java/lang/String/toUpperCase/, Converts all of the characters in this String to upper case using the rules of the default locale. This method is equivalent to toUpperCase(Locale.getDefault()). Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, title.toUpperCase() in a Turkish locale returns TİTLE, where 'İ' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use toUpperCase(Locale.ENGLISH). @return the String, converted to uppercase. @see java.lang.String#toUpperCase(Locale)
method,java/lang/String/trim/, Returns a copy of the string, with leading and trailing whitespace omitted. If this String object represents an empty character sequence, or the first and last characters of character sequence represented by this String object both have codes greater than '&#92;u0020' (the space character), then a reference to this String object is returned. Otherwise, if there is no character with a code greater than '&#92;u0020' in the string, then a new String object representing an empty string is created and returned. Otherwise, let k be the index of the first character in the string whose code is greater than '&#92;u0020', and let m be the index of the last character in the string whose code is greater than '&#92;u0020'. A new String object is created, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of this.substring(k,&nbsp;m+1). This method may be used to trim whitespace (as defined above) from the beginning and end of a string. @return A copy of this string with leading and trailing white space removed, or this string if it has no leading or trailing white space.
method,java/lang/String/intern/, Returns a canonical representation for the string object. A pool of strings, initially empty, is maintained privately by the class String. When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the {@link #equals(Object)} method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned. It follows that for any two strings s and t, s.intern()&nbsp;==&nbsp;t.intern() is true if and only if s.equals(t) is true. All literal strings and string-valued constant expressions are interned. String literals are defined in &sect;3.10.5 of the Java Language Specification @return a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.
method,java/lang/String/String/, Initializes a newly created {@code String} object so that it represents an empty character sequence. Note that use of this constructor is unnecessary since Strings are immutable.
field,java/lang/String/CASE_INSENSITIVE_ORDER, A Comparator that orders String objects as by compareToIgnoreCase. This comparator is serializable. Note that this Comparator does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides Collators to allow locale-sensitive ordering. @see java.text.Collator#compare(String, String) @since 1.2
method,java/lang/StrictMath/sin/double, Returns the trigonometric sine of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. @param a an angle, in radians. @return the sine of the argument.
method,java/lang/StrictMath/cos/double, Returns the trigonometric cosine of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. @param a an angle, in radians. @return the cosine of the argument.
method,java/lang/StrictMath/tan/double, Returns the trigonometric tangent of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. @param a an angle, in radians. @return the tangent of the argument.
method,java/lang/StrictMath/asin/double, Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2. Special cases: If the argument is NaN or its absolute value is greater than 1, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. @param a the value whose arc sine is to be returned. @return the arc sine of the argument.
method,java/lang/StrictMath/acos/double, Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi. Special case: If the argument is NaN or its absolute value is greater than 1, then the result is NaN. @param a the value whose arc cosine is to be returned. @return the arc cosine of the argument.
method,java/lang/StrictMath/atan/double, Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2. Special cases: If the argument is NaN, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. @param a the value whose arc tangent is to be returned. @return the arc tangent of the argument.
method,java/lang/StrictMath/toRadians/double, Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact. @param angdeg an angle, in degrees @return the measurement of the angle angdeg in radians.
method,java/lang/StrictMath/toDegrees/double, Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should not expect cos(toRadians(90.0)) to exactly equal 0.0. @param angrad an angle, in radians @return the measurement of the angle angrad in degrees.
method,java/lang/StrictMath/exp/double, Returns Euler's number e raised to the power of a double value. Special cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative infinity, then the result is positive zero. @param a the exponent to raise e to. @return the value ea, 		where e is the base of the natural logarithms.
method,java/lang/StrictMath/log/double, Returns the natural logarithm (base e) of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity. @param a a value @return the value ln&nbsp;a, the natural logarithm of a.
method,java/lang/StrictMath/log10/double, Returns the base 10 logarithm of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity. If the argument is equal to 10n for integer n, then the result is n. @param a a value @return the base 10 logarithm of a. @since 1.5
method,java/lang/StrictMath/sqrt/double, Returns the correctly rounded positive square root of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is the same as the argument. Otherwise, the result is the double value closest to the true mathematical square root of the argument value. @param a a value. @return the positive square root of a.
method,java/lang/StrictMath/cbrt/double, Returns the cube root of a double value. For positive finite x, cbrt(-x) == -cbrt(x); that is, the cube root of a negative value is the negative of the cube root of that value's magnitude. Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is an infinity with the same sign as the argument. If the argument is zero, then the result is a zero with the same sign as the argument. @param a a value. @return the cube root of a. @since 1.5
method,java/lang/StrictMath/IEEEremainder/double;double, Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to f1&nbsp;-&nbsp;f2&nbsp;&times;&nbsp;n, where n is the mathematical integer closest to the exact mathematical value of the quotient f1/f2, and if two mathematical integers are equally close to f1/f2, then n is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases: If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. If the first argument is finite and the second argument is infinite, then the result is the same as the first argument. @param f1 the dividend. @param f2 the divisor. @return the remainder when f1 is divided by f2.
method,java/lang/StrictMath/ceil/double, Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. If the argument value is less than zero but greater than -1.0, then the result is negative zero. Note that the value of StrictMath.ceil(x) is exactly the value of -StrictMath.floor(-x). @param a a value. @return the smallest (closest to negative infinity) floating-point value that is greater than or equal to the argument and is equal to a mathematical integer. 
method,java/lang/StrictMath/floor/double, Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. @param a a value. @return the largest (closest to positive infinity) floating-point value that less than or equal to the argument and is equal to a mathematical integer. 
method,java/lang/StrictMath/rint/double, Returns the double value that is closest in value to the argument and is equal to a mathematical integer. If two double values that are mathematical integers are equally close to the value of the argument, the result is the integer value that is even. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. @param a a value. @return the closest floating-point value to a that is equal to a mathematical integer. @author Joseph D. Darcy
method,java/lang/StrictMath/atan2/double;double, Returns the angle theta from the conversion of rectangular coordinates (x,&nbsp;y) to polar coordinates (r,&nbsp;theta). This method computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi. Special cases: If either argument is NaN, then the result is NaN. If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the double value closest to pi. If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the double value closest to -pi. If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the double value closest to pi/2. If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the double value closest to -pi/2. If both arguments are positive infinity, then the result is the double value closest to pi/4. If the first argument is positive infinity and the second argument is negative infinity, then the result is the double value closest to 3*pi/4. If the first argument is negative infinity and the second argument is positive infinity, then the result is the double value closest to -pi/4. If both arguments are negative infinity, then the result is the double value closest to -3*pi/4. @param y the ordinate coordinate @param x the abscissa coordinate @return the theta component of the point (r,&nbsp;theta) in polar coordinates that corresponds to the point (x,&nbsp;y) in Cartesian coordinates.
method,java/lang/StrictMath/pow/double;double, Returns the value of the first argument raised to the power of the second argument. Special cases: If the second argument is positive or negative zero, then the result is 1.0. If the second argument is 1.0, then the result is the same as the first argument. If the second argument is NaN, then the result is NaN. If the first argument is NaN and the second argument is nonzero, then the result is NaN. If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or the absolute value of the first argument is less than 1 and the second argument is negative infinity, then the result is positive infinity. If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or the absolute value of the first argument is less than 1 and the second argument is positive infinity, then the result is positive zero. If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. If the first argument is positive zero and the second argument is greater than zero, or the first argument is positive infinity and the second argument is less than zero, then the result is positive zero. If the first argument is positive zero and the second argument is less than zero, or the first argument is positive infinity and the second argument is greater than zero, then the result is positive infinity. If the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, then the result is positive zero. If the first argument is negative zero and the second argument is a positive finite odd integer, or the first argument is negative infinity and the second argument is a negative finite odd integer, then the result is negative zero. If the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, then the result is positive infinity. If the first argument is negative zero and the second argument is a negative finite odd integer, or the first argument is negative infinity and the second argument is a positive finite odd integer, then the result is negative infinity. If the first argument is finite and less than zero if the second argument is a finite even integer, the result is equal to the result of raising the absolute value of the first argument to the power of the second argument if the second argument is a finite odd integer, the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument if the second argument is finite and not an integer, then the result is NaN. If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a double value. (In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is finite and a fixed point of the method {@link #ceil ceil} or, equivalently, a fixed point of the method {@link #floor floor}. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.) @param a base. @param b the exponent. @return the value ab.
method,java/lang/StrictMath/round/float, Returns the closest int to the argument. The result is rounded to an integer by adding 1/2, taking the floor of the result, and casting the result to type int. In other words, the result is equal to the value of the expression: (int)Math.floor(a + 0.5f) Special cases: If the argument is NaN, the result is 0. If the argument is negative infinity or any value less than or equal to the value of Integer.MIN_VALUE, the result is equal to the value of Integer.MIN_VALUE. If the argument is positive infinity or any value greater than or equal to the value of Integer.MAX_VALUE, the result is equal to the value of Integer.MAX_VALUE. @param a a floating-point value to be rounded to an integer. @return the value of the argument rounded to the nearest int value. @see java.lang.Integer#MAX_VALUE @see java.lang.Integer#MIN_VALUE
method,java/lang/StrictMath/round/double, Returns the closest long to the argument. The result is rounded to an integer by adding 1/2, taking the floor of the result, and casting the result to type long. In other words, the result is equal to the value of the expression: (long)Math.floor(a + 0.5d) Special cases: If the argument is NaN, the result is 0. If the argument is negative infinity or any value less than or equal to the value of Long.MIN_VALUE, the result is equal to the value of Long.MIN_VALUE. If the argument is positive infinity or any value greater than or equal to the value of Long.MAX_VALUE, the result is equal to the value of Long.MAX_VALUE. @param a a floating-point value to be rounded to a		long. @return the value of the argument rounded to the nearest long value. @see java.lang.Long#MAX_VALUE @see java.lang.Long#MIN_VALUE
method,java/lang/StrictMath/random/, Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range. When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression new java.util.Random This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else. This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom number generator. @return a pseudorandom double greater than or equal to 0.0 and less than 1.0. @see java.util.Random#nextDouble()
method,java/lang/StrictMath/abs/int, Returns the absolute value of an int value.. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of Integer.MIN_VALUE, the most negative representable int value, the result is that same value, which is negative. @param a the argument whose absolute value is to be determined. @return the absolute value of the argument. @see java.lang.Integer#MIN_VALUE
method,java/lang/StrictMath/abs/long, Returns the absolute value of a long value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of Long.MIN_VALUE, the most negative representable long value, the result is that same value, which is negative. @param a the argument whose absolute value is to be determined. @return the absolute value of the argument. @see java.lang.Long#MIN_VALUE
method,java/lang/StrictMath/abs/float, Returns the absolute value of a float value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: If the argument is positive zero or negative zero, the result is positive zero. If the argument is infinite, the result is positive infinity. If the argument is NaN, the result is NaN. In other words, the result is the same as the value of the expression: Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a)) @param a the argument whose absolute value is to be determined @return the absolute value of the argument.
method,java/lang/StrictMath/abs/double, Returns the absolute value of a double value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: If the argument is positive zero or negative zero, the result is positive zero. If the argument is infinite, the result is positive infinity. If the argument is NaN, the result is NaN. In other words, the result is the same as the value of the expression: Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1) @param a the argument whose absolute value is to be determined @return the absolute value of the argument.
method,java/lang/StrictMath/max/int;int, Returns the greater of two int values. That is, the result is the argument closer to the value of Integer.MAX_VALUE. If the arguments have the same value, the result is that same value. @param a an argument. @param b another argument. @return the larger of a and b. @see java.lang.Long#MAX_VALUE
method,java/lang/StrictMath/max/long;long, Returns the greater of two long values. That is, the result is the argument closer to the value of Long.MAX_VALUE. If the arguments have the same value, the result is that same value. @param a an argument. @param b another argument. @return the larger of a and b. @see java.lang.Long#MAX_VALUE
method,java/lang/StrictMath/max/float;float, Returns the greater of two float values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero. @param a an argument. @param b another argument. @return the larger of a and b.
method,java/lang/StrictMath/max/double;double, Returns the greater of two double values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero. @param a an argument. @param b another argument. @return the larger of a and b.
method,java/lang/StrictMath/min/int;int, Returns the smaller of two int values. That is, the result the argument closer to the value of Integer.MIN_VALUE. If the arguments have the same value, the result is that same value. @param a an argument. @param b another argument. @return the smaller of a and b. @see java.lang.Long#MIN_VALUE
method,java/lang/StrictMath/min/long;long, Returns the smaller of two long values. That is, the result is the argument closer to the value of Long.MIN_VALUE. If the arguments have the same value, the result is that same value. @param a an argument. @param b another argument. @return the smaller of a and b. @see java.lang.Long#MIN_VALUE
method,java/lang/StrictMath/min/float;float, Returns the smaller of two float values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero. @param a an argument. @param b another argument. @return the smaller of a and b.
method,java/lang/StrictMath/min/double;double, Returns the smaller of two double values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero. @param a an argument. @param b another argument. @return the smaller of a and b.
method,java/lang/StrictMath/ulp/double, Returns the size of an ulp of the argument. An ulp of a double value is the positive distance between this floating-point value and the double value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Double.MIN_VALUE. If the argument is &plusmn;Double.MAX_VALUE, then the result is equal to 2971. @param d the floating-point value whose ulp is to be returned @return the size of an ulp of the argument @author Joseph D. Darcy @since 1.5
method,java/lang/StrictMath/ulp/float, Returns the size of an ulp of the argument. An ulp of a float value is the positive distance between this floating-point value and the float value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Float.MIN_VALUE. If the argument is &plusmn;Float.MAX_VALUE, then the result is equal to 2104. @param f the floating-point value whose ulp is to be returned @return the size of an ulp of the argument @author Joseph D. Darcy @since 1.5
method,java/lang/StrictMath/signum/double, Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero. Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive zero or negative zero, then the result is the same as the argument. @param d the floating-point value whose signum is to be returned @return the signum function of the argument @author Joseph D. Darcy @since 1.5
method,java/lang/StrictMath/signum/float, Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero. Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive zero or negative zero, then the result is the same as the argument. @param f the floating-point value whose signum is to be returned @return the signum function of the argument @author Joseph D. Darcy @since 1.5
method,java/lang/StrictMath/sinh/double, Returns the hyperbolic sine of a double value. The hyperbolic sine of x is defined to be (ex&nbsp;-&nbsp;e-x)/2 where e is {@linkplain Math#E Euler's number}. Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is an infinity with the same sign as the argument. If the argument is zero, then the result is a zero with the same sign as the argument. @param x The number whose hyperbolic sine is to be returned. @return The hyperbolic sine of x. @since 1.5
method,java/lang/StrictMath/cosh/double, Returns the hyperbolic cosine of a double value. The hyperbolic cosine of x is defined to be (ex&nbsp;+&nbsp;e-x)/2 where e is {@linkplain Math#E Euler's number}. Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is positive infinity. If the argument is zero, then the result is 1.0. @param x The number whose hyperbolic cosine is to be returned. @return The hyperbolic cosine of x. @since 1.5
method,java/lang/StrictMath/tanh/double, Returns the hyperbolic tangent of a double value. The hyperbolic tangent of x is defined to be (ex&nbsp;-&nbsp;e-x)/(ex&nbsp;+&nbsp;e-x), in other words, {@linkplain Math#sinh sinh(x)}/{@linkplain Math#cosh cosh(x)}. Note that the absolute value of the exact tanh is always less than 1. Special cases: If the argument is NaN, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. If the argument is positive infinity, then the result is +1.0. If the argument is negative infinity, then the result is -1.0. @param x The number whose hyperbolic tangent is to be returned. @return The hyperbolic tangent of x. @since 1.5
method,java/lang/StrictMath/hypot/double;double, Returns sqrt(x2&nbsp;+y2) without intermediate overflow or underflow. Special cases: If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN. @param x a value @param y a value @return sqrt(x2&nbsp;+y2) without intermediate overflow or underflow @since 1.5
method,java/lang/StrictMath/expm1/double, Returns ex&nbsp;-1. Note that for values of x near 0, the exact sum of expm1(x)&nbsp;+&nbsp;1 is much closer to the true result of ex than exp(x). Special cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative infinity, then the result is -1.0. If the argument is zero, then the result is a zero with the same sign as the argument. @param x the exponent to raise e to in the computation of ex&nbsp;-1. @return the value ex&nbsp;-&nbsp;1. @since 1.5
method,java/lang/StrictMath/log1p/double, Returns the natural logarithm of the sum of the argument and 1. Note that for small values x, the result of log1p(x) is much closer to the true result of ln(1 + x) than the floating-point evaluation of log(1.0+x). Special cases: If the argument is NaN or less than -1, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative one, then the result is negative infinity. If the argument is zero, then the result is a zero with the same sign as the argument. @param x a value @return the value ln(x&nbsp;+&nbsp;1), the natural log of x&nbsp;+&nbsp;1 @since 1.5
method,java/lang/StrictMath/copySign/double;double, Returns the first floating-point argument with the sign of the second floating-point argument. For this method, a NaN {@code sign} argument is always treated as if it were positive. @param magnitude the parameter providing the magnitude of the result @param sign the parameter providing the sign of the result @return a value with the magnitude of {@code magnitude} and the sign of {@code sign}. @since 1.6
method,java/lang/StrictMath/copySign/float;float, Returns the first floating-point argument with the sign of the second floating-point argument. For this method, a NaN {@code sign} argument is always treated as if it were positive. @param magnitude the parameter providing the magnitude of the result @param sign the parameter providing the sign of the result @return a value with the magnitude of {@code magnitude} and the sign of {@code sign}. @since 1.6
method,java/lang/StrictMath/getExponent/float, Returns the unbiased exponent used in the representation of a {@code float}. Special cases: If the argument is NaN or infinite, then the result is {@link Float#MAX_EXPONENT} + 1. If the argument is zero or subnormal, then the result is {@link Float#MIN_EXPONENT} -1. @param f a {@code float} value @since 1.6
method,java/lang/StrictMath/getExponent/double, Returns the unbiased exponent used in the representation of a {@code double}. Special cases: If the argument is NaN or infinite, then the result is {@link Double#MAX_EXPONENT} + 1. If the argument is zero or subnormal, then the result is {@link Double#MIN_EXPONENT} -1. @param d a {@code double} value @since 1.6
method,java/lang/StrictMath/nextAfter/double;double, Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, {@code direction} is returned unchanged (as implied by the requirement of returning the second argument if the arguments compare as equal). If {@code start} is &plusmn;{@link Double#MIN_VALUE} and {@code direction} has a value such that the result should have a smaller magnitude, then a zero with the same sign as {@code start} is returned. If {@code start} is infinite and {@code direction} has a value such that the result should have a smaller magnitude, {@link Double#MAX_VALUE} with the same sign as {@code start} is returned. If {@code start} is equal to &plusmn; {@link Double#MAX_VALUE} and {@code direction} has a value such that the result should have a larger magnitude, an infinity with same sign as {@code start} is returned. @param start starting floating-point value @param direction value indicating which of {@code start}'s neighbors or {@code start} should be returned @return The floating-point number adjacent to {@code start} in the direction of {@code direction}. @since 1.6
method,java/lang/StrictMath/nextAfter/float;double, Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal a value equivalent to the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, a value equivalent to {@code direction} is returned. If {@code start} is &plusmn;{@link Float#MIN_VALUE} and {@code direction} has a value such that the result should have a smaller magnitude, then a zero with the same sign as {@code start} is returned. If {@code start} is infinite and {@code direction} has a value such that the result should have a smaller magnitude, {@link Float#MAX_VALUE} with the same sign as {@code start} is returned. If {@code start} is equal to &plusmn; {@link Float#MAX_VALUE} and {@code direction} has a value such that the result should have a larger magnitude, an infinity with same sign as {@code start} is returned. @param start starting floating-point value @param direction value indicating which of {@code start}'s neighbors or {@code start} should be returned @return The floating-point number adjacent to {@code start} in the direction of {@code direction}. @since 1.6
method,java/lang/StrictMath/nextUp/double, Returns the floating-point value adjacent to {@code d} in the direction of positive infinity. This method is semantically equivalent to {@code nextAfter(d, Double.POSITIVE_INFINITY)}; however, a {@code nextUp} implementation may run faster than its equivalent {@code nextAfter} call. Special Cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is {@link Double#MIN_VALUE} @param d starting floating-point value @return The adjacent floating-point value closer to positive infinity. @since 1.6
method,java/lang/StrictMath/nextUp/float, Returns the floating-point value adjacent to {@code f} in the direction of positive infinity. This method is semantically equivalent to {@code nextAfter(f, Float.POSITIVE_INFINITY)}; however, a {@code nextUp} implementation may run faster than its equivalent {@code nextAfter} call. Special Cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is {@link Float#MIN_VALUE} @param f starting floating-point value @return The adjacent floating-point value closer to positive infinity. @since 1.6
method,java/lang/StrictMath/scalb/double;int, Return {@code d} &times; 2{@code scaleFactor} rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between {@link Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the answer is calculated exactly. If the exponent of the result would be larger than {@code Double.MAX_EXPONENT}, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n), -n)} may not equal x. When the result is non-NaN, the result has the same sign as {@code d}. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned. @param d number to be scaled by a power of two. @param scaleFactor power of 2 used to scale {@code d} @return {@code d} &times; 2{@code scaleFactor} @since 1.6
method,java/lang/StrictMath/scalb/float;int, Return {@code f} &times; 2{@code scaleFactor} rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between {@link Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the answer is calculated exactly. If the exponent of the result would be larger than {@code Float.MAX_EXPONENT}, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n), -n)} may not equal x. When the result is non-NaN, the result has the same sign as {@code f}. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned. @param f number to be scaled by a power of two. @param scaleFactor power of 2 used to scale {@code f} @return {@code f} &times; 2{@code scaleFactor} @since 1.6
field,java/lang/StrictMath/E, The double value that is closer than any other to e, the base of the natural logarithms.
field,java/lang/StrictMath/PI, The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.
class,java/lang/StackTraceElement, An element in a stack trace, as returned by {@link Throwable#getStackTrace()}. Each element represents a single stack frame. All stack frames except for the one at the top of the stack represent a method invocation. The frame at the top of the stack represents the execution point at which the stack trace was generated. Typically, this is the point at which the throwable corresponding to the stack trace was created. @since 1.4 @author Josh Bloch
method,java/lang/StackTraceElement/getFileName/, Returns the name of the source file containing the execution point represented by this stack trace element. Generally, this corresponds to the SourceFile attribute of the relevant class file (as per The Java Virtual Machine Specification, Section 4.7.7). In some systems, the name may refer to some source code unit other than a file, such as an entry in source repository. @return the name of the file containing the execution point represented by this stack trace element, or null if this information is unavailable.
method,java/lang/StackTraceElement/toString/, Returns a string representation of this stack trace element. The format of this string depends on the implementation, but the following examples may be regarded as typical: MyClass.mash(MyClass.java:9) - Here, MyClass is the fully-qualified name of the class containing the execution point represented by this stack trace element, mash is the name of the method containing the execution point, MyClass.java is the source file containing the execution point, and 9 is the line number of the source line containing the execution point. MyClass.mash(MyClass.java) - As above, but the line number is unavailable. MyClass.mash(Unknown Source) - As above, but neither the file name nor the line number are available. MyClass.mash(Native Method) - As above, but neither the file name nor the line number are available, and the method containing the execution point is known to be a native method. @see Throwable#printStackTrace()
method,java/lang/StackTraceElement/equals/Object, Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance. Two stack trace elements a and b are equal if and only if: equals(a.getFileName(), b.getFileName()) && a.getLineNumber() == b.getLineNumber()) && equals(a.getClassName(), b.getClassName()) && equals(a.getMethodName(), b.getMethodName()) where equals is defined as: static boolean equals(Object a, Object b) { return a==b || (a != null && a.equals(b)); } @param obj the object to be compared with this stack trace element. @return true if the specified object is another StackTraceElement instance representing the same execution point as this instance.
class,java/lang/Short, The Short class wraps a value of primitive type short in an object. An object of type Short contains a single field whose type is short. In addition, this class provides several methods for converting a short to a String and a String to a short, as well as other constants and methods useful when dealing with a short. @author Nakul Saraiya @version 1.46, 03/23/10 @see java.lang.Number @since JDK1.1
method,java/lang/Short/toString/short, Returns a new String object representing the specified short. The radix is assumed to be 10. @param s the short to be converted @return the string representation of the specified short @see java.lang.Integer#toString(int)
method,java/lang/Short/parseShort/String, Parses the string argument as a signed decimal short. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign '-' ('&#92;u002D') to indicate a negative value. The resulting short value is returned, exactly as if the argument and the radix 10 were given as arguments to the {@link #parseShort(java.lang.String, int)} method. @param s		a String containing the short representation to be parsed @return the short value represented by the argument in decimal. @exception	NumberFormatException If the string does not			contain a parsable short.
method,java/lang/Short/equals/Object, Compares this object to the specified object. The result is true if and only if the argument is not null and is a Short object that contains the same short value as this object. @param obj	the object to compare with @return 		true if the objects are the same;			false otherwise.
method,java/lang/SecurityManager/getClassContext/, Returns the current execution stack as an array of classes. The length of the array is the number of methods on the execution stack. The element at index 0 is the class of the currently executing method, the element at index 1 is the class of that method's caller, and so on. @return the execution stack.
method,java/lang/SecurityManager/getSecurityContext/, Creates an object that encapsulates the current execution environment. The result of this method is used, for example, by the three-argument checkConnect method and by the two-argument checkRead method. These methods are needed because a trusted method may be called on to read a file or open a socket on behalf of another method. The trusted method needs to determine if the other (possibly untrusted) method would be allowed to perform the operation on its own. The default implementation of this method is to return an AccessControlContext object. @return an implementation-dependent object that encapsulates sufficient information about the current execution environment to perform some security checks later. @see java.lang.SecurityManager#checkConnect(java.lang.String, int, java.lang.Object) checkConnect @see java.lang.SecurityManager#checkRead(java.lang.String, java.lang.Object) checkRead @see java.security.AccessControlContext AccessControlContext
method,java/lang/SecurityManager/checkPermission/Permission, Throws a SecurityException if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect. This method calls AccessController.checkPermission with the given permission. @param perm the requested permission. @exception SecurityException if access is not permitted based on		 the current security policy. @exception NullPointerException if the permission argument is null. @since 1.2
method,java/lang/SecurityManager/SecurityManager/, Constructs a new SecurityManager. If there is a security manager already installed, this method first calls the security manager's checkPermission method with the RuntimePermission(createSecurityManager) permission to ensure the calling thread has permission to create a new security manager. This may result in throwing a SecurityException. @exception java.lang.SecurityException if a security manager already exists and its checkPermission method doesn't allow creation of a new security manager. @see java.lang.System#getSecurityManager() @see #checkPermission(java.security.Permission) checkPermission @see java.lang.RuntimePermission
class,java/lang/RuntimePermission, This class is for runtime permissions. A RuntimePermission contains a name (also referred to as a target name) but no actions list; you either have the named permission or you don't. The target name is the name of the runtime permission (see below). The naming convention follows the hierarchical property naming convention. Also, an asterisk may appear at the end of the name, following a ., or by itself, to signify a wildcard match. For example: loadLibrary.* or * is valid, *loadLibrary or a*b is not valid. The following table lists all the possible RuntimePermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission. Permission Target Name What the Permission Allows Risks of Allowing this Permission createClassLoader Creation of a class loader This is an extremely dangerous permission to grant. Malicious applications that can instantiate their own class loaders could then load their own rogue classes into the system. These newly loaded classes could be placed into any protection domain by the class loader, thereby automatically granting the classes the permissions for that domain. getClassLoader Retrieval of a class loader (e.g., the class loader for the calling class) This would grant an attacker permission to get the class loader for a particular class. This is dangerous because having access to a class's class loader allows the attacker to load other classes available to that class loader. The attacker would typically otherwise not have access to those classes. setContextClassLoader Setting of the context class loader used by a thread The context class loader is used by system code and extensions when they need to lookup resources that might not exist in the system class loader. Granting setContextClassLoader permission would allow code to change which context class loader is used for a particular thread, including system threads. enableContextClassLoaderOverride Subclass implementation of the thread context class loader methods The context class loader is used by system code and extensions when they need to lookup resources that might not exist in the system class loader. Granting enableContextClassLoaderOverride permission would allow a subclass of Thread to override the methods that are used to get or set the context class loader for a particular thread. setSecurityManager Setting of the security manager (possibly replacing an existing one) The security manager is a class that allows applications to implement a security policy. Granting the setSecurityManager permission would allow code to change which security manager is used by installing a different, possibly less restrictive security manager, thereby bypassing checks that would have been enforced by the original security manager. createSecurityManager Creation of a new security manager This gives code access to protected, sensitive methods that may disclose information about other classes or the execution stack. getenv.{variable name} Reading of the value of the specified environment variable This would allow code to read the value, or determine the existence, of a particular environment variable. This is dangerous if the variable contains confidential data. exitVM.{exit status} Halting of the Java Virtual Machine with the specified exit status This allows an attacker to mount a denial-of-service attack by automatically forcing the virtual machine to halt. Note: The exitVM.* permission is automatically granted to all code loaded from the application class path, thus enabling applications to terminate themselves. Also, the exitVM permission is equivalent to exitVM.*. shutdownHooks Registration and cancellation of virtual-machine shutdown hooks This allows an attacker to register a malicious shutdown hook that interferes with the clean shutdown of the virtual machine. setFactory Setting of the socket factory used by ServerSocket or Socket, or of the stream handler factory used by URL This allows code to set the actual implementation for the socket, server socket, stream handler, or RMI socket factory. An attacker may set a faulty implementation which mangles the data stream. setIO Setting of System.out, System.in, and System.err This allows changing the value of the standard system streams. An attacker may change System.in to monitor and steal user input, or may set System.err to a null OutputStream, which would hide any error messages sent to System.err. modifyThread Modification of threads, e.g., via calls to Thread interrupt, stop, suspend, resume, setDaemon, setPriority, setName and setUncaughtExceptionHandler methods This allows an attacker to modify the behaviour of any thread in the system. stopThread Stopping of threads via calls to the Thread stop method This allows code to stop any thread in the system provided that it is already granted permission to access that thread. This poses as a threat, because that code may corrupt the system by killing existing threads. modifyThreadGroup modification of thread groups, e.g., via calls to ThreadGroup destroy, getParent, resume, setDaemon, setMaxPriority, stop, and suspend methods This allows an attacker to create thread groups and set their run priority. getProtectionDomain Retrieval of the ProtectionDomain for a class This allows code to obtain policy information for a particular code source. While obtaining policy information does not compromise the security of the system, it does give attackers additional information, such as local file names for example, to better aim an attack. getFileSystemAttributes Retrieval of file system attributes This allows code to obtain file system information such as disk usage or disk space available to the caller. This is potentially dangerous because it discloses information about the system hardware configuration and some information about the caller's privilege to write files. readFileDescriptor Reading of file descriptors This would allow code to read the particular file associated with the file descriptor read. This is dangerous if the file contains confidential data. writeFileDescriptor Writing to file descriptors This allows code to write to a particular file associated with the descriptor. This is dangerous because it may allow malicious code to plant viruses or at the very least, fill up your entire disk. loadLibrary.{library name} Dynamic linking of the specified library It is dangerous to allow an applet permission to load native code libraries, because the Java security architecture is not designed to and does not prevent malicious behavior at the level of native code. accessClassInPackage.{package name} Access to the specified package via a class loader's loadClass method when that class loader calls the SecurityManager checkPackageAccess method This gives code access to classes in packages to which it normally does not have access. Malicious code may use these classes to help in its attempt to compromise security in the system. defineClassInPackage.{package name} Definition of classes in the specified package, via a class loader's defineClass method when that class loader calls the SecurityManager checkPackageDefinition method. This grants code permission to define a class in a particular package. This is dangerous because malicious code with this permission may define rogue classes in trusted packages like java.security or java.lang, for example. accessDeclaredMembers Access to the declared members of a class This grants code permission to query a class for its public, protected, default (package) access, and private fields and/or methods. Although the code would have access to the private and protected field and method names, it would not have access to the private/protected field data and would not be able to invoke any private methods. Nevertheless, malicious code may use this information to better aim an attack. Additionally, it may invoke any public methods and/or access public fields in the class. This could be dangerous if the code would normally not be able to invoke those methods and/or access the fields because it can't cast the object to the class/interface with those methods and fields. queuePrintJob Initiation of a print job request This could print sensitive information to a printer, or simply waste paper. getStackTrace Retrieval of the stack trace information of another thread. This allows retrieval of the stack trace information of another thread. This might allow malicious code to monitor the execution of threads and discover vulnerabilities in applications. setDefaultUncaughtExceptionHandler Setting the default handler to be used when a thread terminates abruptly due to an uncaught exception This allows an attacker to register a malicious uncaught exception handler that could interfere with termination of a thread preferences Represents the permission required to get access to the java.util.prefs.Preferences implementations user or system root which in turn allows retrieval or update operations within the Preferences persistent backing store.) This permission allows the user to read from or write to the preferences backing store if the user running the code has sufficient OS privileges to read/write to that backing store. The actual backing store may reside within a traditional filesystem directory or within a registry depending on the platform OS @see java.security.BasicPermission @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @see java.lang.SecurityManager @version 1.58 10/03/23 @author Marianne Mueller @author Roland Schemers
method,java/lang/RuntimeException/RuntimeException/,Constructs a new runtime exception with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}.
method,java/lang/RuntimeException/RuntimeException/String,Constructs a new runtime exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}. @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
method,java/lang/RuntimeException/RuntimeException/String;Throwable, Constructs a new runtime exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this runtime exception's detail message. @param message the detail message (which is saved for later retrieval by the {@link #getMessage()} method). @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.4
method,java/lang/Runtime/getRuntime/, Returns the runtime object associated with the current Java application. Most of the methods of class Runtime are instance methods and must be invoked with respect to the current runtime object. @return the Runtime object associated with the current Java application.
method,java/lang/Runtime/exit/int, Terminates the currently running Java virtual machine by initiating its shutdown sequence. This method never returns normally. The argument serves as a status code; by convention, a nonzero status code indicates abnormal termination. The virtual machine's shutdown sequence consists of two phases. In the first phase all registered {@link #addShutdownHook shutdown hooks}, if any, are started in some unspecified order and allowed to run concurrently until they finish. In the second phase all uninvoked finalizers are run if {@link #runFinalizersOnExit finalization-on-exit} has been enabled. Once this is done the virtual machine {@link #halt halts}. If this method is invoked after the virtual machine has begun its shutdown sequence then if shutdown hooks are being run this method will block indefinitely. If shutdown hooks have already been run and on-exit finalization has been enabled then this method halts the virtual machine with the given status code if the status is nonzero; otherwise, it blocks indefinitely. The {@link System#exit(int) System.exit} method is the conventional and convenient means of invoking this method. @param status Termination status. By convention, a nonzero status code indicates abnormal termination. @throws SecurityException If a security manager is present and its {@link SecurityManager#checkExit checkExit} method does not permit exiting with the specified status @see java.lang.SecurityException @see java.lang.SecurityManager#checkExit(int) @see #addShutdownHook @see #removeShutdownHook @see #runFinalizersOnExit @see #halt(int)
method,java/lang/Runtime/removeShutdownHook/Thread, De-registers a previously-registered virtual-machine shutdown hook. @param hook the hook to remove @return true if the specified hook had previously been registered and was successfully de-registered, false otherwise. @throws IllegalStateException If the virtual machine is already in the process of shutting down @throws SecurityException If a security manager is present and it denies {@link RuntimePermission}(shutdownHooks) @see #addShutdownHook @see #exit(int) @since 1.3
method,java/lang/Runtime/runFinalizersOnExit/boolean, Enable or disable finalization on exit; doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits. By default, finalization on exit is disabled. If there is a security manager, its checkExit method is first called with 0 as its argument to ensure the exit is allowed. This could result in a SecurityException. @param value true to enable finalization on exit, false to disable @deprecated This method is inherently unsafe. It may result in 	 finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic	 behavior or deadlock. @throws SecurityException if a security manager exists and its checkExit method doesn't allow the exit. @see java.lang.Runtime#exit(int) @see java.lang.Runtime#gc() @see java.lang.SecurityManager#checkExit(int) @since JDK1.1
method,java/lang/Runtime/exec/String, Executes the specified string command in a separate process. This is a convenience method. An invocation of the form exec(command) behaves in exactly the same way as the invocation {@link #exec(String, String[], File) exec}(command, null, null). @param command a specified system command. @return A new {@link Process} object for managing the subprocess @throws SecurityException If a security manager exists and its {@link SecurityManager#checkExec checkExec} method doesn't allow creation of the subprocess @throws IOException If an I/O error occurs @throws NullPointerException If command is null @throws IllegalArgumentException If command is empty @see #exec(String[], String[], File) @see ProcessBuilder
method,java/lang/Runtime/exec/String[], Executes the specified command and arguments in a separate process. This is a convenience method. An invocation of the form exec(cmdarray) behaves in exactly the same way as the invocation {@link #exec(String[], String[], File) exec}(cmdarray, null, null). @param cmdarray array containing the command to call and its arguments. @return A new {@link Process} object for managing the subprocess @throws SecurityException If a security manager exists and its {@link SecurityManager#checkExec checkExec} method doesn't allow creation of the subprocess @throws IOException If an I/O error occurs @throws NullPointerException If cmdarray is null, or one of the elements of cmdarray is null @throws IndexOutOfBoundsException If cmdarray is an empty array (has length 0) @see ProcessBuilder
method,java/lang/Runtime/availableProcessors/, Returns the number of processors available to the Java virtual machine. This value may change during a particular invocation of the virtual machine. Applications that are sensitive to the number of available processors should therefore occasionally poll this property and adjust their resource usage appropriately. @return the maximum number of processors available to the virtual machine; never smaller than one @since 1.4
method,java/lang/Runtime/freeMemory/, Returns the amount of free memory in the Java Virtual Machine. Calling the gc method may result in increasing the value returned by freeMemory. @return an approximation to the total amount of memory currently available for future allocated objects, measured in bytes.
method,java/lang/Runtime/gc/, Runs the garbage collector. Calling this method suggests that the Java virtual machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. When control returns from the method call, the virtual machine has made its best effort to recycle all discarded objects. The name gc stands for garbage collector. The virtual machine performs this recycling process automatically as needed, in a separate thread, even if the gc method is not invoked explicitly. The method {@link System#gc()} is the conventional and convenient means of invoking this method. 
method,java/lang/Runtime/runFinalization/, Runs the finalization methods of any objects pending finalization. Calling this method suggests that the Java virtual machine expend effort toward running the finalize methods of objects that have been found to be discarded but whose finalize methods have not yet been run. When control returns from the method call, the virtual machine has made a best effort to complete all outstanding finalizations. The virtual machine performs the finalization process automatically as needed, in a separate thread, if the runFinalization method is not invoked explicitly. The method {@link System#runFinalization()} is the conventional and convenient means of invoking this method. @see java.lang.Object#finalize()
method,java/lang/Runtime/traceInstructions/boolean, Enables/Disables tracing of instructions. If the boolean argument is true, this method suggests that the Java virtual machine emit debugging information for each instruction in the virtual machine as it is executed. The format of this information, and the file or other output stream to which it is emitted, depends on the host environment. The virtual machine may ignore this request if it does not support this feature. The destination of the trace output is system dependent. If the boolean argument is false, this method causes the virtual machine to stop performing the detailed instruction trace it is performing. @param on true to enable instruction tracing; false to disable this feature.
method,java/lang/Runtime/traceMethodCalls/boolean, Enables/Disables tracing of method calls. If the boolean argument is true, this method suggests that the Java virtual machine emit debugging information for each method in the virtual machine as it is called. The format of this information, and the file or other output stream to which it is emitted, depends on the host environment. The virtual machine may ignore this request if it does not support this feature. Calling this method with argument false suggests that the virtual machine cease emitting per-call debugging information. @param on true to enable instruction tracing; false to disable this feature.
method,java/lang/Runtime/loadLibrary/String, Loads the dynamic library with the specified library name. A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner. First, if there is a security manager, its checkLink method is called with the libname as its argument. This may result in a security exception. The method {@link System#loadLibrary(String)} is the conventional and convenient means of invoking this method. If native methods are to be used in the implementation of a class, a standard strategy is to put the native code in a library file (call it LibFile) and then to put a static initializer: static { System.loadLibrary(LibFile); } within the class declaration. When the class is loaded and initialized, the necessary native code implementation for the native methods will then be loaded as well. If this method is called more than once with the same library name, the second and subsequent calls are ignored. @param libname the name of the library. @exception SecurityException if a security manager exists and its checkLink method doesn't allow loading of the specified dynamic library @exception UnsatisfiedLinkError if the library does not exist. @exception NullPointerException if libname is null @see java.lang.SecurityException @see java.lang.SecurityManager#checkLink(java.lang.String)
method,java/lang/Runtime/getLocalizedInputStream/InputStream, Creates a localized version of an input stream. This method takes an InputStream and returns an InputStream equivalent to the argument in all respects except that it is localized: as characters in the local character set are read from the stream, they are automatically converted from the local character set to Unicode. If the argument is already a localized stream, it may be returned as the result. @param in InputStream to localize @return a localized input stream @see java.io.InputStream @see java.io.BufferedReader#BufferedReader(java.io.Reader) @see java.io.InputStreamReader#InputStreamReader(java.io.InputStream) @deprecated As of JDK&nbsp;1.1, the preferred way to translate a byte stream in the local encoding into a character stream in Unicode is via the InputStreamReader and BufferedReader classes.
method,java/lang/Runtime/getLocalizedOutputStream/OutputStream, Creates a localized version of an output stream. This method takes an OutputStream and returns an OutputStream equivalent to the argument in all respects except that it is localized: as Unicode characters are written to the stream, they are automatically converted to the local character set. If the argument is already a localized stream, it may be returned as the result. @deprecated As of JDK&nbsp;1.1, the preferred way to translate a Unicode character stream into a byte stream in the local encoding is via the OutputStreamWriter, BufferedWriter, and PrintWriter classes. @param out OutputStream to localize @return a localized output stream @see java.io.OutputStream @see java.io.BufferedWriter#BufferedWriter(java.io.Writer) @see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream) @see java.io.PrintWriter#PrintWriter(java.io.OutputStream)
method,java/lang/Runnable/run/, When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread. The general contract of the method run is that it may take any action whatsoever. @see java.lang.Thread#run()
interface,java/lang/Readable, A Readable is a source of characters. Characters from a Readable are made available to callers of the read method via a {@link java.nio.CharBuffer CharBuffer}. @version 1.5 10/03/23 @since 1.5
method,java/lang/Readable/read/CharBuffer, Attempts to read characters into the specified character buffer. The buffer is used as a repository of characters as-is: the only changes made are the results of a put operation. No flipping or rewinding of the buffer is performed. @param cb the buffer to read characters into @return @return The number of char values added to the buffer, or -1 if this source of characters is at its end @throws IOException if an I/O error occurs @throws NullPointerException if cb is null @throws ReadOnlyBufferException if cb is a read only buffer
method,java/lang/ProcessBuilder/environment/, Returns a string map view of this process builder's environment. Whenever a process builder is created, the environment is initialized to a copy of the current process environment (see {@link System#getenv()}). Subprocesses subsequently started by this object's {@link #start()} method will use this map as their environment. The returned object may be modified using ordinary {@link java.util.Map Map} operations. These modifications will be visible to subprocesses started via the {@link #start()} method. Two ProcessBuilder instances always contain independent process environments, so changes to the returned map will never be reflected in any other ProcessBuilder instance or the values returned by {@link System#getenv System.getenv}. If the system does not support environment variables, an empty map is returned. The returned map does not permit null keys or values. Attempting to insert or query the presence of a null key or value will throw a {@link NullPointerException}. Attempting to query the presence of a key or value which is not of type {@link String} will throw a {@link ClassCastException}. The behavior of the returned map is system-dependent. A system may not allow modifications to environment variables or may forbid certain variable names or values. For this reason, attempts to modify the map may fail with {@link UnsupportedOperationException} or {@link IllegalArgumentException} if the modification is not permitted by the operating system. Since the external format of environment variable names and values is system-dependent, there may not be a one-to-one mapping between them and Java's Unicode strings. Nevertheless, the map is implemented in such a way that environment variables which are not modified by Java code will have an unmodified native representation in the subprocess. The returned map and its collection views may not obey the general contract of the {@link Object#equals} and {@link Object#hashCode} methods. The returned map is typically case-sensitive on all platforms. If a security manager exists, its {@link SecurityManager#checkPermission checkPermission} method is called with a {@link RuntimePermission}(getenv.*) permission. This may result in a {@link SecurityException} being thrown. When passing information to a Java subprocess, system properties are generally preferred over environment variables. @return This process builder's environment @throws SecurityException If a security manager exists and its {@link SecurityManager#checkPermission checkPermission} method doesn't allow access to the process environment @see Runtime#exec(String[],String[],java.io.File) @see System#getenv()
method,java/lang/ProcessBuilder/directory/, Returns this process builder's working directory. Subprocesses subsequently started by this object's {@link #start()} method will use this as their working directory. The returned value may be null -- this means to use the working directory of the current Java process, usually the directory named by the system property user.dir, as the working directory of the child process. @return This process builder's working directory
method,java/lang/ProcessBuilder/directory/File, Sets this process builder's working directory. Subprocesses subsequently started by this object's {@link #start()} method will use this as their working directory. The argument may be null -- this means to use the working directory of the current Java process, usually the directory named by the system property user.dir, as the working directory of the child process. @param directory The new working directory @return This process builder
method,java/lang/ProcessBuilder/redirectErrorStream/, Tells whether this process builder merges standard error and standard output. If this property is true, then any error output generated by subprocesses subsequently started by this object's {@link #start()} method will be merged with the standard output, so that both can be read using the {@link Process#getInputStream()} method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. @return This process builder's redirectErrorStream property
method,java/lang/ProcessBuilder/redirectErrorStream/boolean, Sets this process builder's redirectErrorStream property. If this property is true, then any error output generated by subprocesses subsequently started by this object's {@link #start()} method will be merged with the standard output, so that both can be read using the {@link Process#getInputStream()} method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. @param redirectErrorStream The new property value @return This process builder
method,java/lang/Process/getOutputStream/, Gets the output stream of the subprocess. Output to the stream is piped into the standard input stream of the process represented by this Process object. Implementation note: It is a good idea for the output stream to be buffered. @return the output stream connected to the normal input of the subprocess.
method,java/lang/Process/getInputStream/, Gets the input stream of the subprocess. The stream obtains data piped from the standard output stream of the process represented by this Process object. Implementation note: It is a good idea for the input stream to be buffered. @return the input stream connected to the normal output of the subprocess. @see ProcessBuilder#redirectErrorStream()
method,java/lang/Process/getErrorStream/, Gets the error stream of the subprocess. The stream obtains data piped from the error output stream of the process represented by this Process object. Implementation note: It is a good idea for the input stream to be buffered. @return the input stream connected to the error stream of the subprocess. @see ProcessBuilder#redirectErrorStream()
method,java/lang/Process/waitFor/, causes the current thread to wait, if necessary, until the process represented by this Process object has terminated. This method returns immediately if the subprocess has already terminated. If the subprocess has not yet terminated, the calling thread will be blocked until the subprocess exits. @return the exit value of the process. By convention, 0 indicates normal termination. @exception InterruptedException if the current thread is {@linkplain Thread#interrupt() interrupted} by another thread while it is waiting, then the wait is ended and an {@link InterruptedException} is thrown.
class,java/lang/Package, Package objects contain version information about the implementation and specification of a Java package. This versioning information is retrieved and made available by the {@link ClassLoader ClassLoader} instance that loaded the class(es). Typically, it is stored in the manifest that is distributed with the classes. The set of classes that make up the package may implement a particular specification and if so the specification title, version number, and vendor strings identify that specification. An application can ask if the package is compatible with a particular version, see the {@link #isCompatibleWith isCompatibleWith} method for details. Specification version numbers use a syntax that consists of positive decimal integers separated by periods ., for example 2.0 or 1.2.3.4.5.6.7. This allows an extensible number to be used to represent major, minor, micro, etc. versions. The version specification is described by the following formal grammar: SpecificationVersion: Digits RefinedVersionopt RefinedVersion: . Digits . Digits RefinedVersion Digits: Digit Digits Digit: any character for which {@link Character#isDigit} returns true, e.g. 0, 1, 2, ... The implementation title, version, and vendor strings identify an implementation and are made available conveniently to enable accurate reporting of the packages involved when a problem occurs. The contents all three implementation strings are vendor specific. The implementation version strings have no specified syntax and should only be compared for equality with desired version identifiers. Within each ClassLoader instance all classes from the same java package have the same Package object. The static methods allow a package to be found by name or the set of all packages known to the current class loader to be found. @see ClassLoader#definePackage
method,java/lang/Package/getImplementationVersion/, Return the version of this implementation. It consists of any string assigned by the vendor of this implementation and does not have any particular syntax specified or expected by the Java runtime. It may be compared for equality with other package version strings used for this implementation by this vendor for this package. @return the version of the implementation, null is returned if it is not known.
method,java/lang/Package/isCompatibleWith/String, Compare this package's specification version with a desired version. It returns true if this packages specification version number is greater than or equal to the desired version number. Version numbers are compared by sequentially comparing corresponding components of the desired and specification strings. Each component is converted as a decimal integer and the values compared. If the specification value is greater than the desired value true is returned. If the value is less false is returned. If the values are equal the period is skipped and the next pair of components is compared. @param desired the version string of the desired version. @return true if this package's version number is greater 		than or equal to the desired version number @exception NumberFormatException if the desired or current version		is not of the correct dotted form.
method,java/lang/Package/getPackage/String, Find a package by name in the callers ClassLoader instance. The callers ClassLoader instance is used to find the package instance corresponding to the named class. If the callers ClassLoader instance is null then the set of packages loaded by the system ClassLoader instance is searched to find the named package. Packages have attributes for versions and specifications only if the class loader created the package instance with the appropriate attributes. Typically, those attributes are defined in the manifests that accompany the classes. @param name a package name, for example, java.lang. @return the package of the requested name. It may be null if no package 		information is available from the archive or codebase.
method,java/lang/Package/getPackages/, Get all the packages currently known for the caller's ClassLoader instance. Those packages correspond to classes loaded via or accessible by name to that ClassLoader instance. If the caller's ClassLoader instance is the bootstrap ClassLoader instance, which may be represented by null in some implementations, only packages corresponding to classes loaded by the bootstrap ClassLoader instance will be returned. @return a new array of packages known to the callers ClassLoader instance. An zero length array is returned if none are known.
method,java/lang/Package/getAnnotation/Class, @throws NullPointerException {@inheritDoc} @since 1.5
method,java/lang/Package/isAnnotationPresent/Class, @throws NullPointerException {@inheritDoc} @since 1.5
class,java/lang/Object, Class Object is the root of the class hierarchy. Every class has Object as a superclass. All objects, including arrays, implement the methods of this class. @author unascribed @version 1.74, 03/23/10 @see java.lang.Class @since JDK1.0
method,java/lang/Object/getClass/, Returns the runtime class of this {@code Object}. The returned {@code Class} object is the object that is locked by {@code static synchronized} methods of the represented class. The actual result type is {@code Class} where {@code |X|} is the erasure of the static type of the expression on which {@code getClass} is called. For example, no cast is required in this code fragment: {@code Number n = 0; } {@code Class c = n.getClass(); } @return The {@code Class} object that represents the runtime class of this object. @see The Java Language Specification, Third Edition (15.8.2 Class Literals)
method,java/lang/Object/hashCode/, Returns a hash code value for the object. This method is supported for the benefit of hashtables such as those provided by java.util.Hashtable. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.util.Hashtable
method,java/lang/Object/finalize/, Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the JavaTM virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored. @throws Throwable the Exception raised by this method
method,java/lang/Number/intValue/, Returns the value of the specified number as an int. This may involve rounding or truncation. @return the numeric value represented by this object after conversion to type int.
method,java/lang/Number/longValue/, Returns the value of the specified number as a long. This may involve rounding or truncation. @return the numeric value represented by this object after conversion to type long.
method,java/lang/Number/floatValue/, Returns the value of the specified number as a float. This may involve rounding. @return the numeric value represented by this object after conversion to type float.
method,java/lang/Number/doubleValue/, Returns the value of the specified number as a double. This may involve rounding. @return the numeric value represented by this object after conversion to type double.
method,java/lang/Number/byteValue/, Returns the value of the specified number as a byte. This may involve rounding or truncation. @return the numeric value represented by this object after conversion to type byte. @since JDK1.1
method,java/lang/Number/shortValue/, Returns the value of the specified number as a short. This may involve rounding or truncation. @return the numeric value represented by this object after conversion to type short. @since JDK1.1
class,java/lang/NoSuchMethodError, Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed. @author unascribed @version 1.23, 03/23/10 @since JDK1.0
class,java/lang/NoSuchFieldError, Thrown if an application tries to access or modify a specified field of an object, and that object no longer has that field. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed. @author unascribed @version 1.14, 03/23/10 @since JDK1.0
class,java/lang/NoClassDefFoundError, Thrown if the Java Virtual Machine or a ClassLoader instance tries to load in the definition of a class (as part of a normal method call or as part of creating a new instance using the new expression) and no definition of the class could be found. The searched-for class definition existed when the currently executing class was compiled, but the definition can no longer be found. @author unascribed @version 1.24, 03/23/10 @since JDK1.0
method,java/lang/Math/toDegrees/double, Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should not expect cos(toRadians(90.0)) to exactly equal 0.0. @param angrad an angle, in radians @return the measurement of the angle angrad in degrees. @since 1.2
method,java/lang/Math/ceil/double, Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. If the argument value is less than zero but greater than -1.0, then the result is negative zero. Note that the value of Math.ceil(x) is exactly the value of -Math.floor(-x). @param a a value. @return the smallest (closest to negative infinity) floating-point value that is greater than or equal to the argument and is equal to a mathematical integer. 
method,java/lang/Math/random/, Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range. When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression new java.util.Random This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else. This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator. @return a pseudorandom double greater than or equal to 0.0 and less than 1.0. @see java.util.Random#nextDouble()
method,java/lang/Math/abs/int, Returns the absolute value of an int value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of Integer.MIN_VALUE, the most negative representable int value, the result is that same value, which is negative. @param a the argument whose absolute value is to be determined @return the absolute value of the argument. @see java.lang.Integer#MIN_VALUE
method,java/lang/Math/abs/long, Returns the absolute value of a long value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of Long.MIN_VALUE, the most negative representable long value, the result is that same value, which is negative. @param a the argument whose absolute value is to be determined @return the absolute value of the argument. @see java.lang.Long#MIN_VALUE
method,java/lang/Math/max/float;float, Returns the greater of two float values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero. @param a an argument. @param b another argument. @return the larger of a and b.
method,java/lang/Math/max/double;double, Returns the greater of two double values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero. @param a an argument. @param b another argument. @return the larger of a and b.
method,java/lang/Math/min/float;float, Returns the smaller of two float values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero. @param a an argument. @param b another argument. @return the smaller of a and b.
method,java/lang/Math/min/double;double, Returns the smaller of two double values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero. @param a an argument. @param b another argument. @return the smaller of a and b.
method,java/lang/Math/ulp/double, Returns the size of an ulp of the argument. An ulp of a double value is the positive distance between this floating-point value and the double value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Double.MIN_VALUE. If the argument is &plusmn;Double.MAX_VALUE, then the result is equal to 2971. @param d the floating-point value whose ulp is to be returned @return the size of an ulp of the argument @author Joseph D. Darcy @since 1.5
method,java/lang/Math/ulp/float, Returns the size of an ulp of the argument. An ulp of a float value is the positive distance between this floating-point value and the float value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Float.MIN_VALUE. If the argument is &plusmn;Float.MAX_VALUE, then the result is equal to 2104. @param f the floating-point value whose ulp is to be returned @return the size of an ulp of the argument @author Joseph D. Darcy @since 1.5
method,java/lang/Math/nextAfter/double;double, Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, {@code direction} is returned unchanged (as implied by the requirement of returning the second argument if the arguments compare as equal). If {@code start} is &plusmn;{@link Double#MIN_VALUE} and {@code direction} has a value such that the result should have a smaller magnitude, then a zero with the same sign as {@code start} is returned. If {@code start} is infinite and {@code direction} has a value such that the result should have a smaller magnitude, {@link Double#MAX_VALUE} with the same sign as {@code start} is returned. If {@code start} is equal to &plusmn; {@link Double#MAX_VALUE} and {@code direction} has a value such that the result should have a larger magnitude, an infinity with same sign as {@code start} is returned. @param start starting floating-point value @param direction value indicating which of {@code start}'s neighbors or {@code start} should be returned @return The floating-point number adjacent to {@code start} in the direction of {@code direction}. @since 1.6
method,java/lang/Math/nextAfter/float;double, Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal a value equivalent to the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, a value equivalent to {@code direction} is returned. If {@code start} is &plusmn;{@link Float#MIN_VALUE} and {@code direction} has a value such that the result should have a smaller magnitude, then a zero with the same sign as {@code start} is returned. If {@code start} is infinite and {@code direction} has a value such that the result should have a smaller magnitude, {@link Float#MAX_VALUE} with the same sign as {@code start} is returned. If {@code start} is equal to &plusmn; {@link Float#MAX_VALUE} and {@code direction} has a value such that the result should have a larger magnitude, an infinity with same sign as {@code start} is returned. @param start starting floating-point value @param direction value indicating which of {@code start}'s neighbors or {@code start} should be returned @return The floating-point number adjacent to {@code start} in the direction of {@code direction}. @since 1.6
method,java/lang/Math/nextUp/double, Returns the floating-point value adjacent to {@code d} in the direction of positive infinity. This method is semantically equivalent to {@code nextAfter(d, Double.POSITIVE_INFINITY)}; however, a {@code nextUp} implementation may run faster than its equivalent {@code nextAfter} call. Special Cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is {@link Double#MIN_VALUE} @param d starting floating-point value @return The adjacent floating-point value closer to positive infinity. @since 1.6
method,java/lang/Math/nextUp/float, Returns the floating-point value adjacent to {@code f} in the direction of positive infinity. This method is semantically equivalent to {@code nextAfter(f, Float.POSITIVE_INFINITY)}; however, a {@code nextUp} implementation may run faster than its equivalent {@code nextAfter} call. Special Cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is {@link Float#MIN_VALUE} @param f starting floating-point value @return The adjacent floating-point value closer to positive infinity. @since 1.6
method,java/lang/Math/scalb/double;int, Return {@code d} &times; 2{@code scaleFactor} rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between {@link Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the answer is calculated exactly. If the exponent of the result would be larger than {@code Double.MAX_EXPONENT}, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n), -n)} may not equal x. When the result is non-NaN, the result has the same sign as {@code d}. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned. @param d number to be scaled by a power of two. @param scaleFactor power of 2 used to scale {@code d} @return {@code d} &times; 2{@code scaleFactor} @since 1.6
method,java/lang/Math/scalb/float;int, Return {@code f} &times; 2{@code scaleFactor} rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between {@link Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the answer is calculated exactly. If the exponent of the result would be larger than {@code Float.MAX_EXPONENT}, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n), -n)} may not equal x. When the result is non-NaN, the result has the same sign as {@code f}. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned. @param f number to be scaled by a power of two. @param scaleFactor power of 2 used to scale {@code f} @return {@code f} &times; 2{@code scaleFactor} @since 1.6
class,java/lang/Long, The Long class wraps a value of the primitive type long in an object. An object of type Long contains a single field whose type is long. In addition, this class provides several methods for converting a long to a String and a String to a long, as well as other constants and methods useful when dealing with a long. Implementation note: The implementations of the bit twiddling methods (such as {@link #highestOneBit(long) highestOneBit} and {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are based on material from Henry S. Warren, Jr.'s Hacker's Delight, (Addison Wesley, 2002). @author Lee Boynton @author Arthur van Hoff @author Josh Bloch @version 1.83, 03/23/10 @since JDK1.0
method,java/lang/Long/toString/long;int, Returns a string representation of the first argument in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. If the first argument is negative, the first element of the result is the ASCII minus sign '-' ('&#92;u002d'). If the first argument is not negative, no sign character appears in the result. The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character '0' ('&#92;u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits: 0123456789abcdefghijklmnopqrstuvwxyz These are '&#92;u0030' through '&#92;u0039' and '&#92;u0061' through '&#92;u007a'. If radix is N, then the first N of these characters are used as radix-N digits in the order shown. Thus, the digits for hexadecimal (radix 16) are 0123456789abcdef. If uppercase letters are desired, the {@link java.lang.String#toUpperCase()} method may be called on the result: Long.toString(n, 16).toUpperCase() @param i a longto be converted to a string. @param radix the radix to use in the string representation. @return a string representation of the argument in the specified radix. @see java.lang.Character#MAX_RADIX @see java.lang.Character#MIN_RADIX
method,java/lang/Long/toHexString/long, Returns a string representation of the long argument as an unsigned integer in base&nbsp;16. The unsigned long value is the argument plus 264 if the argument is negative; otherwise, it is equal to the argument. This value is converted to a string of ASCII digits in hexadecimal (base&nbsp;16) with no extra leading 0s. If the unsigned magnitude is zero, it is represented by a single zero character '0' ('&#92;u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits: 0123456789abcdef These are the characters '&#92;u0030' through '&#92;u0039' and '&#92;u0061' through '&#92;u0066'. If uppercase letters are desired, the {@link java.lang.String#toUpperCase()} method may be called on the result: Long.toHexString(n).toUpperCase() @param i a long to be converted to a string. @return the string representation of the unsigned long 		value represented by the argument in hexadecimal		(base&nbsp;16). @since JDK 1.0.2
method,java/lang/Long/parseLong/String;int, Parses the string argument as a signed long in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether {@link java.lang.Character#digit(char, int)} returns a nonnegative value), except that the first character may be an ASCII minus sign '-' ('&#92;u002D') to indicate a negative value. The resulting long value is returned. Note that neither the character L ('&#92;u004C') nor l ('&#92;u006C') is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code - except that either L or l may appear as a digit for a radix greater than 22. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than {@link java.lang.Character#MIN_RADIX} or larger than {@link java.lang.Character#MAX_RADIX}. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('&#92;u002d') provided that the string is longer than length 1. The value represented by the string is not a value of type long. Examples: parseLong(0, 10) returns 0L parseLong(473, 10) returns 473L parseLong(-0, 10) returns 0L parseLong(-FF, 16) returns -255L parseLong(1100110, 2) returns 102L parseLong(99, 8) throws a NumberFormatException parseLong(Hazelnut, 10) throws a NumberFormatException parseLong(Hazelnut, 36) returns 1356099454469L @param s the String containing the long representation to be parsed. @param radix the radix to be used while parsing s. @return the long represented by the string argument in the specified radix. @exception NumberFormatException if the string does not contain a parsable long.
method,java/lang/Long/parseLong/String, Parses the string argument as a signed decimal long. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign '-' (&#92;u002D') to indicate a negative value. The resulting long value is returned, exactly as if the argument and the radix 10 were given as arguments to the {@link #parseLong(java.lang.String, int)} method. Note that neither the character L ('&#92;u004C') nor l ('&#92;u006C') is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code. @param s a String containing the long representation to be parsed @return the long represented by the argument in 		 decimal. @exception NumberFormatException if the string does not contain a parsable long.
method,java/lang/Long/equals/Object, Compares this object to the specified object. The result is true if and only if the argument is not null and is a Long object that contains the same long value as this object. @param obj the object to compare with. @return true if the objects are the same; false otherwise.
method,java/lang/Long/getLong/String;long, Determines the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the {@link java.lang.System#getProperty(java.lang.String)} method. The string value of this property is then interpreted as a long value and a Long object representing this value is returned. Details of possible numeric formats can be found with the definition of getProperty. The second argument is the default value. A Long object that represents the value of the second argument is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null. In other words, this method returns a Long object equal to the value of: getLong(nm, new Long(val)) but in practice it may be implemented in a manner such as: Long result = getLong(nm, null); return (result == null) ? new Long(val) : result; to avoid the unnecessary allocation of a Long object when the default value is not needed. @param nm property name. @param val default value. @return the Long value of the property. @see java.lang.System#getProperty(java.lang.String) @see java.lang.System#getProperty(java.lang.String, java.lang.String)
method,java/lang/Long/getLong/String;Long, Returns the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the {@link java.lang.System#getProperty(java.lang.String)} method. The string value of this property is then interpreted as a long value, as per the Long.decode method, and a Long object representing this value is returned. If the property value begins with the two ASCII characters 0x or the ASCII character #, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as for the method {@link #valueOf(java.lang.String, int)} with radix 16. If the property value begins with the ASCII character 0 followed by another character, it is parsed as an octal integer exactly as by the method {@link #valueOf(java.lang.String, int)} with radix 8. Otherwise the property value is parsed as a decimal integer exactly as by the method {@link #valueOf(java.lang.String, int)} with radix 10. Note that, in every case, neither L ('&#92;u004C') nor l ('&#92;u006C') is permitted to appear at the end of the property value as a type indicator, as would be permitted in Java programming language source code. The second argument is the default value. The default value is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null. @param nm property name. @param val default value. @return the Long value of the property. @see java.lang.System#getProperty(java.lang.String) @see java.lang.System#getProperty(java.lang.String, java.lang.String) @see java.lang.Long#decode
method,java/lang/Long/numberOfLeadingZeros/long, Returns the number of zero bits preceding the highest-order (leftmost) one-bit in the two's complement binary representation of the specified long value. Returns 64 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero. Note that this method is closely related to the logarithm base 2. For all positive long values x: floor(log2(x)) = 63 - numberOfLeadingZeros(x) ceil(log2(x)) = 64 - numberOfLeadingZeros(x - 1) @return the number of zero bits preceding the highest-order (leftmost) one-bit in the two's complement binary representation of the specified long value, or 64 if the value is equal to zero. @since 1.5
method,java/lang/Long/rotateLeft/long;int, Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits. (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) Note that left rotation with a negative distance is equivalent to right rotation: rotateLeft(val, -distance) == rotateRight(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateLeft(val, distance) == rotateLeft(val, distance & 0x3F). @return the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits. @since 1.5
method,java/lang/Long/rotateRight/long;int, Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) Note that right rotation with a negative distance is equivalent to left rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateRight(val, distance) == rotateRight(val, distance & 0x3F). @return the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits. @since 1.5
class,java/lang/LinkageError, Subclasses of LinkageError indicate that a class has some dependency on another class; however, the latter class has incompatibly changed after the compilation of the former class. @author Frank Yellin @version 1.15, 03/23/10 @since JDK1.0
class,java/lang/InterruptedException, Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity. Occasionally a method may wish to test whether the current thread has been interrupted, and if so, to immediately throw this exception. The following code can be used to achieve this effect: if (Thread.interrupted()) // Clears interrupted status! throw new InterruptedException(); @author Frank Yellin @version 1.18, 03/23/10 @see java.lang.Object#wait() @see java.lang.Object#wait(long) @see java.lang.Object#wait(long, int) @see java.lang.Thread#sleep(long) @see java.lang.Thread#interrupt() @see java.lang.Thread#interrupted() @since JDK1.0
class,java/lang/InternalError, Thrown to indicate some unexpected internal error has occurred in the Java Virtual Machine. @author unascribed @version 1.23, 03/23/10 @since JDK1.0
class,java/lang/Integer, The Integer class wraps a value of the primitive type int in an object. An object of type Integer contains a single field whose type is int. In addition, this class provides several methods for converting an int to a String and a String to an int, as well as other constants and methods useful when dealing with an int. Implementation note: The implementations of the bit twiddling methods (such as {@link #highestOneBit(int) highestOneBit} and {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are based on material from Henry S. Warren, Jr.'s Hacker's Delight, (Addison Wesley, 2002). @author Lee Boynton @author Arthur van Hoff @author Josh Bloch @version 1.94, 03/23/10 @since JDK1.0
method,java/lang/Integer/toString/int;int, Returns a string representation of the first argument in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. If the first argument is negative, the first element of the result is the ASCII minus character '-' ('&#92;u002D'). If the first argument is not negative, no sign character appears in the result. The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character '0' ('&#92;u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits: 0123456789abcdefghijklmnopqrstuvwxyz These are '&#92;u0030' through '&#92;u0039' and '&#92;u0061' through '&#92;u007A'. If radix is N, then the first N of these characters are used as radix-N digits in the order shown. Thus, the digits for hexadecimal (radix 16) are 0123456789abcdef. If uppercase letters are desired, the {@link java.lang.String#toUpperCase()} method may be called on the result: Integer.toString(n, 16).toUpperCase() @param i an integer to be converted to a string. @param radix the radix to use in the string representation. @return a string representation of the argument in the specified radix. @see java.lang.Character#MAX_RADIX @see java.lang.Character#MIN_RADIX
method,java/lang/Integer/toHexString/int, Returns a string representation of the integer argument as an unsigned integer in base&nbsp;16. The unsigned integer value is the argument plus 232 if the argument is negative; otherwise, it is equal to the argument. This value is converted to a string of ASCII digits in hexadecimal (base&nbsp;16) with no extra leading 0s. If the unsigned magnitude is zero, it is represented by a single zero character '0' ('&#92;u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits: 0123456789abcdef These are the characters '&#92;u0030' through '&#92;u0039' and '&#92;u0061' through '&#92;u0066'. If uppercase letters are desired, the {@link java.lang.String#toUpperCase()} method may be called on the result: Integer.toHexString(n).toUpperCase() @param i an integer to be converted to a string. @return the string representation of the unsigned integer value represented by the argument in hexadecimal (base&nbsp;16). @since JDK1.0.2
method,java/lang/Integer/parseInt/String;int, Parses the string argument as a signed integer in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether {@link java.lang.Character#digit(char, int)} returns a nonnegative value), except that the first character may be an ASCII minus sign '-' ('&#92;u002D') to indicate a negative value. The resulting integer value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than {@link java.lang.Character#MIN_RADIX} or larger than {@link java.lang.Character#MAX_RADIX}. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('&#92;u002D') provided that the string is longer than length 1. The value represented by the string is not a value of type int. Examples: parseInt(0, 10) returns 0 parseInt(473, 10) returns 473 parseInt(-0, 10) returns 0 parseInt(-FF, 16) returns -255 parseInt(1100110, 2) returns 102 parseInt(2147483647, 10) returns 2147483647 parseInt(-2147483648, 10) returns -2147483648 parseInt(2147483648, 10) throws a NumberFormatException parseInt(99, 8) throws a NumberFormatException parseInt(Kona, 10) throws a NumberFormatException parseInt(Kona, 27) returns 411787 @param s the String containing the integer 			representation to be parsed @param radix the radix to be used while parsing s. @return the integer represented by the string argument in the specified radix. @exception NumberFormatException if the String 		 does not contain a parsable int.
method,java/lang/Integer/parseInt/String, Parses the string argument as a signed decimal integer. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign '-' ('&#92;u002D') to indicate a negative value. The resulting integer value is returned, exactly as if the argument and the radix 10 were given as arguments to the {@link #parseInt(java.lang.String, int)} method. @param s	 a String containing the int representation to be parsed @return the integer value represented by the argument in decimal. @exception NumberFormatException if the string does not contain a parsable integer.
method,java/lang/Integer/equals/Object, Compares this object to the specified object. The result is true if and only if the argument is not null and is an Integer object that contains the same int value as this object. @param obj the object to compare with. @return true if the objects are the same; false otherwise.
method,java/lang/Integer/getInteger/String;int, Determines the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the {@link java.lang.System#getProperty(java.lang.String)} method. The string value of this property is then interpreted as an integer value and an Integer object representing this value is returned. Details of possible numeric formats can be found with the definition of getProperty. The second argument is the default value. An Integer object that represents the value of the second argument is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null. In other words, this method returns an Integer object equal to the value of: getInteger(nm, new Integer(val)) but in practice it may be implemented in a manner such as: Integer result = getInteger(nm, null); return (result == null) ? new Integer(val) : result; to avoid the unnecessary allocation of an Integer object when the default value is not needed. @param nm property name. @param val default value. @return the Integer value of the property. @see java.lang.System#getProperty(java.lang.String) @see java.lang.System#getProperty(java.lang.String, java.lang.String)
method,java/lang/Integer/numberOfLeadingZeros/int, Returns the number of zero bits preceding the highest-order (leftmost) one-bit in the two's complement binary representation of the specified int value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero. Note that this method is closely related to the logarithm base 2. For all positive int values x: floor(log2(x)) = 31 - numberOfLeadingZeros(x) ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1) @return the number of zero bits preceding the highest-order (leftmost) one-bit in the two's complement binary representation of the specified int value, or 32 if the value is equal to zero. @since 1.5
method,java/lang/Integer/rotateLeft/int;int, Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits. (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) Note that left rotation with a negative distance is equivalent to right rotation: rotateLeft(val, -distance) == rotateRight(val, distance). Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative: rotateLeft(val, distance) == rotateLeft(val, distance & 0x1F). @return the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits. @since 1.5
method,java/lang/Integer/rotateRight/int;int, Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) Note that right rotation with a negative distance is equivalent to left rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative: rotateRight(val, distance) == rotateRight(val, distance & 0x1F). @return the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits. @since 1.5
class,java/lang/InstantiationError, Thrown when an application tries to use the Java new construct to instantiate an abstract class or an interface. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed. @author unascribed @version 1.14, 03/23/10 @since JDK1.0
method,java/lang/InheritableThreadLocal/InheritableThreadLocal/,
class,java/lang/IndexOutOfBoundsException, Thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range. Applications can subclass this class to indicate similar exceptions. @author Frank Yellin @version 1.13, 03/23/10 @since JDK1.0
class,java/lang/IllegalThreadStateException, Thrown to indicate that a thread is not in an appropriate state for the requested operation. See, for example, the suspend and resume methods in class Thread. @author unascribed @version 1.23, 03/23/10 @see java.lang.Thread#resume() @see java.lang.Thread#suspend() @since JDK1.0
class,java/lang/IllegalStateException, Signals that a method has been invoked at an illegal or inappropriate time. In other words, the Java environment or Java application is not in an appropriate state for the requested operation. @author Jonni Kanerva @version 1.17, 03/23/10 @since JDK1.1
method,java/lang/IllegalStateException/IllegalStateException/String;Throwable, Constructs a new exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this exception's detail message. @param message the detail message (which is saved for later retrieval by the {@link Throwable#getMessage()} method). @param cause the cause (which is saved for later retrieval by the {@link Throwable#getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.5
class,java/lang/IllegalMonitorStateException, Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor. @author unascribed @version 1.14, 03/23/10 @see java.lang.Object#notify() @see java.lang.Object#notifyAll() @see java.lang.Object#wait() @see java.lang.Object#wait(long) @see java.lang.Object#wait(long, int) @since JDK1.0
class,java/lang/IllegalArgumentException, Thrown to indicate that a method has been passed an illegal or inappropriate argument. @author unascribed @version 1.25, 03/23/10 @see	 java.lang.Thread#setPriority(int) @since JDK1.0
method,java/lang/IllegalArgumentException/IllegalArgumentException/String;Throwable, Constructs a new exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this exception's detail message. @param message the detail message (which is saved for later retrieval by the {@link Throwable#getMessage()} method). @param cause the cause (which is saved for later retrieval by the {@link Throwable#getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.5
class,java/lang/IllegalAccessException, An IllegalAccessException is thrown when an application tries to reflectively create an instance (other than an array), set or get a field, or invoke a method, but the currently executing method does not have access to the definition of the specified class, field, method or constructor. @author unascribed @version 1.16, 03/23/10 @see Class#newInstance() @see java.lang.reflect.Field#set(Object, Object) @see java.lang.reflect.Field#setBoolean(Object, boolean) @see java.lang.reflect.Field#setByte(Object, byte) @see java.lang.reflect.Field#setShort(Object, short) @see java.lang.reflect.Field#setChar(Object, char) @see java.lang.reflect.Field#setInt(Object, int) @see java.lang.reflect.Field#setLong(Object, long) @see java.lang.reflect.Field#setFloat(Object, float) @see java.lang.reflect.Field#setDouble(Object, double) @see java.lang.reflect.Field#get(Object) @see java.lang.reflect.Field#getBoolean(Object) @see java.lang.reflect.Field#getByte(Object) @see java.lang.reflect.Field#getShort(Object) @see java.lang.reflect.Field#getChar(Object) @see java.lang.reflect.Field#getInt(Object) @see java.lang.reflect.Field#getLong(Object) @see java.lang.reflect.Field#getFloat(Object) @see java.lang.reflect.Field#getDouble(Object) @see java.lang.reflect.Method#invoke(Object, Object[]) @see java.lang.reflect.Constructor#newInstance(Object[]) @since JDK1.0
class,java/lang/IllegalAccessError, Thrown if an application attempts to access or modify a field, or to call a method that it does not have access to. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed. @author unascribed @version 1.18, 03/23/10 @since JDK1.0
class,java/lang/Float, The Float class wraps a value of primitive type float in an object. An object of type Float contains a single field whose type is float. In addition, this class provides several methods for converting a float to a String and a String to a float, as well as other constants and methods useful when dealing with a float. @author Lee Boynton @author Arthur van Hoff @author Joseph D. Darcy @version 1.102, 03/23/10 @since JDK1.0 
method,java/lang/Float/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and is a Float object that represents a float with the same value as the float represented by this object. For this purpose, two float values are considered to be the same if and only if the method {@link #floatToIntBits(float)} returns the identical int value when applied to each. Note that in most cases, for two instances of class Float, f1 and f2, the value of f1.equals(f2) is true if and only if f1.floatValue() == f2.floatValue() also has the value true. However, there are two exceptions: If f1 and f2 both represent Float.NaN, then the equals method returns true, even though Float.NaN==Float.NaN has the value false. If f1 represents +0.0f while f2 represents -0.0f, or vice versa, the equal test has the value false, even though 0.0f==-0.0f has the value true. This definition allows hash tables to operate properly. @param obj the object to be compared @return true if the objects are the same; false otherwise. @see java.lang.Float#floatToIntBits(float)
method,java/lang/Float/floatToIntBits/float, Returns a representation of the specified floating-point value according to the IEEE 754 floating-point single format bit layout. Bit 31 (the bit that is selected by the mask 0x80000000) represents the sign of the floating-point number. Bits 30-23 (the bits that are selected by the mask 0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected by the mask 0x007fffff) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7f800000. If the argument is negative infinity, the result is 0xff800000. If the argument is NaN, the result is 0x7fc00000. In all cases, the result is an integer that, when given to the {@link #intBitsToFloat(int)} method, will produce a floating-point value the same as the argument to floatToIntBits (except all NaN values are collapsed to a single &quot;canonical&quot; NaN value). @param value a floating-point number. @return the bits that represent the floating-point number. 
method,java/lang/Float/floatToRawIntBits/float, Returns a representation of the specified floating-point value according to the IEEE 754 floating-point single format bit layout, preserving Not-a-Number (NaN) values. Bit 31 (the bit that is selected by the mask 0x80000000) represents the sign of the floating-point number. Bits 30-23 (the bits that are selected by the mask 0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected by the mask 0x007fffff) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7f800000. If the argument is negative infinity, the result is 0xff800000. If the argument is NaN, the result is the integer representing the actual NaN value. Unlike the floatToIntBits method, floatToRawIntBits does not collapse all the bit patterns encoding a NaN to a single &quot;canonical&quot; NaN value. In all cases, the result is an integer that, when given to the {@link #intBitsToFloat(int)} method, will produce a floating-point value the same as the argument to floatToRawIntBits. @param value a floating-point number. @return the bits that represent the floating-point number. @since 1.3
method,java/lang/Float/intBitsToFloat/int, Returns the float value corresponding to a given bit representation. The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point single format bit layout. If the argument is 0x7f800000, the result is positive infinity. If the argument is 0xff800000, the result is negative infinity. If the argument is any value in the range 0x7f800001 through 0x7fffffff or in the range 0xff800001 through 0xffffffff, the result is a NaN. No IEEE 754 floating-point operation provided by Java can distinguish between two NaN values of the same type with different bit patterns. Distinct values of NaN are only distinguishable by use of the Float.floatToRawIntBits method. In all other cases, let s, e, and m be three values that can be computed from the argument: int s = ((bits &gt;&gt; 31) == 0) ? 1 : -1; int e = ((bits &gt;&gt; 23) & 0xff); int m = (e == 0) ? (bits & 0x7fffff) &lt;&lt; 1 : (bits & 0x7fffff) | 0x800000; Then the floating-point result equals the value of the mathematical expression s&middot;m&middot;2e-150. Note that this method may not be able to return a float NaN with exactly same bit pattern as the int argument. IEEE 754 distinguishes between two kinds of NaNs, quiet NaNs and signaling NaNs. The differences between the two kinds of NaN are generally not visible in Java. Arithmetic operations on signaling NaNs turn them into quiet NaNs with a different, but often similar, bit pattern. However, on some processors merely copying a signaling NaN also performs that conversion. In particular, copying a signaling NaN to return it to the calling method may perform this conversion. So intBitsToFloat may not be able to return a float with a signaling NaN bit pattern. Consequently, for some int values, floatToRawIntBits(intBitsToFloat(start)) may not equal start. Moreover, which particular bit patterns represent signaling NaNs is platform dependent; although all NaN bit patterns, quiet or signaling, must be in the NaN range identified above. @param bits an integer. @return the float floating-point value with the same bit pattern.
method,java/lang/Float/compare/float;float, Compares the two specified float values. The sign of the integer value returned is the same as that of the integer that would be returned by the call: new Float(f1).compareTo(new Float(f2)) @param f1 the first float to compare. @param f2 the second float to compare. @return the value 0 if f1 is		numerically equal to f2; a value less than 0 if f1 is numerically less than		f2; and a value greater than 0		if f1 is numerically greater than		f2. @since 1.4 
field,java/lang/Float/MAX_EXPONENT, Maximum exponent a finite {@code float} variable may have. It is equal to the value returned by {@code Math.getExponent(Float.MAX_VALUE)}. @since 1.6
field,java/lang/Float/MIN_EXPONENT, Minimum exponent a normalized {@code float} variable may have. It is equal to the value returned by {@code Math.getExponent(Float.MIN_NORMAL)}. @since 1.6
class,java/lang/ExceptionInInitializerError, Signals that an unexpected exception has occurred in a static initializer. An ExceptionInInitializerError is thrown to indicate that an exception occurred during evaluation of a static initializer or the initializer for a static variable. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The saved throwable object that may be provided at construction time and accessed via the {@link #getException()} method is now known as the cause, and may be accessed via the {@link Throwable#getCause()} method, as well as the aforementioned legacy method. @author Frank Yellin @version 1.19, 03/23/10 @since JDK1.1
method,java/lang/ExceptionInInitializerError/getException/, Returns the exception that occurred during a static initialization that caused this error to be created. This method predates the general-purpose exception chaining facility. The {@link Throwable#getCause()} method is now the preferred means of obtaining this information. @return the saved throwable object of this ExceptionInInitializerError, or null if this ExceptionInInitializerError has no saved throwable object. 
method,java/lang/ExceptionInInitializerError/getCause/, Returns the cause of this error (the exception that occurred during a static initialization that caused this error to be created). @return the cause of this error or null if the cause is nonexistent or unknown. @since 1.4
class,java/lang/Exception, The class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to catch. @author Frank Yellin @version 1.33, 03/23/10 @see java.lang.Error @since JDK1.0
method,java/lang/Exception/Exception/, Constructs a new exception with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}.
method,java/lang/Exception/Exception/String, Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}. @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
method,java/lang/Exception/Exception/String;Throwable, Constructs a new exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this exception's detail message. @param message the detail message (which is saved for later retrieval by the {@link #getMessage()} method). @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.4
method,java/lang/Error/Error/, Constructs a new error with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}.
method,java/lang/Error/Error/String, Constructs a new error with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}. @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
method,java/lang/Error/Error/String;Throwable, Constructs a new error with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this error's detail message. @param message the detail message (which is saved for later retrieval by the {@link #getMessage()} method). @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.4
method,java/lang/Error/Error/Throwable, Constructs a new error with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause). This constructor is useful for errors that are little more than wrappers for other throwables. @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.) @since 1.4
method,java/lang/Enum/clone/, Throws CloneNotSupportedException. This guarantees that enums are never cloned, which is necessary to preserve their singleton status. @return (never returns)
method,java/lang/Enum/compareTo/Enum, Compares this enum with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. Enum constants are only comparable to other enum constants of the same enum type. The natural order implemented by this method is the order in which the constants are declared.
method,java/lang/Enum/getDeclaringClass/, Returns the Class object corresponding to this enum constant's enum type. Two enum constants e1 and e2 are of the same enum type if and only if e1.getDeclaringClass() == e2.getDeclaringClass(). (The value returned by this method may differ from the one returned by the {@link Object#getClass} method for enum constants with constant-specific class bodies.) @return the Class object corresponding to this enum constant's enum type
method,java/lang/Enum/Enum/String;int, Sole constructor. Programmers cannot invoke this constructor. It is for use by code emitted by the compiler in response to enum type declarations. @param name - The name of this enum constant, which is the identifier used to declare it. @param ordinal - The ordinal of this enumeration constant (its position in the enum declaration, where the initial constant is assigned an ordinal of zero).
class,java/lang/Double, The Double class wraps a value of the primitive type double in an object. An object of type Double contains a single field whose type is double. In addition, this class provides several methods for converting a double to a String and a String to a double, as well as other constants and methods useful when dealing with a double. @author Lee Boynton @author Arthur van Hoff @author Joseph D. Darcy @version 1.101, 03/23/10 @since JDK1.0
method,java/lang/Double/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and is a Double object that represents a double that has the same value as the double represented by this object. For this purpose, two double values are considered to be the same if and only if the method {@link #doubleToLongBits(double)} returns the identical long value when applied to each. Note that in most cases, for two instances of class Double, d1 and d2, the value of d1.equals(d2) is true if and only if d1.doubleValue()&nbsp;== d2.doubleValue() also has the value true. However, there are two exceptions: If d1 and d2 both represent Double.NaN, then the equals method returns true, even though Double.NaN==Double.NaN has the value false. If d1 represents +0.0 while d2 represents -0.0, or vice versa, the equal test has the value false, even though +0.0==-0.0 has the value true. This definition allows hash tables to operate properly. @param obj the object to compare with. @return true if the objects are the same; false otherwise. @see java.lang.Double#doubleToLongBits(double)
method,java/lang/Double/doubleToLongBits/double, Returns a representation of the specified floating-point value according to the IEEE 754 floating-point double format bit layout. Bit 63 (the bit that is selected by the mask 0x8000000000000000L) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask 0x7ff0000000000000L) represent the exponent. Bits 51-0 (the bits that are selected by the mask 0x000fffffffffffffL) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7ff0000000000000L. If the argument is negative infinity, the result is 0xfff0000000000000L. If the argument is NaN, the result is 0x7ff8000000000000L. In all cases, the result is a long integer that, when given to the {@link #longBitsToDouble(long)} method, will produce a floating-point value the same as the argument to doubleToLongBits (except all NaN values are collapsed to a single &quot;canonical&quot; NaN value). @param value a double precision floating-point number. @return the bits that represent the floating-point number. 
method,java/lang/Double/doubleToRawLongBits/double, Returns a representation of the specified floating-point value according to the IEEE 754 floating-point double format bit layout, preserving Not-a-Number (NaN) values. Bit 63 (the bit that is selected by the mask 0x8000000000000000L) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask 0x7ff0000000000000L) represent the exponent. Bits 51-0 (the bits that are selected by the mask 0x000fffffffffffffL) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7ff0000000000000L. If the argument is negative infinity, the result is 0xfff0000000000000L. If the argument is NaN, the result is the long integer representing the actual NaN value. Unlike the doubleToLongBits method, doubleToRawLongBits does not collapse all the bit patterns encoding a NaN to a single &quot;canonical&quot; NaN value. In all cases, the result is a long integer that, when given to the {@link #longBitsToDouble(long)} method, will produce a floating-point value the same as the argument to doubleToRawLongBits. @param value a double precision floating-point number. @return the bits that represent the floating-point number. @since 1.3
method,java/lang/Double/longBitsToDouble/long, Returns the double value corresponding to a given bit representation. The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point double format bit layout. If the argument is 0x7ff0000000000000L, the result is positive infinity. If the argument is 0xfff0000000000000L, the result is negative infinity. If the argument is any value in the range 0x7ff0000000000001L through 0x7fffffffffffffffL or in the range 0xfff0000000000001L through 0xffffffffffffffffL, the result is a NaN. No IEEE 754 floating-point operation provided by Java can distinguish between two NaN values of the same type with different bit patterns. Distinct values of NaN are only distinguishable by use of the Double.doubleToRawLongBits method. In all other cases, let s, e, and m be three values that can be computed from the argument: int s = ((bits &gt;&gt; 63) == 0) ? 1 : -1; int e = (int)((bits &gt;&gt; 52) & 0x7ffL); long m = (e == 0) ? (bits & 0xfffffffffffffL) &lt;&lt; 1 : (bits & 0xfffffffffffffL) | 0x10000000000000L; Then the floating-point result equals the value of the mathematical expression s&middot;m&middot;2e-1075. Note that this method may not be able to return a double NaN with exactly same bit pattern as the long argument. IEEE 754 distinguishes between two kinds of NaNs, quiet NaNs and signaling NaNs. The differences between the two kinds of NaN are generally not visible in Java. Arithmetic operations on signaling NaNs turn them into quiet NaNs with a different, but often similar, bit pattern. However, on some processors merely copying a signaling NaN also performs that conversion. In particular, copying a signaling NaN to return it to the calling method may perform this conversion. So longBitsToDouble may not be able to return a double with a signaling NaN bit pattern. Consequently, for some long values, doubleToRawLongBits(longBitsToDouble(start)) may not equal start. Moreover, which particular bit patterns represent signaling NaNs is platform dependent; although all NaN bit patterns, quiet or signaling, must be in the NaN range identified above. @param bits any long integer. @return the double floating-point value with the same bit pattern.
method,java/lang/Double/compare/double;double, Compares the two specified double values. The sign of the integer value returned is the same as that of the integer that would be returned by the call: new Double(d1).compareTo(new Double(d2)) @param d1 the first double to compare @param d2 the second double to compare @return the value 0 if d1 is		numerically equal to d2; a value less than 0 if d1 is numerically less than		d2; and a value greater than 0		if d1 is numerically greater than		d2. @since 1.4
field,java/lang/Double/MAX_EXPONENT, Maximum exponent a finite {@code double} variable may have. It is equal to the value returned by {@code Math.getExponent(Double.MAX_VALUE)}. @since 1.6
field,java/lang/Double/MIN_EXPONENT, Minimum exponent a normalized {@code double} variable may have. It is equal to the value returned by {@code Math.getExponent(Double.MIN_NORMAL)}. @since 1.6
interface,java/lang/Deprecated, A program element annotated &#64;Deprecated is one that programmers are discouraged from using, typically because it is dangerous, or because a better alternative exists. Compilers warn when a deprecated program element is used or overridden in non-deprecated code. @author Neal Gafter @version 1.6, 03/23/10 @since 1.5
class,java/lang/Compiler, The Compiler class is provided to support Java-to-native-code compilers and related services. By design, the Compiler class does nothing; it serves as a placeholder for a JIT compiler implementation. When the Java Virtual Machine first starts, it determines if the system property java.compiler exists. (System properties are accessible through getProperty, a method defined by the System class.) If so, it is assumed to be the name of a library (with a platform-dependent exact location and type); the loadLibrary method in class System is called to load that library. If this loading succeeds, the function named java_lang_Compiler_start() in that library is called. If no compiler is available, these methods do nothing. @author Frank Yellin @version 1.23, 03/23/10 @see java.lang.System#getProperty(java.lang.String) @see java.lang.System#getProperty(java.lang.String, java.lang.String) @see java.lang.System#loadLibrary(java.lang.String) @since JDK1.0
method,java/lang/Compiler/command/Object, Examines the argument type and its fields and perform some documented operation. No specific operations are required. @param any an argument. @return a compiler-specific value, or null if no compiler is available. @exception NullPointerException if any is null.
class,java/lang/ClassNotFoundException, Thrown when an application tries to load in a class through its string name using: The forName method in class Class. The findSystemClass method in class ClassLoader . The loadClass method in class ClassLoader. but no definition for the class with the specified name could be found. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The optional exception that was raised while loading the class that may be provided at construction time and accessed via the {@link #getException()} method is now known as the cause, and may be accessed via the {@link Throwable#getCause()} method, as well as the aforementioned legacy method. @author unascribed @version 1.22, 03/23/10 @see java.lang.Class#forName(java.lang.String) @see java.lang.ClassLoader#findSystemClass(java.lang.String) @see java.lang.ClassLoader#loadClass(java.lang.String, boolean) @since JDK1.0
method,java/lang/ClassNotFoundException/getException/, Returns the exception that was raised if an error occurred while attempting to load the class. Otherwise, returns null. This method predates the general-purpose exception chaining facility. The {@link Throwable#getCause()} method is now the preferred means of obtaining this information. @return the Exception that was raised while loading a class @since 1.2
method,java/lang/ClassNotFoundException/getCause/, Returns the cause of this exception (the exception that was raised if an error occurred while attempting to load the class; otherwise null). @return the cause of this exception. @since 1.4
method,java/lang/ClassLoader/loadClass/String, Loads the class with the specified binary name. This method searches for classes in the same manner as the {@link #loadClass(String, boolean)} method. It is invoked by the Java virtual machine to resolve class references. Invoking this method is equivalent to invoking {@link #loadClass(String, boolean) loadClass(name, false)}. @param name The binary name of the class @return The resulting Class object @throws ClassNotFoundException If the class was not found
method,java/lang/ClassLoader/resolveClass/Class, Links the specified class. This (misleadingly named) method may be used by a class loader to link a class. If the class c has already been linked, then this method simply returns. Otherwise, the class is linked as described in the Execution chapter of the Java Language Specification. @param c The class to link @throws NullPointerException If c is null. @see #defineClass(String, byte[], int, int)
method,java/lang/ClassLoader/findSystemClass/String, Finds a class with the specified binary name, loading it if necessary. This method loads the class through the system class loader (see {@link #getSystemClassLoader()}). The Class object returned might have more than one ClassLoader associated with it. Subclasses of ClassLoader need not usually invoke this method, because most class loaders need to override just {@link #findClass(String)}. @param name The binary name of the class @return The Class object for the specified name @throws ClassNotFoundException If the class could not be found @see #ClassLoader(ClassLoader) @see #getParent()
method,java/lang/ClassLoader/getResource/String, Finds the resource with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code. The name of a resource is a '/'-separated path name that identifies the resource. This method will first search the parent class loader for the resource; if the parent is null the path of the class loader built-in to the virtual machine is searched. That failing, this method will invoke {@link #findResource(String)} to find the resource. @param name The resource name @return A URL object for reading the resource, or null if the resource could not be found or the invoker doesn't have adequate privileges to get the resource. @since 1.1
method,java/lang/ClassLoader/getResources/String, Finds all the resources with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code. The name of a resource is a /-separated path name that identifies the resource. The search order is described in the documentation for {@link #getResource(String)}. @param name The resource name @return An enumeration of {@link java.net.URL URL} objects for the resource. If no resources could be found, the enumeration will be empty. Resources that the class loader doesn't have access to will not be in the enumeration. @throws IOException If I/O errors occur @see #findResources(String) @since 1.2
method,java/lang/ClassLoader/getSystemResources/String, Finds all resources of the specified name from the search path used to load classes. The resources thus found are returned as an {@link java.util.Enumeration Enumeration} of {@link java.net.URL URL} objects. The search order is described in the documentation for {@link #getSystemResource(String)}. @param name The resource name @return An enumeration of resource {@link java.net.URL URL} objects @throws IOException If I/O errors occur @since 1.2
method,java/lang/ClassLoader/getParent/, Returns the parent class loader for delegation. Some implementations may use null to represent the bootstrap class loader. This method will return null in such implementations if this class loader's parent is the bootstrap class loader. If a security manager is present, and the invoker's class loader is not null and is not an ancestor of this class loader, then this method invokes the security manager's {@link SecurityManager#checkPermission(java.security.Permission) checkPermission} method with a {@link RuntimePermission#RuntimePermission(String) RuntimePermission(getClassLoader)} permission to verify access to the parent class loader is permitted. If not, a SecurityException will be thrown. @return The parent ClassLoader @throws SecurityException If a security manager exists and its checkPermission method doesn't allow access to this class loader's parent class loader. @since 1.2
method,java/lang/ClassLoader/findLibrary/String, Returns the absolute path name of a native library. The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. If this method returns null, the VM searches the library along the path specified as the java.library.path property. @param libname The library name @return The absolute path of the native library @see System#loadLibrary(String) @see System#mapLibraryName(String) @since 1.2
method,java/lang/ClassLoader/setDefaultAssertionStatus/boolean, Sets the default assertion status for this class loader. This setting determines whether classes loaded by this class loader and initialized in the future will have assertions enabled or disabled by default. This setting may be overridden on a per-package or per-class basis by invoking {@link #setPackageAssertionStatus(String, boolean)} or {@link #setClassAssertionStatus(String, boolean)}. @param enabled true if classes loaded by this class loader will henceforth have assertions enabled by default, false if they will have assertions disabled by default. @since 1.4
method,java/lang/ClassLoader/setPackageAssertionStatus/String;boolean, Sets the package default assertion status for the named package. The package default assertion status determines the assertion status for classes initialized in the future that belong to the named package or any of its subpackages. A subpackage of a package named p is any package whose name begins with p.. For example, javax.swing.text is a subpackage of javax.swing, and both java.util and java.lang.reflect are subpackages of java. In the event that multiple package defaults apply to a given class, the package default pertaining to the most specific package takes precedence over the others. For example, if javax.lang and javax.lang.reflect both have package defaults associated with them, the latter package default applies to classes in javax.lang.reflect. Package defaults take precedence over the class loader's default assertion status, and may be overridden on a per-class basis by invoking {@link #setClassAssertionStatus(String, boolean)}. @param packageName The name of the package whose package default assertion status is to be set. A null value indicates the unnamed package that is current (Java Language Specification, section 7.4.2). @param enabled true if classes loaded by this classloader and belonging to the named package or any of its subpackages will have assertions enabled by default, false if they will have assertions disabled by default. @since 1.4
method,java/lang/ClassLoader/setClassAssertionStatus/String;boolean, Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein. This setting takes precedence over the class loader's default assertion status, and over any applicable per-package default. This method has no effect if the named class has already been initialized. (Once a class is initialized, its assertion status cannot change.) If the named class is not a top-level class, this invocation will have no effect on the actual assertion status of any class. @param className The fully qualified class name of the top-level class whose assertion status is to be set. @param enabled true if the named class is to have assertions enabled when (and if) it is initialized, false if the class is to have assertions disabled. @since 1.4
method,java/lang/ClassLoader/ClassLoader/ClassLoader, Creates a new class loader using the specified parent class loader for delegation. If there is a security manager, its {@link SecurityManager#checkCreateClassLoader() checkCreateClassLoader} method is invoked. This may result in a security exception. @param parent The parent class loader @throws SecurityException If a security manager exists and its checkCreateClassLoader method doesn't allow creation of a new class loader. @since 1.2
method,java/lang/ClassLoader/ClassLoader/, Creates a new class loader using the ClassLoader returned by the method {@link #getSystemClassLoader() getSystemClassLoader()} as the parent class loader. If there is a security manager, its {@link SecurityManager#checkCreateClassLoader() checkCreateClassLoader} method is invoked. This may result in a security exception. @throws SecurityException If a security manager exists and its checkCreateClassLoader method doesn't allow creation of a new class loader.
class,java/lang/ClassCastException, Thrown to indicate that the code has attempted to cast an object to a subclass of which it is not an instance. For example, the following code generates a ClassCastException: Object x = new Integer(0); System.out.println((String)x); @author unascribed @version 1.22, 03/23/10 @since JDK1.0
class,java/lang/Class, Instances of the class Class represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a Class object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types (boolean, byte, char, short, int, long, float, and double), and the keyword void are also represented as Class objects. Class has no public constructor. Instead Class objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the defineClass method in the class loader. The following example uses a Class object to print the class name of an object: void printClassName(Object obj) { System.out.println(The class of + obj + is + obj.getClass().getName()); } It is also possible to get the Class object for a named type (or for void) using a class literal (JLS Section 15.8.2). For example: System.out.println(The name of class Foo is: +Foo.class.getName()); @param the type of the class modeled by this {@code Class} object. For example, the type of {@code String.class} is {@code Class}. Use {@code Class} if the class being modeled is unknown. @author unascribed @version 1.203, 03/23/10 @see java.lang.ClassLoader#defineClass(byte[], int, int) @since JDK1.0
method,java/lang/Class/forName/String, Returns the Class object associated with the class or interface with the given string name. Invoking this method is equivalent to: Class.forName(className, true, currentLoader) where currentLoader denotes the defining class loader of the current class. For example, the following code fragment returns the runtime Class descriptor for the class named java.lang.Thread: Class&nbsp;t&nbsp;= Class.forName(java.lang.Thread) A call to forName(X) causes the class named X to be initialized. @param className the fully qualified name of the desired class. @return the Class object for the class with the specified name. @exception LinkageError if the linkage fails @exception ExceptionInInitializerError if the initialization provoked by this method fails @exception ClassNotFoundException if the class cannot be located
method,java/lang/Class/forName/String;boolean;ClassLoader, Returns the Class object associated with the class or interface with the given string name, using the given class loader. Given the fully qualified name for a class or interface (in the same format returned by getName) this method attempts to locate, load, and link the class or interface. The specified class loader is used to load the class or interface. If the parameter loader is null, the class is loaded through the bootstrap class loader. The class is initialized only if the initialize parameter is true and if it has not been initialized earlier. If name denotes a primitive type or void, an attempt will be made to locate a user-defined class in the unnamed package whose name is name. Therefore, this method cannot be used to obtain any of the Class objects representing primitive types or void. If name denotes an array class, the component type of the array class is loaded but not initialized. For example, in an instance method the expression: Class.forName(Foo) is equivalent to: Class.forName(Foo, true, this.getClass().getClassLoader()) Note that this method throws errors related to loading, linking or initializing as specified in Sections 12.2, 12.3 and 12.4 of The Java Language Specification. Note that this method does not check whether the requested class is accessible to its caller. If the loader is null, and a security manager is present, and the caller's class loader is not null, then this method calls the security manager's checkPermission method with a RuntimePermission(getClassLoader) permission to ensure it's ok to access the bootstrap class loader. @param name fully qualified name of the desired class @param initialize whether the class must be initialized @param loader class loader from which the class must be loaded @return class object representing the desired class @exception LinkageError if the linkage fails @exception ExceptionInInitializerError if the initialization provoked by this method fails @exception ClassNotFoundException if the class cannot be located by the specified class loader @see 	 java.lang.Class#forName(String) @see 	 java.lang.ClassLoader @since 	 1.2
method,java/lang/Class/isInstance/Object, Determines if the specified Object is assignment-compatible with the object represented by this Class. This method is the dynamic equivalent of the Java language instanceof operator. The method returns true if the specified Object argument is non-null and can be cast to the reference type represented by this Class object without raising a ClassCastException. It returns false otherwise. Specifically, if this Class object represents a declared class, this method returns true if the specified Object argument is an instance of the represented class (or of any of its subclasses); it returns false otherwise. If this Class object represents an array class, this method returns true if the specified Object argument can be converted to an object of the array class by an identity conversion or by a widening reference conversion; it returns false otherwise. If this Class object represents an interface, this method returns true if the class or any superclass of the specified Object argument implements this interface; it returns false otherwise. If this Class object represents a primitive type, this method returns false. @param obj the object to check @return true if obj is an instance of this class @since JDK1.1
method,java/lang/Class/isAssignableFrom/Class, Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter. It returns true if so; otherwise it returns false. If this Class object represents a primitive type, this method returns true if the specified Class parameter is exactly this Class object; otherwise it returns false. Specifically, this method tests whether the type represented by the specified Class parameter can be converted to the type represented by this Class object via an identity conversion or via a widening reference conversion. See The Java Language Specification, sections 5.1.1 and 5.1.4 , for details. @param cls the Class object to be checked @return the boolean value indicating whether objects of the type cls can be assigned to objects of this class @exception NullPointerException if the specified Class parameter is null. @since JDK1.1
method,java/lang/Class/isPrimitive/, Determines if the specified Class object represents a primitive type. There are nine predefined Class objects to represent the eight primitive types and void. These are created by the Java Virtual Machine, and have the same names as the primitive types that they represent, namely boolean, byte, char, short, int, long, float, and double. These objects may only be accessed via the following public static final variables, and are the only Class objects for which this method returns true. @return true if and only if this class represents a primitive type @see java.lang.Boolean#TYPE @see java.lang.Character#TYPE @see java.lang.Byte#TYPE @see java.lang.Short#TYPE @see java.lang.Integer#TYPE @see java.lang.Long#TYPE @see java.lang.Float#TYPE @see java.lang.Double#TYPE @see java.lang.Void#TYPE @since JDK1.1
method,java/lang/Class/isAnnotation/, Returns true if this Class object represents an annotation type. Note that if this method returns true, {@link #isInterface()} would also return true, as all annotation types are also interfaces. @return true if this class object represents an annotation type; false otherwise @since 1.5
method,java/lang/Class/isSynthetic/, Returns true if this class is a synthetic class; returns false otherwise. @return true if and only if this class is a synthetic class as defined by the Java Language Specification. @since 1.5
method,java/lang/Class/getClassLoader/, Returns the class loader for the class. Some implementations may use null to represent the bootstrap class loader. This method will return null in such implementations if this class was loaded by the bootstrap class loader. If a security manager is present, and the caller's class loader is not null and the caller's class loader is not the same as or an ancestor of the class loader for the class whose class loader is requested, then this method calls the security manager's checkPermission method with a RuntimePermission(getClassLoader) permission to ensure it's ok to access the class loader for the class. If this object represents a primitive type or void, null is returned. @return the class loader that loaded the class or interface represented by this object. @throws SecurityException if a security manager exists and its checkPermission method denies access to the class loader for the class. @see java.lang.ClassLoader @see SecurityManager#checkPermission @see java.lang.RuntimePermission
method,java/lang/Class/getSuperclass/, Returns the Class representing the superclass of the entity (class, interface, primitive type or void) represented by this Class. If this Class represents either the Object class, an interface, a primitive type, or void, then null is returned. If this object represents an array class then the Class object representing the Object class is returned. @return the superclass of the class represented by this object.
method,java/lang/Class/getPackage/, Gets the package for this class. The class loader of this class is used to find the package. If the class was loaded by the bootstrap class loader the set of packages loaded from CLASSPATH is searched to find the package of the class. Null is returned if no package object was created by the class loader of this class. Packages have attributes for versions and specifications only if the information was defined in the manifests that accompany the classes, and if the class loader created the package instance with the attributes from the manifest. @return the package of the class, or null if no package information is available from the archive or codebase.
method,java/lang/Class/getInterfaces/, Determines the interfaces implemented by the class or interface represented by this object. If this object represents a class, the return value is an array containing objects representing all interfaces implemented by the class. The order of the interface objects in the array corresponds to the order of the interface names in the implements clause of the declaration of the class represented by this object. For example, given the declaration: class Shimmer implements FloorWax, DessertTopping { ... } suppose the value of s is an instance of Shimmer; the value of the expression: s.getClass().getInterfaces()[0] is the Class object that represents interface FloorWax; and the value of: s.getClass().getInterfaces()[1] is the Class object that represents interface DessertTopping. If this object represents an interface, the array contains objects representing all interfaces extended by the interface. The order of the interface objects in the array corresponds to the order of the interface names in the extends clause of the declaration of the interface represented by this object. If this object represents a class or interface that implements no interfaces, the method returns an array of length 0. If this object represents a primitive type or void, the method returns an array of length 0. @return an array of interfaces implemented by this class.
method,java/lang/Class/isAnonymousClass/, Returns true if and only if the underlying class is an anonymous class. @return true if and only if this class is an anonymous class. @since 1.5
method,java/lang/Class/isLocalClass/, Returns true if and only if the underlying class is a local class. @return true if and only if this class is a local class. @since 1.5
method,java/lang/Class/isMemberClass/, Returns true if and only if the underlying class is a member class. @return true if and only if this class is a member class. @since 1.5
method,java/lang/Class/getResourceAsStream/String, Finds a resource with a given name. The rules for searching resources associated with a given class are implemented by the defining {@linkplain ClassLoader class loader} of the class. This method delegates to this object's class loader. If this object was loaded by the bootstrap class loader, the method delegates to {@link ClassLoader#getSystemResourceAsStream}. Before delegation, an absolute resource name is constructed from the given resource name using this algorithm: If the name begins with a '/' ('&#92;u002f'), then the absolute name of the resource is the portion of the name following the '/'. Otherwise, the absolute name is of the following form: modified_package_name/name Where the modified_package_name is the package name of this object with '/' substituted for '.' ('&#92;u002e'). @param name name of the desired resource @return A {@link java.io.InputStream} object or null if no resource with this name is found @throws NullPointerException If name is null @since JDK1.1
method,java/lang/Class/getResource/String, Finds a resource with a given name. The rules for searching resources associated with a given class are implemented by the defining {@linkplain ClassLoader class loader} of the class. This method delegates to this object's class loader. If this object was loaded by the bootstrap class loader, the method delegates to {@link ClassLoader#getSystemResource}. Before delegation, an absolute resource name is constructed from the given resource name using this algorithm: If the name begins with a '/' ('&#92;u002f'), then the absolute name of the resource is the portion of the name following the '/'. Otherwise, the absolute name is of the following form: modified_package_name/name Where the modified_package_name is the package name of this object with '/' substituted for '.' ('&#92;u002e'). @param name name of the desired resource @return A {@link java.net.URL} object or null if no resource with this name is found @since JDK1.1
method,java/lang/Class/getProtectionDomain/, Returns the ProtectionDomain of this class. If there is a security manager installed, this method first calls the security manager's checkPermission method with a RuntimePermission(getProtectionDomain) permission to ensure it's ok to get the ProtectionDomain. @return the ProtectionDomain of this class @throws SecurityException if a security manager exists and its checkPermission method doesn't allow getting the ProtectionDomain. @see java.security.ProtectionDomain @see SecurityManager#checkPermission @see java.lang.RuntimePermission @since 1.2
method,java/lang/Class/desiredAssertionStatus/, Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked. If this class has had its assertion status set, the most recent setting will be returned; otherwise, if any package default assertion status pertains to this class, the most recent setting for the most specific pertinent package default assertion status is returned; otherwise, if this class is not a system class (i.e., it has a class loader) its class loader's default assertion status is returned; otherwise, the system class default assertion status is returned. Few programmers will have any need for this method; it is provided for the benefit of the JRE itself. (It allows a class to determine at the time that it is initialized whether assertions should be enabled.) Note that this method is not guaranteed to return the actual assertion status that was (or will be) associated with the specified class when it was (or will be) initialized. @return the desired assertion status of the specified class. @see java.lang.ClassLoader#setClassAssertionStatus @see java.lang.ClassLoader#setPackageAssertionStatus @see java.lang.ClassLoader#setDefaultAssertionStatus @since 1.4
method,java/lang/Class/isEnum/, Returns true if and only if this class was declared as an enum in the source code. @return true if and only if this class was declared as an enum in the source code @since 1.5
method,java/lang/Class/cast/Object, Casts an object to the class or interface represented by this Class object. @param obj the object to be cast @return the object after casting, or null if obj is null @throws ClassCastException if the object is not null and is not assignable to the type T. @since 1.5
method,java/lang/Class/asSubclass/Class, Casts this Class object to represent a subclass of the class represented by the specified class object. Checks that that the cast is valid, and throws a ClassCastException if it is not. If this method succeeds, it always returns a reference to this class object. This method is useful when a client needs to narrow the type of a Class object to pass it to an API that restricts the Class objects that it is willing to accept. A cast would generate a compile-time warning, as the correctness of the cast could not be checked at runtime (because generic types are implemented by erasure). @return this Class object, cast to represent a subclass of the specified class object. @throws ClassCastException if this Class object does not represent a subclass of the specified class (here subclass includes the class itself). @since 1.5
method,java/lang/Class/getAnnotation/Class, @throws NullPointerException {@inheritDoc} @since 1.5
method,java/lang/Class/isAnnotationPresent/Class, @throws NullPointerException {@inheritDoc} @since 1.5
class,java/lang/Character, The Character class wraps a value of the primitive type char in an object. An object of type Character contains a single field whose type is char. In addition, this class provides several methods for determining a character's category (lowercase letter, digit, etc.) and for converting characters from uppercase to lowercase and vice versa. Character information is based on the Unicode Standard, version 4.0. The methods and data of class Character are defined by the information in the UnicodeData file that is part of the Unicode Character Database maintained by the Unicode Consortium. This file specifies various properties including name and general category for every defined Unicode code point or character range. The file and its description are available from the Unicode Consortium at: http://www.unicode.org Unicode Character Representations The char data type (and therefore the value that a Character object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal code points is now U+0000 to U+10FFFF, known as Unicode scalar value. (Refer to the definition of the U+n notation in the Unicode standard.) The set of characters from U+0000 to U+FFFF is sometimes referred to as the Basic Multilingual Plane (BMP). Characters whose code points are greater than U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 representation in char arrays and in the String and StringBuffer classes. In this representation, supplementary characters are represented as a pair of char values, the first from the high-surrogates range, (&#92;uD800-&#92;uDBFF), the second from the low-surrogates range (&#92;uDC00-&#92;uDFFF). A char value, therefore, represents Basic Multilingual Plane (BMP) code points, including the surrogate code points, or code units of the UTF-16 encoding. An int value represents all Unicode code points, including supplementary code points. The lower (least significant) 21 bits of int are used to represent Unicode code points and the upper (most significant) 11 bits must be zero. Unless otherwise specified, the behavior with respect to supplementary characters and surrogate char values is as follows: The methods that only accept a char value cannot support supplementary characters. They treat char values from the surrogate ranges as undefined characters. For example, Character.isLetter('&#92;uD840') returns false, even though this specific value if followed by any low-surrogate value in a string would represent a letter. The methods that accept an int value support all Unicode characters, including supplementary characters. For example, Character.isLetter(0x2F81A) returns true because the code point value represents a letter (a CJK ideograph). In the Java SE API documentation, Unicode code point is used for character values in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 16-bit char values that are code units of the UTF-16 encoding. For more information on Unicode terminology, refer to the Unicode Glossary. @author Lee Boynton @author Guy Steele @author Akira Tanaka @since 1.0
method,java/lang/Character/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and is a Character object that represents the same char value as this object. @param obj the object to compare with. @return true if the objects are the same; false otherwise.
method,java/lang/Character/isSupplementaryCodePoint/int, Determines whether the specified character (Unicode code point) is in the supplementary character range. The method call is equivalent to the expression: codePoint >= 0x10000 && codePoint @param codePoint the character (Unicode code point) to be tested @return true if the specified character is in the Unicode supplementary character range; false otherwise. @since 1.5
method,java/lang/Character/isHighSurrogate/char, Determines if the given char value is a high-surrogate code unit (also known as leading-surrogate code unit). Such values do not represent characters by themselves, but are used in the representation of supplementary characters in the UTF-16 encoding. This method returns true if and only if ch >= '&#92;uD800' && ch is true. @param ch the char value to be tested. @return true if the char value is between '&#92;uD800' and '&#92;uDBFF' inclusive; false otherwise. @see java.lang.Character#isLowSurrogate(char) @see Character.UnicodeBlock#of(int) @since 1.5
method,java/lang/Character/isLowSurrogate/char, Determines if the given char value is a low-surrogate code unit (also known as trailing-surrogate code unit). Such values do not represent characters by themselves, but are used in the representation of supplementary characters in the UTF-16 encoding. This method returns true if and only if ch >= '&#92;uDC00' && ch is true. @param ch the char value to be tested. @return true if the char value is between '&#92;uDC00' and '&#92;uDFFF' inclusive; false otherwise. @see java.lang.Character#isHighSurrogate(char) @since 1.5
method,java/lang/Character/codePointAt/char[];int;int, Returns the code point at the given index of the char array, where only array elements with index less than limit can be used. If the char value at the given index in the char array is in the high-surrogate range, the following index is less than the limit, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned. @param a the char array @param index the index to the char values (Unicode code units) in the char array to be converted @param limit the index after the last array element that can be used in the char array @return the Unicode code point at the given index @exception NullPointerException if a is null. @exception IndexOutOfBoundsException if the index argument is negative or not less than the limit argument, or if the limit argument is negative or greater than the length of the char array. @since 1.5
method,java/lang/Character/codePointBefore/CharSequence;int, Returns the code point preceding the given index of the CharSequence. If the char value at (index - 1) in the CharSequence is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) in the CharSequence is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned. @param seq the CharSequence instance @param index the index following the code point that should be returned @return the Unicode code point value before the given index. @exception NullPointerException if seq is null. @exception IndexOutOfBoundsException if the index argument is less than 1 or greater than {@link CharSequence#length() seq.length()}. @since 1.5
method,java/lang/Character/codePointBefore/char[];int, Returns the code point preceding the given index of the char array. If the char value at (index - 1) in the char array is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) in the char array is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned. @param a the char array @param index the index following the code point that should be returned @return the Unicode code point value before the given index. @exception NullPointerException if a is null. @exception IndexOutOfBoundsException if the index argument is less than 1 or greater than the length of the char array @since 1.5
method,java/lang/Character/codePointBefore/char[];int;int, Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used. If the char value at (index - 1) in the char array is in the low-surrogate range, (index - 2) is not less than start, and the char value at (index - 2) in the char array is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned. @param a the char array @param index the index following the code point that should be returned @param start the index of the first array element in the char array @return the Unicode code point value before the given index. @exception NullPointerException if a is null. @exception IndexOutOfBoundsException if the index argument is not greater than the start argument or is greater than the length of the char array, or if the start argument is negative or not less than the length of the char array. @since 1.5
method,java/lang/Character/codePointCount/CharSequence;int;int, Returns the number of Unicode code points in the text range of the specified char sequence. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each. @param seq the char sequence @param beginIndex the index to the first char of the text range. @param endIndex the index after the last char of the text range. @return the number of Unicode code points in the specified text range @exception NullPointerException if seq is null. @exception IndexOutOfBoundsException if the beginIndex is negative, or endIndex is larger than the length of the given sequence, or beginIndex is larger than endIndex. @since 1.5
method,java/lang/Character/offsetByCodePoints/CharSequence;int;int, Returns the index within the given char sequence that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each. @param seq the char sequence @param index the index to be offset @param codePointOffset the offset in code points @return the index within the char sequence @exception NullPointerException if seq is null. @exception IndexOutOfBoundsException if index is negative or larger then the length of the char sequence, or if codePointOffset is positive and the subsequence starting with index has fewer than codePointOffset code points, or if codePointOffset is negative and the subsequence before index has fewer than the absolute value of codePointOffset code points. @since 1.5
method,java/lang/Character/isLowerCase/char, Determines if the specified character is a lowercase character. A character is lowercase if its general category type, provided by Character.getType(ch), is LOWERCASE_LETTER. The following are examples of lowercase characters: a b c d e f g h i j k l m n o p q r s t u v w x y z '&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6' '&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE' '&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6' '&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF' Many other Unicode characters are lowercase too. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isLowerCase(int)} method. @param ch the character to be tested. @return true if the character is lowercase; false otherwise. @see java.lang.Character#isLowerCase(char) @see java.lang.Character#isTitleCase(char) @see java.lang.Character#toLowerCase(char) @see java.lang.Character#getType(char)
method,java/lang/Character/isUpperCase/char, Determines if the specified character is an uppercase character. A character is uppercase if its general category type, provided by Character.getType(ch), is UPPERCASE_LETTER. The following are examples of uppercase characters: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z '&#92;u00C0' '&#92;u00C1' '&#92;u00C2' '&#92;u00C3' '&#92;u00C4' '&#92;u00C5' '&#92;u00C6' '&#92;u00C7' '&#92;u00C8' '&#92;u00C9' '&#92;u00CA' '&#92;u00CB' '&#92;u00CC' '&#92;u00CD' '&#92;u00CE' '&#92;u00CF' '&#92;u00D0' '&#92;u00D1' '&#92;u00D2' '&#92;u00D3' '&#92;u00D4' '&#92;u00D5' '&#92;u00D6' '&#92;u00D8' '&#92;u00D9' '&#92;u00DA' '&#92;u00DB' '&#92;u00DC' '&#92;u00DD' '&#92;u00DE' Many other Unicode characters are uppercase too. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isUpperCase(int)} method. @param ch the character to be tested. @return true if the character is uppercase; false otherwise. @see java.lang.Character#isLowerCase(char) @see java.lang.Character#isTitleCase(char) @see java.lang.Character#toUpperCase(char) @see java.lang.Character#getType(char) @since 1.0
method,java/lang/Character/isTitleCase/char, Determines if the specified character is a titlecase character. A character is a titlecase character if its general category type, provided by Character.getType(ch), is TITLECASE_LETTER. Some characters look like pairs of Latin letters. For example, there is an uppercase letter that looks like LJ and has a corresponding lowercase letter that looks like lj. A third form, which looks like Lj, is the appropriate form to use when rendering a word in lowercase with initial capitals, as for a book title. These are some of the Unicode characters for which this method returns true: LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON LATIN CAPITAL LETTER L WITH SMALL LETTER J LATIN CAPITAL LETTER N WITH SMALL LETTER J LATIN CAPITAL LETTER D WITH SMALL LETTER Z Many other Unicode characters are titlecase too. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isTitleCase(int)} method. @param ch the character to be tested. @return true if the character is titlecase; false otherwise. @see java.lang.Character#isLowerCase(char) @see java.lang.Character#isUpperCase(char) @see java.lang.Character#toTitleCase(char) @see java.lang.Character#getType(char) @since 1.0.2
method,java/lang/Character/isDigit/char, Determines if the specified character is a digit. A character is a digit if its general category type, provided by Character.getType(ch), is DECIMAL_DIGIT_NUMBER. Some Unicode character ranges that contain digits: '&#92;u0030' through '&#92;u0039', ISO-LATIN-1 digits ('0' through '9') '&#92;u0660' through '&#92;u0669', Arabic-Indic digits '&#92;u06F0' through '&#92;u06F9', Extended Arabic-Indic digits '&#92;u0966' through '&#92;u096F', Devanagari digits '&#92;uFF10' through '&#92;uFF19', Fullwidth digits Many other character ranges contain digits as well. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isDigit(int)} method. @param ch the character to be tested. @return true if the character is a digit; false otherwise. @see java.lang.Character#digit(char, int) @see java.lang.Character#forDigit(int, int) @see java.lang.Character#getType(char)
method,java/lang/Character/isDigit/int, Determines if the specified character (Unicode code point) is a digit. A character is a digit if its general category type, provided by {@link Character#getType(int) getType(codePoint)}, is DECIMAL_DIGIT_NUMBER. Some Unicode character ranges that contain digits: '&#92;u0030' through '&#92;u0039', ISO-LATIN-1 digits ('0' through '9') '&#92;u0660' through '&#92;u0669', Arabic-Indic digits '&#92;u06F0' through '&#92;u06F9', Extended Arabic-Indic digits '&#92;u0966' through '&#92;u096F', Devanagari digits '&#92;uFF10' through '&#92;uFF19', Fullwidth digits Many other character ranges contain digits as well. @param codePoint the character (Unicode code point) to be tested. @return true if the character is a digit; false otherwise. @see java.lang.Character#forDigit(int, int) @see java.lang.Character#getType(int) @since 1.5
method,java/lang/Character/isDefined/char, Determines if a character is defined in Unicode. A character is defined if at least one of the following is true: It has an entry in the UnicodeData file. It has a value in a range defined by the UnicodeData file. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isDefined(int)} method. @param ch the character to be tested @return true if the character has a defined meaning in Unicode; false otherwise. @see java.lang.Character#isDigit(char) @see java.lang.Character#isLetter(char) @see java.lang.Character#isLetterOrDigit(char) @see java.lang.Character#isLowerCase(char) @see java.lang.Character#isTitleCase(char) @see java.lang.Character#isUpperCase(char) @since 1.0.2
method,java/lang/Character/isLetter/char, Determines if the specified character is a letter. A character is considered to be a letter if its general category type, provided by Character.getType(ch), is any of the following: UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER Not all letters have case. Many characters are letters but are neither uppercase nor lowercase nor titlecase. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isLetter(int)} method. @param ch the character to be tested. @return true if the character is a letter; false otherwise. @see java.lang.Character#isDigit(char) @see java.lang.Character#isJavaIdentifierStart(char) @see java.lang.Character#isJavaLetter(char) @see java.lang.Character#isJavaLetterOrDigit(char) @see java.lang.Character#isLetterOrDigit(char) @see java.lang.Character#isLowerCase(char) @see java.lang.Character#isTitleCase(char) @see java.lang.Character#isUnicodeIdentifierStart(char) @see java.lang.Character#isUpperCase(char)
method,java/lang/Character/isLetterOrDigit/char, Determines if the specified character is a letter or digit. A character is considered to be a letter or digit if either Character.isLetter(char ch) or Character.isDigit(char ch) returns true for the character. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isLetterOrDigit(int)} method. @param ch the character to be tested. @return true if the character is a letter or digit; false otherwise. @see java.lang.Character#isDigit(char) @see java.lang.Character#isJavaIdentifierPart(char) @see java.lang.Character#isJavaLetter(char) @see java.lang.Character#isJavaLetterOrDigit(char) @see java.lang.Character#isLetter(char) @see java.lang.Character#isUnicodeIdentifierPart(char) @since 1.0.2
method,java/lang/Character/isJavaLetter/char, Determines if the specified character is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following is true: {@link #isLetter(char) isLetter(ch)} returns true {@link #getType(char) getType(ch)} returns LETTER_NUMBER ch is a currency symbol (such as $) ch is a connecting punctuation character (such as _). @param ch the character to be tested. @return true if the character may start a Java identifier; false otherwise. @see java.lang.Character#isJavaLetterOrDigit(char) @see java.lang.Character#isJavaIdentifierStart(char) @see java.lang.Character#isJavaIdentifierPart(char) @see java.lang.Character#isLetter(char) @see java.lang.Character#isLetterOrDigit(char) @see java.lang.Character#isUnicodeIdentifierStart(char) @since 1.02 @deprecated Replaced by isJavaIdentifierStart(char).
method,java/lang/Character/isJavaLetterOrDigit/char, Determines if the specified character may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if and only if any of the following are true: it is a letter it is a currency symbol (such as '$') it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for the character. @param ch the character to be tested. @return true if the character may be part of a Java identifier; false otherwise. @see java.lang.Character#isJavaLetter(char) @see java.lang.Character#isJavaIdentifierStart(char) @see java.lang.Character#isJavaIdentifierPart(char) @see java.lang.Character#isLetter(char) @see java.lang.Character#isLetterOrDigit(char) @see java.lang.Character#isUnicodeIdentifierPart(char) @see java.lang.Character#isIdentifierIgnorable(char) @since 1.02 @deprecated Replaced by isJavaIdentifierPart(char).
method,java/lang/Character/isJavaIdentifierStart/char, Determines if the specified character is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following conditions is true: {@link #isLetter(char) isLetter(ch)} returns true {@link #getType(char) getType(ch)} returns LETTER_NUMBER ch is a currency symbol (such as $) ch is a connecting punctuation character (such as _). Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isJavaIdentifierStart(int)} method. @param ch the character to be tested. @return true if the character may start a Java identifier; false otherwise. @see java.lang.Character#isJavaIdentifierPart(char) @see java.lang.Character#isLetter(char) @see java.lang.Character#isUnicodeIdentifierStart(char) @see javax.lang.model.SourceVersion#isIdentifier(CharSequence) @since 1.1
method,java/lang/Character/isJavaIdentifierStart/int, Determines if the character (Unicode code point) is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following conditions is true: {@link #isLetter(int) isLetter(codePoint)} returns true {@link #getType(int) getType(codePoint)} returns LETTER_NUMBER the referenced character is a currency symbol (such as $) the referenced character is a connecting punctuation character (such as _). @param codePoint the character (Unicode code point) to be tested. @return true if the character may start a Java identifier; false otherwise. @see java.lang.Character#isJavaIdentifierPart(int) @see java.lang.Character#isLetter(int) @see java.lang.Character#isUnicodeIdentifierStart(int) @see javax.lang.model.SourceVersion#isIdentifier(CharSequence) @since 1.5
method,java/lang/Character/isJavaIdentifierPart/char, Determines if the specified character may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if any of the following are true: it is a letter it is a currency symbol (such as '$') it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for the character Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isJavaIdentifierPart(int)} method. @param ch the character to be tested. @return true if the character may be part of a Java identifier; false otherwise. @see java.lang.Character#isIdentifierIgnorable(char) @see java.lang.Character#isJavaIdentifierStart(char) @see java.lang.Character#isLetterOrDigit(char) @see java.lang.Character#isUnicodeIdentifierPart(char) @see javax.lang.model.SourceVersion#isIdentifier(CharSequence) @since 1.1
method,java/lang/Character/isJavaIdentifierPart/int, Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if any of the following are true: it is a letter it is a currency symbol (such as '$') it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark {@link #isIdentifierIgnorable(int) isIdentifierIgnorable(codePoint)} returns true for the character @param codePoint the character (Unicode code point) to be tested. @return true if the character may be part of a Java identifier; false otherwise. @see java.lang.Character#isIdentifierIgnorable(int) @see java.lang.Character#isJavaIdentifierStart(int) @see java.lang.Character#isLetterOrDigit(int) @see java.lang.Character#isUnicodeIdentifierPart(int) @see javax.lang.model.SourceVersion#isIdentifier(CharSequence) @since 1.5
method,java/lang/Character/isUnicodeIdentifierStart/char, Determines if the specified character is permissible as the first character in a Unicode identifier. A character may start a Unicode identifier if and only if one of the following conditions is true: {@link #isLetter(char) isLetter(ch)} returns true {@link #getType(char) getType(ch)} returns LETTER_NUMBER. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isUnicodeIdentifierStart(int)} method. @param ch the character to be tested. @return true if the character may start a Unicode identifier; false otherwise. @see java.lang.Character#isJavaIdentifierStart(char) @see java.lang.Character#isLetter(char) @see java.lang.Character#isUnicodeIdentifierPart(char) @since 1.1
method,java/lang/Character/isUnicodeIdentifierStart/int, Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier. A character may start a Unicode identifier if and only if one of the following conditions is true: {@link #isLetter(int) isLetter(codePoint)} returns true {@link #getType(int) getType(codePoint)} returns LETTER_NUMBER. @param codePoint the character (Unicode code point) to be tested. @return true if the character may start a Unicode identifier; false otherwise. @see java.lang.Character#isJavaIdentifierStart(int) @see java.lang.Character#isLetter(int) @see java.lang.Character#isUnicodeIdentifierPart(int) @since 1.5
method,java/lang/Character/isUnicodeIdentifierPart/char, Determines if the specified character may be part of a Unicode identifier as other than the first character. A character may be part of a Unicode identifier if and only if one of the following statements is true: it is a letter it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for this character. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isUnicodeIdentifierPart(int)} method. @param ch the character to be tested. @return true if the character may be part of a Unicode identifier; false otherwise. @see java.lang.Character#isIdentifierIgnorable(char) @see java.lang.Character#isJavaIdentifierPart(char) @see java.lang.Character#isLetterOrDigit(char) @see java.lang.Character#isUnicodeIdentifierStart(char) @since 1.1
method,java/lang/Character/isUnicodeIdentifierPart/int, Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character. A character may be part of a Unicode identifier if and only if one of the following statements is true: it is a letter it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for this character. @param codePoint the character (Unicode code point) to be tested. @return true if the character may be part of a Unicode identifier; false otherwise. @see java.lang.Character#isIdentifierIgnorable(int) @see java.lang.Character#isJavaIdentifierPart(int) @see java.lang.Character#isLetterOrDigit(int) @see java.lang.Character#isUnicodeIdentifierStart(int) @since 1.5
method,java/lang/Character/isIdentifierIgnorable/char, Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier. The following Unicode characters are ignorable in a Java identifier or a Unicode identifier: ISO control characters that are not whitespace '&#92;u0000' through '&#92;u0008' '&#92;u000E' through '&#92;u001B' '&#92;u007F' through '&#92;u009F' all characters that have the FORMAT general category value Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isIdentifierIgnorable(int)} method. @param ch the character to be tested. @return true if the character is an ignorable control character that may be part of a Java or Unicode identifier; false otherwise. @see java.lang.Character#isJavaIdentifierPart(char) @see java.lang.Character#isUnicodeIdentifierPart(char) @since 1.1
method,java/lang/Character/isIdentifierIgnorable/int, Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier. The following Unicode characters are ignorable in a Java identifier or a Unicode identifier: ISO control characters that are not whitespace '&#92;u0000' through '&#92;u0008' '&#92;u000E' through '&#92;u001B' '&#92;u007F' through '&#92;u009F' all characters that have the FORMAT general category value @param codePoint the character (Unicode code point) to be tested. @return true if the character is an ignorable control character that may be part of a Java or Unicode identifier; false otherwise. @see java.lang.Character#isJavaIdentifierPart(int) @see java.lang.Character#isUnicodeIdentifierPart(int) @since 1.5
method,java/lang/Character/toTitleCase/char, Converts the character argument to titlecase using case mapping information from the UnicodeData file. If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData, then the uppercase mapping is returned as an equivalent titlecase mapping. If the char argument is already a titlecase char, the same char value will be returned. Note that Character.isTitleCase(Character.toTitleCase(ch)) does not always return true for some ranges of characters. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #toTitleCase(int)} method. @param ch the character to be converted. @return the titlecase equivalent of the character, if any; otherwise, the character itself. @see java.lang.Character#isTitleCase(char) @see java.lang.Character#toLowerCase(char) @see java.lang.Character#toUpperCase(char) @since 1.0.2
method,java/lang/Character/toTitleCase/int, Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file. If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData, then the uppercase mapping is returned as an equivalent titlecase mapping. If the character argument is already a titlecase character, the same character value will be returned. Note that Character.isTitleCase(Character.toTitleCase(codePoint)) does not always return true for some ranges of characters. @param codePoint the character (Unicode code point) to be converted. @return the titlecase equivalent of the character, if any; otherwise, the character itself. @see java.lang.Character#isTitleCase(int) @see java.lang.Character#toLowerCase(int) @see java.lang.Character#toUpperCase(int) @since 1.5
method,java/lang/Character/digit/char;int, Returns the numeric value of the character ch in the specified radix. If the radix is not in the range MIN_RADIX&nbsp;&lt;= radix&nbsp;&lt;= MAX_RADIX or if the value of ch is not a valid digit in the specified radix, -1 is returned. A character is a valid digit if at least one of the following is true: The method isDigit is true of the character and the Unicode decimal digit value of the character (or its single-character decomposition) is less than the specified radix. In this case the decimal digit value is returned. The character is one of the uppercase Latin letters 'A' through 'Z' and its code is less than radix&nbsp;+ 'A'&nbsp;-&nbsp;10. In this case, ch&nbsp;- 'A'&nbsp;+&nbsp;10 is returned. The character is one of the lowercase Latin letters 'a' through 'z' and its code is less than radix&nbsp;+ 'a'&nbsp;-&nbsp;10. In this case, ch&nbsp;- 'a'&nbsp;+&nbsp;10 is returned. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #digit(int, int)} method. @param ch the character to be converted. @param radix the radix. @return the numeric value represented by the character in the specified radix. @see java.lang.Character#forDigit(int, int) @see java.lang.Character#isDigit(char)
method,java/lang/Character/getNumericValue/char, Returns the int value that the specified Unicode character represents. For example, the character '&#92;u216C' (the roman numeral fifty) will return an int with a value of 50. The letters A-Z in their uppercase ('&#92;u0041' through '&#92;u005A'), lowercase ('&#92;u0061' through '&#92;u007A'), and full width variant ('&#92;uFF21' through '&#92;uFF3A' and '&#92;uFF41' through '&#92;uFF5A') forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these char values. If the character does not have a numeric value, then -1 is returned. If the character has a numeric value that cannot be represented as a nonnegative integer (for example, a fractional value), then -2 is returned. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #getNumericValue(int)} method. @param ch the character to be converted. @return the numeric value of the character, as a nonnegative int value; -2 if the character has a numeric value that is not a nonnegative integer; -1 if the character has no numeric value. @see java.lang.Character#forDigit(int, int) @see java.lang.Character#isDigit(char) @since 1.1
method,java/lang/Character/isSpace/char, Determines if the specified character is ISO-LATIN-1 white space. This method returns true for the following five characters only: '\t' '&#92;u0009' HORIZONTAL TABULATION '' '&#92;u000A' NEW LINE '\f' '&#92;u000C' FORM FEED '\r' '&#92;u000D' CARRIAGE RETURN '&nbsp;' '&#92;u0020' SPACE @param ch the character to be tested. @return true if the character is ISO-LATIN-1 white space; false otherwise. @see java.lang.Character#isSpaceChar(char) @see java.lang.Character#isWhitespace(char) @deprecated Replaced by isWhitespace(char).
method,java/lang/Character/isSpaceChar/char, Determines if the specified character is a Unicode space character. A character is considered to be a space character if and only if it is specified to be a space character by the Unicode standard. This method returns true if the character's general category type is any of the following: SPACE_SEPARATOR LINE_SEPARATOR PARAGRAPH_SEPARATOR Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isSpaceChar(int)} method. @param ch the character to be tested. @return true if the character is a space character; false otherwise. @see java.lang.Character#isWhitespace(char) @since 1.1
method,java/lang/Character/isSpaceChar/int, Determines if the specified character (Unicode code point) is a Unicode space character. A character is considered to be a space character if and only if it is specified to be a space character by the Unicode standard. This method returns true if the character's general category type is any of the following: {@link #SPACE_SEPARATOR} {@link #LINE_SEPARATOR} {@link #PARAGRAPH_SEPARATOR} @param codePoint the character (Unicode code point) to be tested. @return true if the character is a space character; false otherwise. @see java.lang.Character#isWhitespace(int) @since 1.5
method,java/lang/Character/isWhitespace/char, Determines if the specified character is white space according to Java. A character is a Java whitespace character if and only if it satisfies one of the following criteria: It is a Unicode space character (SPACE_SEPARATOR, LINE_SEPARATOR, or PARAGRAPH_SEPARATOR) but is not also a non-breaking space ('&#92;u00A0', '&#92;u2007', '&#92;u202F'). It is '&#92;u0009', HORIZONTAL TABULATION. It is '&#92;u000A', LINE FEED. It is '&#92;u000B', VERTICAL TABULATION. It is '&#92;u000C', FORM FEED. It is '&#92;u000D', CARRIAGE RETURN. It is '&#92;u001C', FILE SEPARATOR. It is '&#92;u001D', GROUP SEPARATOR. It is '&#92;u001E', RECORD SEPARATOR. It is '&#92;u001F', UNIT SEPARATOR. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isWhitespace(int)} method. @param ch the character to be tested. @return true if the character is a Java whitespace character; false otherwise. @see java.lang.Character#isSpaceChar(char) @since 1.1
method,java/lang/Character/isWhitespace/int, Determines if the specified character (Unicode code point) is white space according to Java. A character is a Java whitespace character if and only if it satisfies one of the following criteria: It is a Unicode space character ({@link #SPACE_SEPARATOR}, {@link #LINE_SEPARATOR}, or {@link #PARAGRAPH_SEPARATOR}) but is not also a non-breaking space ('&#92;u00A0', '&#92;u2007', '&#92;u202F'). It is '&#92;u0009', HORIZONTAL TABULATION. It is '&#92;u000A', LINE FEED. It is '&#92;u000B', VERTICAL TABULATION. It is '&#92;u000C', FORM FEED. It is '&#92;u000D', CARRIAGE RETURN. It is '&#92;u001C', FILE SEPARATOR. It is '&#92;u001D', GROUP SEPARATOR. It is '&#92;u001E', RECORD SEPARATOR. It is '&#92;u001F', UNIT SEPARATOR. @param codePoint the character (Unicode code point) to be tested. @return true if the character is a Java whitespace character; false otherwise. @see java.lang.Character#isSpaceChar(int) @since 1.5
method,java/lang/Character/isISOControl/char, Determines if the specified character is an ISO control character. A character is considered to be an ISO control character if its code is in the range '&#92;u0000' through '&#92;u001F' or in the range '&#92;u007F' through '&#92;u009F'. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isISOControl(int)} method. @param ch the character to be tested. @return true if the character is an ISO control character; false otherwise. @see java.lang.Character#isSpaceChar(char) @see java.lang.Character#isWhitespace(char) @since 1.1
method,java/lang/Character/getType/char, Returns a value indicating a character's general category. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #getType(int)} method. @param ch the character to be tested. @return a value of type int representing the character's general category. @see java.lang.Character#COMBINING_SPACING_MARK @see java.lang.Character#CONNECTOR_PUNCTUATION @see java.lang.Character#CONTROL @see java.lang.Character#CURRENCY_SYMBOL @see java.lang.Character#DASH_PUNCTUATION @see java.lang.Character#DECIMAL_DIGIT_NUMBER @see java.lang.Character#ENCLOSING_MARK @see java.lang.Character#END_PUNCTUATION @see java.lang.Character#FINAL_QUOTE_PUNCTUATION @see java.lang.Character#FORMAT @see java.lang.Character#INITIAL_QUOTE_PUNCTUATION @see java.lang.Character#LETTER_NUMBER @see java.lang.Character#LINE_SEPARATOR @see java.lang.Character#LOWERCASE_LETTER @see java.lang.Character#MATH_SYMBOL @see java.lang.Character#MODIFIER_LETTER @see java.lang.Character#MODIFIER_SYMBOL @see java.lang.Character#NON_SPACING_MARK @see java.lang.Character#OTHER_LETTER @see java.lang.Character#OTHER_NUMBER @see java.lang.Character#OTHER_PUNCTUATION @see java.lang.Character#OTHER_SYMBOL @see java.lang.Character#PARAGRAPH_SEPARATOR @see java.lang.Character#PRIVATE_USE @see java.lang.Character#SPACE_SEPARATOR @see java.lang.Character#START_PUNCTUATION @see java.lang.Character#SURROGATE @see java.lang.Character#TITLECASE_LETTER @see java.lang.Character#UNASSIGNED @see java.lang.Character#UPPERCASE_LETTER @since 1.1
method,java/lang/Character/getDirectionality/char, Returns the Unicode directionality property for the given character. Character directionality is used to calculate the visual ordering of text. The directionality value of undefined char values is DIRECTIONALITY_UNDEFINED. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #getDirectionality(int)} method. @param ch char for which the directionality property is requested. @return the directionality property of the char value. @see Character#DIRECTIONALITY_UNDEFINED @see Character#DIRECTIONALITY_LEFT_TO_RIGHT @see Character#DIRECTIONALITY_RIGHT_TO_LEFT @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC @see Character#DIRECTIONALITY_EUROPEAN_NUMBER @see Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR @see Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR @see Character#DIRECTIONALITY_ARABIC_NUMBER @see Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR @see Character#DIRECTIONALITY_NONSPACING_MARK @see Character#DIRECTIONALITY_BOUNDARY_NEUTRAL @see Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR @see Character#DIRECTIONALITY_SEGMENT_SEPARATOR @see Character#DIRECTIONALITY_WHITESPACE @see Character#DIRECTIONALITY_OTHER_NEUTRALS @see Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING @see Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE @see Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT @since 1.4
method,java/lang/Character/isMirrored/char, Determines whether the character is mirrored according to the Unicode specification. Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right-to-left. For example, '&#92;u0028' LEFT PARENTHESIS is semantically defined to be an opening parenthesis. This will appear as a ( in text that is left-to-right but as a ) in text that is right-to-left. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #isMirrored(int)} method. @param ch char for which the mirrored property is requested @return true if the char is mirrored, false if the char is not mirrored or is not defined. @since 1.4
method,java/lang/Character/isMirrored/int, Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification. Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right-to-left. For example, '&#92;u0028' LEFT PARENTHESIS is semantically defined to be an opening parenthesis. This will appear as a ( in text that is left-to-right but as a ) in text that is right-to-left. @param codePoint the character (Unicode code point) to be tested. @return true if the character is mirrored, false if the character is not mirrored or is not defined. @since 1.5
method,java/lang/Character/compareTo/Character, Compares two Character objects numerically. @param anotherCharacter the Character to be compared. @return the value 0 if the argument Character is equal to this Character; a value less than 0 if this Character is numerically less than the Character argument; and a value greater than 0 if this Character is numerically greater than the Character argument (unsigned comparison). Note that this is strictly a numerical comparison; it is not locale-dependent. @since 1.2
field,java/lang/Character/DIRECTIONALITY_LEFT_TO_RIGHT, Strong bidirectional character type L in the Unicode specification. @since 1.4
field,java/lang/Character/DIRECTIONALITY_RIGHT_TO_LEFT, Strong bidirectional character type R in the Unicode specification. @since 1.4
field,java/lang/Character/DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC, Strong bidirectional character type AL in the Unicode specification. @since 1.4
field,java/lang/Character/DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING, Strong bidirectional character type LRE in the Unicode specification. @since 1.4
field,java/lang/Character/DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE, Strong bidirectional character type LRO in the Unicode specification. @since 1.4
field,java/lang/Character/DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING, Strong bidirectional character type RLE in the Unicode specification. @since 1.4
field,java/lang/Character/DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE, Strong bidirectional character type RLO in the Unicode specification. @since 1.4
class,java/lang/Character/Subset, Instances of this class represent particular subsets of the Unicode character set. The only family of subsets defined in the Character class is {@link Character.UnicodeBlock UnicodeBlock}. Other portions of the Java API may define other subsets for their own purposes. @since 1.2
method,java/lang/Character/Subset/equals/Object, Compares two Subset objects for equality. This method returns true if and only if this and the argument refer to the same object; since this method is final, this guarantee holds for all subclasses.
method,java/lang/Character/Subset/hashCode/, Returns the standard hash code as defined by the {@link Object#hashCode} method. This method is final in order to ensure that the equals and hashCode methods will be consistent in all subclasses.
method,java/lang/Character/UnicodeBlock/of/char, Returns the object representing the Unicode block containing the given character, or null if the character is not a member of a defined block. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the {@link #of(int)} method. @param c The character in question @return The UnicodeBlock instance representing the Unicode block of which this character is a member, or null if the character is not a member of any Unicode block
field,java/lang/Character/UnicodeBlock/LATIN_EXTENDED_A, Constant for the Latin Extended-A Unicode character block. @since 1.2
field,java/lang/Character/UnicodeBlock/LATIN_EXTENDED_B, Constant for the Latin Extended-B Unicode character block. @since 1.2
field,java/lang/Character/UnicodeBlock/LATIN_EXTENDED_ADDITIONAL, Constant for the Latin Extended Additional Unicode character block. @since 1.2
field,java/lang/Character/UnicodeBlock/GREEK_EXTENDED, Constant for the Greek Extended Unicode character block. @since 1.2
field,java/lang/Character/UnicodeBlock/SUPERSCRIPTS_AND_SUBSCRIPTS, Constant for the Superscripts and Subscripts Unicode character block. @since 1.2
field,java/lang/Character/UnicodeBlock/BOPOMOFO_EXTENDED, Constant for the Bopomofo Extended Unicode character block. @since 1.4
interface,java/lang/CharSequence, A CharSequence is a readable sequence of char values. This interface provides uniform, read-only access to many different kinds of char sequences. A char value represents a character in the Basic Multilingual Plane (BMP) or a surrogate. Refer to Unicode Character Representation for details. This interface does not refine the general contracts of the {@link java.lang.Object#equals(java.lang.Object) equals} and {@link java.lang.Object#hashCode() hashCode} methods. The result of comparing two objects that implement CharSequence is therefore, in general, undefined. Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other. It is therefore inappropriate to use arbitrary CharSequence instances as elements in a set or as keys in a map. @author Mike McCloskey @version 1.10 10/03/23 @since 1.4 @spec JSR-51
class,java/lang/Byte, The Byte class wraps a value of primitive type byte in an object. An object of type Byte contains a single field whose type is byte. In addition, this class provides several methods for converting a byte to a String and a String to a byte, as well as other constants and methods useful when dealing with a byte. @author Nakul Saraiya @version 1.42, 03/23/10 @see java.lang.Number @since JDK1.1
method,java/lang/Byte/toString/byte, Returns a new String object representing the specified byte. The radix is assumed to be 10. @param b	the byte to be converted @return the string representation of the specified byte @see java.lang.Integer#toString(int)
method,java/lang/Byte/parseByte/String, Parses the string argument as a signed decimal byte. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign '-' ('&#92;u002D') to indicate a negative value. The resulting byte value is returned, exactly as if the argument and the radix 10 were given as arguments to the {@link #parseByte(java.lang.String, int)} method. @param s		a String containing the byte representation to be parsed @return 		the byte value represented by the argument in decimal @exception	NumberFormatException if the string does not			contain a parsable byte.
method,java/lang/Byte/equals/Object, Compares this object to the specified object. The result is true if and only if the argument is not null and is a Byte object that contains the same byte value as this object. @param obj	the object to compare with @return 		true if the objects are the same; 			false otherwise.
class,java/lang/Boolean, The Boolean class wraps a value of the primitive type boolean in an object. An object of type Boolean contains a single field whose type is boolean. In addition, this class provides many methods for converting a boolean to a String and a String to a boolean, as well as other constants and methods useful when dealing with a boolean. @author Arthur van Hoff @version 1.54, 03/23/10 @since JDK1.0
method,java/lang/Boolean/equals/Object, Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object. @param obj the object to compare with. @return true if the Boolean objects represent the same value; false otherwise.
method,java/lang/Boolean/getBoolean/String, Returns true if and only if the system property named by the argument exists and is equal to the string {@code true}. (Beginning with version 1.0.2 of the JavaTM platform, the test of this string is case insensitive.) A system property is accessible through getProperty, a method defined by the System class. If there is no property with the specified name, or if the specified name is empty or null, then false is returned. @param name the system property name. @return the boolean value of the system property. @see java.lang.System#getProperty(java.lang.String) @see java.lang.System#getProperty(java.lang.String, java.lang.String)
class,java/lang/AssertionError, Thrown to indicate that an assertion has failed. The seven one-argument public constructors provided by this class ensure that the assertion error returned by the invocation: new AssertionError(expression) has as its detail message the string conversion of expression (as defined in The Java Language Specification, Second Edition, Section 15.18.1.1), regardless of the type of expression. @version 1.10, 03/23/10 @since 1.4
method,java/lang/AssertionError/AssertionError/Object, Constructs an AssertionError with its detail message derived from the specified object, which is converted to a string as defined in The Java Language Specification, Second Edition, Section 15.18.1.1. If the specified object is an instance of Throwable, it becomes the cause of the newly constructed assertion error. @param detailMessage value to be used in constructing detail message @see Throwable#getCause()
class,java/lang/ArithmeticException, Thrown when an exceptional arithmetic condition has occurred. For example, an integer divide by zero throws an instance of this class. @author unascribed @version 1.24, 03/23/10 @since JDK1.0
method,java/lang/Appendable/append/CharSequence, Appends the specified character sequence to this Appendable. Depending on which class implements the character sequence csq, the entire sequence may not be appended. For instance, if csq is a {@link java.nio.CharBuffer} then the subsequence to append is defined by the buffer's position and limit. @param csq The character sequence to append. If csq is null, then the four characters null are appended to this Appendable. @return A reference to this Appendable @throws IOException If an I/O error occurs
method,java/lang/Appendable/append/CharSequence;int;int, Appends a subsequence of the specified character sequence to this Appendable. An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation out.append(csq.subSequence(start, end)) @param csq The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters null. @param start The index of the first character in the subsequence @param end The index of the character following the last character in the subsequence @return A reference to this Appendable @throws IndexOutOfBoundsException If start or end are negative, start is greater than end, or end is greater than csq.length() @throws IOException If an I/O error occurs
method,java/lang/Appendable/append/char, Appends the specified character to this Appendable. @param c The character to append @return A reference to this Appendable @throws IOException If an I/O error occurs
class,java/lang/AbstractMethodError, Thrown when an application tries to call an abstract method. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of some class has incompatibly changed since the currently executing method was last compiled. @author unascribed @version 1.21, 03/23/10 @since JDK1.0
class,java/lang/ref/WeakReference, Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed. Weak references are most often used to implement canonicalizing mappings. Suppose that the garbage collector determines at a certain point in time that an object is weakly reachable. At that time it will atomically clear all weak references to that object and all weak references to any other weakly-reachable objects from which that object is reachable through a chain of strong and soft references. At the same time it will declare all of the formerly weakly-reachable objects to be finalizable. At the same time or at some later time it will enqueue those newly-cleared weak references that are registered with reference queues. @version 1.20, 03/23/10 @author Mark Reinhold @since 1.2
method,java/lang/ref/WeakReference/WeakReference/Object;ReferenceQueue, Creates a new weak reference that refers to the given object and is registered with the given queue. @param referent object the new weak reference will refer to @param q the queue with which the reference is to be registered, or null if registration is not required
class,java/lang/ref/SoftReference, Soft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand. Soft references are most often used to implement memory-sensitive caches. Suppose that the garbage collector determines at a certain point in time that an object is softly reachable. At that time it may choose to clear atomically all soft references to that object and all soft references to any other softly-reachable objects from which that object is reachable through a chain of strong references. At the same time or at some later time it will enqueue those newly-cleared soft references that are registered with reference queues. All soft references to softly-reachable objects are guaranteed to have been cleared before the virtual machine throws an OutOfMemoryError. Otherwise no constraints are placed upon the time at which a soft reference will be cleared or the order in which a set of such references to different objects will be cleared. Virtual machine implementations are, however, encouraged to bias against clearing recently-created or recently-used soft references. Direct instances of this class may be used to implement simple caches; this class or derived subclasses may also be used in larger data structures to implement more sophisticated caches. As long as the referent of a soft reference is strongly reachable, that is, is actually in use, the soft reference will not be cleared. Thus a sophisticated cache can, for example, prevent its most recently used entries from being discarded by keeping strong referents to those entries, leaving the remaining entries to be discarded at the discretion of the garbage collector. @version 1.37, 03/23/10 @author Mark Reinhold @since 1.2
method,java/lang/ref/SoftReference/SoftReference/Object;ReferenceQueue, Creates a new soft reference that refers to the given object and is registered with the given queue. @param referent object the new soft reference will refer to @param q the queue with which the reference is to be registered, or null if registration is not required
class,java/lang/ref/ReferenceQueue, Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected. @version 1.27, 03/23/10 @author Mark Reinhold @since 1.2
method,java/lang/ref/ReferenceQueue/remove/long, Removes the next reference object in this queue, blocking until either one becomes available or the given timeout period expires. This method does not offer real-time guarantees: It schedules the timeout as if by invoking the {@link Object#wait(long)} method. @param timeout If positive, block for up to timeout milliseconds while waiting for a reference to be added to this queue. If zero, block indefinitely. @return A reference object, if one was available within the specified timeout period, otherwise null @throws IllegalArgumentException If the value of the timeout argument is negative @throws InterruptedException If the timeout wait is interrupted
method,java/lang/ref/Reference/clear/, Clears this reference object. Invoking this method will not cause this object to be enqueued. This method is invoked only by Java code; when the garbage collector clears references it does so directly, without invoking this method.
method,java/lang/ref/Reference/isEnqueued/, Tells whether or not this reference object has been enqueued, either by the program or by the garbage collector.	 If this reference object was not registered with a queue when it was created, then this method will always return false. @return	 true if and only if this reference object has		 been enqueued
method,java/lang/ref/Reference/enqueue/, Adds this reference object to the queue with which it is registered, if any. This method is invoked only by Java code; when the garbage collector enqueues references it does so directly, without invoking this method. @return	 true if this reference object was successfully		 enqueued; false if it was already enqueued or if		 it was not registered with a queue when it was created
class,java/lang/ref/PhantomReference, Phantom reference objects, which are enqueued after the collector determines that their referents may otherwise be reclaimed. Phantom references are most often used for scheduling pre-mortem cleanup actions in a more flexible way than is possible with the Java finalization mechanism. If the garbage collector determines at a certain point in time that the referent of a phantom reference is phantom reachable, then at that time or at some later time it will enqueue the reference. In order to ensure that a reclaimable object remains so, the referent of a phantom reference may not be retrieved: The get method of a phantom reference always returns null. Unlike soft and weak references, phantom references are not automatically cleared by the garbage collector as they are enqueued. An object that is reachable via phantom references will remain so until all such references are cleared or themselves become unreachable. @version 1.21, 03/23/10 @author Mark Reinhold @since 1.2
method,java/lang/ref/PhantomReference/PhantomReference/Object;ReferenceQueue, Creates a new phantom reference that refers to the given object and is registered with the given queue. It is possible to create a phantom reference with a null queue, but such a reference is completely useless: Its get method will always return null and, since it does not have a queue, it will never be enqueued. @param referent the object the new phantom reference will refer to @param q the queue with which the reference is to be registered, or null if registration is not required
field,java/lang/annotation/RetentionPolicy/RUNTIME, Annotations are to be recorded in the class file by the compiler and retained by the VM at run time, so they may be read reflectively. @see java.lang.reflect.AnnotatedElement
interface,java/lang/annotation/Retention, Indicates how long annotations with the annotated type are to be retained. If no Retention annotation is present on an annotation type declaration, the retention policy defaults to RetentionPolicy.CLASS. A Target meta-annotation has effect only if the meta-annotated type is use directly for annotation. It has no effect if the meta-annotated type is used as a member type in another annotation type. @author Joshua Bloch @since 1.5
interface,java/lang/annotation/Inherited, Indicates that an annotation type is automatically inherited. If an Inherited meta-annotation is present on an annotation type declaration, and the user queries the annotation type on a class declaration, and the class declaration has no annotation for this type, then the class's superclass will automatically be queried for the annotation type. This process will be repeated until an annotation for this type is found, or the top of the class hierarchy (Object) is reached. If no superclass has an annotation for this type, then the query will indicate that the class in question has no such annotation. Note that this meta-annotation type has no effect if the annotated type is used to annotate anything other than a class. Note also that this meta-annotation only causes annotations to be inherited from superclasses; annotations on implemented interfaces have no effect. @author Joshua Bloch @since 1.5
class,java/lang/annotation/IncompleteAnnotationException, Thrown to indicate that a program has attempted to access an element of an annotation type that was added to the annotation type definition after the annotation was compiled (or serialized). This exception will not be thrown if the new element has a default value. @author Josh Bloch @since 1.5
interface,java/lang/annotation/Documented, Indicates that annotations with a type are to be documented by javadoc and similar tools by default. This type should be used to annotate the declarations of types whose annotations affect the use of annotated elements by their clients. If a type declaration is annotated with Documented, its annotations become part of the public API of the annotated elements. @author Joshua Bloch @version 1.7, 03/23/10 @since 1.5
class,java/lang/annotation/AnnotationTypeMismatchException, Thrown to indicate that a program has attempted to access an element of an annotation whose type has changed after the annotation was compiled (or serialized). @author Josh Bloch @since 1.5
method,java/lang/annotation/AnnotationTypeMismatchException/foundType/, Returns the type of data found in the incorrectly typed element. The returned string may, but is not required to, contain the value as well. The exact format of the string is unspecified. @return the type of data found in the incorrectly typed element
method,java/lang/annotation/AnnotationTypeMismatchException/AnnotationTypeMismatchException/Method;String, Constructs an AnnotationTypeMismatchException for the specified annotation type element and found data type. @param element the Method object for the annotation element @param foundType the (erroneous) type of data found in the annotation. This string may, but is not required to, contain the value as well. The exact format of the string is unspecified.
method,java/lang/annotation/AnnotationFormatError/AnnotationFormatError/String;Throwable, Constructs a new AnnotationFormatError with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this error's detail message. @param message the detail message @param cause the cause (A null value is permitted, and indicates that the cause is nonexistent or unknown.)
interface,java/lang/annotation/Annotation, The common interface extended by all annotation types. Note that an interface that manually extends this one does not define an annotation type. Also note that this interface does not itself define an annotation type. @author Josh Bloch @since 1.5
method,java/lang/annotation/Annotation/equals/Object, Returns true if the specified object represents an annotation that is logically equivalent to this one. In other words, returns true if the specified object is an instance of the same annotation type as this instance, all of whose members are equal to the corresponding member of this annotation, as defined below: Two corresponding primitive typed members whose values are x and y are considered equal if x == y, unless their type is float or double. Two corresponding float members whose values are x and y are considered equal if Float.valueOf(x).equals(Float.valueOf(y)). (Unlike the == operator, NaN is considered equal to itself, and 0.0f unequal to -0.0f.) Two corresponding double members whose values are x and y are considered equal if Double.valueOf(x).equals(Double.valueOf(y)). (Unlike the == operator, NaN is considered equal to itself, and 0.0 unequal to -0.0.) Two corresponding String, Class, enum, or annotation typed members whose values are x and y are considered equal if x.equals(y). (Note that this definition is recursive for annotation typed members.) Two corresponding array typed members x and y are considered equal if Arrays.equals(x, y), for the appropriate overloading of {@link java.util.Arrays#equals}. @return true if the specified object represents an annotation that is logically equivalent to this one, otherwise false
method,java/lang/annotation/Annotation/toString/, Returns a string representation of this annotation. The details of the representation are implementation-dependent, but the following may be regarded as typical: &#064;com.acme.util.Name(first=Alfred, middle=E., last=Neuman) @return a string representation of this annotation
interface,java/lang/reflect/WildcardType, WildcardType represents a wildcard type expression, such as ?, ? extends Number, or ? super Integer. @since 1.5
method,java/lang/reflect/WildcardType/getUpperBounds/, Returns an array of Type objects representing the upper bound(s) of this type variable. Note that if no upper bound is explicitly declared, the upper bound is Object. For each upper bound B : if B is a parameterized type or a type variable, it is created, (see {@link java.lang.reflect.ParameterizedType ParameterizedType} for the details of the creation process for parameterized types). Otherwise, B is resolved. @return an array of Types representing the upper bound(s) of this type variable @throws TypeNotPresentException if any of the bounds refers to a non-existent type declaration @throws MalformedParameterizedTypeException if any of the bounds refer to a parameterized type that cannot be instantiated for any reason
method,java/lang/reflect/WildcardType/getLowerBounds/, Returns an array of Type objects representing the lower bound(s) of this type variable. Note that if no lower bound is explicitly declared, the lower bound is the type of null. In this case, a zero length array is returned. For each lower bound B : if B is a parameterized type or a type variable, it is created, (see {@link java.lang.reflect.ParameterizedType ParameterizedType} for the details of the creation process for parameterized types). Otherwise, B is resolved. @return an array of Types representing the lower bound(s) of this type variable @throws TypeNotPresentException if any of the bounds refers to a non-existent type declaration @throws MalformedParameterizedTypeException if any of the bounds refer to a parameterized type that cannot be instantiated for any reason
class,java/lang/reflect/UndeclaredThrowableException, Thrown by a method invocation on a proxy instance if its invocation handler's {@link InvocationHandler#invoke invoke} method throws a checked exception (a Throwable that is not assignable to RuntimeException or Error) that is not assignable to any of the exception types declared in the throws clause of the method that was invoked on the proxy instance and dispatched to the invocation handler. An UndeclaredThrowableException instance contains the undeclared checked exception that was thrown by the invocation handler, and it can be retrieved with the getUndeclaredThrowable() method. UndeclaredThrowableException extends RuntimeException, so it is an unchecked exception that wraps a checked exception. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The undeclared checked exception that was thrown by the invocation handler that may be provided at construction time and accessed via the {@link #getUndeclaredThrowable()} method is now known as the cause, and may be accessed via the {@link Throwable#getCause()} method, as well as the aforementioned legacy method. @author	Peter Jones @version	1.16, 10/03/23 @see		InvocationHandler @since	1.3
method,java/lang/reflect/UndeclaredThrowableException/getUndeclaredThrowable/, Returns the Throwable instance wrapped in this UndeclaredThrowableException, which may be null. This method predates the general-purpose exception chaining facility. The {@link Throwable#getCause()} method is now the preferred means of obtaining this information. @return the undeclared checked exception that was thrown
method,java/lang/reflect/UndeclaredThrowableException/getCause/, Returns the cause of this exception (the Throwable instance wrapped in this UndeclaredThrowableException, which may be null). @return the cause of this exception. @since 1.4
method,java/lang/reflect/TypeVariable/getBounds/, Returns an array of Type objects representing the upper bound(s) of this type variable. Note that if no upper bound is explicitly declared, the upper bound is Object. For each upper bound B: if B is a parameterized type or a type variable, it is created, (see {@link java.lang.reflect.ParameterizedType ParameterizedType} for the details of the creation process for parameterized types). Otherwise, B is resolved. @throws TypeNotPresentException if any of the bounds refers to a non-existent type declaration @throws MalformedParameterizedTypeException if any of the bounds refer to a parameterized type that cannot be instantiated for any reason @return an array of Types representing the upper bound(s) of this type variable
interface,java/lang/reflect/Type, Type is the common superinterface for all types in the Java programming language. These include raw types, parameterized types, array types, type variables and primitive types. @since 1.5
class,java/lang/reflect/ReflectPermission, The Permission class for reflective operations. A ReflectPermission is a named permission and has no actions. The only name currently defined is suppressAccessChecks, which allows suppressing the standard Java language access checks -- for public, default (package) access, protected, and private members -- performed by reflected objects at their point of use. The following table provides a summary description of what the permission allows, and discusses the risks of granting code the permission. Permission Target Name What the Permission Allows Risks of Allowing this Permission suppressAccessChecks ability to access fields and invoke methods in a class. Note that this includes not only public, but protected and private fields and methods as well. This is dangerous in that information (possibly confidential) and methods normally unavailable would be accessible to malicious code. @see java.security.Permission @see java.security.BasicPermission @see AccessibleObject @see Field#get @see Field#set @see Method#invoke @see Constructor#newInstance @since 1.2
class,java/lang/reflect/Proxy, Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. To create a proxy for some interface Foo: InvocationHandler handler = new MyInvocationHandler(...); Class proxyClass = Proxy.getProxyClass( Foo.class.getClassLoader(), new Class[] { Foo.class }); Foo f = (Foo) proxyClass. getConstructor(new Class[] { InvocationHandler.class }). newInstance(new Object[] { handler }); or more simply: Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(), new Class[] { Foo.class }, handler); A dynamic proxy class (simply referred to as a proxy class below) is a class that implements a list of interfaces specified at runtime when the class is created, with behavior as described below. A proxy interface is such an interface that is implemented by a proxy class. A proxy instance is an instance of a proxy class. Each proxy instance has an associated invocation handler object, which implements the interface {@link InvocationHandler}. A method invocation on a proxy instance through one of its proxy interfaces will be dispatched to the {@link InvocationHandler#invoke invoke} method of the instance's invocation handler, passing the proxy instance, a java.lang.reflect.Method object identifying the method that was invoked, and an array of type Object containing the arguments. The invocation handler processes the encoded method invocation as appropriate and the result that it returns will be returned as the result of the method invocation on the proxy instance. A proxy class has the following properties: Proxy classes are public, final, and not abstract. The unqualified name of a proxy class is unspecified. The space of class names that begin with the string $Proxy should be, however, reserved for proxy classes. A proxy class extends java.lang.reflect.Proxy. A proxy class implements exactly the interfaces specified at its creation, in the same order. If a proxy class implements a non-public interface, then it will be defined in the same package as that interface. Otherwise, the package of a proxy class is also unspecified. Note that package sealing will not prevent a proxy class from being successfully defined in a particular package at runtime, and neither will classes already defined by the same class loader and the same package with particular signers. Since a proxy class implements all of the interfaces specified at its creation, invoking getInterfaces on its Class object will return an array containing the same list of interfaces (in the order specified at its creation), invoking getMethods on its Class object will return an array of Method objects that include all of the methods in those interfaces, and invoking getMethod will find methods in the proxy interfaces as would be expected. The {@link Proxy#isProxyClass Proxy.isProxyClass} method will return true if it is passed a proxy class-- a class returned by Proxy.getProxyClass or the class of an object returned by Proxy.newProxyInstance-- and false otherwise. The java.security.ProtectionDomain of a proxy class is the same as that of system classes loaded by the bootstrap class loader, such as java.lang.Object, because the code for a proxy class is generated by trusted system code. This protection domain will typically be granted java.security.AllPermission. Each proxy class has one public constructor that takes one argument, an implementation of the interface {@link InvocationHandler}, to set the invocation handler for a proxy instance. Rather than having to use the reflection API to access the public constructor, a proxy instance can be also be created by calling the {@link Proxy#newProxyInstance Proxy.newInstance} method, which combines the actions of calling {@link Proxy#getProxyClass Proxy.getProxyClass} with invoking the constructor with an invocation handler. A proxy instance has the following properties: Given a proxy instance proxy and one of the interfaces implemented by its proxy class Foo, the following expression will return true: proxy instanceof Foo and the following cast operation will succeed (rather than throwing a ClassCastException): (Foo) proxy Each proxy instance has an associated invocation handler, the one that was passed to its constructor. The static {@link Proxy#getInvocationHandler Proxy.getInvocationHandler} method will return the invocation handler associated with the proxy instance passed as its argument. An interface method invocation on a proxy instance will be encoded and dispatched to the invocation handler's {@link InvocationHandler#invoke invoke} method as described in the documentation for that method. An invocation of the hashCode, equals, or toString methods declared in java.lang.Object on a proxy instance will be encoded and dispatched to the invocation handler's invoke method in the same manner as interface method invocations are encoded and dispatched, as described above. The declaring class of the Method object passed to invoke will be java.lang.Object. Other public methods of a proxy instance inherited from java.lang.Object are not overridden by a proxy class, so invocations of those methods behave like they do for instances of java.lang.Object. Methods Duplicated in Multiple Proxy Interfaces When two or more interfaces of a proxy class contain a method with the same name and parameter signature, the order of the proxy class's interfaces becomes significant. When such a duplicate method is invoked on a proxy instance, the Method object passed to the invocation handler will not necessarily be the one whose declaring class is assignable from the reference type of the interface that the proxy's method was invoked through. This limitation exists because the corresponding method implementation in the generated proxy class cannot determine which interface it was invoked through. Therefore, when a duplicate method is invoked on a proxy instance, the Method object for the method in the foremost interface that contains the method (either directly or inherited through a superinterface) in the proxy class's list of interfaces is passed to the invocation handler's invoke method, regardless of the reference type through which the method invocation occurred. If a proxy interface contains a method with the same name and parameter signature as the hashCode, equals, or toString methods of java.lang.Object, when such a method is invoked on a proxy instance, the Method object passed to the invocation handler will have java.lang.Object as its declaring class. In other words, the public, non-final methods of java.lang.Object logically precede all of the proxy interfaces for the determination of which Method object to pass to the invocation handler. Note also that when a duplicate method is dispatched to an invocation handler, the invoke method may only throw checked exception types that are assignable to one of the exception types in the throws clause of the method in all of the proxy interfaces that it can be invoked through. If the invoke method throws a checked exception that is not assignable to any of the exception types declared by the method in one of the proxy interfaces that it can be invoked through, then an unchecked UndeclaredThrowableException will be thrown by the invocation on the proxy instance. This restriction means that not all of the exception types returned by invoking getExceptionTypes on the Method object passed to the invoke method can necessarily be thrown successfully by the invoke method. @author	Peter Jones @version	1.23, 10/03/23 @see		InvocationHandler @since	1.3
method,java/lang/reflect/Proxy/newProxyInstance/ClassLoader;Class[];InvocationHandler, Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler. This method is equivalent to: Proxy.getProxyClass(loader, interfaces). getConstructor(new Class[] { InvocationHandler.class }). newInstance(new Object[] { handler }); Proxy.newProxyInstance throws IllegalArgumentException for the same reasons that Proxy.getProxyClass does. @param	loader the class loader to define the proxy class @param	interfaces the list of interfaces for the proxy class		to implement @param h the invocation handler to dispatch method invocations to @return	a proxy instance with the specified invocation handler of a		proxy class that is defined by the specified class loader		and that implements the specified interfaces @throws	IllegalArgumentException if any of the restrictions on the		parameters that may be passed to getProxyClass		are violated @throws	NullPointerException if the interfaces array		argument or any of its elements are null, or		if the invocation handler, h, is		null
method,java/lang/reflect/Proxy/getInvocationHandler/Object, Returns the invocation handler for the specified proxy instance. @param	proxy the proxy instance to return the invocation handler for @return	the invocation handler for the proxy instance @throws	IllegalArgumentException if the argument is not a		proxy instance
method,java/lang/reflect/Proxy/Proxy/InvocationHandler, Constructs a new Proxy instance from a subclass (typically, a dynamic proxy class) with the specified value for its invocation handler. @param h the invocation handler for this proxy instance
field,java/lang/reflect/Proxy/h, the invocation handler for this proxy instance. @serial
method,java/lang/reflect/ParameterizedType/getActualTypeArguments/, Returns an array of Type objects representing the actual type arguments to this type. Note that in some cases, the returned array be empty. This can occur if this type represents a non-parameterized type nested within a parameterized type. @return an array of Type objects representing the actual type arguments to this type @throws TypeNotPresentException if any of the actual type arguments refers to a non-existent type declaration @throws MalformedParameterizedTypeException if any of the actual type parameters refer to a parameterized type that cannot be instantiated for any reason @since 1.5
method,java/lang/reflect/Modifier/isSynchronized/int, Return true if the integer argument includes the synchronized modifier, false otherwise. @param 	mod a set of modifiers @return true if mod includes the synchronized modifier; false otherwise.
method,java/lang/reflect/Modifier/isStrict/int, Return true if the integer argument includes the strictfp modifier, false otherwise. @param 	mod a set of modifiers @return true if mod includes the strictfp modifier; false otherwise.
method,java/lang/reflect/Modifier/toString/int, Return a string describing the access modifier flags in the specified modifier. For example: public final synchronized strictfp The modifier names are returned in an order consistent with the suggested modifier orderings given in The Java Language Specification, Second Edition sections &sect;8.1.1, &sect;8.3.1, &sect;8.4.3, &sect;8.8.3, and &sect;9.1.1. The full modifier ordering used by this method is: public protected private abstract static final transient volatile synchronized native strictfp interface The interface modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. @param	mod a set of modifiers @return	a string representation of the set of modifiers represented by mod
field,java/lang/reflect/Modifier/SYNCHRONIZED, The int value representing the synchronized modifier.
field,java/lang/reflect/Modifier/STRICT, The int value representing the strictfp modifier.
class,java/lang/reflect/Method, A Method provides information about, and access to, a single method on a class or interface. The reflected method may be a class method or an instance method (including an abstract method). A Method permits widening conversions to occur when matching the actual parameters to invoke with the underlying method's formal parameters, but it throws an IllegalArgumentException if a narrowing conversion would occur. @see Member @see java.lang.Class @see java.lang.Class#getMethods() @see java.lang.Class#getMethod(String, Class[]) @see java.lang.Class#getDeclaredMethods() @see java.lang.Class#getDeclaredMethod(String, Class[]) @author Kenneth Russell @author Nakul Saraiya
method,java/lang/reflect/Method/getModifiers/, Returns the Java language modifiers for the method represented by this Method object, as an integer. The Modifier class should be used to decode the modifiers. @see Modifier
method,java/lang/reflect/Method/toString/, Returns a string describing this Method. The string is formatted as the method access modifiers, if any, followed by the method return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method's formal parameter types. If the method throws checked exceptions, the parameter list is followed by a space, followed by the word throws followed by a comma-separated list of the thrown exception types. For example: public boolean java.lang.Object.equals(java.lang.Object) The access modifiers are placed in canonical order as specified by The Java Language Specification. This is public, protected or private first, and then other modifiers in the following order: abstract, static, final, synchronized, native.
method,java/lang/reflect/Method/toGenericString/, Returns a string describing this Method, including type parameters. The string is formatted as the method access modifiers, if any, followed by an angle-bracketed comma-separated list of the method's type parameters, if any, followed by the method's generic return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method's generic formal parameter types. A space is used to separate access modifiers from one another and from the type parameters or return type. If there are no type parameters, the type parameter list is elided; if the type parameter list is present, a space separates the list from the class name. If the method is declared to throw exceptions, the parameter list is followed by a space, followed by the word throws followed by a comma-separated list of the generic thrown exception types. If there are no type parameters, the type parameter list is elided. The access modifiers are placed in canonical order as specified by The Java Language Specification. This is public, protected or private first, and then other modifiers in the following order: abstract, static, final, synchronized native. @return a string describing this Method, include type parameters @since 1.5
method,java/lang/reflect/Method/isBridge/, Returns true if this method is a bridge method; returns false otherwise. @return true if and only if this method is a bridge method as defined by the Java Language Specification. @since 1.5
method,java/lang/reflect/Method/isVarArgs/, Returns true if this method was declared to take a variable number of arguments; returns false otherwise. @return true if an only if this method was declared to take a variable number of arguments. @since 1.5
method,java/lang/reflect/Method/isSynthetic/, Returns true if this method is a synthetic method; returns false otherwise. @return true if and only if this method is a synthetic method as defined by the Java Language Specification. @since 1.5
method,java/lang/reflect/Method/getAnnotation/Class, @throws NullPointerException {@inheritDoc} @since 1.5
method,java/lang/reflect/Method/getParameterAnnotations/, Returns an array of arrays that represent the annotations on the formal parameters, in declaration order, of the method represented by this Method object. (Returns an array of length zero if the underlying method is parameterless. If the method has one or more parameters, a nested array of length zero is returned for each parameter with no annotations.) The annotation objects contained in the returned arrays are serializable. The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers. @return an array of arrays that represent the annotations on the formal parameters, in declaration order, of the method represented by this Method object @since 1.5
method,java/lang/reflect/Member/getModifiers/, Returns the Java language modifiers for the member or constructor represented by this Member, as an integer. The Modifier class should be used to decode the modifiers in the integer. @return the Java language modifiers for the underlying member @see Modifier
method,java/lang/reflect/Member/isSynthetic/, Returns true if this member was introduced by the compiler; returns false otherwise. @return true if and only if this member was introduced by the compiler. @since 1.5
field,java/lang/reflect/Member/PUBLIC, Identifies the set of all public members of a class or interface, including inherited members. @see java.lang.SecurityManager#checkMemberAccess
field,java/lang/reflect/Member/DECLARED, Identifies the set of declared members of a class or interface. Inherited members are not included. @see java.lang.SecurityManager#checkMemberAccess
class,java/lang/reflect/InvocationTargetException, InvocationTargetException is a checked exception that wraps an exception thrown by an invoked method or constructor. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The target exception that is provided at construction time and accessed via the {@link #getTargetException()} method is now known as the cause, and may be accessed via the {@link Throwable#getCause()} method, as well as the aforementioned legacy method. @see Method @see Constructor
method,java/lang/reflect/InvocationTargetException/getTargetException/, Get the thrown target exception. This method predates the general-purpose exception chaining facility. The {@link Throwable#getCause()} method is now the preferred means of obtaining this information. @return the thrown target exception (cause of this exception).
method,java/lang/reflect/InvocationTargetException/getCause/, Returns the cause of this exception (the thrown target exception, which may be null). @return the cause of this exception. @since 1.4
method,java/lang/reflect/InvocationTargetException/InvocationTargetException/, Constructs an InvocationTargetException with null as the target exception.
method,java/lang/reflect/InvocationTargetException/InvocationTargetException/Throwable, Constructs a InvocationTargetException with a target exception. @param target the target exception
method,java/lang/reflect/InvocationTargetException/InvocationTargetException/Throwable;String, Constructs a InvocationTargetException with a target exception and a detail message. @param target the target exception @param s the detail message
interface,java/lang/reflect/InvocationHandler, InvocationHandler is the interface implemented by the invocation handler of a proxy instance. Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler. @author	Peter Jones @version	1.12, 10/03/23 @see		Proxy @since	1.3
class,java/lang/reflect/Field, A Field provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field. A Field permits widening conversions to occur during a get or set access operation, but throws an IllegalArgumentException if a narrowing conversion would occur. @see Member @see java.lang.Class @see java.lang.Class#getFields() @see java.lang.Class#getField(String) @see java.lang.Class#getDeclaredFields() @see java.lang.Class#getDeclaredField(String) @author Kenneth Russell @author Nakul Saraiya
method,java/lang/reflect/Field/getModifiers/, Returns the Java language modifiers for the field represented by this Field object, as an integer. The Modifier class should be used to decode the modifiers. @see Modifier
method,java/lang/reflect/Field/isEnumConstant/, Returns true if this field represents an element of an enumerated type; returns false otherwise. @return true if and only if this field represents an element of an enumerated type. @since 1.5
method,java/lang/reflect/Field/isSynthetic/, Returns true if this field is a synthetic field; returns false otherwise. @return true if and only if this field is a synthetic field as defined by the Java Language Specification. @since 1.5
method,java/lang/reflect/Field/toString/, Returns a string describing this Field. The format is the access modifiers for the field, if any, followed by the field type, followed by a space, followed by the fully-qualified name of the class declaring the field, followed by a period, followed by the name of the field. For example: public static final int java.lang.Thread.MIN_PRIORITY private int java.io.FileDescriptor.fd The modifiers are placed in canonical order as specified by The Java Language Specification. This is public, protected or private first, and then other modifiers in the following order: static, final, transient, volatile.
method,java/lang/reflect/Field/getAnnotation/Class, @throws NullPointerException {@inheritDoc} @since 1.5
method,java/lang/reflect/Constructor/getModifiers/, Returns the Java language modifiers for the constructor represented by this Constructor object, as an integer. The Modifier class should be used to decode the modifiers. @see Modifier
method,java/lang/reflect/Constructor/toString/, Returns a string describing this Constructor. The string is formatted as the constructor access modifiers, if any, followed by the fully-qualified name of the declaring class, followed by a parenthesized, comma-separated list of the constructor's formal parameter types. For example: public java.util.Hashtable(int,float) The only possible modifiers for constructors are the access modifiers public, protected or private. Only one of these may appear, or none if the constructor has default (package) access.
method,java/lang/reflect/Constructor/toGenericString/, Returns a string describing this Constructor, including type parameters. The string is formatted as the constructor access modifiers, if any, followed by an angle-bracketed comma separated list of the constructor's type parameters, if any, followed by the fully-qualified name of the declaring class, followed by a parenthesized, comma-separated list of the constructor's generic formal parameter types. A space is used to separate access modifiers from one another and from the type parameters or return type. If there are no type parameters, the type parameter list is elided; if the type parameter list is present, a space separates the list from the class name. If the constructor is declared to throw exceptions, the parameter list is followed by a space, followed by the word &quot;throws&quot; followed by a comma-separated list of the thrown exception types. The only possible modifiers for constructors are the access modifiers public, protected or private. Only one of these may appear, or none if the constructor has default (package) access. @return a string describing this Constructor, include type parameters @since 1.5
method,java/lang/reflect/Constructor/isVarArgs/, Returns true if this constructor was declared to take a variable number of arguments; returns false otherwise. @return true if an only if this constructor was declared to take a variable number of arguments. @since 1.5
method,java/lang/reflect/Constructor/isSynthetic/, Returns true if this constructor is a synthetic constructor; returns false otherwise. @return true if and only if this constructor is a synthetic constructor as defined by the Java Language Specification. @since 1.5
method,java/lang/reflect/Constructor/getAnnotation/Class, @throws NullPointerException {@inheritDoc} @since 1.5
method,java/lang/reflect/Constructor/getParameterAnnotations/, Returns an array of arrays that represent the annotations on the formal parameters, in declaration order, of the method represented by this Constructor object. (Returns an array of length zero if the underlying method is parameterless. If the method has one or more parameters, a nested array of length zero is returned for each parameter with no annotations.) The annotation objects contained in the returned arrays are serializable. The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers. @return an array of arrays that represent the annotations on the formal parameters, in declaration order, of the method represented by this Constructor object @since 1.5
method,java/lang/reflect/Array/newInstance/Class;int, Creates a new array with the specified component type and length. Invoking this method is equivalent to creating an array as follows: int[] x = {length}; Array.newInstance(componentType, x); @param componentType the Class object representing the component type of the new array @param length the length of the new array @return the new array @exception NullPointerException if the specified componentType parameter is null @exception IllegalArgumentException if componentType is {@link Void#TYPE} @exception NegativeArraySizeException if the specified length is negative
interface,java/lang/reflect/AnnotatedElement, Represents an annotated element of the program currently running in this VM. This interface allows annotations to be read reflectively. All annotations returned by methods in this interface are immutable and serializable. It is permissible for the caller to modify the arrays returned by accessors for array-valued enum members; it will have no affect on the arrays returned to other callers. If an annotation returned by a method in this interface contains (directly or indirectly) a {@link Class}-valued member referring to a class that is not accessible in this VM, attempting to read the class by calling the relevant Class-returning method on the returned annotation will result in a {@link TypeNotPresentException}. Similarly, attempting to read an enum-valued member will result in a {@link EnumConstantNotPresentException} if the enum constant in the annotation is no longer present in the enum type. Finally, Attempting to read a member whose definition has evolved incompatibly will result in a {@link java.lang.annotation.AnnotationTypeMismatchException} or an {@link java.lang.annotation.IncompleteAnnotationException}. @since 1.5 @author Josh Bloch
method,java/lang/reflect/AnnotatedElement/getAnnotations/, Returns all annotations present on this element. (Returns an array of length zero if this element has no annotations.) The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. @return all annotations present on this element @since 1.5
method,java/lang/reflect/AnnotatedElement/getDeclaredAnnotations/, Returns all annotations that are directly present on this element. Unlike the other methods in this interface, this method ignores inherited annotations. (Returns an array of length zero if no annotations are directly present on this element.) The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. @return All annotations directly present on this element @since 1.5
class,java/lang/reflect/AccessibleObject, The AccessibleObject class is the base class for Field, Method and Constructor objects. It provides the ability to flag a reflected object as suppressing default Java language access control checks when it is used. The access checks--for public, default (package) access, protected, and private members--are performed when Fields, Methods or Constructors are used to set or get fields, to invoke methods, or to create and initialize new instances of classes, respectively. Setting the accessible flag in a reflected object permits sophisticated applications with sufficient privilege, such as Java Object Serialization or other persistence mechanisms, to manipulate objects in a manner that would normally be prohibited. @see Field @see Method @see Constructor @see ReflectPermission @since 1.2
method,java/lang/reflect/AccessibleObject/setAccessible/AccessibleObject[];boolean, Convenience method to set the accessible flag for an array of objects with a single security check (for efficiency). First, if there is a security manager, its checkPermission method is called with a ReflectPermission(suppressAccessChecks) permission. A SecurityException is raised if flag is true but accessibility of any of the elements of the input array may not be changed (for example, if the element object is a {@link Constructor} object for the class {@link java.lang.Class}). In the event of such a SecurityException, the accessibility of objects is set to flag for array elements upto (and excluding) the element for which the exception occurred; the accessibility of elements beyond (and including) the element for which the exception occurred is unchanged. @param array the array of AccessibleObjects @param flag the new value for the accessible flag in each object @throws SecurityException if the request is denied. @see SecurityManager#checkPermission @see java.lang.RuntimePermission
method,java/lang/reflect/AccessibleObject/setAccessible/boolean, Set the accessible flag for this object to the indicated boolean value. A value of true indicates that the reflected object should suppress Java language access checking when it is used. A value of false indicates that the reflected object should enforce Java language access checks. First, if there is a security manager, its checkPermission method is called with a ReflectPermission(suppressAccessChecks) permission. A SecurityException is raised if flag is true but accessibility of this object may not be changed (for example, if this element object is a {@link Constructor} object for the class {@link java.lang.Class}). A SecurityException is raised if this object is a {@link java.lang.reflect.Constructor} object for the class java.lang.Class, and flag is true. @param flag the new value for the accessible flag @throws SecurityException if the request is denied. @see SecurityManager#checkPermission @see java.lang.RuntimePermission
method,java/lang/reflect/AccessibleObject/getAnnotation/Class, @throws NullPointerException {@inheritDoc} @since 1.5
method,java/lang/reflect/AccessibleObject/isAnnotationPresent/Class, @throws NullPointerException {@inheritDoc} @since 1.5
method,java/lang/reflect/AccessibleObject/AccessibleObject/, Constructor: only used by the Java Virtual Machine.
interface,java/lang/instrument/Instrumentation, This class provides services needed to instrument Java programming language code. Instrumentation is the addition of byte-codes to methods for the purpose of gathering data to be utilized by tools. Since the changes are purely additive, these tools do not modify application state or behavior. Examples of such benign tools include monitoring agents, profilers, coverage analyzers, and event loggers. There are two ways to obtain an instance of the Instrumentation interface: When a JVM is launched in a way that indicates an agent class. In that case an Instrumentation instance is passed to the premain method of the agent class. When a JVM provides a mechanism to start agents sometime after the JVM is launched. In that case an Instrumentation instance is passed to the agentmain method of the agent code. These mechanisms are described in the {@linkplain java.lang.instrument package specification}. Once an agent acquires an Instrumentation instance, the agent may call methods on the instance at any time. @since 1.5
method,java/lang/instrument/Instrumentation/addTransformer/ClassFileTransformer;boolean, Registers the supplied transformer. All future class definitions will be seen by the transformer, except definitions of classes upon which any registered transformer is dependent. The transformer is called when classes are loaded, when they are {@linkplain #redefineClasses redefined}. and if canRetransform is true, when they are {@linkplain #retransformClasses retransformed}. See {@link java.lang.instrument.ClassFileTransformer#transform ClassFileTransformer.transform} for the order of transform calls. If a transformer throws an exception during execution, the JVM will still call the other registered transformers in order. The same transformer may be added more than once, but it is strongly discouraged -- avoid this by creating a new instance of tranformer class. This method is intended for use in instrumentation, as described in the {@linkplain Instrumentation class specification}. @param transformer the transformer to register @param canRetransform can this transformer's transformations be retransformed @throws java.lang.NullPointerException if passed a null transformer @throws java.lang.UnsupportedOperationException if canRetransform is true and the current configuration of the JVM does not allow retransformation ({@link #isRetransformClassesSupported} is false) @since 1.6
method,java/lang/instrument/Instrumentation/isRetransformClassesSupported/, Returns whether or not the current JVM configuration supports retransformation of classes. The ability to retransform an already loaded class is an optional capability of a JVM. Retransformation will only be supported if the Can-Retransform-Classes manifest attribute is set to true in the agent JAR file (as described in the {@linkplain java.lang.instrument package specification}) and the JVM supports this capability. During a single instantiation of a single JVM, multiple calls to this method will always return the same answer. @return true if the current JVM configuration supports retransformation of classes, false if not. @see #retransformClasses @since 1.6
method,java/lang/instrument/Instrumentation/isRedefineClassesSupported/, Returns whether or not the current JVM configuration supports redefinition of classes. The ability to redefine an already loaded class is an optional capability of a JVM. Redefinition will only be supported if the Can-Redefine-Classes manifest attribute is set to true in the agent JAR file (as described in the {@linkplain java.lang.instrument package specification}) and the JVM supports this capability. During a single instantiation of a single JVM, multiple calls to this method will always return the same answer. @return true if the current JVM configuration supports redefinition of classes, false if not. @see #redefineClasses
method,java/lang/instrument/Instrumentation/getObjectSize/Object, Returns an implementation-specific approximation of the amount of storage consumed by the specified object. The result may include some or all of the object's overhead, and thus is useful for comparison within an implementation but not between implementations. The estimate may change during a single invocation of the JVM. @param objectToSize the object to size @return an implementation-specific approximation of the amount of storage consumed by the specified object @throws java.lang.NullPointerException if the supplied Object is null.
method,java/lang/instrument/Instrumentation/appendToBootstrapClassLoaderSearch/JarFile, Specifies a JAR file with instrumentation classes to be defined by the bootstrap class loader. When the virtual machine's built-in class loader, known as the bootstrap class loader, unsuccessfully searches for a class, the entries in the {@link java.util.jar.JarFile JAR file} will be searched as well. This method may be used multiple times to add multiple JAR files to be searched in the order that this method was invoked. The agent should take care to ensure that the JAR does not contain any classes or resources other than those to be defined by the bootstrap class loader for the purpose of instrumentation. Failure to observe this warning could result in unexpected behaviour that is difficult to diagnose. For example, suppose there is a loader L, and L's parent for delegation is the bootstrap class loader. Furthermore, a method in class C, a class defined by L, makes reference to a non-public accessor class C$1. If the JAR file contains a class C$1 then the delegation to the bootstrap class loader will cause C$1 to be defined by the bootstrap class loader. In this example an IllegalAccessError will be thrown that may cause the application to fail. One approach to avoiding these types of issues, is to use a unique package name for the instrumentation classes. The Java Virtual Machine Specification specifies that a subsequent attempt to resolve a symbolic reference that the Java virtual machine has previously unsuccessfully attempted to resolve always fails with the same error that was thrown as a result of the initial resolution attempt. Consequently, if the JAR file contains an entry that corresponds to a class for which the Java virtual machine has unsuccessfully attempted to resolve a reference, then subsequent attempts to resolve that reference will fail with the same error as the initial attempt. @param	jarfile		The JAR file to be searched when the bootstrap class loader		unsuccessfully searches for a class. @throws	NullPointerException		If jarfile is null. @see #appendToSystemClassLoaderSearch @see	java.lang.ClassLoader @see	java.util.jar.JarFile @since 1.6
method,java/lang/instrument/Instrumentation/isNativeMethodPrefixSupported/, Returns whether the current JVM configuration supports {@linkplain #setNativeMethodPrefix(ClassFileTransformer,String) setting a native method prefix}. The ability to set a native method prefix is an optional capability of a JVM. Setting a native method prefix will only be supported if the Can-Set-Native-Method-Prefix manifest attribute is set to true in the agent JAR file (as described in the {@linkplain java.lang.instrument package specification}) and the JVM supports this capability. During a single instantiation of a single JVM, multiple calls to this method will always return the same answer. @return true if the current JVM configuration supports setting a native method prefix, false if not. @see #setNativeMethodPrefix @since 1.6
method,java/lang/instrument/Instrumentation/setNativeMethodPrefix/ClassFileTransformer;String, This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name. When used with the {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer}, it enables native methods to be instrumented. Since native methods cannot be directly instrumented (they have no bytecodes), they must be wrapped with a non-native method which can be instrumented. For example, if we had: native boolean foo(int x); We could transform the class file (with the ClassFileTransformer during the initial definition of the class) so that this becomes: boolean foo(int x) { ... record entry to foo ... return wrapped_foo(x); } native boolean wrapped_foo(int x); Where foo becomes a wrapper for the actual native method with the appended prefix wrapped_. Note that wrapped_ would be a poor choice of prefix since it might conceivably form the name of an existing method thus something like $$$MyAgentWrapped$$$_ would be better but would make these examples less readable. The wrapper will allow data to be collected on the native method call, but now the problem becomes linking up the wrapped method with the native implementation. That is, the method wrapped_foo needs to be resolved to the native implementation of foo, which might be: Java_somePackage_someClass_foo(JNIEnv* env, jint x) This function allows the prefix to be specified and the proper resolution to occur. Specifically, when the standard resolution fails, the resolution is retried taking the prefix into consideration. There are two ways that resolution occurs, explicit resolution with the JNI function RegisterNatives and the normal automatic resolution. For RegisterNatives, the JVM will attempt this association: method(foo) -> nativeImplementation(foo) When this fails, the resolution will be retried with the specified prefix prepended to the method name, yielding the correct resolution: method(wrapped_foo) -> nativeImplementation(foo) For automatic resolution, the JVM will attempt: method(wrapped_foo) -> nativeImplementation(wrapped_foo) When this fails, the resolution will be retried with the specified prefix deleted from the implementation name, yielding the correct resolution: method(wrapped_foo) -> nativeImplementation(foo) Note that since the prefix is only used when standard resolution fails, native methods can be wrapped selectively. Since each ClassFileTransformer can do its own transformation of the bytecodes, more than one layer of wrappers may be applied. Thus each transformer needs its own prefix. Since transformations are applied in order, the prefixes, if applied, will be applied in the same order (see {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}). Thus if three transformers applied wrappers, foo might become $trans3_$trans2_$trans1_foo. But if, say, the second transformer did not apply a wrapper to foo it would be just $trans3_$trans1_foo. To be able to efficiently determine the sequence of prefixes, an intermediate prefix is only applied if its non-native wrapper exists. Thus, in the last example, even though $trans1_foo is not a native method, the $trans1_ prefix is applied since $trans1_foo exists. @param transformer The ClassFileTransformer which wraps using this prefix. @param prefix The prefix which has been applied to wrapped native methods. @throws java.lang.NullPointerException if passed a null transformer. @throws java.lang.UnsupportedOperationException if the current configuration of the JVM does not allow setting a native method prefix ({@link #isNativeMethodPrefixSupported} is false). @throws java.lang.IllegalArgumentException if the transformer is not registered (see {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}). @since 1.6
class,java/lang/instrument/IllegalClassFormatException, Thrown by an implementation of {@link java.lang.instrument.ClassFileTransformer#transform ClassFileTransformer.transform} when its input parameters are invalid. This may occur either because the initial class file bytes were invalid or a previously applied transform corrupted the bytes. @see java.lang.instrument.ClassFileTransformer#transform @since 1.5
interface,java/lang/instrument/ClassFileTransformer, An agent provides an implementation of this interface in order to transform class files. The transformation occurs before the class is defined by the JVM. Note the term class file is used as defined in the chapter The class File Format of The Java Virtual Machine Specification, to mean a sequence of bytes in class file format, whether or not they reside in a file. @see java.lang.instrument.Instrumentation @see java.lang.instrument.Instrumentation#addTransformer @see java.lang.instrument.Instrumentation#removeTransformer @since 1.5
interface,java/lang/management/ThreadMXBean, The management interface for the thread system of the Java virtual machine. A Java virtual machine has a single instance of the implementation class of this interface. This instance implementing this interface is an MXBean that can be obtained by calling the {@link ManagementFactory#getThreadMXBean} method or from the {@link ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The ObjectName for uniquely identifying the MXBean for the thread system within an MBeanServer is: {@link ManagementFactory#THREAD_MXBEAN_NAME java.lang:type=Threading} Thread ID Thread ID is a positive long value returned by calling the {@link java.lang.Thread#getId} method for a thread. The thread ID is unique during its lifetime. When a thread is terminated, this thread ID may be reused. Some methods in this interface take a thread ID or an array of thread IDs as the input parameter and return per-thread information. Thread CPU time A Java virtual machine implementation may support measuring the CPU time for the current thread, for any thread, or for no threads. The {@link #isThreadCpuTimeSupported} method can be used to determine if a Java virtual machine supports measuring of the CPU time for any thread. The {@link #isCurrentThreadCpuTimeSupported} method can be used to determine if a Java virtual machine supports measuring of the CPU time for the current thread. A Java virtual machine implementation that supports CPU time measurement for any thread will also support that for the current thread. The CPU time provided by this interface has nanosecond precision but not necessarily nanosecond accuracy. A Java virtual machine may disable CPU time measurement by default. The {@link #isThreadCpuTimeEnabled} and {@link #setThreadCpuTimeEnabled} methods can be used to test if CPU time measurement is enabled and to enable/disable this support respectively. Enabling thread CPU measurement could be expensive in some Java virtual machine implementations. Thread Contention Monitoring Some Java virtual machines may support thread contention monitoring. When thread contention monitoring is enabled, the accumulated elapsed time that the thread has blocked for synchronization or waited for notification will be collected and returned in the ThreadInfo object. The {@link #isThreadContentionMonitoringSupported} method can be used to determine if a Java virtual machine supports thread contention monitoring. The thread contention monitoring is disabled by default. The {@link #setThreadContentionMonitoringEnabled} method can be used to enable thread contention monitoring. Synchronization Information and Deadlock Detection Some Java virtual machines may support monitoring of {@linkplain #isObjectMonitorUsageSupported object monitor usage} and {@linkplain #isSynchronizerUsageSupported ownable synchronizer usage}. The {@link #getThreadInfo(long[], boolean, boolean)} and {@link #dumpAllThreads} methods can be used to obtain the thread stack trace and synchronization information including which {@linkplain LockInfo lock} a thread is blocked to acquire or waiting on and which locks the thread currently owns. The ThreadMXBean interface provides the {@link #findMonitorDeadlockedThreads} and {@link #findDeadlockedThreads} methods to find deadlocks in the running application. @see JMX Specification. @see Ways to Access MXBeans @author Mandy Chung @version 1.21, 03/23/10 @since 1.5
method,java/lang/management/ThreadMXBean/getThreadCount/, Returns the current number of live threads including both daemon and non-daemon threads. @return the current number of live threads.
method,java/lang/management/ThreadMXBean/getPeakThreadCount/, Returns the peak live thread count since the Java virtual machine started or peak was reset. @return the peak live thread count.
method,java/lang/management/ThreadMXBean/getTotalStartedThreadCount/, Returns the total number of threads created and also started since the Java virtual machine started. @return the total number of threads started.
method,java/lang/management/ThreadMXBean/getDaemonThreadCount/, Returns the current number of live daemon threads. @return the current number of live daemon threads.
method,java/lang/management/ThreadMXBean/getAllThreadIds/, Returns all live thread IDs. Some threads included in the returned array may have been terminated when this method returns. @return an array of long, each is a thread ID. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(monitor).
method,java/lang/management/ThreadMXBean/getThreadInfo/long[], Returns the thread info for each thread whose ID is in the input array ids with no stack trace. This method is equivalent to calling: {@link #getThreadInfo(long[], int) getThreadInfo}(ids, 0); This method returns an array of the ThreadInfo objects. The stack trace, locked monitors, and locked synchronizers in each ThreadInfo object will be empty. If a thread of a given ID is not alive or does not exist, the corresponding element in the returned array will contain null. A thread is alive if it has been started and has not yet died. MBeanServer access: The mapped type of ThreadInfo is CompositeData with attributes as specified in the {@link ThreadInfo#from ThreadInfo.from} method. @param ids an array of thread IDs. @return an array of the {@link ThreadInfo} objects, each containing information about a thread whose ID is in the corresponding element of the input array of IDs with no stack trace, no locked monitor and no synchronizer info. @throws IllegalArgumentException if any element in the input array ids is &lt= 0. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(monitor).
method,java/lang/management/ThreadMXBean/getThreadInfo/long[];int, Returns the thread info for each thread whose ID is in the input array ids, with stack trace of a specified number of stack trace elements. The maxDepth parameter indicates the maximum number of {@link StackTraceElement} to be retrieved from the stack trace. If maxDepth == Integer.MAX_VALUE, the entire stack trace of the thread will be dumped. If maxDepth == 0, no stack trace of the thread will be dumped. This method does not obtain the locked monitors and locked synchronizers of the threads. When the Java virtual machine has no stack trace information about a thread or maxDepth == 0, the stack trace in the ThreadInfo object will be an empty array of StackTraceElement. This method returns an array of the ThreadInfo objects, each is the thread information about the thread with the same index as in the ids array. If a thread of the given ID is not alive or does not exist, null will be set in the corresponding element in the returned array. A thread is alive if it has been started and has not yet died. MBeanServer access: The mapped type of ThreadInfo is CompositeData with attributes as specified in the {@link ThreadInfo#from ThreadInfo.from} method. @param ids an array of thread IDs @param maxDepth the maximum number of entries in the stack trace to be dumped. Integer.MAX_VALUE could be used to request the entire stack to be dumped. @return an array of the {@link ThreadInfo} objects, each containing information about a thread whose ID is in the corresponding element of the input array of IDs with no locked monitor and synchronizer info. @throws IllegalArgumentException if maxDepth is negative. @throws IllegalArgumentException if any element in the input array ids is &lt= 0. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(monitor).
method,java/lang/management/ThreadMXBean/isThreadContentionMonitoringSupported/, Tests if the Java virtual machine supports thread contention monitoring. @return true if the Java virtual machine supports thread contention monitoring; false otherwise.
method,java/lang/management/ThreadMXBean/isThreadContentionMonitoringEnabled/, Tests if thread contention monitoring is enabled. @return true if thread contention monitoring is enabled; false otherwise. @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support thread contention monitoring. @see #isThreadContentionMonitoringSupported
method,java/lang/management/ThreadMXBean/setThreadContentionMonitoringEnabled/boolean, Enables or disables thread contention monitoring. Thread contention monitoring is disabled by default. @param enable true to enable; false to disable. @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support thread contention monitoring. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(control). @see #isThreadContentionMonitoringSupported
method,java/lang/management/ThreadMXBean/isThreadCpuTimeSupported/, Tests if the Java virtual machine implementation supports CPU time measurement for any thread. A Java virtual machine implementation that supports CPU time measurement for any thread will also support CPU time measurement for the current thread. @return true if the Java virtual machine supports CPU time measurement for any thread; false otherwise.
method,java/lang/management/ThreadMXBean/isCurrentThreadCpuTimeSupported/, Tests if the Java virtual machine supports CPU time measurement for the current thread. This method returns true if {@link #isThreadCpuTimeSupported} returns true. @return true if the Java virtual machine supports CPU time measurement for current thread; false otherwise.
method,java/lang/management/ThreadMXBean/isThreadCpuTimeEnabled/, Tests if thread CPU time measurement is enabled. @return true if thread CPU time measurement is enabled; false otherwise. @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support CPU time measurement for other threads nor for the current thread. @see #isThreadCpuTimeSupported @see #isCurrentThreadCpuTimeSupported
method,java/lang/management/ThreadMXBean/setThreadCpuTimeEnabled/boolean, Enables or disables thread CPU time measurement. The default is platform dependent. @param enable true to enable; false to disable. @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support CPU time measurement for any threads nor for the current thread. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(control). @see #isThreadCpuTimeSupported @see #isCurrentThreadCpuTimeSupported
method,java/lang/management/ThreadMXBean/resetPeakThreadCount/, Resets the peak thread count to the current number of live threads. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(control). @see #getPeakThreadCount @see #getThreadCount
method,java/lang/management/ThreadMXBean/findDeadlockedThreads/, Finds cycles of threads that are in deadlock waiting to acquire object monitors or ownable synchronizers. Threads are deadlocked in a cycle waiting for a lock of these two types if each thread owns one lock while trying to acquire another lock already held by another thread in the cycle. This method is designed for troubleshooting use, but not for synchronization control. It might be an expensive operation. @return an array of IDs of the threads that are deadlocked waiting for object monitors or ownable synchronizers, if any; null otherwise. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(monitor). @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support monitoriing of ownable synchronizer usage. @see #isSynchronizerUsageSupported @see #findMonitorDeadlockedThreads @since 1.6 
method,java/lang/management/ThreadMXBean/isObjectMonitorUsageSupported/, Tests if the Java virtual machine supports monitoring of object monitor usage. @return true if the Java virtual machine supports monitoring of object monitor usage; false otherwise. @see #dumpAllThreads @since 1.6
method,java/lang/management/ThreadMXBean/isSynchronizerUsageSupported/, Tests if the Java virtual machine supports monitoring of ownable synchronizer usage. @return true if the Java virtual machine supports monitoring of ownable synchronizer usage; false otherwise. @see #dumpAllThreads @since 1.6
method,java/lang/management/ThreadMXBean/dumpAllThreads/boolean;boolean, Returns the thread info for all live threads with stack trace and synchronization information. Some threads included in the returned array may have been terminated when this method returns. This method returns an array of {@link ThreadInfo} objects as specified in the {@link #getThreadInfo(long[], boolean, boolean)} method. @param lockedMonitors if true, dump all locked monitors. @param lockedSynchronizers if true, dump all locked ownable synchronizers. @return an array of {@link ThreadInfo} for all live threads. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(monitor). @throws java.lang.UnsupportedOperationException if lockedMonitors is true but the Java virtual machine does not support monitoring of {@linkplain #isObjectMonitorUsageSupported object monitor usage}; or if lockedSynchronizers is true but the Java virtual machine does not support monitoring of {@linkplain #isSynchronizerUsageSupported ownable synchronizer usage}. @see #isObjectMonitorUsageSupported @see #isSynchronizerUsageSupported @since 1.6
class,java/lang/management/ThreadInfo, Thread information. ThreadInfo contains the information about a thread including: General thread information Thread ID. Name of the thread. Execution information Thread state. The object upon which the thread is blocked due to: waiting to enter a synchronization block/method, or waiting to be notified in a {@link Object#wait Object.wait} method, or parking due to a {@link java.util.concurrent.locks.LockSupport#park LockSupport.park} call. The ID of the thread that owns the object that the thread is blocked. Stack trace of the thread. List of object monitors locked by the thread. List of ownable synchronizers locked by the thread. Synchronization Statistics The number of times that the thread has blocked for synchronization or waited for notification. The accumulated elapsed time that the thread has blocked for synchronization or waited for notification since {@link ThreadMXBean#setThreadContentionMonitoringEnabled thread contention monitoring} was enabled. Some Java virtual machine implementation may not support this. The {@link ThreadMXBean#isThreadContentionMonitoringSupported()} method can be used to determine if a Java virtual machine supports this. This thread information class is designed for use in monitoring of the system, not for synchronization control. MXBean Mapping ThreadInfo is mapped to a {@link CompositeData CompositeData} with attributes as specified in the {@link #from from} method. @see ThreadMXBean#getThreadInfo @see ThreadMXBean#dumpAllThreads @author Mandy Chung @version 1.26, 03/23/10 @since 1.5
method,java/lang/management/ThreadInfo/getThreadId/, Returns the ID of the thread associated with this ThreadInfo. @return the ID of the associated thread.
method,java/lang/management/ThreadInfo/getThreadName/, Returns the name of the thread associated with this ThreadInfo. @return the name of the associated thread.
method,java/lang/management/ThreadInfo/getThreadState/, Returns the state of the thread associated with this ThreadInfo. @return Thread.State of the associated thread.
method,java/lang/management/ThreadInfo/getBlockedTime/, Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled. I.e. the total accumulated time the thread has been in the {@link java.lang.Thread.State#BLOCKED BLOCKED} state since thread contention monitoring was last enabled. This method returns -1 if thread contention monitoring is disabled. The Java virtual machine may measure the time with a high resolution timer. This statistic is reset when the thread contention monitoring is reenabled. @return the approximate accumulated elapsed time in milliseconds that a thread entered the BLOCKED state; -1 if thread contention monitoring is disabled. @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support this operation. @see ThreadMXBean#isThreadContentionMonitoringSupported @see ThreadMXBean#setThreadContentionMonitoringEnabled
method,java/lang/management/ThreadInfo/getBlockedCount/, Returns the total number of times that the thread associated with this ThreadInfo blocked to enter or reenter a monitor. I.e. the number of times a thread has been in the {@link java.lang.Thread.State#BLOCKED BLOCKED} state. @return the total number of times that the thread entered the BLOCKED state.
method,java/lang/management/ThreadInfo/getWaitedTime/, Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has waited for notification since thread contention monitoring is enabled. I.e. the total accumulated time the thread has been in the {@link java.lang.Thread.State#WAITING WAITING} or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state since thread contention monitoring is enabled. This method returns -1 if thread contention monitoring is disabled. The Java virtual machine may measure the time with a high resolution timer. This statistic is reset when the thread contention monitoring is reenabled. @return the approximate accumulated elapsed time in milliseconds that a thread has been in the WAITING or TIMED_WAITING state; -1 if thread contention monitoring is disabled. @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support this operation. @see ThreadMXBean#isThreadContentionMonitoringSupported @see ThreadMXBean#setThreadContentionMonitoringEnabled
method,java/lang/management/ThreadInfo/getWaitedCount/, Returns the total number of times that the thread associated with this ThreadInfo waited for notification. I.e. the number of times that a thread has been in the {@link java.lang.Thread.State#WAITING WAITING} or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state. @return the total number of times that the thread was in the WAITING or TIMED_WAITING state.
method,java/lang/management/ThreadInfo/getLockInfo/, Returns the LockInfo of an object for which the thread associated with this ThreadInfo is blocked waiting. A thread can be blocked waiting for one of the following: an object monitor to be acquired for entering or reentering a synchronization block/method. The thread is in the {@link java.lang.Thread.State#BLOCKED BLOCKED} state waiting to enter the synchronized statement or method. an object monitor to be notified by another thread. The thread is in the {@link java.lang.Thread.State#WAITING WAITING} or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state due to a call to the {@link Object#wait Object.wait} method. a synchronization object responsible for the thread parking. The thread is in the {@link java.lang.Thread.State#WAITING WAITING} or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state due to a call to the {@link java.util.concurrent.locks.LockSupport#park(Object) LockSupport.park} method. The synchronization object is the object returned from {@link java.util.concurrent.locks.LockSupport#getBlocker LockSupport.getBlocker} method. Typically it is an ownable synchronizer or a {@link java.util.concurrent.locks.Condition Condition}. This method returns null if the thread is not in any of the above conditions. @return LockInfo of an object for which the thread is blocked waiting if any; null otherwise. @since 1.6
method,java/lang/management/ThreadInfo/getLockName/, Returns the {@link LockInfo#toString string representation} of an object for which the thread associated with this ThreadInfo is blocked waiting. This method is equivalent to calling: getLockInfo().toString() This method will return null if this thread is not blocked waiting for any object or if the object is not owned by any thread. @return the string representation of the object on which the thread is blocked if any; null otherwise. @see #getLockInfo
method,java/lang/management/ThreadInfo/getLockOwnerId/, Returns the ID of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting. This method will return -1 if this thread is not blocked waiting for any object or if the object is not owned by any thread. @return the thread ID of the owner thread of the object this thread is blocked on; -1 if this thread is not blocked or if the object lis not owned by any thread. @see #getLockInfo
method,java/lang/management/ThreadInfo/getLockOwnerName/, Returns the name of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting. This method will return null if this thread is not blocked waiting for any object or if the object is not owned by any thread. @return the name of the thread that owns the object this thread is blocked on; null if this thread is not blocked or if the object is not owned by any thread. @see #getLockInfo
method,java/lang/management/ThreadInfo/getStackTrace/, Returns the stack trace of the thread associated with this ThreadInfo. If no stack trace was requested for this thread info, this method will return a zero-length array. If the returned array is of non-zero length then the first element of the array represents the top of the stack, which is the most recent method invocation in the sequence. The last element of the array represents the bottom of the stack, which is the least recent method invocation in the sequence. Some Java virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning the thread associated with this ThreadInfo is permitted to return a zero-length array from this method. @return an array of StackTraceElement objects of the thread.
method,java/lang/management/ThreadInfo/isSuspended/, Tests if the thread associated with this ThreadInfo is suspended. This method returns true if {@link Thread#suspend} has been called. @return true if the thread is suspended; false otherwise.
method,java/lang/management/ThreadInfo/isInNative/, Tests if the thread associated with this ThreadInfo is executing native code via the Java Native Interface (JNI). The JNI native code does not include the virtual machine support code or the compiled native code generated by the virtual machine. @return true if the thread is executing native code; false otherwise.
method,java/lang/management/ThreadInfo/toString/, Returns a string representation of this thread info. The format of this string depends on the implementation. The returned string will typically include the {@linkplain #getThreadName thread name}, the {@linkplain #getThreadId thread ID}, its {@linkplain #getThreadState state}, and a {@linkplain #getStackTrace stack trace} if any. @return a string representation of this thread info.
method,java/lang/management/ThreadInfo/getLockedMonitors/, Returns an array of {@link MonitorInfo} objects, each of which represents an object monitor currently locked by the thread associated with this ThreadInfo. If no locked monitor was requested for this thread info or no monitor is locked by the thread, this method will return a zero-length array. @return an array of MonitorInfo objects representing the object monitors locked by the thread. @since 1.6
method,java/lang/management/ThreadInfo/getLockedSynchronizers/, Returns an array of {@link LockInfo} objects, each of which represents an ownable synchronizer currently locked by the thread associated with this ThreadInfo. If no locked synchronizer was requested for this thread info or no synchronizer is locked by the thread, this method will return a zero-length array. @return an array of LockInfo objects representing the ownable synchronizers locked by the thread. @since 1.6
interface,java/lang/management/RuntimeMXBean, The management interface for the runtime system of the Java virtual machine. A Java virtual machine has a single instance of the implementation class of this interface. This instance implementing this interface is an MXBean that can be obtained by calling the {@link ManagementFactory#getRuntimeMXBean} method or from the {@link ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The ObjectName for uniquely identifying the MXBean for the runtime system within an MBeanServer is: {@link ManagementFactory#RUNTIME_MXBEAN_NAME java.lang:type=Runtime} This interface defines several convenient methods for accessing system properties about the Java virtual machine. @see JMX Specification. @see Ways to Access MXBeans @author Mandy Chung @version 1.15, 03/23/10 @since 1.5
method,java/lang/management/RuntimeMXBean/getBootClassPath/, Returns the boot class path that is used by the bootstrap class loader to search for class files. Multiple paths in the boot class path are separated by the path separator character of the platform on which the Java virtual machine is running. A Java virtual machine implementation may not support the boot class path mechanism for the bootstrap class loader to search for class files. The {@link #isBootClassPathSupported} method can be used to determine if the Java virtual machine supports this method. @return the boot class path. @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support this operation. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(monitor).
method,java/lang/management/RuntimeMXBean/getInputArguments/, Returns the input arguments passed to the Java virtual machine which does not include the arguments to the main method. This method returns an empty list if there is no input argument to the Java virtual machine. Some Java virtual machine implementations may take input arguments from multiple different sources: for examples, arguments passed from the application that launches the Java virtual machine such as the 'java' command, environment variables, configuration files, etc. Typically, not all command-line options to the 'java' command are passed to the Java virtual machine. Thus, the returned input arguments may not include all command-line options. MBeanServer access: The mapped type of List is String[]. @return a list of String objects; each element is an argument passed to the Java virtual machine. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(monitor).
method,java/lang/management/RuntimeMXBean/getSystemProperties/, Returns a map of names and values of all system properties. This method calls {@link System#getProperties} to get all system properties. Properties whose name or value is not a String are omitted. MBeanServer access: The mapped type of Map is {@link javax.management.openmbean.TabularData TabularData} with two items in each row as follows: Item Name Item Type key String value String @return a map of names and values of all system properties. @throws java.lang.SecurityException if a security manager exists and its checkPropertiesAccess method doesn't allow access to the system properties.
interface,java/lang/management/OperatingSystemMXBean, The management interface for the operating system on which the Java virtual machine is running. A Java virtual machine has a single instance of the implementation class of this interface. This instance implementing this interface is an MXBean that can be obtained by calling the {@link ManagementFactory#getOperatingSystemMXBean} method or from the {@link ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The ObjectName for uniquely identifying the MXBean for the operating system within an MBeanServer is: {@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME java.lang:type=OperatingSystem} This interface defines several convenient methods for accessing system properties about the operating system on which the Java virtual machine is running. @see JMX Specification. @see Ways to Access MXBeans @author Mandy Chung @version 1.12, 03/23/10 @since 1.5
method,java/lang/management/OperatingSystemMXBean/getSystemLoadAverage/, Returns the system load average for the last minute. The system load average is the sum of the number of runnable entities queued to the {@linkplain #getAvailableProcessors available processors} and the number of runnable entities running on the available processors averaged over a period of time. The way in which the load average is calculated is operating system specific but is typically a damped time-dependent average. If the load average is not available, a negative value is returned. This method is designed to provide a hint about the system load and may be queried frequently. The load average may be unavailable on some platform where it is expensive to implement this method. @return the system load average; or a negative value if not available. @since 1.6
class,java/lang/management/MonitorInfo, Information about an object monitor lock. An object monitor is locked when entering a synchronization block or method on that object. MXBean Mapping MonitorInfo is mapped to a {@link CompositeData CompositeData} with attributes as specified in the {@link #from from} method. @author Mandy Chung @version 1.6, 03/23/10 @since 1.6
method,java/lang/management/MonitorInfo/getLockedStackDepth/, Returns the depth in the stack trace where the object monitor was locked. The depth is the index to the StackTraceElement array returned in the {@link ThreadInfo#getStackTrace} method. @return the depth in the stack trace where the object monitor was locked, or a negative number if not available.
method,java/lang/management/MonitorInfo/getLockedStackFrame/, Returns the stack frame that locked the object monitor. @return StackTraceElement that locked the object monitor, or null if not available.
method,java/lang/management/MonitorInfo/MonitorInfo/String;int;int;StackTraceElement, Construct a MonitorInfo object. @param className the fully qualified name of the class of the lock object. @param identityHashCode the {@link System#identityHashCode identity hash code} of the lock object. @param stackDepth the depth in the stack trace where the object monitor was locked. @param stackFrame the stack frame that locked the object monitor. @throws IllegalArgumentException if stackDepth &ge; 0 but stackFrame is null, or stackDepth &lt; 0 but stackFrame is not null.
class,java/lang/management/MemoryUsage, A MemoryUsage object represents a snapshot of memory usage. Instances of the MemoryUsage class are usually constructed by methods that are used to obtain memory usage information about individual memory pool of the Java virtual machine or the heap or non-heap memory of the Java virtual machine as a whole. A MemoryUsage object contains four values: init represents the initial amount of memory (in bytes) that the Java virtual machine requests from the operating system for memory management during startup. The Java virtual machine may request additional memory from the operating system and may also release memory to the system over time. The value of init may be undefined. used represents the amount of memory currently used (in bytes). committed represents the amount of memory (in bytes) that is guaranteed to be available for use by the Java virtual machine. The amount of committed memory may change over time (increase or decrease). The Java virtual machine may release memory to the system and committed could be less than init. committed will always be greater than or equal to used. max represents the maximum amount of memory (in bytes) that can be used for memory management. Its value may be undefined. The maximum amount of memory may change over time if defined. The amount of used and committed memory will always be less than or equal to max if max is defined. A memory allocation may fail if it attempts to increase the used memory such that used &gt committed even if used &lt= max would still be true (for example, when the system is low on virtual memory). Below is a picture showing an example of a memory pool: +----------------------------------------------+ +//////////////// | + +//////////////// | + +----------------------------------------------+ |--------| init |---------------| used |---------------------------| committed |----------------------------------------------| max MXBean Mapping MemoryUsage is mapped to a {@link CompositeData CompositeData} with attributes as specified in the {@link #from from} method. @author Mandy Chung @version 1.18, 03/23/10 @since 1.5
method,java/lang/management/MemoryUsage/getMax/, Returns the maximum amount of memory in bytes that can be used for memory management. This method returns -1 if the maximum memory size is undefined. This amount of memory is not guaranteed to be available for memory management if it is greater than the amount of committed memory. The Java virtual machine may fail to allocate memory even if the amount of used memory does not exceed this maximum size. @return the maximum amount of memory in bytes; -1 if undefined.
field,java/lang/management/MemoryType/NON_HEAP, Non-heap memory type. The Java virtual machine manages memory other than the heap (referred as non-heap memory). The non-heap memory includes the method area and memory required for the internal processing or optimization for the Java virtual machine. It stores per-class structures such as a runtime constant pool, field and method data, and the code for methods and constructors. 
method,java/lang/management/MemoryPoolMXBean/resetPeakUsage/, Resets the peak memory usage statistic of this memory pool to the current memory usage. @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(control).
method,java/lang/management/MemoryPoolMXBean/isValid/, Tests if this memory pool is valid in the Java virtual machine. A memory pool becomes invalid once the Java virtual machine removes it from the memory system. @return true if the memory pool is valid in the running Java virtual machine; false otherwise.
method,java/lang/management/MemoryPoolMXBean/isCollectionUsageThresholdExceeded/, Tests if the memory usage of this memory pool after the most recent collection on which the Java virtual machine has expended effort has reached or exceeded its collection usage threshold. This method does not request the Java virtual machine to perform any garbage collection other than its normal automatic memory management. @return true if the memory usage of this memory pool reaches or exceeds the collection usage threshold value in the most recent collection; false otherwise. @throws UnsupportedOperationException if this memory pool does not support a usage threshold.
method,java/lang/management/MemoryPoolMXBean/getCollectionUsage/, Returns the memory usage after the Java virtual machine most recently expended effort in recycling unused objects in this memory pool. This method does not request the Java virtual machine to perform any garbage collection other than its normal automatic memory management. This method returns null if the Java virtual machine does not support this method. MBeanServer access: The mapped type of MemoryUsage is CompositeData with attributes as specified in {@link MemoryUsage#from MemoryUsage}. @return a {@link MemoryUsage} representing the memory usage of this memory pool after the Java virtual machine most recently expended effort in recycling unused objects; null if this method is not supported.
class,java/lang/management/MemoryNotificationInfo, The information about a memory notification. A memory notification is emitted by {@link MemoryMXBean} when the Java virtual machine detects that the memory usage of a memory pool is exceeding a threshold value. The notification emitted will contain the memory notification information about the detected condition: The name of the memory pool. The memory usage of the memory pool when the notification was constructed. The number of times that the memory usage has crossed a threshold when the notification was constructed. For usage threshold notifications, this count will be the {@link MemoryPoolMXBean#getUsageThresholdCount usage threshold count}. For collection threshold notifications, this count will be the {@link MemoryPoolMXBean#getCollectionUsageThresholdCount collection usage threshold count}. A {@link CompositeData CompositeData} representing the MemoryNotificationInfo object is stored in the {@link javax.management.Notification#setUserData user data} of a {@link javax.management.Notification notification}. The {@link #from from} method is provided to convert from a CompositeData to a MemoryNotificationInfo object. For example: Notification notif; // receive the notification emitted by MemoryMXBean and set to notif ... String notifType = notif.getType(); if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED) || notifType.equals(MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED)) { // retrieve the memory notification information CompositeData cd = (CompositeData) notif.getUserData(); MemoryNotificationInfo info = MemoryNotificationInfo.from(cd); .... } The types of notifications emitted by MemoryMXBean are: A {@link #MEMORY_THRESHOLD_EXCEEDED usage threshold exceeded notification}. This notification will be emitted when the memory usage of a memory pool is increased and has reached or exceeded its usage threshold value. Subsequent crossing of the usage threshold value does not cause further notification until the memory usage has returned to become less than the usage threshold value. A {@link #MEMORY_COLLECTION_THRESHOLD_EXCEEDED collection usage threshold exceeded notification}. This notification will be emitted when the memory usage of a memory pool is greater than or equal to its collection usage threshold after the Java virtual machine has expended effort in recycling unused objects in that memory pool. @author Mandy Chung @version 1.9, 03/23/10 @since 1.5
field,java/lang/management/MemoryNotificationInfo/MEMORY_COLLECTION_THRESHOLD_EXCEEDED, Notification type denoting that the memory usage of a memory pool is greater than or equal to its collection usage threshold after the Java virtual machine has expended effort in recycling unused objects in that memory pool. This notification is emitted by {@link MemoryMXBean}. The value of this notification type is java.management.memory.collection.threshold.exceeded.
interface,java/lang/management/MemoryManagerMXBean, The management interface for a memory manager. A memory manager manages one or more memory pools of the Java virtual machine. A Java virtual machine has one or more memory managers. An instance implementing this interface is an MXBean that can be obtained by calling the {@link ManagementFactory#getMemoryManagerMXBeans} method or from the {@link ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The ObjectName for uniquely identifying the MXBean for a memory manager within an MBeanServer is: {@link ManagementFactory#MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE java.lang:type=MemoryManager},name=manager's name @see MemoryMXBean @see JMX Specification. @see Ways to Access MXBeans @author Mandy Chung @version 1.12, 03/23/10 @since 1.5
method,java/lang/management/MemoryManagerMXBean/isValid/, Tests if this memory manager is valid in the Java virtual machine. A memory manager becomes invalid once the Java virtual machine removes it from the memory system. @return true if the memory manager is valid in the Java virtual machine; false otherwise.
interface,java/lang/management/MemoryMXBean, The management interface for the memory system of the Java virtual machine. A Java virtual machine has a single instance of the implementation class of this interface. This instance implementing this interface is an MXBean that can be obtained by calling the {@link ManagementFactory#getMemoryMXBean} method or from the {@link ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The ObjectName for uniquely identifying the MXBean for the memory system within an MBeanServer is: {@link ManagementFactory#MEMORY_MXBEAN_NAME java.lang:type=Memory} Memory The memory system of the Java virtual machine manages the following kinds of memory: 1. Heap The Java virtual machine has a heap that is the runtime data area from which memory for all class instances and arrays are allocated. It is created at the Java virtual machine start-up. Heap memory for objects is reclaimed by an automatic memory management system which is known as a garbage collector. The heap may be of a fixed size or may be expanded and shrunk. The memory for the heap does not need to be contiguous. 2. Non-Heap Memory The Java virtual machine manages memory other than the heap (referred as non-heap memory). The Java virtual machine has a method area that is shared among all threads. The method area belongs to non-heap memory. It stores per-class structures such as a runtime constant pool, field and method data, and the code for methods and constructors. It is created at the Java virtual machine start-up. The method area is logically part of the heap but a Java virtual machine implementation may choose not to either garbage collect or compact it. Similar to the heap, the method area may be of a fixed size or may be expanded and shrunk. The memory for the method area does not need to be contiguous. In addition to the method area, a Java virtual machine implementation may require memory for internal processing or optimization which also belongs to non-heap memory. For example, the JIT compiler requires memory for storing the native machine code translated from the Java virtual machine code for high performance. Memory Pools and Memory Managers {@link MemoryPoolMXBean Memory pools} and {@link MemoryManagerMXBean memory managers} are the abstract entities that monitor and manage the memory system of the Java virtual machine. A memory pool represents a memory area that the Java virtual machine manages. The Java virtual machine has at least one memory pool and it may create or remove memory pools during execution. A memory pool can belong to either the heap or the non-heap memory. A memory manager is responsible for managing one or more memory pools. The garbage collector is one type of memory manager responsible for reclaiming memory occupied by unreachable objects. A Java virtual machine may have one or more memory managers. It may add or remove memory managers during execution. A memory pool can be managed by more than one memory manager. Memory Usage Monitoring Memory usage is a very important monitoring attribute for the memory system. The memory usage, for example, could indicate: the memory usage of an application, the workload being imposed on the automatic memory management system, potential memory leakage. The memory usage can be monitored in three ways: Polling Usage Threshold Notification Collection Usage Threshold Notification Details are specified in the {@link MemoryPoolMXBean} interface. The memory usage monitoring mechanism is intended for load-balancing or workload distribution use. For example, an application would stop receiving any new workload when its memory usage exceeds a certain threshold. It is not intended for an application to detect and recover from a low memory condition. Notifications This MemoryMXBean is a {@link javax.management.NotificationEmitter NotificationEmitter} that emits two types of memory {@link javax.management.Notification notifications} if any one of the memory pools supports a usage threshold or a collection usage threshold which can be determined by calling the {@link MemoryPoolMXBean#isUsageThresholdSupported} and {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} methods. {@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED usage threshold exceeded notification} - for notifying that the memory usage of a memory pool is increased and has reached or exceeded its usage threshold value. {@link MemoryNotificationInfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED collection usage threshold exceeded notification} - for notifying that the memory usage of a memory pool is greater than or equal to its collection usage threshold after the Java virtual machine has expended effort in recycling unused objects in that memory pool. The notification emitted is a {@link javax.management.Notification} instance whose {@link javax.management.Notification#setUserData user data} is set to a {@link CompositeData CompositeData} that represents a {@link MemoryNotificationInfo} object containing information about the memory pool when the notification was constructed. The CompositeData contains the attributes as described in {@link MemoryNotificationInfo#from MemoryNotificationInfo}. NotificationEmitter The MemoryMXBean object returned by {@link ManagementFactory#getMemoryMXBean} implements the {@link javax.management.NotificationEmitter NotificationEmitter} interface that allows a listener to be registered within the MemoryMXBean as a notification listener. Below is an example code that registers a MyListener to handle notification emitted by the MemoryMXBean. class MyListener implements javax.management.NotificationListener { public void handleNotification(Notification notif, Object handback) { // handle notification .... } } MemoryMXBean mbean = ManagementFactory.getMemoryMXBean(); NotificationEmitter emitter = (NotificationEmitter) mbean; MyListener listener = new MyListener(); emitter.addNotificationListener(listener, null, null); @see JMX Specification. @see Ways to Access MXBeans @author Mandy Chung @version 1.17, 03/23/10 @since 1.5
method,java/lang/management/MemoryMXBean/getHeapMemoryUsage/, Returns the current memory usage of the heap that is used for object allocation. The heap consists of one or more memory pools. The used and committed size of the returned memory usage is the sum of those values of all heap memory pools whereas the init and max size of the returned memory usage represents the setting of the heap memory which may not be the sum of those of all heap memory pools. The amount of used memory in the returned memory usage is the amount of memory occupied by both live objects and garbage objects that have not been collected, if any. MBeanServer access: The mapped type of MemoryUsage is CompositeData with attributes as specified in {@link MemoryUsage#from MemoryUsage}. @return a {@link MemoryUsage} object representing the heap memory usage.
method,java/lang/management/MemoryMXBean/getNonHeapMemoryUsage/, Returns the current memory usage of non-heap memory that is used by the Java virtual machine. The non-heap memory consists of one or more memory pools. The used and committed size of the returned memory usage is the sum of those values of all non-heap memory pools whereas the init and max size of the returned memory usage represents the setting of the non-heap memory which may not be the sum of those of all non-heap memory pools. MBeanServer access: The mapped type of MemoryUsage is CompositeData with attributes as specified in {@link MemoryUsage#from MemoryUsage}. @return a {@link MemoryUsage} object representing the non-heap memory usage.
method,java/lang/management/MemoryMXBean/setVerbose/boolean, Enables or disables verbose output for the memory system. The verbose output information and the output stream to which the verbose information is emitted are implementation dependent. Typically, a Java virtual machine implementation prints a message whenever it frees memory at garbage collection. Each invocation of this method enables or disables verbose output globally. @param value true to enable verbose output; false to disable. @exception java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(control).
method,java/lang/management/MemoryMXBean/gc/, Runs the garbage collector. The call gc() is effectively equivalent to the call: System.gc() @see java.lang.System#gc()
class,java/lang/management/ManagementFactory, The ManagementFactory class is a factory class for getting managed beans for the Java platform. This class consists of static methods each of which returns one or more platform MXBean(s) representing the management interface of a component of the Java virtual machine. An application can access a platform MXBean in the following ways: Direct access to an MXBean interface Get the MXBean instance through the static factory method and access the MXBean locally of the running virtual machine. Construct an MXBean proxy instance that forwards the method calls to a given {@link MBeanServer MBeanServer} by calling {@link #newPlatformMXBeanProxy newPlatfromMXBeanProxy}. A proxy is typically constructed to remotely access an MXBean of another running virtual machine. Indirect access to an MXBean interface via MBeanServer Go through the {@link #getPlatformMBeanServer platform MBeanServer} to access MXBeans locally or a specific MBeanServerConnection to access MXBeans remotely. The attributes and operations of an MXBean use only JMX open types which include basic data types, {@link javax.management.openmbean.CompositeData CompositeData}, and {@link javax.management.openmbean.TabularData TabularData} defined in {@link javax.management.openmbean.OpenType OpenType}. The mapping is specified below. Platform MXBeans A platform MXBean is a managed bean that conforms to the JMX Instrumentation Specification and only uses a set of basic data types described below. See the specification of MXBeans for details. A JMX management application and the platform MBeanServer can interoperate without requiring classes for MXBean specific data types. The data types being transmitted between the JMX connector server and the connector client are {@linkplain javax.management.openmbean.OpenType open types} and this allows interoperation across versions. The platform MXBean interfaces use only the following data types: Primitive types such as int, long, boolean, etc Wrapper classes for primitive types such as {@link java.lang.Integer Integer}, {@link java.lang.Long Long}, {@link java.lang.Boolean Boolean}, etc and {@link java.lang.String String} {@link java.lang.Enum Enum} classes Classes that define only getter methods and define a static from method with a {@link javax.management.openmbean.CompositeData CompositeData} argument to convert from an input CompositeData to an instance of that class {@link java.util.List List&lt;E&gt;} where E is a primitive type, a wrapper class, an enum class, or a class supporting conversion from a CompositeData to its class {@link java.util.Map Map&lt;K,V&gt;} where K and V are a primitive type, a wrapper class, an enum class, or a class supporting conversion from a CompositeData to its class When an attribute or operation of a platform MXBean is accessed via an MBeanServer, the data types are mapped as follows: A primitive type or a wrapper class is mapped to the same type. An {@link Enum} is mapped to String whose value is the name of the enum constant. A class that defines only getter methods and a static from method with a {@link javax.management.openmbean.CompositeData CompositeData} argument is mapped to {@link javax.management.openmbean.CompositeData CompositeData}. Map&lt;K,V&gt; is mapped to {@link javax.management.openmbean.TabularData TabularData} whose row type is a {@link javax.management.openmbean.CompositeType CompositeType} with two items whose names are key and value and the item types are the corresponding mapped type of K and V respectively and the key is the index. List&lt;E&gt; is mapped to an array with the mapped type of E as the element type. An array of element type E is mapped to an array of the same dimenions with the mapped type of E as the element type. The {@link javax.management.MBeanInfo MBeanInfo} for a platform MXBean describes the data types of the attributes and operations as primitive or open types mapped as specified above. For example, the {@link MemoryMXBean} interface has the following getter and setter methods: public MemoryUsage getHeapMemoryUsage(); public boolean isVerbose(); public void setVerbose(boolean value); These attributes in the MBeanInfo of the MemoryMXBean have the following names and types: Attribute Name Type HeapMemoryUsage {@link MemoryUsage#from CompositeData representing MemoryUsage} Verbose boolean MXBean Names Each platform MXBean for a Java virtual machine has a unique {@link javax.management.ObjectName ObjectName} for registration in the platform MBeanServer. A Java virtual machine has a single instance of the following management interfaces: Management Interface ObjectName {@link ClassLoadingMXBean} {@link #CLASS_LOADING_MXBEAN_NAME java.lang:type=ClassLoading} {@link MemoryMXBean} {@link #MEMORY_MXBEAN_NAME java.lang:type=Memory} {@link ThreadMXBean} {@link #THREAD_MXBEAN_NAME java.lang:type=Threading} {@link RuntimeMXBean} {@link #RUNTIME_MXBEAN_NAME java.lang:type=Runtime} {@link OperatingSystemMXBean} {@link #OPERATING_SYSTEM_MXBEAN_NAME java.lang:type=OperatingSystem} A Java virtual machine has zero or a single instance of the following management interfaces. Management Interface ObjectName {@link CompilationMXBean} {@link #COMPILATION_MXBEAN_NAME java.lang:type=Compilation} A Java virtual machine may have one or more instances of the following management interfaces. Management Interface ObjectName {@link GarbageCollectorMXBean} {@link #GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE java.lang:type=GarbageCollector},name=collector's name {@link MemoryManagerMXBean} {@link #MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE java.lang:type=MemoryManager},name=manager's name {@link MemoryPoolMXBean} {@link #MEMORY_POOL_MXBEAN_DOMAIN_TYPE java.lang:type=MemoryPool},name=pool's name @see JMX Specification. @see Ways to Access Management Metrics @see java.util.logging.LoggingMXBean @see javax.management.MXBean @author Mandy Chung @version 1.25, 03/23/10 @since 1.5
method,java/lang/management/ManagementFactory/getThreadMXBean/, Returns the managed bean for the thread system of the Java virtual machine. @return a {@link ThreadMXBean} object for the Java virtual machine.
method,java/lang/management/ManagementFactory/getMemoryPoolMXBeans/, Returns a list of {@link MemoryPoolMXBean} objects in the Java virtual machine. The Java virtual machine can have one or more memory pools. It may add or remove memory pools during execution. @return a list of MemoryPoolMXBean objects.
method,java/lang/management/ManagementFactory/getMemoryManagerMXBeans/, Returns a list of {@link MemoryManagerMXBean} objects in the Java virtual machine. The Java virtual machine can have one or more memory managers. It may add or remove memory managers during execution. @return a list of MemoryManagerMXBean objects.
method,java/lang/management/ManagementFactory/getGarbageCollectorMXBeans/, Returns a list of {@link GarbageCollectorMXBean} objects in the Java virtual machine. The Java virtual machine may have one or more GarbageCollectorMXBean objects. It may add or remove GarbageCollectorMXBean during execution. @return a list of GarbageCollectorMXBean objects.
field,java/lang/management/ManagementFactory/THREAD_MXBEAN_NAME, String representation of the ObjectName for the {@link ThreadMXBean}.
class,java/lang/management/LockInfo, Information about a lock. A lock can be a built-in object monitor, an ownable synchronizer, or the {@link Condition Condition} object associated with synchronizers. An ownable synchronizer is a synchronizer that may be exclusively owned by a thread and uses {@link AbstractOwnableSynchronizer AbstractOwnableSynchronizer} (or its subclass) to implement its synchronization property. {@link ReentrantLock ReentrantLock} and {@link ReentrantReadWriteLock ReentrantReadWriteLock} are two examples of ownable synchronizers provided by the platform. MXBean Mapping LockInfo is mapped to a {@link CompositeData CompositeData} as specified in the type mapping rules of {@linkplain javax.management.MXBean MXBeans}. @see java.util.concurrent.locks.AbstractOwnableSynchronizer @see java.util.concurrent.locks.Condition @author Mandy Chung @version 1.7, 03/23/10 @since 1.6
method,java/lang/management/LockInfo/getClassName/, Returns the fully qualified name of the class of the lock object. @return the fully qualified name of the class of the lock object.
method,java/lang/management/LockInfo/getIdentityHashCode/, Returns the identity hash code of the lock object returned from the {@link System#identityHashCode} method. @return the identity hash code of the lock object.
method,java/lang/management/LockInfo/toString/, Returns a string representation of a lock. The returned string representation consists of the name of the class of the lock object, the at-sign character `@', and the unsigned hexadecimal representation of the identity hash code of the object. This method returns a string equals to the value of: lock.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(lock)) where lock is the lock object. @return the string representation of a lock.
method,java/lang/management/LockInfo/LockInfo/String;int, Constructs a LockInfo object. @param className the fully qualified name of the class of the lock object. @param identityHashCode the {@link System#identityHashCode identity hash code} of the lock object.
interface,java/lang/management/GarbageCollectorMXBean, The management interface for the garbage collection of the Java virtual machine. Garbage collection is the process that the Java virtual machine uses to find and reclaim unreachable objects to free up memory space. A garbage collector is one type of {@link MemoryManagerMXBean memory manager}. A Java virtual machine may have one or more instances of the implementation class of this interface. An instance implementing this interface is an MXBean that can be obtained by calling the {@link ManagementFactory#getGarbageCollectorMXBeans} method or from the {@link ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The ObjectName for uniquely identifying the MXBean for a garbage collector within an MBeanServer is: {@link ManagementFactory#GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE java.lang:type=GarbageCollector},name=collector's name A platform usually includes additional platform-dependent information specific to a garbage collection algorithm for monitoring. @see MemoryMXBean @see JMX Specification. @see Ways to Access MXBeans @author Mandy Chung @version 1.11, 03/23/10 @since 1.5
method,java/lang/management/GarbageCollectorMXBean/getCollectionTime/, Returns the approximate accumulated collection elapsed time in milliseconds. This method returns -1 if the collection elapsed time is undefined for this collector. The Java virtual machine implementation may use a high resolution timer to measure the elapsed time. This method may return the same value even if the collection count has been incremented if the collection elapsed time is very short. @return the approximate accumulated collection elapsed time in milliseconds.
interface,java/lang/management/CompilationMXBean, The management interface for the compilation system of the Java virtual machine. A Java virtual machine has a single instance of the implementation class of this interface. This instance implementing this interface is an MXBean that can be obtained by calling the {@link ManagementFactory#getCompilationMXBean} method or from the {@link ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The ObjectName for uniquely identifying the MXBean for the compilation system within an MBeanServer is: {@link ManagementFactory#COMPILATION_MXBEAN_NAME java.lang:type=Compilation} @see JMX Specification. @see Ways to Access MXBeans @author Mandy Chung @version 1.12, 03/23/10 @since 1.5
method,java/lang/management/CompilationMXBean/getTotalCompilationTime/, Returns the approximate accumlated elapsed time (in milliseconds) spent in compilation. If multiple threads are used for compilation, this value is summation of the approximate time that each thread spent in compilation. This method is optionally supported by the platform. A Java virtual machine implementation may not support the compilation time monitoring. The {@link #isCompilationTimeMonitoringSupported} method can be used to determine if the Java virtual machine supports this operation. This value does not indicate the level of performance of the Java virtual machine and is not intended for performance comparisons of different virtual machine implementations. The implementations may have different definitions and different measurements of the compilation time. @return Compilation time in milliseconds @throws java.lang.UnsupportedOperationException if the Java virtual machine does not support this operation.
interface,java/lang/management/ClassLoadingMXBean, The management interface for the class loading system of the Java virtual machine. A Java virtual machine has a single instance of the implementation class of this interface. This instance implementing this interface is an MXBean that can be obtained by calling the {@link ManagementFactory#getClassLoadingMXBean} method or from the {@link ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The ObjectName for uniquely identifying the MXBean for the class loading system within an MBeanServer is: {@link ManagementFactory#CLASS_LOADING_MXBEAN_NAME java.lang:type=ClassLoading} @see JMX Specification. @see Ways to Access MXBeans @author Mandy Chung @version 1.13, 03/23/10 @since 1.5 
method,java/lang/management/ClassLoadingMXBean/setVerbose/boolean, Enables or disables the verbose output for the class loading system. The verbose output information and the output stream to which the verbose information is emitted are implementation dependent. Typically, a Java virtual machine implementation prints a message each time a class file is loaded. This method can be called by multiple threads concurrently. Each invocation of this method enables or disables the verbose output globally. @param value true to enable the verbose output; false to disable. @exception java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(control).
method,java/text/StringCharacterIterator/setText/String, Reset this iterator to point to a new string. This package-visible method is used by other java.text classes that want to avoid allocating new StringCharacterIterator objects every time their setText method is called. @param text The String to be iterated over @since 1.2
method,java/text/SimpleDateFormat/format/Date;StringBuffer;FieldPosition, Formats the given Date into a date/time string and appends the result to the given StringBuffer. @param date the date-time value to be formatted into a date-time string. @param toAppendTo where the new date-time text is to be appended. @param pos the formatting position. On input: an alignment field, if desired. On output: the offsets of the alignment field. @return the formatted date-time string. @exception NullPointerException if the given date is null
method,java/text/SimpleDateFormat/parse/String;ParsePosition, Parses text from a string to produce a Date. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. @param text A String, part of which should be parsed. @param pos A ParsePosition object with index and error index information as described above. @return A Date parsed from the string. In case of error, returns null. @exception NullPointerException if text or pos is null.
method,java/text/SimpleDateFormat/SimpleDateFormat/, Constructs a SimpleDateFormat using the default pattern and date format symbols for the default locale. Note: This constructor may not support all locales. For full coverage, use the factory methods in the {@link DateFormat} class.
method,java/text/SimpleDateFormat/SimpleDateFormat/String, Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the default locale. Note: This constructor may not support all locales. For full coverage, use the factory methods in the {@link DateFormat} class. @param pattern the pattern describing the date and time format @exception NullPointerException if the given pattern is null @exception IllegalArgumentException if the given pattern is invalid
method,java/text/SimpleDateFormat/SimpleDateFormat/String;Locale, Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the given locale. Note: This constructor may not support all locales. For full coverage, use the factory methods in the {@link DateFormat} class. @param pattern the pattern describing the date and time format @param locale the locale whose date format symbols should be used @exception NullPointerException if the given pattern or locale is null @exception IllegalArgumentException if the given pattern is invalid
method,java/text/RuleBasedCollator/compare/String;String, Compares the character data stored in two different strings based on the collation rules. Returns information about whether a string is less than, greater than or equal to another string in a language. This can be overriden in a subclass.
method,java/text/RuleBasedCollator/getCollationKey/String, Transforms the string into a series of characters that can be compared with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey. It can be overriden in a subclass.
method,java/text/RuleBasedCollator/clone/, Standard override; no change in semantics.
method,java/text/ParsePosition/getErrorIndex/, Retrieve the index at which an error occurred, or -1 if the error index has not been set. @since 1.2
method,java/text/ParsePosition/equals/Object, Overrides equals
class,java/text/ParseException, Signals that an error has been reached unexpectedly while parsing. @see java.lang.Exception @see java.text.Format @see java.text.FieldPosition @version 1.18, 03/23/10 @author Mark Davis
method,java/text/ParseException/getErrorOffset/, Returns the position where the error was found.
method,java/text/ParseException/ParseException/String;int, Constructs a ParseException with the specified detail message and offset. A detail message is a String that describes this particular exception. @param s the detail message @param errorOffset the position where the error is found while parsing.
method,java/text/NumberFormat/format/Object;StringBuffer;FieldPosition, Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of {@link java.lang.Number}. This implementation extracts the number's value using {@link java.lang.Number#longValue()} for all integral type values that can be converted to long without loss of information, including BigInteger values with a {@link java.math.BigInteger#bitLength() bit length} of less than 64, and {@link java.lang.Number#doubleValue()} for all other types. It then calls {@link #format(long,java.lang.StringBuffer,java.text.FieldPosition)} or {@link #format(double,java.lang.StringBuffer,java.text.FieldPosition)}. This may result in loss of magnitude information and precision for BigInteger and BigDecimal values. @param number the number to format @param toAppendTo the StringBuffer to which the formatted text is to be appended @param pos On input: an alignment field, if desired. On output: the offsets of the alignment field. @return the value passed in as toAppendTo @exception IllegalArgumentException if number is null or not an instance of Number. @exception NullPointerException if toAppendTo or pos is null @exception ArithmeticException if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY @see java.text.FieldPosition
method,java/text/NumberFormat/parseObject/String;ParsePosition, Parses text from a string to produce a Number. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. See the {@link #parse(String, ParsePosition)} method for more information on number parsing. @param source A String, part of which should be parsed. @param pos A ParsePosition object with index and error index information as described above. @return A Number parsed from the string. In case of error, returns null. @exception NullPointerException if pos is null.
method,java/text/NumberFormat/parse/String;ParsePosition, Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double. If IntegerOnly is set, will stop at a decimal point (or equivalent; e.g., for rational numbers 1 2/3, will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged! @see java.text.NumberFormat#isParseIntegerOnly @see java.text.Format#parseObject
method,java/text/NumberFormat/parse/String, Parses text from the beginning of the given string to produce a number. The method may not use the entire text of the given string. See the {@link #parse(String, ParsePosition)} method for more information on number parsing. @param source A String whose beginning should be parsed. @return A Number parsed from the string. @exception ParseException if the beginning of the specified string cannot be parsed.
method,java/text/NumberFormat/isParseIntegerOnly/, Returns true if this format will parse numbers as integers only. For example in the English locale, with ParseIntegerOnly true, the string 1234. would be parsed as the integer value 1234 and parsing would stop at the . character. Of course, the exact format accepted by the parse operation is locale dependant and determined by sub-classes of NumberFormat.
method,java/text/NumberFormat/setParseIntegerOnly/boolean, Sets whether or not numbers should be parsed as integers only. @see #isParseIntegerOnly
method,java/text/NumberFormat/getInstance/, Returns a general-purpose number format for the current default locale. This is the same as calling {@link #getNumberInstance() getNumberInstance()}.
method,java/text/NumberFormat/getInstance/Locale, Returns a general-purpose number format for the specified locale. This is the same as calling {@link #getNumberInstance(java.util.Locale) getNumberInstance(inLocale)}.
method,java/text/NumberFormat/getIntegerInstance/, Returns an integer number format for the current default locale. The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting, and to parse only the integer part of an input string (see {@link #isParseIntegerOnly isParseIntegerOnly}). @see #getRoundingMode() @return a number format for integer values @since 1.4
method,java/text/NumberFormat/getIntegerInstance/Locale, Returns an integer number format for the specified locale. The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting, and to parse only the integer part of an input string (see {@link #isParseIntegerOnly isParseIntegerOnly}). @see #getRoundingMode() @return a number format for integer values @since 1.4
method,java/text/NumberFormat/hashCode/, Overrides hashCode
method,java/text/NumberFormat/equals/Object, Overrides equals
method,java/text/NumberFormat/clone/, Overrides Cloneable
method,java/text/NumberFormat/getCurrency/, Gets the currency used by this number format when formatting currency values. The initial value is derived in a locale dependent way. The returned value may be null if no valid currency could be determined and no currency has been set using {@link #setCurrency(java.util.Currency) setCurrency}. The default implementation throws UnsupportedOperationException. @return the currency used by this number format, or null @exception UnsupportedOperationException if the number format class doesn't implement currency formatting @since 1.4
method,java/text/NumberFormat/NumberFormat/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
field,java/text/NumberFormat/INTEGER_FIELD, Field constant used to construct a FieldPosition object. Signifies that the position of the integer part of a formatted number should be returned. @see java.text.FieldPosition
field,java/text/NumberFormat/FRACTION_FIELD, Field constant used to construct a FieldPosition object. Signifies that the position of the fraction part of a formatted number should be returned. @see java.text.FieldPosition
method,java/text/MessageFormat/setLocale/Locale, Sets the locale to be used when creating or comparing subformats. This affects subsequent calls to the {@link #applyPattern applyPattern} and {@link #toPattern toPattern} methods if format elements specify a format type and therefore have the subformats created in the applyPattern method, as well as to the format and {@link #formatToCharacterIterator formatToCharacterIterator} methods if format elements do not specify a format type and therefore have the subformats created in the formatting methods. Subformats that have already been created are not affected. @param locale the locale to be used when creating or comparing subformats
method,java/text/MessageFormat/toPattern/, Returns a pattern representing the current state of the message format. The string is constructed from internal information and therefore does not necessarily equal the previously applied pattern. @return a pattern representing the current state of the message format
method,java/text/MessageFormat/setFormatsByArgumentIndex/Format[], Sets the formats to use for the values passed into format methods or returned from parse methods. The indices of elements in newFormats correspond to the argument indices used in the previously set pattern string. The order of formats in newFormats thus corresponds to the order of elements in the arguments array passed to the format methods or the result array returned by the parse methods. If an argument index is used for more than one format element in the pattern string, then the corresponding new format is used for all such format elements. If an argument index is not used for any format element in the pattern string, then the corresponding new format is ignored. If fewer formats are provided than needed, then only the formats for argument indices less than newFormats.length are replaced. @param newFormats the new formats to use @exception NullPointerException if newFormats is null @since 1.4
method,java/text/MessageFormat/format/Object[];StringBuffer;FieldPosition, Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer. The text substituted for the individual format elements is derived from the current subformat of the format element and the arguments element at the format element's argument index as indicated by the first matching line of the following table. An argument is unavailable if arguments is null or has fewer than argumentIndex+1 elements. Subformat Argument Formatted Text any unavailable { + argumentIndex + } any null null instanceof ChoiceFormat any subformat.format(argument).indexOf('{') >= 0 ? (new MessageFormat(subformat.format(argument), getLocale())).format(argument) : subformat.format(argument) != null any subformat.format(argument) null instanceof Number NumberFormat.getInstance(getLocale()).format(argument) null instanceof Date DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument) null instanceof String argument null any argument.toString() If pos is non-null, and refers to Field.ARGUMENT, the location of the first formatted string will be returned. @param arguments an array of objects to be formatted and substituted. @param result where text is appended. @param pos On input: an alignment field, if desired. On output: the offsets of the alignment field. @exception IllegalArgumentException if an argument in the arguments array is not of the type expected by the format element(s) that use it.
method,java/text/MessageFormat/format/Object;StringBuffer;FieldPosition, Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer. This is equivalent to {@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}((Object[]) arguments, result, pos) @param arguments an array of objects to be formatted and substituted. @param result where text is appended. @param pos On input: an alignment field, if desired. On output: the offsets of the alignment field. @exception IllegalArgumentException if an argument in the arguments array is not of the type expected by the format element(s) that use it.
method,java/text/MessageFormat/formatToCharacterIterator/Object, Formats an array of objects and inserts them into the MessageFormat's pattern, producing an AttributedCharacterIterator. You can use the returned AttributedCharacterIterator to build the resulting String, as well as to determine information about the resulting String. The text of the returned AttributedCharacterIterator is the same that would be returned by {@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString() In addition, the AttributedCharacterIterator contains at least attributes indicating where text was generated from an argument in the arguments array. The keys of these attributes are of type MessageFormat.Field, their values are Integer objects indicating the index in the arguments array of the argument from which the text was generated. The attributes/value from the underlying Format instances that MessageFormat uses will also be placed in the resulting AttributedCharacterIterator. This allows you to not only find where an argument is placed in the resulting String, but also which fields it contains in turn. @param arguments an array of objects to be formatted and substituted. @return AttributedCharacterIterator describing the formatted value. @exception NullPointerException if arguments is null. @exception IllegalArgumentException if an argument in the arguments array is not of the type expected by the format element(s) that use it. @since 1.4
method,java/text/MessageFormat/parse/String;ParsePosition, Parses the string. Caveats: The parse may fail in a number of circumstances. For example: If one of the arguments does not occur in the pattern. If the format of an argument loses information, such as with a choice format where a large number formats to many. Does not yet handle recursion (where the substituted strings contain {n} references.) Will not always find a match (or the correct match) if some part of the parse is ambiguous. For example, if the pattern {1},{2} is used with the string arguments {a,b, c}, it will format as a,b,c. When the result is parsed, it will return {a, b,c}. If a single argument is parsed more than once in the string, then the later parse wins. When the parse fails, use ParsePosition.getErrorIndex() to find out where in the string the parsing failed. The returned error index is the starting offset of the sub-patterns that the string is comparing with. For example, if the parsing string AAA {0} BBB is comparing against the pattern AAD {0} BBB, the error index is 0. When an error occurs, the call to this method will return null. If the source is null, return an empty array.
method,java/text/MessageFormat/parse/String, Parses text from the beginning of the given string to produce an object array. The method may not use the entire text of the given string. See the {@link #parse(String, ParsePosition)} method for more information on message parsing. @param source A String whose beginning should be parsed. @return An Object array parsed from the string. @exception ParseException if the beginning of the specified string cannot be parsed.
method,java/text/MessageFormat/parseObject/String;ParsePosition, Parses text from a string to produce an object array. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed object array is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. See the {@link #parse(String, ParsePosition)} method for more information on message parsing. @param source A String, part of which should be parsed. @param pos A ParsePosition object with index and error index information as described above. @return An Object array parsed from the string. In case of error, returns null. @exception NullPointerException if pos is null.
method,java/text/MessageFormat/equals/Object, Equality comparison between two message format objects
method,java/text/Format/parseObject/String;ParsePosition, Parses text from a string to produce an object. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed object is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. @param source A String, part of which should be parsed. @param pos A ParsePosition object with index and error index information as described above. @return An Object parsed from the string. In case of error, returns null. @exception NullPointerException if pos is null.
method,java/text/Format/parseObject/String, Parses text from the beginning of the given string to produce an object. The method may not use the entire text of the given string. @param source A String whose beginning should be parsed. @return An Object parsed from the string. @exception ParseException if the beginning of the specified string cannot be parsed.
method,java/text/Format/Format/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/text/FieldPosition/getFieldAttribute/, Returns the field identifier as an attribute constant from one of the Field subclasses. May return null if the field is specified only by an integer field ID. @return Identifier for the field @since 1.4
method,java/text/FieldPosition/setBeginIndex/int, Sets the begin index. For use by subclasses of Format. @since 1.2
method,java/text/FieldPosition/setEndIndex/int, Sets the end index. For use by subclasses of Format. @since 1.2
method,java/text/FieldPosition/equals/Object, Overrides equals
method,java/text/FieldPosition/FieldPosition/int, Creates a FieldPosition object for the given field. Fields are identified by constants, whose names typically end with _FIELD, in the various subclasses of Format. @see java.text.NumberFormat#INTEGER_FIELD @see java.text.NumberFormat#FRACTION_FIELD @see java.text.DateFormat#YEAR_FIELD @see java.text.DateFormat#MONTH_FIELD
method,java/text/FieldPosition/FieldPosition/Field, Creates a FieldPosition object for the given field constant. Fields are identified by constants defined in the various Format subclasses. This is equivalent to calling new FieldPosition(attribute, -1). @param attribute Format.Field constant identifying a field @since 1.4
method,java/text/DecimalFormatSymbols/getInstance/Locale, Gets the DecimalFormatSymbols instance for the specified locale. This method provides access to DecimalFormatSymbols instances for locales supported by the Java runtime itself as well as for those supported by installed {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider} implementations. @param locale the desired locale. @return a DecimalFormatSymbols instance. @exception NullPointerException if locale is null @since 1.6
method,java/text/DecimalFormatSymbols/getCurrency/, Gets the currency of these DecimalFormatSymbols. May be null if the currency symbol attribute was previously set to a value that's not a valid ISO 4217 currency code. @return the currency used, or null @since 1.4
method,java/text/DecimalFormatSymbols/clone/, Standard override.
method,java/text/DecimalFormatSymbols/equals/Object, Override equals.
method,java/text/DecimalFormatSymbols/hashCode/, Override hashCode.
method,java/text/DecimalFormatSymbols/DecimalFormatSymbols/, Create a DecimalFormatSymbols object for the default locale. This constructor can only construct instances for the locales supported by the Java runtime environment, not for those supported by installed {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider} implementations. For full locale coverage, use the {@link #getInstance(Locale) getInstance} method.
method,java/text/DecimalFormatSymbols/DecimalFormatSymbols/Locale, Create a DecimalFormatSymbols object for the given locale. This constructor can only construct instances for the locales supported by the Java runtime environment, not for those supported by installed {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider} implementations. For full locale coverage, use the {@link #getInstance(Locale) getInstance} method. @exception NullPointerException if locale is null
method,java/text/DecimalFormat/format/Object;StringBuffer;FieldPosition, Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of {@link java.lang.Number}. This implementation uses the maximum precision permitted. @param number the number to format @param toAppendTo the StringBuffer to which the formatted text is to be appended @param pos On input: an alignment field, if desired. On output: the offsets of the alignment field. @return the value passed in as toAppendTo @exception IllegalArgumentException if number is null or not an instance of Number. @exception NullPointerException if toAppendTo or pos is null @exception ArithmeticException if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY @see java.text.FieldPosition
method,java/text/DecimalFormat/format/double;StringBuffer;FieldPosition, Formats a double to produce a string. @param number The double to format @param result where the text is to be appended @param fieldPosition On input: an alignment field, if desired. On output: the offsets of the alignment field. @exception ArithmeticException if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY @return The formatted number string @see java.text.FieldPosition
method,java/text/DecimalFormat/format/long;StringBuffer;FieldPosition, Format a long to produce a string. @param number The long to format @param result where the text is to be appended @param fieldPosition On input: an alignment field, if desired. On output: the offsets of the alignment field. @exception ArithmeticException if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY @return The formatted number string @see java.text.FieldPosition
method,java/text/DecimalFormat/parse/String;ParsePosition, Parses text from a string to produce a Number. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. The subclass returned depends on the value of {@link #isParseBigDecimal} as well as on the string being parsed. If isParseBigDecimal() is false (the default), most integer values are returned as Long objects, no matter how they are written: 17 and 17.000 both parse to Long(17). Values that cannot fit into a Long are returned as Doubles. This includes values with a fractional part, infinite values, NaN, and the value -0.0. DecimalFormat does not decide whether to return a Double or a Long based on the presence of a decimal separator in the source string. Doing so would prevent integers that overflow the mantissa of a double, such as -9,223,372,036,854,775,808.00, from being parsed accurately. Callers may use the Number methods doubleValue, longValue, etc., to obtain the type they want. If isParseBigDecimal() is true, values are returned as BigDecimal objects. The values are the ones constructed by {@link java.math.BigDecimal#BigDecimal(String)} for corresponding strings in locale-independent format. The special cases negative and positive infinity and NaN are returned as Double instances holding the values of the corresponding Double constants. DecimalFormat parses all Unicode characters that represent decimal digits, as defined by Character.digit(). In addition, DecimalFormat also recognizes as digits the ten consecutive characters starting with the localized zero digit defined in the DecimalFormatSymbols object. @param text the string to be parsed @param pos A ParsePosition object with index and error index information as described above. @return the parsed value, or null if the parse fails @exception NullPointerException if text or pos is null.
method,java/text/DecimalFormat/getDecimalFormatSymbols/, Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user. @return a copy of the desired DecimalFormatSymbols @see java.text.DecimalFormatSymbols
method,java/text/DecimalFormat/setDecimalFormatSymbols/DecimalFormatSymbols, Sets the decimal format symbols, which is generally not changed by the programmer or user. @param newSymbols desired DecimalFormatSymbols @see java.text.DecimalFormatSymbols
method,java/text/DecimalFormat/getGroupingSize/, Return the grouping size. Grouping size is the number of digits between grouping separators in the integer portion of a number. For example, in the number 123,456.78, the grouping size is 3. @see #setGroupingSize @see java.text.NumberFormat#isGroupingUsed @see java.text.DecimalFormatSymbols#getGroupingSeparator
method,java/text/DecimalFormat/setGroupingSize/int, Set the grouping size. Grouping size is the number of digits between grouping separators in the integer portion of a number. For example, in the number 123,456.78, the grouping size is 3. The value passed in is converted to a byte, which may lose information. @see #getGroupingSize @see java.text.NumberFormat#setGroupingUsed @see java.text.DecimalFormatSymbols#setGroupingSeparator
method,java/text/DecimalFormat/clone/, Standard override; no change in semantics.
method,java/text/DecimalFormat/equals/Object, Overrides equals
method,java/text/DecimalFormat/hashCode/, Overrides hashCode
method,java/text/DecimalFormat/applyPattern/String, Apply the given pattern to this Format object. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods. There is no limit to integer digits set by this routine, since that is the typical end-user desire; use setMaximumInteger if you want to set a real value. For negative numbers, use a second pattern, separated by a semicolon Example #,#00.0# -> 1,234.56 This means a minimum of 2 integer digits, 1 fraction digit, and a maximum of 2 fraction digits. Example: #,#00.0#;(#,#00.0#) for negatives in parentheses. In negative patterns, the minimum and maximum counts are ignored; these are presumed to be set in the positive pattern. @exception NullPointerException if pattern is null @exception IllegalArgumentException if the given pattern is invalid.
method,java/text/DecimalFormat/applyLocalizedPattern/String, Apply the given pattern to this Format object. The pattern is assumed to be in a localized notation. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods. There is no limit to integer digits set by this routine, since that is the typical end-user desire; use setMaximumInteger if you want to set a real value. For negative numbers, use a second pattern, separated by a semicolon Example #,#00.0# -> 1,234.56 This means a minimum of 2 integer digits, 1 fraction digit, and a maximum of 2 fraction digits. Example: #,#00.0#;(#,#00.0#) for negatives in parentheses. In negative patterns, the minimum and maximum counts are ignored; these are presumed to be set in the positive pattern. @exception NullPointerException if pattern is null @exception IllegalArgumentException if the given pattern is invalid.
method,java/text/DecimalFormat/getCurrency/, Gets the currency used by this decimal format when formatting currency values. The currency is obtained by calling {@link DecimalFormatSymbols#getCurrency DecimalFormatSymbols.getCurrency} on this number format's symbols. @return the currency used by this decimal format, or null @since 1.4
method,java/text/DecimalFormat/setCurrency/Currency, Sets the currency used by this number format when formatting currency values. This does not update the minimum or maximum number of fraction digits used by the number format. The currency is set by calling {@link DecimalFormatSymbols#setCurrency DecimalFormatSymbols.setCurrency} on this number format's symbols. @param currency the new currency to be used by this decimal format @exception NullPointerException if currency is null @since 1.4
method,java/text/DecimalFormat/DecimalFormat/String;DecimalFormatSymbols, Creates a DecimalFormat using the given pattern and symbols. Use this constructor when you need to completely customize the behavior of the format. To obtain standard formats for a given locale, use the factory methods on NumberFormat such as getInstance or getCurrencyInstance. If you need only minor adjustments to a standard format, you can modify the format returned by a NumberFormat factory method. @param pattern a non-localized pattern string @param symbols the set of symbols to be used @exception NullPointerException if any of the given arguments is null @exception IllegalArgumentException if the given pattern is invalid @see java.text.NumberFormat#getInstance @see java.text.NumberFormat#getNumberInstance @see java.text.NumberFormat#getCurrencyInstance @see java.text.NumberFormat#getPercentInstance @see java.text.DecimalFormatSymbols
method,java/text/DateFormatSymbols/clone/, Overrides Cloneable
method,java/text/DateFormatSymbols/hashCode/, Override hashCode. Generates a hash code for the DateFormatSymbols object.
method,java/text/DateFormatSymbols/equals/Object, Override equals
method,java/text/DateFormatSymbols/DateFormatSymbols/, Construct a DateFormatSymbols object by loading format data from resources for the default locale. This constructor can only construct instances for the locales supported by the Java runtime environment, not for those supported by installed {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} implementations. For full locale coverage, use the {@link #getInstance(Locale) getInstance} method. @see #getInstance() @exception java.util.MissingResourceException if the resources for the default locale cannot be found or cannot be loaded.
method,java/text/DateFormatSymbols/DateFormatSymbols/Locale, Construct a DateFormatSymbols object by loading format data from resources for the given locale. This constructor can only construct instances for the locales supported by the Java runtime environment, not for those supported by installed {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} implementations. For full locale coverage, use the {@link #getInstance(Locale) getInstance} method. @see #getInstance(Locale) @exception java.util.MissingResourceException if the resources for the specified locale cannot be found or cannot be loaded.
method,java/text/DateFormat/format/Date;StringBuffer;FieldPosition, Formats a Date into a date/time string. @param date a Date to be formatted into a date/time string. @param toAppendTo the string buffer for the returning date/time string. @param fieldPosition keeps track of the position of the field within the returned string. On input: an alignment field, if desired. On output: the offsets of the alignment field. For example, given a time text 1996.07.10 AD at 15:08:56 PDT, if the given fieldPosition is DateFormat.YEAR_FIELD, the begin index and end index of fieldPosition will be set to 0 and 4, respectively. Notice that if the same time field appears more than once in a pattern, the fieldPosition will be set for the first occurrence of that time field. For instance, formatting a Date to the time string 1 PM PDT (Pacific Daylight Time) using the pattern h a z (zzzz) and the alignment field DateFormat.TIMEZONE_FIELD, the begin index and end index of fieldPosition will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character 'z'. @return the string buffer passed in as toAppendTo, with formatted text appended.
method,java/text/DateFormat/parse/String, Parses text from the beginning of the given string to produce a date. The method may not use the entire text of the given string. See the {@link #parse(String, ParsePosition)} method for more information on date parsing. @param source A String whose beginning should be parsed. @return A Date parsed from the string. @exception ParseException if the beginning of the specified string cannot be parsed.
method,java/text/DateFormat/parse/String;ParsePosition, Parse a date/time string according to the given parse position. For example, a time text 07/10/96 4:5 PM, PDT will be parsed into a Date that is equivalent to Date(837039928046). By default, parsing is lenient: If the input is not in the form used by this object's format method but can still be parsed as a date, then the parse succeeds. Clients may insist on strict adherence to the format by calling setLenient(false). @see java.text.DateFormat#setLenient(boolean) @param source The date/time string to be parsed @param pos On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed. @return A Date, or null if the input could not be parsed
method,java/text/DateFormat/parseObject/String;ParsePosition, Parses text from a string to produce a Date. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. See the {@link #parse(String, ParsePosition)} method for more information on date parsing. @param source A String, part of which should be parsed. @param pos A ParsePosition object with index and error index information as described above. @return A Date parsed from the string. In case of error, returns null. @exception NullPointerException if pos is null.
method,java/text/DateFormat/hashCode/, Overrides hashCode
method,java/text/DateFormat/equals/Object, Overrides equals
method,java/text/DateFormat/clone/, Overrides Cloneable
class,java/text/DateFormat/Field, Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from DateFormat.formatToCharacterIterator and as field identifiers in FieldPosition. The class also provides two methods to map between its constants and the corresponding Calendar constants. @since 1.4 @see java.util.Calendar
method,java/text/DateFormat/Field/ofCalendarField/int, Returns the Field constant that corresponds to the Calendar constant calendarField. If there is no direct mapping between the Calendar constant and a Field, null is returned. @throws IllegalArgumentException if calendarField is not the value of a Calendar field constant. @param calendarField Calendar field constant @return Field instance representing calendarField. @see java.util.Calendar
method,java/text/DateFormat/Field/DateFormat/Field/String;int, Creates a Field. @param name the name of the Field @param calendarField the Calendar constant this Field corresponds to; any value, even one outside the range of legal Calendar values may be used, but -1 should be used for values that don't correspond to legal Calendar values
method,java/text/Collator/getInstance/Locale, Gets the Collator for the desired locale. @param desiredLocale the desired locale. @return the Collator for the desired locale. @see java.util.Locale @see java.util.ResourceBundle
method,java/text/Collator/getDecomposition/, Get the decomposition mode of this Collator. Decomposition mode determines how Unicode composed characters are handled. Adjusting decomposition mode allows the user to select between faster and more complete collation behavior. The three values for decomposition mode are: NO_DECOMPOSITION, CANONICAL_DECOMPOSITION FULL_DECOMPOSITION. See the documentation for these three constants for a description of their meaning. @return the decomposition mode @see java.text.Collator#setDecomposition @see java.text.Collator#NO_DECOMPOSITION @see java.text.Collator#CANONICAL_DECOMPOSITION @see java.text.Collator#FULL_DECOMPOSITION
method,java/text/Collator/clone/, Overrides Cloneable
method,java/text/Collator/Collator/, Default constructor. This constructor is protected so subclasses can get access to it. Users typically create a Collator sub-class by calling the factory method getInstance. @see java.text.Collator#getInstance
field,java/text/Collator/PRIMARY, Collator strength value. When set, only PRIMARY differences are considered significant during comparison. The assignment of strengths to language features is locale dependant. A common example is for different base letters (a vs b) to be considered a PRIMARY difference. @see java.text.Collator#setStrength @see java.text.Collator#getStrength
field,java/text/Collator/SECONDARY, Collator strength value. When set, only SECONDARY and above differences are considered significant during comparison. The assignment of strengths to language features is locale dependant. A common example is for different accented forms of the same base letter (a vs ä) to be considered a SECONDARY difference. @see java.text.Collator#setStrength @see java.text.Collator#getStrength
field,java/text/Collator/TERTIARY, Collator strength value. When set, only TERTIARY and above differences are considered significant during comparison. The assignment of strengths to language features is locale dependant. A common example is for case differences (a vs A) to be considered a TERTIARY difference. @see java.text.Collator#setStrength @see java.text.Collator#getStrength
field,java/text/Collator/IDENTICAL, Collator strength value. When set, all differences are considered significant during comparison. The assignment of strengths to language features is locale dependant. A common example is for control characters (&#092;u0001 vs &#092;u0002) to be considered equal at the PRIMARY, SECONDARY, and TERTIARY levels but different at the IDENTICAL level. Additionally, differences between pre-composed accents such as &#092;u00C0 (A-grave) and combining accents such as A&#092;u0300 (A, combining-grave) will be considered significant at the IDENTICAL level if decomposition is set to NO_DECOMPOSITION.
field,java/text/Collator/NO_DECOMPOSITION, Decomposition mode value. With NO_DECOMPOSITION set, accented characters will not be decomposed for collation. This is the default setting and provides the fastest collation but will only produce correct results for languages that do not use accents. @see java.text.Collator#getDecomposition @see java.text.Collator#setDecomposition
field,java/text/Collator/CANONICAL_DECOMPOSITION, Decomposition mode value. With CANONICAL_DECOMPOSITION set, characters that are canonical variants according to Unicode standard will be decomposed for collation. This should be used to get correct collation of accented characters. CANONICAL_DECOMPOSITION corresponds to Normalization Form D as described in Unicode Technical Report #15. @see java.text.Collator#getDecomposition @see java.text.Collator#setDecomposition
field,java/text/Collator/FULL_DECOMPOSITION, Decomposition mode value. With FULL_DECOMPOSITION set, both Unicode canonical variants and Unicode compatibility variants will be decomposed for collation. This causes not only accented characters to be collated, but also characters that have special formats to be collated with their norminal form. For example, the half-width and full-width ASCII and Katakana characters are then collated together. FULL_DECOMPOSITION is the most complete and therefore the slowest decomposition mode. FULL_DECOMPOSITION corresponds to Normalization Form KD as described in Unicode Technical Report #15. @see java.text.Collator#getDecomposition @see java.text.Collator#setDecomposition
class,java/text/CollationKey, A CollationKey represents a String under the rules of a specific Collator object. Comparing two CollationKeys returns the relative order of the Strings they represent. Using CollationKeys to compare Strings is generally faster than using Collator.compare. Thus, when the Strings must be compared multiple times, for example when sorting a list of Strings. It's more efficient to use CollationKeys. You can not create CollationKeys directly. Rather, generate them by calling Collator.getCollationKey. You can only compare CollationKeys generated from the same Collator object. Generating a CollationKey for a String involves examining the entire String and converting it to series of bits that can be compared bitwise. This allows fast comparisons once the keys are generated. The cost of generating keys is recouped in faster comparisons when Strings need to be compared many times. On the other hand, the result of a comparison is often determined by the first couple of characters of each String. Collator.compare examines only as many characters as it needs which allows it to be faster when doing single comparisons. The following example shows how CollationKeys might be used to sort a list of Strings. // Create an array of CollationKeys for the Strings to be sorted. Collator myCollator = Collator.getInstance(); CollationKey[] keys = new CollationKey[3]; keys[0] = myCollator.getCollationKey(Tom); keys[1] = myCollator.getCollationKey(Dick); keys[2] = myCollator.getCollationKey(Harry); sort( keys ); //... // Inside body of sort routine, compare keys this way if( keys[i].compareTo( keys[j] ) > 0 ) // swap keys[i] and keys[j] //... // Finally, when we've returned from sort. System.out.println( keys[0].getSourceString() ); System.out.println( keys[1].getSourceString() ); System.out.println( keys[2].getSourceString() ); @see Collator @see RuleBasedCollator @version 1.22, 03/23/10 @author Helena Shih
method,java/text/CollationKey/compareTo/CollationKey, Compare this CollationKey to the target CollationKey. The collation rules of the Collator object which created these keys are applied. Note: CollationKeys created by different Collators can not be compared. @param target target CollationKey @return Returns an integer value. Value is less than zero if this is less than target, value is zero if this and target are equal and value is greater than zero if this is greater than target. @see java.text.Collator#compare
class,java/text/CollationElementIterator, The CollationElementIterator class is used as an iterator to walk through each character of an international string. Use the iterator to return the ordering priority of the positioned character. The ordering priority of a character, which we refer to as a key, defines how a character is collated in the given collation object. For example, consider the following in Spanish: ca -> the first key is key('c') and second key is key('a'). cha -> the first key is key('ch') and second key is key('a'). And in German, äb-> the first key is key('a'), the second key is key('e'), and the third key is key('b'). The key of a character is an integer composed of primary order(short), secondary order(byte), and tertiary order(byte). Java strictly defines the size and signedness of its primitive data types. Therefore, the static functions primaryOrder, secondaryOrder, and tertiaryOrder return int, short, and short respectively to ensure the correctness of the key value. Example of the iterator usage, String testString = This is a test; RuleBasedCollator ruleBasedCollator = (RuleBasedCollator)Collator.getInstance(); CollationElementIterator collationElementIterator = ruleBasedCollator.getCollationElementIterator(testString); int primaryOrder = CollationElementIterator.primaryOrder(collationElementIterator.next()); CollationElementIterator.next returns the collation order of the next character. A collation order consists of primary order, secondary order and tertiary order. The data type of the collation order is int. The first 16 bits of a collation order is its primary order; the next 8 bits is the secondary order and the last 8 bits is the tertiary order. @see Collator @see RuleBasedCollator @version 1.24 07/27/98 @author Helena Shih, Laura Werner, Richard Gillam
method,java/text/CollationElementIterator/reset/, Resets the cursor to the beginning of the string. The next call to next() will return the first collation element in the string.
method,java/text/CollationElementIterator/next/, Get the next collation element in the string. This iterator iterates over a sequence of collation elements that were built from the string. Because there isn't necessarily a one-to-one mapping from characters to collation elements, this doesn't mean the same thing as return the collation element [or ordering priority] of the next character in the string. This function returns the collation element that the iterator is currently pointing to and then updates the internal pointer to point to the next element. previous() updates the pointer first and then returns the element. This means that when you change direction while iterating (i.e., call next() and then call previous(), or call previous() and then call next()), you'll get back the same element twice.
method,java/text/CollationElementIterator/previous/, Get the previous collation element in the string. This iterator iterates over a sequence of collation elements that were built from the string. Because there isn't necessarily a one-to-one mapping from characters to collation elements, this doesn't mean the same thing as return the collation element [or ordering priority] of the previous character in the string. This function updates the iterator's internal pointer to point to the collation element preceding the one it's currently pointing to and then returns that element, while next() returns the current element and then updates the pointer. This means that when you change direction while iterating (i.e., call next() and then call previous(), or call previous() and then call next()), you'll get back the same element twice. @since 1.2
method,java/text/CollationElementIterator/setOffset/int, Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements). The value returned by the next call to next() will be the collation element corresponding to the specified position in the text. If that position is in the middle of a contracting character sequence, the result of the next call to next() is the collation element for that sequence. This means that getOffset() is not guaranteed to return the same value as was passed to a preceding call to setOffset(). @param newOffset The new character offset into the original text. @since 1.2
method,java/text/CollationElementIterator/getOffset/, Returns the character offset in the original text corresponding to the next collation element. (That is, getOffset() returns the position in the text corresponding to the collation element that will be returned by the next call to next().) This value will always be the index of the FIRST character corresponding to the collation element (a contracting character sequence is when two or more characters all correspond to the same collation element). This means if you do setOffset(x) followed immediately by getOffset(), getOffset() won't necessarily return x. @return The character offset in the original text corresponding to the collation element that will be returned by the next call to next(). @since 1.2
method,java/text/ChoiceFormat/format/long;StringBuffer;FieldPosition, Specialization of format. This method really calls format(double, StringBuffer, FieldPosition) thus the range of longs that are supported is only equal to the range that can be stored by double. This will never be a practical limitation.
method,java/text/ChoiceFormat/parse/String;ParsePosition, Parses a Number from the input text. @param text the source text. @param status an input-output parameter. On input, the status.index field indicates the first character of the source text that should be parsed. On exit, if no error occured, status.index is set to the first unparsed character in the source text. On exit, if an error did occur, status.index is unchanged and status.errorIndex is set to the first index of the character that caused the parse to fail. @return A Number representing the value of the number parsed.
method,java/text/ChoiceFormat/clone/, Overrides Cloneable
method,java/text/ChoiceFormat/equals/Object, Equality comparision between two
interface,java/text/CharacterIterator, This interface defines a protocol for bidirectional iteration over text. The iterator iterates over a bounded sequence of characters. Characters are indexed with values beginning with the value returned by getBeginIndex() and continuing through the value returned by getEndIndex()-1. Iterators maintain a current character index, whose valid range is from getBeginIndex() to getEndIndex(); the value getEndIndex() is included to allow handling of zero-length text ranges and for historical reasons. The current index can be retrieved by calling getIndex() and set directly by calling setIndex(), first(), and last(). The methods previous() and next() are used for iteration. They return DONE if they would move outside the range from getBeginIndex() to getEndIndex() -1, signaling that the iterator has reached the end of the sequence. DONE is also returned by other methods to indicate that the current index is outside this range. Examples: Traverse the text from start to finish public void traverseForward(CharacterIterator iter) { for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) { processChar(c); } } Traverse the text backwards, from end to start public void traverseBackward(CharacterIterator iter) { for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) { processChar(c); } } Traverse both forward and backward from a given position in the text. Calls to notBoundary() in this example represents some additional stopping criteria. public void traverseOut(CharacterIterator iter, int pos) { for (char c = iter.setIndex(pos); c != CharacterIterator.DONE && notBoundary(c); c = iter.next()) { } int end = iter.getIndex(); for (char c = iter.setIndex(pos); c != CharacterIterator.DONE && notBoundary(c); c = iter.previous()) { } int start = iter.getIndex(); processSection(start, end); } @see StringCharacterIterator @see AttributedCharacterIterator
method,java/text/CharacterIterator/getEndIndex/, Returns the end index of the text. This index is the index of the first character following the end of the text. @return the index after the last character in the text
field,java/text/CharacterIterator/DONE, Constant that is returned when the iterator has reached either the end or the beginning of the text. The value is '\\uFFFF', the not a character value which should not occur in any valid Unicode string.
method,java/text/BreakIterator/next/int, Returns the nth boundary from the current boundary. If either the first or last text boundary has been reached, it returns BreakIterator.DONE and the current position is set to either the first or last text boundary depending on which one is reached. Otherwise, the iterator's current position is set to the new boundary. For example, if the iterator's current position is the mth text boundary and three more boundaries exist from the current boundary to the last text boundary, the next(2) call will return m + 2. The new text position is set to the (m + 2)th text boundary. A next(4) call would return BreakIterator.DONE and the last text boundary would become the new text position. @param n which boundary to return. A value of 0 does nothing. Negative values move to previous boundaries and positive values move to later boundaries. @return The character index of the nth boundary from the current position or BreakIterator.DONE if either first or last text boundary has been reached.
method,java/text/BreakIterator/following/int, Returns the first boundary following the specified character offset. If the specified offset equals to the last text boundary, it returns BreakIterator.DONE and the iterator's current position is unchanged. Otherwise, the iterator's current position is set to the returned boundary. The value returned is always greater than the offset or the value BreakIterator.DONE. @param offset the character offset to begin scanning. @return The first boundary after the specified offset or BreakIterator.DONE if the last text boundary is passed in as the offset. @exception IllegalArgumentException if the specified offset is less than the first text boundary or greater than the last text boundary.
method,java/text/BreakIterator/preceding/int, Returns the last boundary preceding the specified character offset. If the specified offset equals to the first text boundary, it returns BreakIterator.DONE and the iterator's current position is unchanged. Otherwise, the iterator's current position is set to the returned boundary. The value returned is always less than the offset or the value BreakIterator.DONE. @param offset the characater offset to begin scanning. @return The last boundary before the specified offset or BreakIterator.DONE if the first text boundary is passed in as the offset. @exception IllegalArgumentException if the specified offset is less than the first text boundary or greater than the last text boundary. @since 1.2
method,java/text/BreakIterator/getWordInstance/Locale, Returns a new BreakIterator instance for word breaks for the given locale. @param locale the desired locale @return A break iterator for word breaks @exception NullPointerException if locale is null
method,java/text/BreakIterator/getLineInstance/Locale, Returns a new BreakIterator instance for line breaks for the given locale. @param locale the desired locale @return A break iterator for line breaks @exception NullPointerException if locale is null
method,java/text/BreakIterator/getCharacterInstance/Locale, Returns a new BreakIterator instance for character breaks for the given locale. @param locale the desired locale @return A break iterator for character breaks @exception NullPointerException if locale is null
method,java/text/BreakIterator/getSentenceInstance/Locale, Returns a new BreakIterator instance for sentence breaks for the given locale. @param locale the desired locale @return A break iterator for sentence breaks @exception NullPointerException if locale is null
class,java/text/Bidi, This class implements the Unicode Bidirectional Algorithm. A Bidi object provides information on the bidirectional reordering of the text used to create it. This is required, for example, to properly display Arabic or Hebrew text. These languages are inherently mixed directional, as they order numbers from left-to-right while ordering most other text from right-to-left. Once created, a Bidi object can be queried to see if the text it represents is all left-to-right or all right-to-left. Such objects are very lightweight and this text is relatively easy to process. If there are multiple runs of text, information about the runs can be accessed by indexing to get the start, limit, and level of a run. The level represents both the direction and the 'nesting level' of a directional run. Odd levels are right-to-left, while even levels are left-to-right. So for example level 0 represents left-to-right text, while level 1 represents right-to-left text, and level 2 represents left-to-right text embedded in a right-to-left run. @since 1.4
method,java/text/Bidi/isMixed/, Return true if the line is not left-to-right or right-to-left. This means it either has mixed runs of left-to-right and right-to-left text, or the base direction differs from the direction of the only run of text. @return true if the line is not left-to-right or right-to-left.
method,java/text/Bidi/getRunLevel/int, Return the level of the nth logical run in this line. @param run the index of the run, between 0 and getRunCount() @return the level of the run
method,java/text/Bidi/getRunStart/int, Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line. @param run the index of the run, between 0 and getRunCount() @return the start of the run
method,java/text/Bidi/getRunLimit/int, Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line. For example, this will return the length of the line for the last run on the line. @param run the index of the run, between 0 and getRunCount() @return limit the limit of the run
method,java/text/Bidi/reorderVisually/byte[];int;Object[];int;int, Reorder the objects in the array into visual order based on their levels. This is a utility function to use when you have a collection of objects representing runs of text in logical order, each run containing text at a single level. The elements at index from objectStart up to objectStart + count in the objects array will be reordered into visual order assuming each run of text has the level indicated by the corresponding element in the levels array (at index - objectStart + levelStart). @param levels an array representing the bidi level of each object @param levelStart the start position in the levels array @param objects the array of objects to be reordered into visual order @param objectStart the start position in the objects array @param count the number of objects to reorder
method,java/text/Bidi/toString/, Display the bidi internal state, used in debugging.
method,java/text/Bidi/Bidi/AttributedCharacterIterator, Create Bidi from the given paragraph of text. The RUN_DIRECTION attribute in the text, if present, determines the base direction (left-to-right or right-to-left). If not present, the base direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right if there are no strong directional characters in the text. This attribute, if present, must be applied to all the text in the paragraph. The BIDI_EMBEDDING attribute in the text, if present, represents embedding level information. Negative values from -1 to -62 indicate overrides at the absolute value of the level. Positive values from 1 to 62 indicate embeddings. Where values are zero or not defined, the base embedding level as determined by the base direction is assumed. The NUMERIC_SHAPING attribute in the text, if present, converts European digits to other decimal digits before running the bidi algorithm. This attribute, if present, must be applied to all the text in the paragraph. @param paragraph a paragraph of text with optional character and paragraph attribute information @see TextAttribute#BIDI_EMBEDDING @see TextAttribute#NUMERIC_SHAPING @see TextAttribute#RUN_DIRECTION
method,java/text/Bidi/Bidi/char[];int;byte[];int;int;int, Create Bidi from the given text, embedding, and direction information. The embeddings array may be null. If present, the values represent embedding level information. Negative values from -1 to -61 indicate overrides at the absolute value of the level. Positive values from 1 to 61 indicate embeddings. Where values are zero, the base embedding level as determined by the base direction is assumed. @param text an array containing the paragraph of text to process. @param textStart the index into the text array of the start of the paragraph. @param embeddings an array containing embedding values for each character in the paragraph. This can be null, in which case it is assumed that there is no external embedding information. @param embStart the index into the embedding array of the start of the paragraph. @param paragraphLength the length of the paragraph in the text and embeddings arrays. @param flags a collection of flags that control the algorithm. The algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved.
field,java/text/Bidi/DIRECTION_DEFAULT_LEFT_TO_RIGHT, Constant indicating that the base direction depends on the first strong directional character in the text according to the Unicode Bidirectional Algorithm. If no strong directional character is present, the base direction is left-to-right.
field,java/text/Bidi/DIRECTION_DEFAULT_RIGHT_TO_LEFT, Constant indicating that the base direction depends on the first strong directional character in the text according to the Unicode Bidirectional Algorithm. If no strong directional character is present, the base direction is right-to-left.
class,java/text/AttributedString, An AttributedString holds text and related attribute information. It may be used as the actual data storage in some cases where a text reader wants to access attributed text through the AttributedCharacterIterator interface. An attribute is a key/value pair, identified by the key. No two attributes on a given character can have the same key. The values for an attribute are immutable, or must not be mutated by clients or storage. They are always passed by reference, and not cloned. @see AttributedCharacterIterator @see Annotation @since 1.2
method,java/text/AttributedString/addAttribute/Attribute;Object, Adds an attribute to the entire string. @param attribute the attribute key @param value the value of the attribute; may be null @exception NullPointerException if attribute is null. @exception IllegalArgumentException if the AttributedString has length 0 (attributes cannot be applied to a 0-length range).
method,java/text/AttributedString/addAttribute/Attribute;Object;int;int, Adds an attribute to a subrange of the string. @param attribute the attribute key @param value The value of the attribute. May be null. @param beginIndex Index of the first character of the range. @param endIndex Index of the character following the last character of the range. @exception NullPointerException if attribute is null. @exception IllegalArgumentException if beginIndex is less then 0, endIndex is greater than the length of the string, or beginIndex and endIndex together don't define a non-empty subrange of the string.
method,java/text/AttributedString/AttributedString/AttributedCharacterIterator;int;int, Constructs an AttributedString instance with the subrange of the given attributed text represented by AttributedCharacterIterator. If the given range produces an empty text, all attributes will be discarded. Note that any attributes wrapped by an Annotation object are discarded for a subrange of the original attribute range. @param text The text for this attributed string. @param beginIndex Index of the first character of the range. @param endIndex Index of the character following the last character of the range. @exception NullPointerException if text is null. @exception IllegalArgumentException if the subrange given by beginIndex and endIndex is out of the text range. @see java.text.Annotation
method,java/text/AttributedString/AttributedString/AttributedCharacterIterator;int;int;Attribute[], Constructs an AttributedString instance with the subrange of the given attributed text represented by AttributedCharacterIterator. Only attributes that match the given attributes will be incorporated into the instance. If the given range produces an empty text, all attributes will be discarded. Note that any attributes wrapped by an Annotation object are discarded for a subrange of the original attribute range. @param text The text for this attributed string. @param beginIndex Index of the first character of the range. @param endIndex Index of the character following the last character of the range. @param attributes Specifies attributes to be extracted from the text. If null is specified, all available attributes will be used. @exception NullPointerException if text or attributes is null. @exception IllegalArgumentException if the subrange given by beginIndex and endIndex is out of the text range. @see java.text.Annotation
interface,java/text/AttributedCharacterIterator, An AttributedCharacterIterator allows iteration through both text and related attribute information. An attribute is a key/value pair, identified by the key. No two attributes on a given character can have the same key. The values for an attribute are immutable, or must not be mutated by clients or storage. They are always passed by reference, and not cloned. A run with respect to an attribute is a maximum text range for which: the attribute is undefined or null for the entire range, or the attribute value is defined and has the same non-null value for the entire range. A run with respect to a set of attributes is a maximum text range for which this condition is met for each member attribute. The returned indexes are limited to the range of the iterator. The returned attribute information is limited to runs that contain the current character. Attribute keys are instances of AttributedCharacterIterator.Attribute and its subclasses, such as java.awt.font.TextAttribute. @see AttributedCharacterIterator.Attribute @see java.awt.font.TextAttribute @see AttributedString @see Annotation @since 1.2
method,java/text/AttributedCharacterIterator/Attribute/equals/Object, Compares two objects for equality. This version only returns true for x.equals(y) if x and y refer to the same object, and guarantees this for all subclasses.
field,java/text/AttributedCharacterIterator/Attribute/READING, Attribute key for the reading of some text. In languages where the written form and the pronunciation of a word are only loosely related (such as Japanese), it is often necessary to store the reading (pronunciation) along with the written form. Values are instances of Annotation holding instances of String. @see Annotation @see java.lang.String
class,java/text/Annotation, An Annotation object is used as a wrapper for a text attribute value if the attribute has annotation characteristics. These characteristics are: The text range that the attribute is applied to is critical to the semantics of the range. That means, the attribute cannot be applied to subranges of the text range that it applies to, and, if two adjacent text ranges have the same value for this attribute, the attribute still cannot be applied to the combined range as a whole with this value. The attribute or its value usually do no longer apply if the underlying text is changed. An example is grammatical information attached to a sentence: For the previous sentence, you can say that an example is the subject, but you cannot say the same about an, example, or exam. When the text is changed, the grammatical information typically becomes invalid. Another example is Japanese reading information (yomi). Wrapping the attribute value into an Annotation object guarantees that adjacent text runs don't get merged even if the attribute values are equal, and indicates to text containers that the attribute should be discarded if the underlying text is modified. @see AttributedCharacterIterator @since 1.2
method,java/text/Annotation/getValue/, Returns the value of the attribute, which may be null.
method,java/text/Annotation/Annotation/Object, Constructs an annotation record with the given value, which may be null. @param value The value of the attribute
method,java/text/spi/NumberFormatProvider/getCurrencyInstance/Locale, Returns a new NumberFormat instance which formats monetary values for the specified locale. @param locale the desired locale. @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @return a currency formatter @see java.text.NumberFormat#getCurrencyInstance(java.util.Locale)
method,java/text/spi/NumberFormatProvider/getIntegerInstance/Locale, Returns a new NumberFormat instance which formats integer values for the specified locale. The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN HALF_EVEN}) for formatting, and to parse only the integer part of an input string (see {@link java.text.NumberFormat#isParseIntegerOnly isParseIntegerOnly}). @param locale the desired locale @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @return a number format for integer values @see java.text.NumberFormat#getIntegerInstance(java.util.Locale)
method,java/text/spi/NumberFormatProvider/getNumberInstance/Locale, Returns a new general-purpose NumberFormat instance for the specified locale. @param locale the desired locale @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @return a general-purpose number formatter @see java.text.NumberFormat#getNumberInstance(java.util.Locale)
method,java/text/spi/NumberFormatProvider/getPercentInstance/Locale, Returns a new NumberFormat instance which formats percentage values for the specified locale. @param locale the desired locale @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @return a percent formatter @see java.text.NumberFormat#getPercentInstance(java.util.Locale)
method,java/text/spi/NumberFormatProvider/NumberFormatProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/text/spi/DecimalFormatSymbolsProvider/getInstance/Locale, Returns a new DecimalFormatSymbols instance for the specified locale. @param locale the desired locale @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @return a DecimalFormatSymbols instance. @see java.text.DecimalFormatSymbols#getInstance(java.util.Locale)
method,java/text/spi/DecimalFormatSymbolsProvider/DecimalFormatSymbolsProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/text/spi/DateFormatSymbolsProvider/getInstance/Locale, Returns a new DateFormatSymbols instance for the specified locale. @param locale the desired locale @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @return a DateFormatSymbols instance. @see java.text.DateFormatSymbols#getInstance(java.util.Locale)
method,java/text/spi/DateFormatSymbolsProvider/DateFormatSymbolsProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/text/spi/DateFormatProvider/getTimeInstance/int;Locale, Returns a new DateFormat instance which formats time with the given formatting style for the specified locale. @param style the given formatting style. Either one of {@link java.text.DateFormat#SHORT DateFormat.SHORT}, {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM}, {@link java.text.DateFormat#LONG DateFormat.LONG}, or {@link java.text.DateFormat#FULL DateFormat.FULL}. @param locale the desired locale. @exception IllegalArgumentException if style is invalid, or if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @exception NullPointerException if locale is null @return a time formatter. @see java.text.DateFormat#getTimeInstance(int, java.util.Locale)
method,java/text/spi/DateFormatProvider/getDateInstance/int;Locale, Returns a new DateFormat instance which formats date with the given formatting style for the specified locale. @param style the given formatting style. Either one of {@link java.text.DateFormat#SHORT DateFormat.SHORT}, {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM}, {@link java.text.DateFormat#LONG DateFormat.LONG}, or {@link java.text.DateFormat#FULL DateFormat.FULL}. @param locale the desired locale. @exception IllegalArgumentException if style is invalid, or if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @exception NullPointerException if locale is null @return a date formatter. @see java.text.DateFormat#getDateInstance(int, java.util.Locale)
method,java/text/spi/DateFormatProvider/getDateTimeInstance/int;int;Locale, Returns a new DateFormat instance which formats date and time with the given formatting style for the specified locale. @param dateStyle the given date formatting style. Either one of {@link java.text.DateFormat#SHORT DateFormat.SHORT}, {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM}, {@link java.text.DateFormat#LONG DateFormat.LONG}, or {@link java.text.DateFormat#FULL DateFormat.FULL}. @param timeStyle the given time formatting style. Either one of {@link java.text.DateFormat#SHORT DateFormat.SHORT}, {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM}, {@link java.text.DateFormat#LONG DateFormat.LONG}, or {@link java.text.DateFormat#FULL DateFormat.FULL}. @param locale the desired locale. @exception IllegalArgumentException if dateStyle or timeStyle is invalid, or if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @exception NullPointerException if locale is null @return a date/time formatter. @see java.text.DateFormat#getDateTimeInstance(int, int, java.util.Locale)
method,java/text/spi/DateFormatProvider/DateFormatProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/text/spi/CollatorProvider/getInstance/Locale, Returns a new Collator instance for the specified locale. @param locale the desired locale. @return the Collator for the desired locale. @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @see java.text.Collator#getInstance(java.util.Locale)
method,java/text/spi/CollatorProvider/CollatorProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/text/spi/BreakIteratorProvider/getWordInstance/Locale, Returns a new BreakIterator instance for word breaks for the given locale. @param locale the desired locale @return A break iterator for word breaks @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @see java.text.BreakIterator#getWordInstance(java.util.Locale)
method,java/text/spi/BreakIteratorProvider/getLineInstance/Locale, Returns a new BreakIterator instance for line breaks for the given locale. @param locale the desired locale @return A break iterator for line breaks @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @see java.text.BreakIterator#getLineInstance(java.util.Locale)
method,java/text/spi/BreakIteratorProvider/getCharacterInstance/Locale, Returns a new BreakIterator instance for character breaks for the given locale. @param locale the desired locale @return A break iterator for character breaks @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @see java.text.BreakIterator#getCharacterInstance(java.util.Locale)
method,java/text/spi/BreakIteratorProvider/getSentenceInstance/Locale, Returns a new BreakIterator instance for sentence breaks for the given locale. @param locale the desired locale @return A break iterator for sentence breaks @exception NullPointerException if locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @see java.text.BreakIterator#getSentenceInstance(java.util.Locale)
method,java/text/spi/BreakIteratorProvider/BreakIteratorProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
interface,java/sql/Wrapper, Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance in question is in fact a proxy class. The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond the traditional JDBC API that are specific to a data source. Developers may wish to gain access to these resources that are wrapped (the delegates) as proxy class instances representing the the actual resources. This interface describes a standard mechanism to access these wrapped resources represented by their proxy, to permit direct access to the resource delegates. @since 1.6 
class,java/sql/Types, The class that defines the constants that are used to identify generic SQL types, called JDBC types. This class is never instantiated.
class,java/sql/Timestamp, A thin wrapper around java.util.Date that allows the JDBC API to identify this as an SQL TIMESTAMP value. It adds the ability to hold the SQL TIMESTAMP fractional seconds value, by allowing the specification of fractional seconds to a precision of nanoseconds. A Timestamp also provides formatting and parsing operations to support the JDBC escape syntax for timestamp values. The precision of a Timestamp object is calculated to be either: 19 , which is the number of characters in yyyy-mm-dd hh:mm:ss 20 + s , which is the number of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and s represents the scale of the given Timestamp, its fractional seconds precision. Note: This type is a composite of a java.util.Date and a separate nanoseconds value. Only integral seconds are stored in the java.util.Date component. The fractional seconds - the nanos - are separate. The Timestamp.equals(Object) method never returns true when passed an object that isn't an instance of java.sql.Timestamp, because the nanos component of a date is unknown. As a result, the Timestamp.equals(Object) method is not symmetric with respect to the java.util.Date.equals(Object) method. Also, the hashcode method uses the underlying java.util.Date implementation and therefore does not include nanos in its computation. Due to the differences between the Timestamp class and the java.util.Date class mentioned above, it is recommended that code not view Timestamp values generically as an instance of java.util.Date. The inheritance relationship between Timestamp and java.util.Date really denotes implementation inheritance, and not type inheritance. 
method,java/sql/Timestamp/setTime/long, Sets this Timestamp object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT. @param time the number of milliseconds. @see #getTime @see #Timestamp(long time) @see java.util.Calendar
method,java/sql/Timestamp/valueOf/String, Converts a String object in JDBC timestamp escape format to a Timestamp value. @param s timestamp in format yyyy-mm-dd hh:mm:ss[.f...]. The fractional seconds may be omitted. @return corresponding Timestamp value @exception java.lang.IllegalArgumentException if the given argument does not have the format yyyy-mm-dd hh:mm:ss[.f...]
method,java/sql/Timestamp/equals/Object, Tests to see if this Timestamp object is equal to the given object. This version of the method equals has been added to fix the incorrect signature of Timestamp.equals(Timestamp) and to preserve backward compatibility with existing class files. Note: This method is not symmetric with respect to the equals(Object) method in the base class. @param ts the Object value to compare with @return true if the given Object is an instance of a Timestamp that is equal to this Timestamp object; false otherwise
method,java/sql/Timestamp/before/Timestamp, Indicates whether this Timestamp object is earlier than the given Timestamp object. @param ts the Timestamp value to compare with @return true if this Timestamp object is earlier; false otherwise
method,java/sql/Timestamp/after/Timestamp, Indicates whether this Timestamp object is later than the given Timestamp object. @param ts the Timestamp value to compare with @return true if this Timestamp object is later; false otherwise
method,java/sql/Timestamp/compareTo/Timestamp, Compares this Timestamp object to the given Timestamp object. @param ts the Timestamp object to be compared to this Timestamp object @return the value 0 if the two Timestamp objects are equal; a value less than 0 if this Timestamp object is before the given argument; and a value greater than 0 if this Timestamp object is after the given argument. @since 1.4
method,java/sql/Timestamp/Timestamp/long, Constructs a Timestamp object using a milliseconds time value. The integral seconds are stored in the underlying date value; the fractional seconds are stored in the nanos field of the Timestamp object. @param time milliseconds since January 1, 1970, 00:00:00 GMT. A negative number is the number of milliseconds before January 1, 1970, 00:00:00 GMT. @see java.util.Calendar 
class,java/sql/Time, A thin wrapper around the java.util.Date class that allows the JDBC API to identify this as an SQL TIME value. The Time class adds formatting and parsing operations to support the JDBC escape syntax for time values. The date components should be set to the zero epoch value of January 1, 1970 and should not be accessed. 
method,java/sql/Time/setTime/long, Sets a Time object using a milliseconds time value. @param time milliseconds since January 1, 1970, 00:00:00 GMT; a negative number is milliseconds before January 1, 1970, 00:00:00 GMT
method,java/sql/Time/Time/long, Constructs a Time object using a milliseconds time value. @param time milliseconds since January 1, 1970, 00:00:00 GMT; a negative number is milliseconds before January 1, 1970, 00:00:00 GMT
interface,java/sql/Struct, The standard mapping in the Java programming language for an SQL structured type. A Struct object contains a value for each attribute of the SQL structured type that it represents. By default, an instance ofStruct is valid as long as the application has a reference to it. All methods on the Struct interface must be fully implemented if the JDBC driver supports the data type. @since 1.2
method,java/sql/Statement/setPoolable/boolean, Requests that a Statement be pooled or not pooled. The value specified is a hint to the statement pool implementation indicating whether the applicaiton wants the statement to be pooled. It is up to the statement pool manager as to whether the hint is used. The poolable value of a statement is applicable to both internal statement caches implemented by the driver and external statement caches implemented by application servers and other applications. By default, a Statement is not poolable when created, and a PreparedStatement and CallableStatement are poolable when created. @param poolable		requests that the statement be pooled if true and 						that the statement not be pooled if false @throws SQLException if this method is called on a closed Statement @since 1.6
method,java/sql/Statement/isPoolable/, Returns a value indicating whether the Statement is poolable or not. @return		true if the Statement is poolable; false otherwise @throws SQLException if this method is called on a closed Statement @since 1.6 @see java.sql.Statement#setPoolable(boolean) setPoolable(boolean)
field,java/sql/Statement/CLOSE_CURRENT_RESULT, The constant indicating that the current ResultSet object should be closed when calling getMoreResults. @since 1.4
field,java/sql/Statement/KEEP_CURRENT_RESULT, The constant indicating that the current ResultSet object should not be closed when calling getMoreResults. @since 1.4
field,java/sql/Statement/CLOSE_ALL_RESULTS, The constant indicating that all ResultSet objects that have previously been kept open should be closed when calling getMoreResults. @since 1.4
field,java/sql/Statement/EXECUTE_FAILED, The constant indicating that an error occured while executing a batch statement. @since 1.4
field,java/sql/Statement/RETURN_GENERATED_KEYS, The constant indicating that generated keys should be made available for retrieval. @since 1.4
field,java/sql/Statement/NO_GENERATED_KEYS, The constant indicating that generated keys should not be made available for retrieval. @since 1.4
interface,java/sql/Savepoint, The representation of a savepoint, which is a point within the current transaction that can be referenced from the Connection.rollback method. When a transaction is rolled back to a savepoint all changes made after that savepoint are undone. Savepoints can be either named or unnamed. Unnamed savepoints are identified by an ID generated by the underlying data source. @since 1.4
class,java/sql/SQLWarning, An exception that provides information on database access warnings. Warnings are silently chained to the object whose method caused it to be reported. Warnings may be retrieved from Connection, Statement, and ResultSet objects. Trying to retrieve a warning on a connection after it has been closed will cause an exception to be thrown. Similarly, trying to retrieve a warning on a statement after it has been closed or on a result set after it has been closed will cause an exception to be thrown. Note that closing a statement also closes a result set that it might have produced. @see Connection#getWarnings @see Statement#getWarnings @see ResultSet#getWarnings 
method,java/sql/SQLWarning/getNextWarning/, Retrieves the warning chained to this SQLWarning object by setNextWarning. @return the next SQLException in the chain; null if none @see #setNextWarning
method,java/sql/SQLWarning/SQLWarning/String;String;int, Constructs a SQLWarning object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the warning @param SQLState an XOPEN or SQL:2003 code identifying the warning @param vendorCode a database vendor-specific warning code
method,java/sql/SQLWarning/SQLWarning/String;String, Constructs a SQLWarning object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the warning @param SQLState an XOPEN or SQL:2003 code identifying the warning
method,java/sql/SQLWarning/SQLWarning/String, Constructs a SQLWarning object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the warning 
method,java/sql/SQLWarning/SQLWarning/, Constructs a SQLWarning object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. 
method,java/sql/SQLWarning/SQLWarning/Throwable, Constructs a SQLWarning object with a given cause. The SQLState is initialized to null and the vendor code is initialized to 0. The reason is initialized to null if cause==null or to cause.toString() if cause!=null. @param cause the underlying reason for this SQLWarning (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown.
method,java/sql/SQLWarning/SQLWarning/String;Throwable, Constructs a SQLWarning object with a given reason and cause. The SQLState is initialized to null and the vendor code is initialized to 0. @param reason a description of the warning @param cause the underlying reason for this SQLWarning (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown.
method,java/sql/SQLWarning/SQLWarning/String;String;Throwable, Constructs a SQLWarning object with a given reason, SQLState and cause. The vendor code is initialized to 0. @param reason a description of the warning @param SQLState an XOPEN or SQL:2003 code identifying the warning @param cause the underlying reason for this SQLWarning (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown.
method,java/sql/SQLWarning/SQLWarning/String;String;int;Throwable, Constructs aSQLWarning object with a given reason, SQLState, vendorCode and cause. @param reason a description of the warning @param SQLState an XOPEN or SQL:2003 code identifying the warning @param vendorCode a database vendor-specific warning code @param cause the underlying reason for this SQLWarning (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown.
class,java/sql/SQLTransientException, The subclass of {@link SQLException} is thrown in situations where a previoulsy failed operation might be able to succeed when the operation is retried without any intervention by application-level functionality. @since 1.6
method,java/sql/SQLTransientException/SQLTransientException/, Constructs a SQLTransientException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLTransientException/SQLTransientException/String, Constructs a SQLTransientException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLTransientException/SQLTransientException/String;String, Constructs a SQLTransientException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLTransientException/SQLTransientException/String;String;int, Constructs a SQLTransientException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
class,java/sql/SQLTransientConnectionException, The subclass of {@link SQLException} for the SQLState class value '08', representing that the connection operation that failed might be able to succeed when the operation is retried without any application-level changes. @since 1.6
method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/, Constructs a SQLTransientConnectionException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String, Constructs a SQLTransientConnectionException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String;String, Constructs a SQLTransientConnectionException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String;String;int, Constructs a SQLTransientConnectionException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String;Throwable, Constructs a SQLTransientConnectionException object with a given reason and cause. The SQLState is initialized to null and the vendor code is initialized to 0. @param reason a description of the exception. @param cause the underlying reason for this SQLException(which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
class,java/sql/SQLTransactionRollbackException, The subclass of {@link SQLException} thrown when the SQLState class value is '40'. This indicates that the current statement was automatically rolled back by the database becuase of deadlock or other transaction serialization failures. @since 1.6
method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/, Constructs a SQLTransactionRollbackException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String, Constructs a SQLTransactionRollbackException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String;String, Constructs a SQLTransactionRollbackException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String;String;int, Constructs a SQLTransactionRollbackException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
class,java/sql/SQLTimeoutException, The subclass of {@link SQLException} thrown when the timeout specified by Statement has expired. This exception does not correspond to a standard SQLState. @since 1.6 
method,java/sql/SQLTimeoutException/SQLTimeoutException/, Constructs a SQLTimeoutException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLTimeoutException/SQLTimeoutException/String, Constructs a SQLTimeoutException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLTimeoutException/SQLTimeoutException/String;String, Constructs a SQLTimeoutException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLTimeoutException/SQLTimeoutException/String;String;int, Constructs a SQLTimeoutException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
class,java/sql/SQLSyntaxErrorException, The subclass of {@link SQLException} thrown when the SQLState class value is '42'. This indicates that the in-progress query has violated SQL syntax rules. @since 1.6
method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/, Constructs a SQLSyntaxErrorException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String, Constructs a SQLSyntaxErrorException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String;String, Constructs a SQLSyntaxErrorException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String;String;int, Constructs a SQLSyntaxErrorException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String;String;Throwable, Constructs a SQLSyntaxErrorException object with a given reason, SQLState and cause. The vendor code is initialized to 0. @param reason a description of the exception. @param SQLState an XOPEN or SQL:2003 code identifying the exception @param cause the (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
method,java/sql/SQLRecoverableException/SQLRecoverableException/, Constructs a SQLRecoverableException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLRecoverableException/SQLRecoverableException/String, Constructs a SQLRecoverableException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLRecoverableException/SQLRecoverableException/String;String, Constructs a SQLRecoverableException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLRecoverableException/SQLRecoverableException/String;String;int, Constructs a SQLRecoverableException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
class,java/sql/SQLPermission, The permission for which the SecurityManager will check when code that is running in an applet calls the DriverManager.setLogWriter method or the DriverManager.setLogStream (deprecated) method. If there is no SQLPermission object, these methods throw a java.lang.SecurityException as a runtime exception. A SQLPermission object contains a name (also referred to as a target name) but no actions list; there is either a named permission or there is not. The target name is the name of the permission (see below). The naming convention follows the hierarchical property naming convention. In addition, an asterisk may appear at the end of the name, following a ., or by itself, to signify a wildcard match. For example: loadLibrary.* or * is valid, but *loadLibrary or a*b is not valid. The following table lists all the possible SQLPermission target names. Currently, the only name allowed is setLog. The table gives a description of what the permission allows and a discussion of the risks of granting code the permission. Permission Target Name What the Permission Allows Risks of Allowing this Permission setLog Setting of the logging stream This is a dangerous permission to grant. The contents of the log may contain usernames and passwords, SQL statements, and SQL data. The person running an applet decides what permissions to allow and will run the Policy Tool to create an SQLPermission in a policy file. A programmer does not use a constructor directly to create an instance of SQLPermission but rather uses a tool. @since 1.3 @see java.security.BasicPermission @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @see java.lang.SecurityManager
class,java/sql/SQLNonTransientException, The subclass of {@link SQLException} thrown when an instance where a retry of the same operation would fail unless the cause of the SQLException is corrected. @since 1.6
method,java/sql/SQLNonTransientException/SQLNonTransientException/, Constructs a SQLNonTransientException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLNonTransientException/SQLNonTransientException/String, Constructs a SQLNonTransientException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLNonTransientException/SQLNonTransientException/String;String, Constructs a SQLNonTransientException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLNonTransientException/SQLNonTransientException/String;String;int, Constructs a SQLNonTransientException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
class,java/sql/SQLNonTransientConnectionException, The subclass of {@link SQLException} thrown for the SQLState class value '08', representing that the connection operation that failed will not succeed when the operation is retried without the cause of the failure being corrected. @since 1.6
method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/, Constructs a SQLNonTransientConnectionException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String, Constructs a SQLNonTransientConnectionException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String;String, Constructs a SQLNonTransientConnectionException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String;String;int, Constructs a SQLNonTransientConnectionException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String;String;Throwable, Constructs a SQLNonTransientConnectionException object with a given reason, SQLState and cause. The vendor code is initialized to 0. @param reason a description of the exception. @param SQLState an XOPEN or SQL:2003 code identifying the exception @param cause the (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
class,java/sql/SQLInvalidAuthorizationSpecException, The subclass of {@link SQLException} thrown when the SQLState class value is '28'. This indicated that the authorization credentials presented during connection establishment are not valid. @since 1.6
method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/, Constructs a SQLInvalidAuthorizationSpecException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/String, Constructs a SQLInvalidAuthorizationSpecException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/String;String, Constructs a SQLInvalidAuthorizationSpecException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/String;String;int, Constructs a SQLInvalidAuthorizationSpecException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
class,java/sql/SQLIntegrityConstraintViolationException, The subclass of {@link SQLException} thrown when the SQLState class value is '23'. This indicates that an integrity constraint (foreign key, primary key or unique key) has been violated. @since 1.6	
method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/, Constructs a SQLIntegrityConstraintViolationException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String, Constructs a SQLIntegrityConstraintViolationException with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;String, Constructs a SQLIntegrityConstraintViolationException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;String;int, Constructs a SQLIntegrityConstraintViolationException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;Throwable, Constructs a SQLIntegrityConstraintViolationException object with a given reason and cause. The SQLState is initialized to null and the vendor code is initialized to 0. @param reason a description of the exception. @param cause the (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;String;int;Throwable, Constructs a SQLIntegrityConstraintViolationException object with a given reason, SQLState, vendorCode and cause. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor-specific exception code @param cause the (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
class,java/sql/SQLFeatureNotSupportedException, The subclass of {@link SQLException} thrown when the SQLState class value is '0A' ( the value is 'zero' A). This indicates that the JDBC driver does not support an optional JDBC feature. Optional JDBC features can fall into the fallowing categories:no support for an optional feature no support for an optional overloaded methodno support for an optional mode for a method. The mode for a method is determined based on constants passed as parameter values to a method @since 1.6
method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/, Constructs a SQLFeatureNotSupportedException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String, Constructs a SQLFeatureNotSupportedException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String;String, Constructs a SQLFeatureNotSupportedException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String;String;int, Constructs a SQLFeatureNotSupportedException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String;String;Throwable, Constructs a SQLFeatureNotSupportedException object with a given reason, SQLState and cause. The vendor code is initialized to 0. @param reason a description of the exception. @param SQLState an XOPEN or SQL:2003 code identifying the exception @param cause the (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
class,java/sql/SQLException, An exception that provides information on a database access error or other errors. Each SQLException provides several kinds of information: a string describing the error. This is used as the Java Exception message, available via the method getMesasge. a SQLstate string, which follows either the XOPEN SQLstate conventions or the SQL:2003 conventions. The values of the SQLState string are described in the appropriate spec. The DatabaseMetaData method getSQLStateType can be used to discover whether the driver returns the XOPEN type or the SQL:2003 type. an integer error code that is specific to each vendor. Normally this will	 be the actual error code returned by the underlying database. a chain to a next Exception. This can be used to provide additional 	 error information. the causal relationship, if any for this SQLException. 
method,java/sql/SQLException/getErrorCode/, Retrieves the vendor-specific exception code for this SQLException object. @return the vendor's error code
method,java/sql/SQLException/SQLException/String;String;int, Constructs a SQLException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor-specific exception code
method,java/sql/SQLException/SQLException/String;String, Constructs a SQLException object with a given reason and SQLState. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception 
method,java/sql/SQLException/SQLException/String, Constructs a SQLException object with a given reason. The SQLState is initialized to null and the vender code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception 
method,java/sql/SQLException/SQLException/, Constructs a SQLException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. 
class,java/sql/SQLDataException, The subclass of {@link SQLException} thrown when the SQLState class value is '22'. This indicates various data errors, including but not limited to not-allowed conversion, division by 0 and invalid arguments to functions. @since 1.6
method,java/sql/SQLDataException/SQLDataException/, Constructs a SQLDataException object. The reason, SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLDataException/SQLDataException/String, Constructs a SQLDataException object with a given reason. The SQLState is initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @since 1.6
method,java/sql/SQLDataException/SQLDataException/String;String, Constructs a SQLDataException object with a given reason and SQLState. The vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @since 1.6
method,java/sql/SQLDataException/SQLDataException/String;String;int, Constructs a SQLDataException object with a given reason, SQLState and vendorCode. The cause is not initialized, and may subsequently be initialized by a call to {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode a database vendor specific exception code @since 1.6
interface,java/sql/SQLData, The interface used for the custom mapping of an SQL user-defined type (UDT) to a class in the Java programming language. The class object for a class implementing the SQLData interface will be entered in the appropriate Connection object's type map along with the SQL name of the UDT for which it is a custom mapping. Typically, a SQLData implementation will define a field for each attribute of an SQL structured type or a single field for an SQL DISTINCT type. When the UDT is retrieved from a data source with the ResultSet.getObject method, it will be mapped as an instance of this class. A programmer can operate on this class instance just as on any other object in the Java programming language and then store any changes made to it by calling the PreparedStatement.setObject method, which will map it back to the SQL type. It is expected that the implementation of the class for a custom mapping will be done by a tool. In a typical implementation, the programmer would simply supply the name of the SQL UDT, the name of the class to which it is being mapped, and the names of the fields to which each of the attributes of the UDT is to be mapped. The tool will use this information to implement the SQLData.readSQL and SQLData.writeSQL methods. The readSQL method calls the appropriate SQLInput methods to read each attribute from an SQLInput object, and the writeSQL method calls SQLOutput methods to write each attribute back to the data source via an SQLOutput object. An application programmer will not normally call SQLData methods directly, and the SQLInput and SQLOutput methods are called internally by SQLData methods, not by application code. @since 1.2
class,java/sql/SQLClientInfoException, The subclass of {@link SQLException} is thrown when one or more client info properties could not be set on a Connection. In addition to the information provided by SQLException, a SQLClientInfoException provides a list of client info properties that were not set. Some databases do not allow multiple client info properties to be set atomically. For those databases, it is possible that some of the client info properties had been set even though the Connection.setClientInfo method threw an exception. An application can use the getFailedProperties method to retrieve a list of client info properties that were not set. The properties are identified by passing a Map&lt;String,ClientInfoStatus&gt; to the appropriate SQLClientInfoException constructor. @see ClientInfoStatus @see Connection#setClientInfo @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/, Constructs a SQLClientInfoException Object. The reason, SQLState, and failedProperties list are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/Map, Constructs a SQLClientInfoException object initialized with a given failedProperties. The reason and SQLState are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param failedProperties 		A Map containing the property values that could not 					be set. The keys in the Map 					contain the names of the client info 					properties that could not be set and 					the values contain one of the reason codes 					defined in ClientInfoStatus @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/Map;Throwable, Constructs a SQLClientInfoException object initialized with a given cause and failedProperties. The reason is initialized to null if cause==null or to cause.toString() if cause!=null and the vendor code is initialized to 0. @param failedProperties 		A Map containing the property values that could not 					be set. The keys in the Map 					contain the names of the client info 					properties that could not be set and 					the values contain one of the reason codes 					defined in ClientInfoStatus @param cause					the (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/String;Map, Constructs a SQLClientInfoException object initialized with a given reason and failedProperties. The SQLState is initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason				a description of the exception @param failedProperties 		A Map containing the property values that could not 					be set. The keys in the Map 					contain the names of the client info 					properties that could not be set and 					the values contain one of the reason codes 					defined in ClientInfoStatus @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/String;Map;Throwable, Constructs a SQLClientInfoException object initialized with a given reason, cause and failedProperties. The SQLState is initialized to null and the vendor code is initialized to 0. @param reason				a description of the exception @param failedProperties 		A Map containing the property values that could not 					be set. The keys in the Map 					contain the names of the client info 					properties that could not be set and 					the values contain one of the reason codes 					defined in ClientInfoStatus @param cause					the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/String;String;Map, Constructs a SQLClientInfoException object initialized with a given reason, SQLState and failedProperties. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is initialized to 0. @param reason				a description of the exception @param SQLState				an XOPEN or SQL:2003 code identifying the exception @param failedProperties 		A Map containing the property values that could not 					be set. The keys in the Map 					contain the names of the client info 					properties that could not be set and 					the values contain one of the reason codes 					defined in ClientInfoStatus @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/String;String;Map;Throwable, Constructs a SQLClientInfoException object initialized with a given reason, SQLState, cause and failedProperties. The vendor code is initialized to 0. @param reason				a description of the exception @param SQLState				an XOPEN or SQL:2003 code identifying the exception @param failedProperties 		A Map containing the property values that could not 					be set. The keys in the Map 					contain the names of the client info 					properties that could not be set and 					the values contain one of the reason codes 					defined in ClientInfoStatus @param cause					the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/String;String;int;Map, Constructs a SQLClientInfoException object initialized with a given reason, SQLState, vendorCode and failedProperties. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason				a description of the exception @param SQLState				an XOPEN or SQL:2003 code identifying the exception @param vendorCode			a database vendor-specific exception code @param failedProperties 		A Map containing the property values that could not 					be set. The keys in the Map 					contain the names of the client info 					properties that could not be set and 					the values contain one of the reason codes 					defined in ClientInfoStatus @since 1.6
method,java/sql/SQLClientInfoException/SQLClientInfoException/String;String;int;Map;Throwable, Constructs a SQLClientInfoException object initialized with a given reason, SQLState, cause, vendorCode and failedProperties. @param reason				a description of the exception @param SQLState				an XOPEN or SQL:2003 code identifying the exception @param vendorCode			a database vendor-specific exception code @param failedProperties 		A Map containing the property values that could not 					be set. The keys in the Map 					contain the names of the client info 					properties that could not be set and 					the values contain one of the reason codes 					defined in ClientInfoStatus @param cause			the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
interface,java/sql/RowId, The representation (mapping) in the Java programming language of an SQL ROWID value. An SQL ROWID is a built-in type, a value of which can be thought of as an address for its identified row in a database table. Whether that address is logical or, in any respects, physical is determined by its originating data source. Methods in the interfaces ResultSet, CallableStatement, and PreparedStatement, such as getRowId and setRowId allow a programmer to access a SQL ROWID value. The RowId interface provides a method for representing the value of the ROWID as a byte array or as a String. The method getRowIdLifetime in the interface DatabaseMetaData, can be used to determine if a RowId object remains valid for the duration of the transaction in which the RowId was created, the duration of the session in which the RowId was created, or, effectively, for as long as its identified row is not deleted. In addition to specifying the duration of its valid lifetime outside its originating data source, getRowIdLifetime specifies the duration of a ROWID value's valid lifetime within its originating data source. In this, it differs from a large object, because there is no limit on the valid lifetime of a large object within its originating data source. All methods on the RowId interface must be fully implemented if the JDBC driver supports the data type. @see java.sql.DatabaseMetaData @since 1.6
method,java/sql/RowId/equals/Object, Compares this RowId to the specified object. The result is true if and only if the argument is not null and is a RowId object that represents the same ROWID as this object. It is important to consider both the origin and the valid lifetime of a RowId when comparing it to another RowId. If both are valid, and both are from the same table on the same data source, then if they are equal they identify the same row; if one or more is no longer guaranteed to be valid, or if they originate from different data sources, or different tables on the same data source, they may be equal but still not identify the same row. @param obj the Object to compare this RowId object against. @return true if the RowIds are equal; false otherwise @since 1.6
interface,java/sql/ResultSet, A table of data representing a database result set, which is usually generated by executing a statement that queries the database. A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set. A default ResultSet object is not updatable and has a cursor that moves forward only. Thus, you can iterate through it only once and only from the first row to the last row. It is possible to produce ResultSet objects that are scrollable and/or updatable. The following code fragment, in which con is a valid Connection object, illustrates how to make a result set that is scrollable and insensitive to updates by others, and that is updatable. See ResultSet fields for other options. Statement stmt = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); ResultSet rs = stmt.executeQuery(SELECT a, b FROM TABLE2); // rs will be scrollable, will not show changes made by others, // and will be updatable The ResultSet interface provides getter methods (getBoolean, getLong, and so on) for retrieving column values from the current row. Values can be retrieved using either the index number of the column or the name of the column. In general, using the column index will be more efficient. Columns are numbered from 1. For maximum portability, result set columns within each row should be read in left-to-right order, and each column should be read only once. For the getter methods, a JDBC driver attempts to convert the underlying data to the Java type specified in the getter method and returns a suitable Java value. The JDBC specification has a table showing the allowable mappings from SQL types to Java types that can be used by the ResultSet getter methods. Column names used as input to getter methods are case insensitive. When a getter method is called with a column name and several columns have the same name, the value of the first matching column will be returned. The column name option is designed to be used when column names are used in the SQL query that generated the result set. For columns that are NOT explicitly named in the query, it is best to use column numbers. If column names are used, the programmer should take care to guarantee that they uniquely refer to the intended columns, which can be assured with the SQL AS clause. A set of updater methods were added to this interface in the JDBC 2.0 API (JavaTM 2 SDK, Standard Edition, version 1.2). The comments regarding parameters to the getter methods also apply to parameters to the updater methods. The updater methods may be used in two ways: to update a column value in the current row. In a scrollable ResultSet object, the cursor can be moved backwards and forwards, to an absolute position, or to a position relative to the current row. The following code fragment updates the NAME column in the fifth row of the ResultSet object rs and then uses the method updateRow to update the data source table from which rs was derived. rs.absolute(5); // moves the cursor to the fifth row of rs rs.updateString(NAME, AINSWORTH); // updates the // NAME column of row 5 to be AINSWORTH rs.updateRow(); // updates the row in the data source to insert column values into the insert row. An updatable ResultSet object has a special row associated with it that serves as a staging area for building a row to be inserted. The following code fragment moves the cursor to the insert row, builds a three-column row, and inserts it into rs and into the data source table using the method insertRow. rs.moveToInsertRow(); // moves cursor to the insert row rs.updateString(1, AINSWORTH); // updates the // first column of the insert row to be AINSWORTH rs.updateInt(2,35); // updates the second column to be 35 rs.updateBoolean(3, true); // updates the third column to true rs.insertRow(); rs.moveToCurrentRow(); A ResultSet object is automatically closed when the Statement object that generated it is closed, re-executed, or used to retrieve the next result from a sequence of multiple results. The number, types and properties of a ResultSet object's columns are provided by the ResulSetMetaData object returned by the ResultSet.getMetaData method. @see Statement#executeQuery @see Statement#getResultSet @see ResultSetMetaData 
method,java/sql/ResultSet/getString/int, Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getBoolean/int, Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language. If the designated column has a datatype of CHAR or VARCHAR and contains a 0 or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains a 0, a value of false is returned. If the designated column has a datatype of CHAR or VARCHAR and contains a 1 or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains a 1, a value of true is returned. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is false @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getByte/int, Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getShort/int, Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getInt/int, Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getLong/int, Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getFloat/int, Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getDouble/int, Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getBytes/int, Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language. The bytes represent the raw values returned by the driver. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getDate/int, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getTime/int, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getTimestamp/int, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getString/String, Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getBoolean/String, Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language. If the designated column has a datatype of CHAR or VARCHAR and contains a 0 or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains a 0, a value of false is returned. If the designated column has a datatype of CHAR or VARCHAR and contains a 1 or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains a 1, a value of true is returned. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is false @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getByte/String, Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getShort/String, Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getInt/String, Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getLong/String, Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getFloat/String, Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getDouble/String, Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is 0 @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getBytes/String, Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language. The bytes represent the raw values returned by the driver. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getDate/String, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getTime/String, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getTimestamp/String, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value; if the value is SQL NULL, the value returned is null @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getObject/int, Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. This method will return the value of the given column as a Java object. The type of the Java object will be the default Java object type corresponding to the column's SQL type, following the mapping for built-in types specified in the JDBC specification. If the value is an SQL NULL, the driver returns a Java null. This method may also be used to read database-specific abstract data types. In the JDBC 2.0 API, the behavior of method getObject is extended to materialize data of SQL user-defined types. If Connection.getTypeMap does not throw a SQLFeatureNotSupportedException, then when a column contains a structured or distinct value, the behavior of this method is as if it were a call to: getObject(columnIndex, this.getStatement().getConnection().getTypeMap()). If Connection.getTypeMap does throw a SQLFeatureNotSupportedException, then structured values are not supported, and distinct values are mapped to the default Java class as determined by the underlying SQL type of the DISTINCT type. @param columnIndex the first column is 1, the second is 2, ... @return a java.lang.Object holding the column value @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getObject/String, Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. This method will return the value of the given column as a Java object. The type of the Java object will be the default Java object type corresponding to the column's SQL type, following the mapping for built-in types specified in the JDBC specification. If the value is an SQL NULL, the driver returns a Java null. This method may also be used to read database-specific abstract data types. In the JDBC 2.0 API, the behavior of the method getObject is extended to materialize data of SQL user-defined types. When a column contains a structured or distinct value, the behavior of this method is as if it were a call to: getObject(columnIndex, this.getStatement().getConnection().getTypeMap()). @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return a java.lang.Object holding the column value @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/findColumn/String, Maps the given ResultSet column label to its ResultSet column index. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column index of the given column name @exception SQLException if the ResultSet object does not contain a column labeled columnLabel, a database access error occurs or this method is called on a closed result set
method,java/sql/ResultSet/getCharacterStream/int, Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object. @return a java.io.Reader object that contains the column value; if the value is SQL NULL, the value returned is null in the Java programming language. @param columnIndex the first column is 1, the second is 2, ... @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getCharacterStream/String, Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return a java.io.Reader object that contains the column value; if the value is SQL NULL, the value returned is null in the Java programming language @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getBigDecimal/int, Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision. @param columnIndex the first column is 1, the second is 2, ... @return the column value (full precision); if the value is SQL NULL, the value returned is null in the Java programming language. @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getBigDecimal/String, Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @return the column value (full precision); if the value is SQL NULL, the value returned is null in the Java programming language. @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getDate/int;Calendar, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information. @param columnIndex the first column is 1, the second is 2, ... @param cal the java.util.Calendar object to use in constructing the date @return the column value as a java.sql.Date object; if the value is SQL NULL, the value returned is null in the Java programming language @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getDate/String;Calendar, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @param cal the java.util.Calendar object to use in constructing the date @return the column value as a java.sql.Date object; if the value is SQL NULL, the value returned is null in the Java programming language @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getTime/int;Calendar, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information. @param columnIndex the first column is 1, the second is 2, ... @param cal the java.util.Calendar object to use in constructing the time @return the column value as a java.sql.Time object; if the value is SQL NULL, the value returned is null in the Java programming language @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getTime/String;Calendar, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @param cal the java.util.Calendar object to use in constructing the time @return the column value as a java.sql.Time object; if the value is SQL NULL, the value returned is null in the Java programming language @exception SQLException if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getTimestamp/int;Calendar, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information. @param columnIndex the first column is 1, the second is 2, ... @param cal the java.util.Calendar object to use in constructing the timestamp @return the column value as a java.sql.Timestamp object; if the value is SQL NULL, the value returned is null in the Java programming language @exception SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set @since 1.2
method,java/sql/ResultSet/getTimestamp/String;Calendar, Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information. @param columnLabel the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column @param cal the java.util.Calendar object to use in constructing the date @return the column value as a java.sql.Timestamp object; if the value is SQL NULL, the value returned is null in the Java programming language @exception SQLException if the columnLabel is not valid or if a database access error occurs or this method is called on a closed result set @since 1.2
field,java/sql/ResultSet/FETCH_FORWARD, The constant indicating that the rows in a result set will be processed in a forward direction; first-to-last. This constant is used by the method setFetchDirection as a hint to the driver, which the driver may ignore. @since 1.2
field,java/sql/ResultSet/FETCH_REVERSE, The constant indicating that the rows in a result set will be processed in a reverse direction; last-to-first. This constant is used by the method setFetchDirection as a hint to the driver, which the driver may ignore. @since 1.2
field,java/sql/ResultSet/FETCH_UNKNOWN, The constant indicating that the order in which rows in a result set will be processed is unknown. This constant is used by the method setFetchDirection as a hint to the driver, which the driver may ignore.
field,java/sql/ResultSet/TYPE_FORWARD_ONLY, The constant indicating the type for a ResultSet object whose cursor may move only forward. @since 1.2
field,java/sql/ResultSet/CONCUR_READ_ONLY, The constant indicating the concurrency mode for a ResultSet object that may NOT be updated. @since 1.2
field,java/sql/ResultSet/CONCUR_UPDATABLE, The constant indicating the concurrency mode for a ResultSet object that may be updated. @since 1.2
interface,java/sql/Ref, The mapping in the Java programming language of an SQL REF value, which is a reference to an SQL structured type value in the database. SQL REF values are stored in a table that contains instances of a referenceable SQL structured type, and each REF value is a unique identifier for one instance in that table. An SQL REF value may be used in place of the SQL structured type it references, either as a column value in a table or an attribute value in a structured type. Because an SQL REF value is a logical pointer to an SQL structured type, a Ref object is by default also a logical pointer. Thus, retrieving an SQL REF value as a Ref object does not materialize the attributes of the structured type on the client. A Ref object can be stored in the database using the PreparedStatement.setRef method. All methods on the Ref interface must be fully implemented if the JDBC driver supports the data type. @see Struct @since 1.2
method,java/sql/PreparedStatement/setBoolean/int;boolean, Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setByte/int;byte, Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setShort/int;short, Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setInt/int;int, Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setLong/int;long, Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setFloat/int;float, Sets the designated parameter to the given Java float value. The driver converts this to an SQL REAL value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setDouble/int;double, Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setBigDecimal/int;BigDecimal, Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setString/int;String, Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the driver's limits on VARCHAR values) when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setBytes/int;byte[], Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's size relative to the driver's limits on VARBINARY values) when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setDate/int;Date, Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setTime/int;Time, Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setTimestamp/int;Timestamp, Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement 
method,java/sql/PreparedStatement/setBinaryStream/int;InputStream;int, Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the java input stream which contains the binary parameter value @param length the number of bytes in the stream @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement
method,java/sql/PreparedStatement/setObject/int;Object;int, Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the object containing the input parameter value @param targetSqlType the SQL type (as defined in java.sql.Types) to be sent to the database @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @exception SQLFeatureNotSupportedException if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type @see Types
method,java/sql/PreparedStatement/setCharacterStream/int;Reader;int, Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. @param parameterIndex the first parameter is 1, the second is 2, ... @param reader the java.io.Reader object that contains the Unicode data @param length the number of characters in the stream @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @since 1.2
method,java/sql/PreparedStatement/setRef/int;Ref, Sets the designated parameter to the given REF(&lt;structured-type&gt;) value. The driver converts this to an SQL REF value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x an SQL REF value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.2
method,java/sql/PreparedStatement/setBlob/int;Blob, Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x a Blob object that maps an SQL BLOB value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.2
method,java/sql/PreparedStatement/setClob/int;Clob, Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x a Clob object that maps an SQL CLOB value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.2
method,java/sql/PreparedStatement/setArray/int;Array, Sets the designated parameter to the given java.sql.Array object. The driver converts this to an SQL ARRAY value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x an Array object that maps an SQL ARRAY value @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.2
method,java/sql/PreparedStatement/setDate/int;Date;Calendar, Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @param cal the Calendar object the driver will use to construct the date @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @since 1.2
method,java/sql/PreparedStatement/setTime/int;Time;Calendar, Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @param cal the Calendar object the driver will use to construct the time @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @since 1.2
method,java/sql/PreparedStatement/setTimestamp/int;Timestamp;Calendar, Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, which the driver then sends to the database. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @param cal the Calendar object the driver will use to construct the timestamp @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @since 1.2
method,java/sql/PreparedStatement/setURL/int;URL, Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the java.net.URL object to be set @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.4
method,java/sql/PreparedStatement/setRowId/int;RowId, Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID value when it sends it to the database @param parameterIndex the first parameter is 1, the second is 2, ... @param x the parameter value @throws SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.6
method,java/sql/PreparedStatement/setNString/int;String, Sets the designated paramter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument's size relative to the driver's limits on NVARCHAR values) when it sends it to the database. @param parameterIndex of the first parameter is 1, the second is 2, ... @param value the parameter value @throws SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.6
method,java/sql/PreparedStatement/setNCharacterStream/int;Reader;long, Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. @param parameterIndex of the first parameter is 1, the second is 2, ... @param value the parameter value @param length the number of characters in the parameter data. @throws SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.6
method,java/sql/PreparedStatement/setNClob/int;NClob, Sets the designated parameter to a java.sql.NClob object. The driver converts this to a SQL NCLOB value when it sends it to the database. @param parameterIndex of the first parameter is 1, the second is 2, ... @param value the parameter value @throws SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.6
method,java/sql/PreparedStatement/setSQLXML/int;SQLXML, Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database. @param parameterIndex index of the first parameter is 1, the second is 2, ... @param xmlObject a SQLXML object that maps an SQL XML value @throws SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.6
method,java/sql/PreparedStatement/setBinaryStream/int;InputStream;long, Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. @param parameterIndex the first parameter is 1, the second is 2, ... @param x the java input stream which contains the binary parameter value @param length the number of bytes in the stream @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @since 1.6
method,java/sql/PreparedStatement/setCharacterStream/int;Reader;long, Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. @param parameterIndex the first parameter is 1, the second is 2, ... @param reader the java.io.Reader object that contains the Unicode data @param length the number of characters in the stream @exception SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement @since 1.6
method,java/sql/PreparedStatement/setBlob/int;InputStream, Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBlob which takes a length parameter. @param parameterIndex index of the first parameter is 1, the second is 2, ... @param inputStream An object that contains the data to set the parameter value to. @throws SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed PreparedStatement or if parameterIndex does not correspond to a parameter marker in the SQL statement, @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.6
method,java/sql/PreparedStatement/setNClob/int;Reader, Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNClob which takes a length parameter. @param parameterIndex index of the first parameter is 1, the second is 2, ... @param reader An object that contains the data to set the parameter value to. @throws SQLException if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.6
interface,java/sql/ParameterMetaData, An object that can be used to get information about the types and properties for each parameter marker in a PreparedStatement object. For some queries and driver implementations, the data that would be returned by a ParameterMetaData object may not be available until the PreparedStatement has been executed.Some driver implementations may not be able to provide information about the types and properties for each parameter marker in a CallableStatement object. @since 1.4
interface,java/sql/NClob, The mapping in the JavaTM programming language for the SQL NCLOB type. An SQL NCLOB is a built-in type that stores a Character Large Object using the National Character Set as a column value in a row of a database table. The NClob interface extends the Clob interface which provides provides methods for getting the length of an SQL NCLOB value, for materializing a NCLOB value on the client, and for searching for a substring or NCLOB object within a NCLOB value. A NClob object, just like a Clob object, is valid for the duration of the transaction in which it was created. Methods in the interfaces {@link ResultSet}, {@link CallableStatement}, and {@link PreparedStatement}, such as getNClob and setNClob allow a programmer to access an SQL NCLOB value. In addition, this interface has methods for updating a NCLOB value. All methods on the NClob interface must be fully implemented if the JDBC driver supports the data type. @since 1.6
class,java/sql/DriverPropertyInfo, Driver properties for making a connection. The DriverPropertyInfo class is of interest only to advanced programmers who need to interact with a Driver via the method getDriverProperties to discover and supply properties for connections.
field,java/sql/DriverPropertyInfo/description, A brief description of the property, which may be null.
field,java/sql/DriverPropertyInfo/required, The required field is true if a value must be supplied for this property during Driver.connect and false otherwise.
field,java/sql/DriverPropertyInfo/value, The value field specifies the current value of the property, based on a combination of the information supplied to the method getPropertyInfo, the Java environment, and the driver-supplied default values. This field may be null if no value is known.
field,java/sql/DriverPropertyInfo/choices, An array of possible values if the value for the field DriverPropertyInfo.value may be selected from a particular set of values; otherwise null.
method,java/sql/DriverManager/setLogWriter/PrintWriter, Sets the logging/tracing PrintWriter object that is used by the DriverManager and all drivers. There is a minor versioning problem created by the introduction of the method setLogWriter. The method setLogWriter cannot create a PrintStream object that will be returned by getLogStream---the Java platform does not provide a backward conversion. As a result, a new application that uses setLogWriter and also uses a JDBC 1.0 driver that uses getLogStream will likely not see debugging information written by that driver. Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks to see that there is an SQLPermission object before setting the logging stream. If a SecurityManager exists and its checkPermission method denies setting the log writer, this method throws a java.lang.SecurityException. @param out the new logging/tracing PrintStream object; null to disable logging and tracing @throws SecurityException if a security manager exists and its checkPermission method denies setting the log writer @see SecurityManager#checkPermission @see #getLogWriter @since 1.2
method,java/sql/DriverManager/getDrivers/, Retrieves an Enumeration with all of the currently loaded JDBC drivers to which the current caller has access. Note: The classname of a driver can be found using d.getClass().getName() @return the list of JDBC Drivers loaded by the caller's class loader
method,java/sql/DriverManager/setLogStream/PrintStream, Sets the logging/tracing PrintStream that is used by the DriverManager and all drivers. In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks to see that there is an SQLPermission object before setting the logging stream. If a SecurityManager exists and its checkPermission method denies setting the log writer, this method throws a java.lang.SecurityException. @param out the new logging/tracing PrintStream; to disable, set to null @deprecated @throws SecurityException if a security manager exists and its checkPermission method denies setting the log stream @see SecurityManager#checkPermission @see #getLogStream
method,java/sql/Driver/getMajorVersion/, Retrieves the driver's major version number. Initially this should be 1. @return this driver's major version number
method,java/sql/Driver/getMinorVersion/, Gets the driver's minor version number. Initially this should be 0. @return this driver's minor version number
method,java/sql/Driver/jdbcCompliant/, Reports whether this driver is a genuine JDBC CompliantTM driver. A driver may only report true here if it passes the JDBC compliance tests; otherwise it is required to return false. JDBC compliance requires full support for the JDBC API and full support for SQL 92 Entry Level. It is expected that JDBC compliant drivers will be available for all the major commercial databases. This method is not intended to encourage the development of non-JDBC compliant drivers, but is a recognition of the fact that some vendors are interested in using the JDBC API and framework for lightweight databases that do not support full database functionality, or for special databases such as document information retrieval where a SQL implementation may not be feasible. @return true if this driver is JDBC Compliant; false otherwise
class,java/sql/Date, A thin wrapper around a millisecond value that allows JDBC to identify this as an SQL DATE value. A milliseconds value represents the number of milliseconds that have passed since January 1, 1970 00:00:00.000 GMT. To conform with the definition of SQL DATE, the millisecond values wrapped by a java.sql.Date instance must be 'normalized' by setting the hours, minutes, seconds, and milliseconds to zero in the particular time zone with which the instance is associated.
method,java/sql/Date/setTime/long, Sets an existing Date object using the given milliseconds time value. If the given milliseconds value contains time information, the driver will set the time components to the time in the default time zone (the time zone of the Java virtual machine running the application) that corresponds to zero GMT. @param date milliseconds since January 1, 1970, 00:00:00 GMT not to exceed the milliseconds representation for the year 8099. A negative number indicates the number of milliseconds before January 1, 1970, 00:00:00 GMT.
method,java/sql/Date/Date/long, Constructs a Date object using the given milliseconds time value. If the given milliseconds value contains time information, the driver will set the time components to the time in the default time zone (the time zone of the Java virtual machine running the application) that corresponds to zero GMT. @param date milliseconds since January 1, 1970, 00:00:00 GMT not to exceed the milliseconds representation for the year 8099. A negative number indicates the number of milliseconds before January 1, 1970, 00:00:00 GMT.
method,java/sql/DatabaseMetaData/supportsMultipleOpenResults/, Retrieves whether it is possible to have multiple ResultSet objects returned from a CallableStatement object simultaneously. @return true if a CallableStatement object can return multiple ResultSet objects simultaneously; false otherwise @exception SQLException if a datanase access error occurs @since 1.4
method,java/sql/DatabaseMetaData/supportsStatementPooling/, Retrieves whether this database supports statement pooling. @return true if so; false otherwise @throws SQLExcpetion if a database access error occurs @since 1.4
field,java/sql/DatabaseMetaData/bestRowTemporary, Indicates that the scope of the best row identifier is very temporary, lasting only while the row is being used. A possible value for the column SCOPE in the ResultSet object returned by the method getBestRowIdentifier.
field,java/sql/DatabaseMetaData/bestRowTransaction, Indicates that the scope of the best row identifier is the remainder of the current transaction. A possible value for the column SCOPE in the ResultSet object returned by the method getBestRowIdentifier.
field,java/sql/DatabaseMetaData/bestRowSession, Indicates that the scope of the best row identifier is the remainder of the current session. A possible value for the column SCOPE in the ResultSet object returned by the method getBestRowIdentifier.
field,java/sql/DatabaseMetaData/bestRowUnknown, Indicates that the best row identifier may or may not be a pseudo column. A possible value for the column PSEUDO_COLUMN in the ResultSet object returned by the method getBestRowIdentifier.
field,java/sql/DatabaseMetaData/bestRowNotPseudo, Indicates that the best row identifier is NOT a pseudo column. A possible value for the column PSEUDO_COLUMN in the ResultSet object returned by the method getBestRowIdentifier.
field,java/sql/DatabaseMetaData/bestRowPseudo, Indicates that the best row identifier is a pseudo column. A possible value for the column PSEUDO_COLUMN in the ResultSet object returned by the method getBestRowIdentifier.
field,java/sql/DatabaseMetaData/versionColumnUnknown, Indicates that this version column may or may not be a pseudo column. A possible value for the column PSEUDO_COLUMN in the ResultSet object returned by the method getVersionColumns.
field,java/sql/DatabaseMetaData/importedKeyRestrict, For the column UPDATE_RULE, indicates that a primary key may not be updated if it has been imported by another table as a foreign key. For the column DELETE_RULE, indicates that a primary key may not be deleted if it has been imported by another table as a foreign key. A possible value for the columns UPDATE_RULE and DELETE_RULE in the ResultSet objects returned by the methods getImportedKeys, getExportedKeys, and getCrossReference.
field,java/sql/DatabaseMetaData/typePredChar, Indicates that the data type can be only be used in WHERE search clauses that use LIKE predicates. A possible value for column SEARCHABLE in the ResultSet object returned by the method getTypeInfo.
field,java/sql/DatabaseMetaData/typePredBasic, Indicates that the data type can be only be used in WHERE search clauses that do not use LIKE predicates. A possible value for column SEARCHABLE in the ResultSet object returned by the method getTypeInfo.
class,java/sql/DataTruncation, An exception thrown as a DataTruncation exception (on writes) or reported as a DataTruncation warning (on reads) when a data values is unexpectedly truncated for reasons other than its having execeeded MaxFieldSize. The SQLstate for a DataTruncation during read is 01004. The SQLstate for a DataTruncation during write is 22001.
method,java/sql/DataTruncation/getIndex/, Retrieves the index of the column or parameter that was truncated. This may be -1 if the column or parameter index is unknown, in which case the parameter and read fields should be ignored. @return the index of the truncated paramter or column value
method,java/sql/DataTruncation/getDataSize/, Gets the number of bytes of data that should have been transferred. This number may be approximate if data conversions were being performed. The value may be -1 if the size is unknown. @return the number of bytes of data that should have been transferred
method,java/sql/DataTruncation/getTransferSize/, Gets the number of bytes of data actually transferred. The value may be -1 if the size is unknown. @return the number of bytes of data actually transferred
method,java/sql/DataTruncation/DataTruncation/int;boolean;boolean;int;int, Creates a DataTruncation object with the SQLState initialized to 01004 when read is set to true and 22001 when read is set to false, the reason set to Data truncation, the vendor code set to 0, and the other fields set to the given values. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param index The index of the parameter or column value @param parameter true if a parameter value was truncated @param read true if a read was truncated @param dataSize the original size of the data @param transferSize the size after truncation
method,java/sql/DataTruncation/DataTruncation/int;boolean;boolean;int;int;Throwable, Creates a DataTruncation object with the SQLState initialized to 01004 when read is set to true and 22001 when read is set to false, the reason set to Data truncation, the vendor code set to 0, and the other fields set to the given values. @param index The index of the parameter or column value @param parameter true if a parameter value was truncated @param read true if a read was truncated @param dataSize the original size of the data @param transferSize the size after truncation @param cause the underlying reason for this DataTruncation (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. @since 1.6
method,java/sql/Connection/isReadOnly/, Retrieves whether this Connection object is in read-only mode. @return true if this Connection object is read-only; false otherwise @exception SQLException SQLException if a database access error occurs or this method is called on a closed connection
method,java/sql/Connection/setHoldability/int, Changes the default holdability of ResultSet objects created using this Connection object to the given holdability. The default holdability of ResultSet objects can be be determined by invoking {@link DatabaseMetaData#getResultSetHoldability}. @param holdability a ResultSet holdability constant; one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT @throws SQLException if a database access occurs, this method is called on a closed connection, or the given parameter is not a ResultSet constant indicating holdability @exception SQLFeatureNotSupportedException if the given holdability is not supported @see #getHoldability @see DatabaseMetaData#getResultSetHoldability @see ResultSet @since 1.4
method,java/sql/Connection/createClob/, Constructs an object that implements the Clob interface. The object returned initially contains no data. The setAsciiStream, setCharacterStream and setString methods of the Clob interface may be used to add data to the Clob. @return An object that implements the Clob interface @throws SQLException if an object that implements the Clob interface can not be constructed, this method is called on a closed connection or a database access error occurs. @exception SQLFeatureNotSupportedException if the JDBC driver does not support this data type @since 1.6
method,java/sql/Connection/createBlob/, Constructs an object that implements the Blob interface. The object returned initially contains no data. The setBinaryStream and setBytes methods of the Blob interface may be used to add data to the Blob. @return An object that implements the Blob interface @throws SQLException if an object that implements the Blob interface can not be constructed, this method is called on a closed connection or a database access error occurs. @exception SQLFeatureNotSupportedException if the JDBC driver does not support this data type @since 1.6
method,java/sql/Connection/createNClob/, Constructs an object that implements the NClob interface. The object returned initially contains no data. The setAsciiStream, setCharacterStream and setString methods of the NClob interface may be used to add data to the NClob. @return An object that implements the NClob interface @throws SQLException if an object that implements the NClob interface can not be constructed, this method is called on a closed connection or a database access error occurs. @exception SQLFeatureNotSupportedException if the JDBC driver does not support this data type @since 1.6
method,java/sql/Connection/createSQLXML/, Constructs an object that implements the SQLXML interface. The object returned initially contains no data. The createXmlStreamWriter object and setString method of the SQLXML interface may be used to add data to the SQLXML object. @return An object that implements the SQLXML interface @throws SQLException if an object that implements the SQLXML interface can not be constructed, this method is called on a closed connection or a database access error occurs. @exception SQLFeatureNotSupportedException if the JDBC driver does not support this data type @since 1.6
method,java/sql/Connection/isValid/int, Returns true if the connection has not been closed and is still valid. The driver shall submit a query on the connection or use some other mechanism that positively verifies the connection is still valid when this method is called. The query submitted by the driver to validate the connection shall be executed in the context of the current transaction. @param timeout -		The time in seconds to wait for the database operation 						used to validate the connection to complete. If 						the timeout period expires before the operation 						completes, this method returns false. A value of 						0 indicates a timeout is not applied to the 						database operation. @return true if the connection is valid, false otherwise @exception SQLException if the value supplied for timeout is less then 0 @since 1.6 @see java.sql.DatabaseMetaData#getClientInfoProperties
method,java/sql/Connection/setClientInfo/Properties, Sets the value of the connection's client info properties. The Properties object contains the names and values of the client info properties to be set. The set of client info properties contained in the properties list replaces the current set of client info properties on the connection. If a property that is currently set on the connection is not present in the properties list, that property is cleared. Specifying an empty properties list will clear all of the properties on the connection. See setClientInfo (String, String) for more information. If an error occurs in setting any of the client info properties, a SQLClientInfoException is thrown. The SQLClientInfoException contains information indicating which client info properties were not set. The state of the client information is unknown because some databases do not allow multiple client info properties to be set atomically. For those databases, one or more properties may have been set before the error occurred. @param properties		the list of client info properties to set @see java.sql.Connection#setClientInfo(String, String) setClientInfo(String, String) @since 1.6 @throws SQLClientInfoException if the database server returns an error while 			setting the clientInfo values on the database server or this method is called on a closed connection 
method,java/sql/Connection/getClientInfo/String, Returns the value of the client info property specified by name. This method may return null if the specified client info property has not been set and does not have a default value. This method will also return null if the specified client info property name is not supported by the driver. Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by the driver. @param name		The name of the client info property to retrieve @return 			The value of the client info property specified @throws SQLException		if the database server returns an error when 							fetching the client info value from the database or this method is called on a closed connection @since 1.6 @see java.sql.DatabaseMetaData#getClientInfoProperties
method,java/sql/Connection/getClientInfo/, Returns a list containing the name and current value of each client info property supported by the driver. The value of a client info property may be null if the property has not been set and does not have a default value. @return	A Properties object that contains the name and current value of 			each of the client info properties supported by the driver. @throws 	SQLException if the database server returns an error when 			fetching the client info values from the database or this method is called on a closed connection @since 1.6
method,java/sql/Connection/createArrayOf/String;Object[], Factory method for creating Array objects. Note: When createArrayOf is used to create an array object that maps to a primitive data type, then it is implementation-defined whether the Array object is an array of that primitive data type or an array of Object. Note: The JDBC driver is responsible for mapping the elements Object array to the default JDBC SQL type defined in java.sql.Types for the given class of Object. The default mapping is specified in Appendix B of the JDBC specification. If the resulting JDBC type is not the appropriate type for the given typeName then it is implementation defined whether an SQLException is thrown or the driver supports the resulting conversion. @param typeName the SQL name of the type the elements of the array map to. The typeName is a database-specific name which may be the name of a built-in type, a user-defined type or a standard SQL type supported by this database. This is the value returned by Array.getBaseTypeName @param elements the elements that populate the returned object @return an Array object whose elements map to the specified SQL type @throws SQLException if a database error occurs, the JDBC type is not appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection @throws SQLFeatureNotSupportedException if the JDBC driver does not support this data type @since 1.6
method,java/sql/Connection/createStruct/String;Object[], Factory method for creating Struct objects. @param typeName the SQL type name of the SQL structured type that this Struct object maps to. The typeName is the name of a user-defined type that has been defined for this database. It is the value returned by Struct.getSQLTypeName. @param attributes the attributes that populate the returned object @return a Struct object that maps to the given SQL type and is populated with the given attributes @throws SQLException if a database error occurs, the typeName is null or this method is called on a closed connection @throws SQLFeatureNotSupportedException if the JDBC driver does not support this data type @since 1.6
field,java/sql/Connection/TRANSACTION_READ_UNCOMMITTED, A constant indicating that dirty reads, non-repeatable reads and phantom reads can occur. This level allows a row changed by one transaction to be read by another transaction before any changes in that row have been committed (a dirty read). If any of the changes are rolled back, the second transaction will have retrieved an invalid row.
field,java/sql/Connection/TRANSACTION_READ_COMMITTED, A constant indicating that dirty reads are prevented; non-repeatable reads and phantom reads can occur. This level only prohibits a transaction from reading a row with uncommitted changes in it.
field,java/sql/Connection/TRANSACTION_SERIALIZABLE, A constant indicating that dirty reads, non-repeatable reads and phantom reads are prevented. This level includes the prohibitions in TRANSACTION_REPEATABLE_READ and further prohibits the situation where one transaction reads all rows that satisfy a WHERE condition, a second transaction inserts a row that satisfies that WHERE condition, and the first transaction rereads for the same condition, retrieving the additional phantom row in the second read.
interface,java/sql/Clob, The mapping in the JavaTM programming language for the SQL CLOB type. An SQL CLOB is a built-in type that stores a Character Large Object as a column value in a row of a database table. By default drivers implement a Clob object using an SQL locator(CLOB), which means that a Clob object contains a logical pointer to the SQL CLOB data rather than the data itself. A Clob object is valid for the duration of the transaction in which it was created. The Clob interface provides methods for getting the length of an SQL CLOB (Character Large Object) value, for materializing a CLOB value on the client, and for searching for a substring or CLOB object within a CLOB value. Methods in the interfaces {@link ResultSet}, {@link CallableStatement}, and {@link PreparedStatement}, such as getClob and setClob allow a programmer to access an SQL CLOB value. In addition, this interface has methods for updating a CLOB value. All methods on the Clob interface must be fully implemented if the JDBC driver supports the data type. @since 1.2
class,java/sql/ClientInfoStatus, Enumeration for status of the reason that a property could not be set via a call to Connection.setClientInfo @since 1.6
method,java/sql/CallableStatement/setObject/String;Object;int, Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero. @param parameterName the name of the parameter @param x the object containing the input parameter value @param targetSqlType the SQL type (as defined in java.sql.Types) to be sent to the database @exception SQLException if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement @exception SQLFeatureNotSupportedException if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type @see #getObject @since 1.4
method,java/sql/CallableStatement/setBlob/String;InputStream, Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARBINARY or a BLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBlob which takes a length parameter. @param parameterName the name of the parameter @param inputStream An object that contains the data to set the parameter value to. @throws SQLException if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement @throws SQLFeatureNotSupportedException if the JDBC driver does not support this method @since 1.6
interface,java/sql/Blob, The representation (mapping) in the JavaTM programming language of an SQL BLOB value. An SQL BLOB is a built-in type that stores a Binary Large Object as a column value in a row of a database table. By default drivers implement Blob using an SQL locator(BLOB), which means that a Blob object contains a logical pointer to the SQL BLOB data rather than the data itself. A Blob object is valid for the duration of the transaction in which is was created. Methods in the interfaces {@link ResultSet}, {@link CallableStatement}, and {@link PreparedStatement}, such as getBlob and setBlob allow a programmer to access an SQL BLOB value. The Blob interface provides methods for getting the length of an SQL BLOB (Binary Large Object) value, for materializing a BLOB value on the client, and for determining the position of a pattern of bytes within a BLOB value. In addition, this interface has methods for updating a BLOB value. All methods on the Blob interface must be fully implemented if the JDBC driver supports the data type. @since 1.2
class,java/sql/BatchUpdateException, The subclass of {@link SQLException} thrown when an error occurs during a batch update operation. In addition to the information provided by {@link SQLException}, a BatchUpdateException provides the update counts for all commands that were executed successfully during the batch update, that is, all commands that were executed before the error occurred. The order of elements in an array of update counts corresponds to the order in which commands were added to the batch. After a command in a batch update fails to execute properly and a BatchUpdateException is thrown, the driver may or may not continue to process the remaining commands in the batch. If the driver continues processing after a failure, the array returned by the method BatchUpdateException.getUpdateCounts will have an element for every command in the batch rather than only elements for the commands that executed successfully before the error. In the case where the driver continues processing commands, the array element for any command that failed is Statement.EXECUTE_FAILED. @since 1.2
method,java/sql/BatchUpdateException/getUpdateCounts/, Retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred. A driver that implements batch updates may or may not continue to process the remaining commands in a batch when one of the commands fails to execute properly. If the driver continues processing commands, the array returned by this method will have as many elements as there are commands in the batch; otherwise, it will contain an update count for each command that executed successfully before the BatchUpdateException was thrown. The possible return values for this method were modified for the Java 2 SDK, Standard Edition, version 1.3. This was done to accommodate the new option of continuing to process commands in a batch update after a BatchUpdateException object has been thrown. @return an array of int containing the update counts for the updates that were executed successfully before this error occurred. Or, if the driver continues to process commands after an error, one of the following for every command in the batch: an update count Statement.SUCCESS_NO_INFO to indicate that the command executed successfully but the number of rows affected is unknown Statement.EXECUTE_FAILED to indicate that the command failed to execute successfully @since 1.3
method,java/sql/BatchUpdateException/BatchUpdateException/String;String;int;int[], Constructs a BatchUpdateException object initialized with a given reason, SQLState, vendorCode and updateCounts. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @param reason a description of the error @param SQLState an XOPEN or SQL:2003 code identifying the exception @param vendorCode an exception code used by a particular database vendor @param updateCounts an array of int, with each element indicating the update count, Statement.SUCCESS_NO_INFO or Statement.EXECUTE_FAILED for each SQL command in the batch for JDBC drivers that continue processing after a command failure; an update count or Statement.SUCCESS_NO_INFO for each SQL command in the batch prior to the failure for JDBC drivers that stop processing after a command failure @since 1.2
method,java/sql/BatchUpdateException/BatchUpdateException/String;String;int[], Constructs a BatchUpdateException object initialized with a given reason, SQLState and updateCounts. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code is intialized to 0. @param reason a description of the exception @param SQLState an XOPEN or SQL:2003 code identifying the exception @param updateCounts an array of int, with each element indicating the update count, Statement.SUCCESS_NO_INFO or Statement.EXECUTE_FAILED for each SQL command in the batch for JDBC drivers that continue processing after a command failure; an update count or Statement.SUCCESS_NO_INFO for each SQL command in the batch prior to the failure for JDBC drivers that stop processing after a command failure @since 1.2
method,java/sql/BatchUpdateException/BatchUpdateException/String;int[], Constructs a BatchUpdateException object initialized with a given reason and updateCounts. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The SQLState is initialized to null and the vender code is initialized to 0. @param reason a description of the exception @param updateCounts an array of int, with each element indicating the update count, Statement.SUCCESS_NO_INFO or Statement.EXECUTE_FAILED for each SQL command in the batch for JDBC drivers that continue processing after a command failure; an update count or Statement.SUCCESS_NO_INFO for each SQL command in the batch prior to the failure for JDBC drivers that stop processing after a command failure @since 1.2
method,java/sql/BatchUpdateException/BatchUpdateException/int[], Constructs a BatchUpdateException object initialized with a given updateCounts. initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. The reason and SQLState are initialized to null and the vendor code is initialized to 0. @param updateCounts an array of int, with each element indicating the update count, Statement.SUCCESS_NO_INFO or Statement.EXECUTE_FAILED for each SQL command in the batch for JDBC drivers that continue processing after a command failure; an update count or Statement.SUCCESS_NO_INFO for each SQL command in the batch prior to the failure for JDBC drivers that stop processing after a command failure @since 1.2
method,java/sql/BatchUpdateException/BatchUpdateException/, Constructs a BatchUpdateException object. The reason, SQLState and updateCounts are initialized to null and the vendor code is initialized to 0. The cause is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method. @since 1.2
interface,java/sql/Array, The mapping in the Java programming language for the SQL type ARRAY. By default, an Array value is a transaction-duration reference to an SQL ARRAY value. By default, an Array object is implemented using an SQL LOCATOR(array) internally, which means that an Array object contains a logical pointer to the data in the SQL ARRAY value rather than containing the ARRAY value's data. The Array interface provides methods for bringing an SQL ARRAY value's data to the client as either an array or a ResultSet object. If the elements of the SQL ARRAY are a UDT, they may be custom mapped. To create a custom mapping, a programmer must do two things: create a class that implements the {@link SQLData} interface for the UDT to be custom mapped. make an entry in a type map that contains the fully-qualified SQL type name of the UDT the Class object for the class implementing SQLData When a type map with an entry for the base type is supplied to the methods getArray and getResultSet, the mapping it contains will be used to map the elements of the ARRAY value. If no type map is supplied, which would typically be the case, the connection's type map is used by default. If the connection's type map or a type map supplied to a method has no entry for the base type, the elements are mapped according to the standard mapping. All methods on the Array interface must be fully implemented if the JDBC driver supports the data type. @since 1.2 
method,java/applet/AudioClip/play/, Starts playing this audio clip. Each time this method is called, the clip is restarted from the beginning.
interface,java/applet/AppletStub, When an applet is first created, an applet stub is attached to it using the applet's setStub method. This stub serves as the interface between the applet and the browser environment or applet viewer environment in which the application is running. @author 	Arthur van Hoff @version 1.28, 03/23/10 @see java.applet.Applet#setStub(java.applet.AppletStub) @since JDK1.0
method,java/applet/AppletStub/isActive/, Determines if the applet is active. An applet is active just before its start method is called. It becomes inactive just before its stop method is called. @return true if the applet is active; false otherwise.
method,java/applet/AppletStub/getParameter/String, Returns the value of the named parameter in the HTML tag. For example, if an applet is specified as &lt;applet code=Clock width=50 height=50&gt; &lt;param name=Color value=blue&gt; &lt;/applet&gt; then a call to getParameter(Color) returns the value blue. @param name a parameter name. @return the value of the named parameter, or null if not set.
method,java/applet/AppletStub/appletResize/int;int, Called when the applet wants to be resized. @param width the new requested width for the applet. @param height the new requested height for the applet.
method,java/applet/AppletContext/showDocument/URL, Requests that the browser or applet viewer show the Web page indicated by the url argument. The browser or applet viewer determines which window or frame to display the Web page. This method may be ignored by applet contexts that are not browsers. @param url an absolute URL giving the location of the document.
class,java/applet/Applet, An applet is a small program that is intended not to be run on its own, but rather to be embedded inside another application. The Applet class must be the superclass of any applet that is to be embedded in a Web page or viewed by the Java Applet Viewer. The Applet class provides a standard interface between applets and their environment. @author Arthur van Hoff @author Chris Warth @version 1.84, 03/23/10 @since JDK1.0
method,java/applet/Applet/setStub/AppletStub, Sets this applet's stub. This is done automatically by the system. If there is a security manager, its checkPermission method is called with the AWTPermission(setAppletStub) permission if a stub has already been set. @param stub the new stub. @exception SecurityException if the caller cannot set the stub
method,java/applet/Applet/isActive/, Determines if this applet is active. An applet is marked active just before its start method is called. It becomes inactive just before its stop method is called. @return true if the applet is active; false otherwise. @see java.applet.Applet#start() @see java.applet.Applet#stop()
method,java/applet/Applet/getParameter/String, Returns the value of the named parameter in the HTML tag. For example, if this applet is specified as &lt;applet code=Clock width=50 height=50&gt; &lt;param name=Color value=blue&gt; &lt;/applet&gt; then a call to getParameter(Color) returns the value blue. The name argument is case insensitive. @param name a parameter name. @return the value of the named parameter, or null if not set.
method,java/applet/Applet/init/, Called by the browser or applet viewer to inform this applet that it has been loaded into the system. It is always called before the first time that the start method is called. A subclass of Applet should override this method if it has initialization to perform. For example, an applet with threads would use the init method to create the threads and the destroy method to kill them. The implementation of this method provided by the Applet class does nothing. @see java.applet.Applet#destroy() @see java.applet.Applet#start() @see java.applet.Applet#stop()
method,java/applet/Applet/stop/, Called by the browser or applet viewer to inform this applet that it should stop its execution. It is called when the Web page that contains this applet has been replaced by another page, and also just before the applet is to be destroyed. A subclass of Applet should override this method if it has any operation that it wants to perform each time the Web page containing it is no longer visible. For example, an applet with animation might want to use the start method to resume animation, and the stop method to suspend the animation. The implementation of this method provided by the Applet class does nothing. @see java.applet.Applet#destroy() @see java.applet.Applet#init()
method,java/applet/Applet/destroy/, Called by the browser or applet viewer to inform this applet that it is being reclaimed and that it should destroy any resources that it has allocated. The stop method will always be called before destroy. A subclass of Applet should override this method if it has any operation that it wants to perform before it is destroyed. For example, an applet with threads would use the init method to create the threads and the destroy method to kill them. The implementation of this method provided by the Applet class does nothing. @see java.applet.Applet#init() @see java.applet.Applet#start() @see java.applet.Applet#stop()
method,java/applet/Applet/getAccessibleContext/, Gets the AccessibleContext associated with this Applet. For applets, the AccessibleContext takes the form of an AccessibleApplet. A new AccessibleApplet instance is created if necessary. @return an AccessibleApplet that serves as the AccessibleContext of this Applet @since 1.3
class,java/net/UnknownServiceException, Thrown to indicate that an unknown service exception has occurred. Either the MIME type returned by a URL connection does not make sense, or the application is attempting to write to a read-only URL connection. @author unascribed @version 1.16, 03/23/10 @since JDK1.0
class,java/net/URLStreamHandler, The abstract class URLStreamHandler is the common superclass for all stream protocol handlers. A stream protocol handler knows how to make a connection for a particular protocol type, such as http, ftp, or gopher. In most cases, an instance of a URLStreamHandler subclass is not created directly by an application. Rather, the first time a protocol name is encountered when constructing a URL, the appropriate stream protocol handler is automatically loaded. @author James Gosling @version 1.74, 03/23/10 @see java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String) @since JDK1.0
method,java/net/URLStreamHandler/hostsEqual/URL;URL, Compares the host components of two URLs. @param u1 the URL of the first host to compare @param u2 the URL of the second host to compare @return	true if and only if they are equal, false otherwise. @since 1.3
method,java/net/URLStreamHandler/setURL/URL;String;String;int;String;String;String;String;String, Sets the fields of the URL argument to the indicated values. Only classes derived from URLStreamHandler are supposed to be able to call the set method on a URL. @param u the URL to modify. @param protocol the protocol name. @param host the remote host value for the URL. @param port the port on the remote machine. @param authority the authority part for the URL. @param userInfo the userInfo part of the URL. @param path the path component of the URL. @param query the query part for the URL. @param ref the reference. @exception	SecurityException	if the protocol handler of the URL is 					different from this one @see java.net.URL#set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String) @since 1.3
method,java/net/URLStreamHandler/setURL/URL;String;String;int;String;String, Sets the fields of the URL argument to the indicated values. Only classes derived from URLStreamHandler are supposed to be able to call the set method on a URL. @param u the URL to modify. @param protocol the protocol name. This value is ignored since 1.2. @param host the remote host value for the URL. @param port the port on the remote machine. @param file the file. @param ref the reference. @exception	SecurityException	if the protocol handler of the URL is 					different from this one @deprecated Use setURL(URL, String, String, int, String, String, String, String);
method,java/net/URLEncoder/encode/String, Translates a string into x-www-form-urlencoded format. This method uses the platform's default encoding as the encoding scheme to obtain the bytes for unsafe characters. @param s String to be translated. @deprecated The resulting string may vary depending on the platform's default encoding. Instead, use the encode(String,String) method to specify the encoding. @return the translated String.
class,java/net/URLDecoder, Utility class for HTML form decoding. This class contains static methods for decoding a String from the application/x-www-form-urlencoded MIME format. To conversion process is the reverse of that used by the URLEncoder class. It is assumed that all characters in the encoded string are one of the following: &quot;a&quot; through &quot;z&quot;, &quot;A&quot; through &quot;Z&quot;, &quot;0&quot; through &quot;9&quot;, and &quot;-&quot;, &quot;_&quot;, &quot;.&quot;, and &quot;*&quot;. The character &quot;%&quot; is allowed but is interpreted as the start of a special escaped sequence. The following rules are applied in the conversion: The alphanumeric characters &quot;a&quot; through &quot;z&quot;, &quot;A&quot; through &quot;Z&quot; and &quot;0&quot; through &quot;9&quot; remain the same. The special characters &quot;.&quot;, &quot;-&quot;, &quot;*&quot;, and &quot;_&quot; remain the same. The plus sign &quot;+&quot; is converted into a space character &quot;&nbsp;&quot; . A sequence of the form %xy will be treated as representing a byte where xy is the two-digit hexadecimal representation of the 8 bits. Then, all substrings that contain one or more of these byte sequences consecutively will be replaced by the character(s) whose encoding would result in those consecutive bytes. The encoding scheme used to decode these characters may be specified, or if unspecified, the default encoding of the platform will be used. There are two possible ways in which this decoder could deal with illegal strings. It could either leave illegal characters alone or it could throw an {@link java.lang.IllegalArgumentException}. Which approach the decoder takes is left to the implementation. @author Mark Chamness @author Michael McCloskey @version 1.29, 03/23/10 @since 1.2
method,java/net/URLDecoder/decode/String, Decodes a x-www-form-urlencoded string. The platform's default encoding is used to determine what characters are represented by any consecutive sequences of the form %xy. @param s the String to decode @deprecated The resulting string may vary depending on the platform's default encoding. Instead, use the decode(String,String) method to specify the encoding. @return the newly decoded String
class,java/net/URLConnection, The abstract class URLConnection is the superclass of all classes that represent a communications link between the application and a URL. Instances of this class can be used both to read from and to write to the resource referenced by the URL. In general, creating a connection to a URL is a multistep process: openConnection() connect() Manipulate parameters that affect the connection to the remote resource. Interact with the resource; query header fields and contents. ----------------------------&gt; time The connection object is created by invoking the openConnection method on a URL. The setup parameters and general request properties are manipulated. The actual connection to the remote object is made, using the connect method. The remote object becomes available. The header fields and the contents of the remote object can be accessed. The setup parameters are modified using the following methods: setAllowUserInteraction setDoInput setDoOutput setIfModifiedSince setUseCaches and the general request properties are modified using the method: setRequestProperty Default values for the AllowUserInteraction and UseCaches parameters can be set using the methods setDefaultAllowUserInteraction and setDefaultUseCaches. Each of the above set methods has a corresponding get method to retrieve the value of the parameter or general request property. The specific parameters and general request properties that are applicable are protocol specific. The following methods are used to access the header fields and the contents after the connection is made to the remote object: getContent getHeaderField getInputStream getOutputStream Certain header fields are accessed frequently. The methods: getContentEncoding getContentLength getContentType getDate getExpiration getLastModifed provide convenient access to these fields. The getContentType method is used by the getContent method to determine the type of the remote object; subclasses may find it convenient to override the getContentType method. In the common case, all of the pre-connection parameters and general request properties can be ignored: the pre-connection parameters and request properties default to sensible values. For most clients of this interface, there are only two interesting methods: getInputStream and getContent, which are mirrored in the URL class by convenience methods. More information on the request properties and header fields of an http connection can be found at: http://www.ietf.org/rfc/rfc2068.txt Note about fileNameMap: In versions prior to JDK 1.1.6, field fileNameMap of URLConnection was public. In JDK 1.1.6 and later, fileNameMap is private; accessor and mutator methods {@link #getFileNameMap() getFileNameMap} and {@link #setFileNameMap(java.net.FileNameMap) setFileNameMap} are added to access it. This change is also described on the Compatibility page. Invoking the close() methods on the InputStream or OutputStream of an URLConnection after a request may free network resources associated with this instance, unless particular protocol specifications specify different behaviours for it. @author James Gosling @version 1.107, 03/23/10 @see java.net.URL#openConnection() @see java.net.URLConnection#connect() @see java.net.URLConnection#getContent() @see java.net.URLConnection#getContentEncoding() @see java.net.URLConnection#getContentLength() @see java.net.URLConnection#getContentType() @see java.net.URLConnection#getDate() @see java.net.URLConnection#getExpiration() @see java.net.URLConnection#getHeaderField(int) @see java.net.URLConnection#getHeaderField(java.lang.String) @see java.net.URLConnection#getInputStream() @see java.net.URLConnection#getLastModified() @see java.net.URLConnection#getOutputStream() @see java.net.URLConnection#setAllowUserInteraction(boolean) @see java.net.URLConnection#setDefaultUseCaches(boolean) @see java.net.URLConnection#setDoInput(boolean) @see java.net.URLConnection#setDoOutput(boolean) @see java.net.URLConnection#setIfModifiedSince(long) @see java.net.URLConnection#setRequestProperty(java.lang.String, java.lang.String) @see java.net.URLConnection#setUseCaches(boolean) @since JDK1.0
method,java/net/URLConnection/setFileNameMap/FileNameMap, Sets the FileNameMap. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException. @param map the FileNameMap to be set @exception SecurityException if a security manager exists and its checkSetFactory method doesn't allow the operation. @see SecurityManager#checkSetFactory @see #getFileNameMap() @since 1.2
method,java/net/URLConnection/setConnectTimeout/int, Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection. If the timeout expires before the connection can be established, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout. Some non-standard implmentation of this method may ignore the specified timeout. To see the connect timeout set, please call getConnectTimeout(). @param timeout an int that specifies the connect timeout value in milliseconds @throws IllegalArgumentException if the timeout parameter is negative @see #getConnectTimeout() @see #connect() @since 1.5
method,java/net/URLConnection/setReadTimeout/int, Sets the read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from Input stream when a connection is established to a resource. If the timeout expires before there is data available for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout. Some non-standard implementation of this method ignores the specified timeout. To see the read timeout set, please call getReadTimeout(). @param timeout an int that specifies the timeout value to be used in milliseconds @throws IllegalArgumentException if the timeout parameter is negative @see #getReadTimeout() @see InputStream#read() @since 1.5
method,java/net/URLConnection/getHeaderField/String, Returns the value of the named header field. If called on a connection that sets the same header multiple times with possibly different values, only the last value is returned. @param name the name of a header field. @return the value of the named header field, or null if there is no such field in the header.
method,java/net/URLConnection/addRequestProperty/String;String, Adds a general request property specified by a key-value pair. This method will not overwrite existing values associated with the same key. @param key the keyword by which the request is known (e.g., accept). @param value the value associated with it. @throws IllegalStateException if already connected @throws NullPointerException if key is null @see #getRequestProperties() @since 1.4
method,java/net/URLConnection/guessContentTypeFromName/String, Tries to determine the content type of an object, based on the specified file component of a URL. This is a convenience method that can be used by subclasses that override the getContentType method. @param fname a filename. @return a guess as to what the content type of the object is, based upon its file name. @see java.net.URLConnection#getContentType()
field,java/net/URLConnection/allowUserInteraction, If true, this URL is being examined in a context in which it makes sense to allow user interactions such as popping up an authentication dialog. If false, then no user interaction is allowed. The value of this field can be set by the setAllowUserInteraction method. Its value is returned by the getAllowUserInteraction method. Its default value is the value of the argument in the last invocation of the setDefaultAllowUserInteraction method. @see java.net.URLConnection#getAllowUserInteraction() @see java.net.URLConnection#setAllowUserInteraction(boolean) @see java.net.URLConnection#setDefaultAllowUserInteraction(boolean)
field,java/net/URLConnection/useCaches, If true, the protocol is allowed to use caching whenever it can. If false, the protocol must always try to get a fresh copy of the object. This field is set by the setUseCaches method. Its value is returned by the getUseCaches method. Its default value is the value given in the last invocation of the setDefaultUseCaches method. @see java.net.URLConnection#setUseCaches(boolean) @see java.net.URLConnection#getUseCaches() @see java.net.URLConnection#setDefaultUseCaches(boolean)
field,java/net/URLConnection/ifModifiedSince, Some protocols support skipping the fetching of the object unless the object has been modified more recently than a certain time. A nonzero value gives a time as the number of milliseconds since January 1, 1970, GMT. The object is fetched only if it has been modified more recently than that time. This variable is set by the setIfModifiedSince method. Its value is returned by the getIfModifiedSince method. The default value of this field is 0, indicating that the fetching must always occur. @see java.net.URLConnection#getIfModifiedSince() @see java.net.URLConnection#setIfModifiedSince(long)
method,java/net/URLClassLoader/definePackage/String;Manifest;URL, Defines a new package by name in this ClassLoader. The attributes contained in the specified Manifest will be used to obtain package version and sealing information. For sealed packages, the additional URL specifies the code source URL from which the package was loaded. @param name the package name @param man the Manifest containing package version and sealing information @param url the code source url for the package, or null if none @exception IllegalArgumentException if the package name duplicates an existing package either in this class loader or one of its ancestors @return the newly defined Package object
method,java/net/URLClassLoader/newInstance/URL[];ClassLoader, Creates a new instance of URLClassLoader for the specified URLs and parent class loader. If a security manager is installed, the loadClass method of the URLClassLoader returned by this method will invoke the SecurityManager.checkPackageAccess method before loading the class. @param urls the URLs to search for classes and resources @param parent the parent class loader for delegation @return the resulting class loader
method,java/net/URLClassLoader/newInstance/URL[], Creates a new instance of URLClassLoader for the specified URLs and default parent class loader. If a security manager is installed, the loadClass method of the URLClassLoader returned by this method will invoke the SecurityManager.checkPackageAccess before loading the class. @param urls the URLs to search for classes and resources @return the resulting class loader
method,java/net/URLClassLoader/URLClassLoader/URL[];ClassLoader;URLStreamHandlerFactory, Constructs a new URLClassLoader for the specified URLs, parent class loader, and URLStreamHandlerFactory. The parent argument will be used as the parent class loader for delegation. The factory argument will be used as the stream handler factory to obtain protocol handlers when creating new jar URLs. If there is a security manager, this method first calls the security manager's checkCreateClassLoader method to ensure creation of a class loader is allowed. @param urls the URLs from which to load classes and resources @param parent the parent class loader for delegation @param factory the URLStreamHandlerFactory to use when creating URLs @exception SecurityException if a security manager exists and its checkCreateClassLoader method doesn't allow creation of a class loader. @see SecurityManager#checkCreateClassLoader
method,java/net/URL/set/String;String;int;String;String, Sets the fields of the URL. This is not a public method so that only URLStreamHandlers can modify URL fields. URLs are otherwise constant. @param protocol the name of the protocol to use @param host the name of the host @param port the port number on the host @param file the file on the host @param ref the internal reference in the URL
method,java/net/URL/set/String;String;int;String;String;String;String;String, Sets the specified 8 fields of the URL. This is not a public method so that only URLStreamHandlers can modify URL fields. URLs are otherwise constant. @param protocol the name of the protocol to use @param host the name of the host @param port the port number on the host @param authority the authority part for the url @param userInfo the username and password @param path the file on the host @param ref the internal reference in the URL @param query the query part of this URL @since 1.3
method,java/net/URL/toString/, Constructs a string representation of this URL. The string is created by calling the toExternalForm method of the stream protocol handler for this object. @return a string representation of this object. @see java.net.URL#URL(java.lang.String, java.lang.String, int,			java.lang.String) @see java.net.URLStreamHandler#toExternalForm(java.net.URL)
method,java/net/URL/toExternalForm/, Constructs a string representation of this URL. The string is created by calling the toExternalForm method of the stream protocol handler for this object. @return a string representation of this object. @see java.net.URL#URL(java.lang.String, java.lang.String,			int, java.lang.String) @see java.net.URLStreamHandler#toExternalForm(java.net.URL)
method,java/net/URL/toURI/, Returns a {@link java.net.URI} equivalent to this URL. This method functions in the same way as new URI (this.toString()). Note, any URL instance that complies with RFC 2396 can be converted to a URI. However, some URLs that are not strictly in compliance can not be converted to a URI. @exception URISyntaxException if this URL is not formatted strictly according to		 to RFC2396 and cannot be converted to a URI. @return a URI instance equivalent to this URL. @since 1.5
method,java/net/URL/openConnection/, Returns a URLConnection object that represents a connection to the remote object referred to by the URL. A new connection is opened every time by calling the openConnection method of the protocol handler for this URL. If for the URL's protocol (such as HTTP or JAR), there exists a public, specialized URLConnection subclass belonging to one of the following packages or one of their subpackages: java.lang, java.io, java.util, java.net, the connection returned will be of that subclass. For example, for HTTP an HttpURLConnection will be returned, and for JAR a JarURLConnection will be returned. @return a URLConnection to the URL. @exception IOException if an I/O exception occurs. @see java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String) @see java.net.URLConnection @see java.net.URLStreamHandler#openConnection(java.net.URL)
method,java/net/URL/setURLStreamHandlerFactory/URLStreamHandlerFactory, Sets an application's URLStreamHandlerFactory. This method can be called at most once in a given Java Virtual Machine. The URLStreamHandlerFactory instance is used toconstruct a stream protocol handler from a protocol name. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException. @param fac the desired factory. @exception Error if the application has already set a factory. @exception SecurityException if a security manager exists and its checkSetFactory method doesn't allow		 the operation. @see java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String) @see java.net.URLStreamHandlerFactory @see SecurityManager#checkSetFactory
method,java/net/URL/URL/String;String;String, Creates a URL from the specified protocol name, host name, and file name. The default port for the specified protocol is used. This method is equivalent to calling the four-argument constructor with the arguments being protocol, host, -1, and file. No validation of the inputs is performed by this constructor. @param protocol the name of the protocol to use. @param host the name of the host. @param file the file on the host. @exception MalformedURLException if an unknown protocol is specified. @see java.net.URL#URL(java.lang.String, java.lang.String,			int, java.lang.String)
method,java/net/URL/URL/String, Creates a URL object from the String representation. This constructor is equivalent to a call to the two-argument constructor with a null first argument. @param spec the String to parse as a URL. @exception MalformedURLException If the string specifies an unknown protocol. @see java.net.URL#URL(java.net.URL, java.lang.String)
method,java/net/URL/URL/URL;String, Creates a URL by parsing the given spec within a specified context. The new URL is created from the given context URL and the spec argument as described in RFC2396 &quot;Uniform Resource Identifiers : Generic * Syntax&quot; : &lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; The reference is parsed into the scheme, authority, path, query and fragment parts. If the path component is empty and the scheme, authority, and query components are undefined, then the new URL is a reference to the current document. Otherwise, the fragment and query parts present in the spec are used in the new URL. If the scheme component is defined in the given spec and does not match the scheme of the context, then the new URL is created as an absolute URL based on the spec alone. Otherwise the scheme component is inherited from the context URL. If the authority component is present in the spec then the spec is treated as absolute and the spec authority and path will replace the context authority and path. If the authority component is absent in the spec then the authority of the new URL will be inherited from the context. If the spec's path component begins with a slash character &quot;/&quot; then the path is treated as absolute and the spec path replaces the context path. Otherwise, the path is treated as a relative path and is appended to the context path, as described in RFC2396. Also, in this case, the path is canonicalized through the removal of directory changes made by occurences of &quot;..&quot; and &quot;.&quot;. For a more detailed description of URL parsing, refer to RFC2396. @param context the context in which to parse the specification. @param spec the String to parse as a URL. @exception MalformedURLException if no protocol is specified, or an unknown protocol is found. @see java.net.URL#URL(java.lang.String, java.lang.String,			int, java.lang.String) @see java.net.URLStreamHandler @see java.net.URLStreamHandler#parseURL(java.net.URL,			java.lang.String, int, int)
method,java/net/URISyntaxException/getIndex/, Returns an index into the input string of the position at which the parse error occurred, or -1 if this position is not known. @return The error index
method,java/net/URISyntaxException/getMessage/, Returns a string describing the parse error. The resulting string consists of the reason string followed by a colon character (':'), a space, and the input string. If the error index is defined then the string at index followed by the index, in decimal, is inserted after the reason string and before the colon character. @return A string describing the parse error
method,java/net/URISyntaxException/URISyntaxException/String;String;int, Constructs an instance from the given input string, reason, and error index. @param input The input string @param reason A string explaining why the input could not be parsed @param index The index at which the parse error occurred, or -1 if the index is not known @throws NullPointerException If either the input or reason strings are null @throws IllegalArgumentException If the error index is less than -1
method,java/net/URISyntaxException/URISyntaxException/String;String, Constructs an instance from the given input string and reason. The resulting object will have an error index of -1. @param input The input string @param reason A string explaining why the input could not be parsed @throws NullPointerException If either the input or reason strings are null
method,java/net/URI/resolve/URI, Resolves the given URI against this URI. If the given URI is already absolute, or if this URI is opaque, then the given URI is returned. If the given URI's fragment component is defined, its path component is empty, and its scheme, authority, and query components are undefined, then a URI with the given fragment but with all other components equal to those of this URI is returned. This allows a URI representing a standalone fragment reference, such as #foo, to be usefully resolved against a base URI. Otherwise this method constructs a new hierarchical URI in a manner consistent with RFC&nbsp;2396, section&nbsp;5.2; that is: A new URI is constructed with this URI's scheme and the given URI's query and fragment components. If the given URI has an authority component then the new URI's authority and path are taken from the given URI. Otherwise the new URI's authority component is copied from this URI, and its path is computed as follows: If the given URI's path is absolute then the new URI's path is taken from the given URI. Otherwise the given URI's path is relative, and so the new URI's path is computed by resolving the path of the given URI against the path of this URI. This is done by concatenating all but the last segment of this URI's path, if any, with the given URI's path and then normalizing the result as if by invoking the {@link #normalize() normalize} method. The result of this method is absolute if, and only if, either this URI is absolute or the given URI is absolute. @param uri The URI to be resolved against this URI @return The resulting URI @throws NullPointerException If uri is null
method,java/net/URI/toURL/, Constructs a URL from this URI. This convenience method works as if invoking it were equivalent to evaluating the expression new&nbsp;URL(this.toString()) after first checking that this URI is absolute. @return A URL constructed from this URI @throws IllegalArgumentException If this URL is not absolute @throws MalformedURLException If a protocol handler for the URL could not be found, or if some other error occurred while constructing the URL
method,java/net/URI/getScheme/, Returns the scheme component of this URI. The scheme component of a URI, if defined, only contains characters in the alphanum category and in the string -.+. A scheme always starts with an alpha character. The scheme component of a URI cannot contain escaped octets, hence this method does not perform any decoding. @return The scheme component of this URI, or null if the scheme is undefined
method,java/net/URI/isAbsolute/, Tells whether or not this URI is absolute. A URI is absolute if, and only if, it has a scheme component. @return true if, and only if, this URI is absolute
method,java/net/URI/isOpaque/, Tells whether or not this URI is opaque. A URI is opaque if, and only if, it is absolute and its scheme-specific part does not begin with a slash character ('/'). An opaque URI has a scheme, a scheme-specific part, and possibly a fragment; all other components are undefined. @return true if, and only if, this URI is opaque
method,java/net/URI/getRawSchemeSpecificPart/, Returns the raw scheme-specific part of this URI. The scheme-specific part is never undefined, though it may be empty. The scheme-specific part of a URI only contains legal URI characters. @return The raw scheme-specific part of this URI (never null)
method,java/net/URI/getSchemeSpecificPart/, Returns the decoded scheme-specific part of this URI. The string returned by this method is equal to that returned by the {@link #getRawSchemeSpecificPart() getRawSchemeSpecificPart} method except that all sequences of escaped octets are decoded. @return The decoded scheme-specific part of this URI (never null)
method,java/net/URI/getRawAuthority/, Returns the raw authority component of this URI. The authority component of a URI, if defined, only contains the commercial-at character ('@') and characters in the unreserved, punct, escaped, and other categories. If the authority is server-based then it is further constrained to have valid user-information, host, and port components. @return The raw authority component of this URI, or null if the authority is undefined
method,java/net/URI/getRawUserInfo/, Returns the raw user-information component of this URI. The user-information component of a URI, if defined, only contains characters in the unreserved, punct, escaped, and other categories. @return The raw user-information component of this URI, or null if the user information is undefined
method,java/net/URI/getHost/, Returns the host component of this URI. The host component of a URI, if defined, will have one of the following forms: A domain name consisting of one or more labels separated by period characters ('.'), optionally followed by a period character. Each label consists of alphanum characters as well as hyphen characters ('-'), though hyphens never occur as the first or last characters in a label. The rightmost label of a domain name consisting of two or more labels, begins with an alpha character. A dotted-quad IPv4 address of the form digit+.digit+.digit+.digit+, where no digit sequence is longer than three characters and no sequence has a value larger than 255. An IPv6 address enclosed in square brackets ('[' and ']') and consisting of hexadecimal digits, colon characters (':'), and possibly an embedded IPv4 address. The full syntax of IPv6 addresses is specified in RFC&nbsp;2373: IPv6 Addressing Architecture. The host component of a URI cannot contain escaped octets, hence this method does not perform any decoding. @return The host component of this URI, or null if the host is undefined
method,java/net/URI/getRawPath/, Returns the raw path component of this URI. The path component of a URI, if defined, only contains the slash character ('/'), the commercial-at character ('@'), and characters in the unreserved, punct, escaped, and other categories. @return The path component of this URI, or null if the path is undefined
method,java/net/URI/getRawQuery/, Returns the raw query component of this URI. The query component of a URI, if defined, only contains legal URI characters. @return The raw query component of this URI, or null if the query is undefined
method,java/net/URI/getRawFragment/, Returns the raw fragment component of this URI. The fragment component of a URI, if defined, only contains legal URI characters. @return The raw fragment component of this URI, or null if the fragment is undefined
method,java/net/URI/toString/, Returns the content of this URI as a string. If this URI was created by invoking one of the constructors in this class then a string equivalent to the original input string, or to the string computed from the originally-given components, as appropriate, is returned. Otherwise this URI was created by normalization, resolution, or relativization, and so a string is constructed from this URI's components according to the rules specified in RFC&nbsp;2396, section&nbsp;5.2, step&nbsp;7. @return The string form of this URI
method,java/net/URI/toASCIIString/, Returns the content of this URI as a US-ASCII string. If this URI does not contain any characters in the other category then an invocation of this method will return the same value as an invocation of the {@link #toString() toString} method. Otherwise this method works as if by invoking that method and then encoding the result. @return The string form of this URI, encoded as needed so that it only contains characters in the US-ASCII charset
method,java/net/URI/URI/String;String;String;String, Constructs a hierarchical URI from the given components. A component may be left undefined by passing null. This convenience constructor works as if by invoking the seven-argument constructor as follows: new&nbsp;{@link #URI(String, String, String, int, String, String, String) URI}(scheme,&nbsp;null,&nbsp;host,&nbsp;-1,&nbsp;path,&nbsp;null,&nbsp;fragment); @param scheme Scheme name @param host Host name @param path Path @param fragment Fragment @throws URISyntaxException If the URI string constructed from the given components violates RFC&nbsp;2396
method,java/net/URI/URI/String;String;String, Constructs a URI from the given components. A component may be left undefined by passing null. This constructor first builds a URI in string form using the given components as follows: Initially, the result string is empty. If a scheme is given then it is appended to the result, followed by a colon character (':'). If a scheme-specific part is given then it is appended. Any character that is not a legal URI character is quoted. Finally, if a fragment is given then a hash character ('#') is appended to the string, followed by the fragment. Any character that is not a legal URI character is quoted. The resulting URI string is then parsed in order to create the new URI instance as if by invoking the {@link #URI(String)} constructor; this may cause a {@link URISyntaxException} to be thrown. @param scheme Scheme name @param ssp Scheme-specific part @param fragment Fragment @throws URISyntaxException If the URI string constructed from the given components violates RFC&nbsp;2396
method,java/net/SocketPermission/implies/Permission, Checks if this socket permission object implies the specified permission. More specifically, this method first ensures that all of the following are true (and returns false if any of them are not): p is an instanceof SocketPermission, p's actions are a proper subset of this object's actions, and p's port range is included in this port range. Note: port range is ignored when p only contains the action, 'resolve'. Then implies checks each of the following, in order, and for each returns true if the stated condition is true: If this object was initialized with a single IP address and one of p's IP addresses is equal to this object's IP address. If this object is a wildcard domain (such as *.sun.com), and p's canonical name (the name without any preceding *) ends with this object's canonical host name. For example, *.sun.com implies *.eng.sun.com.. If this object was not initialized with a single IP address, and one of this object's IP addresses equals one of p's IP addresses. If this canonical name equals p's canonical name. If none of the above are true, implies returns false. @param p the permission to check against. @return true if the specified permission is implied by this object, false if not. 
method,java/net/SocketPermission/equals/Object, Checks two SocketPermission objects for equality. @param obj the object to test for equality with this object. @return true if obj is a SocketPermission, and has the same hostname, port range, and actions as this SocketPermission object. However, port range will be ignored in the comparison if obj only contains the action, 'resolve'.
method,java/net/SocketPermission/SocketPermission/String;String, Creates a new SocketPermission object with the specified actions. The host is expressed as a DNS name, or as a numerical IP address. Optionally, a port or a portrange may be supplied (separated from the DNS name or IP address by a colon). To specify the local machine, use localhost as the host. Also note: An empty host String () is equivalent to localhost. The actions parameter contains a comma-separated list of the actions granted for the specified host (and port(s)). Possible actions are connect, listen, accept, resolve, or any combination of those. resolve is automatically added when any of the other three are specified. Examples of SocketPermission instantiation are the following: nr = new SocketPermission(www.catalog.com, connect); nr = new SocketPermission(www.sun.com:80, connect); nr = new SocketPermission(*.sun.com, connect); nr = new SocketPermission(*.edu, resolve); nr = new SocketPermission(204.160.241.0, connect); nr = new SocketPermission(localhost:1024-65535, listen); nr = new SocketPermission(204.160.241.0:1024-65535, connect); @param host the hostname or IPaddress of the computer, optionally including a colon followed by a port or port range. @param action the action string.
field,java/net/SocketOptions/TCP_NODELAY, Disable Nagle's algorithm for this connection. Written data to the network is not buffered pending acknowledgement of previously written data. Valid for TCP only: SocketImpl. @see Socket#setTcpNoDelay @see Socket#getTcpNoDelay
field,java/net/SocketOptions/SO_REUSEADDR,Sets SO_REUSEADDR for a socket. This is used only for MulticastSockets in java, and it is set by default for MulticastSockets. Valid for: DatagramSocketImpl
field,java/net/SocketOptions/SO_BROADCAST, Sets SO_BROADCAST for a socket. This option enables and disables the ability of the process to send broadcast messages. It is supported for only datagram sockets and only on networks that support the concept of a broadcast message (e.g. Ethernet, token ring, etc.), and it is set by default for DatagramSockets. @since 1.4
field,java/net/SocketOptions/IP_MULTICAST_IF2,Same as above. This option is introduced so that the behaviour with IP_MULTICAST_IF will be kept the same as before, while this new option can support setting outgoing interfaces with either IPv4 and IPv6 addresses. NOTE: make sure there is no conflict with this @see MulticastSocket#setNetworkInterface(NetworkInterface) @see MulticastSocket#getNetworkInterface() @since 1.4
field,java/net/SocketOptions/SO_LINGER, Specify a linger-on-close timeout. This option disables/enables immediate return from a close() of a TCP Socket. Enabling this option with a non-zero Integer timeout means that a close() will block pending the transmission and acknowledgement of all data written to the peer, at which point the socket is closed gracefully. Upon reaching the linger timeout, the socket is closed forcefully, with a TCP RST. Enabling the option with a timeout of zero does a forceful close immediately. If the specified timeout value exceeds 65,535 it will be reduced to 65,535. Valid only for TCP: SocketImpl @see Socket#setSoLinger @see Socket#getSoLinger
field,java/net/SocketOptions/SO_SNDBUF, Set a hint the size of the underlying buffers used by the platform for outgoing network I/O. When used in set, this is a suggestion to the kernel from the application about the size of buffers to use for the data to be sent over the socket. When used in get, this must return the size of the buffer actually used by the platform when sending out data on this socket. Valid for all sockets: SocketImpl, DatagramSocketImpl @see Socket#setSendBufferSize @see Socket#getSendBufferSize @see DatagramSocket#setSendBufferSize @see DatagramSocket#getSendBufferSize
field,java/net/SocketOptions/SO_RCVBUF, Set a hint the size of the underlying buffers used by the platform for incoming network I/O. When used in set, this is a suggestion to the kernel from the application about the size of buffers to use for the data to be received over the socket. When used in get, this must return the size of the buffer actually used by the platform when receiving in data on this socket. Valid for all sockets: SocketImpl, DatagramSocketImpl @see Socket#setReceiveBufferSize @see Socket#getReceiveBufferSize @see DatagramSocket#setReceiveBufferSize @see DatagramSocket#getReceiveBufferSize
field,java/net/SocketOptions/SO_KEEPALIVE, When the keepalive option is set for a TCP socket and no data has been exchanged across the socket in either direction for 2 hours (NOTE: the actual value is implementation dependent), TCP automatically sends a keepalive probe to the peer. This probe is a TCP segment to which the peer must respond. One of three responses is expected: 1. The peer responds with the expected ACK. The application is not notified (since everything is OK). TCP will send another probe following another 2 hours of inactivity. 2. The peer responds with an RST, which tells the local TCP that the peer host has crashed and rebooted. The socket is closed. 3. There is no response from the peer. The socket is closed. The purpose of this option is to detect if the peer host crashes. Valid only for TCP socket: SocketImpl @see Socket#setKeepAlive @see Socket#getKeepAlive
class,java/net/SocketImpl, The abstract class SocketImpl is a common superclass of all classes that actually implement sockets. It is used to create both client and server sockets. A plain socket implements these methods exactly as described, without attempting to go through a firewall or proxy. @author unascribed @version 1.46, 03/23/10 @since JDK1.0
method,java/net/SocketImpl/supportsUrgentData/, Returns whether or not this SocketImpl supports sending urgent data. By default, false is returned unless the method is overridden in a sub-class @return true if urgent data supported @see java.net.SocketImpl#address @since 1.4
method,java/net/SocketImpl/sendUrgentData/int, Send one byte of urgent data on the socket. The byte to be sent is the low eight bits of the parameter @param data The byte of data to send @exception IOException if there is an error sending the data. @since 1.4
method,java/net/SocketImpl/setPerformancePreferences/int;int;int, Sets performance preferences for this socket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. Negative values represent a lower priority than positive values. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). By default, this method does nothing, unless it is overridden in a a sub-class. @param connectionTime An int expressing the relative importance of a short connection time @param latency An int expressing the relative importance of low latency @param bandwidth An int expressing the relative importance of high bandwidth @since 1.5
class,java/net/SocketException, Thrown to indicate that there is an error in the underlying protocol, such as a TCP error. @author Jonathan Payne @version 1.19, 03/23/10 @since JDK1.0
class,java/net/SocketAddress, This class represents a Socket Address with no protocol attachment. As an abstract class, it is meant to be subclassed with a specific, protocol dependent, implementation. It provides an immutable object used by sockets for binding, connecting, or as returned values. @see	java.net.Socket @see	java.net.ServerSocket @since 1.4
class,java/net/Socket, This class implements client sockets (also called just sockets). A socket is an endpoint for communication between two machines. The actual work of the socket is performed by an instance of the SocketImpl class. An application, by changing the socket factory that creates the socket implementation, can configure itself to create sockets appropriate to the local firewall. @author unascribed @version 1.115, 09/05/07 @see java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory) @see java.net.SocketImpl @see java.nio.channels.SocketChannel @since JDK1.0
method,java/net/Socket/bind/SocketAddress, Binds the socket to a local address. If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket. @param	bindpoint the SocketAddress to bind to @throws	IOException if the bind operation fails, or if the socket			 is already bound. @throws IllegalArgumentException if bindpoint is a SocketAddress subclass not supported by this socket @since	1.4 @see #isBound
method,java/net/Socket/getChannel/, Returns the unique {@link java.nio.channels.SocketChannel SocketChannel} object associated with this socket, if any. A socket will have a channel if, and only if, the channel itself was created via the {@link java.nio.channels.SocketChannel#open SocketChannel.open} or {@link java.nio.channels.ServerSocketChannel#accept ServerSocketChannel.accept} methods. @return the socket channel associated with this socket, or null if this socket was not created for a channel @since 1.4 @spec JSR-51
method,java/net/Socket/sendUrgentData/int, Send one byte of urgent data on the socket. The byte to be sent is the lowest eight bits of the data parameter. The urgent byte is sent after any preceding writes to the socket OutputStream and before any future writes to the OutputStream. @param data The byte of data to send @exception IOException if there is an error sending the data. @since 1.4
method,java/net/Socket/getTrafficClass/, Gets traffic class or type-of-service in the IP header for packets sent from this Socket As the underlying network implementation may ignore the traffic class or type-of-service set using {@link #setTrafficClass(int)} this method may return a different value than was previously set using the {@link #setTrafficClass(int)} method on this Socket. @return the traffic class or type-of-service already set @throws SocketException if there is an error obtaining the traffic class or type-of-service value. @since 1.4 @see #setTrafficClass(int)
method,java/net/Socket/setPerformancePreferences/int;int;int, Sets performance preferences for this socket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. Negative values represent a lower priority than positive values. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). Invoking this method after this socket has been connected will have no effect. @param connectionTime An int expressing the relative importance of a short connection time @param latency An int expressing the relative importance of low latency @param bandwidth An int expressing the relative importance of high bandwidth @since 1.5
method,java/net/Socket/Socket/Proxy, Creates an unconnected socket, specifying the type of proxy, if any, that should be used regardless of any other settings. If there is a security manager, its checkConnect method is called with the proxy host address and port number as its arguments. This could result in a SecurityException. Examples: Socket s = new Socket(Proxy.NO_PROXY); will create a plain socket ignoring any other proxy configuration. Socket s = new Socket(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(socks.mydom.com, 1080))); will create a socket connecting through the specified SOCKS proxy server. @param proxy a {@link java.net.Proxy Proxy} object specifying what kind		 of proxying should be used. @throws IllegalArgumentException if the proxy is of an invalid type 		or null. @throws SecurityException if a security manager is present and				 permission to connect to the proxy is				 denied. @see java.net.ProxySelector @see java.net.Proxy @since 1.5
method,java/net/ServerSocket/bind/SocketAddress, Binds the ServerSocket to a specific address (IP address and port number). If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket. @param	endpoint	The IP address & port number to bind to. @throws	IOException if the bind operation fails, or if the socket			 is already bound. @throws	SecurityException	if a SecurityManager is present and its checkListen method doesn't allow the operation. @throws IllegalArgumentException if endpoint is a SocketAddress subclass not supported by this socket @since 1.4
method,java/net/ServerSocket/getChannel/, Returns the unique {@link java.nio.channels.ServerSocketChannel} object associated with this socket, if any. A server socket will have a channel if, and only if, the channel itself was created via the {@link java.nio.channels.ServerSocketChannel#open ServerSocketChannel.open} method. @return the server-socket channel associated with this socket, or null if this socket was not created for a channel @since 1.4 @spec JSR-51
method,java/net/ServerSocket/ServerSocket/, Creates an unbound server socket. @exception IOException IO error when opening the socket. @revised 1.4
method,java/net/SecureCacheResponse/getLocalCertificateChain/, Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource. Note: This method is useful only when using certificate-based cipher suites. @return an immutable List of Certificate representing the certificate chain that was sent to the server. If no certificate chain was sent, null will be returned. @see #getLocalPrincipal()
method,java/net/SecureCacheResponse/getServerCertificateChain/, Returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache. Note: This method can be used only when using certificate-based cipher suites; using it with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException. @return an immutable List of Certificate representing the server's certificate chain. @throws SSLPeerUnverifiedException if the peer is not verified. @see #getPeerPrincipal()
class,java/net/ResponseCache, Represents implementations of URLConnection caches. An instance of such a class can be registered with the system by doing ResponseCache.setDefault(ResponseCache), and the system will call this object in order to: store resource data which has been retrieved from an external source into the cache try to fetch a requested resource that may have been stored in the cache The ResponseCache implementation decides which resources should be cached, and for how long they should be cached. If a request resource cannot be retrieved from the cache, then the protocol handlers will fetch the resource from its original location. The settings for URLConnection#useCaches controls whether the protocol is allowed to use a cached response. For more information on HTTP caching, see RFC&nbsp;2616: Hypertext Transfer Protocol -- HTTP/1.1 @version 1.1, 03/09/22 @author Yingxian Wang @since 1.5
method,java/net/ResponseCache/setDefault/ResponseCache, Sets (or unsets) the system-wide cache. Note: non-standard procotol handlers may ignore this setting. @param responseCache The response cache, or		null to unset the cache. @throws SecurityException If a security manager has been installed and it denies {@link NetPermission}(setResponseCache) @see #getDefault() @since 1.5
method,java/net/ResponseCache/get/URI;String;Map, Retrieve the cached response based on the requesting uri, request method and request headers. Typically this method is called by the protocol handler before it sends out the request to get the network resource. If a cached response is returned, that resource is used instead. @param uri a URI used to reference the requested network resource @param rqstMethod a String representing the request method @param rqstHeaders - a Map from request header field names to lists of field values representing the current request headers @return a CacheResponse instance if available from cache, or null otherwise @throws	IOException if an I/O error occurs @throws IllegalArgumentException if any one of the arguments is null @see java.net.URLConnection#setUseCaches(boolean) @see java.net.URLConnection#getUseCaches() @see java.net.URLConnection#setDefaultUseCaches(boolean) @see java.net.URLConnection#getDefaultUseCaches()
method,java/net/ProxySelector/setDefault/ProxySelector, Sets (or unsets) the system-wide proxy selector. Note: non-standard protocol handlers may ignore this setting. @param ps The HTTP proxy selector, or		null to unset the proxy selector. @throws SecurityException If a security manager has been installed and it denies {@link NetPermission}(setProxySelector) @see #getDefault() @since 1.5
method,java/net/ProxySelector/select/URI, Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at. The format of the URI is defined as follow: http URI for http connections https URI for https connections ftp URI for ftp connections socket://host:port for tcp client sockets connections @param	uri		The URI that a connection is required to @return	a List of Proxies. Each element in the		the List is of type {@link java.net.Proxy Proxy}; when no proxy is available, the list will contain one element of type {@link java.net.Proxy Proxy} that represents a direct connection. @throws IllegalArgumentException if either argument is null
method,java/net/ProxySelector/connectFailed/URI;SocketAddress;IOException, Called to indicate that a connection could not be established to a proxy/socks server. An implementation of this method can temporarily remove the proxies or reorder the sequence of proxies returned by select(String, String), using the address and they kind of IOException given. @param uri The URI that the proxy at sa failed to serve. @param	sa		The socket address of the proxy/SOCKS server @param	ioe		The I/O exception thrown when the connect failed. @throws IllegalArgumentException if either argument is null
method,java/net/Proxy/toString/, Constructs a string representation of this Proxy. This String is constructed by calling toString() on its type and concatenating @ and the toString() result from its address if its type is not DIRECT. @return a string representation of this object.
method,java/net/Proxy/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same proxy as this object. Two instances of Proxy represent the same address if both the SocketAddresses and type are equal. @param obj the object to compare against. @return true if the objects are the same; false otherwise. @see java.net.InetSocketAddress#equals(java.lang.Object)
class,java/net/ProtocolException, Thrown to indicate that there is an error in the underlying protocol, such as a TCP error. @author Chris Warth @version 1.18, 03/23/10 @since JDK1.0
method,java/net/PasswordAuthentication/getPassword/, Returns the user password. Note that this method returns a reference to the password. It is the caller's responsibility to zero out the password information after it is no longer needed. @return the password
method,java/net/PasswordAuthentication/PasswordAuthentication/String;char[], Creates a new PasswordAuthentication object from the given user name and password. Note that the given user password is cloned before it is stored in the new PasswordAuthentication object. @param userName the user name @param password the user's password
class,java/net/NoRouteToHostException, Signals that an error occurred while attempting to connect a socket to a remote address and port. Typically, the remote host cannot be reached because of an intervening firewall, or if an intermediate router is down. @since JDK1.1
method,java/net/NoRouteToHostException/NoRouteToHostException/String, Constructs a new NoRouteToHostException with the specified detail message as to why the remote host cannot be reached. A detail message is a String that gives a specific description of this error. @param msg the detail message
method,java/net/NetworkInterface/getInetAddresses/, Convenience method to return an Enumeration with all or a subset of the InetAddresses bound to this network interface. If there is a security manager, its checkConnect method is called for each InetAddress. Only InetAddresses where the checkConnect doesn't throw a SecurityException will be returned in the Enumeration. @return an Enumeration object with all or a subset of the InetAddresses bound to this network interface
method,java/net/NetworkInterface/getInterfaceAddresses/, Get a List of all or a subset of the InterfaceAddresses of this network interface. If there is a security manager, its checkConnect method is called with the InetAddress for each InterfaceAddress. Only InterfaceAddresses where the checkConnect doesn't throw a SecurityException will be returned in the List. @return a List object with all or a subset of the	 InterfaceAddresss of this network interface @since 1.6
method,java/net/NetworkInterface/getByName/String, Searches for the network interface with the specified name. @param name 		The name of the network interface. @return A NetworkInterface with the specified name, or null if there is no network interface		with the specified name. @throws	SocketException 	 If an I/O error occurs. @throws NullPointerException		If the specified name is null.
method,java/net/NetworkInterface/getNetworkInterfaces/, Returns all the interfaces on this machine. Returns null if no network interfaces could be found on this machine. NOTE: can use getNetworkInterfaces()+getInetAddresses() to obtain all IP addresses for this node @return an Enumeration of NetworkInterfaces found on this machine @exception SocketException if an I/O error occurs.
method,java/net/NetworkInterface/isUp/, Returns whether a network interface is up and running. @return	true if the interface is up and running. @exception	SocketException if an I/O error occurs. @since 1.6
method,java/net/NetworkInterface/isLoopback/, Returns whether a network interface is a loopback interface. @return	true if the interface is a loopback interface. @exception	SocketException if an I/O error occurs. @since 1.6
method,java/net/NetworkInterface/isPointToPoint/, Returns whether a network interface is a point to point interface. A typical point to point interface would be a PPP connection through a modem. @return	true if the interface is a point to point		interface. @exception	SocketException if an I/O error occurs. @since 1.6
method,java/net/NetworkInterface/supportsMulticast/, Returns whether a network interface supports multicasting or not. @return	true if the interface supports Multicasting. @exception	SocketException if an I/O error occurs. @since 1.6
method,java/net/NetworkInterface/getHardwareAddress/, Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current privileges. @return	a byte array containing the address or null if		the address doesn't exist or is not accessible. @exception	SocketException if an I/O error occurs. @since 1.6
method,java/net/NetworkInterface/getMTU/, Returns the Maximum Transmission Unit (MTU) of this interface. @return the value of the MTU for that interface. @exception	SocketException if an I/O error occurs. @since 1.6
method,java/net/NetworkInterface/isVirtual/, Returns whether this interface is a virtual interface (also called subinterface). Virtual interfaces are, on some systems, interfaces created as a child of a physical interface and given different settings (like address or MTU). Usually the name of the interface will the name of the parent followed by a colon (:) and a number identifying the child since there can be several virtual interfaces attached to a single physical interface. @return true if this interface is a virtual interface. @since 1.6
method,java/net/NetworkInterface/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same NetworkInterface as this object. Two instances of NetworkInterface represent the same NetworkInterface if both name and addrs are the same for both. @param obj the object to compare against. @return true if the objects are the same; false otherwise. @see java.net.InetAddress#getAddress()
class,java/net/NetPermission, This class is for various network permissions. A NetPermission contains a name (also referred to as a target name) but no actions list; you either have the named permission or you don't. The target name is the name of the network permission (see below). The naming convention follows the hierarchical property naming convention. Also, an asterisk may appear at the end of the name, following a ., or by itself, to signify a wildcard match. For example: foo.* or * is valid, *foo or a*b is not valid. The following table lists all the possible NetPermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission. Permission Target Name What the Permission Allows Risks of Allowing this Permission setDefaultAuthenticator The ability to set the way authentication information is retrieved when a proxy or HTTP server asks for authentication Malicious code can set an authenticator that monitors and steals user authentication input as it retrieves the input from the user. requestPasswordAuthentication The ability to ask the authenticator registered with the system for a password Malicious code may steal this password. specifyStreamHandler The ability to specify a stream handler when constructing a URL Malicious code may create a URL with resources that it wouldnormally not have access to (like file:/foo/fum/), specifying astream handler that gets the actual bytes from someplace it does have access to. Thus it might be able to trick the system intocreating a ProtectionDomain/CodeSource for a class even thoughthat class really didn't come from that location. setProxySelector The ability to set the proxy selector used to make decisions on which proxies to use when making network connections. Malicious code can set a ProxySelector that directs network traffic to an arbitrary network host. getProxySelector The ability to get the proxy selector used to make decisions on which proxies to use when making network connections. Malicious code can get a ProxySelector to discover proxy hosts and ports on internal networks, which could then become targets for attack. setCookieHandler The ability to set the cookie handler that processes highly security sensitive cookie information for an Http session. Malicious code can set a cookie handler to obtain access to highly security sensitive cookie information. Some web servers use cookies to save user private information such as access control information, or to track user browsing habit. getCookieHandler The ability to get the cookie handler that processes highly security sensitive cookie information for an Http session. Malicious code can get a cookie handler to obtain access to highly security sensitive cookie information. Some web servers use cookies to save user private information such as access control information, or to track user browsing habit. setResponseCache The ability to set the response cache that provides access to a local response cache. Malicious code getting access to the local response cache could access security sensitive information, or create false entries in the response cache. getResponseCache The ability to get the response cache that provides access to a local response cache. Malicious code getting access to the local response cache could access security sensitive information. @see java.security.BasicPermission @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @see java.lang.SecurityManager @version 1.52 10/03/23 @author Marianne Mueller @author Roland Schemers
method,java/net/MulticastSocket/setTTL/byte, Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts. The ttl is an unsigned 8-bit quantity, and so must be in the range 0 . @param ttl the time-to-live @exception IOException if an I/O exception occurs while setting the default time-to-live value @deprecated use the setTimeToLive method instead, which uses int instead of byte as the type for ttl. @see #getTTL()
method,java/net/MulticastSocket/setTimeToLive/int, Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts. The ttl must be in the range 0 or an IllegalArgumentException will be thrown. @exception IOException if an I/O exception occurs while setting the default time-to-live value @param ttl the time-to-live @see #getTimeToLive()
method,java/net/MulticastSocket/leaveGroup/InetAddress, Leave a multicast group. Its behavior may be affected by setInterface or setNetworkInterface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument. @param mcastaddr is the multicast address to leave @exception IOException if there is an error leaving or when the address is not a multicast address. @exception SecurityException if a security manager exists and its checkMulticast method doesn't allow the operation. @see SecurityManager#checkMulticast(InetAddress)
method,java/net/MulticastSocket/setLoopbackMode/boolean, Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket. Because this option is a hint, applications that want to verify what loopback mode is set to should call {@link #getLoopbackMode()} @param disable true to disable the LoopbackMode @throws SocketException if an error occurs while setting the value @since 1.4 @see #getLoopbackMode
method,java/net/MulticastSocket/getLoopbackMode/, Get the setting for local loopback of multicast datagrams. @throws SocketException if an error occurs while getting the value @return true if the LoopbackMode has been disabled @since 1.4 @see #setLoopbackMode
method,java/net/MulticastSocket/send/DatagramPacket;byte, Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket. This method need only be used in instances where a particular TTL is desired; otherwise it is preferable to set a TTL once on the socket, and use that default TTL for all packets. This method does not alter the default TTL for the socket. Its behavior may be affected by setInterface. If there is a security manager, this method first performs some security checks. First, if p.getAddress().isMulticastAddress() is true, this method calls the security manager's checkMulticast method with p.getAddress() and ttl as its arguments. If the evaluation of that expression is false, this method instead calls the security manager's checkConnect method with arguments p.getAddress().getHostAddress() and p.getPort(). Each call to a security manager method could result in a SecurityException if the operation is not allowed. @param p	is the packet to be sent. The packet should contain the destination multicast ip address and the data to be sent. One does not need to be the member of the group to send packets to a destination multicast address. @param ttl optional time to live for multicast packet. default ttl is 1. @exception IOException is raised if an error occurs i.e error while setting ttl. @exception SecurityException if a security manager exists and its checkMulticast or checkConnect method doesn't allow the send. @deprecated Use the following code or its equivalent instead:	......	int ttl = mcastSocket.getTimeToLive(); mcastSocket.setTimeToLive(newttl);	mcastSocket.send(p);	mcastSocket.setTimeToLive(ttl);	...... @see DatagramSocket#send @see DatagramSocket#receive @see SecurityManager#checkMulticast(java.net.InetAddress, byte) @see SecurityManager#checkConnect
method,java/net/MulticastSocket/MulticastSocket/, Create a multicast socket. If there is a security manager, its checkListen method is first called with 0 as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the {@link DatagramSocket#setReuseAddress(boolean)} method is called to enable the SO_REUSEADDR socket option. @exception IOException if an I/O exception occurs while creating the MulticastSocket @exception SecurityException if a security manager exists and its checkListen method doesn't allow the operation. @see SecurityManager#checkListen @see java.net.DatagramSocket#setReuseAddress(boolean) 
method,java/net/MulticastSocket/MulticastSocket/int, Create a multicast socket and bind it to a specific port. If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the {@link DatagramSocket#setReuseAddress(boolean)} method is called to enable the SO_REUSEADDR socket option. @param port port to use @exception IOException if an I/O exception occurs while creating the MulticastSocket @exception SecurityException if a security manager exists and its checkListen method doesn't allow the operation. @see SecurityManager#checkListen @see java.net.DatagramSocket#setReuseAddress(boolean) 
method,java/net/MulticastSocket/MulticastSocket/SocketAddress, Create a MulticastSocket bound to the specified socket address. Or, if the address is null, create an unbound socket. If there is a security manager, its checkListen method is first called with the SocketAddress port as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the {@link DatagramSocket#setReuseAddress(boolean)} method is called to enable the SO_REUSEADDR socket option. @param bindaddr Socket address to bind to, or null for an unbound socket. @exception IOException if an I/O exception occurs while creating the MulticastSocket @exception SecurityException if a security manager exists and its checkListen method doesn't allow the operation. @see SecurityManager#checkListen @see java.net.DatagramSocket#setReuseAddress(boolean) @since 1.4
class,java/net/JarURLConnection, A URL Connection to a Java ARchive (JAR) file or an entry in a JAR file. The syntax of a JAR URL is: jar:&lt;url&gt;!/{entry} for example: jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class Jar URLs should be used to refer to a JAR file or entries in a JAR file. The example above is a JAR URL which refers to a JAR entry. If the entry name is omitted, the URL refers to the whole JAR file: jar:http://www.foo.com/bar/baz.jar!/ Users should cast the generic URLConnection to a JarURLConnection when they know that the URL they created is a JAR URL, and they need JAR-specific functionality. For example: URL url = new URL(jar:file:/home/duke/duke.jar!/); JarURLConnection jarConnection = (JarURLConnection)url.openConnection(); Manifest manifest = jarConnection.getManifest(); JarURLConnection instances can only be used to read from JAR files. It is not possible to get a {@link java.io.OutputStream} to modify or write to the underlying JAR file using this class. Examples: A Jar entry jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class A Jar file jar:http://www.foo.com/bar/baz.jar!/ A Jar directory jar:http://www.foo.com/bar/baz.jar!/COM/foo/ !/ is refered to as the separator. When constructing a JAR url via new URL(context, spec), the following rules apply: if there is no context URL and the specification passed to the URL constructor doesn't contain a separator, the URL is considered to refer to a JarFile. if there is a context URL, the context URL is assumed to refer to a JAR file or a Jar directory. if the specification begins with a '/', the Jar directory is ignored, and the spec is considered to be at the root of the Jar file. Examples: context: jar:http://www.foo.com/bar/jar.jar!/, spec:baz/entry.txt url:jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt context: jar:http://www.foo.com/bar/jar.jar!/baz, spec:entry.txt url:jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt context: jar:http://www.foo.com/bar/jar.jar!/baz, spec:/entry.txt url:jar:http://www.foo.com/bar/jar.jar!/entry.txt @see java.net.URL @see java.net.URLConnection @see java.util.jar.JarFile @see java.util.jar.JarInputStream @see java.util.jar.Manifest @see java.util.zip.ZipEntry @author Benjamin Renaud @since 1.2 
field,java/net/JarURLConnection/jarFileURLConnection, The connection to the JAR file URL, if the connection has been initiated. This should be set by connect.
method,java/net/InterfaceAddress/getBroadcast/, Returns an InetAddress for the brodcast address for this InterfaceAddress. Only IPv4 networks have broadcast address therefore, in the case of an IPv6 network, null will be returned. @return the InetAddress representing the broadcast address or null if there is no broadcast address.
method,java/net/InterfaceAddress/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same interface address as this object. Two instances of InterfaceAddress represent the same address if the InetAddress, the prefix length and the broadcast are the same for both. @param obj the object to compare against. @return true if the objects are the same; false otherwise. @see java.net.InterfaceAddress#hashCode()
class,java/net/InetSocketAddress, This class implements an IP Socket Address (IP address + port number) It can also be a pair (hostname + port number), in which case an attempt will be made to resolve the hostname. If resolution fails then the address is said to be unresolved but can still be used on some circumstances like connecting through a proxy. It provides an immutable object used by sockets for binding, connecting, or as returned values. The wildcard is a special local IP address. It usually means any and can only be used for bind operations. @see	java.net.Socket @see	java.net.ServerSocket @since 1.4
method,java/net/InetSocketAddress/toString/, Constructs a string representation of this InetSocketAddress. This String is constructed by calling toString() on the InetAddress and concatenating the port number (with a colon). If the address is unresolved then the part before the colon will only contain the hostname. @return a string representation of this object.
method,java/net/InetSocketAddress/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same address as this object. Two instances of InetSocketAddress represent the same address if both the InetAddresses (or hostnames if it is unresolved) and port numbers are equal. If both addresses are unresolved, then the hostname & the port number are compared. @param obj the object to compare against. @return true if the objects are the same; false otherwise. @see java.net.InetAddress#equals(java.lang.Object)
method,java/net/InetAddress/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same IP address as this object. Two instances of InetAddress represent the same IP address if the length of the byte arrays returned by getAddress is the same for both, and each of the array components is the same for the byte arrays. @param obj the object to compare against. @return true if the objects are the same; false otherwise. @see java.net.InetAddress#getAddress()
method,java/net/InetAddress/getByName/String, Determines the IP address of a host, given the host's name. The host name can either be a machine name, such as java.sun.com, or a textual representation of its IP address. If a literal IP address is supplied, only the validity of the address format is checked. For host specified in literal IPv6 address, either the form defined in RFC 2732 or the literal IPv6 address format defined in RFC 2373 is accepted. IPv6 scoped addresses are also supported. See here for a description of IPv6 scoped addresses. If the host is null then an InetAddress representing an address of the loopback interface is returned. See RFC&nbsp;3330 section&nbsp;2 and RFC&nbsp;2373 section&nbsp;2.5.3. @param host the specified host, or null. @return an IP address for the given host name. @exception UnknownHostException if no IP address for the host could be found, or if a scope_id was specified		 for a global IPv6 address. @exception SecurityException if a security manager exists and its checkConnect method doesn't allow the operation
method,java/net/InetAddress/getAllByName/String, Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system. The host name can either be a machine name, such as java.sun.com, or a textual representation of its IP address. If a literal IP address is supplied, only the validity of the address format is checked. For host specified in literal IPv6 address, either the form defined in RFC 2732 or the literal IPv6 address format defined in RFC 2373 is accepted. A literal IPv6 address may also be qualified by appending a scoped zone identifier or scope_id. The syntax and usage of scope_ids is described here. If the host is null then an InetAddress representing an address of the loopback interface is returned. See RFC&nbsp;3330 section&nbsp;2 and RFC&nbsp;2373 section&nbsp;2.5.3. If there is a security manager and host is not null and host.length() is not equal to zero, the security manager's checkConnect method is called with the hostname and -1 as its arguments to see if the operation is allowed. @param host the name of the host, or null. @return an array of all the IP addresses for a given host name. @exception UnknownHostException if no IP address for the host could be found, or if a scope_id was specified		 for a global IPv6 address. @exception SecurityException if a security manager exists and its checkConnect method doesn't allow the operation. @see SecurityManager#checkConnect
method,java/net/InetAddress/getLocalHost/, Returns the local host. If there is a security manager, its checkConnect method is called with the local host name and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, an InetAddress representing the loopback address is returned. @return the IP address of the local host. @exception UnknownHostException if no IP address for the host could be found. @see SecurityManager#checkConnect
class,java/net/Inet6Address, This class represents an Internet Protocol version 6 (IPv6) address. Defined by RFC&nbsp;2373: IP Version 6 Addressing Architecture. Textual representation of IP addresses Textual representation of IPv6 address used as input to methods takes one of the following forms: The preferred form is x:x:x:x:x:x:x:x, where the 'x's are the hexadecimal values of the eight 16-bit pieces of the address. This is the full form. For example, 1080:0:0:0:8:800:200C:417A Note that it is not necessary to write the leading zeros in an individual field. However, there must be at least one numeral in every field, except as described below. Due to some methods of allocating certain styles of IPv6 addresses, it will be common for addresses to contain long strings of zero bits. In order to make writing addresses containing zero bits easier, a special syntax is available to compress the zeros. The use of :: indicates multiple groups of 16-bits of zeros. The :: can only appear once in an address. The :: can also be used to compress the leading and/or trailing zeros in an address. For example, 1080::8:800:200C:417A An alternative form that is sometimes more convenient when dealing with a mixed environment of IPv4 and IPv6 nodes is x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values of the six high-order 16-bit pieces of the address, and the 'd's are the decimal values of the four low-order 8-bit pieces of the standard IPv4 representation address, for example, ::FFFF:129.144.52.38 ::129.144.52.38 where ::FFFF:d.d.d.d and ::d.d.d.d are, respectively, the general forms of an IPv4-mapped IPv6 address and an IPv4-compatible IPv6 address. Note that the IPv4 portion must be in the d.d.d.d form. The following forms are invalid: ::FFFF:d.d.d ::FFFF:d.d ::d.d.d ::d.d The following form: ::FFFF:d is valid, however it is an unconventional representation of the IPv4-compatible IPv6 address, ::255.255.0.d while ::d corresponds to the general IPv6 address 0:0:0:0:0:0:0:d. For methods that return a textual representation as output value, the full form is used. Inet6Address will return the full form because it is unambiguous when used in combination with other textual data. Special IPv6 address IPv4-mapped address Of the form::ffff:w.x.y.z, this IPv6 address is used to represent an IPv4 address. It allows the native program to use the same address data structure and also the same socket when communicating with both IPv4 and IPv6 nodes. In InetAddress and Inet6Address, it is used for internal representation; it has no functional role. Java will never return an IPv4-mapped address. These classes can take an IPv4-mapped address as input, both in byte array and text representation. However, it will be converted into an IPv4 address. Textual representation of IPv6 scoped addresses The textual representation of IPv6 addresses as described above can be extended to specify IPv6 scoped addresses. This extension to the basic addressing architecture is described in [draft-ietf-ipngwg-scoping-arch-04.txt]. Because link-local and site-local addresses are non-global, it is possible that different hosts may have the same destination address and may be reachable through different interfaces on the same originating system. In this case, the originating system is said to be connected to multiple zones of the same scope. In order to disambiguate which is the intended destination zone, it is possible to append a zone identifier (or scope_id) to an IPv6 address. The general format for specifying the scope_id is the following: IPv6-address%scope_id The IPv6-address is a literal IPv6 address as described above. The scope_id refers to an interface on the local system, and it can be specified in two ways. As a numeric identifier. This must be a positive integer that identifies the particular interface and scope as understood by the system. Usually, the numeric values can be determined through administration tools on the system. Each interface may have multiple values, one for each scope. If the scope is unspecified, then the default value used is zero. As a string. This must be the exact string that is returned by {@link java.net.NetworkInterface#getName()} for the particular interface in question. When an Inet6Address is created in this way, the numeric scope-id is determined at the time the object is created by querying the relevant NetworkInterface. Note also, that the numeric scope_id can be retrieved from Inet6Address instances returned from the NetworkInterface class. This can be used to find out the current scope ids configured on the system. @since 1.4
method,java/net/Inet6Address/getByAddress/String;byte[];NetworkInterface, Create an Inet6Address in the exact manner of {@link InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type specified in addr. The call will fail with an UnknownHostException if the given interface does not have a numeric scope_id assigned for the given address type (eg. link-local or site-local). See here for a description of IPv6 scoped addresses. @param host the specified host @param addr the raw IP address in network byte order @param nif an interface this address must be associated with. @return an Inet6Address object created from the raw IP address. @exception UnknownHostException if IP address is of illegal length, or if the interface		does not have a numeric scope_id assigned for the given address type. @since 1.5
method,java/net/Inet6Address/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same IP address as this object. Two instances of InetAddress represent the same IP address if the length of the byte arrays returned by getAddress is the same for both, and each of the array components is the same for the byte arrays. @param obj the object to compare against. @return true if the objects are the same; false otherwise. @see java.net.InetAddress#getAddress()
class,java/net/Inet4Address, This class represents an Internet Protocol version 4 (IPv4) address. Defined by RFC&nbsp;790: Assigned Numbers, RFC&nbsp;1918: Address Allocation for Private Internets, and RFC&nbsp;2365: Administratively Scoped IP Multicast Textual representation of IP addresses Textual representation of IPv4 address used as input to methods takes one of the following forms: d.d.d.d d.d.d d.d d When four parts are specified, each is interpreted as a byte of data and assigned, from left to right, to the four bytes of an IPv4 address. When a three part address is specified, the last part is interpreted as a 16-bit quantity and placed in the right most two bytes of the network address. This makes the three part address format convenient for specifying Class B net- work addresses as 128.net.host. When a two part address is supplied, the last part is interpreted as a 24-bit quantity and placed in the right most three bytes of the network address. This makes the two part address format convenient for specifying Class A network addresses as net.host. When only one part is given, the value is stored directly in the network address without any byte rearrangement. For methods that return a textual representation as output value, the first form, i.e. a dotted-quad string, is used. The Scope of a Multicast Address Historically the IPv4 TTL field in the IP header has doubled as a multicast scope field: a TTL of 0 means node-local, 1 means link-local, up through 32 means site-local, up through 64 means region-local, up through 128 means continent-local, and up through 255 are global. However, the administrative scoping is preferred. Please refer to RFC&nbsp;2365: Administratively Scoped IP Multicast @since 1.4
method,java/net/Inet4Address/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same IP address as this object. Two instances of InetAddress represent the same IP address if the length of the byte arrays returned by getAddress is the same for both, and each of the array components is the same for the byte arrays. @param obj the object to compare against. @return true if the objects are the same; false otherwise. @see java.net.InetAddress#getAddress()
class,java/net/IDN, Provides methods to convert internationalized domain names (IDNs) between a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation. Internationalized domain names can use characters from the entire range of Unicode, while traditional domain names are restricted to ASCII characters. ACE is an encoding of Unicode strings that uses only ASCII characters and can be used with software (such as the Domain Name System) that only understands traditional domain names. Internationalized domain names are defined in RFC 3490. RFC 3490 defines two operations: ToASCII and ToUnicode. These 2 operations employ Nameprep algorithm, which is a profile of Stringprep, and Punycode algorithm to convert domain name string back and forth. The behavior of aforementioned conversion process can be adjusted by various flags: If the ALLOW_UNASSIGNED flag is used, the domain name string to be converted can contain code points that are unassigned in Unicode 3.2, which is the Unicode version on which IDN conversion is based. If the flag is not used, the presence of such unassigned code points is treated as an error. If the USE_STD3_ASCII_RULES flag is used, ASCII strings are checked against RFC 1122 and RFC 1123. It is an error if they don't meet the requirements. These flags can be logically OR'ed together. The security consideration is important with respect to internationalization domain name support. For example, English domain names may be homographed - maliciously misspelled by substitution of non-Latin letters. Unicode Technical Report #36 discusses security issues of IDN support as well as possible solutions. Applications are responsible for taking adequate security measures when using international domain names. @version 1.4, 10/03/23 @author Edward Wang @since 1.6
method,java/net/IDN/toASCII/String, Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490. This convenience method works as if by invoking the two-argument counterpart as follows: {@link #toASCII(String, int) toASCII}(input,&nbsp;0); @param input the string to be processed @return the translated String @throws IllegalArgumentException if the input string doesn't conform to RFC 3490 specification
method,java/net/IDN/toUnicode/String, Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490. This convenience method works as if by invoking the two-argument counterpart as follows: {@link #toUnicode(String, int) toUnicode}(input,&nbsp;0); @param input the string to be processed @return the translated String
class,java/net/HttpURLConnection, A URLConnection with support for HTTP-specific features. See the spec for details. Each HttpURLConnection instance is used to make a single request but the underlying network connection to the HTTP server may be transparently shared by other instances. Calling the close() methods on the InputStream or OutputStream of an HttpURLConnection after a request may free network resources associated with this instance but has no effect on any shared persistent connection. Calling the disconnect() method may close the underlying socket if a persistent connection is otherwise idle at that time. @see java.net.HttpURLConnection#disconnect() @since JDK1.1
method,java/net/HttpURLConnection/getHeaderFieldKey/int, Returns the key for the nth header field. Some implementations may treat the 0th header field as special, i.e. as the status line returned by the HTTP server. In this case, {@link #getHeaderField(int) getHeaderField(0)} returns the status line, but getHeaderFieldKey(0) returns null. @param n an index, where n >=0. @return the key for the nth header field, or null if the key does not exist.
method,java/net/HttpURLConnection/getHeaderField/int, Returns the value for the nth header field. Some implementations may treat the 0th header field as special, i.e. as the status line returned by the HTTP server. This method can be used in conjunction with the {@link #getHeaderFieldKey getHeaderFieldKey} method to iterate through all the headers in the message. @param n an index, where n>=0. @return the value of the nth header field,		or null if the value does not exist. @see java.net.HttpURLConnection#getHeaderFieldKey(int)
method,java/net/HttpURLConnection/setFollowRedirects/boolean, Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this class. True by default. Applets cannot change this variable. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException. @param set a boolean indicating whether or not to follow HTTP redirects. @exception SecurityException if a security manager exists and its checkSetFactory method doesn't allow the operation. @see SecurityManager#checkSetFactory @see #getFollowRedirects()
method,java/net/HttpURLConnection/getFollowRedirects/, Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed. @return true if HTTP redirects should be automatically followed, false if not. @see #setFollowRedirects(boolean)
method,java/net/HttpURLConnection/setInstanceFollowRedirects/boolean, Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance. The default value comes from followRedirects, which defaults to true. @param followRedirects a boolean indicating whether or not to follow HTTP redirects. @see java.net.HttpURLConnection#instanceFollowRedirects @see #getInstanceFollowRedirects @since 1.3
method,java/net/HttpURLConnection/setRequestMethod/String, Set the method for the URL request, one of: GET POST HEAD OPTIONS PUT DELETE TRACE are legal, subject to protocol restrictions. The default method is GET. @param method the HTTP method @exception ProtocolException if the method cannot be reset or if the requested method isn't valid for HTTP. @see #getRequestMethod()
method,java/net/HttpURLConnection/getResponseCode/, Gets the status code from an HTTP response message. For example, in the case of the following status lines: HTTP/1.0 200 OK HTTP/1.0 401 Unauthorized It will return 200 and 401 respectively. Returns -1 if no code can be discerned from the response (i.e., the response is not valid HTTP). @throws IOException if an error occurred connecting to the server. @return the HTTP Status-Code, or -1
method,java/net/HttpURLConnection/getResponseMessage/, Gets the HTTP response message, if any, returned along with the response code from a server. From responses like: HTTP/1.0 200 OK HTTP/1.0 404 Not Found Extracts the Strings OK and Not Found respectively. Returns null if none could be discerned from the responses (the result was not valid HTTP). @throws IOException if an error occurred connecting to the server. @return the HTTP response message, or null
method,java/net/HttpURLConnection/getErrorStream/, Returns the error stream if the connection failed but the server sent useful data nonetheless. The typical example is when an HTTP server responds with a 404, which will cause a FileNotFoundException to be thrown in connect, but the server sent an HTML help page with suggestions as to what to do. This method will not cause a connection to be initiated. If the connection was not connected, or if the server did not have an error while connecting or if the server had an error but no error data was sent, this method will return null. This is the default. @return an error stream if any, null if there have been no errors, the connection is not connected or the server sent no useful data.
field,java/net/HttpURLConnection/responseCode, An int representing the three digit HTTP Status-Code. 1xx: Informational 2xx: Success 3xx: Redirection 4xx: Client Error 5xx: Server Error 
field,java/net/HttpURLConnection/HTTP_PAYMENT_REQUIRED, HTTP Status-Code 402: Payment Required.
field,java/net/HttpURLConnection/HTTP_PROXY_AUTH, HTTP Status-Code 407: Proxy Authentication Required.
field,java/net/HttpURLConnection/HTTP_LENGTH_REQUIRED, HTTP Status-Code 411: Length Required.
field,java/net/HttpURLConnection/HTTP_SERVER_ERROR, HTTP Status-Code 500: Internal Server Error. @deprecated it is misplaced and shouldn't have existed.
field,java/net/HttpURLConnection/HTTP_INTERNAL_ERROR, HTTP Status-Code 500: Internal Server Error. 
method,java/net/HttpRetryException/getLocation/, Returns the value of the Location header field if the error resulted from redirection. @return The location string
class,java/net/HttpCookie, An HttpCookie object represents an http cookie, which carries state information between server and user agent. Cookie is widely adopted to create stateful sessions. There are 3 http cookie specifications: Netscape draft RFC 2109 - http://www.ietf.org/rfc/rfc2109.txt RFC 2965 - http://www.ietf.org/rfc/rfc2965.txt HttpCookie class can accept all these 3 forms of syntax. @version 1.7, 10/03/23 @author Edward Wang @since 1.6
method,java/net/HttpCookie/setCommentURL/String, Specifies a comment url that describes a cookie's purpose. The comment url is useful if the browser presents the cookie to the user. Comment url is RFC 2965 only. @param purpose a String specifying the comment url to display to the user @see #getCommentURL
method,java/net/HttpCookie/setDiscard/boolean, Specify whether user agent should discard the cookie unconditionally. This is RFC 2965 only attribute. @param discard true indicates to discard cookie unconditionally @see #getDiscard
method,java/net/HttpCookie/setPortlist/String, Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header. @param ports a String specify the port list, which is comma seperated series of digits @see #getPortlist
method,java/net/HttpCookie/setDomain/String, Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them. @param pattern a String containing the domain name within which this cookie is visible; form is according to RFC 2965 @see #getDomain
method,java/net/HttpCookie/setMaxAge/long, Sets the maximum age of the cookie in seconds. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted. @param expiry an integer specifying the maximum age of the cookie in seconds; if zero, the cookie should be discarded immediately; otherwise, the cookie's max age is unspecified. @see #getMaxAge
method,java/net/HttpCookie/setSecure/boolean, Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL. The default value is false. @param flag If true, the cookie can only be sent over a secure protocol like https. If false, it can be sent over any protocol. @see #getSecure
method,java/net/HttpCookie/getSecure/, Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol. @return false if the cookie can be sent over any standard protocol; otherwise, true @see #setSecure
method,java/net/HttpCookie/getName/, Returns the name of the cookie. The name cannot be changed after creation. @return a String specifying the cookie's name
method,java/net/HttpCookie/equals/Object, Test the equality of two http cookies. The result is true only if two cookies come from same domain (case-insensitive), have same name (case-insensitive), and have same path (case-sensitive). @return true if 2 http cookies equal to each other; otherwise, false
interface,java/net/FileNameMap, A simple interface which provides a mechanism to map between a file name and a MIME type string. @version 	1.16, 03/23/10 @author Steven B. Byrne @since JDK1.1
method,java/net/DatagramSocketImpl/send/DatagramPacket, Sends a datagram packet. The packet contains the data and the destination address to send the packet to. @param p the packet to be sent. @exception IOException if an I/O exception occurs while sending the datagram packet. @exception PortUnreachableException may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown.
method,java/net/DatagramSocketImpl/connect/InetAddress;int, Connects a datagram socket to a remote destination. This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination. This may be overridden to call a native system connect. If the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown. @param address the remote InetAddress to connect to @param port the remote port number @exception SocketException may be thrown if the socket cannot be connected to the remote destination @since 1.4
method,java/net/DatagramSocketImpl/peek/InetAddress, Peek at the packet to see who it is from. Updates the specified InetAddress to the address which the packet came from. @param i an InetAddress object @return the port number which the packet came from. @exception IOException if an I/O exception occurs @exception PortUnreachableException may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown.
method,java/net/DatagramSocketImpl/peekData/DatagramPacket, Peek at the packet to see who it is from. The data is copied into the specified DatagramPacket. The data is returned, but not consumed, so that a subsequent peekData/receive operation will see the same data. @param p the Packet Received. @return the port number which the packet came from. @exception IOException if an I/O exception occurs @exception PortUnreachableException may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown. @since 1.4
method,java/net/DatagramSocketImpl/receive/DatagramPacket, Receive the datagram packet. @param p the Packet Received. @exception IOException if an I/O exception occurs while receiving the datagram packet. @exception PortUnreachableException may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown.
class,java/net/DatagramSocket, This class represents a socket for sending and receiving datagram packets. A datagram socket is the sending or receiving point for a packet delivery service. Each packet sent or received on a datagram socket is individually addressed and routed. Multiple packets sent from one machine to another may be routed differently, and may arrive in any order. UDP broadcasts sends are always enabled on a DatagramSocket. In order to receive broadcast packets a DatagramSocket should be bound to the wildcard address. In some implementations, broadcast packets may also be received when a DatagramSocket is bound to a more specific address. Example: 		DatagramSocket s = new DatagramSocket(null);		s.bind(new InetSocketAddress(8888)); Which is equivalent to: 		DatagramSocket s = new DatagramSocket(8888); Both cases will create a DatagramSocket able to receive broadcasts on UDP port 8888. @author Pavani Diwanji @version 1.103, 03/23/10 @see java.net.DatagramPacket @see java.nio.channels.DatagramChannel @since JDK1.0
method,java/net/DatagramSocket/bind/SocketAddress, Binds this DatagramSocket to a specific address & port. If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket. @param	addr The address & port to bind to. @throws	SocketException if any error happens during the bind, or if the		socket is already bound. @throws	SecurityException if a security manager exists and its checkListen method doesn't allow the operation. @throws IllegalArgumentException if addr is a SocketAddress subclass not supported by this socket. @since 1.4
method,java/net/DatagramSocket/connect/InetAddress;int, Connects the socket to a remote address for this socket. When a socket is connected to a remote address, packets may only be sent to or received from that address. By default a datagram socket is not connected. If the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown. A caller's permission to send and receive datagrams to a given host and port are checked at connect time. When a socket is connected, receive and send will not perform any security checks on incoming and outgoing packets, other than matching the packet's and the socket's address and port. On a send operation, if the packet's address is set and the packet's address and the socket's address do not match, an IllegalArgumentException will be thrown. A socket connected to a multicast address may only be used to send packets. @param address the remote address for the socket @param port the remote port for the socket. @exception IllegalArgumentException if the address is null, or the port is out of range. @exception SecurityException if the caller is not allowed to send datagrams to and receive datagrams from the address and port. @see #disconnect @see #send @see #receive 
method,java/net/DatagramSocket/connect/SocketAddress, Connects this socket to a remote socket address (IP address + port number). @param	addr	The remote address. @throws	SocketException if the connect fails @throws	IllegalArgumentException if addr is null or addr is a SocketAddress		subclass not supported by this socket @since 1.4 @see #connect
method,java/net/DatagramSocket/getLocalAddress/, Gets the local address to which the socket is bound. If there is a security manager, its checkConnect method is first called with the host address and -1 as its arguments to see if the operation is allowed. @see SecurityManager#checkConnect @return the local address to which the socket is bound, or		an InetAddress representing any local		address if either the socket is not bound, or		the security manager checkConnect		method does not allow the operation @since 1.1
method,java/net/DatagramSocket/getSoTimeout/, Retrieve setting for SO_TIMEOUT. 0 returns implies that the option is disabled (i.e., timeout of infinity). @return the setting for SO_TIMEOUT @throws SocketException if there is an error in the underlying protocol, such as an UDP error. @since JDK1.1 @see #setSoTimeout(int)
method,java/net/DatagramSocket/setReuseAddress/boolean, Enable/disable the SO_REUSEADDR socket option. For UDP sockets it may be necessary to bind more than one socket to the same socket address. This is typically for the purpose of receiving multicast packets (See {@link java.net.MulticastSocket}). The SO_REUSEADDR socket option allows multiple sockets to be bound to the same socket address if the SO_REUSEADDR socket option is enabled prior to binding the socket using {@link #bind(SocketAddress)}. Note: This functionality is not supported by all existing platforms, so it is implementation specific whether this option will be ignored or not. However, if it is not supported then {@link #getReuseAddress()} will always return false. When a DatagramSocket is created the initial setting of SO_REUSEADDR is disabled. The behaviour when SO_REUSEADDR is enabled or disabled after a socket is bound (See {@link #isBound()}) is not defined. @param on whether to enable or disable the @exception SocketException if an error occurs enabling or disabling the SO_RESUEADDR socket option,	 	 or the socket is closed. @since 1.4 @see #getReuseAddress() @see #bind(SocketAddress) @see #isBound() @see #isClosed()
method,java/net/DatagramSocket/setTrafficClass/int, Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket. As the underlying network implementation may ignore this value applications should consider it a hint. The tc must be in the range 0 or an IllegalArgumentException will be thrown. Notes: for Internet Protocol v4 the value consists of an octet with precedence and TOS fields as detailed in RFC 1349. The TOS field is bitset created by bitwise-or'ing values such the following :- IPTOS_LOWCOST (0x02) IPTOS_RELIABILITY (0x04) IPTOS_THROUGHPUT (0x08) IPTOS_LOWDELAY (0x10) The last low order bit is always ignored as this corresponds to the MBZ (must be zero) bit. Setting bits in the precedence field may result in a SocketException indicating that the operation is not permitted. for Internet Protocol v6 tc is the value that would be placed into the sin6_flowinfo field of the IP header. @param tc	an int value for the bitset. @throws SocketException if there is an error setting the traffic class or type-of-service @since 1.4 @see #getTrafficClass
method,java/net/DatagramSocket/getTrafficClass/, Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket. As the underlying network implementation may ignore the traffic class or type-of-service set using {@link #setTrafficClass(int)} this method may return a different value than was previously set using the {@link #setTrafficClass(int)} method on this DatagramSocket. @return the traffic class or type-of-service already set @throws SocketException if there is an error obtaining the traffic class or type-of-service value. @since 1.4 @see #setTrafficClass(int)
method,java/net/DatagramSocket/close/, Closes this datagram socket. Any thread currently blocked in {@link #receive} upon this socket will throw a {@link SocketException}. If this socket has an associated channel then the channel is closed as well. @revised 1.4 @spec JSR-51
method,java/net/DatagramSocket/getChannel/, Returns the unique {@link java.nio.channels.DatagramChannel} object associated with this datagram socket, if any. A datagram socket will have a channel if, and only if, the channel itself was created via the {@link java.nio.channels.DatagramChannel#open DatagramChannel.open} method. @return the datagram channel associated with this datagram socket, or null if this socket was not created for a channel @since 1.4 @spec JSR-51
method,java/net/DatagramSocket/DatagramSocket/, Constructs a datagram socket and binds it to any available port on the local host machine. The socket will be bound to the wildcard address, an IP address chosen by the kernel. If there is a security manager, its checkListen method is first called with 0 as its argument to ensure the operation is allowed. This could result in a SecurityException. @exception SocketException if the socket could not be opened, or the socket could not bind to the specified local port. @exception SecurityException if a security manager exists and its checkListen method doesn't allow the operation. @see SecurityManager#checkListen
method,java/net/DatagramSocket/DatagramSocket/DatagramSocketImpl, Creates an unbound datagram socket with the specified DatagramSocketImpl. @param impl an instance of a DatagramSocketImpl the subclass wishes to use on the DatagramSocket. @since 1.4
method,java/net/DatagramSocket/DatagramSocket/SocketAddress, Creates a datagram socket, bound to the specified local socket address. If, if the address is null, creates an unbound socket. If there is a security manager, its checkListen method is first called with the port from the socket address as its argument to ensure the operation is allowed. This could result in a SecurityException. @param bindaddr local socket address to bind, or null		 for an unbound socket. @exception SocketException if the socket could not be opened, or the socket could not bind to the specified local port. @exception SecurityException if a security manager exists and its checkListen method doesn't allow the operation. @see SecurityManager#checkListen @since 1.4
method,java/net/DatagramSocket/DatagramSocket/int, Constructs a datagram socket and binds it to the specified port on the local host machine. The socket will be bound to the wildcard address, an IP address chosen by the kernel. If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. @param port port to use. @exception SocketException if the socket could not be opened, or the socket could not bind to the specified local port. @exception SecurityException if a security manager exists and its checkListen method doesn't allow the operation. @see SecurityManager#checkListen
interface,java/net/CookieStore, A CookieStore object represents a storage for cookie. Can store and retrieve cookies. {@link CookieManager} will call CookieStore.add to save cookies for every incoming HTTP response, and call CookieStore.get to retrieve cookie for every outgoing HTTP request. A CookieStore is responsible for removing HttpCookie instances which have expired. @version 1.4, 10/03/23 @author Edward Wang @since 1.6
method,java/net/CookieStore/add/URI;HttpCookie, Adds one HTTP cookie to the store. This is called for every incoming HTTP response. A cookie to store may or may not be associated with an URI. If it is not associated with an URI, the cookie's domain and path attribute will indicate where it comes from. If it is associated with an URI and its domain and path attribute are not speicifed, given URI will indicate where this cookie comes from. If a cookie corresponding to the given URI already exists, then it is replaced with the new one. @param uri the uri this cookie associated with. if null, this cookie will not be associated with an URI @param cookie the cookie to store @throws NullPointerException if cookie is null @see #get
method,java/net/CookieStore/get/URI, Retrieve cookies associated with given URI, or whose domain matches the given URI. Only cookies that have not expired are returned. This is called for every outgoing HTTP request. @return an immutable list of HttpCookie, return empty list if no cookies match the given URI @throws NullPointerException if uri is null @see #add
method,java/net/CookieStore/removeAll/, Remove all cookies in this cookie store. @return true if this store changed as a result of the call
interface,java/net/CookiePolicy, CookiePolicy implementations decide which cookies should be accepted and which should be rejected. Three pre-defined policy implementations are provided, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER. See RFC 2965 sec. 3.3 & 7 for more detail. @version %I%, %E% @author Edward Wang @since 1.6
method,java/net/CookiePolicy/shouldAccept/URI;HttpCookie, Will be called to see whether or not this cookie should be accepted. @param uri the URI to consult accept policy with @param cookie the HttpCookie object in question @return true if this cookie should be accepted; otherwise, false
field,java/net/CookiePolicy/ACCEPT_ORIGINAL_SERVER, One pre-defined policy which only accepts cookies from original server.
class,java/net/CookieManager, CookieManager provides a concrete implementation of {@link CookieHandler}, which separates the storage of cookies from the policy surrounding accepting and rejecting cookies. A CookieManager is initialized with a {@link CookieStore} which manages storage, and a {@link CookiePolicy} object, which makes policy decisions on cookie acceptance/rejection. The HTTP cookie management in java.net package looks like: use CookieHandler CookiePolicy | use |--------> HttpCookie | ^ | | use | use | |--------> CookieStore ^ | impl | Internal in-memory implementation CookieHandler is at the core of cookie management. User can call CookieHandler.setDefault to set a concrete CookieHanlder implementation to be used. CookiePolicy.shouldAccept will be called by CookieManager.put to see whether or not one cookie should be accepted and put into cookie store. User can use any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation and tell CookieManager to use it. CookieStore is the place where any accepted HTTP cookie is stored in. If not specified when created, a CookieManager instance will use an internal in-memory implementation. Or user can implements one and tell CookieManager to use it. Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI) are used by CookieManager. Others are for completeness and might be needed by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieSotre. There're various ways user can hook up his own HTTP cookie management behavior, e.g. Use CookieHandler.setDefault to set a brand new {@link CookieHandler} implementation Let CookieManager be the default {@link CookieHandler} implementation, but implement user's own {@link CookieStore} and {@link CookiePolicy} and tell default CookieManager to use them: // this should be done at the beginning of an HTTP session CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy())); Let CookieManager be the default {@link CookieHandler} implementation, but use customized {@link CookiePolicy}: // this should be done at the beginning of an HTTP session CookieHandler.setDefault(new CookieManager()); // this can be done at any point of an HTTP session ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy()); The implementation conforms to RFC 2965, section 3.3. @version %I%, %E% @see CookiePolicy @author Edward Wang @since 1.6
method,java/net/CookieManager/setCookiePolicy/CookiePolicy, To set the cookie policy of this cookie manager. A instance of CookieManager will have cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always can call this method to set another cookie policy. @param cookiePolicy the cookie policy. Can be null, which has no effects on current cookie policy.
method,java/net/CookieManager/CookieManager/CookieStore;CookiePolicy, Create a new cookie manager with specified cookie store and cookie policy. @param store a CookieStore to be used by cookie manager. if null, cookie manager will use a default one, which is an in-memory CookieStore implmentation. @param cookiePolicy a CookiePolicy instance to be used by cookie manager as policy callback. if null, ACCEPT_ORIGINAL_SERVER will be used.
class,java/net/CookieHandler, A CookieHandler object provides a callback mechanism to hook up a HTTP state management policy implementation into the HTTP protocol handler. The HTTP state management mechanism specifies a way to create a stateful session with HTTP requests and responses. A system-wide CookieHandler that to used by the HTTP protocol handler can be registered by doing a CookieHandler.setDefault(CookieHandler). The currently registered CookieHandler can be retrieved by calling CookieHandler.getDefault(). For more information on HTTP state management, see RFC&nbsp;2965: HTTP State Management Mechanism @version 1.4, 03/08/09 @author Yingxian Wang @since 1.5
method,java/net/CookieHandler/setDefault/CookieHandler, Sets (or unsets) the system-wide cookie handler. Note: non-standard http protocol handlers may ignore this setting. @param cHandler The HTTP cookie handler, or null to unset. @throws SecurityException If a security manager has been installed and it denies {@link NetPermission}(setCookieHandler) @see #getDefault()
method,java/net/ContentHandlerFactory/createContentHandler/String, Creates a new ContentHandler to read an object from a URLStreamHandler. @param mimetype the MIME type for which a content handler is desired. @return a new ContentHandler to read an object from a URLStreamHandler. @see java.net.ContentHandler @see java.net.URLStreamHandler
class,java/net/ConnectException, Signals that an error occurred while attempting to connect a socket to a remote address and port. Typically, the connection was refused remotely (e.g., no process is listening on the remote address/port). @since JDK1.1
method,java/net/ConnectException/ConnectException/String, Constructs a new ConnectException with the specified detail message as to why the connect error occurred. A detail message is a String that gives a specific description of this error. @param msg the detail message
method,java/net/CacheResponse/getHeaders/, Returns the response headers as a Map. @return An immutable Map from response header field names to lists of field values. The status line has null as its field name. @throws IOException if an I/O error occurs while getting the response headers
method,java/net/CacheResponse/getBody/, Returns the response body as an InputStream. @return an InputStream from which the response body can be accessed @throws IOException if an I/O error occurs while getting the response body
class,java/net/CacheRequest, Represents channels for storing resources in the ResponseCache. Instances of such a class provide an OutputStream object which is called by protocol handlers to store the resource data into the cache, and also an abort() method which allows a cache store operation to be interrupted and abandoned. If an IOException is encountered while reading the response or writing to the cache, the current cache store operation will be aborted. @version 1.1, 03/09/22 @author Yingxian Wang @since 1.5
method,java/net/CacheRequest/getBody/, Returns an OutputStream to which the response body can be written. @return an OutputStream to which the response body can be written @throws IOException if an I/O error occurs while writing the response body
class,java/net/BindException, Signals that an error occurred while attempting to bind a socket to a local address and port. Typically, the port is in use, or the requested local address could not be assigned. @since JDK1.1
method,java/net/BindException/BindException/String, Constructs a new BindException with the specified detail message as to why the bind error occurred. A detail message is a String that gives a specific description of this error. @param msg the detail message
method,java/net/Authenticator/setDefault/Authenticator, Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication. First, if there is a security manager, its checkPermission method is called with a NetPermission(setDefaultAuthenticator) permission. This may result in a java.lang.SecurityException. @param	a	The authenticator to be set. If a is null then			any previously set authenticator is removed. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow setting the default authenticator. @see SecurityManager#checkPermission @see java.net.NetPermission
method,java/net/Authenticator/requestPasswordAuthentication/InetAddress;int;String;String;String, Ask the authenticator that has been registered with the system for a password. First, if there is a security manager, its checkPermission method is called with a NetPermission(requestPasswordAuthentication) permission. This may result in a java.lang.SecurityException. @param addr The InetAddress of the site requesting authorization, or null if not known. @param port the port for the requested connection @param protocol The protocol that's requesting the connection ({@link java.net.Authenticator#getRequestingProtocol()}) @param prompt A prompt string for the user @param scheme The authentication scheme @return The username/password, or null if one can't be gotten. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow the password authentication request. @see SecurityManager#checkPermission @see java.net.NetPermission
method,java/net/Authenticator/requestPasswordAuthentication/String;InetAddress;int;String;String;String, Ask the authenticator that has been registered with the system for a password. This is the preferred method for requesting a password because the hostname can be provided in cases where the InetAddress is not available. First, if there is a security manager, its checkPermission method is called with a NetPermission(requestPasswordAuthentication) permission. This may result in a java.lang.SecurityException. @param host The hostname of the site requesting authentication. @param addr The InetAddress of the site requesting authentication, or null if not known. @param port the port for the requested connection. @param protocol The protocol that's requesting the connection ({@link java.net.Authenticator#getRequestingProtocol()}) @param prompt A prompt string for the user which identifies the authentication realm. @param scheme The authentication scheme @return The username/password, or null if one can't be gotten. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow the password authentication request. @see SecurityManager#checkPermission @see java.net.NetPermission @since 1.4
method,java/net/Authenticator/requestPasswordAuthentication/String;InetAddress;int;String;String;String;URL;RequestorType, Ask the authenticator that has been registered with the system for a password. First, if there is a security manager, its checkPermission method is called with a NetPermission(requestPasswordAuthentication) permission. This may result in a java.lang.SecurityException. @param host The hostname of the site requesting authentication. @param addr The InetAddress of the site requesting authorization, or null if not known. @param port the port for the requested connection @param protocol The protocol that's requesting the connection ({@link java.net.Authenticator#getRequestingProtocol()}) @param prompt A prompt string for the user @param scheme The authentication scheme @param url The requesting URL that caused the authentication @param reqType The type (server or proxy) of the entity requesting		 authentication. @return The username/password, or null if one can't be gotten. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow the password authentication request. @see SecurityManager#checkPermission @see java.net.NetPermission @since 1.5
method,java/util/WeakHashMap/size/, Returns the number of key-value mappings in this map. This result is a snapshot, and may not reflect unprocessed entries that will be removed before next attempted access because they are no longer referenced.
method,java/util/WeakHashMap/isEmpty/, Returns true if this map contains no key-value mappings. This result is a snapshot, and may not reflect unprocessed entries that will be removed before next attempted access because they are no longer referenced.
method,java/util/WeakHashMap/get/Object, Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key==null ? k==null : key.equals(k))}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.) A return value of {@code null} does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to {@code null}. The {@link #containsKey containsKey} operation may be used to distinguish these two cases. @see #put(Object, Object)
method,java/util/WeakHashMap/remove/Object, Removes the mapping for a key from this weak hash map if it is present. More formally, if this map contains a mapping from key k to value v such that (key==null ? k==null : key.equals(k)), that mapping is removed. (The map can contain at most one such mapping.) Returns the value to which this map previously associated the key, or null if the map contained no mapping for the key. A return value of null does not necessarily indicate that the map contained no mapping for the key; it's also possible that the map explicitly mapped the key to null. The map will not contain a mapping for the specified key once the call returns. @param key key whose mapping is to be removed from the map @return the previous value associated with key, or null if there was no mapping for key
method,java/util/WeakHashMap/clear/, Removes all of the mappings from this map. The map will be empty after this call returns.
method,java/util/Vector/ensureCapacity/int, Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument. If the current capacity of this vector is less than {@code minCapacity}, then its capacity is increased by replacing its internal data array, kept in the field {@code elementData}, with a larger one. The size of the new data array will be the old size plus {@code capacityIncrement}, unless the value of {@code capacityIncrement} is less than or equal to zero, in which case the new capacity will be twice the old capacity; but if this new size is still smaller than {@code minCapacity}, then the new capacity will be {@code minCapacity}. @param minCapacity the desired minimum capacity
method,java/util/Vector/isEmpty/, Tests if this vector has no components. @return {@code true} if and only if this vector has no components, that is, its size is zero; {@code false} otherwise.
method,java/util/Vector/contains/Object, Returns {@code true} if this vector contains the specified element. More formally, returns {@code true} if and only if this vector contains at least one element {@code e} such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)). @param o element whose presence in this vector is to be tested @return {@code true} if this vector contains the specified element
method,java/util/Vector/setElementAt/Object;int, Sets the component at the specified {@code index} of this vector to be the specified object. The previous component at that position is discarded. The index must be a value greater than or equal to {@code 0} and less than the current size of the vector. This method is identical in functionality to the {@link #set(int, Object) set(int, E)} method (which is part of the {@link List} interface). Note that the {@code set} method reverses the order of the parameters, to more closely match array usage. Note also that the {@code set} method returns the old value that was stored at the specified position. @param obj what the component is to be set to @param index the specified index @throws ArrayIndexOutOfBoundsException if the index is out of range	 ({@code index = size()})
method,java/util/Vector/removeElementAt/int, Deletes the component at the specified index. Each component in this vector with an index greater or equal to the specified {@code index} is shifted downward to have an index one smaller than the value it had previously. The size of this vector is decreased by {@code 1}. The index must be a value greater than or equal to {@code 0} and less than the current size of the vector. This method is identical in functionality to the {@link #remove(int)} method (which is part of the {@link List} interface). Note that the {@code remove} method returns the old value that was stored at the specified position. @param index the index of the object to remove @throws ArrayIndexOutOfBoundsException if the index is out of range	 ({@code index = size()})
method,java/util/Vector/insertElementAt/Object;int, Inserts the specified object as a component in this vector at the specified {@code index}. Each component in this vector with an index greater or equal to the specified {@code index} is shifted upward to have an index one greater than the value it had previously. The index must be a value greater than or equal to {@code 0} and less than or equal to the current size of the vector. (If the index is equal to the current size of the vector, the new element is appended to the Vector.) This method is identical in functionality to the {@link #add(int, Object) add(int, E)} method (which is part of the {@link List} interface). Note that the {@code add} method reverses the order of the parameters, to more closely match array usage. @param obj the component to insert @param index where to insert the new component @throws ArrayIndexOutOfBoundsException if the index is out of range	 ({@code index size()})
method,java/util/Vector/clear/, Removes all of the elements from this Vector. The Vector will be empty after this call returns (unless it throws an exception). @since 1.2
method,java/util/Vector/addAll/Collection, Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator. The behavior of this operation is undefined if the specified Collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified Collection is this Vector, and this Vector is nonempty.) @param c elements to be inserted into this Vector @return {@code true} if this Vector changed as a result of the call @throws NullPointerException if the specified collection is null @since 1.2
method,java/util/Vector/removeAll/Collection, Removes from this Vector all of its elements that are contained in the specified Collection. @param c a collection of elements to be removed from the Vector @return true if this Vector changed as a result of the call @throws ClassCastException if the types of one or more elements in this vector are incompatible with the specified collection (optional) @throws NullPointerException if this vector contains one or more null elements and the specified collection does not support null elements (optional), or if the specified collection is null @since 1.2
method,java/util/Vector/retainAll/Collection, Retains only the elements in this Vector that are contained in the specified Collection. In other words, removes from this Vector all of its elements that are not contained in the specified Collection. @param c a collection of elements to be retained in this Vector (all other elements are removed) @return true if this Vector changed as a result of the call @throws ClassCastException if the types of one or more elements in this vector are incompatible with the specified collection (optional) @throws NullPointerException if this vector contains one or more null elements and the specified collection does not support null elements (optional), or if the specified collection is null @since 1.2
method,java/util/Vector/addAll/int;Collection, Inserts all of the elements in the specified Collection into this Vector at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the Vector in the order that they are returned by the specified Collection's iterator. @param index index at which to insert the first element from the specified collection @param c elements to be inserted into this Vector @return {@code true} if this Vector changed as a result of the call @throws ArrayIndexOutOfBoundsException if the index is out of range ({@code index size()}) @throws NullPointerException if the specified collection is null @since 1.2
method,java/util/Vector/equals/Object, Compares the specified Object with this Vector for equality. Returns true if and only if the specified Object is also a List, both Lists have the same size, and all corresponding pairs of elements in the two Lists are equal. (Two elements {@code e1} and {@code e2} are equal if {@code (e1==null ? e2==null : e1.equals(e2))}.) In other words, two Lists are defined to be equal if they contain the same elements in the same order. @param o the Object to be compared for equality with this Vector @return true if the specified Object is equal to this Vector
method,java/util/Vector/subList/int;int, Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned List is empty.) The returned List is backed by this List, so changes in the returned List are reflected in this List, and vice-versa. The returned List supports all of the optional List operations supported by this List. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a List can be used as a range operation by operating on a subList view instead of a whole List. For example, the following idiom removes a range of elements from a List: 	 list.subList(from, to).clear(); Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class can be applied to a subList. The semantics of the List returned by this method become undefined if the backing list (i.e., this List) is structurally modified in any way other than via the returned List. (Structural modifications are those that change the size of the List, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.) @param fromIndex low endpoint (inclusive) of the subList @param toIndex high endpoint (exclusive) of the subList @return a view of the specified range within this List @throws IndexOutOfBoundsException if an endpoint index value is out of range {@code (fromIndex size)} @throws IllegalArgumentException if the endpoint indices are out of order	 {@code (fromIndex > toIndex)}
method,java/util/Vector/removeRange/int;int, Removes from this List all of the elements whose index is between fromIndex, inclusive and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the ArrayList by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.) @param fromIndex index of first element to be removed @param toIndex index after last element to be removed
class,java/util/UUID, A class that represents an immutable universally unique identifier (UUID). A UUID represents a 128-bit value. There exist different variants of these global identifiers. The methods of this class are for manipulating the Leach-Salz variant, although the constructors allow the creation of any variant of UUID (described below). The layout of a variant 2 (Leach-Salz) UUID is as follows: The most significant long consists of the following unsigned fields: 0xFFFFFFFF00000000 time_low 0x00000000FFFF0000 time_mid 0x000000000000F000 version 0x0000000000000FFF time_hi The least significant long consists of the following unsigned fields: 0xC000000000000000 variant 0x3FFF000000000000 clock_seq 0x0000FFFFFFFFFFFF node The variant field contains a value which identifies the layout of the UUID. The bit layout described above is valid only for a UUID with a variant value of 2, which indicates the Leach-Salz variant. The version field holds a value that describes the type of this UUID. There are four different basic types of UUIDs: time-based, DCE security, name-based, and randomly generated UUIDs. These types have a version value of 1, 2, 3 and 4, respectively. For more information including algorithms used to create UUIDs, see RFC&nbsp;4122: A Universally Unique IDentifier (UUID) URN Namespace, section 4.2 &quot;Algorithms for Creating a Time-Based UUID&quot;. @version 1.19, 03/23/10 @since 1.5
method,java/util/UUID/randomUUID/, Static factory to retrieve a type 4 (pseudo randomly generated) UUID. The UUID is generated using a cryptographically strong pseudo random number generator. @return a randomly generated UUID.
method,java/util/UUID/timestamp/, The timestamp value associated with this UUID. The 60 bit timestamp value is constructed from the time_low, time_mid, and time_hi fields of this UUID. The resulting timestamp is measured in 100-nanosecond units since midnight, October 15, 1582 UTC. The timestamp value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException. @throws UnsupportedOperationException if this UUID is not a version 1 UUID.
method,java/util/UUID/clockSequence/, The clock sequence value associated with this UUID. The 14 bit clock sequence value is constructed from the clock sequence field of this UUID. The clock sequence field is used to guarantee temporal uniqueness in a time-based UUID. The clockSequence value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException. @return the clock sequence of this UUID. @throws UnsupportedOperationException if this UUID is not a version 1 UUID.
method,java/util/UUID/node/, The node value associated with this UUID. The 48 bit node value is constructed from the node field of this UUID. This field is intended to hold the IEEE 802 address of the machine that generated this UUID to guarantee spatial uniqueness. The node value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException. @return the node value of this UUID. @throws UnsupportedOperationException if this UUID is not a version 1 UUID.
method,java/util/UUID/equals/Object, Compares this object to the specified object. The result is true if and only if the argument is not null, is a UUID object, has the same variant, and contains the same value, bit for bit, as this UUID. @param obj the object to compare with. @return true if the objects are the same; false otherwise.
method,java/util/TreeSet/clear/, Removes all of the elements from this set. The set will be empty after this call returns.
method,java/util/TreeSet/addAll/Collection, Adds all of the elements in the specified collection to this set. @param c collection containing elements to be added to this set @return {@code true} if this set changed as a result of the call @throws ClassCastException if the elements provided cannot be compared with the elements currently in the set @throws NullPointerException if the specified collection is null or if any element is null and this set uses natural ordering, or its comparator does not permit null elements
method,java/util/TreeSet/subSet/Object;boolean;Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromElement} or {@code toElement} is null and this set uses natural ordering, or its comparator does not permit null elements @throws IllegalArgumentException {@inheritDoc} @since 1.6
method,java/util/TreeSet/headSet/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code toElement} is null and this set uses natural ordering, or its comparator does not permit null elements @throws IllegalArgumentException {@inheritDoc} @since 1.6
method,java/util/TreeSet/tailSet/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromElement} is null and this set uses natural ordering, or its comparator does not permit null elements @throws IllegalArgumentException {@inheritDoc} @since 1.6
method,java/util/TreeSet/subSet/Object;Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromElement} or {@code toElement} is null and this set uses natural ordering, or its comparator does not permit null elements @throws IllegalArgumentException {@inheritDoc}
method,java/util/TreeSet/headSet/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code toElement} is null and this set uses natural ordering, or its comparator does not permit null elements @throws IllegalArgumentException {@inheritDoc}
method,java/util/TreeSet/tailSet/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromElement} is null and this set uses natural ordering, or its comparator does not permit null elements @throws IllegalArgumentException {@inheritDoc}
method,java/util/TreeSet/first/, @throws NoSuchElementException {@inheritDoc}
method,java/util/TreeSet/last/, @throws NoSuchElementException {@inheritDoc}
method,java/util/TreeSet/TreeSet/Comparator, Constructs a new, empty tree set, sorted according to the specified comparator. All elements inserted into the set must be mutually comparable by the specified comparator: {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in the set. If the user attempts to add an element to the set that violates this constraint, the {@code add} call will throw a {@code ClassCastException}. @param comparator the comparator that will be used to order this set. If {@code null}, the {@linkplain Comparable natural ordering} of the elements will be used.
method,java/util/TreeMap/firstKey/, @throws NoSuchElementException {@inheritDoc}
method,java/util/TreeMap/lastKey/, @throws NoSuchElementException {@inheritDoc}
method,java/util/TreeMap/clear/, Removes all of the mappings from this map. The map will be empty after this call returns.
method,java/util/TreeMap/lowerEntry/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys @since 1.6
method,java/util/TreeMap/lowerKey/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys @since 1.6
method,java/util/TreeMap/floorEntry/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys @since 1.6
method,java/util/TreeMap/floorKey/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys @since 1.6
method,java/util/TreeMap/ceilingEntry/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys @since 1.6
method,java/util/TreeMap/ceilingKey/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys @since 1.6
method,java/util/TreeMap/higherEntry/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys @since 1.6
method,java/util/TreeMap/higherKey/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys @since 1.6
method,java/util/TreeMap/subMap/Object;boolean;Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if fromKey or toKey is null and this map uses natural ordering, or its comparator does not permit null keys @throws IllegalArgumentException {@inheritDoc} @since 1.6
method,java/util/TreeMap/headMap/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if toKey is null and this map uses natural ordering, or its comparator does not permit null keys @throws IllegalArgumentException {@inheritDoc} @since 1.6
method,java/util/TreeMap/tailMap/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if fromKey is null and this map uses natural ordering, or its comparator does not permit null keys @throws IllegalArgumentException {@inheritDoc} @since 1.6
method,java/util/TreeMap/subMap/Object;Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if fromKey or toKey is null and this map uses natural ordering, or its comparator does not permit null keys @throws IllegalArgumentException {@inheritDoc}
method,java/util/TreeMap/headMap/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if toKey is null and this map uses natural ordering, or its comparator does not permit null keys @throws IllegalArgumentException {@inheritDoc}
method,java/util/TreeMap/tailMap/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if fromKey is null and this map uses natural ordering, or its comparator does not permit null keys @throws IllegalArgumentException {@inheritDoc}
class,java/util/TooManyListenersException, The TooManyListenersException Exception is used as part of the Java Event model to annotate and implement a unicast special case of a multicast Event Source. The presence of a throws TooManyListenersException clause on any given concrete implementation of the normally multicast void addXyzEventListener event listener registration pattern is used to annotate that interface as implementing a unicast Listener special case, that is, that one and only one Listener may be registered on the particular event listener source concurrently. @see java.util.EventObject @see java.util.EventListener @version 1.15 10/03/23 @author Laurence P. G. Cable @since JDK1.1
method,java/util/TimerTask/cancel/, Cancels this timer task. If the task has been scheduled for one-time execution and has not yet run, or has not yet been scheduled, it will never run. If the task has been scheduled for repeated execution, it will never run again. (If the task is running when this call occurs, the task will run to completion, but will never run again.) Note that calling this method from within the run method of a repeating timer task absolutely guarantees that the timer task will not run again. This method may be called repeatedly; the second and subsequent calls have no effect. @return true if this task is scheduled for one-time execution and has not yet run, or this task is scheduled for repeated execution. Returns false if the task was scheduled for one-time execution and has already run, or if the task was never scheduled, or if the task was already cancelled. (Loosely speaking, this method returns true if it prevents one or more scheduled executions from taking place.)
method,java/util/TimerTask/scheduledExecutionTime/, Returns the scheduled execution time of the most recent actual execution of this task. (If this method is invoked while task execution is in progress, the return value is the scheduled execution time of the ongoing task execution.) This method is typically invoked from within a task's run method, to determine whether the current execution of the task is sufficiently timely to warrant performing the scheduled activity: public void run() { if (System.currentTimeMillis() - scheduledExecutionTime() >= MAX_TARDINESS) return; // Too late; skip this execution. // Perform the task } This method is typically not used in conjunction with fixed-delay execution repeating tasks, as their scheduled execution times are allowed to drift over time, and so are not terribly significant. @return the time at which the most recent execution of this task was scheduled to occur, in the format returned by Date.getTime(). The return value is undefined if the task has yet to commence its first execution. @see Date#getTime()
class,java/util/Timer, A facility for threads to schedule tasks for future execution in a background thread. Tasks may be scheduled for one-time execution, or for repeated execution at regular intervals. Corresponding to each Timer object is a single background thread that is used to execute all of the timer's tasks, sequentially. Timer tasks should complete quickly. If a timer task takes excessive time to complete, it hogs the timer's task execution thread. This can, in turn, delay the execution of subsequent tasks, which may bunch up and execute in rapid succession when (and if) the offending task finally completes. After the last live reference to a Timer object goes away and all outstanding tasks have completed execution, the timer's task execution thread terminates gracefully (and becomes subject to garbage collection). However, this can take arbitrarily long to occur. By default, the task execution thread does not run as a daemon thread, so it is capable of keeping an application from terminating. If a caller wants to terminate a timer's task execution thread rapidly, the caller should invoke the timer's cancel method. If the timer's task execution thread terminates unexpectedly, for example, because its stop method is invoked, any further attempt to schedule a task on the timer will result in an IllegalStateException, as if the timer's cancel method had been invoked. This class is thread-safe: multiple threads can share a single Timer object without the need for external synchronization. This class does not offer real-time guarantees: it schedules tasks using the Object.wait(long) method. Implementation note: This class scales to large numbers of concurrently scheduled tasks (thousands should present no problem). Internally, it uses a binary heap to represent its task queue, so the cost to schedule a task is O(log n), where n is the number of concurrently scheduled tasks. Implementation note: All constructors start a timer thread. @author Josh Bloch @version 1.20, 03/23/10 @see TimerTask @see Object#wait(long) @since 1.3
method,java/util/Timer/schedule/TimerTask;long, Schedules the specified task for execution after the specified delay. @param task task to be scheduled. @param delay delay in milliseconds before task is to be executed. @throws IllegalArgumentException if delay is negative, or delay + System.currentTimeMillis() is negative. @throws IllegalStateException if task was already scheduled or cancelled, or timer was cancelled.
method,java/util/Timer/schedule/TimerTask;Date, Schedules the specified task for execution at the specified time. If the time is in the past, the task is scheduled for immediate execution. @param task task to be scheduled. @param time time at which task is to be executed. @throws IllegalArgumentException if time.getTime() is negative. @throws IllegalStateException if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.
method,java/util/Timer/scheduleAtFixedRate/TimerTask;long;long, Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay. Subsequent executions take place at approximately regular intervals, separated by the specified period. In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to catch up. In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying Object.wait(long) is accurate). Fixed-rate execution is appropriate for recurring activities that are sensitive to absolute time, such as ringing a chime every hour on the hour, or running scheduled maintenance every day at a particular time. It is also appropriate for recurring activities where the total time to perform a fixed number of executions is important, such as a countdown timer that ticks once every second for ten seconds. Finally, fixed-rate execution is appropriate for scheduling multiple repeating timer tasks that must remain synchronized with respect to one another. @param task task to be scheduled. @param delay delay in milliseconds before task is to be executed. @param period time in milliseconds between successive task executions. @throws IllegalArgumentException if delay is negative, or delay + System.currentTimeMillis() is negative. @throws IllegalStateException if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.
method,java/util/Timer/scheduleAtFixedRate/TimerTask;Date;long, Schedules the specified task for repeated fixed-rate execution, beginning at the specified time. Subsequent executions take place at approximately regular intervals, separated by the specified period. In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to catch up. In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying Object.wait(long) is accurate). Fixed-rate execution is appropriate for recurring activities that are sensitive to absolute time, such as ringing a chime every hour on the hour, or running scheduled maintenance every day at a particular time. It is also appropriate for recurring activities where the total time to perform a fixed number of executions is important, such as a countdown timer that ticks once every second for ten seconds. Finally, fixed-rate execution is appropriate for scheduling multiple repeating timer tasks that must remain synchronized with respect to one another. @param task task to be scheduled. @param firstTime First time at which task is to be executed. @param period time in milliseconds between successive task executions. @throws IllegalArgumentException if time.getTime() is negative. @throws IllegalStateException if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.
method,java/util/Timer/cancel/, Terminates this timer, discarding any currently scheduled tasks. Does not interfere with a currently executing task (if it exists). Once a timer has been terminated, its execution thread terminates gracefully, and no more tasks may be scheduled on it. Note that calling this method from within the run method of a timer task that was invoked by this timer absolutely guarantees that the ongoing task execution is the last task execution that will ever be performed by this timer. This method may be called repeatedly; the second and subsequent calls have no effect.
method,java/util/Timer/purge/, Removes all cancelled tasks from this timer's task queue. Calling this method has no effect on the behavior of the timer, but eliminates the references to the cancelled tasks from the queue. If there are no external references to these tasks, they become eligible for garbage collection. Most programs will have no need to call this method. It is designed for use by the rare application that cancels a large number of tasks. Calling this method trades time for space: the runtime of the method may be proportional to n + c log n, where n is the number of tasks in the queue and c is the number of cancelled tasks. Note that it is permissible to call this method from within a a task scheduled on this timer. @return the number of tasks removed from the queue. @since 1.5
method,java/util/Timer/Timer/, Creates a new timer. The associated thread does not run as a daemon. @see Thread @see #cancel()
method,java/util/Timer/Timer/boolean, Creates a new timer whose associated thread may be specified to run as a daemon. A daemon thread is called for if the timer will be used to schedule repeating maintenance activities, which must be performed as long as the application is running, but should not prolong the lifetime of the application. @param isDaemon true if the associated thread should run as a daemon. @see Thread @see #cancel()
method,java/util/TimeZone/getOffset/int;int;int;int;int;int, Gets the time zone offset, for current date, modified in case of daylight savings. This is the offset to add to UTC to get local time. This method returns a historically correct offset if an underlying TimeZone implementation subclass supports historical Daylight Saving Time schedule and GMT offset changes. @param era the era of the given date. @param year the year in the given date. @param month the month in the given date. Month is 0-based. e.g., 0 for January. @param day the day-in-month of the given date. @param dayOfWeek the day-of-week of the given date. @param milliseconds the milliseconds in day in standard local time. @return the offset in milliseconds to add to GMT to get local time. @see Calendar#ZONE_OFFSET @see Calendar#DST_OFFSET
method,java/util/TimeZone/getOffset/long, Returns the offset of this time zone from UTC at the specified date. If Daylight Saving Time is in effect at the specified date, the offset value is adjusted with the amount of daylight saving. This method returns a historically correct offset value if an underlying TimeZone implementation subclass supports historical Daylight Saving Time schedule and GMT offset changes. @param date the date represented in milliseconds since January 1, 1970 00:00:00 GMT @return the amount of time in milliseconds to add to UTC to get local time. @see Calendar#ZONE_OFFSET @see Calendar#DST_OFFSET @since 1.4
method,java/util/TimeZone/setRawOffset/int, Sets the base time zone offset to GMT. This is the offset to add to UTC to get local time. If an underlying TimeZone implementation subclass supports historical GMT offset changes, the specified GMT offset is set as the latest GMT offset and the difference from the known latest GMT offset value is used to adjust all historical GMT offset values. @param offsetMillis the given base time zone offset to GMT.
method,java/util/TimeZone/getRawOffset/, Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. If an underlying TimeZone implementation subclass supports historical GMT offset changes, the method returns the raw offset value of the current date. In Honolulu, for example, its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and this method always returns -36000000 milliseconds (i.e., -10 hours). @return the amount of raw offset time in milliseconds to add to UTC. @see Calendar#ZONE_OFFSET
method,java/util/TimeZone/getDSTSavings/, Returns the amount of time to be added to local standard time to get local wall clock time. The default implementation always returns 3600000 milliseconds (i.e., one hour) if this time zone observes Daylight Saving Time. Otherwise, 0 (zero) is returned. If an underlying TimeZone implementation subclass supports historical Daylight Saving Time changes, this method returns the known latest daylight saving value. @return the amount of saving time in milliseconds @since 1.4
method,java/util/TimeZone/useDaylightTime/, Queries if this time zone uses daylight savings time. If an underlying TimeZone implementation subclass supports historical Daylight Saving Time schedule changes, the method refers to the latest Daylight Saving Time schedule information. @return true if this time zone uses daylight savings time, false, otherwise.
method,java/util/TimeZone/getDefault/, Gets the default TimeZone for this host. The source of the default TimeZone may vary with implementation. @return a default TimeZone. @see #setDefault
method,java/util/TimeZone/hasSameRules/TimeZone, Returns true if this zone has the same rule and offset as another zone. That is, if this zone differs only in ID, if at all. Returns false if the other zone is null. @param other the TimeZone object to be compared with @return true if the other zone is not null and is the same as this one, with the possible exception of the ID @since 1.2
method,java/util/TimeZone/TimeZone/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/util/StringTokenizer/hasMoreTokens/, Tests if there are more tokens available from this tokenizer's string. If this method returns true, then a subsequent call to nextToken with no argument will successfully return a token. @return true if and only if there is at least one token in the string after the current position; false otherwise.
method,java/util/StringTokenizer/nextToken/String, Returns the next token in this string tokenizer's string. First, the set of characters considered to be delimiters by this StringTokenizer object is changed to be the characters in the string delim. Then the next token in the string after the current position is returned. The current position is advanced beyond the recognized token. The new delimiter set remains the default after this call. @param delim the new delimiters. @return the next token, after switching to the new delimiter set. @exception NoSuchElementException if there are no more tokens in this tokenizer's string. @exception NullPointerException if delim is null
method,java/util/StringTokenizer/countTokens/, Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception. The current position is not advanced. @return the number of tokens remaining in the string using the current delimiter set. @see java.util.StringTokenizer#nextToken()
method,java/util/StringTokenizer/StringTokenizer/String;String;boolean, Constructs a string tokenizer for the specified string. All characters in the delim argument are the delimiters for separating tokens. If the returnDelims flag is true, then the delimiter characters are also returned as tokens. Each delimiter is returned as a string of length one. If the flag is false, the delimiter characters are skipped and only serve as separators between tokens. Note that if delim is null, this constructor does not throw an exception. However, trying to invoke other methods on the resulting StringTokenizer may result in a NullPointerException. @param str a string to be parsed. @param delim the delimiters. @param returnDelims flag indicating whether to return the delimiters as tokens. @exception NullPointerException if str is null
method,java/util/StringTokenizer/StringTokenizer/String;String, Constructs a string tokenizer for the specified string. The characters in the delim argument are the delimiters for separating tokens. Delimiter characters themselves will not be treated as tokens. Note that if delim is null, this constructor does not throw an exception. However, trying to invoke other methods on the resulting StringTokenizer may result in a NullPointerException. @param str a string to be parsed. @param delim the delimiters. @exception NullPointerException if str is null
method,java/util/Stack/empty/, Tests if this stack is empty. @return true if and only if this stack contains no items; false otherwise.
method,java/util/Stack/search/Object, Returns the 1-based position where an object is on this stack. If the object o occurs as an item in this stack, this method returns the distance from the top of the stack of the occurrence nearest the top of the stack; the topmost item on the stack is considered to be at distance 1. The equals method is used to compare o to the items in this stack. @param o the desired object. @return the 1-based position from the top of the stack where the object is located; the return value -1 indicates that the object is not on the stack.
class,java/util/SimpleTimeZone, SimpleTimeZone is a concrete subclass of TimeZone that represents a time zone for use with a Gregorian calendar. The class holds an offset from GMT, called raw offset, and start and end rules for a daylight saving time schedule. Since it only holds single values for each, it cannot handle historical changes in the offset from GMT and the daylight saving schedule, except that the {@link #setStartYear setStartYear} method can specify the year when the daylight saving time schedule starts in effect. To construct a SimpleTimeZone with a daylight saving time schedule, the schedule can be described with a set of rules, start-rule and end-rule. A day when daylight saving time starts or ends is specified by a combination of month, day-of-month, and day-of-week values. The month value is represented by a Calendar {@link Calendar#MONTH MONTH} field value, such as {@link Calendar#MARCH}. The day-of-week value is represented by a Calendar {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value, such as {@link Calendar#SUNDAY SUNDAY}. The meanings of value combinations are as follows. Exact day of month To specify an exact day of month, set the month and day-of-month to an exact value, and day-of-week to zero. For example, to specify March 1, set the month to {@link Calendar#MARCH MARCH}, day-of-month to 1, and day-of-week to 0. Day of week on or after day of month To specify a day of week on or after an exact day of month, set the month to an exact month value, day-of-month to the day on or after which the rule is applied, and day-of-week to a negative {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} field value. For example, to specify the second Sunday of April, set month to {@link Calendar#APRIL APRIL}, day-of-month to 8, and day-of-week to -{@link Calendar#SUNDAY SUNDAY}. Day of week on or before day of month To specify a day of the week on or before an exact day of the month, set day-of-month and day-of-week to a negative value. For example, to specify the last Wednesday on or before the 21st of March, set month to {@link Calendar#MARCH MARCH}, day-of-month is -21 and day-of-week is -{@link Calendar#WEDNESDAY WEDNESDAY}. Last day-of-week of month To specify, the last day-of-week of the month, set day-of-week to a {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value and day-of-month to -1. For example, to specify the last Sunday of October, set month to {@link Calendar#OCTOBER OCTOBER}, day-of-week to {@link Calendar#SUNDAY SUNDAY} and day-of-month to -1. The time of the day at which daylight saving time starts or ends is specified by a millisecond value within the day. There are three kinds of modes to specify the time: {@link #WALL_TIME}, {@link #STANDARD_TIME} and {@link #UTC_TIME}. For example, if daylight saving time ends at 2:00 am in the wall clock time, it can be specified by 7200000 milliseconds in the {@link #WALL_TIME} mode. In this case, the wall clock time for an end-rule means the same thing as the daylight time. The following are examples of parameters for constructing time zone objects. // Base GMT offset: -8:00 // DST starts: at 2:00am in standard time // on the first Sunday in April // DST ends: at 2:00am in daylight time // on the last Sunday in October // Save: 1 hour SimpleTimeZone(-28800000, America/Los_Angeles, Calendar.APRIL, 1, -Calendar.SUNDAY, 7200000, Calendar.OCTOBER, -1, Calendar.SUNDAY, 7200000, 3600000) // Base GMT offset: +1:00 // DST starts: at 1:00am in UTC time // on the last Sunday in March // DST ends: at 1:00am in UTC time // on the last Sunday in October // Save: 1 hour SimpleTimeZone(3600000, Europe/Paris, Calendar.MARCH, -1, Calendar.SUNDAY, 3600000, SimpleTimeZone.UTC_TIME, Calendar.OCTOBER, -1, Calendar.SUNDAY, 3600000, SimpleTimeZone.UTC_TIME, 3600000) These parameter rules are also applicable to the set rule methods, such as setStartRule. @since 1.1 @see Calendar @see GregorianCalendar @see TimeZone @version 1.54 03/23/10 @author David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu
method,java/util/SimpleTimeZone/setStartRule/int;int;int;int, Sets the daylight saving time start rule. For example, if daylight saving time starts on the first Sunday in April at 2 am in local wall clock time, you can set the start rule by calling: setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000); @param startMonth The daylight saving time starting month. Month is a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 0 for January). @param startDay The day of the month on which the daylight saving time starts. See the class description for the special cases of this parameter. @param startDayOfWeek The daylight saving time starting day-of-week. See the class description for the special cases of this parameter. @param startTime The daylight saving time starting time in local wall clock time, which is local standard time in this case. @exception IllegalArgumentException if the startMonth, startDay, startDayOfWeek, or startTime parameters are out of range
method,java/util/SimpleTimeZone/setStartRule/int;int;int;int;boolean, Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th. @param startMonth The daylight saving time starting month. Month is a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 0 for January). @param startDay The day of the month on which the daylight saving time starts. @param startDayOfWeek The daylight saving time starting day-of-week. @param startTime The daylight saving time starting time in local wall clock time, which is local standard time in this case. @param after If true, this rule selects the first dayOfWeek on or after dayOfMonth. If false, this rule selects the last dayOfWeek on or before dayOfMonth. @exception IllegalArgumentException if the startMonth, startDay, startDayOfWeek, or startTime parameters are out of range @since 1.2
method,java/util/SimpleTimeZone/setEndRule/int;int;int;int, Sets the daylight saving time end rule. For example, if daylight saving time ends on the last Sunday in October at 2 am in wall clock time, you can set the end rule by calling: setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000); @param endMonth The daylight saving time ending month. Month is a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 9 for October). @param endDay The day of the month on which the daylight saving time ends. See the class description for the special cases of this parameter. @param endDayOfWeek The daylight saving time ending day-of-week. See the class description for the special cases of this parameter. @param endTime The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case. @exception IllegalArgumentException if the endMonth, endDay, endDayOfWeek, or endTime parameters are out of range
method,java/util/SimpleTimeZone/setEndRule/int;int;int;int;boolean, Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th. @param endMonth The daylight saving time ending month. Month is a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 9 for October). @param endDay The day of the month on which the daylight saving time ends. @param endDayOfWeek The daylight saving time ending day-of-week. @param endTime The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case. @param after If true, this rule selects the first endDayOfWeek on or after endDay. If false, this rule selects the last endDayOfWeek on or before endDay of the month. @exception IllegalArgumentException the endMonth, endDay, endDayOfWeek, or endTime parameters are out of range @since 1.2
method,java/util/SimpleTimeZone/SimpleTimeZone/int;String;int;int;int;int;int;int;int;int, Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time. Both startTime and endTime are specified to be represented in the wall clock time. The amount of daylight saving is assumed to be 3600000 milliseconds (i.e., one hour). This constructor is equivalent to: SimpleTimeZone(rawOffset, ID, startMonth, startDay, startDayOfWeek, startTime, SimpleTimeZone.{@link #WALL_TIME}, endMonth, endDay, endDayOfWeek, endTime, SimpleTimeZone.{@link #WALL_TIME}, 3600000) @param rawOffset The given base time zone offset from GMT. @param ID The time zone ID which is given to this object. @param startMonth The daylight saving time starting month. Month is a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 0 for January). @param startDay The day of the month on which the daylight saving time starts. See the class description for the special cases of this parameter. @param startDayOfWeek The daylight saving time starting day-of-week. See the class description for the special cases of this parameter. @param startTime The daylight saving time starting time in local wall clock time (in milliseconds within the day), which is local standard time in this case. @param endMonth The daylight saving time ending month. Month is a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 9 for October). @param endDay The day of the month on which the daylight saving time ends. See the class description for the special cases of this parameter. @param endDayOfWeek The daylight saving time ending day-of-week. See the class description for the special cases of this parameter. @param endTime The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case. @exception IllegalArgumentException if the month, day, dayOfWeek, or time parameters are out of range for the start or end rule
method,java/util/SimpleTimeZone/SimpleTimeZone/int;String;int;int;int;int;int;int;int;int;int, Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time. Both startTime and endTime are assumed to be represented in the wall clock time. This constructor is equivalent to: SimpleTimeZone(rawOffset, ID, startMonth, startDay, startDayOfWeek, startTime, SimpleTimeZone.{@link #WALL_TIME}, endMonth, endDay, endDayOfWeek, endTime, SimpleTimeZone.{@link #WALL_TIME}, dstSavings) @param rawOffset The given base time zone offset from GMT. @param ID The time zone ID which is given to this object. @param startMonth The daylight saving time starting month. Month is a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 0 for January). @param startDay The day of the month on which the daylight saving time starts. See the class description for the special cases of this parameter. @param startDayOfWeek The daylight saving time starting day-of-week. See the class description for the special cases of this parameter. @param startTime The daylight saving time starting time in local wall clock time, which is local standard time in this case. @param endMonth The daylight saving time ending month. Month is a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 9 for October). @param endDay The day of the month on which the daylight saving time ends. See the class description for the special cases of this parameter. @param endDayOfWeek The daylight saving time ending day-of-week. See the class description for the special cases of this parameter. @param endTime The daylight saving ending time in local wall clock time, which is local daylight time in this case. @param dstSavings The amount of time in milliseconds saved during daylight saving time. @exception IllegalArgumentException if the month, day, dayOfWeek, or time parameters are out of range for the start or end rule @since 1.2
method,java/util/Set/addAll/Collection, Adds all of the elements in the specified collection to this set if they're not already present (optional operation). If the specified collection is also a set, the addAll operation effectively modifies this set so that its value is the union of the two sets. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. @param c collection containing elements to be added to this set @return true if this set changed as a result of the call @throws UnsupportedOperationException if the addAll operation is not supported by this set @throws ClassCastException if the class of an element of the specified collection prevents it from being added to this set @throws NullPointerException if the specified collection contains one or more null elements and this set does not permit null elements, or if the specified collection is null @throws IllegalArgumentException if some property of an element of the specified collection prevents it from being added to this set @see #add(Object)
method,java/util/Set/retainAll/Collection, Retains only the elements in this set that are contained in the specified collection (optional operation). In other words, removes from this set all of its elements that are not contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the intersection of the two sets. @param c collection containing elements to be retained in this set @return true if this set changed as a result of the call @throws UnsupportedOperationException if the retainAll operation is not supported by this set @throws ClassCastException if the class of an element of this set is incompatible with the specified collection (optional) @throws NullPointerException if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object)
method,java/util/Set/removeAll/Collection, Removes from this set all of its elements that are contained in the specified collection (optional operation). If the specified collection is also a set, this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets. @param c collection containing elements to be removed from this set @return true if this set changed as a result of the call @throws UnsupportedOperationException if the removeAll operation is not supported by this set @throws ClassCastException if the class of an element of this set is incompatible with the specified collection (optional) @throws NullPointerException if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object) @see #contains(Object)
method,java/util/Set/clear/, Removes all of the elements from this set (optional operation). The set will be empty after this call returns. @throws UnsupportedOperationException if the clear method is not supported by this set
method,java/util/Set/hashCode/, Returns the hash code value for this set. The hash code of a set is defined to be the sum of the hash codes of the elements in the set, where the hash code of a null element is defined to be zero. This ensures that s1.equals(s2) implies that s1.hashCode()==s2.hashCode() for any two sets s1 and s2, as required by the general contract of {@link Object#hashCode}. @return the hash code value for this set @see Object#equals(Object) @see Set#equals(Object)
method,java/util/ServiceLoader/reload/, Clear this loader's provider cache so that all providers will be reloaded. After invoking this method, subsequent invocations of the {@link #iterator() iterator} method will lazily look up and instantiate providers from scratch, just as is done by a newly-created loader. This method is intended for use in situations in which new providers can be installed into a running Java virtual machine.
method,java/util/ServiceLoader/load/Class, Creates a new service loader for the given service type, using the current thread's {@linkplain java.lang.Thread#getContextClassLoader context class loader}. An invocation of this convenience method of the form ServiceLoader.load(service) is equivalent to ServiceLoader.load(service, Thread.currentThread().getContextClassLoader()) @param service The interface or abstract class representing the service @return A new service loader
method,java/util/ServiceLoader/loadInstalled/Class, Creates a new service loader for the given service type, using the extension class loader. This convenience method simply locates the extension class loader, call it extClassLoader, and then returns ServiceLoader.load(service, extClassLoader) If the extension class loader cannot be found then the system class loader is used; if there is no system class loader then the bootstrap class loader is used. This method is intended for use when only installed providers are desired. The resulting service will only find and load providers that have been installed into the current Java virtual machine; providers on the application's class path will be ignored. @param service The interface or abstract class representing the service @return A new service loader
class,java/util/ServiceConfigurationError, Error thrown when something goes wrong while loading a service provider. This error will be thrown in the following situations: The format of a provider-configuration file violates the specification; An {@link java.io.IOException IOException} occurs while reading a provider-configuration file; A concrete provider class named in a provider-configuration file cannot be found; A concrete provider class is not a subclass of the service class; A concrete provider class cannot be instantiated; or Some other kind of error occurs. @author Mark Reinhold @version 1.6, 10/03/23 @since 1.6
class,java/util/Scanner, A simple text scanner which can parse primitive types and strings using regular expressions. A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods. For example, this code allows a user to read a number from System.in: Scanner sc = new Scanner(System.in); int i = sc.nextInt(); As another example, this code allows long types to be assigned from entries in a file myNumbers: Scanner sc = new Scanner(new File(myNumbers)); while (sc.hasNextLong()) { long aLong = sc.nextLong(); } The scanner can also use delimiters other than whitespace. This example reads several items in from a string: String input = 1 fish 2 fish red fish blue fish; Scanner s = new Scanner(input).useDelimiter(\\s*fish\\s*); System.out.println(s.nextInt()); System.out.println(s.nextInt()); System.out.println(s.next()); System.out.println(s.next()); s.close(); prints the following output: 1 2 red blue The same output can be generated with this code, which uses a regular expression to parse all four tokens at once: String input = 1 fish 2 fish red fish blue fish; Scanner s = new Scanner(input); s.findInLine((\\d+) fish (\\d+) fish (\\w+) fish (\\w+)); MatchResult result = s.match(); for (int i=1; i The default whitespace delimiter used by a scanner is as recognized by {@link java.lang.Character}.{@link java.lang.Character#isWhitespace(char) isWhitespace}. The {@link #reset} method will reset the value of the scanner's delimiter to the default whitespace delimiter regardless of whether it was previously changed. A scanning operation may block waiting for input. The {@link #next} and {@link #hasNext} methods and their primitive-type companion methods (such as {@link #nextInt} and {@link #hasNextInt}) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both hasNext and next methods may block waiting for further input. Whether a hasNext method blocks has no connection to whether or not its associated next method will block. The {@link #findInLine}, {@link #findWithinHorizon}, and {@link #skip} methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input. When a scanner throws an {@link InputMismatchException}, the scanner will not pass the token that caused the exception, so that it may be retrieved or skipped via some other method. Depending upon the type of delimiting pattern, empty tokens may be returned. For example, the pattern \\s+ will return no empty tokens since it matches multiple instances of the delimiter. The delimiting pattern \\s could return empty tokens since it only passes one space at a time. A scanner can read text from any object which implements the {@link java.lang.Readable} interface. If an invocation of the underlying readable's {@link java.lang.Readable#read} method throws an {@link java.io.IOException} then the scanner assumes that the end of the input has been reached. The most recent IOException thrown by the underlying readable can be retrieved via the {@link #ioException} method. When a Scanner is closed, it will close its input source if the source implements the {@link java.io.Closeable} interface. A Scanner is not safe for multithreaded use without external synchronization. Unless otherwise mentioned, passing a null parameter into any method of a Scanner will cause a NullPointerException to be thrown. A scanner will default to interpreting numbers as decimal unless a different radix has been set by using the {@link #useRadix} method. The {@link #reset} method will reset the value of the scanner's radix to 10 regardless of whether it was previously changed. Localized numbers An instance of this class is capable of scanning numbers in the standard formats as well as in the formats of the scanner's locale. A scanner's initial locale is the value returned by the {@link java.util.Locale#getDefault} method; it may be changed via the {@link #useLocale} method. The {@link #reset} method will reset the value of the scanner's locale to the initial locale regardless of whether it was previously changed. The localized formats are defined in terms of the following parameters, which for a particular locale are taken from that locale's {@link java.text.DecimalFormat DecimalFormat} object, df, and its and {@link java.text.DecimalFormatSymbols DecimalFormatSymbols} object, dfs. LocalGroupSeparator&nbsp;&nbsp; The character used to separate thousands groups, i.e.,&nbsp;dfs.{@link java.text.DecimalFormatSymbols#getGroupingSeparator getGroupingSeparator()} LocalDecimalSeparator&nbsp;&nbsp; The character used for the decimal point, i.e.,&nbsp;dfs.{@link java.text.DecimalFormatSymbols#getDecimalSeparator getDecimalSeparator()} LocalPositivePrefix&nbsp;&nbsp; The string that appears before a positive number (may be empty), i.e.,&nbsp;df.{@link java.text.DecimalFormat#getPositivePrefix getPositivePrefix()} LocalPositiveSuffix&nbsp;&nbsp; The string that appears after a positive number (may be empty), i.e.,&nbsp;df.{@link java.text.DecimalFormat#getPositiveSuffix getPositiveSuffix()} LocalNegativePrefix&nbsp;&nbsp; The string that appears before a negative number (may be empty), i.e.,&nbsp;df.{@link java.text.DecimalFormat#getNegativePrefix getNegativePrefix()} LocalNegativeSuffix&nbsp;&nbsp; The string that appears after a negative number (may be empty), i.e.,&nbsp;df.{@link java.text.DecimalFormat#getNegativeSuffix getNegativeSuffix()} LocalNaN&nbsp;&nbsp; The string that represents not-a-number for floating-point values, i.e.,&nbsp;dfs.{@link java.text.DecimalFormatSymbols#getNaN getNaN()} LocalInfinity&nbsp;&nbsp; The string that represents infinity for floating-point values, i.e.,&nbsp;dfs.{@link java.text.DecimalFormatSymbols#getInfinity getInfinity()} Number syntax The strings that can be parsed as numbers by an instance of this class are specified in terms of the following regular-expression grammar, where Rmax is the highest digit in the radix being used (for example, Rmax is 9 in base 10). NonASCIIDigit&nbsp;&nbsp;:: = A non-ASCII character c for which {@link java.lang.Character#isDigit Character.isDigit}(c) returns&nbsp;true &nbsp; Non0Digit&nbsp;&nbsp;:: = [1-Rmax] | NonASCIIDigit &nbsp; Digit&nbsp;&nbsp;:: = [0-Rmax] | NonASCIIDigit &nbsp; GroupedNumeral&nbsp;&nbsp;:: = (&nbsp; Non0Digit Digit? Digit? (&nbsp;LocalGroupSeparator Digit Digit Digit )+ ) &nbsp; Numeral&nbsp;&nbsp;:: = ( ( Digit+ ) | GroupedNumeral ) &nbsp; Integer&nbsp;&nbsp;:: = ( [-+]? ( Numeral ) ) | LocalPositivePrefix Numeral LocalPositiveSuffix | LocalNegativePrefix Numeral LocalNegativeSuffix &nbsp; DecimalNumeral&nbsp;&nbsp;:: = Numeral | Numeral LocalDecimalSeparator Digit* | LocalDecimalSeparator Digit+ &nbsp; Exponent&nbsp;&nbsp;:: = ( [eE] [+-]? Digit+ ) &nbsp; Decimal&nbsp;&nbsp;:: = ( [-+]? DecimalNumeral Exponent? ) | LocalPositivePrefix DecimalNumeral LocalPositiveSuffix Exponent? | LocalNegativePrefix DecimalNumeral LocalNegativeSuffix Exponent? &nbsp; HexFloat&nbsp;&nbsp;:: = [-+]? 0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+ ([pP][-+]?[0-9]+)? &nbsp; NonNumber&nbsp;&nbsp;:: = NaN | LocalNan | Infinity | LocalInfinity &nbsp; SignedNonNumber&nbsp;&nbsp;:: = ( [-+]? NonNumber ) | LocalPositivePrefix NonNumber LocalPositiveSuffix | LocalNegativePrefix NonNumber LocalNegativeSuffix &nbsp; Float&nbsp;&nbsp;:: = Decimal | HexFloat | SignedNonNumber Whitespace is not significant in the above regular expressions. @version 1.28, 03/23/10 @since 1.5
method,java/util/Scanner/close/, Closes this scanner. If this scanner has not yet been closed then if its underlying {@linkplain java.lang.Readable readable} also implements the {@link java.io.Closeable} interface then the readable's close method will be invoked. If this scanner is already closed then invoking this method will have no effect. Attempting to perform search operations after a scanner has been closed will result in an {@link IllegalStateException}.
method,java/util/Scanner/useDelimiter/String, Sets this scanner's delimiting pattern to a pattern constructed from the specified String. An invocation of this method of the form useDelimiter(pattern) behaves in exactly the same way as the invocation useDelimiter(Pattern.compile(pattern)). Invoking the {@link #reset} method will set the scanner's delimiter to the default. @param pattern A string specifying a delimiting pattern @return this scanner
method,java/util/Scanner/useLocale/Locale, Sets this scanner's locale to the specified locale. A scanner's locale affects many elements of its default primitive matching regular expressions; see localized numbers above. Invoking the {@link #reset} method will set the scanner's locale to the initial locale. @param locale A string specifying the locale to use @return this scanner
method,java/util/Scanner/useRadix/int, Sets this scanner's default radix to the specified radix. A scanner's radix affects elements of its default number matching regular expressions; see localized numbers above. If the radix is less than Character.MIN_RADIX or greater than Character.MAX_RADIX, then an IllegalArgumentException is thrown. Invoking the {@link #reset} method will set the scanner's radix to 10. @param radix The radix to use when scanning numbers @return this scanner @throws IllegalArgumentException if radix is out of range
method,java/util/Scanner/match/, Returns the match result of the last scanning operation performed by this scanner. This method throws IllegalStateException if no match has been performed, or if the last match was not successful. The various nextmethods of Scanner make a match result available if they complete without throwing an exception. For instance, after an invocation of the {@link #nextInt} method that returned an int, this method returns a MatchResult for the search of the Integer regular expression defined above. Similarly the {@link #findInLine}, {@link #findWithinHorizon}, and {@link #skip} methods will make a match available if they succeed. @return a match result for the last match operation @throws IllegalStateException If no match result is available
method,java/util/Scanner/toString/, Returns the string representation of this Scanner. The string representation of a Scanner contains information that may be useful for debugging. The exact format is unspecified. @return The string representation of this scanner
method,java/util/Scanner/hasNext/, Returns true if this scanner has another token in its input. This method may block while waiting for input to scan. The scanner does not advance past any input. @return true if and only if this scanner has another token @throws IllegalStateException if this scanner is closed @see java.util.Iterator
method,java/util/Scanner/next/, Finds and returns the next complete token from this scanner. A complete token is preceded and followed by input that matches the delimiter pattern. This method may block while waiting for input to scan, even if a previous invocation of {@link #hasNext} returned true. @return the next token @throws NoSuchElementException if no more tokens are available @throws IllegalStateException if this scanner is closed @see java.util.Iterator
method,java/util/Scanner/remove/, The remove operation is not supported by this implementation of Iterator. @throws UnsupportedOperationException if this method is invoked. @see java.util.Iterator
method,java/util/Scanner/hasNext/String, Returns true if the next token matches the pattern constructed from the specified string. The scanner does not advance past any input. An invocation of this method of the form hasNext(pattern) behaves in exactly the same way as the invocation hasNext(Pattern.compile(pattern)). @param pattern a string specifying the pattern to scan @return true if and only if this scanner has another token matching the specified pattern @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/next/String, Returns the next token if it matches the pattern constructed from the specified string. If the match is successful, the scanner advances past the input that matched the pattern. An invocation of this method of the form next(pattern) behaves in exactly the same way as the invocation next(Pattern.compile(pattern)). @param pattern a string specifying the pattern to scan @return the next token @throws NoSuchElementException if no such tokens are available @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNext/Pattern, Returns true if the next complete token matches the specified pattern. A complete token is prefixed and postfixed by input that matches the delimiter pattern. This method may block while waiting for input. The scanner does not advance past any input. @param pattern the pattern to scan for @return true if and only if this scanner has another token matching the specified pattern @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/next/Pattern, Returns the next token if it matches the specified pattern. This method may block while waiting for input to scan, even if a previous invocation of {@link #hasNext(Pattern)} returned true. If the match is successful, the scanner advances past the input that matched the pattern. @param pattern the pattern to scan for @return the next token @throws NoSuchElementException if no more tokens are available @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextLine/, Returns true if there is another line in the input of this scanner. This method may block while waiting for input. The scanner does not advance past any input. @return true if and only if this scanner has another line of input @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/nextLine/, Advances this scanner past the current line and returns the input that was skipped. This method returns the rest of the current line, excluding any line separator at the end. The position is set to the beginning of the next line. Since this method continues to search through the input looking for a line separator, it may buffer all of the input searching for the line to skip if no line separators are present. @return the line that was skipped @throws NoSuchElementException if no line was found @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/findInLine/String, Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. An invocation of this method of the form findInLine(pattern) behaves in exactly the same way as the invocation findInLine(Pattern.compile(pattern)). @param pattern a string specifying the pattern to search for @return the text that matched the specified pattern @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/findInLine/Pattern, Attempts to find the next occurrence of the specified pattern ignoring delimiters. If the pattern is found before the next line separator, the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected in the input up to the next line separator, then null is returned and the scanner's position is unchanged. This method may block waiting for input that matches the pattern. Since this method continues to search through the input looking for the specified pattern, it may buffer all of the input searching for the desired token if no line separators are present. @param pattern the pattern to scan for @return the text that matched the specified pattern @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/findWithinHorizon/String;int, Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. An invocation of this method of the form findWithinHorizon(pattern) behaves in exactly the same way as the invocation findWithinHorizon(Pattern.compile(pattern, horizon)). @param pattern a string specifying the pattern to search for @return the text that matched the specified pattern @throws IllegalStateException if this scanner is closed @throws IllegalArgumentException if horizon is negative
method,java/util/Scanner/findWithinHorizon/Pattern;int, Attempts to find the next occurrence of the specified pattern. This method searches through the input up to the specified search horizon, ignoring delimiters. If the pattern is found the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected then the null is returned and the scanner's position remains unchanged. This method may block waiting for input that matches the pattern. A scanner will never search more than horizon code points beyond its current position. Note that a match may be clipped by the horizon; that is, an arbitrary match result may have been different if the horizon had been larger. The scanner treats the horizon as a transparent, non-anchoring bound (see {@link Matcher#useTransparentBounds} and {@link Matcher#useAnchoringBounds}). If horizon is 0, then the horizon is ignored and this method continues to search through the input looking for the specified pattern without bound. In this case it may buffer all of the input searching for the pattern. If horizon is negative, then an IllegalArgumentException is thrown. @param pattern the pattern to scan for @return the text that matched the specified pattern @throws IllegalStateException if this scanner is closed @throws IllegalArgumentException if horizon is negative
method,java/util/Scanner/skip/Pattern, Skips input that matches the specified pattern, ignoring delimiters. This method will skip input if an anchored match of the specified pattern succeeds. If a match to the specified pattern is not found at the current position, then no input is skipped and a NoSuchElementException is thrown. Since this method seeks to match the specified pattern starting at the scanner's current position, patterns that can match a lot of input (.*, for example) may cause the scanner to buffer a large amount of input. Note that it is possible to skip something without risking a NoSuchElementException by using a pattern that can match nothing, e.g., sc.skip([ \t]*). @param pattern a string specifying the pattern to skip over @return this scanner @throws NoSuchElementException if the specified pattern is not found @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/skip/String, Skips input that matches a pattern constructed from the specified string. An invocation of this method of the form skip(pattern) behaves in exactly the same way as the invocation skip(Pattern.compile(pattern)). @param pattern a string specifying the pattern to skip over @return this scanner @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextBoolean/, Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string true|false. The scanner does not advance past the input that matched. @return true if and only if this scanner's next token is a valid boolean value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextByte/, Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the {@link #nextByte} method. The scanner does not advance past any input. @return true if and only if this scanner's next token is a valid byte value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextByte/int, Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the {@link #nextByte} method. The scanner does not advance past any input. @param radix the radix used to interpret the token as a byte value @return true if and only if this scanner's next token is a valid byte value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/nextByte/, Scans the next token of the input as a byte. An invocation of this method of the form nextByte() behaves in exactly the same way as the invocation nextByte(radix), where radix is the default radix of this scanner. @return the byte scanned from the input @throws InputMismatchException if the next token does not match the Integer regular expression, or is out of range @throws NoSuchElementException if input is exhausted @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextShort/, Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the {@link #nextShort} method. The scanner does not advance past any input. @return true if and only if this scanner's next token is a valid short value in the default radix @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextShort/int, Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the {@link #nextShort} method. The scanner does not advance past any input. @param radix the radix used to interpret the token as a short value @return true if and only if this scanner's next token is a valid short value in the specified radix @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/nextShort/, Scans the next token of the input as a short. An invocation of this method of the form nextShort() behaves in exactly the same way as the invocation nextShort(radix), where radix is the default radix of this scanner. @return the short scanned from the input @throws InputMismatchException if the next token does not match the Integer regular expression, or is out of range @throws NoSuchElementException if input is exhausted @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextInt/, Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the {@link #nextInt} method. The scanner does not advance past any input. @return true if and only if this scanner's next token is a valid int value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextInt/int, Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the {@link #nextInt} method. The scanner does not advance past any input. @param radix the radix used to interpret the token as an int value @return true if and only if this scanner's next token is a valid int value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/nextInt/, Scans the next token of the input as an int. An invocation of this method of the form nextInt() behaves in exactly the same way as the invocation nextInt(radix), where radix is the default radix of this scanner. @return the int scanned from the input @throws InputMismatchException if the next token does not match the Integer regular expression, or is out of range @throws NoSuchElementException if input is exhausted @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextLong/, Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the {@link #nextLong} method. The scanner does not advance past any input. @return true if and only if this scanner's next token is a valid long value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextLong/int, Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the {@link #nextLong} method. The scanner does not advance past any input. @param radix the radix used to interpret the token as a long value @return true if and only if this scanner's next token is a valid long value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/nextLong/, Scans the next token of the input as a long. An invocation of this method of the form nextLong() behaves in exactly the same way as the invocation nextLong(radix), where radix is the default radix of this scanner. @return the long scanned from the input @throws InputMismatchException if the next token does not match the Integer regular expression, or is out of range @throws NoSuchElementException if input is exhausted @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextFloat/, Returns true if the next token in this scanner's input can be interpreted as a float value using the {@link #nextFloat} method. The scanner does not advance past any input. @return true if and only if this scanner's next token is a valid float value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextDouble/, Returns true if the next token in this scanner's input can be interpreted as a double value using the {@link #nextDouble} method. The scanner does not advance past any input. @return true if and only if this scanner's next token is a valid double value @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextBigInteger/, Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the {@link #nextBigInteger} method. The scanner does not advance past any input. @return true if and only if this scanner's next token is a valid BigInteger @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextBigInteger/int, Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the {@link #nextBigInteger} method. The scanner does not advance past any input. @param radix the radix used to interpret the token as an integer @return true if and only if this scanner's next token is a valid BigInteger @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/nextBigInteger/, Scans the next token of the input as a {@link java.math.BigInteger BigInteger}. An invocation of this method of the form nextBigInteger() behaves in exactly the same way as the invocation nextBigInteger(radix), where radix is the default radix of this scanner. @return the BigInteger scanned from the input @throws InputMismatchException if the next token does not match the Integer regular expression, or is out of range @throws NoSuchElementException if the input is exhausted @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/hasNextBigDecimal/, Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the {@link #nextBigDecimal} method. The scanner does not advance past any input. @return true if and only if this scanner's next token is a valid BigDecimal @throws IllegalStateException if this scanner is closed
method,java/util/Scanner/reset/, Resets this scanner. Resetting a scanner discards all of its explicit state information which may have been changed by invocations of {@link #useDelimiter}, {@link #useLocale}, or {@link #useRadix}. An invocation of this method of the form scanner.reset() behaves in exactly the same way as the invocation scanner.useDelimiter(\\p{javaWhitespace}+) .useLocale(Locale.getDefault()) .useRadix(10); @return this scanner @since 1.6
method,java/util/ResourceBundle/getString/String, Gets a string for the given key from this resource bundle or one of its parents. Calling this method is equivalent to calling (String) {@link #getObject(java.lang.String) getObject}(key). @param key the key for the desired string @exception NullPointerException if key is null @exception MissingResourceException if no object for the given key can be found @exception ClassCastException if the object found for the given key is not a string @return the string for the given key
method,java/util/ResourceBundle/getStringArray/String, Gets a string array for the given key from this resource bundle or one of its parents. Calling this method is equivalent to calling (String[]) {@link #getObject(java.lang.String) getObject}(key). @param key the key for the desired string array @exception NullPointerException if key is null @exception MissingResourceException if no object for the given key can be found @exception ClassCastException if the object found for the given key is not a string array @return the string array for the given key
method,java/util/ResourceBundle/getObject/String, Gets an object for the given key from this resource bundle or one of its parents. This method first tries to obtain the object from this resource bundle using {@link #handleGetObject(java.lang.String) handleGetObject}. If not successful, and the parent resource bundle is not null, it calls the parent's getObject method. If still not successful, it throws a MissingResourceException. @param key the key for the desired object @exception NullPointerException if key is null @exception MissingResourceException if no object for the given key can be found @return the object for the given key
method,java/util/ResourceBundle/getLocale/, Returns the locale of this resource bundle. This method can be used after a call to getBundle() to determine whether the resource bundle returned really corresponds to the requested locale or is a fallback. @return the locale of this resource bundle
method,java/util/ResourceBundle/getBundle/String, Gets a resource bundle using the specified base name, the default locale, and the caller's class loader. Calling this method is equivalent to calling getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader()), except that getClassLoader() is run with the security privileges of ResourceBundle. See {@link #getBundle(String, Locale, ClassLoader) getBundle} for a complete description of the search and instantiation strategy. @param baseName the base name of the resource bundle, a fully qualified class name @exception java.lang.NullPointerException if baseName is null @exception MissingResourceException if no resource bundle for the specified base name can be found @return a resource bundle for the given base name and the default locale
method,java/util/ResourceBundle/getBundle/String;Control, Returns a resource bundle using the specified base name, the default locale and the specified control. Calling this method is equivalent to calling getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader(), control), except that getClassLoader() is run with the security privileges of ResourceBundle. See {@link #getBundle(String, Locale, ClassLoader, Control) getBundle} for the complete description of the resource bundle loading process with a ResourceBundle.Control. @param baseName the base name of the resource bundle, a fully qualified class name @param control the control which gives information for the resource bundle loading process @return a resource bundle for the given base name and the default locale @exception NullPointerException if baseName or control is null @exception MissingResourceException if no resource bundle for the specified base name can be found @exception IllegalArgumentException if the given control doesn't perform properly (e.g., control.getCandidateLocales returns null.) Note that validation of control is performed as needed. @since 1.6
method,java/util/ResourceBundle/getBundle/String;Locale, Gets a resource bundle using the specified base name and locale, and the caller's class loader. Calling this method is equivalent to calling getBundle(baseName, locale, this.getClass().getClassLoader()), except that getClassLoader() is run with the security privileges of ResourceBundle. See {@link #getBundle(String, Locale, ClassLoader) getBundle} for a complete description of the search and instantiation strategy. @param baseName the base name of the resource bundle, a fully qualified class name @param locale the locale for which a resource bundle is desired @exception NullPointerException if baseName or locale is null @exception MissingResourceException if no resource bundle for the specified base name can be found @return a resource bundle for the given base name and locale
method,java/util/ResourceBundle/getBundle/String;Locale;Control, Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader. Calling this method is equivalent to calling getBundle(baseName, targetLocale, this.getClass().getClassLoader(), control), except that getClassLoader() is run with the security privileges of ResourceBundle. See {@link #getBundle(String, Locale, ClassLoader, Control) getBundle} for the complete description of the resource bundle loading process with a ResourceBundle.Control. @param baseName the base name of the resource bundle, a fully qualified class name @param targetLocale the locale for which a resource bundle is desired @param control the control which gives information for the resource bundle loading process @return a resource bundle for the given base name and a Locale in locales @exception NullPointerException if baseName, locales or control is null @exception MissingResourceException if no resource bundle for the specified base name in any of the locales can be found. @exception IllegalArgumentException if the given control doesn't perform properly (e.g., control.getCandidateLocales returns null.) Note that validation of control is performed as needed. @since 1.6
method,java/util/ResourceBundle/clearCache/, Removes all resource bundles from the cache that have been loaded using the caller's class loader. @since 1.6 @see ResourceBundle.Control#getTimeToLive(String,Locale)
method,java/util/ResourceBundle/handleGetObject/String, Gets an object for the given key from this resource bundle. Returns null if this resource bundle does not contain an object for the given key. @param key the key for the desired object @exception NullPointerException if key is null @return the object for the given key, or null
method,java/util/ResourceBundle/ResourceBundle/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/util/ResourceBundle/Control/getFallbackLocale/String;Locale, Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method. This method is called from the factory method every time when no resulting resource bundle has been found for baseName and locale, where locale is either the parameter for ResourceBundle.getBundle or the previous fallback locale returned by this method. The method returns null if no further fallback search is desired. The default implementation returns the {@linkplain Locale#getDefault() default Locale} if the given locale isn't the default one. Otherwise, null is returned. @param baseName the base name of the resource bundle, a fully qualified class name for which ResourceBundle.getBundle has been unable to find any resource bundles (except for the base bundle) @param locale the Locale for which ResourceBundle.getBundle has been unable to find any resource bundles (except for the base bundle) @return a Locale for the fallback search, or null if no further fallback search is desired. @exception NullPointerException if baseName or locale is null
method,java/util/ResourceBundle/Control/newBundle/String;Locale;String;ClassLoader;boolean, Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary. This method returns null if there is no resource bundle available for the given parameters. If a resource bundle can't be instantiated due to an unexpected error, the error must be reported by throwing an Error or Exception rather than simply returning null. If the reload flag is true, it indicates that this method is being called because the previously loaded resource bundle has expired. The default implementation instantiates a ResourceBundle as follows. The bundle name is obtained by calling {@link #toBundleName(String, Locale) toBundleName(baseName, locale)}. If format is java.class, the {@link Class} specified by the bundle name is loaded by calling {@link ClassLoader#loadClass(String)}. Then, a ResourceBundle is instantiated by calling {@link Class#newInstance()}. Note that the reload flag is ignored for loading class-based resource bundles in this default implementation. If format is java.properties, {@link #toResourceName(String, String) toResourceName(bundlename, properties)} is called to get the resource name. If reload is true, {@link ClassLoader#getResource(String) load.getResource} is called to get a {@link URL} for creating a {@link URLConnection}. This URLConnection is used to {@linkplain URLConnection#setUseCaches(boolean) disable the caches} of the underlying resource loading layers, and to {@linkplain URLConnection#getInputStream() get an InputStream}. Otherwise, {@link ClassLoader#getResourceAsStream(String) loader.getResourceAsStream} is called to get an {@link InputStream}. Then, a {@link PropertyResourceBundle} is constructed with the InputStream. If format is neither java.class nor java.properties, an IllegalArgumentException is thrown. @param baseName the base bundle name of the resource bundle, a fully qualified class name @param locale the locale for which the resource bundle should be instantiated @param format the resource bundle format to be loaded @param loader the ClassLoader to use to load the bundle @param reload the flag to indicate bundle reloading; true if reloading an expired resource bundle, false otherwise @return the resource bundle instance, or null if none could be found. @exception NullPointerException if bundleName, locale, format, or loader is null, or if null is returned by {@link #toBundleName(String, Locale) toBundleName} @exception IllegalArgumentException if format is unknown, or if the resource found for the given parameters contains malformed data. @exception ClassCastException if the loaded class cannot be cast to ResourceBundle @exception IllegalAccessException if the class or its nullary constructor is not accessible. @exception InstantiationException if the instantiation of a class fails for some other reason. @exception ExceptionInInitializerError if the initialization provoked by this method fails. @exception SecurityException If a security manager is present and creation of new instances is denied. See {@link Class#newInstance()} for details. @exception IOException if an error occurred when reading resources using any I/O operations
method,java/util/ResourceBundle/Control/needsReload/String;Locale;String;ClassLoader;ResourceBundle;long, Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria. The method returns true if reloading is required; false otherwise. loadTime is a millisecond offset since the Calendar Epoch. The calling ResourceBundle.getBundle factory method calls this method on the ResourceBundle.Control instance used for its current invocation, not on the instance used in the invocation that originally loaded the resource bundle. The default implementation compares loadTime and the last modified time of the source data of the resource bundle. If it's determined that the source data has been modified since loadTime, true is returned. Otherwise, false is returned. This implementation assumes that the given format is the same string as its file suffix if it's not one of the default formats, java.class or java.properties. @param baseName the base bundle name of the resource bundle, a fully qualified class name @param locale the locale for which the resource bundle should be instantiated @param format the resource bundle format to be loaded @param loader the ClassLoader to use to load the bundle @param bundle the resource bundle instance that has been expired in the cache @param loadTime the time when bundle was loaded and put in the cache @return true if the expired bundle needs to be reloaded; false otherwise. @exception NullPointerException if baseName, locale, format, loader, or bundle is null
method,java/util/ResourceBundle/Control/toBundleName/String;Locale, Converts the given baseName and locale to the bundle name. This method is called from the default implementation of the {@link #newBundle(String, Locale, String, ClassLoader, boolean) newBundle} and {@link #needsReload(String, Locale, String, ClassLoader, ResourceBundle, long) needsReload} methods. This implementation returns the following value: baseName + _ + language + _ + country + _ + variant where language, country and variant are the language, country and variant values of locale, respectively. Final component values that are empty Strings are omitted along with the preceding '_'. If all of the values are empty strings, then baseName is returned. For example, if baseName is baseName and locale is Locale(ja,&nbsp;,&nbsp;XX), then baseName_ja_&thinsp;_XX is returned. If the given locale is Locale(en), then baseName_en is returned. Overriding this method allows applications to use different conventions in the organization and packaging of localized resources. @param baseName the base name of the resource bundle, a fully qualified class name @param locale the locale for which a resource bundle should be loaded @return the bundle name for the resource bundle @exception NullPointerException if baseName or locale is null
method,java/util/ResourceBundle/Control/toResourceName/String;String, Converts the given bundleName to the form required by the {@link ClassLoader#getResource ClassLoader.getResource} method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix. For example, if bundleName is foo.bar.MyResources_ja_JP and suffix is properties, then foo/bar/MyResources_ja_JP.properties is returned. @param bundleName the bundle name @param suffix the file type suffix @return the converted resource name @exception NullPointerException if bundleName or suffix is null
method,java/util/ResourceBundle/Control/ResourceBundle/Control/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
field,java/util/ResourceBundle/Control/FORMAT_CLASS, The class-only format List containing java.class. This List is {@linkplain Collections#unmodifiableList(List) unmodifiable}. @see #getFormats(String)
field,java/util/ResourceBundle/Control/FORMAT_PROPERTIES, The properties-only format List containing java.properties. This List is {@linkplain Collections#unmodifiableList(List) unmodifiable}. @see #getFormats(String)
class,java/util/Random, An instance of this class is used to generate a stream of pseudorandom numbers. The class uses a 48-bit seed, which is modified using a linear congruential formula. (See Donald Knuth, The Art of Computer Programming, Volume 3, Section 3.2.1.) If two instances of {@code Random} are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers. In order to guarantee this property, particular algorithms are specified for the class {@code Random}. Java implementations must use all the algorithms shown here for the class {@code Random}, for the sake of absolute portability of Java code. However, subclasses of class {@code Random} are permitted to use other algorithms, so long as they adhere to the general contracts for all the methods. The algorithms implemented by class {@code Random} use a {@code protected} utility method that on each invocation can supply up to 32 pseudorandomly generated bits. Many applications will find the method {@link Math#random} simpler to use. @author Frank Yellin @version 1.48, 03/23/10 @since 1.0
method,java/util/Random/setSeed/long, Sets the seed of this random number generator using a single {@code long} seed. The general contract of {@code setSeed} is that it alters the state of this random number generator object so as to be in exactly the same state as if it had just been created with the argument {@code seed} as a seed. The method {@code setSeed} is implemented by class {@code Random} by atomically updating the seed to {@code (seed ^ 0x5DEECE66DL) & ((1L and clearing the {@code haveNextNextGaussian} flag used by {@link #nextGaussian}. The implementation of {@code setSeed} by class {@code Random} happens to use only 48 bits of the given seed. In general, however, an overriding method may use all 64 bits of the {@code long} argument as a seed value. @param seed the initial seed
method,java/util/Random/nextInt/int, Returns a pseudorandom, uniformly distributed {@code int} value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence. The general contract of {@code nextInt} is that one {@code int} value in the specified range is pseudorandomly generated and returned. All {@code n} possible {@code int} values are produced with (approximately) equal probability. The method {@code nextInt(int n)} is implemented by class {@code Random} as if by: {@code public int nextInt(int n) { if (n > 31); int bits, val; do { bits = next(31); val = bits % n; } while (bits - val + (n-1) The hedge approximately is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose {@code int} values from the stated range with perfect uniformity. The algorithm is slightly tricky. It rejects values that would result in an uneven distribution (due to the fact that 2^31 is not divisible by n). The probability of a value being rejected depends on n. The worst case is n=2^30+1, for which the probability of a reject is 1/2, and the expected number of iterations before the loop terminates is 2. The algorithm treats the case where n is a power of two specially: it returns the correct number of high-order bits from the underlying pseudo-random number generator. In the absence of special treatment, the correct number of low-order bits would be returned. Linear congruential pseudo-random number generators such as the one implemented by this class are known to have short periods in the sequence of values of their low-order bits. Thus, this special case greatly increases the length of the sequence of values returned by successive calls to this method if n is a small power of two. @param n the bound on the random number to be returned. Must be	 positive. @return the next pseudorandom, uniformly distributed {@code int} value between {@code 0} (inclusive) and {@code n} (exclusive) from this random number generator's sequence @exception IllegalArgumentException if n is not positive @since 1.2
method,java/util/Random/nextLong/, Returns the next pseudorandom, uniformly distributed {@code long} value from this random number generator's sequence. The general contract of {@code nextLong} is that one {@code long} value is pseudorandomly generated and returned. The method {@code nextLong} is implemented by class {@code Random} as if by: {@code public long nextLong() { return ((long)next(32) Because class {@code Random} uses a seed with only 48 bits, this algorithm will not return all possible {@code long} values. @return the next pseudorandom, uniformly distributed {@code long} value from this random number generator's sequence
method,java/util/Random/nextFloat/, Returns the next pseudorandom, uniformly distributed {@code float} value between {@code 0.0} and {@code 1.0} from this random number generator's sequence. The general contract of {@code nextFloat} is that one {@code float} value, chosen (approximately) uniformly from the range {@code 0.0f} (inclusive) to {@code 1.0f} (exclusive), is pseudorandomly generated and returned. All 224 possible {@code float} values of the form m&nbsp;x&nbsp2-24, where m is a positive integer less than 224 , are produced with (approximately) equal probability. The method {@code nextFloat} is implemented by class {@code Random} as if by: {@code public float nextFloat() { return next(24) / ((float)(1 The hedge approximately is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose {@code float} values from the stated range with perfect uniformity. [In early versions of Java, the result was incorrectly calculated as: {@code return next(30) / ((float)(1 This might seem to be equivalent, if not better, but in fact it introduced a slight nonuniformity because of the bias in the rounding of floating-point numbers: it was slightly more likely that the low-order bit of the significand would be 0 than that it would be 1.] @return the next pseudorandom, uniformly distributed {@code float} value between {@code 0.0} and {@code 1.0} from this random number generator's sequence
method,java/util/Random/nextDouble/, Returns the next pseudorandom, uniformly distributed {@code double} value between {@code 0.0} and {@code 1.0} from this random number generator's sequence. The general contract of {@code nextDouble} is that one {@code double} value, chosen (approximately) uniformly from the range {@code 0.0d} (inclusive) to {@code 1.0d} (exclusive), is pseudorandomly generated and returned. The method {@code nextDouble} is implemented by class {@code Random} as if by: {@code public double nextDouble() { return (((long)next(26) The hedge approximately is used in the foregoing description only because the {@code next} method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose {@code double} values from the stated range with perfect uniformity. [In early versions of Java, the result was incorrectly calculated as: {@code return (((long)next(27) This might seem to be equivalent, if not better, but in fact it introduced a large nonuniformity because of the bias in the rounding of floating-point numbers: it was three times as likely that the low-order bit of the significand would be 0 than that it would be 1! This nonuniformity probably doesn't matter much in practice, but we strive for perfection.] @return the next pseudorandom, uniformly distributed {@code double} value between {@code 0.0} and {@code 1.0} from this random number generator's sequence @see Math#random
method,java/util/Random/nextGaussian/, Returns the next pseudorandom, Gaussian (normally) distributed {@code double} value with mean {@code 0.0} and standard deviation {@code 1.0} from this random number generator's sequence. The general contract of {@code nextGaussian} is that one {@code double} value, chosen from (approximately) the usual normal distribution with mean {@code 0.0} and standard deviation {@code 1.0}, is pseudorandomly generated and returned. The method {@code nextGaussian} is implemented by class {@code Random} as if by a threadsafe version of the following: {@code private double nextNextGaussian; private boolean haveNextNextGaussian = false; public double nextGaussian() { if (haveNextNextGaussian) { haveNextNextGaussian = false; return nextNextGaussian; } else { double v1, v2, s; do { v1 = 2 * nextDouble() - 1; // between -1.0 and 1.0 v2 = 2 * nextDouble() - 1; // between -1.0 and 1.0 s = v1 * v1 + v2 * v2; } while (s >= 1 || s == 0); double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s); nextNextGaussian = v2 * multiplier; haveNextNextGaussian = true; return v1 * multiplier; } }} This uses the polar method of G. E. P. Box, M. E. Muller, and G. Marsaglia, as described by Donald E. Knuth in The Art of Computer Programming, Volume 3: Seminumerical Algorithms, section 3.4.1, subsection C, algorithm P. Note that it generates two independent values at the cost of only one call to {@code StrictMath.log} and one call to {@code StrictMath.sqrt}. @return the next pseudorandom, Gaussian (normally) distributed {@code double} value with mean {@code 0.0} and standard deviation {@code 1.0} from this random number generator's sequence
method,java/util/Random/Random/, Creates a new random number generator. This constructor sets the seed of the random number generator to a value very likely to be distinct from any other invocation of this constructor.
method,java/util/Random/Random/long, Creates a new random number generator using a single {@code long} seed. The seed is the initial value of the internal state of the pseudorandom number generator which is maintained by method {@link #next}. The invocation {@code new Random(seed)} is equivalent to: {@code Random rnd = new Random(); rnd.setSeed(seed);} @param seed the initial seed @see #setSeed(long)
method,java/util/Queue/remove/, Retrieves and removes the head of this queue. This method differs from {@link #poll poll} only in that it throws an exception if this queue is empty. @return the head of this queue @throws NoSuchElementException if this queue is empty
method,java/util/Queue/element/, Retrieves, but does not remove, the head of this queue. This method differs from {@link #peek peek} only in that it throws an exception if this queue is empty. @return the head of this queue @throws NoSuchElementException if this queue is empty
method,java/util/PropertyResourceBundle/handleKeySet/, Returns a Set of the keys contained only in this ResourceBundle. @return a Set of the keys contained only in this ResourceBundle @since 1.6 @see #keySet()
method,java/util/PropertyResourceBundle/PropertyResourceBundle/Reader, Creates a property resource bundle from a {@link java.io.Reader Reader}. Unlike the constructor {@link #PropertyResourceBundle(java.io.InputStream) PropertyResourceBundle(InputStream)}, there is no limitation as to the encoding of the input property file. @param reader a Reader that represents a property file to read from. @throws IOException if an I/O error occurs @throws NullPointerException if reader is null @since 1.6
class,java/util/PropertyPermission, This class is for property permissions. The name is the name of the property (java.home, os.name, etc). The naming convention follows the hierarchical property naming convention. Also, an asterisk may appear at the end of the name, following a ., or by itself, to signify a wildcard match. For example: java.* or * is valid, *java or a*b is not valid. The actions to be granted are passed to the constructor in a string containing a list of zero or more comma-separated keywords. The possible keywords are read and write. Their meaning is defined as follows: read read permission. Allows System.getProperty to be called. write write permission. Allows System.setProperty to be called. The actions string is converted to lowercase before processing. Care should be taken before granting code permission to access certain system properties. For example, granting permission to access the java.home system property gives potentially malevolent code sensitive information about the system environment (the Java installation directory). Also, granting permission to access the user.name and user.home system properties gives potentially malevolent code sensitive information about the user environment (the user's account name and home directory). @see java.security.BasicPermission @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @see java.lang.SecurityManager @version 1.36 10/03/23 @author Roland Schemers @since 1.2 @serial exclude
method,java/util/PropertyPermission/hashCode/, Returns the hash code value for this object. The hash code used is the hash code of this permissions name, that is, getName().hashCode(), where getName is from the Permission superclass. @return a hash code value for this object.
method,java/util/PropertyPermission/getActions/, Returns the canonical string representation of the actions. That is, this method always returns present actions in the following order: read, write. For example, if this PropertyPermission object allows both write and read actions, a call to getActions will return the string read,write. @return the canonical string representation of the actions.
method,java/util/Properties/setProperty/String;String, Calls the Hashtable method put. Provided for parallelism with the getProperty method. Enforces use of strings for property keys and values. The value returned is the result of the Hashtable call to put. @param key the key to be placed into this property list. @param value the value corresponding to key. @return the previous value of the specified key in this property list, or null if it did not have one. @see #getProperty @since 1.2
method,java/util/Properties/load/InputStream, Reads a property list (key and element pairs) from the input byte stream. The input stream is in a simple line-oriented format as specified in {@link #load(java.io.Reader) load(Reader)} and is assumed to use the ISO 8859-1 character encoding; that is each byte is one Latin1 character. Characters not in Latin1, and certain special characters, are represented in keys and elements using Unicode escapes. The specified stream remains open after this method returns. @param inStream the input stream. @exception IOException if an error occurred when reading from the input stream. @throws	 IllegalArgumentException if the input stream contains a 		 malformed Unicode escape sequence. @since 1.2
method,java/util/Properties/save/OutputStream;String, Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown. @deprecated This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the store(OutputStream out, String comments) method or the storeToXML(OutputStream os, String comment) method. @param out an output stream. @param comments a description of the property list. @exception ClassCastException if this Properties object contains any keys or values that are not Strings.
method,java/util/Properties/store/Writer;String, Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the {@link #load(java.io.Reader) load(Reader)} method. Properties from the defaults table of this Properties table (if any) are not written out by this method. If the comments argument is not null, then an ASCII # character, the comments string, and a line separator are first written to the output stream. Thus, the comments can serve as an identifying comment. Any one of a line feed (''), a carriage return ('\r'), or a carriage return followed immediately by a line feed in comments is replaced by a line separator generated by the Writer and if the next character in comments is not character # or character ! then an ASCII # is written out after that line separator. Next, a comment line is always written, consisting of an ASCII # character, the current date and time (as if produced by the toString method of Date for the current time), and a line separator as generated by the Writer. Then every entry in this Properties table is written out, one per line. For each entry the key string is written, then an ASCII =, then the associated element string. For the key, all space characters are written with a preceding \ character. For the element, leading space characters, but not embedded or trailing space characters, are written with a preceding \ character. The key and element characters #, !, =, and : are written with a preceding backslash to ensure that they are properly loaded. After the entries have been written, the output stream is flushed. The output stream remains open after this method returns. @param writer an output character stream writer. @param comments a description of the property list. @exception IOException if writing this property list to the specified output stream throws an IOException. @exception ClassCastException if this Properties object contains any keys or values that are not Strings. @exception NullPointerException if writer is null. @since 1.6
method,java/util/Properties/store/OutputStream;String, Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the {@link #load(InputStream) load(InputStream)} method. Properties from the defaults table of this Properties table (if any) are not written out by this method. This method outputs the comments, properties keys and values in the same format as specified in {@link #store(java.io.Writer, java.lang.String) store(Writer)}, with the following differences: The stream is written using the ISO 8859-1 character encoding. Characters not in Latin-1 in the comments are written as &#92;uxxxx for their appropriate unicode hexadecimal value xxxx. Characters less than &#92;u0020 and characters greater than &#92;u007E in property keys or values are written as &#92;uxxxx for the appropriate hexadecimal value xxxx. After the entries have been written, the output stream is flushed. The output stream remains open after this method returns. @param out an output stream. @param comments a description of the property list. @exception IOException if writing this property list to the specified output stream throws an IOException. @exception ClassCastException if this Properties object contains any keys or values that are not Strings. @exception NullPointerException if out is null. @since 1.2
method,java/util/Properties/list/PrintStream, Prints this property list out to the specified output stream. This method is useful for debugging. @param out an output stream. @throws ClassCastException if any key in this property list is not a string. 
method,java/util/Properties/list/PrintWriter, Prints this property list out to the specified output stream. This method is useful for debugging. @param out an output stream. @throws ClassCastException if any key in this property list is not a string. @since JDK1.1
method,java/util/PriorityQueue/remove/Object, Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element {@code e} such that {@code o.equals(e)}, if this queue contains one or more such elements. Returns {@code true} if and only if this queue contained the specified element (or equivalently, if this queue changed as a result of the call). @param o element to be removed from this queue, if present @return {@code true} if this queue changed as a result of the call
method,java/util/PriorityQueue/contains/Object, Returns {@code true} if this queue contains the specified element. More formally, returns {@code true} if and only if this queue contains at least one element {@code e} such that {@code o.equals(e)}. @param o object to be checked for containment in this queue @return {@code true} if this queue contains the specified element
method,java/util/PriorityQueue/clear/, Removes all of the elements from this priority queue. The queue will be empty after this call returns.
method,java/util/Observer/update/Observable;Object, This method is called whenever the observed object is changed. An application calls an Observable object's notifyObservers method to have all the object's observers notified of the change. @param o the observable object. @param arg an argument passed to the notifyObservers method.
method,java/util/Observable/notifyObservers/, If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed. Each observer has its update method called with two arguments: this observable object and null. In other words, this method is equivalent to: notifyObservers(null) @see java.util.Observable#clearChanged() @see java.util.Observable#hasChanged() @see java.util.Observer#update(java.util.Observable, java.lang.Object)
method,java/util/Observable/notifyObservers/Object, If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed. Each observer has its update method called with two arguments: this observable object and the arg argument. @param arg any object. @see java.util.Observable#clearChanged() @see java.util.Observable#hasChanged() @see java.util.Observer#update(java.util.Observable, java.lang.Object)
method,java/util/Observable/clearChanged/, Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false. This method is called automatically by the notifyObservers methods. @see java.util.Observable#notifyObservers() @see java.util.Observable#notifyObservers(java.lang.Object)
method,java/util/Observable/hasChanged/, Tests if this object has changed. @return true if and only if the setChanged method has been called more recently than the clearChanged method on this object; false otherwise. @see java.util.Observable#clearChanged() @see java.util.Observable#setChanged()
method,java/util/NoSuchElementException/NoSuchElementException/, Constructs a NoSuchElementException with null as its error message string.
method,java/util/NoSuchElementException/NoSuchElementException/String, Constructs a NoSuchElementException, saving a reference to the error message string s for later retrieval by the getMessage method. @param s the detail message.
interface,java/util/NavigableSet, A {@link SortedSet} extended with navigation methods reporting closest matches for given search targets. Methods {@code lower}, {@code floor}, {@code ceiling}, and {@code higher} return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning {@code null} if there is no such element. A {@code NavigableSet} may be accessed and traversed in either ascending or descending order. The {@code descendingSet} method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods {@code pollFirst} and {@code pollLast} that return and remove the lowest and highest element, if one exists, else returning {@code null}. Methods {@code subSet}, {@code headSet}, and {@code tailSet} differ from the like-named {@code SortedSet} methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any {@code NavigableSet} must implement the {@code NavigableSet} interface. The return values of navigation methods may be ambiguous in implementations that permit {@code null} elements. However, even in this case the result can be disambiguated by checking {@code contains(null)}. To avoid such issues, implementations of this interface are encouraged to not permit insertion of {@code null} elements. (Note that sorted sets of {@link Comparable} elements intrinsically do not permit {@code null}.) Methods {@link #subSet(Object, Object) subSet(E, E)}, {@link #headSet(Object) headSet(E)}, and {@link #tailSet(Object) tailSet(E)} are specified to return {@code SortedSet} to allow existing implementations of {@code SortedSet} to be compatibly retrofitted to implement {@code NavigableSet}, but extensions and implementations of this interface are encouraged to override these methods to return {@code NavigableSet}. This interface is a member of the Java Collections Framework. @author Doug Lea @author Josh Bloch @param the type of elements maintained by this set @since 1.6
method,java/util/NavigableSet/subSet/Object;boolean;Object;boolean, Returns a view of the portion of this set whose elements range from {@code fromElement} to {@code toElement}. If {@code fromElement} and {@code toElement} are equal, the returned set is empty unless {@code fromExclusive} and {@code toExclusive} are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an {@code IllegalArgumentException} on an attempt to insert an element outside its range. @param fromElement low endpoint of the returned set @param fromInclusive {@code true} if the low endpoint is to be included in the returned view @param toElement high endpoint of the returned set @param toInclusive {@code true} if the high endpoint is to be included in the returned view @return a view of the portion of this set whose elements range from {@code fromElement}, inclusive, to {@code toElement}, exclusive @throws ClassCastException if {@code fromElement} and {@code toElement} cannot be compared to one another using this set's comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if {@code fromElement} or {@code toElement} cannot be compared to elements currently in the set. @throws NullPointerException if {@code fromElement} or {@code toElement} is null and this set does not permit null elements @throws IllegalArgumentException if {@code fromElement} is greater than {@code toElement}; or if this set itself has a restricted range, and {@code fromElement} or {@code toElement} lies outside the bounds of the range.
method,java/util/NavigableSet/headSet/Object;boolean, Returns a view of the portion of this set whose elements are less than (or equal to, if {@code inclusive} is true) {@code toElement}. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an {@code IllegalArgumentException} on an attempt to insert an element outside its range. @param toElement high endpoint of the returned set @param inclusive {@code true} if the high endpoint is to be included in the returned view @return a view of the portion of this set whose elements are less than (or equal to, if {@code inclusive} is true) {@code toElement} @throws ClassCastException if {@code toElement} is not compatible with this set's comparator (or, if the set has no comparator, if {@code toElement} does not implement {@link Comparable}). Implementations may, but are not required to, throw this exception if {@code toElement} cannot be compared to elements currently in the set. @throws NullPointerException if {@code toElement} is null and this set does not permit null elements @throws IllegalArgumentException if this set itself has a restricted range, and {@code toElement} lies outside the bounds of the range
method,java/util/NavigableSet/tailSet/Object;boolean, Returns a view of the portion of this set whose elements are greater than (or equal to, if {@code inclusive} is true) {@code fromElement}. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an {@code IllegalArgumentException} on an attempt to insert an element outside its range. @param fromElement low endpoint of the returned set @param inclusive {@code true} if the low endpoint is to be included in the returned view @return a view of the portion of this set whose elements are greater than or equal to {@code fromElement} @throws ClassCastException if {@code fromElement} is not compatible with this set's comparator (or, if the set has no comparator, if {@code fromElement} does not implement {@link Comparable}). Implementations may, but are not required to, throw this exception if {@code fromElement} cannot be compared to elements currently in the set. @throws NullPointerException if {@code fromElement} is null and this set does not permit null elements @throws IllegalArgumentException if this set itself has a restricted range, and {@code fromElement} lies outside the bounds of the range
method,java/util/NavigableSet/subSet/Object;Object, {@inheritDoc} Equivalent to {@code subSet(fromElement, true, toElement, false)}. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/NavigableSet/headSet/Object, {@inheritDoc} Equivalent to {@code headSet(toElement, false)}. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}na 
method,java/util/NavigableSet/tailSet/Object, {@inheritDoc} Equivalent to {@code tailSet(fromElement, true)}. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
interface,java/util/NavigableMap, A {@link SortedMap} extended with navigation methods returning the closest matches for given search targets. Methods {@code lowerEntry}, {@code floorEntry}, {@code ceilingEntry}, and {@code higherEntry} return {@code Map.Entry} objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning {@code null} if there is no such key. Similarly, methods {@code lowerKey}, {@code floorKey}, {@code ceilingKey}, and {@code higherKey} return only the associated keys. All of these methods are designed for locating, not traversing entries. A {@code NavigableMap} may be accessed and traversed in either ascending or descending key order. The {@code descendingMap} method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods {@code subMap}, {@code headMap}, and {@code tailMap} differ from the like-named {@code SortedMap} methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any {@code NavigableMap} must implement the {@code NavigableMap} interface. This interface additionally defines methods {@code firstEntry}, {@code pollFirstEntry}, {@code lastEntry}, and {@code pollLastEntry} that return and/or remove the least and greatest mappings, if any exist, else returning {@code null}. Implementations of entry-returning methods are expected to return {@code Map.Entry} pairs representing snapshots of mappings at the time they were produced, and thus generally do not support the optional {@code Entry.setValue} method. Note however that it is possible to change mappings in the associated map using method {@code put}. Methods {@link #subMap(Object, Object) subMap(K, K)}, {@link #headMap(Object) headMap(K)}, and {@link #tailMap(Object) tailMap(K)} are specified to return {@code SortedMap} to allow existing implementations of {@code SortedMap} to be compatibly retrofitted to implement {@code NavigableMap}, but extensions and implementations of this interface are encouraged to override these methods to return {@code NavigableMap}. Similarly, {@link #keySet()} can be overriden to return {@code NavigableSet}. This interface is a member of the Java Collections Framework. @author Doug Lea @author Josh Bloch @param the type of keys maintained by this map @param the type of mapped values @since 1.6
method,java/util/NavigableMap/subMap/Object;boolean;Object;boolean, Returns a view of the portion of this map whose keys range from {@code fromKey} to {@code toKey}. If {@code fromKey} and {@code toKey} are equal, the returned map is empty unless {@code fromExclusive} and {@code toExclusive} are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range. @param fromKey low endpoint of the keys in the returned map @param fromInclusive {@code true} if the low endpoint is to be included in the returned view @param toKey high endpoint of the keys in the returned map @param toInclusive {@code true} if the high endpoint is to be included in the returned view @return a view of the portion of this map whose keys range from {@code fromKey} to {@code toKey} @throws ClassCastException if {@code fromKey} and {@code toKey} cannot be compared to one another using this map's comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if {@code fromKey} or {@code toKey} cannot be compared to keys currently in the map. @throws NullPointerException if {@code fromKey} or {@code toKey} is null and this map does not permit null keys @throws IllegalArgumentException if {@code fromKey} is greater than {@code toKey}; or if this map itself has a restricted range, and {@code fromKey} or {@code toKey} lies outside the bounds of the range
method,java/util/NavigableMap/headMap/Object;boolean, Returns a view of the portion of this map whose keys are less than (or equal to, if {@code inclusive} is true) {@code toKey}. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key outside its range. @param toKey high endpoint of the keys in the returned map @param inclusive {@code true} if the high endpoint is to be included in the returned view @return a view of the portion of this map whose keys are less than (or equal to, if {@code inclusive} is true) {@code toKey} @throws ClassCastException if {@code toKey} is not compatible with this map's comparator (or, if the map has no comparator, if {@code toKey} does not implement {@link Comparable}). Implementations may, but are not required to, throw this exception if {@code toKey} cannot be compared to keys currently in the map. @throws NullPointerException if {@code toKey} is null and this map does not permit null keys @throws IllegalArgumentException if this map itself has a restricted range, and {@code toKey} lies outside the bounds of the range
method,java/util/NavigableMap/tailMap/Object;boolean, Returns a view of the portion of this map whose keys are greater than (or equal to, if {@code inclusive} is true) {@code fromKey}. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key outside its range. @param fromKey low endpoint of the keys in the returned map @param inclusive {@code true} if the low endpoint is to be included in the returned view @return a view of the portion of this map whose keys are greater than (or equal to, if {@code inclusive} is true) {@code fromKey} @throws ClassCastException if {@code fromKey} is not compatible with this map's comparator (or, if the map has no comparator, if {@code fromKey} does not implement {@link Comparable}). Implementations may, but are not required to, throw this exception if {@code fromKey} cannot be compared to keys currently in the map. @throws NullPointerException if {@code fromKey} is null and this map does not permit null keys @throws IllegalArgumentException if this map itself has a restricted range, and {@code fromKey} lies outside the bounds of the range
method,java/util/NavigableMap/subMap/Object;Object, {@inheritDoc} Equivalent to {@code subMap(fromKey, true, toKey, false)}. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/NavigableMap/headMap/Object, {@inheritDoc} Equivalent to {@code headMap(toKey, false)}. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/NavigableMap/tailMap/Object, {@inheritDoc} Equivalent to {@code tailMap(fromKey, true)}. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
class,java/util/MissingFormatWidthException, Unchecked exception thrown when the format width is required. Unless otherwise specified, passing a null argument to anyg method or constructor in this class will cause a {@link NullPointerException} to be thrown. @version 	1.4, 03/23/10 @since 1.5
method,java/util/Map/containsKey/Object, Returns true if this map contains a mapping for the specified key. More formally, returns true if and only if this map contains a mapping for a key k such that (key==null ? k==null : key.equals(k)). (There can be at most one such mapping.) @param key key whose presence in this map is to be tested @return true if this map contains a mapping for the specified key @throws ClassCastException if the key is of an inappropriate type for this map (optional) @throws NullPointerException if the specified key is null and this map does not permit null keys (optional)
method,java/util/Map/get/Object, Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key==null ? k==null : key.equals(k))}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.) If this map permits null values, then a return value of {@code null} does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to {@code null}. The {@link #containsKey containsKey} operation may be used to distinguish these two cases. @param key the key whose associated value is to be returned @return the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key @throws ClassCastException if the key is of an inappropriate type for this map (optional) @throws NullPointerException if the specified key is null and this map does not permit null keys (optional)
method,java/util/Map/put/Object;Object, Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map m is said to contain a mapping for a key k if and only if {@link #containsKey(Object) m.containsKey(k)} would return true.) @param key key with which the specified value is to be associated @param value value to be associated with the specified key @return the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key, if the implementation supports null values.) @throws UnsupportedOperationException if the put operation is not supported by this map @throws ClassCastException if the class of the specified key or value prevents it from being stored in this map @throws NullPointerException if the specified key or value is null and this map does not permit null keys or values @throws IllegalArgumentException if some property of the specified key or value prevents it from being stored in this map
method,java/util/Map/remove/Object, Removes the mapping for a key from this map if it is present (optional operation). More formally, if this map contains a mapping from key k to value v such that (key==null ? k==null : key.equals(k)), that mapping is removed. (The map can contain at most one such mapping.) Returns the value to which this map previously associated the key, or null if the map contained no mapping for the key. If this map permits null values, then a return value of null does not necessarily indicate that the map contained no mapping for the key; it's also possible that the map explicitly mapped the key to null. The map will not contain a mapping for the specified key once the call returns. @param key key whose mapping is to be removed from the map @return the previous value associated with key, or null if there was no mapping for key. @throws UnsupportedOperationException if the remove operation is not supported by this map @throws ClassCastException if the key is of an inappropriate type for this map (optional) @throws NullPointerException if the specified key is null and this map does not permit null keys (optional)
method,java/util/Map/putAll/Map, Copies all of the mappings from the specified map to this map (optional operation). The effect of this call is equivalent to that of calling {@link #put(Object,Object) put(k, v)} on this map once for each mapping from key k to value v in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress. @param m mappings to be stored in this map @throws UnsupportedOperationException if the putAll operation is not supported by this map @throws ClassCastException if the class of a key or value in the specified map prevents it from being stored in this map @throws NullPointerException if the specified map is null, or if this map does not permit null keys or values, and the specified map contains null keys or values @throws IllegalArgumentException if some property of a key or value in the specified map prevents it from being stored in this map
method,java/util/Map/hashCode/, Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map's entrySet() view. This ensures that m1.equals(m2) implies that m1.hashCode()==m2.hashCode() for any two maps m1 and m2, as required by the general contract of {@link Object#hashCode}. @return the hash code value for this map @see Map.Entry#hashCode() @see Object#equals(Object) @see #equals(Object)
method,java/util/Map/Entry/getKey/, Returns the key corresponding to this entry. @return the key corresponding to this entry @throws IllegalStateException implementations may, but are not required to, throw this exception if the entry has been removed from the backing map.
method,java/util/Map/Entry/getValue/, Returns the value corresponding to this entry. If the mapping has been removed from the backing map (by the iterator's remove operation), the results of this call are undefined. @return the value corresponding to this entry @throws IllegalStateException implementations may, but are not required to, throw this exception if the entry has been removed from the backing map.
method,java/util/Map/Entry/setValue/Object, Replaces the value corresponding to this entry with the specified value (optional operation). (Writes through to the map.) The behavior of this call is undefined if the mapping has already been removed from the map (by the iterator's remove operation). @param value new value to be stored in this entry @return old value corresponding to the entry @throws UnsupportedOperationException if the put operation is not supported by the backing map @throws ClassCastException if the class of the specified value prevents it from being stored in the backing map @throws NullPointerException if the backing map does not permit null values, and the specified value is null @throws IllegalArgumentException if some property of this value prevents it from being stored in the backing map @throws IllegalStateException implementations may, but are not required to, throw this exception if the entry has been removed from the backing map.
method,java/util/Map/Entry/hashCode/, Returns the hash code value for this map entry. The hash code of a map entry e is defined to be: (e.getKey()==null ? 0 : e.getKey().hashCode()) ^ (e.getValue()==null ? 0 : e.getValue().hashCode()) This ensures that e1.equals(e2) implies that e1.hashCode()==e2.hashCode() for any two Entries e1 and e2, as required by the general contract of Object.hashCode. @return the hash code value for this map entry @see Object#hashCode() @see Object#equals(Object) @see #equals(Object)
method,java/util/Locale/getISOLanguages/, Returns a list of all 2-letter language codes defined in ISO 639. Can be used to create Locales. [NOTE: ISO 639 is not a stable standard-- some languages' codes have changed. The list this function returns includes both the new and the old codes for the languages whose codes have changed.]
method,java/util/Locale/getLanguage/, Returns the language code for this locale, which will either be the empty string or a lowercase ISO 639 code. NOTE: ISO 639 is not a stable standard-- some languages' codes have changed. Locale's constructor recognizes both the new and the old codes for the languages whose codes have changed, but this function always returns the old code. If you want to check for a specific language whose code has changed, don't do if (locale.getLanguage().equals(he)) ... Instead, do if (locale.getLanguage().equals(new Locale(he, , ).getLanguage())) ... @see #getDisplayLanguage
method,java/util/Locale/clone/, Overrides Cloneable
method,java/util/Locale/hashCode/, Override hashCode. Since Locales are often used in hashtables, caches the value for speed.
method,java/util/Locale/Locale/String;String;String, Construct a locale from language, country, variant. NOTE: ISO 639 is not a stable standard; some of the language codes it defines (specifically iw, ji, and in) have changed. This constructor accepts both the old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other API on Locale will return only the OLD codes. @param language lowercase two-letter ISO-639 code. @param country uppercase two-letter ISO-3166 code. @param variant vendor and browser specific code. See class description. @exception NullPointerException thrown if any argument is null.
method,java/util/Locale/Locale/String;String, Construct a locale from language, country. NOTE: ISO 639 is not a stable standard; some of the language codes it defines (specifically iw, ji, and in) have changed. This constructor accepts both the old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other API on Locale will return only the OLD codes. @param language lowercase two-letter ISO-639 code. @param country uppercase two-letter ISO-3166 code. @exception NullPointerException thrown if either argument is null.
method,java/util/Locale/Locale/String, Construct a locale from a language code. NOTE: ISO 639 is not a stable standard; some of the language codes it defines (specifically iw, ji, and in) have changed. This constructor accepts both the old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other API on Locale will return only the OLD codes. @param language lowercase two-letter ISO-639 code. @exception NullPointerException thrown if argument is null. @since 1.4
method,java/util/ListResourceBundle/handleKeySet/, Returns a Set of the keys contained only in this ResourceBundle. @return a Set of the keys contained only in this ResourceBundle @since 1.6 @see #keySet()
method,java/util/ListResourceBundle/ListResourceBundle/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
interface,java/util/ListIterator, An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list. A ListIterator has no current element; its cursor position always lies between the element that would be returned by a call to previous() and the element that would be returned by a call to next(). An iterator for a list of length n has n+1 possible cursor positions, as illustrated by the carets (^) below: Element(0) Element(1) Element(2) ... Element(n-1) cursor positions: ^ ^ ^ ^ ^ Note that the {@link #remove} and {@link #set(Object)} methods are not defined in terms of the cursor position; they are defined to operate on the last element returned by a call to {@link #next} or {@link #previous()}. This interface is a member of the Java Collections Framework. @author Josh Bloch @version 1.29, 03/23/10 @see Collection @see List @see Iterator @see Enumeration @see List#listIterator() @since 1.2
method,java/util/ListIterator/next/, Returns the next element in the list. This method may be called repeatedly to iterate through the list, or intermixed with calls to previous to go back and forth. (Note that alternating calls to next and previous will return the same element repeatedly.) @return the next element in the list. @exception NoSuchElementException if the iteration has no next element.
method,java/util/ListIterator/nextIndex/, Returns the index of the element that would be returned by a subsequent call to next. (Returns list size if the list iterator is at the end of the list.) @return the index of the element that would be returned by a subsequent 	 call to next, or list size if list iterator is at end	 of list.
method,java/util/ListIterator/remove/, Removes from the list the last element that was returned by next or previous (optional operation). This call can only be made once per call to next or previous. It can be made only if ListIterator.add has not been called after the last call to next or previous. @exception UnsupportedOperationException if the remove operation is not supported by this list iterator. @exception IllegalStateException neither next nor previous have been called, or remove or add have been called after the last call to next or previous.
method,java/util/ListIterator/set/Object, Replaces the last element returned by next or previous with the specified element (optional operation). This call can be made only if neither ListIterator.remove nor ListIterator.add have been called after the last call to next or previous. @param e the element with which to replace the last element returned by next or previous. @exception UnsupportedOperationException if the set operation 		 is not supported by this list iterator. @exception ClassCastException if the class of the specified element 		 prevents it from being added to this list. @exception IllegalArgumentException if some aspect of the specified		 element prevents it from being added to this list. @exception IllegalStateException if neither next nor	 previous have been called, or remove or		 add have been called after the last call to 		 next or previous.
method,java/util/ListIterator/add/Object, Inserts the specified element into the list (optional operation). The element is inserted immediately before the next element that would be returned by next, if any, and after the next element that would be returned by previous, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to next would be unaffected, and a subsequent call to previous would return the new element. (This call increases by one the value that would be returned by a call to nextIndex or previousIndex.) @param e the element to insert. @exception UnsupportedOperationException if the add method is 		 not supported by this list iterator. @exception ClassCastException if the class of the specified element 		 prevents it from being added to this list. @exception IllegalArgumentException if some aspect of this element prevents it from being added to this list.
method,java/util/List/addAll/Collection, Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.) @param c collection containing elements to be added to this list @return true if this list changed as a result of the call @throws UnsupportedOperationException if the addAll operation is not supported by this list @throws ClassCastException if the class of an element of the specified collection prevents it from being added to this list @throws NullPointerException if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null @throws IllegalArgumentException if some property of an element of the specified collection prevents it from being added to this list @see #add(Object)
method,java/util/List/addAll/int;Collection, Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.) @param index index at which to insert the first element from the specified collection @param c collection containing elements to be added to this list @return true if this list changed as a result of the call @throws UnsupportedOperationException if the addAll operation is not supported by this list @throws ClassCastException if the class of an element of the specified collection prevents it from being added to this list @throws NullPointerException if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null @throws IllegalArgumentException if some property of an element of the specified collection prevents it from being added to this list @throws IndexOutOfBoundsException if the index is out of range (index &lt; 0 || index &gt; size())
method,java/util/List/removeAll/Collection, Removes from this list all of its elements that are contained in the specified collection (optional operation). @param c collection containing elements to be removed from this list @return true if this list changed as a result of the call @throws UnsupportedOperationException if the removeAll operation is not supported by this list @throws ClassCastException if the class of an element of this list is incompatible with the specified collection (optional) @throws NullPointerException if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object) @see #contains(Object)
method,java/util/List/retainAll/Collection, Retains only the elements in this list that are contained in the specified collection (optional operation). In other words, removes from this list all the elements that are not contained in the specified collection. @param c collection containing elements to be retained in this list @return true if this list changed as a result of the call @throws UnsupportedOperationException if the retainAll operation is not supported by this list @throws ClassCastException if the class of an element of this list is incompatible with the specified collection (optional) @throws NullPointerException if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object) @see #contains(Object)
method,java/util/List/equals/Object, Compares the specified object with this list for equality. Returns true if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are equal. (Two elements e1 and e2 are equal if (e1==null ? e2==null : e1.equals(e2)).) In other words, two lists are defined to be equal if they contain the same elements in the same order. This definition ensures that the equals method works properly across different implementations of the List interface. @param o the object to be compared for equality with this list @return true if the specified object is equal to this list
method,java/util/List/hashCode/, Returns the hash code value for this list. The hash code of a list is defined to be the result of the following calculation: int hashCode = 1; Iterator&lt;E&gt; i = list.iterator(); while (i.hasNext()) { E obj = i.next(); hashCode = 31*hashCode + (obj==null ? 0 : obj.hashCode()); } This ensures that list1.equals(list2) implies that list1.hashCode()==list2.hashCode() for any two lists, list1 and list2, as required by the general contract of {@link Object#hashCode}. @return the hash code value for this list @see Object#equals(Object) @see #equals(Object)
method,java/util/List/listIterator/int, Returns a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list. The specified index indicates the first element that would be returned by an initial call to {@link ListIterator#next next}. An initial call to {@link ListIterator#previous previous} would return the element with the specified index minus one. @param index index of first element to be returned from the list iterator (by a call to the next method) @return a list iterator of the elements in this list (in proper sequence), starting at the specified position in this list @throws IndexOutOfBoundsException if the index is out of range (index &lt; 0 || index &gt; size())
method,java/util/List/subList/int;int, Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: list.subList(from, to).clear(); Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class can be applied to a subList. The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is structurally modified in any way other than via the returned list. (Structural modifications are those that change the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.) @param fromIndex low endpoint (inclusive) of the subList @param toIndex high endpoint (exclusive) of the subList @return a view of the specified range within this list @throws IndexOutOfBoundsException for an illegal endpoint index value (fromIndex &lt; 0 || toIndex &gt; size || fromIndex &gt; toIndex)
method,java/util/LinkedList/contains/Object, Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)). @param o element whose presence in this list is to be tested @return true if this list contains the specified element
method,java/util/LinkedList/remove/Object, Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call). @param o element to be removed from this list, if present @return true if this list contained the specified element
method,java/util/LinkedList/addAll/Collection, Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.) @param c collection containing elements to be added to this list @return true if this list changed as a result of the call @throws NullPointerException if the specified collection is null
method,java/util/LinkedList/addAll/int;Collection, Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator. @param index index at which to insert the first element from the specified collection @param c collection containing elements to be added to this list @return true if this list changed as a result of the call @throws IndexOutOfBoundsException {@inheritDoc} @throws NullPointerException if the specified collection is null
method,java/util/LinkedList/get/int, Returns the element at the specified position in this list. @param index index of the element to return @return the element at the specified position in this list @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/LinkedList/set/int;Object, Replaces the element at the specified position in this list with the specified element. @param index index of the element to replace @param element element to be stored at the specified position @return the element previously at the specified position @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/LinkedList/add/int;Object, Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). @param index index at which the specified element is to be inserted @param element element to be inserted @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/LinkedList/remove/int, Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list. @param index the index of the element to be removed @return the element previously at the specified position @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/LinkedList/listIterator/int, Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list. Obeys the general contract of List.listIterator(int). The list-iterator is fail-fast: if the list is structurally modified at any time after the Iterator is created, in any way except through the list-iterator's own remove or add methods, the list-iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. @param index index of the first element to be returned from the list-iterator (by a call to next) @return a ListIterator of the elements in this list (in proper sequence), starting at the specified position in the list @throws IndexOutOfBoundsException {@inheritDoc} @see List#listIterator(int)
method,java/util/LinkedHashMap/get/Object, Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key==null ? k==null : key.equals(k))}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.) A return value of {@code null} does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to {@code null}. The {@link #containsKey containsKey} operation may be used to distinguish these two cases.
method,java/util/LinkedHashMap/clear/, Removes all of the mappings from this map. The map will be empty after this call returns.
interface,java/util/Iterator, An iterator over a collection. Iterator takes the place of Enumeration in the Java collections framework. Iterators differ from enumerations in two ways: 	 Iterators allow the caller to remove elements from the	 underlying collection during the iteration with well-defined 	 semantics.	 Method names have been improved. This interface is a member of the Java Collections Framework. @author Josh Bloch @version 1.28, 03/23/10 @see Collection @see ListIterator @see Enumeration @since 1.2
method,java/util/Iterator/remove/, Removes from the underlying collection the last element returned by the iterator (optional operation). This method can be called only once per call to next. The behavior of an iterator is unspecified if the underlying collection is modified while the iteration is in progress in any way other than by calling this method. @exception UnsupportedOperationException if the remove		 operation is not supported by this Iterator. @exception IllegalStateException if the next method has not		 yet been called, or the remove method has already		 been called after the last call to the next		 method.
class,java/util/InvalidPropertiesFormatException, Thrown to indicate that an operation could not complete because the input did not conform to the appropriate XML document type for a collection of properties, as per the {@link Properties} specification. Note, that although InvalidPropertiesFormatException inherits Serializable interface from Exception, it is not intended to be Serializable. Appropriate serialization methods are implemented to throw NotSerializableException. @version 1.5 10/03/23 @see Properties @since 1.5 @serial exclude
method,java/util/InputMismatchException/InputMismatchException/, Constructs an InputMismatchException with null as its error message string.
method,java/util/InputMismatchException/InputMismatchException/String, Constructs an InputMismatchException, saving a reference to the error message string s for later retrieval by the getMessage method. @param s the detail message.
method,java/util/IdentityHashMap/get/Object, Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key == k)}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.) A return value of {@code null} does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to {@code null}. The {@link #containsKey containsKey} operation may be used to distinguish these two cases. @see #put(Object, Object)
method,java/util/IdentityHashMap/clear/, Removes all of the mappings from this map. The map will be empty after this call returns.
method,java/util/IdentityHashMap/equals/Object, Compares the specified object with this map for equality. Returns true if the given object is also a map and the two maps represent identical object-reference mappings. More formally, this map is equal to another map m if and only if this.entrySet().equals(m.entrySet()). Owing to the reference-equality-based semantics of this map it is possible that the symmetry and transitivity requirements of the Object.equals contract may be violated if this map is compared to a normal map. However, the Object.equals contract is guaranteed to hold among IdentityHashMap instances. @param o object to be compared for equality with this map @return true if the specified object is equal to this map @see Object#equals(Object)
method,java/util/IdentityHashMap/hashCode/, Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map's entrySet() view. This ensures that m1.equals(m2) implies that m1.hashCode()==m2.hashCode() for any two IdentityHashMap instances m1 and m2, as required by the general contract of {@link Object#hashCode}. Owing to the reference-equality-based semantics of the Map.Entry instances in the set returned by this map's entrySet method, it is possible that the contractual requirement of Object.hashCode mentioned in the previous paragraph will be violated if one of the two objects being compared is an IdentityHashMap instance and the other is a normal map. @return the hash code value for this map @see Object#equals(Object) @see #equals(Object)
method,java/util/IdentityHashMap/entrySet/, Returns a {@link Set} view of the mappings contained in this map. Each element in the returned set is a reference-equality-based Map.Entry. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress, the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear methods. It does not support the add or addAll methods. Like the backing map, the Map.Entry objects in the set returned by this method define key and value equality as reference-equality rather than object-equality. This affects the behavior of the equals and hashCode methods of these Map.Entry objects. A reference-equality based Map.Entry e is equal to an object o if and only if o is a Map.Entry and e.getKey()==o.getKey() &amp;&amp; e.getValue()==o.getValue(). To accommodate these equals semantics, the hashCode method returns System.identityHashCode(e.getKey()) ^ System.identityHashCode(e.getValue()). Owing to the reference-equality-based semantics of the Map.Entry instances in the set returned by this method, it is possible that the symmetry and transitivity requirements of the {@link Object#equals(Object)} contract may be violated if any of the entries in the set is compared to a normal map entry, or if the set returned by this method is compared to a set of normal map entries (such as would be returned by a call to this method on a normal map). However, the Object.equals contract is guaranteed to hold among identity-based map entries, and among sets of such entries. @return a set view of the identity-mappings contained in this map
method,java/util/IdentityHashMap/IdentityHashMap/int, Constructs a new, empty map with the specified expected maximum size. Putting more than the expected number of key-value mappings into the map may cause the internal data structure to grow, which may be somewhat time-consuming. @param expectedMaxSize the expected maximum size of the map @throws IllegalArgumentException if expectedMaxSize is negative
method,java/util/Hashtable/contains/Object, Tests if some key maps into the specified value in this hashtable. This operation is more expensive than the {@link #containsKey containsKey} method. Note that this method is identical in functionality to {@link #containsValue containsValue}, (which is part of the {@link Map} interface in the collections framework). @param value a value to search for @return true if and only if some key maps to the value argument in this hashtable as determined by the equals method; false otherwise. @exception NullPointerException if the value is null
method,java/util/Hashtable/containsValue/Object, Returns true if this hashtable maps one or more keys to this value. Note that this method is identical in functionality to {@link #contains contains} (which predates the {@link Map} interface). @param value value whose presence in this hashtable is to be tested @return true if this map maps one or more keys to the specified value @throws NullPointerException if the value is null @since 1.2
method,java/util/Hashtable/rehash/, Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently. This method is called automatically when the number of keys in the hashtable exceeds this hashtable's capacity and load factor.
method,java/util/Hashtable/put/Object;Object, Maps the specified key to the specified value in this hashtable. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key. @param key the hashtable key @param value the value @return the previous value of the specified key in this hashtable, or null if it did not have one @exception NullPointerException if the key or value is null @see Object#equals(Object) @see #get(Object)
method,java/util/HashSet/iterator/, Returns an iterator over the elements in this set. The elements are returned in no particular order. @return an Iterator over the elements in this set @see ConcurrentModificationException
method,java/util/HashSet/contains/Object, Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)). @param o element whose presence in this set is to be tested @return true if this set contains the specified element
method,java/util/HashSet/add/Object, Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if this set contains no element e2 such that (e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2)). If this set already contains the element, the call leaves the set unchanged and returns false. @param e element to be added to this set @return true if this set did not already contain the specified element
method,java/util/HashSet/clear/, Removes all of the elements from this set. The set will be empty after this call returns.
method,java/util/HashMap/get/Object, Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key==null ? k==null : key.equals(k))}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.) A return value of {@code null} does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to {@code null}. The {@link #containsKey containsKey} operation may be used to distinguish these two cases. @see #put(Object, Object)
method,java/util/HashMap/clear/, Removes all of the mappings from this map. The map will be empty after this call returns.
class,java/util/GregorianCalendar, GregorianCalendar is a concrete subclass of Calendar and provides the standard calendar system used by most of the world. GregorianCalendar is a hybrid calendar that supports both the Julian and Gregorian calendar systems with the support of a single discontinuity, which corresponds by default to the Gregorian date when the Gregorian calendar was instituted (October 15, 1582 in some countries, later in others). The cutover date may be changed by the caller by calling {@link #setGregorianChange(Date) setGregorianChange()}. Historically, in those countries which adopted the Gregorian calendar first, October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models this correctly. Before the Gregorian cutover, GregorianCalendar implements the Julian calendar. The only difference between the Gregorian and the Julian calendar is the leap year rule. The Julian calendar specifies leap years every four years, whereas the Gregorian calendar omits century years which are not divisible by 400. GregorianCalendar implements proleptic Gregorian and Julian calendars. That is, dates are computed by extrapolating the current rules indefinitely far backward and forward in time. As a result, GregorianCalendar may be used for all years to generate meaningful and consistent results. However, dates obtained using GregorianCalendar are historically accurate only from March 1, 4 AD onward, when modern Julian calendar rules were adopted. Before this date, leap year rules were applied irregularly, and before 45 BC the Julian calendar did not even exist. Prior to the institution of the Gregorian calendar, New Year's Day was March 25. To avoid confusion, this calendar always uses January 1. A manual adjustment may be made if desired for dates that are prior to the Gregorian changeover and which fall between January 1 and March 24. Values calculated for the WEEK_OF_YEAR field range from 1 to 53. Week 1 for a year is the earliest seven day period starting on getFirstDayOfWeek() that contains at least getMinimalDaysInFirstWeek() days from that year. It thus depends on the values of getMinimalDaysInFirstWeek(), getFirstDayOfWeek(), and the day of the week of January 1. Weeks between week 1 of one year and week 1 of the following year are numbered sequentially from 2 to 52 or 53 (as needed). For example, January 1, 1998 was a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (these are the values reflecting ISO 8601 and many national standards), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three days of 1998 then are part of week 53 of 1997. Values calculated for the WEEK_OF_MONTH field range from 0 to 6. Week 1 of a month (the days with WEEK_OF_MONTH = 1) is the earliest set of at least getMinimalDaysInFirstWeek() contiguous days in that month, ending on the day before getFirstDayOfWeek(). Unlike week 1 of a year, week 1 of a month may be shorter than 7 days, need not start on getFirstDayOfWeek(), and will not include days of the previous month. Days of a month before week 1 have a WEEK_OF_MONTH of 0. For example, if getFirstDayOfWeek() is SUNDAY and getMinimalDaysInFirstWeek() is 4, then the first week of January 1998 is Sunday, January 4 through Saturday, January 10. These days have a WEEK_OF_MONTH of 1. Thursday, January 1 through Saturday, January 3 have a WEEK_OF_MONTH of 0. If getMinimalDaysInFirstWeek() is changed to 3, then January 1 through January 3 have a WEEK_OF_MONTH of 1. The clear methods set calendar field(s) undefined. GregorianCalendar uses the following default value for each calendar field if its value is undefined. Field Default Value 		ERA	 		AD	 		YEAR	 		1970	 		MONTH	 		JANUARY	 		DAY_OF_MONTH	 		1	 		DAY_OF_WEEK	 		the first day of week	 		WEEK_OF_MONTH 		0 		DAY_OF_WEEK_IN_MONTH 		1 		AM_PM 		AM 		HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND 		0 Default values are not applicable for the fields not listed above. Example: // get the supported ids for GMT-08:00 (Pacific Standard Time) String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000); // if no ids were returned, something is wrong. get out. if (ids.length == 0) System.exit(0); // begin output System.out.println(Current Time); // create a Pacific Standard Time time zone SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]); // set up rules for daylight savings time pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000); pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000); // create a GregorianCalendar with the Pacific Daylight time zone // and the current date and time Calendar calendar = new GregorianCalendar(pdt); Date trialTime = new Date(); calendar.setTime(trialTime); // print out a bunch of interesting things System.out.println(ERA: + calendar.get(Calendar.ERA)); System.out.println(YEAR: + calendar.get(Calendar.YEAR)); System.out.println(MONTH: + calendar.get(Calendar.MONTH)); System.out.println(WEEK_OF_YEAR: + calendar.get(Calendar.WEEK_OF_YEAR)); System.out.println(WEEK_OF_MONTH: + calendar.get(Calendar.WEEK_OF_MONTH)); System.out.println(DATE: + calendar.get(Calendar.DATE)); System.out.println(DAY_OF_MONTH: + calendar.get(Calendar.DAY_OF_MONTH)); System.out.println(DAY_OF_YEAR: + calendar.get(Calendar.DAY_OF_YEAR)); System.out.println(DAY_OF_WEEK: + calendar.get(Calendar.DAY_OF_WEEK)); System.out.println(DAY_OF_WEEK_IN_MONTH: + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH)); System.out.println(AM_PM: + calendar.get(Calendar.AM_PM)); System.out.println(HOUR: + calendar.get(Calendar.HOUR)); System.out.println(HOUR_OF_DAY: + calendar.get(Calendar.HOUR_OF_DAY)); System.out.println(MINUTE: + calendar.get(Calendar.MINUTE)); System.out.println(SECOND: + calendar.get(Calendar.SECOND)); System.out.println(MILLISECOND: + calendar.get(Calendar.MILLISECOND)); System.out.println(ZONE_OFFSET: + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); System.out.println(DST_OFFSET: + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); System.out.println(Current Time, with hour reset to 3); calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override calendar.set(Calendar.HOUR, 3); System.out.println(ERA: + calendar.get(Calendar.ERA)); System.out.println(YEAR: + calendar.get(Calendar.YEAR)); System.out.println(MONTH: + calendar.get(Calendar.MONTH)); System.out.println(WEEK_OF_YEAR: + calendar.get(Calendar.WEEK_OF_YEAR)); System.out.println(WEEK_OF_MONTH: + calendar.get(Calendar.WEEK_OF_MONTH)); System.out.println(DATE: + calendar.get(Calendar.DATE)); System.out.println(DAY_OF_MONTH: + calendar.get(Calendar.DAY_OF_MONTH)); System.out.println(DAY_OF_YEAR: + calendar.get(Calendar.DAY_OF_YEAR)); System.out.println(DAY_OF_WEEK: + calendar.get(Calendar.DAY_OF_WEEK)); System.out.println(DAY_OF_WEEK_IN_MONTH: + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH)); System.out.println(AM_PM: + calendar.get(Calendar.AM_PM)); System.out.println(HOUR: + calendar.get(Calendar.HOUR)); System.out.println(HOUR_OF_DAY: + calendar.get(Calendar.HOUR_OF_DAY)); System.out.println(MINUTE: + calendar.get(Calendar.MINUTE)); System.out.println(SECOND: + calendar.get(Calendar.SECOND)); System.out.println(MILLISECOND: + calendar.get(Calendar.MILLISECOND)); System.out.println(ZONE_OFFSET: + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours System.out.println(DST_OFFSET: + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours @see TimeZone @version 1.93 @author David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu @since JDK1.1
method,java/util/GregorianCalendar/equals/Object, Compares this GregorianCalendar to the specified Object. The result is true if and only if the argument is a GregorianCalendar object that represents the same time value (millisecond offset from the Epoch) under the same Calendar parameters and Gregorian change date as this object. @param obj the object to compare with. @return true if this object is equal to obj; false otherwise. @see Calendar#compareTo(Calendar)
method,java/util/GregorianCalendar/add/int;int, Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules. Add rule 1. The value of field after the call minus the value of field before the call is amount, modulo any overflow that has occurred in field. Overflow occurs when a field value exceeds its range and, as a result, the next larger field is incremented or decremented and the field value is adjusted back into its range. Add rule 2. If a smaller field is expected to be invariant, but it is impossible for it to be equal to its prior value because of changes in its minimum or maximum after field is changed, then its value is adjusted to be as close as possible to its expected value. A smaller field represents a smaller unit of time. HOUR is a smaller field than DAY_OF_MONTH. No adjustment is made to smaller fields that are not expected to be invariant. The calendar system determines what fields are expected to be invariant. @param field the calendar field. @param amount the amount of date or time to be added to the field. @exception IllegalArgumentException if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode.
method,java/util/GregorianCalendar/roll/int;boolean, Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields. Example: Consider a GregorianCalendar originally set to December 31, 1999. Calling {@link #roll(int,boolean) roll(Calendar.MONTH, true)} sets the calendar to January 31, 1999. The YEAR field is unchanged because it is a larger field than MONTH. @param up indicates if the value of the specified calendar field is to be rolled up or rolled down. Use true if rolling up, false otherwise. @exception IllegalArgumentException if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode. @see #add(int,int) @see #set(int,int)
method,java/util/GregorianCalendar/roll/int;int, Adds a signed amount to the specified calendar field without changing larger fields. A negative roll amount means to subtract from field without changing larger fields. If the specified amount is 0, this method performs nothing. This method calls {@link #complete()} before adding the amount so that all the calendar fields are normalized. If there is any calendar field having an out-of-range value in non-lenient mode, then an IllegalArgumentException is thrown. Example: Consider a GregorianCalendar originally set to August 31, 1999. Calling roll(Calendar.MONTH, 8) sets the calendar to April 30, 1999. Using a GregorianCalendar, the DAY_OF_MONTH field cannot be 31 in the month April. DAY_OF_MONTH is set to the closest possible value, 30. The YEAR field maintains the value of 1999 because it is a larger field than MONTH. Example: Consider a GregorianCalendar originally set to Sunday June 6, 1999. Calling roll(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Tuesday June 1, 1999, whereas calling add(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Sunday May 30, 1999. This is because the roll rule imposes an additional constraint: The MONTH must not change when the WEEK_OF_MONTH is rolled. Taken together with add rule 1, the resultant date must be between Tuesday June 1 and Saturday June 5. According to add rule 2, the DAY_OF_WEEK, an invariant when changing the WEEK_OF_MONTH, is set to Tuesday, the closest possible value to Sunday (where Sunday is the first day of the week). @param field the calendar field. @param amount the signed amount to add to field. @exception IllegalArgumentException if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode. @see #roll(int,boolean) @see #add(int,int) @see #set(int,int) @since 1.2
method,java/util/GregorianCalendar/computeFields/, Converts the time value (millisecond offset from the Epoch) to calendar field values. The time is not recomputed first; to recompute the time, then the fields, call the complete method. @see Calendar#complete
field,java/util/GregorianCalendar/BC, Value of the ERA field indicating the period before the common era (before Christ), also known as BCE. The sequence of years at the transition from BC to AD is ..., 2 BC, 1 BC, 1 AD, 2 AD,... @see #ERA
method,java/util/Formatter/locale/, Returns the locale set by the construction of this formatter. The {@link #format(java.util.Locale,String,Object...) format} method for this object which has a locale argument does not change this value. @return null if no localization is applied, otherwise a locale @throws FormatterClosedException If this formatter has been closed by invoking its {@link #close()} method
method,java/util/Formatter/out/, Returns the destination for the output. @return The destination for the output @throws FormatterClosedException If this formatter has been closed by invoking its {@link #close()} method
method,java/util/Formatter/toString/, Returns the result of invoking toString() on the destination for the output. For example, the following code formats text into a {@link StringBuilder} then retrieves the resultant string: Formatter f = new Formatter(); f.format(Last reboot at %tc, lastRebootDate); String s = f.toString(); // -&gt; s == Last reboot at Sat Jan 01 00:00:00 PST 2000 An invocation of this method behaves in exactly the same way as the invocation out().toString() Depending on the specification of toString for the {@link Appendable}, the returned string may or may not contain the characters written to the destination. For instance, buffers typically return their contents in toString(), but streams cannot since the data is discarded. @return The result of invoking toString() on the destination for the output @throws FormatterClosedException If this formatter has been closed by invoking its {@link #close()} method
method,java/util/Formatter/flush/, Flushes this formatter. If the destination implements the {@link java.io.Flushable} interface, its flush method will be invoked. Flushing a formatter writes any buffered output in the destination to the underlying stream. @throws FormatterClosedException If this formatter has been closed by invoking its {@link #close()} method
method,java/util/Formatter/close/, Closes this formatter. If the destination implements the {@link java.io.Closeable} interface, its close method will be invoked. Closing a formatter allows it to release resources it may be holding (such as open files). If the formatter is already closed, then invoking this method has no effect. Attempting to invoke any methods except {@link #ioException()} in this formatter after it has been closed will result in a {@link FormatterClosedException}.
method,java/util/Formatter/ioException/, Returns the IOException last thrown by this formatter's {@link Appendable}. If the destination's append() method never throws IOException, then this method will always return null. @return The last exception thrown by the Appendable or null if no such exception exists.
method,java/util/Formatter/Formatter/, Constructs a new formatter. The destination of the formatted output is a {@link StringBuilder} which may be retrieved by invoking {@link #out out()} and whose current content may be converted into a string by invoking {@link #toString toString()}. The locale used is the {@linkplain Locale#getDefault() default locale} for this instance of the Java virtual machine.
method,java/util/Formatter/Formatter/Locale, Constructs a new formatter with the specified locale. The destination of the formatted output is a {@link StringBuilder} which may be retrieved by invoking {@link #out out()} and whose current content may be converted into a string by invoking {@link #toString toString()}. @param l The {@linkplain java.util.Locale locale} to apply during formatting. If l is null then no localization is applied.
method,java/util/Formatter/Formatter/String, Constructs a new formatter with the specified file name. The charset used is the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this instance of the Java virtual machine. The locale used is the {@linkplain Locale#getDefault() default locale} for this instance of the Java virtual machine. @param fileName The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write access to the file @throws FileNotFoundException If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
method,java/util/Formatter/Formatter/String;String, Constructs a new formatter with the specified file name and charset. The locale used is the {@linkplain Locale#getDefault default locale} for this instance of the Java virtual machine. @param fileName The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @param csn The name of a supported {@linkplain java.nio.charset.Charset charset} @throws FileNotFoundException If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write access to the file @throws UnsupportedEncodingException If the named charset is not supported
method,java/util/Formatter/Formatter/String;String;Locale, Constructs a new formatter with the specified file name, charset, and locale. @param fileName The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @param csn The name of a supported {@linkplain java.nio.charset.Charset charset} @param l The {@linkplain java.util.Locale locale} to apply during formatting. If l is null then no localization is applied. @throws FileNotFoundException If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write access to the file @throws UnsupportedEncodingException If the named charset is not supported
method,java/util/Formatter/Formatter/File, Constructs a new formatter with the specified file. The charset used is the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this instance of the Java virtual machine. The locale used is the {@linkplain Locale#getDefault() default locale} for this instance of the Java virtual machine. @param file The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies write access to the file @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
method,java/util/Formatter/Formatter/File;String, Constructs a new formatter with the specified file and charset. The locale used is the {@linkplain Locale#getDefault default locale} for this instance of the Java virtual machine. @param file The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @param csn The name of a supported {@linkplain java.nio.charset.Charset charset} @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies write access to the file @throws UnsupportedEncodingException If the named charset is not supported
method,java/util/Formatter/Formatter/File;String;Locale, Constructs a new formatter with the specified file, charset, and locale. @param file The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered. @param csn The name of a supported {@linkplain java.nio.charset.Charset charset} @param l The {@linkplain java.util.Locale locale} to apply during formatting. If l is null then no localization is applied. @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file @throws SecurityException If a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies write access to the file @throws UnsupportedEncodingException If the named charset is not supported
field,java/util/FormattableFlags/LEFT_JUSTIFY, Left-justifies the output. Spaces ('&#92;u0020') will be added at the end of the converted value as required to fill the minimum width of the field. If this flag is not set then the output will be right-justified. This flag corresponds to '-' ('&#92;u002d') in the format specifier.
field,java/util/FormattableFlags/UPPERCASE, Converts the output to upper case according to the rules of the {@linkplain java.util.Locale locale} given during creation of the formatter argument of the {@link Formattable#formatTo formatTo()} method. The output should be equivalent the following invocation of {@link String#toUpperCase(java.util.Locale)} out.toUpperCase() This flag corresponds to '^' ('&#92;u005e') in the format specifier.
field,java/util/FormattableFlags/ALTERNATE, Requires the output to use an alternate form. The definition of the form is specified by the Formattable. This flag corresponds to '#' ('&#92;u0023') in the format specifier.
interface,java/util/Formattable, The Formattable interface must be implemented by any class that needs to perform custom formatting using the 's' conversion specifier of {@link java.util.Formatter}. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints: import java.nio.CharBuffer; import java.util.Formatter; import java.util.Formattable; import java.util.Locale; import static java.util.FormattableFlags.*; ... public class StockName implements Formattable { private String symbol, companyName, frenchCompanyName; public StockName(String symbol, String companyName, String frenchCompanyName) { ... } ... public void formatTo(Formatter fmt, int f, int width, int precision) { StringBuilder sb = new StringBuilder(); // decide form of name String name = companyName; if (fmt.locale().equals(Locale.FRANCE)) name = frenchCompanyName; boolean alternate = (f & ALTERNATE) == ALTERNATE; boolean usesymbol = alternate || (precision != -1 && precision When used in conjunction with the {@link java.util.Formatter}, the above class produces the following output for various format strings. Formatter fmt = new Formatter(); StockName sn = new StockName(HUGE, Huge Fruit, Inc., Fruit Titanesque, Inc.); fmt.format(%s, sn); // -> Huge Fruit, Inc. fmt.format(%s, sn.toString()); // -> HUGE - Huge Fruit, Inc. fmt.format(%#s, sn); // -> HUGE fmt.format(%-10.8s, sn); // -> HUGE fmt.format(%.12s, sn); // -> Huge Fruit,* fmt.format(Locale.FRANCE, %25s, sn); // -> Fruit Titanesque, Inc. Formattables are not necessarily safe for multithreaded access. Thread safety is optional and may be enforced by classes that extend and implement this interface. Unless otherwise specified, passing a null argument to any method in this interface will cause a {@link NullPointerException} to be thrown. @version 	1.5, 03/23/10 @since 1.5
method,java/util/Formattable/formatTo/Formatter;int;int;int, Formats the object using the provided {@link Formatter formatter}. @param formatter The {@link Formatter formatter}. Implementing classes may call {@link Formatter#out() formatter.out()} or {@link Formatter#locale() formatter.locale()} to obtain the {@link Appendable} or {@link Locale} used by this formatter respectively. @param flags The flags modify the output format. The value is interpreted as a bitmask. Any combination of the following flags may be set: {@link FormattableFlags#LEFT_JUSTIFY}, {@link FormattableFlags#UPPERCASE}, and {@link FormattableFlags#ALTERNATE}. If no flags are set, the default formatting of the implementing class will apply. @param width The minimum number of characters to be written to the output. If the length of the converted value is less than the width then the output will be padded by '&nbsp;&nbsp;' until the total number of characters equals width. The padding is at the beginning by default. If the {@link FormattableFlags#LEFT_JUSTIFY} flag is set then the padding will be at the end. If width is -1 then there is no minimum. @param precision The maximum number of characters to be written to the output. The precision is applied before the width, thus the output will be truncated to precision characters even if the width is greater than the precision. If precision is -1 then there is no explicit limit on the number of characters. @throws IllegalFormatException If any of the parameters are invalid. For specification of all possible formatting errors, see the Details section of the formatter class specification.
class,java/util/EventObject, The root class from which all event state objects shall be derived. All Events are constructed with a reference to the object, the source, that is logically deemed to be the object upon which the Event in question initially occurred upon. @since JDK1.1
interface,java/util/EventListener, A tagging interface that all event listener interfaces must extend. @since JDK1.1
interface,java/util/Enumeration, An object that implements the Enumeration interface generates a series of elements, one at a time. Successive calls to the nextElement method return successive elements of the series. For example, to print all elements of a Vector&lt;E&gt; v: for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();) System.out.println(e.nextElement()); Methods are provided to enumerate through the elements of a vector, the keys of a hashtable, and the values in a hashtable. Enumerations are also used to specify the input streams to a SequenceInputStream. NOTE: The functionality of this interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration. @see java.util.Iterator @see java.io.SequenceInputStream @see java.util.Enumeration#nextElement() @see java.util.Hashtable @see java.util.Hashtable#elements() @see java.util.Hashtable#keys() @see java.util.Vector @see java.util.Vector#elements() @author Lee Boynton @version 1.25, 03/23/10 @since JDK1.0
method,java/util/Enumeration/hasMoreElements/, Tests if this enumeration contains more elements. @return true if and only if this enumeration object contains at least one more element to provide; false otherwise.
method,java/util/EnumMap/get/Object, Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key == k)}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.) A return value of {@code null} does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to {@code null}. The {@link #containsKey containsKey} operation may be used to distinguish these two cases.
method,java/util/EmptyStackException/EmptyStackException/, Constructs a new EmptyStackException with null as its error message string.
method,java/util/Dictionary/isEmpty/, Tests if this dictionary maps no keys to value. The general contract for the isEmpty method is that the result is true if and only if this dictionary contains no entries. @return true if this dictionary maps no keys to values; false otherwise.
method,java/util/Dictionary/put/Object;Object, Maps the specified key to the specified value in this dictionary. Neither the key nor the value can be null. If this dictionary already contains an entry for the specified key, the value already in this dictionary for that key is returned, after modifying the entry to contain the new element. If this dictionary does not already have an entry for the specified key, an entry is created for the specified key and value, and null is returned. The value can be retrieved by calling the get method with a key that is equal to the original key. @param key the hashtable key. @param value the value. @return the previous value to which the key was mapped in this dictionary, or null if the key did not have a previous mapping. @exception NullPointerException if the key or value is null. @see java.lang.Object#equals(java.lang.Object) @see java.util.Dictionary#get(java.lang.Object)
method,java/util/Dictionary/Dictionary/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/util/Deque/removeFirst/, Retrieves and removes the first element of this deque. This method differs from {@link #pollFirst pollFirst} only in that it throws an exception if this deque is empty. @return the head of this deque @throws NoSuchElementException if this deque is empty
method,java/util/Deque/removeLast/, Retrieves and removes the last element of this deque. This method differs from {@link #pollLast pollLast} only in that it throws an exception if this deque is empty. @return the tail of this deque @throws NoSuchElementException if this deque is empty
method,java/util/Deque/getFirst/, Retrieves, but does not remove, the first element of this deque. This method differs from {@link #peekFirst peekFirst} only in that it throws an exception if this deque is empty. @return the head of this deque @throws NoSuchElementException if this deque is empty
method,java/util/Deque/getLast/, Retrieves, but does not remove, the last element of this deque. This method differs from {@link #peekLast peekLast} only in that it throws an exception if this deque is empty. @return the tail of this deque @throws NoSuchElementException if this deque is empty
method,java/util/Deque/remove/, Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from {@link #poll poll} only in that it throws an exception if this deque is empty. This method is equivalent to {@link #removeFirst()}. @return the head of the queue represented by this deque @throws NoSuchElementException if this deque is empty
method,java/util/Deque/element/, Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from {@link #peek peek} only in that it throws an exception if this deque is empty. This method is equivalent to {@link #getFirst()}. @return the head of the queue represented by this deque @throws NoSuchElementException if this deque is empty
class,java/util/Date, The class Date represents a specific instant in time, with millisecond precision. Prior to JDK&nbsp;1.1, the class Date had two additional functions. It allowed the interpretation of dates as year, month, day, hour, minute, and second values. It also allowed the formatting and parsing of date strings. Unfortunately, the API for these functions was not amenable to internationalization. As of JDK&nbsp;1.1, the Calendar class should be used to convert between dates and time fields and the DateFormat class should be used to format and parse date strings. The corresponding methods in Date are deprecated. Although the Date class is intended to reflect coordinated universal time (UTC), it may not do so exactly, depending on the host environment of the Java Virtual Machine. Nearly all modern operating systems assume that 1&nbsp;day&nbsp;= 24&nbsp;&times;&nbsp;60&nbsp;&times;&nbsp;60&nbsp;= 86400 seconds in all cases. In UTC, however, about once every year or two there is an extra second, called a leap second. The leap second is always added as the last second of the day, and always on December 31 or June 30. For example, the last minute of the year 1995 was 61 seconds long, thanks to an added leap second. Most computer clocks are not accurate enough to be able to reflect the leap-second distinction. Some computer standards are defined in terms of Greenwich mean time (GMT), which is equivalent to universal time (UT). GMT is the civil name for the standard; UT is the scientific name for the same standard. The distinction between UTC and UT is that UTC is based on an atomic clock and UT is based on astronomical observations, which for all practical purposes is an invisibly fine hair to split. Because the earth's rotation is not uniform (it slows down and speeds up in complicated ways), UT does not always flow uniformly. Leap seconds are introduced as needed into UTC so as to keep UTC within 0.9 seconds of UT1, which is a version of UT with certain corrections applied. There are other time and date systems as well; for example, the time scale used by the satellite-based global positioning system (GPS) is synchronized to UTC but is not adjusted for leap seconds. An interesting source of further information is the U.S. Naval Observatory, particularly the Directorate of Time at: http://tycho.usno.navy.mil and their definitions of Systems of Time at: http://tycho.usno.navy.mil/systime.html In all methods of class Date that accept or return year, month, date, hours, minutes, and seconds values, the following representations are used: A year y is represented by the integer y&nbsp;-&nbsp;1900. A month is represented by an integer from 0 to 11; 0 is January, 1 is February, and so forth; thus 11 is December. A date (day of month) is represented by an integer from 1 to 31 in the usual manner. An hour is represented by an integer from 0 to 23. Thus, the hour from midnight to 1 a.m. is hour 0, and the hour from noon to 1 p.m. is hour 12. A minute is represented by an integer from 0 to 59 in the usual manner. A second is represented by an integer from 0 to 61; the values 60 and 61 occur only for leap seconds and even then only in Java implementations that actually track leap seconds correctly. Because of the manner in which leap seconds are currently introduced, it is extremely unlikely that two leap seconds will occur in the same minute, but this specification follows the date and time conventions for ISO C. In all cases, arguments given to methods for these purposes need not fall within the indicated ranges; for example, a date may be specified as January 32 and is interpreted as meaning February 1. @author James Gosling @author Arthur van Hoff @author Alan Liu @version 1.86, 03/23/10 @see java.text.DateFormat @see java.util.Calendar @see java.util.TimeZone @since JDK1.0
method,java/util/Date/setYear/int, Sets the year of this Date object to be the specified value plus 1900. This Date object is modified so that it represents a point in time within the specified year, with the month, date, hour, minute, and second the same as before, as interpreted in the local time zone. (Of course, if the date was February 29, for example, and the year is set to a non-leap year, then the new date will be treated as if it were on March 1.) @param year the year value. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.set(Calendar.YEAR, year + 1900).
method,java/util/Date/getMonth/, Returns a number representing the month that contains or begins with the instant in time represented by this Date object. The value returned is between 0 and 11, with the value 0 representing January. @return the month represented by this date. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.get(Calendar.MONTH).
method,java/util/Date/getDate/, Returns the day of the month represented by this Date object. The value returned is between 1 and 31 representing the day of the month that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone. @return the day of the month represented by this date. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_MONTH). @deprecated
method,java/util/Date/setDate/int, Sets the day of the month of this Date object to the specified value. This Date object is modified so that it represents a point in time within the specified day of the month, with the year, month, hour, minute, and second the same as before, as interpreted in the local time zone. If the date was April 30, for example, and the date is set to 31, then it will be treated as if it were on May 1, because April has only 30 days. @param date the day of the month value between 1-31. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date).
method,java/util/Date/setHours/int, Sets the hour of this Date object to the specified value. This Date object is modified so that it represents a point in time within the specified hour of the day, with the year, month, date, minute, and second the same as before, as interpreted in the local time zone. @param hours the hour value. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours).
method,java/util/Date/getMinutes/, Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone. The value returned is between 0 and 59. @return the number of minutes past the hour represented by this date. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.get(Calendar.MINUTE).
method,java/util/Date/setMinutes/int, Sets the minutes of this Date object to the specified value. This Date object is modified so that it represents a point in time within the specified minute of the hour, with the year, month, date, hour, and second the same as before, as interpreted in the local time zone. @param minutes the value of the minutes. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.set(Calendar.MINUTE, int minutes).
method,java/util/Date/setSeconds/int, Sets the seconds of this Date to the specified value. This Date object is modified so that it represents a point in time within the specified second of the minute, with the year, month, date, hour, and minute the same as before, as interpreted in the local time zone. @param seconds the seconds value. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.set(Calendar.SECOND, int seconds). 
method,java/util/Date/setTime/long, Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT. @param time the number of milliseconds.
method,java/util/Date/before/Date, Tests if this date is before the specified date. @param when a date. @return true if and only if the instant of time represented by this Date object is strictly earlier than the instant represented by when; false otherwise. @exception NullPointerException if when is null.
method,java/util/Date/after/Date, Tests if this date is after the specified date. @param when a date. @return true if and only if the instant represented by this Date object is strictly later than the instant represented by when; false otherwise. @exception NullPointerException if when is null.
method,java/util/Date/equals/Object, Compares two dates for equality. The result is true if and only if the argument is not null and is a Date object that represents the same point in time, to the millisecond, as this object. Thus, two Date objects are equal if and only if the getTime method returns the same long value for both. @param obj the object to compare with. @return true if the objects are the same; false otherwise. @see java.util.Date#getTime()
method,java/util/Date/compareTo/Date, Compares two Dates for ordering. @param anotherDate the Date to be compared. @return the value 0 if the argument Date is equal to this Date; a value less than 0 if this Date is before the Date argument; and a value greater than 0 if this Date is after the Date argument. @since 1.2 @exception NullPointerException if anotherDate is null.
method,java/util/Date/toString/, Converts this Date object to a String of the form: dow mon dd hh:mm:ss zzz yyyy where: dow is the day of the week (Sun, Mon, Tue, Wed, Thu, Fri, Sat). mon is the month (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec). dd is the day of the month (01 through 31), as two decimal digits. hh is the hour of the day (00 through 23), as two decimal digits. mm is the minute within the hour (00 through 59), as two decimal digits. ss is the second within the minute (00 through 61, as two decimal digits. zzz is the time zone (and may reflect daylight saving time). Standard time zone abbreviations include those recognized by the method parse. If time zone information is not available, then zzz is empty - that is, it consists of no characters at all. yyyy is the year, as four decimal digits. @return a string representation of this date. @see java.util.Date#toLocaleString() @see java.util.Date#toGMTString()
method,java/util/Date/toLocaleString/, Creates a string representation of this Date object in an implementation-dependent form. The intent is that the form should be familiar to the user of the Java application, wherever it may happen to be running. The intent is comparable to that of the %c format supported by the strftime() function of ISO&nbsp;C. @return a string representation of this date, using the locale conventions. @see java.text.DateFormat @see java.util.Date#toString() @see java.util.Date#toGMTString() @deprecated As of JDK version 1.1, replaced by DateFormat.format(Date date).
method,java/util/Date/toGMTString/, Creates a string representation of this Date object of the form: d mon yyyy hh:mm:ss GMT where: d is the day of the month (1 through 31), as one or two decimal digits. mon is the month (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec). yyyy is the year, as four decimal digits. hh is the hour of the day (00 through 23), as two decimal digits. mm is the minute within the hour (00 through 59), as two decimal digits. ss is the second within the minute (00 through 61), as two decimal digits. GMT is exactly the ASCII letters GMT to indicate Greenwich Mean Time. The result does not depend on the local time zone. @return a string representation of this date, using the Internet GMT conventions. @see java.text.DateFormat @see java.util.Date#toString() @see java.util.Date#toLocaleString() @deprecated As of JDK version 1.1, replaced by DateFormat.format(Date date), using a GMT TimeZone.
method,java/util/Date/getTimezoneOffset/, Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this Date object. For example, in Massachusetts, five time zones west of Greenwich: new Date(96, 1, 14).getTimezoneOffset() returns 300 because on February 14, 1996, standard time (Eastern Standard Time) is in use, which is offset five hours from UTC; but: new Date(96, 5, 1).getTimezoneOffset() returns 240 because on June 1, 1996, daylight saving time (Eastern Daylight Time) is in use, which is offset only four hours from UTC. This method produces the same result as if it computed: (this.getTime() - UTC(this.getYear(), this.getMonth(), this.getDate(), this.getHours(), this.getMinutes(), this.getSeconds())) / (60 * 1000) @return the time-zone offset, in minutes, for the current time zone. @see java.util.Calendar#ZONE_OFFSET @see java.util.Calendar#DST_OFFSET @see java.util.TimeZone#getDefault @deprecated As of JDK version 1.1, replaced by -(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000).
method,java/util/Date/Date/int;int;int, Allocates a Date object and initializes it so that it represents midnight, local time, at the beginning of the day specified by the year, month, and date arguments. @param year the year minus 1900. @param month the month between 0-11. @param date the day of the month between 1-31. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date) or GregorianCalendar(year + 1900, month, date).
method,java/util/Date/Date/int;int;int;int;int, Allocates a Date object and initializes it so that it represents the instant at the start of the minute specified by the year, month, date, hrs, and min arguments, in the local time zone. @param year the year minus 1900. @param month the month between 0-11. @param date the day of the month between 1-31. @param hrs the hours between 0-23. @param min the minutes between 0-59. @see java.util.Calendar @deprecated As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min) or GregorianCalendar(year + 1900, month, date, hrs, min).
class,java/util/Currency, Represents a currency. Currencies are identified by their ISO 4217 currency codes. Visit the BSi web site for more information, including a table of currency codes. The class is designed so that there's never more than one Currency instance for any given currency. Therefore, there's no public constructor. You obtain a Currency instance using the getInstance methods. @since 1.4
method,java/util/Currency/getInstance/Locale, Returns the Currency instance for the country of the given locale. The language and variant components of the locale are ignored. The result may vary over time, as countries change their currencies. For example, for the original member countries of the European Monetary Union, the method returns the old national currencies until December 31, 2001, and the Euro from January 1, 2002, local time of the respective countries. The method returns null for territories that don't have a currency, such as Antarctica. @param locale the locale for whose country a Currency instance is needed @return the Currency instance for the country of the given locale, or null @exception NullPointerException if locale or its country code is null @exception IllegalArgumentException if the country of the given locale is not a supported ISO 3166 country code.
method,java/util/Currency/getSymbol/, Gets the symbol of this currency for the default locale. For example, for the US Dollar, the symbol is $ if the default locale is the US, while for other locales it may be US$. If no symbol can be determined, the ISO 4217 currency code is returned. @return the symbol of this currency for the default locale
method,java/util/Currency/getSymbol/Locale, Gets the symbol of this currency for the specified locale. For example, for the US Dollar, the symbol is $ if the specified locale is the US, while for other locales it may be US$. If no symbol can be determined, the ISO 4217 currency code is returned. @param locale the locale for which a display name for this currency is needed @return the symbol of this currency for the specified locale @exception NullPointerException if locale is null
method,java/util/ConcurrentModificationException/ConcurrentModificationException/, Constructs a ConcurrentModificationException with no detail message.
method,java/util/ConcurrentModificationException/ConcurrentModificationException/String, Constructs a ConcurrentModificationException with the specified detail message. @param message the detail message pertaining to this exception.
class,java/util/Collections, This class consists exclusively of static methods that operate on or return collections. It contains polymorphic algorithms that operate on collections, wrappers, which return a new collection backed by a specified collection, and a few other odds and ends. The methods of this class all throw a NullPointerException if the collections or class objects provided to them are null. The documentation for the polymorphic algorithms contained in this class generally includes a brief description of the implementation. Such descriptions should be regarded as implementation notes, rather than parts of the specification. Implementors should feel free to substitute other algorithms, so long as the specification itself is adhered to. (For example, the algorithm used by sort does not have to be a mergesort, but it does have to be stable.) The destructive algorithms contained in this class, that is, the algorithms that modify the collection on which they operate, are specified to throw UnsupportedOperationException if the collection does not support the appropriate mutation primitive(s), such as the set method. These algorithms may, but are not required to, throw this exception if an invocation would have no effect on the collection. For example, invoking the sort method on an unmodifiable list that is already sorted may or may not throw UnsupportedOperationException. This class is a member of the Java Collections Framework. @author Josh Bloch @author Neal Gafter @version 1.107, 03/23/10 @see	 Collection @see	 Set @see	 List @see	 Map @since 1.2
method,java/util/Collections/shuffle/List, Randomly permutes the specified list using a default source of randomness. All permutations occur with approximately equal likelihood. The hedge approximately is used in the foregoing description because default source of randomness is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm would choose permutations with perfect uniformity. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the current position. Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the {@link RandomAccess} interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a sequential access list in place. @param list the list to be shuffled. @throws UnsupportedOperationException if the specified list or its list-iterator does not support the set operation.
method,java/util/Collections/shuffle/List;Random, Randomly permute the specified list using the specified source of randomness. All permutations occur with equal likelihood assuming that the source of randomness is fair. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the current position. Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the {@link RandomAccess} interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a sequential access list in place. @param list the list to be shuffled. @param rnd the source of randomness to use to shuffle the list. @throws UnsupportedOperationException if the specified list or its list-iterator does not support the set operation.
method,java/util/Collections/swap/List;int;int, Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.) @param list The list in which to swap elements. @param i the index of one element to be swapped. @param j the index of the other element to be swapped. @throws IndexOutOfBoundsException if either i or j is out of range (i &lt; 0 || i &gt;= list.size() || j &lt; 0 || j &gt;= list.size()). @since 1.4
method,java/util/Collections/rotate/List;int, Rotates the elements in the specified list by the specified distance. After calling this method, the element at index i will be the element previously at index (i - distance) mod list.size(), for all values of i between 0 and list.size()-1, inclusive. (This method has no effect on the size of the list.) For example, suppose list comprises [t, a, n, k, s]. After invoking Collections.rotate(list, 1) (or Collections.rotate(list, -4)), list will comprise [s, t, a, n, k]. Note that this method can usefully be applied to sublists to move one or more elements within a list while preserving the order of the remaining elements. For example, the following idiom moves the element at index j forward to position k (which must be greater than or equal to j): Collections.rotate(list.subList(j, k+1), -1); To make this concrete, suppose list comprises [a, b, c, d, e]. To move the element at index 1 (b) forward two positions, perform the following invocation: Collections.rotate(l.subList(1, 4), -1); The resulting list is [a, c, d, b, e]. To move more than one element forward, increase the absolute value of the rotation distance. To move elements backward, use a positive shift distance. If the specified list is small or implements the {@link RandomAccess} interface, this implementation exchanges the first element into the location it should go, and then repeatedly exchanges the displaced element into the location it should go until a displaced element is swapped into the first element. If necessary, the process is repeated on the second and successive elements, until the rotation is complete. If the specified list is large and doesn't implement the RandomAccess interface, this implementation breaks the list into two sublist views around index -distance mod size. Then the {@link #reverse(List)} method is invoked on each sublist view, and finally it is invoked on the entire list. For a more complete description of both algorithms, see Section 2.3 of Jon Bentley's Programming Pearls (Addison-Wesley, 1986). @param list the list to be rotated. @param distance the distance to rotate the list. There are no constraints on this value; it may be zero, negative, or greater than list.size(). @throws UnsupportedOperationException if the specified list or its list-iterator does not support the set operation. @since 1.4
method,java/util/Collections/unmodifiableCollection/Collection, Returns an unmodifiable view of the specified collection. This method allows modules to provide users with read-only access to internal collections. Query operations on the returned collection read through to the specified collection, and attempts to modify the returned collection, whether direct or via its iterator, result in an UnsupportedOperationException. The returned collection does not pass the hashCode and equals operations through to the backing collection, but relies on Object's equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable. @param c the collection for which an unmodifiable view is to be	 returned. @return an unmodifiable view of the specified collection.
method,java/util/Collections/unmodifiableSet/Set, Returns an unmodifiable view of the specified set. This method allows modules to provide users with read-only access to internal sets. Query operations on the returned set read through to the specified set, and attempts to modify the returned set, whether direct or via its iterator, result in an UnsupportedOperationException. The returned set will be serializable if the specified set is serializable. @param s the set for which an unmodifiable view is to be returned. @return an unmodifiable view of the specified set.
method,java/util/Collections/unmodifiableSortedSet/SortedSet, Returns an unmodifiable view of the specified sorted set. This method allows modules to provide users with read-only access to internal sorted sets. Query operations on the returned sorted set read through to the specified sorted set. Attempts to modify the returned sorted set, whether direct, via its iterator, or via its subSet, headSet, or tailSet views, result in an UnsupportedOperationException. The returned sorted set will be serializable if the specified sorted set is serializable. @param s the sorted set for which an unmodifiable view is to be returned. @return an unmodifiable view of the specified sorted set.
method,java/util/Collections/unmodifiableList/List, Returns an unmodifiable view of the specified list. This method allows modules to provide users with read-only access to internal lists. Query operations on the returned list read through to the specified list, and attempts to modify the returned list, whether direct or via its iterator, result in an UnsupportedOperationException. The returned list will be serializable if the specified list is serializable. Similarly, the returned list will implement {@link RandomAccess} if the specified list does. @param list the list for which an unmodifiable view is to be returned. @return an unmodifiable view of the specified list.
method,java/util/Collections/unmodifiableMap/Map, Returns an unmodifiable view of the specified map. This method allows modules to provide users with read-only access to internal maps. Query operations on the returned map read through to the specified map, and attempts to modify the returned map, whether direct or via its collection views, result in an UnsupportedOperationException. The returned map will be serializable if the specified map is serializable. @param m the map for which an unmodifiable view is to be returned. @return an unmodifiable view of the specified map.
method,java/util/Collections/unmodifiableSortedMap/SortedMap, Returns an unmodifiable view of the specified sorted map. This method allows modules to provide users with read-only access to internal sorted maps. Query operations on the returned sorted map read through to the specified sorted map. Attempts to modify the returned sorted map, whether direct, via its collection views, or via its subMap, headMap, or tailMap views, result in an UnsupportedOperationException. The returned sorted map will be serializable if the specified sorted map is serializable. @param m the sorted map for which an unmodifiable view is to be returned. @return an unmodifiable view of the specified sorted map.
method,java/util/Collections/synchronizedCollection/Collection, Returns a synchronized (thread-safe) collection backed by the specified collection. In order to guarantee serial access, it is critical that all access to the backing collection is accomplished through the returned collection. It is imperative that the user manually synchronize on the returned collection when iterating over it: Collection c = Collections.synchronizedCollection(myCollection); ... synchronized(c) { Iterator i = c.iterator(); // Must be in the synchronized block while (i.hasNext()) foo(i.next()); } Failure to follow this advice may result in non-deterministic behavior. The returned collection does not pass the hashCode and equals operations through to the backing collection, but relies on Object's equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable. @param c the collection to be wrapped in a synchronized collection. @return a synchronized view of the specified collection.
method,java/util/Collections/synchronizedSet/Set, Returns a synchronized (thread-safe) set backed by the specified set. In order to guarantee serial access, it is critical that all access to the backing set is accomplished through the returned set. It is imperative that the user manually synchronize on the returned set when iterating over it: Set s = Collections.synchronizedSet(new HashSet()); ... synchronized(s) { Iterator i = s.iterator(); // Must be in the synchronized block while (i.hasNext()) foo(i.next()); } Failure to follow this advice may result in non-deterministic behavior. The returned set will be serializable if the specified set is serializable. @param s the set to be wrapped in a synchronized set. @return a synchronized view of the specified set.
method,java/util/Collections/synchronizedSortedSet/SortedSet, Returns a synchronized (thread-safe) sorted set backed by the specified sorted set. In order to guarantee serial access, it is critical that all access to the backing sorted set is accomplished through the returned sorted set (or its views). It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its subSet, headSet, or tailSet views. SortedSet s = Collections.synchronizedSortedSet(new TreeSet()); ... synchronized(s) { Iterator i = s.iterator(); // Must be in the synchronized block while (i.hasNext()) foo(i.next()); } or: SortedSet s = Collections.synchronizedSortedSet(new TreeSet()); SortedSet s2 = s.headSet(foo); ... synchronized(s) { // Note: s, not s2!!! Iterator i = s2.iterator(); // Must be in the synchronized block while (i.hasNext()) foo(i.next()); } Failure to follow this advice may result in non-deterministic behavior. The returned sorted set will be serializable if the specified sorted set is serializable. @param s the sorted set to be wrapped in a synchronized sorted set. @return a synchronized view of the specified sorted set.
method,java/util/Collections/synchronizedList/List, Returns a synchronized (thread-safe) list backed by the specified list. In order to guarantee serial access, it is critical that all access to the backing list is accomplished through the returned list. It is imperative that the user manually synchronize on the returned list when iterating over it: List list = Collections.synchronizedList(new ArrayList()); ... synchronized(list) { Iterator i = list.iterator(); // Must be in synchronized block while (i.hasNext()) foo(i.next()); } Failure to follow this advice may result in non-deterministic behavior. The returned list will be serializable if the specified list is serializable. @param list the list to be wrapped in a synchronized list. @return a synchronized view of the specified list.
method,java/util/Collections/synchronizedMap/Map, Returns a synchronized (thread-safe) map backed by the specified map. In order to guarantee serial access, it is critical that all access to the backing map is accomplished through the returned map. It is imperative that the user manually synchronize on the returned map when iterating over any of its collection views: Map m = Collections.synchronizedMap(new HashMap()); ... Set s = m.keySet(); // Needn't be in synchronized block ... synchronized(m) { // Synchronizing on m, not s! Iterator i = s.iterator(); // Must be in synchronized block while (i.hasNext()) foo(i.next()); } Failure to follow this advice may result in non-deterministic behavior. The returned map will be serializable if the specified map is serializable. @param m the map to be wrapped in a synchronized map. @return a synchronized view of the specified map.
method,java/util/Collections/synchronizedSortedMap/SortedMap, Returns a synchronized (thread-safe) sorted map backed by the specified sorted map. In order to guarantee serial access, it is critical that all access to the backing sorted map is accomplished through the returned sorted map (or its views). It is imperative that the user manually synchronize on the returned sorted map when iterating over any of its collection views, or the collections views of any of its subMap, headMap or tailMap views. SortedMap m = Collections.synchronizedSortedMap(new TreeMap()); ... Set s = m.keySet(); // Needn't be in synchronized block ... synchronized(m) { // Synchronizing on m, not s! Iterator i = s.iterator(); // Must be in synchronized block while (i.hasNext()) foo(i.next()); } or: SortedMap m = Collections.synchronizedSortedMap(new TreeMap()); SortedMap m2 = m.subMap(foo, bar); ... Set s2 = m2.keySet(); // Needn't be in synchronized block ... synchronized(m) { // Synchronizing on m, not m2 or s2! Iterator i = s.iterator(); // Must be in synchronized block while (i.hasNext()) foo(i.next()); } Failure to follow this advice may result in non-deterministic behavior. The returned sorted map will be serializable if the specified sorted map is serializable. @param m the sorted map to be wrapped in a synchronized sorted map. @return a synchronized view of the specified sorted map.
method,java/util/Collections/checkedMap/Map;Class;Class, Returns a dynamically typesafe view of the specified map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate ClassCastException. Similarly, any attempt to modify the value currently associated with a key will result in an immediate ClassCastException, whether the modification is attempted directly through the map itself, or through a {@link Map.Entry} instance obtained from the map's {@link Map#entrySet() entry set} view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the {@link #checkedCollection checkedCollection} method. The returned map will be serializable if the specified map is serializable. @param m the map for which a dynamically typesafe view is to be returned @param keyType the type of key that m is permitted to hold @param valueType the type of value that m is permitted to hold @return a dynamically typesafe view of the specified map @since 1.5
method,java/util/Collections/checkedSortedMap/SortedMap;Class;Class, Returns a dynamically typesafe view of the specified sorted map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate ClassCastException. Similarly, any attempt to modify the value currently associated with a key will result in an immediate ClassCastException, whether the modification is attempted directly through the map itself, or through a {@link Map.Entry} instance obtained from the map's {@link Map#entrySet() entry set} view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the {@link #checkedCollection checkedCollection} method. The returned map will be serializable if the specified map is serializable. @param m the map for which a dynamically typesafe view is to be returned @param keyType the type of key that m is permitted to hold @param valueType the type of value that m is permitted to hold @return a dynamically typesafe view of the specified map @since 1.5
method,java/util/Collections/emptySet/, Returns the empty set (immutable). This set is serializable. Unlike the like-named field, this method is parameterized. This example illustrates the type-safe way to obtain an empty set: Set&lt;String&gt; s = Collections.emptySet(); Implementation note: Implementations of this method need not create a separate Set object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.) @see #EMPTY_SET @since 1.5
method,java/util/Collections/emptyList/, Returns the empty list (immutable). This list is serializable. This example illustrates the type-safe way to obtain an empty list: List&lt;String&gt; s = Collections.emptyList(); Implementation note: Implementations of this method need not create a separate List object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.) @see #EMPTY_LIST @since 1.5
method,java/util/Collections/emptyMap/, Returns the empty map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty set: Map&lt;String, Date&gt; s = Collections.emptyMap(); Implementation note: Implementations of this method need not create a separate Map object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.) @see #EMPTY_MAP @since 1.5
method,java/util/Collections/singleton/Object, Returns an immutable set containing only the specified object. The returned set is serializable. @param o the sole object to be stored in the returned set. @return an immutable set containing only the specified object.
method,java/util/Collections/singletonList/Object, Returns an immutable list containing only the specified object. The returned list is serializable. @param o the sole object to be stored in the returned list. @return an immutable list containing only the specified object. @since 1.3
method,java/util/Collections/singletonMap/Object;Object, Returns an immutable map, mapping only the specified key to the specified value. The returned map is serializable. @param key the sole key to be stored in the returned map. @param value the value to which the returned map maps key. @return an immutable map containing only the specified key-value mapping. @since 1.3
method,java/util/Collections/reverseOrder/Comparator, Returns a comparator that imposes the reverse ordering of the specified comparator. If the specified comparator is null, this method is equivalent to {@link #reverseOrder()} (in other words, it returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface). The returned comparator is serializable (assuming the specified comparator is also serializable or null). @return a comparator that imposes the reverse ordering of the specified comparator. @since 1.5
method,java/util/Collections/enumeration/Collection, Returns an enumeration over the specified collection. This provides interoperability with legacy APIs that require an enumeration as input. @param c the collection for which an enumeration is to be returned. @return an enumeration over the specified collection. @see Enumeration
method,java/util/Collections/list/Enumeration, Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration. This method provides interoperability between legacy APIs that return enumerations and new APIs that require collections. @param e enumeration providing elements for the returned array list @return an array list containing the elements returned by the specified enumeration. @since 1.4 @see Enumeration @see ArrayList
method,java/util/Collections/disjoint/Collection;Collection, Returns true if the two specified collections have no elements in common. Care must be exercised if this method is used on collections that do not comply with the general contract for Collection. Implementations may elect to iterate over either collection and test for containment in the other collection (or to perform any equivalent computation). If either collection uses a nonstandard equality test (as does a {@link SortedSet} whose ordering is not compatible with equals, or the key set of an {@link IdentityHashMap}), both collections must use the same nonstandard equality test, or the result of this method is undefined. Note that it is permissible to pass the same collection in both parameters, in which case the method will return true if and only if the collection is empty. @param c1 a collection @param c2 a collection @throws NullPointerException if either collection is null @since 1.5
method,java/util/Collections/addAll/Collection;Object[], Adds all of the specified elements to the specified collection. Elements to be added may be specified individually or as an array. The behavior of this convenience method is identical to that of c.addAll(Arrays.asList(elements)), but this method is likely to run significantly faster under most implementations. When elements are specified individually, this method provides a convenient way to add a few elements to an existing collection: Collections.addAll(flavors, Peaches 'n Plutonium, Rocky Racoon); @param c the collection into which elements are to be inserted @param elements the elements to insert into c @return true if the collection changed as a result of the call @throws UnsupportedOperationException if c does not support the add operation @throws NullPointerException if elements contains one or more null values and c does not permit null elements, or if c or elements are null @throws IllegalArgumentException if some property of a value in elements prevents it from being added to c @see Collection#addAll(Collection) @since 1.5
method,java/util/Collections/asLifoQueue/Deque, Returns a view of a {@link Deque} as a Last-in-first-out (Lifo) {@link Queue}. Method add is mapped to push, remove is mapped to pop and so on. This view can be useful when you would like to use a method requiring a Queue but you need Lifo ordering. Each method invocation on the queue returned by this method results in exactly one method invocation on the backing deque, with one exception. The {@link Queue#addAll addAll} method is implemented as a sequence of {@link Deque#addFirst addFirst} invocations on the backing deque. @param deque the deque @return the queue @since 1.6
method,java/util/Collection/removeAll/Collection, Removes all of this collection's elements that are also contained in the specified collection (optional operation). After this call returns, this collection will contain no elements in common with the specified collection. @param c collection containing elements to be removed from this collection @return true if this collection changed as a result of the call @throws UnsupportedOperationException if the removeAll method is not supported by this collection @throws ClassCastException if the types of one or more elements in this collection are incompatible with the specified collection (optional) @throws NullPointerException if this collection contains one or more null elements and the specified collection does not support null elements (optional), or if the specified collection is null @see #remove(Object) @see #contains(Object)
method,java/util/Collection/retainAll/Collection, Retains only the elements in this collection that are contained in the specified collection (optional operation). In other words, removes from this collection all of its elements that are not contained in the specified collection. @param c collection containing elements to be retained in this collection @return true if this collection changed as a result of the call @throws UnsupportedOperationException if the retainAll operation is not supported by this collection @throws ClassCastException if the types of one or more elements in this collection are incompatible with the specified collection (optional) @throws NullPointerException if this collection contains one or more null elements and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object) @see #contains(Object)
method,java/util/Collection/clear/, Removes all of the elements from this collection (optional operation). The collection will be empty after this method returns. @throws UnsupportedOperationException if the clear operation is not supported by this collection
method,java/util/Calendar/computeFields/, Converts the current millisecond time value {@link #time} to calendar field values in {@link #fields fields[]}. This allows you to sync up the calendar field values with a new time that is set for the calendar. The time is not recomputed first; to recompute the time, then the fields, call the {@link #complete()} method. @see #computeTime()
method,java/util/Calendar/setTime/Date, Sets this Calendar's time with the given Date. Note: Calling setTime() with Date(Long.MAX_VALUE) or Date(Long.MIN_VALUE) may yield incorrect field values from get(). @param date the given Date. @see #getTime() @see #setTimeInMillis(long)
method,java/util/Calendar/internalGet/int, Returns the value of the given calendar field. This method does not involve normalization or validation of the field value. @param field the given calendar field. @return the value for the given calendar field. @see #get(int)
method,java/util/Calendar/set/int;int;int, Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH. Previous values of other calendar fields are retained. If this is not desired, call {@link #clear()} first. @param year the value used to set the YEAR calendar field. @param month the value used to set the MONTH calendar field. Month value is 0-based. e.g., 0 for January. @param date the value used to set the DAY_OF_MONTH calendar field. @see #set(int,int) @see #set(int,int,int,int,int) @see #set(int,int,int,int,int,int)
method,java/util/Calendar/clear/, Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined. This means that {@link #isSet(int) isSet()} will return false for all the calendar fields, and the date and time calculations will treat the fields as if they had never been set. A Calendar implementation class may use its specific default field values for date/time calculations. For example, GregorianCalendar uses 1970 if the YEAR field value is undefined. @see #clear(int)
method,java/util/Calendar/clear/int, Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined. This means that {@link #isSet(int) isSet(field)} will return false, and the date and time calculations will treat the field as if it had never been set. A Calendar implementation class may use the field's specific default value for date and time calculations. The {@link #HOUR_OF_DAY}, {@link #HOUR} and {@link #AM_PM} fields are handled independently and the the resolution rule for the time of day is applied. Clearing one of the fields doesn't reset the hour of day value of this Calendar. Use {@link #set(int,int) set(Calendar.HOUR_OF_DAY, 0)} to reset the hour value. @param field the calendar field to be cleared. @see #clear()
method,java/util/Calendar/isSet/int, Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call. @return true if the given calendar field has a value set; false otherwise.
method,java/util/Calendar/getDisplayName/int;int;Locale, Returns the string representation of the calendar field value in the given style and locale. If no string representation is applicable, null is returned. This method calls {@link Calendar#get(int) get(field)} to get the calendar field value if the string representation is applicable to the given calendar field. For example, if this Calendar is a GregorianCalendar and its date is 2005-01-01, then the string representation of the {@link #MONTH} field would be January in the long style in an English locale or Jan in the short style. However, no string representation would be available for the {@link #DAY_OF_MONTH} field, and this method would return null. The default implementation supports the calendar fields for which a {@link DateFormatSymbols} has names in the given locale. @param field the calendar field for which the string representation is returned @param style the style applied to the string representation; one of {@link #SHORT} or {@link #LONG}. @param locale the locale for the string representation @return the string representation of the given field in the given style, or null if no string representation is applicable. @exception IllegalArgumentException if field or style is invalid, or if this Calendar is non-lenient and any of the calendar fields have invalid values @exception NullPointerException if locale is null @since 1.6
method,java/util/Calendar/getDisplayNames/int;int;Locale, Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values. For example, if this Calendar is a {@link GregorianCalendar}, the returned map would contain Jan to {@link #JANUARY}, Feb to {@link #FEBRUARY}, and so on, in the {@linkplain #SHORT short} style in an English locale. The values of other calendar fields may be taken into account to determine a set of display names. For example, if this Calendar is a lunisolar calendar system and the year value given by the {@link #YEAR} field has a leap month, this method would return month names containing the leap month name, and month names are mapped to their values specific for the year. The default implementation supports display names contained in a {@link DateFormatSymbols}. For example, if field is {@link #MONTH} and style is {@link #ALL_STYLES}, this method returns a Map containing all strings returned by {@link DateFormatSymbols#getShortMonths()} and {@link DateFormatSymbols#getMonths()}. @param field the calendar field for which the display names are returned @param style the style applied to the display names; one of {@link #SHORT}, {@link #LONG}, or {@link #ALL_STYLES}. @param locale the locale for the display names @return a Map containing all display names in style and locale and their field values, or null if no display names are defined for field @exception IllegalArgumentException if field or style is invalid, or if this Calendar is non-lenient and any of the calendar fields have invalid values @exception NullPointerException if locale is null @since 1.6
method,java/util/Calendar/complete/, Fills in any unset fields in the calendar fields. First, the {@link #computeTime()} method is called if the time value (millisecond offset from the Epoch) has not been calculated from calendar field values. Then, the {@link #computeFields()} method is called to calculate all calendar field values.
method,java/util/Calendar/equals/Object, Compares this Calendar to the specified Object. The result is true if and only if the argument is a Calendar object of the same calendar system that represents the same time value (millisecond offset from the Epoch) under the same Calendar parameters as this object. The Calendar parameters are the values represented by the isLenient, getFirstDayOfWeek, getMinimalDaysInFirstWeek and getTimeZone methods. If there is any difference in those parameters between the two Calendars, this method returns false. Use the {@link #compareTo(Calendar) compareTo} method to compare only the time values. @param obj the object to compare with. @return true if this object is equal to obj; false otherwise.
method,java/util/Calendar/before/Object, Returns whether this Calendar represents a time before the time represented by the specified Object. This method is equivalent to: compareTo(when) if and only if when is a Calendar instance. Otherwise, the method returns false. @param when the Object to be compared @return true if the time of this Calendar is before the time represented by when; false otherwise. @see	#compareTo(Calendar)
method,java/util/Calendar/after/Object, Returns whether this Calendar represents a time after the time represented by the specified Object. This method is equivalent to: compareTo(when) > 0 if and only if when is a Calendar instance. Otherwise, the method returns false. @param when the Object to be compared @return true if the time of this Calendar is after the time represented by when; false otherwise. @see	#compareTo(Calendar)
method,java/util/Calendar/compareTo/Calendar, Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects. @param anotherCalendar the Calendar to be compared. @return the value 0 if the time represented by the argument is equal to the time represented by this Calendar; a value less than 0 if the time of this Calendar is before the time represented by the argument; and a value greater than 0 if the time of this Calendar is after the time represented by the argument. @exception NullPointerException if the specified Calendar is null. @exception IllegalArgumentException if the time value of the specified Calendar object can't be obtained due to any invalid calendar values. @since 1.5
method,java/util/Calendar/add/int;int, Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules. For example, to subtract 5 days from the current time of the calendar, you can achieve it by calling: add(Calendar.DAY_OF_MONTH, -5). @param field the calendar field. @param amount the amount of date or time to be added to the field. @see #roll(int,int) @see #set(int,int)
method,java/util/Calendar/roll/int;boolean, Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields. For example, to roll the current date up by one day, you can achieve it by calling: roll(Calendar.DATE, true). When rolling on the year or Calendar.YEAR field, it will roll the year value in the range between 1 and the value returned by calling getMaximum(Calendar.YEAR). When rolling on the month or Calendar.MONTH field, other fields like date might conflict and, need to be changed. For instance, rolling the month on the date 01/31/96 will result in 02/29/96. When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will roll the hour value in the range between 0 and 23, which is zero-based. @param field the time field. @param up indicates if the value of the specified time field is to be rolled up or rolled down. Use true if rolling up, false otherwise. @see Calendar#add(int,int) @see Calendar#set(int,int)
method,java/util/Calendar/setMinimalDaysInFirstWeek/int, Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1. If it must be a full week, use value 7. @param value the given minimal days required in the first week of the year. @see #getMinimalDaysInFirstWeek()
field,java/util/Calendar/ERA, Field number for get and set indicating the era, e.g., AD or BC in the Julian calendar. This is a calendar-specific value; see subclass documentation. @see GregorianCalendar#AD @see GregorianCalendar#BC
field,java/util/Calendar/YEAR, Field number for get and set indicating the year. This is a calendar-specific value; see subclass documentation.
field,java/util/Calendar/MONTH, Field number for get and set indicating the month. This is a calendar-specific value. The first month of the year in the Gregorian and Julian calendars is JANUARY which is 0; the last depends on the number of months in a year. @see #JANUARY @see #FEBRUARY @see #MARCH @see #APRIL @see #MAY @see #JUNE @see #JULY @see #AUGUST @see #SEPTEMBER @see #OCTOBER @see #NOVEMBER @see #DECEMBER @see #UNDECIMBER
field,java/util/Calendar/WEEK_OF_YEAR, Field number for get and set indicating the week number within the current year. The first week of the year, as defined by getFirstDayOfWeek() and getMinimalDaysInFirstWeek(), has value 1. Subclasses define the value of WEEK_OF_YEAR for days before the first week of the year. @see #getFirstDayOfWeek @see #getMinimalDaysInFirstWeek
field,java/util/Calendar/WEEK_OF_MONTH, Field number for get and set indicating the week number within the current month. The first week of the month, as defined by getFirstDayOfWeek() and getMinimalDaysInFirstWeek(), has value 1. Subclasses define the value of WEEK_OF_MONTH for days before the first week of the month. @see #getFirstDayOfWeek @see #getMinimalDaysInFirstWeek
field,java/util/Calendar/DAY_OF_WEEK_IN_MONTH, Field number for get and set indicating the ordinal number of the day of the week within the current month. Together with the DAY_OF_WEEK field, this uniquely specifies a day within a month. Unlike WEEK_OF_MONTH and WEEK_OF_YEAR, this field's value does not depend on getFirstDayOfWeek() or getMinimalDaysInFirstWeek(). DAY_OF_MONTH 1 through 7 always correspond to DAY_OF_WEEK_IN_MONTH 1; 8 through 14 correspond to DAY_OF_WEEK_IN_MONTH 2, and so on. DAY_OF_WEEK_IN_MONTH 0 indicates the week before DAY_OF_WEEK_IN_MONTH 1. Negative values count back from the end of the month, so the last Sunday of a month is specified as DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1. Because negative values count backward they will usually be aligned differently within the month than positive values. For example, if a month has 31 days, DAY_OF_WEEK_IN_MONTH -1 will overlap DAY_OF_WEEK_IN_MONTH 5 and the end of 4. @see #DAY_OF_WEEK @see #WEEK_OF_MONTH
field,java/util/Calendar/AM_PM, Field number for get and set indicating whether the HOUR is before or after noon. E.g., at 10:04:15.250 PM the AM_PM is PM. @see #AM @see #PM @see #HOUR
field,java/util/Calendar/ZONE_OFFSET, Field number for get and set indicating the raw offset from GMT in milliseconds. This field reflects the correct GMT offset value of the time zone of this Calendar if the TimeZone implementation subclass supports historical GMT offset changes.
field,java/util/Calendar/DST_OFFSET, Field number for get and set indicating the daylight savings offset in milliseconds. This field reflects the correct daylight saving offset value of the time zone of this Calendar if the TimeZone implementation subclass supports historical Daylight Saving Time schedule changes.
field,java/util/Calendar/MAY, Value of the {@link #MONTH} field indicating the fifth month of the year in the Gregorian and Julian calendars.
field,java/util/Calendar/AM, Value of the {@link #AM_PM} field indicating the period of the day from midnight to just before noon.
field,java/util/Calendar/PM, Value of the {@link #AM_PM} field indicating the period of the day from noon to just before midnight.
field,java/util/Calendar/isSet, The flags which tell if a specified calendar field for the calendar is set. A new object has no fields set. After the first call to a method which generates the fields, they all remain set after that. This is an array of FIELD_COUNT booleans, with index values ERA through DST_OFFSET. @serial
field,java/util/Calendar/time, The currently set time for this calendar, expressed in milliseconds after January 1, 1970, 0:00:00 GMT. @see #isTimeSet @serial
class,java/util/BitSet, This class implements a vector of bits that grows as needed. Each component of the bit set has a boolean value. The bits of a BitSet are indexed by nonnegative integers. Individual indexed bits can be examined, set, or cleared. One BitSet may be used to modify the contents of another BitSet through logical AND, logical inclusive OR, and logical exclusive OR operations. By default, all bits in the set initially have the value false. Every bit set has a current size, which is the number of bits of space currently in use by the bit set. Note that the size is related to the implementation of a bit set, so it may change with implementation. The length of a bit set relates to logical length of a bit set and is defined independently of implementation. Unless otherwise noted, passing a null parameter to any of the methods in a BitSet will result in a NullPointerException. A BitSet is not safe for multithreaded use without external synchronization. @author Arthur van Hoff @author Michael McCloskey @author Martin Buchholz @version 1.68, 03/23/10 @since JDK1.0
method,java/util/BitSet/flip/int;int, Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value. @param fromIndex index of the first bit to flip. @param toIndex index after the last bit to flip. @exception IndexOutOfBoundsException if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex. @since 1.4
method,java/util/BitSet/set/int;int, Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true. @param fromIndex index of the first bit to be set. @param toIndex index after the last bit to be set. @exception IndexOutOfBoundsException if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex. @since 1.4
method,java/util/BitSet/set/int;int;boolean, Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value. @param fromIndex index of the first bit to be set. @param toIndex index after the last bit to be set @param value value to set the selected bits to @exception IndexOutOfBoundsException if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex. @since 1.4
method,java/util/BitSet/clear/int;int, Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false. @param fromIndex index of the first bit to be cleared. @param toIndex index after the last bit to be cleared. @exception IndexOutOfBoundsException if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex. @since 1.4
method,java/util/BitSet/get/int;int, Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive). @param fromIndex index of the first bit to include. @param toIndex index after the last bit to include. @return a new BitSet from a range of this BitSet. @exception IndexOutOfBoundsException if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex. @since 1.4
method,java/util/BitSet/nextSetBit/int, Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit exists then -1 is returned. To iterate over the true bits in a BitSet, use the following loop: for (int i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i+1)) { // operate on index i here } @param fromIndex the index to start checking from (inclusive). @return the index of the next set bit. @throws IndexOutOfBoundsException if the specified index is negative. @since 1.4
method,java/util/BitSet/nextClearBit/int, Returns the index of the first bit that is set to false that occurs on or after the specified starting index. @param fromIndex the index to start checking from (inclusive). @return the index of the next clear bit. @throws IndexOutOfBoundsException if the specified index is negative. @since 1.4
method,java/util/BitSet/and/BitSet, Performs a logical AND of this target bit set with the argument bit set. This bit set is modified so that each bit in it has the value true if and only if it both initially had the value true and the corresponding bit in the bit set argument also had the value true. @param set a bit set.
method,java/util/BitSet/or/BitSet, Performs a logical OR of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value true if and only if it either already had the value true or the corresponding bit in the bit set argument has the value true. @param set a bit set.
method,java/util/BitSet/xor/BitSet, Performs a logical XOR of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value true if and only if one of the following statements holds: The bit initially has the value true, and the corresponding bit in the argument has the value false. The bit initially has the value false, and the corresponding bit in the argument has the value true. @param set a bit set.
method,java/util/BitSet/hashCode/, Returns a hash code value for this bit set. The hash code depends only on which bits have been set within this BitSet. The algorithm used to compute it may be described as follows. Suppose the bits in the BitSet were to be stored in an array of long integers called, say, words, in such a manner that bit k is set in the BitSet (for nonnegative values of k) if and only if the expression ((k&gt;&gt;6) &lt; words.length) && ((words[k&gt;&gt;6] & (1L &lt;&lt; (bit & 0x3F))) != 0) is true. Then the following definition of the hashCode method would be a correct implementation of the actual algorithm: public int hashCode() { long h = 1234; for (int i = words.length; --i &gt;= 0; ) { h ^= words[i] * (i + 1); } return (int)((h &gt;&gt; 32) ^ h); } Note that the hash code values change if the set of bits is altered. Overrides the hashCode method of Object. @return a hash code value for this bit set.
method,java/util/BitSet/equals/Object, Compares this object against the specified object. The result is true if and only if the argument is not null and is a Bitset object that has exactly the same set of bits set to true as this bit set. That is, for every nonnegative int index k, ((BitSet)obj).get(k) == this.get(k) must be true. The current sizes of the two bit sets are not compared. Overrides the equals method of Object. @param obj the object to compare with. @return true if the objects are the same; false otherwise. @see java.util.BitSet#size()
method,java/util/BitSet/clone/, Cloning this BitSet produces a new BitSet that is equal to it. The clone of the bit set is another bit set that has exactly the same bits set to true as this bit set. Overrides the clone method of Object. @return a clone of this bit set. @see java.util.BitSet#size()
method,java/util/BitSet/toString/, Returns a string representation of this bit set. For every index for which this BitSet contains a bit in the set state, the decimal representation of that index is included in the result. Such indices are listed in order from lowest to highest, separated by ,&nbsp; (a comma and a space) and surrounded by braces, resulting in the usual mathematical notation for a set of integers. Overrides the toString method of Object. Example: BitSet drPepper = new BitSet(); Now drPepper.toString() returns {}. drPepper.set(2); Now drPepper.toString() returns {2}. drPepper.set(4); drPepper.set(10); Now drPepper.toString() returns {2, 4, 10}. @return a string representation of this bit set.
class,java/util/Arrays, This class contains various methods for manipulating arrays (such as sorting and searching). This class also contains a static factory that allows arrays to be viewed as lists. The methods in this class all throw a NullPointerException if the specified array reference is null, except where noted. The documentation for the methods contained in this class includes briefs description of the implementations. Such descriptions should be regarded as implementation notes, rather than parts of the specification. Implementors should feel free to substitute other algorithms, so long as the specification itself is adhered to. (For example, the algorithm used by sort(Object[]) does not have to be a mergesort, but it does have to be stable.) This class is a member of the Java Collections Framework. @author Josh Bloch @author Neal Gafter @author John Rose @version 1.72, 03/23/10 @since 1.2
method,java/util/Arrays/sort/long[], Sorts the specified array of longs into ascending numerical order. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted
method,java/util/Arrays/sort/long[];int;int, Sorts the specified range of the specified array of longs into ascending numerical order. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted @param fromIndex the index of the first element (inclusive) to be sorted @param toIndex the index of the last element (exclusive) to be sorted @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or toIndex &gt; a.length
method,java/util/Arrays/sort/int[], Sorts the specified array of ints into ascending numerical order. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted
method,java/util/Arrays/sort/int[];int;int, Sorts the specified range of the specified array of ints into ascending numerical order. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted @param fromIndex the index of the first element (inclusive) to be sorted @param toIndex the index of the last element (exclusive) to be sorted @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/sort/short[], Sorts the specified array of shorts into ascending numerical order. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted
method,java/util/Arrays/sort/short[];int;int, Sorts the specified range of the specified array of shorts into ascending numerical order. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted @param fromIndex the index of the first element (inclusive) to be sorted @param toIndex the index of the last element (exclusive) to be sorted @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/sort/char[], Sorts the specified array of chars into ascending numerical order. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted
method,java/util/Arrays/sort/char[];int;int, Sorts the specified range of the specified array of chars into ascending numerical order. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted @param fromIndex the index of the first element (inclusive) to be sorted @param toIndex the index of the last element (exclusive) to be sorted @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/sort/byte[], Sorts the specified array of bytes into ascending numerical order. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted
method,java/util/Arrays/sort/byte[];int;int, Sorts the specified range of the specified array of bytes into ascending numerical order. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted @param fromIndex the index of the first element (inclusive) to be sorted @param toIndex the index of the last element (exclusive) to be sorted @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/sort/double[], Sorts the specified array of doubles into ascending numerical order. The &lt; relation does not provide a total order on all floating-point values; although they are distinct numbers -0.0 == 0.0 is true and a NaN value compares neither less than, greater than, nor equal to any floating-point value, even itself. To allow the sort to proceed, instead of using the &lt; relation to determine ascending numerical order, this method uses the total order imposed by {@link Double#compareTo}. This ordering differs from the &lt; relation in that -0.0 is treated as less than 0.0 and NaN is considered greater than any other floating-point value. For the purposes of sorting, all NaN values are considered equivalent and equal. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted
method,java/util/Arrays/sort/double[];int;int, Sorts the specified range of the specified array of doubles into ascending numerical order. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) The &lt; relation does not provide a total order on all floating-point values; although they are distinct numbers -0.0 == 0.0 is true and a NaN value compares neither less than, greater than, nor equal to any floating-point value, even itself. To allow the sort to proceed, instead of using the &lt; relation to determine ascending numerical order, this method uses the total order imposed by {@link Double#compareTo}. This ordering differs from the &lt; relation in that -0.0 is treated as less than 0.0 and NaN is considered greater than any other floating-point value. For the purposes of sorting, all NaN values are considered equivalent and equal. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted @param fromIndex the index of the first element (inclusive) to be sorted @param toIndex the index of the last element (exclusive) to be sorted @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/sort/float[], Sorts the specified array of floats into ascending numerical order. The &lt; relation does not provide a total order on all floating-point values; although they are distinct numbers -0.0f == 0.0f is true and a NaN value compares neither less than, greater than, nor equal to any floating-point value, even itself. To allow the sort to proceed, instead of using the &lt; relation to determine ascending numerical order, this method uses the total order imposed by {@link Float#compareTo}. This ordering differs from the &lt; relation in that -0.0f is treated as less than 0.0f and NaN is considered greater than any other floating-point value. For the purposes of sorting, all NaN values are considered equivalent and equal. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted
method,java/util/Arrays/sort/float[];int;int, Sorts the specified range of the specified array of floats into ascending numerical order. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) The &lt; relation does not provide a total order on all floating-point values; although they are distinct numbers -0.0f == 0.0f is true and a NaN value compares neither less than, greater than, nor equal to any floating-point value, even itself. To allow the sort to proceed, instead of using the &lt; relation to determine ascending numerical order, this method uses the total order imposed by {@link Float#compareTo}. This ordering differs from the &lt; relation in that -0.0f is treated as less than 0.0f and NaN is considered greater than any other floating-point value. For the purposes of sorting, all NaN values are considered equivalent and equal. The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's Engineering a Sort Function, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. @param a the array to be sorted @param fromIndex the index of the first element (inclusive) to be sorted @param toIndex the index of the last element (exclusive) to be sorted @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/binarySearch/long[];int;int;long, Searches a range of the specified array of longs for the specified value using the binary search algorithm. The range must be sorted (as by the {@link #sort(long[], int, int)} method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found. @param a the array to be searched @param fromIndex the index of the first element (inclusive) to be		searched @param toIndex the index of the last element (exclusive) to be searched @param key the value to be searched for @return index of the search key, if it is contained in the array	 within the specified range;	 otherwise, (-(insertion point) - 1). The	 insertion point is defined as the point at which the	 key would be inserted into the array: the index of the first	 element in the range greater than the key,	 or toIndex if all	 elements in the range are less than the specified key. Note	 that this guarantees that the return value will be &gt;= 0 if	 and only if the key is found. @throws IllegalArgumentException	 if {@code fromIndex > toIndex} @throws ArrayIndexOutOfBoundsException	 if {@code fromIndex a.length} @since 1.6
method,java/util/Arrays/binarySearch/int[];int;int;int, Searches a range of the specified array of ints for the specified value using the binary search algorithm. The range must be sorted (as by the {@link #sort(int[], int, int)} method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found. @param a the array to be searched @param fromIndex the index of the first element (inclusive) to be		searched @param toIndex the index of the last element (exclusive) to be searched @param key the value to be searched for @return index of the search key, if it is contained in the array	 within the specified range;	 otherwise, (-(insertion point) - 1). The	 insertion point is defined as the point at which the	 key would be inserted into the array: the index of the first	 element in the range greater than the key,	 or toIndex if all	 elements in the range are less than the specified key. Note	 that this guarantees that the return value will be &gt;= 0 if	 and only if the key is found. @throws IllegalArgumentException	 if {@code fromIndex > toIndex} @throws ArrayIndexOutOfBoundsException	 if {@code fromIndex a.length} @since 1.6
method,java/util/Arrays/binarySearch/short[];int;int;short, Searches a range of the specified array of shorts for the specified value using the binary search algorithm. The range must be sorted (as by the {@link #sort(short[], int, int)} method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found. @param a the array to be searched @param fromIndex the index of the first element (inclusive) to be		searched @param toIndex the index of the last element (exclusive) to be searched @param key the value to be searched for @return index of the search key, if it is contained in the array	 within the specified range;	 otherwise, (-(insertion point) - 1). The	 insertion point is defined as the point at which the	 key would be inserted into the array: the index of the first	 element in the range greater than the key,	 or toIndex if all	 elements in the range are less than the specified key. Note	 that this guarantees that the return value will be &gt;= 0 if	 and only if the key is found. @throws IllegalArgumentException	 if {@code fromIndex > toIndex} @throws ArrayIndexOutOfBoundsException	 if {@code fromIndex a.length} @since 1.6
method,java/util/Arrays/binarySearch/byte[];byte, Searches the specified array of bytes for the specified value using the binary search algorithm. The array must be sorted (as by the {@link #sort(byte[])} method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found. @param a the array to be searched @param key the value to be searched for @return index of the search key, if it is contained in the array;	 otherwise, (-(insertion point) - 1). The	 insertion point is defined as the point at which the	 key would be inserted into the array: the index of the first	 element greater than the key, or a.length if all	 elements in the array are less than the specified key. Note	 that this guarantees that the return value will be &gt;= 0 if	 and only if the key is found.
method,java/util/Arrays/binarySearch/float[];float, Searches the specified array of floats for the specified value using the binary search algorithm. The array must be sorted (as by the {@link #sort(float[])} method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal. @param a the array to be searched @param key the value to be searched for @return index of the search key, if it is contained in the array;	 otherwise, (-(insertion point) - 1). The	 insertion point is defined as the point at which the	 key would be inserted into the array: the index of the first	 element greater than the key, or a.length if all	 elements in the array are less than the specified key. Note	 that this guarantees that the return value will be &gt;= 0 if	 and only if the key is found.
method,java/util/Arrays/fill/long[];int;int;long, Assigns the specified long value to each element of the specified range of the specified array of longs. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/fill/int[];int;int;int, Assigns the specified int value to each element of the specified range of the specified array of ints. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/fill/short[];int;int;short, Assigns the specified short value to each element of the specified range of the specified array of shorts. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/fill/char[];int;int;char, Assigns the specified char value to each element of the specified range of the specified array of chars. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/fill/byte[];int;int;byte, Assigns the specified byte value to each element of the specified range of the specified array of bytes. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/fill/boolean[];int;int;boolean, Assigns the specified boolean value to each element of the specified range of the specified array of booleans. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/fill/double[];int;int;double, Assigns the specified double value to each element of the specified range of the specified array of doubles. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/fill/float[];int;int;float, Assigns the specified float value to each element of the specified range of the specified array of floats. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length
method,java/util/Arrays/fill/Object[];int;int;Object, Assigns the specified Object reference to each element of the specified range of the specified array of Objects. The range to be filled extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be filled is empty.) @param a the array to be filled @param fromIndex the index of the first element (inclusive) to be filled with the specified value @param toIndex the index of the last element (exclusive) to be filled with the specified value @param val the value to be stored in all elements of the array @throws IllegalArgumentException if fromIndex &gt; toIndex @throws ArrayIndexOutOfBoundsException if fromIndex &lt; 0 or	 toIndex &gt; a.length @throws ArrayStoreException if the specified value is not of a runtime type that can be stored in the specified array
method,java/util/Arrays/copyOf/Object[];int, Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain null. Such indices will exist if and only if the specified length is greater than that of the original array. The resulting array is of exactly the same class as the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with nulls to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/copyOf/Object[];int;Class, Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain null. Such indices will exist if and only if the specified length is greater than that of the original array. The resulting array is of the class newType. @param original the array to be copied @param newLength the length of the copy to be returned @param newType the class of the copy to be returned @return a copy of the original array, truncated or padded with nulls to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @throws ArrayStoreException if an element copied from original is not of a runtime type that can be stored in an array of class newType @since 1.6
method,java/util/Arrays/copyOf/byte[];int, Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain (byte)0. Such indices will exist if and only if the specified length is greater than that of the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with zeros to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/copyOf/short[];int, Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain (short)0. Such indices will exist if and only if the specified length is greater than that of the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with zeros to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/copyOf/int[];int, Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain 0. Such indices will exist if and only if the specified length is greater than that of the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with zeros to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/copyOf/long[];int, Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain 0L. Such indices will exist if and only if the specified length is greater than that of the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with zeros to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/copyOf/char[];int, Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain '\\u000'. Such indices will exist if and only if the specified length is greater than that of the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with null characters to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/copyOf/float[];int, Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain 0f. Such indices will exist if and only if the specified length is greater than that of the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with zeros to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/copyOf/double[];int, Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain 0d. Such indices will exist if and only if the specified length is greater than that of the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with zeros to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/copyOf/boolean[];int, Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain false. Such indices will exist if and only if the specified length is greater than that of the original array. @param original the array to be copied @param newLength the length of the copy to be returned @return a copy of the original array, truncated or padded with false elements to obtain the specified length @throws NegativeArraySizeException if newLength is negative @throws NullPointerException if original is null @since 1.6
method,java/util/Arrays/asList/Object[], Returns a fixed-size list backed by the specified array. (Changes to the returned list write through to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with {@link Collection#toArray}. The returned list is serializable and implements {@link RandomAccess}. This method also provides a convenient way to create a fixed-size list initialized to contain several elements: List&lt;String&gt; stooges = Arrays.asList(Larry, Moe, Curly); @param a the array by which the list will be backed @return a list view of the specified array
method,java/util/Arrays/hashCode/long[], Returns a hash code based on the contents of the specified array. For any two long arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is the same value that would be obtained by invoking the {@link List#hashCode() hashCode} method on a {@link List} containing a sequence of {@link Long} instances representing the elements of a in the same order. If a is null, this method returns 0. @param a the array whose hash value to compute @return a content-based hash code for a @since 1.5
method,java/util/Arrays/hashCode/int[], Returns a hash code based on the contents of the specified array. For any two non-null int arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is the same value that would be obtained by invoking the {@link List#hashCode() hashCode} method on a {@link List} containing a sequence of {@link Integer} instances representing the elements of a in the same order. If a is null, this method returns 0. @param a the array whose hash value to compute @return a content-based hash code for a @since 1.5
method,java/util/Arrays/hashCode/short[], Returns a hash code based on the contents of the specified array. For any two short arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is the same value that would be obtained by invoking the {@link List#hashCode() hashCode} method on a {@link List} containing a sequence of {@link Short} instances representing the elements of a in the same order. If a is null, this method returns 0. @param a the array whose hash value to compute @return a content-based hash code for a @since 1.5
method,java/util/Arrays/hashCode/char[], Returns a hash code based on the contents of the specified array. For any two char arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is the same value that would be obtained by invoking the {@link List#hashCode() hashCode} method on a {@link List} containing a sequence of {@link Character} instances representing the elements of a in the same order. If a is null, this method returns 0. @param a the array whose hash value to compute @return a content-based hash code for a @since 1.5
method,java/util/Arrays/hashCode/byte[], Returns a hash code based on the contents of the specified array. For any two byte arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is the same value that would be obtained by invoking the {@link List#hashCode() hashCode} method on a {@link List} containing a sequence of {@link Byte} instances representing the elements of a in the same order. If a is null, this method returns 0. @param a the array whose hash value to compute @return a content-based hash code for a @since 1.5
method,java/util/Arrays/hashCode/boolean[], Returns a hash code based on the contents of the specified array. For any two boolean arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is the same value that would be obtained by invoking the {@link List#hashCode() hashCode} method on a {@link List} containing a sequence of {@link Boolean} instances representing the elements of a in the same order. If a is null, this method returns 0. @param a the array whose hash value to compute @return a content-based hash code for a @since 1.5
method,java/util/Arrays/hashCode/float[], Returns a hash code based on the contents of the specified array. For any two float arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is the same value that would be obtained by invoking the {@link List#hashCode() hashCode} method on a {@link List} containing a sequence of {@link Float} instances representing the elements of a in the same order. If a is null, this method returns 0. @param a the array whose hash value to compute @return a content-based hash code for a @since 1.5
method,java/util/Arrays/hashCode/double[], Returns a hash code based on the contents of the specified array. For any two double arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is the same value that would be obtained by invoking the {@link List#hashCode() hashCode} method on a {@link List} containing a sequence of {@link Double} instances representing the elements of a in the same order. If a is null, this method returns 0. @param a the array whose hash value to compute @return a content-based hash code for a @since 1.5
method,java/util/Arrays/hashCode/Object[], Returns a hash code based on the contents of the specified array. If the array contains other arrays as elements, the hash code is based on their identities rather than their contents. It is therefore acceptable to invoke this method on an array that contains itself as an element, either directly or indirectly through one or more levels of arrays. For any two arrays a and b such that Arrays.equals(a, b), it is also the case that Arrays.hashCode(a) == Arrays.hashCode(b). The value returned by this method is equal to the value that would be returned by Arrays.asList(a).hashCode(), unless a is null, in which case 0 is returned. @param a the array whose content-based hash code to compute @return a content-based hash code for a @see #deepHashCode(Object[]) @since 1.5
method,java/util/Arrays/deepHashCode/Object[], Returns a hash code based on the deep contents of the specified array. If the array contains other arrays as elements, the hash code is based on their contents and so on, ad infinitum. It is therefore unacceptable to invoke this method on an array that contains itself as an element, either directly or indirectly through one or more levels of arrays. The behavior of such an invocation is undefined. For any two arrays a and b such that Arrays.deepEquals(a, b), it is also the case that Arrays.deepHashCode(a) == Arrays.deepHashCode(b). The computation of the value returned by this method is similar to that of the value returned by {@link List#hashCode()} on a list containing the same elements as a in the same order, with one difference: If an element e of a is itself an array, its hash code is computed not by calling e.hashCode(), but as by calling the appropriate overloading of Arrays.hashCode(e) if e is an array of a primitive type, or as by calling Arrays.deepHashCode(e) recursively if e is an array of a reference type. If a is null, this method returns 0. @param a the array whose deep-content-based hash code to compute @return a deep-content-based hash code for a @see #hashCode(Object[]) @since 1.5
method,java/util/Arrays/deepEquals/Object[];Object[], Returns true if the two specified arrays are deeply equal to one another. Unlike the {@link #equals(Object[],Object[])} method, this method is appropriate for use with nested arrays of arbitrary depth. Two array references are considered deeply equal if both are null, or if they refer to arrays that contain the same number of elements and all corresponding pairs of elements in the two arrays are deeply equal. Two possibly null elements e1 and e2 are deeply equal if any of the following conditions hold: e1 and e2 are both arrays of object reference types, and Arrays.deepEquals(e1, e2) would return true e1 and e2 are arrays of the same primitive type, and the appropriate overloading of Arrays.equals(e1, e2) would return true. e1 == e2 e1.equals(e2) would return true. Note that this definition permits null elements at any depth. If either of the specified arrays contain themselves as elements either directly or indirectly through one or more levels of arrays, the behavior of this method is undefined. @param a1 one array to be tested for equality @param a2 the other array to be tested for equality @return true if the two arrays are equal @see #equals(Object[],Object[]) @since 1.5
method,java/util/Arrays/toString/Object[], Returns a string representation of the contents of the specified array. If the array contains other arrays as elements, they are converted to strings by the {@link Object#toString} method inherited from Object, which describes their identities rather than their contents. The value returned by this method is equal to the value that would be returned by Arrays.asList(a).toString(), unless a is null, in which case null is returned. @param a the array whose string representation to return @return a string representation of a @see #deepToString(Object[]) @since 1.5
method,java/util/Arrays/deepToString/Object[], Returns a string representation of the deep contents of the specified array. If the array contains other arrays as elements, the string representation contains their contents and so on. This method is designed for converting multidimensional arrays to strings. The string representation consists of a list of the array's elements, enclosed in square brackets ([]). Adjacent elements are separated by the characters , (a comma followed by a space). Elements are converted to strings as by String.valueOf(Object), unless they are themselves arrays. If an element e is an array of a primitive type, it is converted to a string as by invoking the appropriate overloading of Arrays.toString(e). If an element e is an array of a reference type, it is converted to a string as by invoking this method recursively. To avoid infinite recursion, if the specified array contains itself as an element, or contains an indirect reference to itself through one or more levels of arrays, the self-reference is converted to the string [...]. For example, an array containing only a reference to itself would be rendered as [[...]]. This method returns null if the specified array is null. @param a the array whose string representation to return @return a string representation of a @see #toString(Object[]) @since 1.5
method,java/util/ArrayList/ensureCapacity/int, Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument. @param minCapacity the desired minimum capacity
method,java/util/ArrayList/contains/Object, Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)). @param o element whose presence in this list is to be tested @return true if this list contains the specified element
method,java/util/ArrayList/get/int, Returns the element at the specified position in this list. @param index index of the element to return @return the element at the specified position in this list @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/ArrayList/set/int;Object, Replaces the element at the specified position in this list with the specified element. @param index index of the element to replace @param element element to be stored at the specified position @return the element previously at the specified position @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/ArrayList/add/int;Object, Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). @param index index at which the specified element is to be inserted @param element element to be inserted @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/ArrayList/remove/int, Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices). @param index the index of the element to be removed @return the element that was removed from the list @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/ArrayList/remove/Object, Removes the first occurrence of the specified element from this list, if it is present. If the list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call). @param o element to be removed from this list, if present @return true if this list contained the specified element
method,java/util/ArrayList/clear/, Removes all of the elements from this list. The list will be empty after this call returns.
method,java/util/ArrayList/addAll/Collection, Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty.) @param c collection containing elements to be added to this list @return true if this list changed as a result of the call @throws NullPointerException if the specified collection is null
method,java/util/ArrayList/addAll/int;Collection, Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator. @param index index at which to insert the first element from the specified collection @param c collection containing elements to be added to this list @return true if this list changed as a result of the call @throws IndexOutOfBoundsException {@inheritDoc} @throws NullPointerException if the specified collection is null
method,java/util/ArrayList/removeRange/int;int, Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.) @param fromIndex index of first element to be removed @param toIndex index after last element to be removed @throws IndexOutOfBoundsException if fromIndex or toIndex out of range (fromIndex &lt; 0 || fromIndex &gt;= size() || toIndex &gt; size() || toIndex &lt; fromIndex)
method,java/util/ArrayDeque/removeFirst/, @throws NoSuchElementException {@inheritDoc}
method,java/util/ArrayDeque/removeLast/, @throws NoSuchElementException {@inheritDoc}
method,java/util/ArrayDeque/getFirst/, @throws NoSuchElementException {@inheritDoc}
method,java/util/ArrayDeque/getLast/, @throws NoSuchElementException {@inheritDoc}
method,java/util/ArrayDeque/removeFirstOccurrence/Object, Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). @param o element to be removed from this deque, if present @return true if the deque contained the specified element
method,java/util/ArrayDeque/removeLastOccurrence/Object, Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). @param o element to be removed from this deque, if present @return true if the deque contained the specified element
method,java/util/ArrayDeque/remove/, Retrieves and removes the head of the queue represented by this deque. This method differs from {@link #poll poll} only in that it throws an exception if this deque is empty. This method is equivalent to {@link #removeFirst}. @return the head of the queue represented by this deque @throws NoSuchElementException {@inheritDoc}
method,java/util/ArrayDeque/element/, Retrieves, but does not remove, the head of the queue represented by this deque. This method differs from {@link #peek peek} only in that it throws an exception if this deque is empty. This method is equivalent to {@link #getFirst}. @return the head of the queue represented by this deque @throws NoSuchElementException {@inheritDoc}
method,java/util/ArrayDeque/pop/, Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to {@link #removeFirst()}. @return the element at the front of this deque (which is the top of the stack represented by this deque) @throws NoSuchElementException {@inheritDoc}
method,java/util/ArrayDeque/iterator/, Returns an iterator over the elements in this deque. The elements will be ordered from first (head) to last (tail). This is the same order that elements would be dequeued (via successive calls to {@link #remove} or popped (via successive calls to {@link #pop}). @return an iterator over the elements in this deque
method,java/util/ArrayDeque/contains/Object, Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that o.equals(e). @param o object to be checked for containment in this deque @return true if this deque contains the specified element
method,java/util/ArrayDeque/remove/Object, Removes a single instance of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to {@link #removeFirstOccurrence}. @param o element to be removed from this deque, if present @return true if this deque contained the specified element
method,java/util/ArrayDeque/clear/, Removes all of the elements from this deque. The deque will be empty after this call returns.
method,java/util/ArrayDeque/toArray/Object[], Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the deque fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to null. Like the {@link #toArray()} method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of String: String[] y = x.toArray(new String[0]); Note that toArray(new Object[0]) is identical in function to toArray(). @param a the array into which the elements of the deque are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose @return an array containing all of the elements in this deque @throws ArrayStoreException if the runtime type of the specified array is not a supertype of the runtime type of every element in this deque @throws NullPointerException if the specified array is null
method,java/util/AbstractSet/hashCode/, Returns the hash code value for this set. The hash code of a set is defined to be the sum of the hash codes of the elements in the set, where the hash code of a null element is defined to be zero. This ensures that s1.equals(s2) implies that s1.hashCode()==s2.hashCode() for any two sets s1 and s2, as required by the general contract of {@link Object#hashCode}. This implementation iterates over the set, calling the hashCode method on each element in the set, and adding up the results. @return the hash code value for this set @see Object#equals(Object) @see Set#equals(Object)
method,java/util/AbstractSet/removeAll/Collection, Removes from this set all of its elements that are contained in the specified collection (optional operation). If the specified collection is also a set, this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets. This implementation determines which is the smaller of this set and the specified collection, by invoking the size method on each. If this set has fewer elements, then the implementation iterates over this set, checking each element returned by the iterator in turn to see if it is contained in the specified collection. If it is so contained, it is removed from this set with the iterator's remove method. If the specified collection has fewer elements, then the implementation iterates over the specified collection, removing from this set each element returned by the iterator, using this set's remove method. Note that this implementation will throw an UnsupportedOperationException if the iterator returned by the iterator method does not implement the remove method. @param c collection containing elements to be removed from this set @return true if this set changed as a result of the call @throws UnsupportedOperationException if the removeAll operation is not supported by this set @throws ClassCastException if the class of an element of this set is incompatible with the specified collection (optional) @throws NullPointerException if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object) @see #contains(Object)
method,java/util/AbstractSet/AbstractSet/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/util/AbstractSequentialList/get/int, Returns the element at the specified position in this list. This implementation first gets a list iterator pointing to the indexed element (with listIterator(index)). Then, it gets the element using ListIterator.next and returns it. @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractSequentialList/set/int;Object, Replaces the element at the specified position in this list with the specified element (optional operation). This implementation first gets a list iterator pointing to the indexed element (with listIterator(index)). Then, it gets the current element using ListIterator.next and replaces it with ListIterator.set. Note that this implementation will throw an UnsupportedOperationException if the list iterator does not implement the set operation. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractSequentialList/add/int;Object, Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). This implementation first gets a list iterator pointing to the indexed element (with listIterator(index)). Then, it inserts the specified element with ListIterator.add. Note that this implementation will throw an UnsupportedOperationException if the list iterator does not implement the add operation. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractSequentialList/remove/int, Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list. This implementation first gets a list iterator pointing to the indexed element (with listIterator(index)). Then, it removes the element with ListIterator.remove. Note that this implementation will throw an UnsupportedOperationException if the list iterator does not implement the remove operation. @throws UnsupportedOperationException {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractSequentialList/addAll/int;Collection, Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.) This implementation gets an iterator over the specified collection and a list iterator over this list pointing to the indexed element (with listIterator(index)). Then, it iterates over the specified collection, inserting the elements obtained from the iterator into this list, one at a time, using ListIterator.add followed by ListIterator.next (to skip over the added element). Note that this implementation will throw an UnsupportedOperationException if the list iterator returned by the listIterator method does not implement the add operation. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractSequentialList/listIterator/int, Returns a list iterator over the elements in this list (in proper sequence). @param index index of first element to be returned from the list iterator (by a call to the next method) @return a list iterator over the elements in this list (in proper sequence) @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractSequentialList/AbstractSequentialList/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/util/AbstractQueue/remove/, Retrieves and removes the head of this queue. This method differs from {@link #poll poll} only in that it throws an exception if this queue is empty. This implementation returns the result of poll unless the queue is empty. @return the head of this queue @throws NoSuchElementException if this queue is empty
method,java/util/AbstractQueue/element/, Retrieves, but does not remove, the head of this queue. This method differs from {@link #peek peek} only in that it throws an exception if this queue is empty. This implementation returns the result of peek unless the queue is empty. @return the head of this queue @throws NoSuchElementException if this queue is empty
method,java/util/AbstractQueue/clear/, Removes all of the elements from this queue. The queue will be empty after this call returns. This implementation repeatedly invokes {@link #poll poll} until it returns null.
method,java/util/AbstractQueue/AbstractQueue/, Constructor for use by subclasses.
method,java/util/AbstractMap/size/, {@inheritDoc} This implementation returns entrySet().size().
method,java/util/AbstractMap/isEmpty/, {@inheritDoc} This implementation returns size() == 0.
method,java/util/AbstractMap/put/Object;Object, {@inheritDoc} This implementation always throws an UnsupportedOperationException. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/AbstractMap/putAll/Map, {@inheritDoc} This implementation iterates over the specified map's entrySet() collection, and calls this map's put operation once for each entry returned by the iteration. Note that this implementation throws an UnsupportedOperationException if this map does not support the put operation and the specified map is nonempty. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/AbstractMap/clear/, {@inheritDoc} This implementation calls entrySet().clear(). Note that this implementation throws an UnsupportedOperationException if the entrySet does not support the clear operation. @throws UnsupportedOperationException {@inheritDoc}
method,java/util/AbstractMap/keySet/, {@inheritDoc} This implementation returns a set that subclasses {@link AbstractSet}. The subclass's iterator method returns a wrapper object over this map's entrySet() iterator. The size method delegates to this map's size method and the contains method delegates to this map's containsKey method. The set is created the first time this method is called, and returned in response to all subsequent calls. No synchronization is performed, so there is a slight chance that multiple calls to this method will not all return the same set.
method,java/util/AbstractMap/values/, {@inheritDoc} This implementation returns a collection that subclasses {@link AbstractCollection}. The subclass's iterator method returns a wrapper object over this map's entrySet() iterator. The size method delegates to this map's size method and the contains method delegates to this map's containsValue method. The collection is created the first time this method is called, and returned in response to all subsequent calls. No synchronization is performed, so there is a slight chance that multiple calls to this method will not all return the same collection.
method,java/util/AbstractMap/hashCode/, Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map's entrySet() view. This ensures that m1.equals(m2) implies that m1.hashCode()==m2.hashCode() for any two maps m1 and m2, as required by the general contract of {@link Object#hashCode}. This implementation iterates over entrySet(), calling {@link Map.Entry#hashCode hashCode()} on each element (entry) in the set, and adding up the results. @return the hash code value for this map @see Map.Entry#hashCode() @see Object#equals(Object) @see Set#equals(Object)
method,java/util/AbstractMap/AbstractMap/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
class,java/util/AbstractMap/SimpleEntry, An Entry maintaining a key and a value. The value may be changed using the setValue method. This class facilitates the process of building custom map implementations. For example, it may be convenient to return arrays of SimpleEntry instances in method Map.entrySet().toArray. @since 1.6
method,java/util/AbstractMap/SimpleEntry/hashCode/, Returns the hash code value for this map entry. The hash code of a map entry {@code e} is defined to be: (e.getKey()==null ? 0 : e.getKey().hashCode()) ^ (e.getValue()==null ? 0 : e.getValue().hashCode()) This ensures that {@code e1.equals(e2)} implies that {@code e1.hashCode()==e2.hashCode()} for any two Entries {@code e1} and {@code e2}, as required by the general contract of {@link Object#hashCode}. @return the hash code value for this map entry @see #equals
class,java/util/AbstractMap/SimpleImmutableEntry, An Entry maintaining an immutable key and value. This class does not support method setValue. This class may be convenient in methods that return thread-safe snapshots of key-value mappings. @since 1.6
method,java/util/AbstractMap/SimpleImmutableEntry/hashCode/, Returns the hash code value for this map entry. The hash code of a map entry {@code e} is defined to be: (e.getKey()==null ? 0 : e.getKey().hashCode()) ^ (e.getValue()==null ? 0 : e.getValue().hashCode()) This ensures that {@code e1.equals(e2)} implies that {@code e1.hashCode()==e2.hashCode()} for any two Entries {@code e1} and {@code e2}, as required by the general contract of {@link Object#hashCode}. @return the hash code value for this map entry @see #equals
method,java/util/AbstractList/get/int, {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractList/set/int;Object, {@inheritDoc} This implementation always throws an {@code UnsupportedOperationException}. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractList/add/int;Object, {@inheritDoc} This implementation always throws an {@code UnsupportedOperationException}. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractList/remove/int, {@inheritDoc} This implementation always throws an {@code UnsupportedOperationException}. @throws UnsupportedOperationException {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/AbstractList/indexOf/Object, {@inheritDoc} This implementation first gets a list iterator (with {@code listIterator()}). Then, it iterates over the list until the specified element is found or the end of the list is reached. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/AbstractList/lastIndexOf/Object, {@inheritDoc} This implementation first gets a list iterator that points to the end of the list (with {@code listIterator(size())}). Then, it iterates backwards over the list until the specified element is found, or the beginning of the list is reached. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/AbstractList/iterator/, Returns an iterator over the elements in this list in proper sequence. This implementation returns a straightforward implementation of the iterator interface, relying on the backing list's {@code size()}, {@code get(int)}, and {@code remove(int)} methods. Note that the iterator returned by this method will throw an {@code UnsupportedOperationException} in response to its {@code remove} method unless the list's {@code remove(int)} method is overridden. This implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) {@code modCount} field. @return an iterator over the elements in this list in proper sequence @see #modCount
method,java/util/AbstractList/listIterator/, {@inheritDoc} This implementation returns {@code listIterator(0)}. @see #listIterator(int)
method,java/util/AbstractList/listIterator/int, {@inheritDoc} This implementation returns a straightforward implementation of the {@code ListIterator} interface that extends the implementation of the {@code Iterator} interface returned by the {@code iterator()} method. The {@code ListIterator} implementation relies on the backing list's {@code get(int)}, {@code set(int, E)}, {@code add(int, E)} and {@code remove(int)} methods. Note that the list iterator returned by this implementation will throw an {@code UnsupportedOperationException} in response to its {@code remove}, {@code set} and {@code add} methods unless the list's {@code remove(int)}, {@code set(int, E)}, and {@code add(int, E)} methods are overridden. This implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) {@code modCount} field. @throws IndexOutOfBoundsException {@inheritDoc} @see #modCount
method,java/util/AbstractList/subList/int;int, {@inheritDoc} This implementation returns a list that subclasses {@code AbstractList}. The subclass stores, in private fields, the offset of the subList within the backing list, the size of the subList (which can change over its lifetime), and the expected {@code modCount} value of the backing list. There are two variants of the subclass, one of which implements {@code RandomAccess}. If this list implements {@code RandomAccess} the returned list will be an instance of the subclass that implements {@code RandomAccess}. The subclass's {@code set(int, E)}, {@code get(int)}, {@code add(int, E)}, {@code remove(int)}, {@code addAll(int, Collection)} and {@code removeRange(int, int)} methods all delegate to the corresponding methods on the backing abstract list, after bounds-checking the index and adjusting for the offset. The {@code addAll(Collection c)} method merely returns {@code addAll(size, c)}. The {@code listIterator(int)} method returns a wrapper object over a list iterator on the backing list, which is created with the corresponding method on the backing list. The {@code iterator} method merely returns {@code listIterator()}, and the {@code size} method merely returns the subclass's {@code size} field. All methods first check to see if the actual {@code modCount} of the backing list is equal to its expected value, and throw a {@code ConcurrentModificationException} if it is not. @throws IndexOutOfBoundsException endpoint index value out of range {@code (fromIndex size)} @throws IllegalArgumentException if the endpoint indices are out of order {@code (fromIndex > toIndex)}
method,java/util/AbstractList/equals/Object, Compares the specified object with this list for equality. Returns {@code true} if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are equal. (Two elements {@code e1} and {@code e2} are equal if {@code (e1==null ? e2==null : e1.equals(e2))}.) In other words, two lists are defined to be equal if they contain the same elements in the same order. This implementation first checks if the specified object is this list. If so, it returns {@code true}; if not, it checks if the specified object is a list. If not, it returns {@code false}; if so, it iterates over both lists, comparing corresponding pairs of elements. If any comparison returns {@code false}, this method returns {@code false}. If either iterator runs out of elements before the other it returns {@code false} (as the lists are of unequal length); otherwise it returns {@code true} when the iterations complete. @param o the object to be compared for equality with this list @return {@code true} if the specified object is equal to this list
method,java/util/AbstractList/removeRange/int;int, Removes from this list all of the elements whose index is between {@code fromIndex}, inclusive, and {@code toIndex}, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the ArrayList by {@code (toIndex - fromIndex)} elements. (If {@code toIndex==fromIndex}, this operation has no effect.) This method is called by the {@code clear} operation on this list and its subLists. Overriding this method to take advantage of the internals of the list implementation can substantially improve the performance of the {@code clear} operation on this list and its subLists. This implementation gets a list iterator positioned before {@code fromIndex}, and repeatedly calls {@code ListIterator.next} followed by {@code ListIterator.remove} until the entire range has been removed. Note: if {@code ListIterator.remove} requires linear time, this implementation requires quadratic time. @param fromIndex index of first element to be removed @param toIndex index after last element to be removed
method,java/util/AbstractList/AbstractList/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
field,java/util/AbstractList/modCount, The number of times this list has been structurally modified. Structural modifications are those that change the size of the list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results. This field is used by the iterator and list iterator implementation returned by the {@code iterator} and {@code listIterator} methods. If the value of this field changes unexpectedly, the iterator (or list iterator) will throw a {@code ConcurrentModificationException} in response to the {@code next}, {@code remove}, {@code previous}, {@code set} or {@code add} operations. This provides fail-fast behavior, rather than non-deterministic behavior in the face of concurrent modification during iteration. Use of this field by subclasses is optional. If a subclass wishes to provide fail-fast iterators (and list iterators), then it merely has to increment this field in its {@code add(int, E)} and {@code remove(int)} methods (and any other methods that it overrides that result in structural modifications to the list). A single call to {@code add(int, E)} or {@code remove(int)} must add no more than one to this field, or the iterators (and list iterators) will throw bogus {@code ConcurrentModificationExceptions}. If an implementation does not wish to provide fail-fast iterators, this field may be ignored.
method,java/util/AbstractCollection/isEmpty/, {@inheritDoc} This implementation returns size() == 0.
method,java/util/AbstractCollection/contains/Object, {@inheritDoc} This implementation iterates over the elements in the collection, checking each element in turn for equality with the specified element. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/AbstractCollection/toArray/, {@inheritDoc} This implementation returns an array containing all the elements returned by this collection's iterator, in the same order, stored in consecutive elements of the array, starting with index {@code 0}. The length of the returned array is equal to the number of elements returned by the iterator, even if the size of this collection changes during iteration, as might happen if the collection permits concurrent modification during iteration. The {@code size} method is called only as an optimization hint; the correct result is returned even if the iterator returns a different number of elements. This method is equivalent to: {@code List list = new ArrayList(size()); for (E e : this) list.add(e); return list.toArray(); }
method,java/util/AbstractCollection/toArray/Object[], {@inheritDoc} This implementation returns an array containing all the elements returned by this collection's iterator in the same order, stored in consecutive elements of the array, starting with index {@code 0}. If the number of elements returned by the iterator is too large to fit into the specified array, then the elements are returned in a newly allocated array with length equal to the number of elements returned by the iterator, even if the size of this collection changes during iteration, as might happen if the collection permits concurrent modification during iteration. The {@code size} method is called only as an optimization hint; the correct result is returned even if the iterator returns a different number of elements. This method is equivalent to: {@code List list = new ArrayList(size()); for (E e : this) list.add(e); return list.toArray(a); } @throws ArrayStoreException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/AbstractCollection/add/Object, {@inheritDoc} This implementation always throws an UnsupportedOperationException. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc} @throws IllegalStateException {@inheritDoc}
method,java/util/AbstractCollection/remove/Object, {@inheritDoc} This implementation iterates over the collection looking for the specified element. If it finds the element, it removes the element from the collection using the iterator's remove method. Note that this implementation throws an UnsupportedOperationException if the iterator returned by this collection's iterator method does not implement the remove method and this collection contains the specified object. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/AbstractCollection/containsAll/Collection, {@inheritDoc} This implementation iterates over the specified collection, checking each element returned by the iterator in turn to see if it's contained in this collection. If all elements are so contained true is returned, otherwise false. @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @see #contains(Object)
method,java/util/AbstractCollection/addAll/Collection, {@inheritDoc} This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn. Note that this implementation will throw an UnsupportedOperationException unless add is overridden (assuming the specified collection is non-empty). @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc} @throws IllegalStateException {@inheritDoc} @see #add(Object)
method,java/util/AbstractCollection/removeAll/Collection, {@inheritDoc} This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection. If it's so contained, it's removed from this collection with the iterator's remove method. Note that this implementation will throw an UnsupportedOperationException if the iterator returned by the iterator method does not implement the remove method and this collection contains one or more elements in common with the specified collection. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @see #remove(Object) @see #contains(Object)
method,java/util/AbstractCollection/retainAll/Collection, {@inheritDoc} This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection. If it's not so contained, it's removed from this collection with the iterator's remove method. Note that this implementation will throw an UnsupportedOperationException if the iterator returned by the iterator method does not implement the remove method and this collection contains one or more elements not present in the specified collection. @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @see #remove(Object) @see #contains(Object)
method,java/util/AbstractCollection/AbstractCollection/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/util/logging/StreamHandler/publish/LogRecord, Format and publish a LogRecord. The StreamHandler first checks if there is an OutputStream and if the given LogRecord has at least the required log level. If not it silently returns. If so, it calls any associated Filter to check if the record should be published. If so, it calls its Formatter to format the record and then writes the result to the current output stream. If this is the first LogRecord to be written to a given OutputStream, the Formatter's head string is written to the stream before the LogRecord is written. @param record description of the log event. A null record is silently ignored and is not published
class,java/util/logging/SocketHandler, Simple network logging Handler. LogRecords are published to a network stream connection. By default the XMLFormatter class is used for formatting. Configuration: By default each SocketHandler is initialized using the following LogManager configuration properties. If properties are not defined (or have invalid values) then the specified default values are used. java.util.logging.SocketHandler.level	 specifies the default level for the Handler	 (defaults to Level.ALL). java.util.logging.SocketHandler.filter 	 specifies the name of a Filter class to use	 (defaults to no Filter). java.util.logging.SocketHandler.formatter	 specifies the name of a Formatter class to use 	 (defaults to java.util.logging.XMLFormatter). java.util.logging.SocketHandler.encoding 	 the name of the character set encoding to use (defaults to	 the default platform encoding). java.util.logging.SocketHandler.host	 specifies the target host name to connect to (no default). java.util.logging.SocketHandler.port	 specifies the target TCP port to use (no default). The output IO stream is buffered, but is flushed after each LogRecord is written. @version 1.20, 03/23/10 @since 1.4
method,java/util/logging/SocketHandler/SocketHandler/, Create a SocketHandler, using only LogManager properties (or their defaults). @throws IllegalArgumentException if the host or port are invalid or		are not specified as LogManager properties. @throws IOException if we are unable to connect to the target	 host and port.
method,java/util/logging/MemoryHandler/publish/LogRecord, Store a LogRecord in an internal buffer. If there is a Filter, its isLoggable method is called to check if the given log record is loggable. If not we return. Otherwise the given record is copied into an internal circular buffer. Then the record's level property is compared with the pushLevel. If the given level is greater than or equal to the pushLevel then push is called to write all buffered records to the target output Handler. @param record description of the log event. A null record is silently ignored and is not published
method,java/util/logging/MemoryHandler/flush/, Causes a flush on the target Handler. Note that the current contents of the MemoryHandler buffer are not written out. That requires a push.
class,java/util/logging/LoggingPermission, The permission which the SecurityManager will check when code that is running with a SecurityManager calls one of the logging control methods (such as Logger.setLevel). Currently there is only one named LoggingPermission. This is control and it grants the ability to control the logging configuration, for example by adding or removing Handlers, by adding or removing Filters, or by changing logging levels. Programmers do not normally create LoggingPermission objects directly. Instead they are created by the security policy code based on reading the security policy file. @version 1.12, 03/23/10 @since 1.4 @see java.security.BasicPermission @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @see java.lang.SecurityManager
interface,java/util/logging/LoggingMXBean, The management interface for the logging facility. There is a single global instance of the LoggingMXBean. This instance is an MXBean can be obtained by calling the {@link LogManager#getLoggingMXBean} method or from the {@link java.lang.management.ManagementFactory#getPlatformMBeanServer platform MBeanServer} method. The {@link javax.management.ObjectName ObjectName} for uniquely identifying the LoggingMXBean within an MBeanServer is: {@link LogManager#LOGGING_MXBEAN_NAME java.util.logging:type=Logging} @see java.lang.management.ManagementFactory @author Ron Mann @author Mandy Chung @version 1.10, 03/23/10 @since 1.5
method,java/util/logging/LoggingMXBean/getLoggerNames/, Returns the list of currently registered loggers. This method calls {@link LogManager#getLoggerNames} and returns a list of the logger names. @return A list of String each of which is a currently registered Logger name.
method,java/util/logging/LoggingMXBean/getLoggerLevel/String, Gets the name of the log level associated with the specified logger. If the specified logger does not exist, null is returned. This method first finds the logger of the given name and then returns the name of the log level by calling: {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()}; If the Level of the specified logger is null, which means that this logger's effective level is inherited from its parent, an empty string will be returned. @param loggerName The name of the Logger to be retrieved. @return The name of the log level of the specified logger; or an empty string if the log level of the specified logger is null. If the specified logger does not exist, null is returned. @see Logger#getLevel
method,java/util/logging/Logger/getLogger/String, Find or create a logger for a named subsystem. If a logger has already been created with the given name it is returned. Otherwise a new logger is created. If a new logger is created its log level will be configured based on the LogManager configuration and it will configured to also send logging output to its parent's handlers. It will be registered in the LogManager global namespace. @param	name		A name for the logger. This should				be a dot-separated name and should normally				be based on the package name or class name				of the subsystem, such as java.net				or javax.swing @return a suitable Logger @throws NullPointerException if the name is null.
method,java/util/logging/Logger/getLogger/String;String, Find or create a logger for a named subsystem. If a logger has already been created with the given name it is returned. Otherwise a new logger is created. If a new logger is created its log level will be configured based on the LogManager and it will configured to also send logging output to its parent loggers Handlers. It will be registered in the LogManager global namespace. If the named Logger already exists and does not yet have a localization resource bundle then the given resource bundle name is used. If the named Logger already exists and has a different resource bundle name then an IllegalArgumentException is thrown. @param	name	A name for the logger. This should				be a dot-separated name and should normally				be based on the package name or class name				of the subsystem, such as java.net				or javax.swing @param 	resourceBundleName name of ResourceBundle to be used for localizing				messages for this logger. May be null if none of 				the messages require localization. @return a suitable Logger @throws MissingResourceException if the named ResourceBundle cannot be found. @throws IllegalArgumentException if the Logger already exists and uses		 a different resource bundle name. @throws NullPointerException if the name is null.
method,java/util/logging/Logger/getAnonymousLogger/, Create an anonymous Logger. The newly created Logger is not registered in the LogManager namespace. There will be no access checks on updates to the logger. This factory method is primarily intended for use from applets. Because the resulting Logger is anonymous it can be kept private by the creating class. This removes the need for normal security checks, which in turn allows untrusted applet code to update the control state of the Logger. For example an applet can do a setLevel or an addHandler on an anonymous Logger. Even although the new logger is anonymous, it is configured to have the root logger () as its parent. This means that by default it inherits its effective level and handlers from the root logger. @return a newly created private Logger
method,java/util/logging/Logger/getAnonymousLogger/String, Create an anonymous Logger. The newly created Logger is not registered in the LogManager namespace. There will be no access checks on updates to the logger. This factory method is primarily intended for use from applets. Because the resulting Logger is anonymous it can be kept private by the creating class. This removes the need for normal security checks, which in turn allows untrusted applet code to update the control state of the Logger. For example an applet can do a setLevel or an addHandler on an anonymous Logger. Even although the new logger is anonymous, it is configured to have the root logger () as its parent. This means that by default it inherits its effective level and handlers from the root logger. @param 	resourceBundleName name of ResourceBundle to be used for localizing				messages for this logger. May be null if none of the messages require localization. @return a newly created private Logger @throws MissingResourceException if the named ResourceBundle cannot be found.
method,java/util/logging/Logger/getResourceBundle/, Retrieve the localization resource bundle for this logger for the current default locale. Note that if the result is null, then the Logger will use a resource bundle inherited from its parent. @return localization bundle (may be null)
method,java/util/logging/Logger/getResourceBundleName/, Retrieve the localization resource bundle name for this logger. Note that if the result is null, then the Logger will use a resource bundle name inherited from its parent. @return localization bundle name (may be null)
method,java/util/logging/Logger/getFilter/, Get the current filter for this Logger. @return a filter object (may be null)
method,java/util/logging/Logger/log/LogRecord, Log a LogRecord. All the other logging methods in this class call through this method to actually perform any logging. Subclasses can override this single method to capture all log activity. @param record the LogRecord to be published
method,java/util/logging/Logger/log/Level;String;Throwable, Log a message, with associated Throwable information. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus is it processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property. @param	level One of the message level identifiers, e.g. SEVERE @param msg	The string message (or a key in the message catalog) @param thrown Throwable associated with log message.
method,java/util/logging/Logger/logp/Level;String;String;String;Throwable, Log a message, specifying source class and method, with associated Throwable information. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus is it processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property. @param	level One of the message level identifiers, e.g. SEVERE @param sourceClass name of class that issued the logging request @param sourceMethod name of method that issued the logging request @param msg	The string message (or a key in the message catalog) @param thrown Throwable associated with log message.
method,java/util/logging/Logger/logrb/Level;String;String;String;String;Throwable, Log a message, specifying source class, method, and resource bundle name, with associated Throwable information. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. The msg string is localized using the named resource bundle. If the resource bundle name is null, or an empty String or invalid then the msg string is not localized. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus is it processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property. @param	level One of the message level identifiers, e.g. SEVERE @param sourceClass name of class that issued the logging request @param sourceMethod name of method that issued the logging request @param bundleName name of resource bundle to localize msg, can be null @param msg	The string message (or a key in the message catalog) @param thrown Throwable associated with log message.
method,java/util/logging/Logger/throwing/String;String;Throwable, Log throwing an exception. This is a convenience method to log that a method is terminating by throwing an exception. The logging is done using the FINER level. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. The LogRecord's message is set to THROW. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus is it processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property. @param sourceClass name of class that issued the logging request @param sourceMethod name of the method. @param thrown The Throwable that is being thrown.
method,java/util/logging/Logger/warning/String, Log a WARNING message. If the logger is currently enabled for the WARNING message level then the given message is forwarded to all the registered output Handler objects. @param msg	The string message (or a key in the message catalog)
method,java/util/logging/Logger/getLevel/, Get the log Level that has been specified for this Logger. The result may be null, which means that this logger's effective level will be inherited from its parent. @return	this Logger's level
method,java/util/logging/Logger/isLoggable/Level, Check if a message of the given level would actually be logged by this logger. This check is based on the Loggers effective level, which may be inherited from its parent. @param	level	a message logging level @return	true if the given message level is currently being logged.
method,java/util/logging/Logger/getParent/, Return the parent for this Logger. This method returns the nearest extant parent in the namespace. Thus if a Logger is called a.b.c.d, and a Logger called a.b has been created but no logger a.b.c exists, then a call of getParent on the Logger a.b.c.d will return the Logger a.b. The result will be null if it is called on the root Logger in the namespace. @return nearest existing parent Logger 
method,java/util/logging/Logger/Logger/String;String, Protected method to construct a logger for a named subsystem. The logger will be initially configured with a null Level and with useParentHandlers true. @param	name	A name for the logger. This should				be a dot-separated name and should normally				be based on the package name or class name				of the subsystem, such as java.net				or javax.swing. It may be null for anonymous Loggers. @param 	resourceBundleName name of ResourceBundle to be used for localizing				messages for this logger. May be null if none				of the messages require localization. @throws MissingResourceException if the ResourceBundleName is non-null and		 no corresponding resource can be found.
field,java/util/logging/Logger/GLOBAL_LOGGER_NAME, GLOBAL_LOGGER_NAME is a name for the global logger. This name is provided as a convenience to developers who are making casual use of the Logging package. Developers who are making serious use of the logging package (for example in products) should create and use their own Logger objects, with appropriate names, so that logging can be controlled on a suitable per-Logger granularity. The preferred way to get the global logger object is via the call Logger.getLogger(Logger.GLOBAL_LOGGER_NAME). @since 1.6
method,java/util/logging/LogRecord/getLoggerName/, Get the source Logger name's @return source logger name (may be null)
method,java/util/logging/LogRecord/setLoggerName/String, Set the source Logger name. @param name the source logger name (may be null)
method,java/util/logging/LogRecord/setResourceBundle/ResourceBundle, Set the localization resource bundle. @param bundle localization bundle (may be null)
method,java/util/logging/LogRecord/setResourceBundleName/String, Set the localization resource bundle name. @param name localization bundle name (may be null)
method,java/util/logging/LogRecord/getSourceClassName/, Get the name of the class that (allegedly) issued the logging request. Note that this sourceClassName is not verified and may be spoofed. This information may either have been provided as part of the logging call, or it may have been inferred automatically by the logging framework. In the latter case, the information may only be approximate and may in fact describe an earlier call on the stack frame. May be null if no information could be obtained. @return the source class name
method,java/util/logging/LogRecord/setSourceClassName/String, Set the name of the class that (allegedly) issued the logging request. @param sourceClassName the source class name (may be null)
method,java/util/logging/LogRecord/getSourceMethodName/, Get the name of the method that (allegedly) issued the logging request. Note that this sourceMethodName is not verified and may be spoofed. This information may either have been provided as part of the logging call, or it may have been inferred automatically by the logging framework. In the latter case, the information may only be approximate and may in fact describe an earlier call on the stack frame. May be null if no information could be obtained. @return the source method name
method,java/util/logging/LogRecord/setSourceMethodName/String, Set the name of the method that (allegedly) issued the logging request. @param sourceMethodName the source method name (may be null)
method,java/util/logging/LogRecord/getMessage/, Get the raw log message, before localization or formatting. May be null, which is equivalent to the empty string . This message may be either the final text or a localization key. During formatting, if the source logger has a localization ResourceBundle and if that ResourceBundle has an entry for this message string, then the message string is replaced with the localized value. @return the raw message string
method,java/util/logging/LogRecord/getParameters/, Get the parameters to the log message. @return the log message parameters. May be null if			there are no parameters.
method,java/util/logging/LogRecord/setParameters/Object[], Set the parameters to the log message. @param parameters the log message parameters. (may be null)
method,java/util/logging/LogRecord/getThreadID/, Get an identifier for the thread where the message originated. This is a thread identifier within the Java VM and may or may not map to any operating system ID. @return thread ID
method,java/util/logging/LogRecord/setThreadID/int, Set an identifier for the thread where the message originated. @param threadID 	the thread ID
method,java/util/logging/LogRecord/getThrown/, Get any throwable associated with the log record. If the event involved an exception, this will be the exception object. Otherwise null. @return a throwable
method,java/util/logging/LogRecord/setThrown/Throwable, Set a throwable associated with the log event. @param thrown a throwable (may be null)
method,java/util/logging/LogRecord/LogRecord/Level;String, Construct a LogRecord with the given level and message values. The sequence property will be initialized with a new unique value. These sequence values are allocated in increasing order within a VM. The millis property will be initialized to the current time. The thread ID property will be initialized with a unique ID for the current thread. All other properties will be initialized to null. @param level a logging level value @param msg the raw non-localized logging message (may be null)
method,java/util/logging/LogManager/getLogger/String, Method to find a named logger. Note that since untrusted code may create loggers with arbitrary names this method should not be relied on to find Loggers for security sensitive logging. @param name name of the logger @return matching logger or null if none is found
method,java/util/logging/LogManager/getLoggerNames/, Get an enumeration of known logger names. Note: Loggers may be added dynamically as new classes are loaded. This method only reports on the loggers that are currently registered. @return enumeration of logger name strings
method,java/util/logging/LogManager/LogManager/, Protected constructor. This is protected so that container applications (such as J2EE containers) can subclass the object. It is non-public as it is intended that there only be one LogManager object, whose value is retrieved by calling Logmanager.getLogManager.
method,java/util/logging/Level/intValue/, Get the integer value for this level. This integer value can be used for efficient ordering comparisons between Level objects. @return the integer value for this level.
method,java/util/logging/Level/parse/String, Parse a level name string into a Level. The argument string may consist of either a level name or an integer value. For example: 	SEVERE 	1000 @param name string to be parsed @throws NullPointerException if the name is null @throws IllegalArgumentException if the value is not valid. Valid values are integers between Integer.MIN_VALUE and Integer.MAX_VALUE, and all known level names. Known names are the levels defined by this class (i.e. FINE, FINER, FINEST), or created by this class with appropriate package access, or new levels defined or created by subclasses. @return The parsed value. Passing an integer that corresponds to a known name (eg 700) will return the associated name (eg CONFIG). Passing an integer that does not (eg 1) will return a new level name initialized to that value.
method,java/util/logging/Level/equals/Object, Compare two objects for value equality. @return true if and only if the two objects have the same level value.
field,java/util/logging/Level/CONFIG, CONFIG is a message level for static configuration messages. CONFIG messages are intended to provide a variety of static configuration information, to assist in debugging problems that may be associated with particular configurations. For example, CONFIG message might include the CPU type, the graphics depth, the GUI look-and-feel, etc. This level is initialized to 700. 
field,java/util/logging/Level/FINER, FINER indicates a fairly detailed tracing message. By default logging calls for entering, returning, or throwing an exception are traced at this level. This level is initialized to 400.
field,java/util/logging/Level/ALL, ALL indicates that all messages should be logged. This level is initialized to Integer.MIN_VALUE.
method,java/util/logging/Handler/getFormatter/, Return the Formatter for this Handler. @return the Formatter (may be null).
method,java/util/logging/Handler/getEncoding/, Return the character encoding for this Handler. @return The encoding name. May be null, which indicates the	 	default encoding should be used.
method,java/util/logging/Handler/getFilter/, Get the current Filter for this Handler. @return a Filter object (may be null)
method,java/util/logging/Handler/reportError/String;Exception;int, Protected convenience method to report an error to this Handler's ErrorManager. Note that this method retrieves and uses the ErrorManager without doing a security check. It can therefore be used in environments where the caller may be non-privileged. @param msg a descriptive string (may be null) @param ex an exception (may be null) @param code an error code defined in ErrorManager
method,java/util/logging/Handler/isLoggable/LogRecord, Check if this Handler would actually log a given LogRecord. This method checks if the LogRecord has an appropriate Level and whether it satisfies any Filter. It also may make other Handler specific checks that might prevent a handler from logging the LogRecord. It will return false if the LogRecord is Null. @param record a LogRecord @return true if the LogRecord would be logged.
method,java/util/logging/Handler/Handler/, Default constructor. The resulting Handler has a log level of Level.ALL, no Formatter, and no Filter. A default ErrorManager instance is installed as the ErrorManager.
method,java/util/logging/Formatter/getHead/Handler, Return the header string for a set of formatted records. This base class returns an empty string, but this may be overriden by subclasses. @param h The target handler (can be null) @return header string
method,java/util/logging/Formatter/getTail/Handler, Return the tail string for a set of formatted records. This base class returns an empty string, but this may be overriden by subclasses. @param h The target handler (can be null) @return tail string
method,java/util/logging/Formatter/formatMessage/LogRecord, Localize and format the message string from a log record. This method is provided as a convenience for Formatter subclasses to use when they are performing formatting. The message string is first localized to a format string using the record's ResourceBundle. (If there is no ResourceBundle, or if the message key is not found, then the key is used as the format string.) The format String uses java.text style formatting. If there are no parameters, no formatter is used. Otherwise, if the string contains {0 then java.text.MessageFormat is used to format the string. Otherwise no formatting is performed. @param record the log record containing the raw message @return a localized and formatted message
interface,java/util/logging/Filter, A Filter can be used to provide fine grain control over what is logged, beyond the control provided by log levels. Each Logger and each Handler can have a filter associated with it. The Logger or Handler will call the isLoggable method to check if a given LogRecord should be published. If isLoggable returns false, the LogRecord will be discarded. @version 1.7, 03/23/10 @since 1.4
method,java/util/logging/Filter/isLoggable/LogRecord, Check if a given log record should be published. @param record a LogRecord @return true if the log record should be published.
class,java/util/logging/FileHandler, Simple file logging Handler. The FileHandler can either write to a specified file, or it can write to a rotating set of files. For a rotating set of files, as each file reaches a given size limit, it is closed, rotated out, and a new file opened. Successively older files are named by adding 0, 1, 2, etc into the base filename. By default buffering is enabled in the IO libraries but each log record is flushed out when it is complete. By default the XMLFormatter class is used for formatting. Configuration: By default each FileHandler is initialized using the following LogManager configuration properties. If properties are not defined (or have invalid values) then the specified default values are used. java.util.logging.FileHandler.level 	 specifies the default level for the Handler	 (defaults to Level.ALL). java.util.logging.FileHandler.filter 	 specifies the name of a Filter class to use	 (defaults to no Filter). java.util.logging.FileHandler.formatter 	 specifies the name of a Formatter class to use (defaults to java.util.logging.XMLFormatter) java.util.logging.FileHandler.encoding 	 the name of the character set encoding to use (defaults to	 the default platform encoding). java.util.logging.FileHandler.limit 	 specifies an approximate maximum amount to write (in bytes) 	 to any one file. If this is zero, then there is no limit.	 (Defaults to no limit). java.util.logging.FileHandler.count 	 specifies how many output files to cycle through (defaults to 1). java.util.logging.FileHandler.pattern 	 specifies a pattern for generating the output file name. See below for details. (Defaults to %h/java%u.log). java.util.logging.FileHandler.append	 specifies whether the FileHandler should append onto any existing files (defaults to false). A pattern consists of a string that includes the following special components that will be replaced at runtime: / the local pathname separator %t the system temporary directory %h the value of the user.home system property %g the generation number to distinguish rotated logs %u a unique number to resolve conflicts %% translates to a single percent sign % If no %g field has been specified and the file count is greater than one, then the generation number will be added to the end of the generated filename, after a dot. Thus for example a pattern of %t/java%g.log with a count of 2 would typically cause log files to be written on Solaris to /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they would be typically written to C:\TEMP\java0.log and C:\TEMP\java1.log Generation numbers follow the sequence 0, 1, 2, etc. Normally the %u unique field is set to 0. However, if the FileHandler tries to open the filename and finds the file is currently in use by another process it will increment the unique number field and try again. This will be repeated until FileHandler finds a file name that is not currently in use. If there is a conflict and no %u field has been specified, it will be added at the end of the filename after a dot. (This will be after any automatically added generation number.) Thus if three processes were all trying to log to fred%u.%g.txt then they might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as the first file in their rotating sequences. Note that the use of unique ids to avoid conflicts is only guaranteed to work reliably when using a local disk file system. @version 1.37, 03/23/10 @since 1.4
method,java/util/logging/FileHandler/FileHandler/, Construct a default FileHandler. This will be configured entirely from LogManager properties (or their default values). @exception IOException if there are IO problems opening the files. @exception SecurityException if a security manager exists and if the caller does not have LoggingPermission(control)). @exception NullPointerException if pattern property is an empty String.
method,java/util/logging/ErrorManager/error/String;Exception;int, The error method is called when a Handler failure occurs. This method may be overriden in subclasses. The default behavior in this base class is that the first call is reported to System.err, and subsequent calls are ignored. @param msg a descriptive string (may be null) @param ex an exception (may be null) @param code an error code defined in ErrorManager
method,java/util/logging/ErrorManager/ErrorManager/,
field,java/util/logging/ErrorManager/GENERIC_FAILURE, GENERIC_FAILURE is used for failure that don't fit into one of the other categories.
field,java/util/logging/ErrorManager/WRITE_FAILURE, WRITE_FAILURE is used when a write to an output stream fails.
field,java/util/logging/ErrorManager/FLUSH_FAILURE, FLUSH_FAILURE is used when a flush to an output stream fails.
field,java/util/logging/ErrorManager/CLOSE_FAILURE, CLOSE_FAILURE is used when a close of an output stream fails.
field,java/util/logging/ErrorManager/OPEN_FAILURE, OPEN_FAILURE is used when an open of an output stream fails.
field,java/util/logging/ErrorManager/FORMAT_FAILURE, FORMAT_FAILURE is used when formatting fails for any reason.
method,java/util/logging/ConsoleHandler/close/, Override StreamHandler.close to do a flush but not to close the output stream. That is, we do not close System.err.
method,java/util/prefs/PreferencesFactory/systemRoot/, Returns the system root preference node. (Multiple calls on this method will return the same object reference.)
method,java/util/prefs/PreferencesFactory/userRoot/, Returns the user root preference node corresponding to the calling user. In a server, the returned value will typically depend on some implicit client-context.
method,java/util/prefs/Preferences/userRoot/, Returns the root preference node for the calling user. @return the root preference node for the calling user. @throws SecurityException If a security manager is present and it denies RuntimePermission(preferences). @see RuntimePermission
method,java/util/prefs/Preferences/get/String;String, Returns the value associated with the specified key in this preference node. Returns the specified default if there is no value associated with the key, or the backing store is inaccessible. Some implementations may store default values in their backing stores. If there is no value associated with the specified key but there is such a stored default, it is returned in preference to the specified default. @param key key whose associated value is to be returned. @param def the value to be returned in the event that this preference node has no value associated with key. @return the value associated with key, or def if no value is associated with key, or the backing store is inaccessible. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @throws NullPointerException if key is null. (A null value for def is permitted.)
method,java/util/prefs/Preferences/remove/String, Removes the value associated with the specified key in this preference node, if any. If this implementation supports stored defaults, and there is such a default for the specified preference, the stored default will be exposed by this call, in the sense that it will be returned by a succeeding call to get. @param key key whose mapping is to be removed from the preference node. @throws NullPointerException if key is null. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/Preferences/clear/, Removes all of the preferences (key-value associations) in this preference node. This call has no effect on any descendants of this node. If this implementation supports stored defaults, and this node in the preferences hierarchy contains any such defaults, the stored defaults will be exposed by this call, in the sense that they will be returned by succeeding calls to get. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @see #removeNode()
method,java/util/prefs/Preferences/putByteArray/String;byte[], Associates a string representing the specified byte array with the specified key in this preference node. The associated string is the Base64 encoding of the byte array, as defined in RFC 2045, Section 6.8, with one minor change: the string will consist solely of characters from the Base64 Alphabet; it will not contain any newline characters. Note that the maximum length of the byte array is limited to three quarters of MAX_VALUE_LENGTH so that the length of the Base64 encoded String does not exceed MAX_VALUE_LENGTH. This method is intended for use in conjunction with {@link #getByteArray}. @param key key with which the string form of value is to be associated. @param value value whose string form is to be associated with key. @throws NullPointerException if key or value is null. @throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH*3/4. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @see #getByteArray(String,byte[]) @see #get(String,String)
method,java/util/prefs/Preferences/keys/, Returns all of the keys that have an associated value in this preference node. (The returned array will be of size zero if this node has no preferences.) If the implementation supports stored defaults and there are any such defaults at this node that have not been overridden, by explicit preferences, the defaults are returned in the array in addition to any explicit preferences. @return an array of the keys that have an associated value in this preference node. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/Preferences/nodeExists/String, Returns true if the named preference node exists in the same tree as this node. Relative path names (which do not begin with the slash character ('/')) are interpreted relative to this preference node. If this node (or an ancestor) has already been removed with the {@link #removeNode()} method, it is legal to invoke this method, but only with the path name ; the invocation will return false. Thus, the idiom p.nodeExists() may be used to test whether p has been removed. @param pathName the path name of the node whose existence is to be checked. @return true if the specified node exists. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @throws IllegalArgumentException if the path name is invalid (i.e., it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long). @throws NullPointerException if path name is null. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method and pathName is not the empty string ().
method,java/util/prefs/Preferences/sync/, Ensures that future reads from this preference node and its descendants reflect any changes that were committed to the persistent store (from any VM) prior to the sync invocation. As a side-effect, forces any changes in the contents of this preference node and its descendants to the persistent store, as if the flush method had been invoked on this node. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @see #flush()
method,java/util/prefs/Preferences/Preferences/, Sole constructor. (For invocation by subclass constructors, typically implicit.) 
method,java/util/prefs/PreferenceChangeListener/preferenceChange/PreferenceChangeEvent, This method gets called when a preference is added, removed or when its value is changed. @param evt A PreferenceChangeEvent object describing the event source 	and the preference that has changed.
method,java/util/prefs/NodeChangeListener/childAdded/NodeChangeEvent, This method gets called when a child node is added. @param evt A node change event object describing the parent and child node.
method,java/util/prefs/NodeChangeListener/childRemoved/NodeChangeEvent, This method gets called when a child node is removed. @param evt A node change event object describing the parent and child node.
method,java/util/prefs/AbstractPreferences/put/String;String, Implements the put method as per the specification in {@link Preferences#put(String,String)}. This implementation checks that the key and value are legal, obtains this preference node's lock, checks that the node has not been removed, invokes {@link #putSpi(String,String)}, and if there are any preference change listeners, enqueues a notification event for processing by the event dispatch thread. @param key key with which the specified value is to be associated. @param value value to be associated with the specified key. @throws NullPointerException if key or value is null. @throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/get/String;String, Implements the get method as per the specification in {@link Preferences#get(String,String)}. This implementation first checks to see if key is null throwing a NullPointerException if this is the case. Then it obtains this preference node's lock, checks that the node has not been removed, invokes {@link #getSpi(String)}, and returns the result, unless the getSpi invocation returns null or throws an exception, in which case this invocation returns def. @param key key whose associated value is to be returned. @param def the value to be returned in the event that this preference node has no value associated with key. @return the value associated with key, or def if no value is associated with key. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @throws NullPointerException if key is null. (A null default is permitted.)
method,java/util/prefs/AbstractPreferences/remove/String, Implements the remove(String) method as per the specification in {@link Preferences#remove(String)}. This implementation obtains this preference node's lock, checks that the node has not been removed, invokes {@link #removeSpi(String)} and if there are any preference change listeners, enqueues a notification event for processing by the event dispatch thread. @param key key whose mapping is to be removed from the preference node. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/clear/, Implements the clear method as per the specification in {@link Preferences#clear()}. This implementation obtains this preference node's lock, invokes {@link #keys()} to obtain an array of keys, and iterates over the array invoking {@link #remove(String)} on each key. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/putInt/String;int, Implements the putInt method as per the specification in {@link Preferences#putInt(String,int)}. This implementation translates value to a string with {@link Integer#toString(int)} and invokes {@link #put(String,String)} on the result. @param key key with which the string form of value is to be associated. @param value value whose string form is to be associated with key. @throws NullPointerException if key is null. @throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/getInt/String;int, Implements the getInt method as per the specification in {@link Preferences#getInt(String,int)}. This implementation invokes {@link #get(String,String) get(key, null)}. If the return value is non-null, the implementation attempts to translate it to an int with {@link Integer#parseInt(String)}. If the attempt succeeds, the return value is returned by this method. Otherwise, def is returned. @param key key whose associated value is to be returned as an int. @param def the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as an int. @return the int value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as an int. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @throws NullPointerException if key is null.
method,java/util/prefs/AbstractPreferences/putLong/String;long, Implements the putLong method as per the specification in {@link Preferences#putLong(String,long)}. This implementation translates value to a string with {@link Long#toString(long)} and invokes {@link #put(String,String)} on the result. @param key key with which the string form of value is to be associated. @param value value whose string form is to be associated with key. @throws NullPointerException if key is null. @throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/getLong/String;long, Implements the getLong method as per the specification in {@link Preferences#getLong(String,long)}. This implementation invokes {@link #get(String,String) get(key, null)}. If the return value is non-null, the implementation attempts to translate it to a long with {@link Long#parseLong(String)}. If the attempt succeeds, the return value is returned by this method. Otherwise, def is returned. @param key key whose associated value is to be returned as a long. @param def the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a long. @return the long value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a long. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @throws NullPointerException if key is null.
method,java/util/prefs/AbstractPreferences/putBoolean/String;boolean, Implements the putBoolean method as per the specification in {@link Preferences#putBoolean(String,boolean)}. This implementation translates value to a string with {@link String#valueOf(boolean)} and invokes {@link #put(String,String)} on the result. @param key key with which the string form of value is to be associated. @param value value whose string form is to be associated with key. @throws NullPointerException if key is null. @throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/getBoolean/String;boolean, Implements the getBoolean method as per the specification in {@link Preferences#getBoolean(String,boolean)}. This implementation invokes {@link #get(String,String) get(key, null)}. If the return value is non-null, it is compared with true using {@link String#equalsIgnoreCase(String)}. If the comparison returns true, this invocation returns true. Otherwise, the original return value is compared with false, again using {@link String#equalsIgnoreCase(String)}. If the comparison returns true, this invocation returns false. Otherwise, this invocation returns def. @param key key whose associated value is to be returned as a boolean. @param def the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a boolean. @return the boolean value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a boolean. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @throws NullPointerException if key is null.
method,java/util/prefs/AbstractPreferences/putFloat/String;float, Implements the putFloat method as per the specification in {@link Preferences#putFloat(String,float)}. This implementation translates value to a string with {@link Float#toString(float)} and invokes {@link #put(String,String)} on the result. @param key key with which the string form of value is to be associated. @param value value whose string form is to be associated with key. @throws NullPointerException if key is null. @throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/getFloat/String;float, Implements the getFloat method as per the specification in {@link Preferences#getFloat(String,float)}. This implementation invokes {@link #get(String,String) get(key, null)}. If the return value is non-null, the implementation attempts to translate it to an float with {@link Float#parseFloat(String)}. If the attempt succeeds, the return value is returned by this method. Otherwise, def is returned. @param key key whose associated value is to be returned as a float. @param def the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a float. @return the float value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a float. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @throws NullPointerException if key is null.
method,java/util/prefs/AbstractPreferences/putDouble/String;double, Implements the putDouble method as per the specification in {@link Preferences#putDouble(String,double)}. This implementation translates value to a string with {@link Double#toString(double)} and invokes {@link #put(String,String)} on the result. @param key key with which the string form of value is to be associated. @param value value whose string form is to be associated with key. @throws NullPointerException if key is null. @throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/getDouble/String;double, Implements the getDouble method as per the specification in {@link Preferences#getDouble(String,double)}. This implementation invokes {@link #get(String,String) get(key, null)}. If the return value is non-null, the implementation attempts to translate it to an double with {@link Double#parseDouble(String)}. If the attempt succeeds, the return value is returned by this method. Otherwise, def is returned. @param key key whose associated value is to be returned as a double. @param def the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a double. @return the double value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a double. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @throws NullPointerException if key is null.
method,java/util/prefs/AbstractPreferences/keys/, Implements the keys method as per the specification in {@link Preferences#keys()}. This implementation obtains this preference node's lock, checks that the node has not been removed and invokes {@link #keysSpi()}. @return an array of the keys that have an associated value in this preference node. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/childrenNames/, Implements the children method as per the specification in {@link Preferences#childrenNames()}. This implementation obtains this preference node's lock, checks that the node has not been removed, constructs a TreeSet initialized to the names of children already cached (the children in this node's child-cache), invokes {@link #childrenNamesSpi()}, and adds all of the returned child-names into the set. The elements of the tree set are dumped into a String array using the toArray method, and this array is returned. @return the names of the children of this preference node. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @see #cachedChildren()
method,java/util/prefs/AbstractPreferences/parent/, Implements the parent method as per the specification in {@link Preferences#parent()}. This implementation obtains this preference node's lock, checks that the node has not been removed and returns the parent value that was passed to this node's constructor. @return the parent of this preference node. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/node/String, Implements the node method as per the specification in {@link Preferences#node(String)}. This implementation obtains this preference node's lock and checks that the node has not been removed. If path is , this node is returned; if path is /, this node's root is returned. If the first character in path is not '/', the implementation breaks path into tokens and recursively traverses the path from this node to the named node, consuming a name and a slash from path at each step of the traversal. At each step, the current node is locked and the node's child-cache is checked for the named node. If it is not found, the name is checked to make sure its length does not exceed MAX_NAME_LENGTH. Then the {@link #childSpi(String)} method is invoked, and the result stored in this node's child-cache. If the newly created Preferences object's {@link #newNode} field is true and there are any node change listeners, a notification event is enqueued for processing by the event dispatch thread. When there are no more tokens, the last value found in the child-cache or returned by childSpi is returned by this method. If during the traversal, two / tokens occur consecutively, or the final token is / (rather than a name), an appropriate IllegalArgumentException is thrown. If the first character of path is '/' (indicating an absolute path name) this preference node's lock is dropped prior to breaking path into tokens, and this method recursively traverses the path starting from the root (rather than starting from this node). The traversal is otherwise identical to the one described for relative path names. Dropping the lock on this node prior to commencing the traversal at the root node is essential to avoid the possibility of deadlock, as per the {@link #lock locking invariant}. @param path the path name of the preference node to return. @return the specified preference node. @throws IllegalArgumentException if the path name is invalid (i.e., it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long). @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method.
method,java/util/prefs/AbstractPreferences/removeNode/, Implements the removeNode() method as per the specification in {@link Preferences#removeNode()}. This implementation checks to see that this node is the root; if so, it throws an appropriate exception. Then, it locks this node's parent, and calls a recursive helper method that traverses the subtree rooted at this node. The recursive method locks the node on which it was called, checks that it has not already been removed, and then ensures that all of its children are cached: The {@link #childrenNamesSpi()} method is invoked and each returned child name is checked for containment in the child-cache. If a child is not already cached, the {@link #childSpi(String)} method is invoked to create a Preferences instance for it, and this instance is put into the child-cache. Then the helper method calls itself recursively on each node contained in its child-cache. Next, it invokes {@link #removeNodeSpi()}, marks itself as removed, and removes itself from its parent's child-cache. Finally, if there are any node change listeners, it enqueues a notification event for processing by the event dispatch thread. Note that the helper method is always invoked with all ancestors up to the closest non-removed ancestor locked. @throws IllegalStateException if this node (or an ancestor) has already been removed with the {@link #removeNode()} method. @throws UnsupportedOperationException if this method is invoked on the root node. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it.
method,java/util/prefs/AbstractPreferences/putSpi/String;String, Put the given key-value association into this preference node. It is guaranteed that key and value are non-null and of legal length. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for any of these things.) This method is invoked with the lock on this node held.
method,java/util/prefs/AbstractPreferences/removeSpi/String, Remove the association (if any) for the specified key at this preference node. It is guaranteed that key is non-null. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for either of these things.) This method is invoked with the lock on this node held.
method,java/util/prefs/AbstractPreferences/removeNodeSpi/, Removes this preference node, invalidating it and any preferences that it contains. The named child will have no descendants at the time this invocation is made (i.e., the {@link Preferences#removeNode()} method invokes this method repeatedly in a bottom-up fashion, removing each of a node's descendants before removing the node itself). This method is invoked with the lock held on this node and its parent (and all ancestors that are being removed as a result of a single invocation to {@link Preferences#removeNode()}). The removal of a node needn't become persistent until the flush method is invoked on this node (or an ancestor). If this node throws a BackingStoreException, the exception will propagate out beyond the enclosing {@link #removeNode()} invocation. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it.
method,java/util/prefs/AbstractPreferences/keysSpi/, Returns all of the keys that have an associated value in this preference node. (The returned array will be of size zero if this node has no preferences.) It is guaranteed that this node has not been removed. This method is invoked with the lock on this node held. If this node throws a BackingStoreException, the exception will propagate out beyond the enclosing {@link #keys()} invocation. @return an array of the keys that have an associated value in this preference node. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it.
method,java/util/prefs/AbstractPreferences/childrenNamesSpi/, Returns the names of the children of this preference node. (The returned array will be of size zero if this node has no children.) This method need not return the names of any nodes already cached, but may do so without harm. This method is invoked with the lock on this node held. If this node throws a BackingStoreException, the exception will propagate out beyond the enclosing {@link #childrenNames()} invocation. @return an array containing the names of the children of this preference node. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it.
method,java/util/prefs/AbstractPreferences/getChild/String, Returns the named child if it exists, or null if it does not. It is guaranteed that nodeName is non-null, non-empty, does not contain the slash character ('/'), and is no longer than {@link #MAX_NAME_LENGTH} characters. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for any of these things if he chooses to override this method.) Finally, it is guaranteed that the named node has not been returned by a previous invocation of this method or {@link #childSpi} after the last time that it was removed. In other words, a cached value will always be used in preference to invoking this method. (The implementor needn't maintain his own cache of previously returned children if he chooses to override this method.) This implementation obtains this preference node's lock, invokes {@link #childrenNames()} to get an array of the names of this node's children, and iterates over the array comparing the name of each child with the specified node name. If a child node has the correct name, the {@link #childSpi(String)} method is invoked and the resulting node is returned. If the iteration completes without finding the specified name, null is returned. @param nodeName name of the child to be searched for. @return the named child if it exists, or null if it does not. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it.
method,java/util/prefs/AbstractPreferences/sync/, Implements the sync method as per the specification in {@link Preferences#sync()}. This implementation calls a recursive helper method that locks this node, invokes syncSpi() on it, unlocks this node, and recursively invokes this method on each cached child. A cached child is a child of this node that has been created in this VM and not subsequently removed. In effect, this method does a depth first traversal of the cached subtree rooted at this node, calling syncSpi() on each node in the subTree while only that node is locked. Note that syncSpi() is invoked top-down. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @throws IllegalStateException if this node (or an ancestor) has been removed with the {@link #removeNode()} method. @see #flush()
method,java/util/prefs/AbstractPreferences/flush/, Implements the flush method as per the specification in {@link Preferences#flush()}. This implementation calls a recursive helper method that locks this node, invokes flushSpi() on it, unlocks this node, and recursively invokes this method on each cached child. A cached child is a child of this node that has been created in this VM and not subsequently removed. In effect, this method does a depth first traversal of the cached subtree rooted at this node, calling flushSpi() on each node in the subTree while only that node is locked. Note that flushSpi() is invoked top-down. If this method is invoked on a node that has been removed with the {@link #removeNode()} method, flushSpi() is invoked on this node, but not on others. @throws BackingStoreException if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it. @see #flush()
method,java/util/prefs/AbstractPreferences/isRemoved/, Returns true iff this node (or an ancestor) has been removed with the {@link #removeNode()} method. This method locks this node prior to returning the contents of the private field used to track this state. @return true iff this node (or an ancestor) has been removed with the {@link #removeNode()} method.
field,java/util/prefs/AbstractPreferences/lock, An object whose monitor is used to lock this node. This object is used in preference to the node itself to reduce the likelihood of intentional or unintentional denial of service due to a locked node. To avoid deadlock, a node is never locked by a thread that holds a lock on a descendant of that node.
method,java/util/concurrent/TimeoutException/TimeoutException/, Constructs a TimeoutException with no specified detail message.
method,java/util/concurrent/TimeoutException/TimeoutException/String, Constructs a TimeoutException with the specified detail message. @param message the detail message
class,java/util/concurrent/TimeUnit, A TimeUnit represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units. A TimeUnit does not maintain time information, but only helps organize and use time representations that may be maintained separately across various contexts. A nanosecond is defined as one thousandth of a microsecond, a microsecond as one thousandth of a millisecond, a millisecond as one thousandth of a second, a minute as sixty seconds, an hour as sixty minutes, and a day as twenty four hours. A TimeUnit is mainly used to inform time-based methods how a given timing parameter should be interpreted. For example, the following code will timeout in 50 milliseconds if the {@link java.util.concurrent.locks.Lock lock} is not available: Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ... while this code will timeout in 50 seconds: Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ... Note however, that there is no guarantee that a particular timeout implementation will be able to notice the passage of time at the same granularity as the given TimeUnit. @since 1.5 @author Doug Lea
method,java/util/concurrent/TimeUnit/values/,
method,java/util/concurrent/TimeUnit/valueOf/String,
method,java/util/concurrent/TimeUnit/convert/long;TimeUnit, Convert the given time duration in the given unit to this unit. Conversions from finer to coarser granularities truncate, so lose precision. For example converting 999 milliseconds to seconds results in 0. Conversions from coarser to finer granularities with arguments that would numerically overflow saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive. For example, to convert 10 minutes to milliseconds, use: TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES) @param sourceDuration the time duration in the given sourceUnit @param sourceUnit the unit of the sourceDuration argument @return the converted duration in this unit, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow.
method,java/util/concurrent/TimeUnit/toNanos/long, Equivalent to NANOSECONDS.convert(duration, this). @param duration the duration @return the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow. @see #convert
method,java/util/concurrent/TimeUnit/toMicros/long, Equivalent to MICROSECONDS.convert(duration, this). @param duration the duration @return the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow. @see #convert
method,java/util/concurrent/TimeUnit/toMillis/long, Equivalent to MILLISECONDS.convert(duration, this). @param duration the duration @return the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow. @see #convert
method,java/util/concurrent/TimeUnit/toSeconds/long, Equivalent to SECONDS.convert(duration, this). @param duration the duration @return the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow. @see #convert
method,java/util/concurrent/TimeUnit/toMinutes/long, Equivalent to MINUTES.convert(duration, this). @param duration the duration @return the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow. @see #convert @since 1.6
method,java/util/concurrent/TimeUnit/toHours/long, Equivalent to HOURS.convert(duration, this). @param duration the duration @return the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow. @see #convert @since 1.6
method,java/util/concurrent/TimeUnit/toDays/long, Equivalent to DAYS.convert(duration, this). @param duration the duration @return the converted duration @see #convert @since 1.6
method,java/util/concurrent/TimeUnit/timedWait/Object;long, Performs a timed Object.wait using this time unit. This is a convenience method that converts timeout arguments into the form required by the Object.wait method. For example, you could implement a blocking poll method (see {@link BlockingQueue#poll BlockingQueue.poll}) using: public synchronized Object poll(long timeout, TimeUnit unit) throws InterruptedException { while (empty) { unit.timedWait(this, timeout); ... } } @param obj the object to wait on @param timeout the maximum time to wait. If less than or equal to zero, do not wait at all. @throws InterruptedException if interrupted while waiting. @see Object#wait(long, int)
method,java/util/concurrent/TimeUnit/timedJoin/Thread;long, Performs a timed Thread.join using this time unit. This is a convenience method that converts time arguments into the form required by the Thread.join method. @param thread the thread to wait for @param timeout the maximum time to wait. If less than or equal to zero, do not wait at all. @throws InterruptedException if interrupted while waiting. @see Thread#join(long, int)
method,java/util/concurrent/TimeUnit/sleep/long, Performs a Thread.sleep using this unit. This is a convenience method that converts time arguments into the form required by the Thread.sleep method. @param timeout the minimum time to sleep. If less than or equal to zero, do not sleep at all. @throws InterruptedException if interrupted while sleeping. @see Thread#sleep
field,java/util/concurrent/TimeUnit/NANOSECONDS,
field,java/util/concurrent/TimeUnit/MICROSECONDS,
field,java/util/concurrent/TimeUnit/MILLISECONDS,
field,java/util/concurrent/TimeUnit/SECONDS,
field,java/util/concurrent/TimeUnit/MINUTES,
field,java/util/concurrent/TimeUnit/HOURS,
field,java/util/concurrent/TimeUnit/DAYS,
method,java/util/concurrent/ThreadPoolExecutor/execute/Runnable, Executes the given task sometime in the future. The task may execute in a new thread or in an existing pooled thread. If the task cannot be submitted for execution, either because this executor has been shutdown or because its capacity has been reached, the task is handled by the current RejectedExecutionHandler. @param command the task to execute @throws RejectedExecutionException at discretion of RejectedExecutionHandler, if task cannot be accepted for execution @throws NullPointerException if command is null
method,java/util/concurrent/ThreadPoolExecutor/shutdown/, Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. @throws SecurityException if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold {@link java.lang.RuntimePermission}(modifyThread), or the security manager's checkAccess method denies access.
method,java/util/concurrent/ThreadPoolExecutor/shutdownNow/, Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. These tasks are drained (removed) from the task queue upon return from this method. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. This implementation cancels tasks via {@link Thread#interrupt}, so any task that fails to respond to interrupts may never terminate. @return list of tasks that never commenced execution @throws SecurityException if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold {@link java.lang.RuntimePermission}(modifyThread), or the security manager's checkAccess method denies access.
method,java/util/concurrent/ThreadPoolExecutor/isShutdown/,
method,java/util/concurrent/ThreadPoolExecutor/isTerminating/, Returns true if this executor is in the process of terminating after shutdown or shutdownNow but has not completely terminated. This method may be useful for debugging. A return of true reported a sufficient period after shutdown may indicate that submitted tasks have ignored or suppressed interruption, causing this executor not to properly terminate. @return true if terminating but not yet terminated
method,java/util/concurrent/ThreadPoolExecutor/isTerminated/,
method,java/util/concurrent/ThreadPoolExecutor/awaitTermination/long;TimeUnit,
method,java/util/concurrent/ThreadPoolExecutor/finalize/, Invokes shutdown when this executor is no longer referenced.
method,java/util/concurrent/ThreadPoolExecutor/setThreadFactory/ThreadFactory, Sets the thread factory used to create new threads. @param threadFactory the new thread factory @throws NullPointerException if threadFactory is null @see #getThreadFactory
method,java/util/concurrent/ThreadPoolExecutor/getThreadFactory/, Returns the thread factory used to create new threads. @return the current thread factory @see #setThreadFactory
method,java/util/concurrent/ThreadPoolExecutor/setRejectedExecutionHandler/RejectedExecutionHandler, Sets a new handler for unexecutable tasks. @param handler the new handler @throws NullPointerException if handler is null @see #getRejectedExecutionHandler
method,java/util/concurrent/ThreadPoolExecutor/getRejectedExecutionHandler/, Returns the current handler for unexecutable tasks. @return the current handler @see #setRejectedExecutionHandler
method,java/util/concurrent/ThreadPoolExecutor/setCorePoolSize/int, Sets the core number of threads. This overrides any value set in the constructor. If the new value is smaller than the current value, excess existing threads will be terminated when they next become idle. If larger, new threads will, if needed, be started to execute any queued tasks. @param corePoolSize the new core size @throws IllegalArgumentException if corePoolSize less than zero @see #getCorePoolSize
method,java/util/concurrent/ThreadPoolExecutor/getCorePoolSize/, Returns the core number of threads. @return the core number of threads @see #setCorePoolSize
method,java/util/concurrent/ThreadPoolExecutor/prestartCoreThread/, Starts a core thread, causing it to idly wait for work. This overrides the default policy of starting core threads only when new tasks are executed. This method will return false if all core threads have already been started. @return true if a thread was started
method,java/util/concurrent/ThreadPoolExecutor/prestartAllCoreThreads/, Starts all core threads, causing them to idly wait for work. This overrides the default policy of starting core threads only when new tasks are executed. @return the number of threads started
method,java/util/concurrent/ThreadPoolExecutor/allowsCoreThreadTimeOut/, Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive. When true, the same keep-alive policy applying to non-core threads applies also to core threads. When false (the default), core threads are never terminated due to lack of incoming tasks. @return true if core threads are allowed to time out, else false @since 1.6
method,java/util/concurrent/ThreadPoolExecutor/setMaximumPoolSize/int, Sets the maximum allowed number of threads. This overrides any value set in the constructor. If the new value is smaller than the current value, excess existing threads will be terminated when they next become idle. @param maximumPoolSize the new maximum @throws IllegalArgumentException if the new maximum is less than or equal to zero, or less than the {@linkplain #getCorePoolSize core pool size} @see #getMaximumPoolSize
method,java/util/concurrent/ThreadPoolExecutor/getMaximumPoolSize/, Returns the maximum allowed number of threads. @return the maximum allowed number of threads @see #setMaximumPoolSize
method,java/util/concurrent/ThreadPoolExecutor/setKeepAliveTime/long;TimeUnit, Sets the time limit for which threads may remain idle before being terminated. If there are more than the core number of threads currently in the pool, after waiting this amount of time without processing a task, excess threads will be terminated. This overrides any value set in the constructor. @param time the time to wait. A time value of zero will cause excess threads to terminate immediately after executing tasks. @param unit the time unit of the time argument @throws IllegalArgumentException if time less than zero or if time is zero and allowsCoreThreadTimeOut @see #getKeepAliveTime
method,java/util/concurrent/ThreadPoolExecutor/getKeepAliveTime/TimeUnit, Returns the thread keep-alive time, which is the amount of time that threads in excess of the core pool size may remain idle before being terminated. @param unit the desired time unit of the result @return the time limit @see #setKeepAliveTime
method,java/util/concurrent/ThreadPoolExecutor/getQueue/, Returns the task queue used by this executor. Access to the task queue is intended primarily for debugging and monitoring. This queue may be in active use. Retrieving the task queue does not prevent queued tasks from executing. @return the task queue
method,java/util/concurrent/ThreadPoolExecutor/remove/Runnable, Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started. This method may be useful as one part of a cancellation scheme. It may fail to remove tasks that have been converted into other forms before being placed on the internal queue. For example, a task entered using submit might be converted into a form that maintains Future status. However, in such cases, method {@link ThreadPoolExecutor#purge} may be used to remove those Futures that have been cancelled. @param task the task to remove @return true if the task was removed
method,java/util/concurrent/ThreadPoolExecutor/purge/, Tries to remove from the work queue all {@link Future} tasks that have been cancelled. This method can be useful as a storage reclamation operation, that has no other impact on functionality. Cancelled tasks are never executed, but may accumulate in work queues until worker threads can actively remove them. Invoking this method instead tries to remove them now. However, this method may fail to remove tasks in the presence of interference by other threads.
method,java/util/concurrent/ThreadPoolExecutor/getPoolSize/, Returns the current number of threads in the pool. @return the number of threads
method,java/util/concurrent/ThreadPoolExecutor/getActiveCount/, Returns the approximate number of threads that are actively executing tasks. @return the number of threads
method,java/util/concurrent/ThreadPoolExecutor/getLargestPoolSize/, Returns the largest number of threads that have ever simultaneously been in the pool. @return the number of threads
method,java/util/concurrent/ThreadPoolExecutor/getTaskCount/, Returns the approximate total number of tasks that have ever been scheduled for execution. Because the states of tasks and threads may change dynamically during computation, the returned value is only an approximation. @return the number of tasks
method,java/util/concurrent/ThreadPoolExecutor/getCompletedTaskCount/, Returns the approximate total number of tasks that have completed execution. Because the states of tasks and threads may change dynamically during computation, the returned value is only an approximation, but one that does not ever decrease across successive calls. @return the number of tasks
method,java/util/concurrent/ThreadPoolExecutor/terminated/, Method invoked when the Executor has terminated. Default implementation does nothing. Note: To properly nest multiple overridings, subclasses should generally invoke super.terminated within this method.
method,java/util/concurrent/ThreadPoolExecutor/ThreadPoolExecutor/int;int;long;TimeUnit;BlockingQueue, Creates a new ThreadPoolExecutor with the given initial parameters and default thread factory and rejected execution handler. It may be more convenient to use one of the {@link Executors} factory methods instead of this general purpose constructor. @param corePoolSize the number of threads to keep in the pool, even if they are idle. @param maximumPoolSize the maximum number of threads to allow in the pool. @param keepAliveTime when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating. @param unit the time unit for the keepAliveTime argument. @param workQueue the queue to use for holding tasks before they are executed. This queue will hold only the Runnable tasks submitted by the execute method. @throws IllegalArgumentException if corePoolSize or keepAliveTime less than zero, or if maximumPoolSize less than or equal to zero, or if corePoolSize greater than maximumPoolSize. @throws NullPointerException if workQueue is null
method,java/util/concurrent/ThreadPoolExecutor/ThreadPoolExecutor/int;int;long;TimeUnit;BlockingQueue;ThreadFactory, Creates a new ThreadPoolExecutor with the given initial parameters and default rejected execution handler. @param corePoolSize the number of threads to keep in the pool, even if they are idle. @param maximumPoolSize the maximum number of threads to allow in the pool. @param keepAliveTime when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating. @param unit the time unit for the keepAliveTime argument. @param workQueue the queue to use for holding tasks before they are executed. This queue will hold only the Runnable tasks submitted by the execute method. @param threadFactory the factory to use when the executor creates a new thread. @throws IllegalArgumentException if corePoolSize or keepAliveTime less than zero, or if maximumPoolSize less than or equal to zero, or if corePoolSize greater than maximumPoolSize. @throws NullPointerException if workQueue or threadFactory are null.
method,java/util/concurrent/ThreadPoolExecutor/ThreadPoolExecutor/int;int;long;TimeUnit;BlockingQueue;RejectedExecutionHandler, Creates a new ThreadPoolExecutor with the given initial parameters and default thread factory. @param corePoolSize the number of threads to keep in the pool, even if they are idle. @param maximumPoolSize the maximum number of threads to allow in the pool. @param keepAliveTime when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating. @param unit the time unit for the keepAliveTime argument. @param workQueue the queue to use for holding tasks before they are executed. This queue will hold only the Runnable tasks submitted by the execute method. @param handler the handler to use when execution is blocked because the thread bounds and queue capacities are reached. @throws IllegalArgumentException if corePoolSize or keepAliveTime less than zero, or if maximumPoolSize less than or equal to zero, or if corePoolSize greater than maximumPoolSize. @throws NullPointerException if workQueue or handler are null.
method,java/util/concurrent/ThreadPoolExecutor/ThreadPoolExecutor/int;int;long;TimeUnit;BlockingQueue;ThreadFactory;RejectedExecutionHandler, Creates a new ThreadPoolExecutor with the given initial parameters. @param corePoolSize the number of threads to keep in the pool, even if they are idle. @param maximumPoolSize the maximum number of threads to allow in the pool. @param keepAliveTime when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating. @param unit the time unit for the keepAliveTime argument. @param workQueue the queue to use for holding tasks before they are executed. This queue will hold only the Runnable tasks submitted by the execute method. @param threadFactory the factory to use when the executor creates a new thread. @param handler the handler to use when execution is blocked because the thread bounds and queue capacities are reached. @throws IllegalArgumentException if corePoolSize or keepAliveTime less than zero, or if maximumPoolSize less than or equal to zero, or if corePoolSize greater than maximumPoolSize. @throws NullPointerException if workQueue or threadFactory or handler are null.
class,java/util/concurrent/ThreadPoolExecutor/CallerRunsPolicy, A handler for rejected tasks that runs the rejected task directly in the calling thread of the execute method, unless the executor has been shut down, in which case the task is discarded.
method,java/util/concurrent/ThreadPoolExecutor/CallerRunsPolicy/rejectedExecution/Runnable;ThreadPoolExecutor, Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded. @param r the runnable task requested to be executed @param e the executor attempting to execute this task
method,java/util/concurrent/ThreadPoolExecutor/CallerRunsPolicy/ThreadPoolExecutor/CallerRunsPolicy/, Creates a CallerRunsPolicy.
class,java/util/concurrent/ThreadPoolExecutor/AbortPolicy, A handler for rejected tasks that throws a RejectedExecutionException.
method,java/util/concurrent/ThreadPoolExecutor/AbortPolicy/rejectedExecution/Runnable;ThreadPoolExecutor, Always throws RejectedExecutionException. @param r the runnable task requested to be executed @param e the executor attempting to execute this task @throws RejectedExecutionException always.
method,java/util/concurrent/ThreadPoolExecutor/AbortPolicy/ThreadPoolExecutor/AbortPolicy/, Creates an AbortPolicy.
class,java/util/concurrent/ThreadPoolExecutor/DiscardPolicy, A handler for rejected tasks that silently discards the rejected task.
method,java/util/concurrent/ThreadPoolExecutor/DiscardPolicy/rejectedExecution/Runnable;ThreadPoolExecutor, Does nothing, which has the effect of discarding task r. @param r the runnable task requested to be executed @param e the executor attempting to execute this task
method,java/util/concurrent/ThreadPoolExecutor/DiscardPolicy/ThreadPoolExecutor/DiscardPolicy/, Creates a DiscardPolicy.
class,java/util/concurrent/ThreadPoolExecutor/DiscardOldestPolicy, A handler for rejected tasks that discards the oldest unhandled request and then retries execute, unless the executor is shut down, in which case the task is discarded.
method,java/util/concurrent/ThreadPoolExecutor/DiscardOldestPolicy/rejectedExecution/Runnable;ThreadPoolExecutor, Obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded. @param r the runnable task requested to be executed @param e the executor attempting to execute this task
method,java/util/concurrent/ThreadPoolExecutor/DiscardOldestPolicy/ThreadPoolExecutor/DiscardOldestPolicy/, Creates a DiscardOldestPolicy for the given executor.
interface,java/util/concurrent/ThreadFactory, An object that creates new threads on demand. Using thread factories removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread}, enabling applications to use special thread subclasses, priorities, etc. The simplest implementation of this interface is just: class SimpleThreadFactory implements ThreadFactory { public Thread newThread(Runnable r) { return new Thread(r); } } The {@link Executors#defaultThreadFactory} method provides a more useful simple implementation, that sets the created thread context to known values before returning it. @since 1.5 @author Doug Lea
method,java/util/concurrent/ThreadFactory/newThread/Runnable, Constructs a new {@code Thread}. Implementations may also initialize priority, name, daemon status, {@code ThreadGroup}, etc. @param r a runnable to be executed by new thread instance @return constructed thread, or {@code null} if the request to create a thread is rejected
class,java/util/concurrent/SynchronousQueue, A {@linkplain BlockingQueue blocking queue} in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa. A synchronous queue does not have any internal capacity, not even a capacity of one. You cannot peek at a synchronous queue because an element is only present when you try to remove it; you cannot insert an element (using any method) unless another thread is trying to remove it; you cannot iterate as there is nothing to iterate. The head of the queue is the element that the first queued inserting thread is trying to add to the queue; if there is no such queued thread then no element is available for removal and poll() will return null. For purposes of other Collection methods (for example contains), a SynchronousQueue acts as an empty collection. This queue does not permit null elements. Synchronous queues are similar to rendezvous channels used in CSP and Ada. They are well suited for handoff designs, in which an object running in one thread must sync up with an object running in another thread in order to hand it some information, event, or task. This class supports an optional fairness policy for ordering waiting producer and consumer threads. By default, this ordering is not guaranteed. However, a queue constructed with fairness set to true grants threads access in FIFO order. This class and its iterator implement all of the optional methods of the {@link Collection} and {@link Iterator} interfaces. This class is a member of the Java Collections Framework. @since 1.5 @author Doug Lea and Bill Scherer and Michael Scott @param the type of elements held in this collection
method,java/util/concurrent/SynchronousQueue/put/Object, Adds the specified element to this queue, waiting if necessary for another thread to receive it. @throws InterruptedException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/SynchronousQueue/offer/Object;long;TimeUnit, Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it. @return true if successful, or false if the specified waiting time elapses before a consumer appears. @throws InterruptedException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/SynchronousQueue/offer/Object, Inserts the specified element into this queue, if another thread is waiting to receive it. @param e the element to add @return true if the element was added to this queue, else false @throws NullPointerException if the specified element is null
method,java/util/concurrent/SynchronousQueue/take/, Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it. @return the head of this queue @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/SynchronousQueue/poll/long;TimeUnit, Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it. @return the head of this queue, or null if the specified waiting time elapses before an element is present. @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/SynchronousQueue/poll/, Retrieves and removes the head of this queue, if another thread is currently making an element available. @return the head of this queue, or null if no element is available.
method,java/util/concurrent/SynchronousQueue/isEmpty/, Always returns true. A SynchronousQueue has no internal capacity. @return true
method,java/util/concurrent/SynchronousQueue/size/, Always returns zero. A SynchronousQueue has no internal capacity. @return zero.
method,java/util/concurrent/SynchronousQueue/remainingCapacity/, Always returns zero. A SynchronousQueue has no internal capacity. @return zero.
method,java/util/concurrent/SynchronousQueue/clear/, Does nothing. A SynchronousQueue has no internal capacity.
method,java/util/concurrent/SynchronousQueue/contains/Object, Always returns false. A SynchronousQueue has no internal capacity. @param o the element @return false
method,java/util/concurrent/SynchronousQueue/remove/Object, Always returns false. A SynchronousQueue has no internal capacity. @param o the element to remove @return false
method,java/util/concurrent/SynchronousQueue/containsAll/Collection, Returns false unless the given collection is empty. A SynchronousQueue has no internal capacity. @param c the collection @return false unless given collection is empty
method,java/util/concurrent/SynchronousQueue/removeAll/Collection, Always returns false. A SynchronousQueue has no internal capacity. @param c the collection @return false
method,java/util/concurrent/SynchronousQueue/retainAll/Collection, Always returns false. A SynchronousQueue has no internal capacity. @param c the collection @return false
method,java/util/concurrent/SynchronousQueue/peek/, Always returns null. A SynchronousQueue does not return elements unless actively waited on. @return null
method,java/util/concurrent/SynchronousQueue/iterator/, Returns an empty iterator in which hasNext always returns false. @return an empty iterator
method,java/util/concurrent/SynchronousQueue/toArray/, Returns a zero-length array. @return a zero-length array
method,java/util/concurrent/SynchronousQueue/toArray/Object[], Sets the zeroeth element of the specified array to null (if the array has non-zero length) and returns it. @param a the array @return the specified array @throws NullPointerException if the specified array is null
method,java/util/concurrent/SynchronousQueue/drainTo/Collection, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/SynchronousQueue/drainTo/Collection;int, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/SynchronousQueue/SynchronousQueue/, Creates a SynchronousQueue with nonfair access policy.
method,java/util/concurrent/SynchronousQueue/SynchronousQueue/boolean, Creates a SynchronousQueue with the specified fairness policy. @param fair if true, waiting threads contend in FIFO order for access; otherwise the order is unspecified.
method,java/util/concurrent/Semaphore/acquire/, Acquires a permit from this semaphore, blocking until one is available, or the thread is {@linkplain Thread#interrupt interrupted}. Acquires a permit, if one is available and returns immediately, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: Some other thread invokes the {@link #release} method for this semaphore and the current thread is next to be assigned a permit; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting for a permit, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/Semaphore/acquireUninterruptibly/, Acquires a permit from this semaphore, blocking until one is available. Acquires a permit, if one is available and returns immediately, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes the {@link #release} method for this semaphore and the current thread is next to be assigned a permit. If the current thread is {@linkplain Thread#interrupt interrupted} while waiting for a permit then it will continue to wait, but the time at which the thread is assigned a permit may change compared to the time it would have received the permit had no interruption occurred. When the thread does return from this method its interrupt status will be set.
method,java/util/concurrent/Semaphore/tryAcquire/, Acquires a permit from this semaphore, only if one is available at the time of invocation. Acquires a permit, if one is available and returns immediately, with the value {@code true}, reducing the number of available permits by one. If no permit is available then this method will return immediately with the value {@code false}. Even when this semaphore has been set to use a fair ordering policy, a call to {@code tryAcquire()} will immediately acquire a permit if one is available, whether or not other threads are currently waiting. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting, then use {@link #tryAcquire(long, TimeUnit) tryAcquire(0, TimeUnit.SECONDS) } which is almost equivalent (it also detects interruption). @return {@code true} if a permit was acquired and {@code false} otherwise
method,java/util/concurrent/Semaphore/tryAcquire/long;TimeUnit, Acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. Acquires a permit, if one is available and returns immediately, with the value {@code true}, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread invokes the {@link #release} method for this semaphore and the current thread is next to be assigned a permit; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or The specified waiting time elapses. If a permit is acquired then the value {@code true} is returned. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting to acquire a permit, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value {@code false} is returned. If the time is less than or equal to zero, the method will not wait at all. @param timeout the maximum time to wait for a permit @param unit the time unit of the {@code timeout} argument @return {@code true} if a permit was acquired and {@code false} if the waiting time elapsed before a permit was acquired @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/Semaphore/release/, Releases a permit, returning it to the semaphore. Releases a permit, increasing the number of available permits by one. If any threads are trying to acquire a permit, then one is selected and given the permit that was just released. That thread is (re)enabled for thread scheduling purposes. There is no requirement that a thread that releases a permit must have acquired that permit by calling {@link #acquire}. Correct usage of a semaphore is established by programming convention in the application.
method,java/util/concurrent/Semaphore/acquire/int, Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is {@linkplain Thread#interrupt interrupted}. Acquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: Some other thread invokes one of the {@link #release() release} methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting for a permit, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. Any permits that were to be assigned to this thread are instead assigned to other threads trying to acquire permits, as if permits had been made available by a call to {@link #release()}. @param permits the number of permits to acquire @throws InterruptedException if the current thread is interrupted @throws IllegalArgumentException if {@code permits} is negative
method,java/util/concurrent/Semaphore/acquireUninterruptibly/int, Acquires the given number of permits from this semaphore, blocking until all are available. Acquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes one of the {@link #release() release} methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request. If the current thread is {@linkplain Thread#interrupt interrupted} while waiting for permits then it will continue to wait and its position in the queue is not affected. When the thread does return from this method its interrupt status will be set. @param permits the number of permits to acquire @throws IllegalArgumentException if {@code permits} is negative
method,java/util/concurrent/Semaphore/tryAcquire/int, Acquires the given number of permits from this semaphore, only if all are available at the time of invocation. Acquires the given number of permits, if they are available, and returns immediately, with the value {@code true}, reducing the number of available permits by the given amount. If insufficient permits are available then this method will return immediately with the value {@code false} and the number of available permits is unchanged. Even when this semaphore has been set to use a fair ordering policy, a call to {@code tryAcquire} will immediately acquire a permit if one is available, whether or not other threads are currently waiting. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting, then use {@link #tryAcquire(int, long, TimeUnit) tryAcquire(permits, 0, TimeUnit.SECONDS) } which is almost equivalent (it also detects interruption). @param permits the number of permits to acquire @return {@code true} if the permits were acquired and {@code false} otherwise @throws IllegalArgumentException if {@code permits} is negative
method,java/util/concurrent/Semaphore/tryAcquire/int;long;TimeUnit, Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. Acquires the given number of permits, if they are available and returns immediately, with the value {@code true}, reducing the number of available permits by the given amount. If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread invokes one of the {@link #release() release} methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or The specified waiting time elapses. If the permits are acquired then the value {@code true} is returned. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting to acquire the permits, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to {@link #release()}. If the specified waiting time elapses then the value {@code false} is returned. If the time is less than or equal to zero, the method will not wait at all. Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to {@link #release()}. @param permits the number of permits to acquire @param timeout the maximum time to wait for the permits @param unit the time unit of the {@code timeout} argument @return {@code true} if all permits were acquired and {@code false} if the waiting time elapsed before all permits were acquired @throws InterruptedException if the current thread is interrupted @throws IllegalArgumentException if {@code permits} is negative
method,java/util/concurrent/Semaphore/release/int, Releases the given number of permits, returning them to the semaphore. Releases the given number of permits, increasing the number of available permits by that amount. If any threads are trying to acquire permits, then one is selected and given the permits that were just released. If the number of available permits satisfies that thread's request then that thread is (re)enabled for thread scheduling purposes; otherwise the thread will wait until sufficient permits are available. If there are still permits available after this thread's request has been satisfied, then those permits are assigned in turn to other threads trying to acquire permits. There is no requirement that a thread that releases a permit must have acquired that permit by calling {@link Semaphore#acquire acquire}. Correct usage of a semaphore is established by programming convention in the application. @param permits the number of permits to release @throws IllegalArgumentException if {@code permits} is negative
method,java/util/concurrent/Semaphore/availablePermits/, Returns the current number of permits available in this semaphore. This method is typically used for debugging and testing purposes. @return the number of permits available in this semaphore
method,java/util/concurrent/Semaphore/drainPermits/, Acquires and returns all permits that are immediately available. @return the number of permits acquired
method,java/util/concurrent/Semaphore/reducePermits/int, Shrinks the number of available permits by the indicated reduction. This method can be useful in subclasses that use semaphores to track resources that become unavailable. This method differs from {@code acquire} in that it does not block waiting for permits to become available. @param reduction the number of permits to remove @throws IllegalArgumentException if {@code reduction} is negative
method,java/util/concurrent/Semaphore/isFair/, Returns {@code true} if this semaphore has fairness set true. @return {@code true} if this semaphore has fairness set true
method,java/util/concurrent/Semaphore/hasQueuedThreads/, Queries whether any threads are waiting to acquire. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire. This method is designed primarily for use in monitoring of the system state. @return {@code true} if there may be other threads waiting to acquire the lock
method,java/util/concurrent/Semaphore/getQueueLength/, Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring of the system state, not for synchronization control. @return the estimated number of threads waiting for this lock
method,java/util/concurrent/Semaphore/toString/, Returns a string identifying this semaphore, as well as its state. The state, in brackets, includes the String {@code Permits =} followed by the number of permits. @return a string identifying this semaphore, as well as its state
method,java/util/concurrent/ScheduledThreadPoolExecutor/remove/Runnable,
method,java/util/concurrent/ScheduledThreadPoolExecutor/decorateTask/Runnable;RunnableScheduledFuture, Modifies or replaces the task used to execute a runnable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task. @param runnable the submitted Runnable @param task the task created to execute the runnable @return a task that can execute the runnable @since 1.6
method,java/util/concurrent/ScheduledThreadPoolExecutor/decorateTask/Callable;RunnableScheduledFuture, Modifies or replaces the task used to execute a callable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task. @param callable the submitted Callable @param task the task created to execute the callable @return a task that can execute the callable @since 1.6
method,java/util/concurrent/ScheduledThreadPoolExecutor/schedule/Runnable;long;TimeUnit,
method,java/util/concurrent/ScheduledThreadPoolExecutor/schedule/Callable;long;TimeUnit,
method,java/util/concurrent/ScheduledThreadPoolExecutor/scheduleAtFixedRate/Runnable;long;long;TimeUnit,
method,java/util/concurrent/ScheduledThreadPoolExecutor/scheduleWithFixedDelay/Runnable;long;long;TimeUnit,
method,java/util/concurrent/ScheduledThreadPoolExecutor/execute/Runnable, Executes command with zero required delay. This has effect equivalent to schedule(command, 0, anyUnit). Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed {@link ScheduledFuture}, not the command itself. @param command the task to execute @throws RejectedExecutionException at discretion of RejectedExecutionHandler, if task cannot be accepted for execution because the executor has been shut down. @throws NullPointerException if command is null
method,java/util/concurrent/ScheduledThreadPoolExecutor/submit/Runnable,
method,java/util/concurrent/ScheduledThreadPoolExecutor/submit/Runnable;Object,
method,java/util/concurrent/ScheduledThreadPoolExecutor/submit/Callable,
method,java/util/concurrent/ScheduledThreadPoolExecutor/getContinueExistingPeriodicTasksAfterShutdownPolicy/, Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow or after setting the policy to false when already shutdown. This value is by default false. @return true if will continue after shutdown @see #setContinueExistingPeriodicTasksAfterShutdownPolicy
method,java/util/concurrent/ScheduledThreadPoolExecutor/shutdown/, Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. If the ExecuteExistingDelayedTasksAfterShutdownPolicy has been set false, existing delayed tasks whose delays have not yet elapsed are cancelled. And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set true, future executions of existing periodic tasks will be cancelled.
method,java/util/concurrent/ScheduledThreadPoolExecutor/shutdownNow/, Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. This implementation cancels tasks via {@link Thread#interrupt}, so any task that fails to respond to interrupts may never terminate. @return list of tasks that never commenced execution. Each element of this list is a {@link ScheduledFuture}, including those tasks submitted using execute, which are for scheduling purposes used as the basis of a zero-delay ScheduledFuture. @throws SecurityException {@inheritDoc}
method,java/util/concurrent/ScheduledThreadPoolExecutor/getQueue/, Returns the task queue used by this executor. Each element of this queue is a {@link ScheduledFuture}, including those tasks submitted using execute which are for scheduling purposes used as the basis of a zero-delay ScheduledFuture. Iteration over this queue is not guaranteed to traverse tasks in the order in which they will execute. @return the task queue
method,java/util/concurrent/ScheduledThreadPoolExecutor/ScheduledThreadPoolExecutor/int, Creates a new ScheduledThreadPoolExecutor with the given core pool size. @param corePoolSize the number of threads to keep in the pool, even if they are idle @throws IllegalArgumentException if corePoolSize &lt; 0
method,java/util/concurrent/ScheduledThreadPoolExecutor/ScheduledThreadPoolExecutor/int;ThreadFactory, Creates a new ScheduledThreadPoolExecutor with the given initial parameters. @param corePoolSize the number of threads to keep in the pool, even if they are idle @param threadFactory the factory to use when the executor creates a new thread @throws IllegalArgumentException if corePoolSize &lt; 0 @throws NullPointerException if threadFactory is null
method,java/util/concurrent/ScheduledThreadPoolExecutor/ScheduledThreadPoolExecutor/int;RejectedExecutionHandler, Creates a new ScheduledThreadPoolExecutor with the given initial parameters. @param corePoolSize the number of threads to keep in the pool, even if they are idle @param handler the handler to use when execution is blocked because the thread bounds and queue capacities are reached @throws IllegalArgumentException if corePoolSize &lt; 0 @throws NullPointerException if handler is null
method,java/util/concurrent/ScheduledThreadPoolExecutor/ScheduledThreadPoolExecutor/int;ThreadFactory;RejectedExecutionHandler, Creates a new ScheduledThreadPoolExecutor with the given initial parameters. @param corePoolSize the number of threads to keep in the pool, even if they are idle @param threadFactory the factory to use when the executor creates a new thread @param handler the handler to use when execution is blocked because the thread bounds and queue capacities are reached. @throws IllegalArgumentException if corePoolSize &lt; 0 @throws NullPointerException if threadFactory or handler is null
interface,java/util/concurrent/ScheduledFuture, A delayed result-bearing action that can be cancelled. Usually a scheduled future is the result of scheduling a task with a {@link ScheduledExecutorService}. @since 1.5 @author Doug Lea @param The result type returned by this Future
interface,java/util/concurrent/ScheduledExecutorService, An {@link ExecutorService} that can schedule commands to run after a given delay, or to execute periodically. The schedule methods create tasks with various delays and return a task object that can be used to cancel or check execution. The scheduleAtFixedRate and scheduleWithFixedDelay methods create and execute tasks that run periodically until cancelled. Commands submitted using the {@link Executor#execute} and {@link ExecutorService} submit methods are scheduled with a requested delay of zero. Zero and negative delays (but not periods) are also allowed in schedule methods, and are treated as requests for immediate execution. All schedule methods accept relative delays and periods as arguments, not absolute times or dates. It is a simple matter to transform an absolute time represented as a {@link java.util.Date} to the required form. For example, to schedule at a certain future date, you can use: schedule(task, date.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS). Beware however that expiration of a relative delay need not coincide with the current Date at which the task is enabled due to network time synchronization protocols, clock drift, or other factors. The {@link Executors} class provides convenient factory methods for the ScheduledExecutorService implementations provided in this package. Usage Example Here is a class with a method that sets up a ScheduledExecutorService to beep every ten seconds for an hour: import static java.util.concurrent.TimeUnit.*; class BeeperControl { private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1); public void beepForAnHour() { final Runnable beeper = new Runnable() { public void run() { System.out.println(beep); } }; final ScheduledFuture&lt;?&gt; beeperHandle = scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS); scheduler.schedule(new Runnable() { public void run() { beeperHandle.cancel(true); } }, 60 * 60, SECONDS); } } @since 1.5 @author Doug Lea
method,java/util/concurrent/ScheduledExecutorService/schedule/Runnable;long;TimeUnit, Creates and executes a one-shot action that becomes enabled after the given delay. @param command the task to execute @param delay the time from now to delay execution @param unit the time unit of the delay parameter @return a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if command is null
method,java/util/concurrent/ScheduledExecutorService/schedule/Callable;long;TimeUnit, Creates and executes a ScheduledFuture that becomes enabled after the given delay. @param callable the function to execute @param delay the time from now to delay execution @param unit the time unit of the delay parameter @return a ScheduledFuture that can be used to extract result or cancel @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if callable is null
method,java/util/concurrent/ScheduledExecutorService/scheduleAtFixedRate/Runnable;long;long;TimeUnit, Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or termination of the executor. If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute. @param command the task to execute @param initialDelay the time to delay first execution @param period the period between successive executions @param unit the time unit of the initialDelay and period parameters @return a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if command is null @throws IllegalArgumentException if period less than or equal to zero
method,java/util/concurrent/ScheduledExecutorService/scheduleWithFixedDelay/Runnable;long;long;TimeUnit, Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or termination of the executor. @param command the task to execute @param initialDelay the time to delay first execution @param delay the delay between the termination of one execution and the commencement of the next @param unit the time unit of the initialDelay and delay parameters @return a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if command is null @throws IllegalArgumentException if delay less than or equal to zero
interface,java/util/concurrent/RunnableScheduledFuture, A {@link ScheduledFuture} that is {@link Runnable}. Successful execution of the run method causes completion of the Future and allows access to its results. @see FutureTask @see Executor @since 1.6 @author Doug Lea @param The result type returned by this Future's get method
method,java/util/concurrent/RunnableScheduledFuture/isPeriodic/, Returns true if this is a periodic task. A periodic task may re-run according to some schedule. A non-periodic task can be run only once. @return true if this task is periodic
interface,java/util/concurrent/RunnableFuture, A {@link Future} that is {@link Runnable}. Successful execution of the run method causes completion of the Future and allows access to its results. @see FutureTask @see Executor @since 1.6 @author Doug Lea @param The result type returned by this Future's get method
method,java/util/concurrent/RunnableFuture/run/, Sets this Future to the result of its computation unless it has been cancelled.
interface,java/util/concurrent/RejectedExecutionHandler, A handler for tasks that cannot be executed by a {@link ThreadPoolExecutor}. @since 1.5 @author Doug Lea
method,java/util/concurrent/RejectedExecutionHandler/rejectedExecution/Runnable;ThreadPoolExecutor, Method that may be invoked by a {@link ThreadPoolExecutor} when {@link ThreadPoolExecutor#execute execute} cannot accept a task. This may occur when no more threads or queue slots are available because their bounds would be exceeded, or upon shutdown of the Executor. In the absence of other alternatives, the method may throw an unchecked {@link RejectedExecutionException}, which will be propagated to the caller of {@code execute}. @param r the runnable task requested to be executed @param executor the executor attempting to execute this task @throws RejectedExecutionException if there is no remedy
class,java/util/concurrent/RejectedExecutionException, Exception thrown by an {@link Executor} when a task cannot be accepted for execution. @since 1.5 @author Doug Lea
method,java/util/concurrent/RejectedExecutionException/RejectedExecutionException/, Constructs a RejectedExecutionException with no detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause(Throwable) initCause}.
method,java/util/concurrent/RejectedExecutionException/RejectedExecutionException/String, Constructs a RejectedExecutionException with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause(Throwable) initCause}. @param message the detail message
method,java/util/concurrent/RejectedExecutionException/RejectedExecutionException/String;Throwable, Constructs a RejectedExecutionException with the specified detail message and cause. @param message the detail message @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method)
method,java/util/concurrent/RejectedExecutionException/RejectedExecutionException/Throwable, Constructs a RejectedExecutionException with the specified cause. The detail message is set to: (cause == null ? null : cause.toString()) (which typically contains the class and detail message of cause). @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method)
class,java/util/concurrent/PriorityBlockingQueue, An unbounded {@linkplain BlockingQueue blocking queue} that uses the same ordering rules as class {@link PriorityQueue} and supplies blocking retrieval operations. While this queue is logically unbounded, attempted additions may fail due to resource exhaustion (causing OutOfMemoryError). This class does not permit null elements. A priority queue relying on {@linkplain Comparable natural ordering} also does not permit insertion of non-comparable objects (doing so results in ClassCastException). This class and its iterator implement all of the optional methods of the {@link Collection} and {@link Iterator} interfaces. The Iterator provided in method {@link #iterator()} is not guaranteed to traverse the elements of the PriorityBlockingQueue in any particular order. If you need ordered traversal, consider using Arrays.sort(pq.toArray()). Also, method drainTo can be used to remove some or all elements in priority order and place them in another collection. Operations on this class make no guarantees about the ordering of elements with equal priority. If you need to enforce an ordering, you can define custom classes or comparators that use a secondary key to break ties in primary priority values. For example, here is a class that applies first-in-first-out tie-breaking to comparable elements. To use it, you would insert a new FIFOEntry(anEntry) instead of a plain entry object. class FIFOEntry&lt;E extends Comparable&lt;? super E&gt;&gt; implements Comparable&lt;FIFOEntry&lt;E&gt;&gt; { final static AtomicLong seq = new AtomicLong(); final long seqNum; final E entry; public FIFOEntry(E entry) { seqNum = seq.getAndIncrement(); this.entry = entry; } public E getEntry() { return entry; } public int compareTo(FIFOEntry&lt;E&gt; other) { int res = entry.compareTo(other.entry); if (res == 0 &amp;&amp; other.entry != this.entry) res = (seqNum &lt; other.seqNum ? -1 : 1); return res; } } This class is a member of the Java Collections Framework. @since 1.5 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/PriorityBlockingQueue/add/Object, Inserts the specified element into this priority queue. @param e the element to add @return true (as specified by {@link Collection#add}) @throws ClassCastException if the specified element cannot be compared with elements currently in the priority queue according to the priority queue's ordering @throws NullPointerException if the specified element is null
method,java/util/concurrent/PriorityBlockingQueue/offer/Object, Inserts the specified element into this priority queue. @param e the element to add @return true (as specified by {@link Queue#offer}) @throws ClassCastException if the specified element cannot be compared with elements currently in the priority queue according to the priority queue's ordering @throws NullPointerException if the specified element is null
method,java/util/concurrent/PriorityBlockingQueue/put/Object, Inserts the specified element into this priority queue. As the queue is unbounded this method will never block. @param e the element to add @throws ClassCastException if the specified element cannot be compared with elements currently in the priority queue according to the priority queue's ordering @throws NullPointerException if the specified element is null
method,java/util/concurrent/PriorityBlockingQueue/poll/,
method,java/util/concurrent/PriorityBlockingQueue/take/,
method,java/util/concurrent/PriorityBlockingQueue/poll/long;TimeUnit,
method,java/util/concurrent/PriorityBlockingQueue/peek/,
method,java/util/concurrent/PriorityBlockingQueue/comparator/, Returns the comparator used to order the elements in this queue, or null if this queue uses the {@linkplain Comparable natural ordering} of its elements. @return the comparator used to order the elements in this queue, or null if this queue uses the natural ordering of its elements
method,java/util/concurrent/PriorityBlockingQueue/size/,
method,java/util/concurrent/PriorityBlockingQueue/remainingCapacity/, Always returns Integer.MAX_VALUE because a PriorityBlockingQueue is not capacity constrained. @return Integer.MAX_VALUE
method,java/util/concurrent/PriorityBlockingQueue/remove/Object, Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element {@code e} such that {@code o.equals(e)}, if this queue contains one or more such elements. Returns {@code true} if and only if this queue contained the specified element (or equivalently, if this queue changed as a result of the call). @param o element to be removed from this queue, if present @return true if this queue changed as a result of the call
method,java/util/concurrent/PriorityBlockingQueue/contains/Object, Returns {@code true} if this queue contains the specified element. More formally, returns {@code true} if and only if this queue contains at least one element {@code e} such that {@code o.equals(e)}. @param o object to be checked for containment in this queue @return true if this queue contains the specified element
method,java/util/concurrent/PriorityBlockingQueue/toString/,
method,java/util/concurrent/PriorityBlockingQueue/drainTo/Collection, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/PriorityBlockingQueue/drainTo/Collection;int, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/PriorityBlockingQueue/clear/, Atomically removes all of the elements from this queue. The queue will be empty after this call returns.
method,java/util/concurrent/PriorityBlockingQueue/PriorityBlockingQueue/, Creates a PriorityBlockingQueue with the default initial capacity (11) that orders its elements according to their {@linkplain Comparable natural ordering}.
method,java/util/concurrent/PriorityBlockingQueue/PriorityBlockingQueue/int, Creates a PriorityBlockingQueue with the specified initial capacity that orders its elements according to their {@linkplain Comparable natural ordering}. @param initialCapacity the initial capacity for this priority queue @throws IllegalArgumentException if initialCapacity is less than 1
method,java/util/concurrent/PriorityBlockingQueue/PriorityBlockingQueue/int;Comparator, Creates a PriorityBlockingQueue with the specified initial capacity that orders its elements according to the specified comparator. @param initialCapacity the initial capacity for this priority queue @param comparator the comparator that will be used to order this priority queue. If {@code null}, the {@linkplain Comparable natural ordering} of the elements will be used. @throws IllegalArgumentException if initialCapacity is less than 1
method,java/util/concurrent/PriorityBlockingQueue/PriorityBlockingQueue/Collection, Creates a PriorityBlockingQueue containing the elements in the specified collection. If the specified collection is a {@link SortedSet} or a {@link PriorityQueue}, this priority queue will be ordered according to the same ordering. Otherwise, this priority queue will be ordered according to the {@linkplain Comparable natural ordering} of its elements. @param c the collection whose elements are to be placed into this priority queue @throws ClassCastException if elements of the specified collection cannot be compared to one another according to the priority queue's ordering @throws NullPointerException if the specified collection or any of its elements are null
class,java/util/concurrent/LinkedBlockingQueue, An optionally-bounded {@linkplain BlockingQueue blocking queue} based on linked nodes. This queue orders elements FIFO (first-in-first-out). The head of the queue is that element that has been on the queue the longest time. The tail of the queue is that element that has been on the queue the shortest time. New elements are inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. Linked queues typically have higher throughput than array-based queues but less predictable performance in most concurrent applications. The optional capacity bound constructor argument serves as a way to prevent excessive queue expansion. The capacity, if unspecified, is equal to {@link Integer#MAX_VALUE}. Linked nodes are dynamically created upon each insertion unless this would bring the queue above capacity. This class and its iterator implement all of the optional methods of the {@link Collection} and {@link Iterator} interfaces. This class is a member of the Java Collections Framework. @since 1.5 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/LinkedBlockingQueue/size/, Returns the number of elements in this queue. @return the number of elements in this queue
method,java/util/concurrent/LinkedBlockingQueue/remainingCapacity/, Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this queue less the current size of this queue. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element.
method,java/util/concurrent/LinkedBlockingQueue/put/Object, Inserts the specified element at the tail of this queue, waiting if necessary for space to become available. @throws InterruptedException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingQueue/offer/Object;long;TimeUnit, Inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available. @return true if successful, or false if the specified waiting time elapses before space is available. @throws InterruptedException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingQueue/take/,
method,java/util/concurrent/LinkedBlockingQueue/poll/long;TimeUnit,
method,java/util/concurrent/LinkedBlockingQueue/poll/,
method,java/util/concurrent/LinkedBlockingQueue/peek/,
method,java/util/concurrent/LinkedBlockingQueue/remove/Object, Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if this queue contained the specified element (or equivalently, if this queue changed as a result of the call). @param o element to be removed from this queue, if present @return true if this queue changed as a result of the call
method,java/util/concurrent/LinkedBlockingQueue/toString/,
method,java/util/concurrent/LinkedBlockingQueue/clear/, Atomically removes all of the elements from this queue. The queue will be empty after this call returns.
method,java/util/concurrent/LinkedBlockingQueue/drainTo/Collection, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingQueue/drainTo/Collection;int, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingQueue/LinkedBlockingQueue/, Creates a LinkedBlockingQueue with a capacity of {@link Integer#MAX_VALUE}.
method,java/util/concurrent/LinkedBlockingQueue/LinkedBlockingQueue/int, Creates a LinkedBlockingQueue with the given (fixed) capacity. @param capacity the capacity of this queue @throws IllegalArgumentException if capacity is not greater than zero
method,java/util/concurrent/LinkedBlockingQueue/LinkedBlockingQueue/Collection, Creates a LinkedBlockingQueue with a capacity of {@link Integer#MAX_VALUE}, initially containing the elements of the given collection, added in traversal order of the collection's iterator. @param c the collection of elements to initially contain @throws NullPointerException if the specified collection or any of its elements are null
class,java/util/concurrent/LinkedBlockingDeque, An optionally-bounded {@linkplain BlockingDeque blocking deque} based on linked nodes. The optional capacity bound constructor argument serves as a way to prevent excessive expansion. The capacity, if unspecified, is equal to {@link Integer#MAX_VALUE}. Linked nodes are dynamically created upon each insertion unless this would bring the deque above capacity. Most operations run in constant time (ignoring time spent blocking). Exceptions include {@link #remove(Object) remove}, {@link #removeFirstOccurrence removeFirstOccurrence}, {@link #removeLastOccurrence removeLastOccurrence}, {@link #contains contains}, {@link #iterator iterator.remove()}, and the bulk operations, all of which run in linear time. This class and its iterator implement all of the optional methods of the {@link Collection} and {@link Iterator} interfaces. This class is a member of the Java Collections Framework. @since 1.6 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/LinkedBlockingDeque/addFirst/Object, @throws IllegalStateException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/addLast/Object, @throws IllegalStateException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/offerFirst/Object, @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/offerLast/Object, @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/putFirst/Object, @throws NullPointerException {@inheritDoc} @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/putLast/Object, @throws NullPointerException {@inheritDoc} @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/offerFirst/Object;long;TimeUnit, @throws NullPointerException {@inheritDoc} @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/offerLast/Object;long;TimeUnit, @throws NullPointerException {@inheritDoc} @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/removeFirst/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/removeLast/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/pollFirst/,
method,java/util/concurrent/LinkedBlockingDeque/pollLast/,
method,java/util/concurrent/LinkedBlockingDeque/takeFirst/,
method,java/util/concurrent/LinkedBlockingDeque/takeLast/,
method,java/util/concurrent/LinkedBlockingDeque/pollFirst/long;TimeUnit,
method,java/util/concurrent/LinkedBlockingDeque/pollLast/long;TimeUnit,
method,java/util/concurrent/LinkedBlockingDeque/getFirst/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/getLast/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/peekFirst/,
method,java/util/concurrent/LinkedBlockingDeque/peekLast/,
method,java/util/concurrent/LinkedBlockingDeque/removeFirstOccurrence/Object,
method,java/util/concurrent/LinkedBlockingDeque/removeLastOccurrence/Object,
method,java/util/concurrent/LinkedBlockingDeque/add/Object, Inserts the specified element at the end of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, it is generally preferable to use method {@link #offer(Object) offer}. This method is equivalent to {@link #addLast}. @throws IllegalStateException if the element cannot be added at this time due to capacity restrictions @throws NullPointerException if the specified element is null
method,java/util/concurrent/LinkedBlockingDeque/offer/Object, @throws NullPointerException if the specified element is null
method,java/util/concurrent/LinkedBlockingDeque/put/Object, @throws NullPointerException {@inheritDoc} @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/offer/Object;long;TimeUnit, @throws NullPointerException {@inheritDoc} @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/remove/, Retrieves and removes the head of the queue represented by this deque. This method differs from {@link #poll poll} only in that it throws an exception if this deque is empty. This method is equivalent to {@link #removeFirst() removeFirst}. @return the head of the queue represented by this deque @throws NoSuchElementException if this deque is empty
method,java/util/concurrent/LinkedBlockingDeque/poll/,
method,java/util/concurrent/LinkedBlockingDeque/take/,
method,java/util/concurrent/LinkedBlockingDeque/poll/long;TimeUnit,
method,java/util/concurrent/LinkedBlockingDeque/element/, Retrieves, but does not remove, the head of the queue represented by this deque. This method differs from {@link #peek peek} only in that it throws an exception if this deque is empty. This method is equivalent to {@link #getFirst() getFirst}. @return the head of the queue represented by this deque @throws NoSuchElementException if this deque is empty
method,java/util/concurrent/LinkedBlockingDeque/peek/,
method,java/util/concurrent/LinkedBlockingDeque/remainingCapacity/, Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this deque less the current size of this deque. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element.
method,java/util/concurrent/LinkedBlockingDeque/drainTo/Collection, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/drainTo/Collection;int, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/push/Object, @throws IllegalStateException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/pop/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/LinkedBlockingDeque/remove/Object, Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to {@link #removeFirstOccurrence(Object) removeFirstOccurrence}. @param o element to be removed from this deque, if present @return true if this deque changed as a result of the call
method,java/util/concurrent/LinkedBlockingDeque/size/, Returns the number of elements in this deque. @return the number of elements in this deque
method,java/util/concurrent/LinkedBlockingDeque/contains/Object, Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that o.equals(e). @param o object to be checked for containment in this deque @return true if this deque contains the specified element
method,java/util/concurrent/LinkedBlockingDeque/toArray/Object[], Returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array. If the deque fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to null. Like the {@link #toArray()} method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of String: String[] y = x.toArray(new String[0]); Note that toArray(new Object[0]) is identical in function to toArray(). @param a the array into which the elements of the deque are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose @return an array containing all of the elements in this deque @throws ArrayStoreException if the runtime type of the specified array is not a supertype of the runtime type of every element in this deque @throws NullPointerException if the specified array is null
method,java/util/concurrent/LinkedBlockingDeque/toString/,
method,java/util/concurrent/LinkedBlockingDeque/clear/, Atomically removes all of the elements from this deque. The deque will be empty after this call returns.
method,java/util/concurrent/LinkedBlockingDeque/LinkedBlockingDeque/, Creates a LinkedBlockingDeque with a capacity of {@link Integer#MAX_VALUE}.
method,java/util/concurrent/LinkedBlockingDeque/LinkedBlockingDeque/int, Creates a LinkedBlockingDeque with the given (fixed) capacity. @param capacity the capacity of this deque @throws IllegalArgumentException if capacity is less than 1
method,java/util/concurrent/LinkedBlockingDeque/LinkedBlockingDeque/Collection, Creates a LinkedBlockingDeque with a capacity of {@link Integer#MAX_VALUE}, initially containing the elements of the given collection, added in traversal order of the collection's iterator. @param c the collection of elements to initially contain @throws NullPointerException if the specified collection or any of its elements are null
class,java/util/concurrent/FutureTask, A cancellable asynchronous computation. This class provides a base implementation of {@link Future}, with methods to start and cancel a computation, query to see if the computation is complete, and retrieve the result of the computation. The result can only be retrieved when the computation has completed; the get method will block if the computation has not yet completed. Once the computation has completed, the computation cannot be restarted or cancelled. A FutureTask can be used to wrap a {@link Callable} or {@link java.lang.Runnable} object. Because FutureTask implements Runnable, a FutureTask can be submitted to an {@link Executor} for execution. In addition to serving as a standalone class, this class provides protected functionality that may be useful when creating customized task classes. @since 1.5 @author Doug Lea @param The result type returned by this FutureTask's get method
method,java/util/concurrent/FutureTask/isCancelled/,
method,java/util/concurrent/FutureTask/isDone/,
method,java/util/concurrent/FutureTask/cancel/boolean,
method,java/util/concurrent/FutureTask/get/, @throws CancellationException {@inheritDoc}
method,java/util/concurrent/FutureTask/get/long;TimeUnit, @throws CancellationException {@inheritDoc}
method,java/util/concurrent/FutureTask/set/Object, Sets the result of this Future to the given value unless this future has already been set or has been cancelled. This method is invoked internally by the run method upon successful completion of the computation. @param v the value
method,java/util/concurrent/FutureTask/setException/Throwable, Causes this future to report an ExecutionException with the given throwable as its cause, unless this Future has already been set or has been cancelled. This method is invoked internally by the run method upon failure of the computation. @param t the cause of failure
method,java/util/concurrent/FutureTask/run/, Sets this Future to the result of its computation unless it has been cancelled.
method,java/util/concurrent/FutureTask/runAndReset/, Executes the computation without setting its result, and then resets this Future to initial state, failing to do so if the computation encounters an exception or is cancelled. This is designed for use with tasks that intrinsically execute more than once. @return true if successfully run and reset
method,java/util/concurrent/FutureTask/FutureTask/Callable, Creates a FutureTask that will upon running, execute the given Callable. @param callable the callable task @throws NullPointerException if callable is null
method,java/util/concurrent/FutureTask/FutureTask/Runnable;Object, Creates a FutureTask that will upon running, execute the given Runnable, and arrange that get will return the given result on successful completion. @param runnable the runnable task @param result the result to return on successful completion. If you don't need a particular result, consider using constructions of the form: Future&lt;?&gt; f = new FutureTask&lt;Object&gt;(runnable, null) @throws NullPointerException if runnable is null
interface,java/util/concurrent/Future, A Future represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method get when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the cancel method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a Future for the sake of cancellability but not provide a usable result, you can declare types of the form Future&lt;?&gt; and return null as a result of the underlying task. Sample Usage (Note that the following classes are all made-up.) interface ArchiveSearcher { String search(String target); } class App { ExecutorService executor = ... ArchiveSearcher searcher = ... void showSearch(final String target) throws InterruptedException { Future&lt;String&gt; future = executor.submit(new Callable&lt;String&gt;() { public String call() { return searcher.search(target); }}); displayOtherThings(); // do other things while searching try { displayText(future.get()); // use future } catch (ExecutionException ex) { cleanup(); return; } } } The {@link FutureTask} class is an implementation of Future that implements Runnable, and so may be executed by an Executor. For example, the above construction with submit could be replaced by: FutureTask&lt;String&gt; future = new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() { public String call() { return searcher.search(target); }}); executor.execute(future); Memory consistency effects: Actions taken by the asynchronous computation happen-before actions following the corresponding {@code Future.get()} in another thread. @see FutureTask @see Executor @since 1.5 @author Doug Lea @param The result type returned by this Future's get method
method,java/util/concurrent/Future/cancel/boolean, Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, this task should never run. If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task. After this method returns, subsequent calls to {@link #isDone} will always return true. Subsequent calls to {@link #isCancelled} will always return true if this method returned true. @param mayInterruptIfRunning true if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete @return false if the task could not be cancelled, typically because it has already completed normally; true otherwise
method,java/util/concurrent/Future/isCancelled/, Returns true if this task was cancelled before it completed normally. @return true if this task was cancelled before it completed
method,java/util/concurrent/Future/isDone/, Returns true if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return true. @return true if this task completed
method,java/util/concurrent/Future/get/, Waits if necessary for the computation to complete, and then retrieves its result. @return the computed result @throws CancellationException if the computation was cancelled @throws ExecutionException if the computation threw an exception @throws InterruptedException if the current thread was interrupted while waiting
method,java/util/concurrent/Future/get/long;TimeUnit, Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available. @param timeout the maximum time to wait @param unit the time unit of the timeout argument @return the computed result @throws CancellationException if the computation was cancelled @throws ExecutionException if the computation threw an exception @throws InterruptedException if the current thread was interrupted while waiting @throws TimeoutException if the wait timed out
class,java/util/concurrent/Executors, Factory and utility methods for {@link Executor}, {@link ExecutorService}, {@link ScheduledExecutorService}, {@link ThreadFactory}, and {@link Callable} classes defined in this package. This class supports the following kinds of methods: Methods that create and return an {@link ExecutorService} set up with commonly useful configuration settings. Methods that create and return a {@link ScheduledExecutorService} set up with commonly useful configuration settings. Methods that create and return a wrapped ExecutorService, that disables reconfiguration by making implementation-specific methods inaccessible. Methods that create and return a {@link ThreadFactory} that sets newly created threads to a known state. Methods that create and return a {@link Callable} out of other closure-like forms, so they can be used in execution methods requiring Callable. @since 1.5 @author Doug Lea
method,java/util/concurrent/Executors/newFixedThreadPool/int, Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly {@link ExecutorService#shutdown shutdown}. @param nThreads the number of threads in the pool @return the newly created thread pool @throws IllegalArgumentException if nThreads &lt;= 0
method,java/util/concurrent/Executors/newFixedThreadPool/int;ThreadFactory, Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly {@link ExecutorService#shutdown shutdown}. @param nThreads the number of threads in the pool @param threadFactory the factory to use when creating new threads @return the newly created thread pool @throws NullPointerException if threadFactory is null @throws IllegalArgumentException if nThreads &lt;= 0
method,java/util/concurrent/Executors/newSingleThreadExecutor/, Creates an Executor that uses a single worker thread operating off an unbounded queue. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.) Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent newFixedThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads. @return the newly created single-threaded Executor
method,java/util/concurrent/Executors/newSingleThreadExecutor/ThreadFactory, Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed. Unlike the otherwise equivalent newFixedThreadPool(1, threadFactory) the returned executor is guaranteed not to be reconfigurable to use additional threads. @param threadFactory the factory to use when creating new threads @return the newly created single-threaded Executor @throws NullPointerException if threadFactory is null
method,java/util/concurrent/Executors/newCachedThreadPool/, Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available. These pools will typically improve the performance of programs that execute many short-lived asynchronous tasks. Calls to execute will reuse previously constructed threads if available. If no existing thread is available, a new thread will be created and added to the pool. Threads that have not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains idle for long enough will not consume any resources. Note that pools with similar properties but different details (for example, timeout parameters) may be created using {@link ThreadPoolExecutor} constructors. @return the newly created thread pool
method,java/util/concurrent/Executors/newCachedThreadPool/ThreadFactory, Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed. @param threadFactory the factory to use when creating new threads @return the newly created thread pool @throws NullPointerException if threadFactory is null
method,java/util/concurrent/Executors/newScheduledThreadPool/int, Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically. @param corePoolSize the number of threads to keep in the pool, even if they are idle. @return a newly created scheduled thread pool @throws IllegalArgumentException if corePoolSize &lt; 0
method,java/util/concurrent/Executors/newScheduledThreadPool/int;ThreadFactory, Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically. @param corePoolSize the number of threads to keep in the pool, even if they are idle. @param threadFactory the factory to use when the executor creates a new thread. @return a newly created scheduled thread pool @throws IllegalArgumentException if corePoolSize &lt; 0 @throws NullPointerException if threadFactory is null
method,java/util/concurrent/Executors/unconfigurableExecutorService/ExecutorService, Returns an object that delegates all defined {@link ExecutorService} methods to the given executor, but not any other methods that might otherwise be accessible using casts. This provides a way to safely freeze configuration and disallow tuning of a given concrete implementation. @param executor the underlying implementation @return an ExecutorService instance @throws NullPointerException if executor null
method,java/util/concurrent/Executors/unconfigurableScheduledExecutorService/ScheduledExecutorService, Returns an object that delegates all defined {@link ScheduledExecutorService} methods to the given executor, but not any other methods that might otherwise be accessible using casts. This provides a way to safely freeze configuration and disallow tuning of a given concrete implementation. @param executor the underlying implementation @return a ScheduledExecutorService instance @throws NullPointerException if executor null
method,java/util/concurrent/Executors/defaultThreadFactory/, Returns a default thread factory used to create new threads. This factory creates all new threads used by an Executor in the same {@link ThreadGroup}. If there is a {@link java.lang.SecurityManager}, it uses the group of {@link System#getSecurityManager}, else the group of the thread invoking this defaultThreadFactory method. Each new thread is created as a non-daemon thread with priority set to the smaller of Thread.NORM_PRIORITY and the maximum priority permitted in the thread group. New threads have names accessible via {@link Thread#getName} of pool-N-thread-M, where N is the sequence number of this factory, and M is the sequence number of the thread created by this factory. @return a thread factory
method,java/util/concurrent/Executors/privilegedThreadFactory/, Returns a thread factory used to create new threads that have the same permissions as the current thread. This factory creates threads with the same settings as {@link Executors#defaultThreadFactory}, additionally setting the AccessControlContext and contextClassLoader of new threads to be the same as the thread invoking this privilegedThreadFactory method. A new privilegedThreadFactory can be created within an {@link AccessController#doPrivileged} action setting the current thread's access control context to create threads with the selected permission settings holding within that action. Note that while tasks running within such threads will have the same access control and class loader settings as the current thread, they need not have the same {@link java.lang.ThreadLocal} or {@link java.lang.InheritableThreadLocal} values. If necessary, particular values of thread locals can be set or reset before any task runs in {@link ThreadPoolExecutor} subclasses using {@link ThreadPoolExecutor#beforeExecute}. Also, if it is necessary to initialize worker threads to have the same InheritableThreadLocal settings as some other designated thread, you can create a custom ThreadFactory in which that thread waits for and services requests to create others that will inherit its values. @return a thread factory @throws AccessControlException if the current access control context does not have permission to both get and set context class loader.
method,java/util/concurrent/Executors/callable/Runnable;Object, Returns a {@link Callable} object that, when called, runs the given task and returns the given result. This can be useful when applying methods requiring a Callable to an otherwise resultless action. @param task the task to run @param result the result to return @return a callable object @throws NullPointerException if task null
method,java/util/concurrent/Executors/callable/Runnable, Returns a {@link Callable} object that, when called, runs the given task and returns null. @param task the task to run @return a callable object @throws NullPointerException if task null
method,java/util/concurrent/Executors/callable/PrivilegedAction, Returns a {@link Callable} object that, when called, runs the given privileged action and returns its result. @param action the privileged action to run @return a callable object @throws NullPointerException if action null
method,java/util/concurrent/Executors/callable/PrivilegedExceptionAction, Returns a {@link Callable} object that, when called, runs the given privileged exception action and returns its result. @param action the privileged exception action to run @return a callable object @throws NullPointerException if action null
interface,java/util/concurrent/ExecutorService, An {@link Executor} that provides methods to manage termination and methods that can produce a {@link Future} for tracking progress of one or more asynchronous tasks. An ExecutorService can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an ExecutorService. The {@link #shutdown} method will allow previously submitted tasks to execute before terminating, while the {@link #shutdownNow} method prevents waiting tasks from starting and attempts to stop currently executing tasks. Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted. An unused ExecutorService should be shut down to allow reclamation of its resources. Method submit extends base method {@link Executor#execute} by creating and returning a {@link Future} that can be used to cancel execution and/or wait for completion. Methods invokeAny and invokeAll perform the most commonly useful forms of bulk execution, executing a collection of tasks and then waiting for at least one, or all, to complete. (Class {@link ExecutorCompletionService} can be used to write customized variants of these methods.) The {@link Executors} class provides factory methods for the executor services provided in this package. Usage Examples Here is a sketch of a network service in which threads in a thread pool service incoming requests. It uses the preconfigured {@link Executors#newFixedThreadPool} factory method: class NetworkService implements Runnable { private final ServerSocket serverSocket; private final ExecutorService pool; public NetworkService(int port, int poolSize) throws IOException { serverSocket = new ServerSocket(port); pool = Executors.newFixedThreadPool(poolSize); } public void run() { // run the service try { for (;;) { pool.execute(new Handler(serverSocket.accept())); } } catch (IOException ex) { pool.shutdown(); } } } class Handler implements Runnable { private final Socket socket; Handler(Socket socket) { this.socket = socket; } public void run() { // read and service request on socket } } The following method shuts down an ExecutorService in two phases, first by calling shutdown to reject incoming tasks, and then calling shutdownNow, if necessary, to cancel any lingering tasks: void shutdownAndAwaitTermination(ExecutorService pool) { pool.shutdown(); // Disable new tasks from being submitted try { // Wait a while for existing tasks to terminate if (!pool.awaitTermination(60, TimeUnit.SECONDS)) { pool.shutdownNow(); // Cancel currently executing tasks // Wait a while for tasks to respond to being cancelled if (!pool.awaitTermination(60, TimeUnit.SECONDS)) System.err.println(Pool did not terminate); } } catch (InterruptedException ie) { // (Re-)Cancel if current thread also interrupted pool.shutdownNow(); // Preserve interrupt status Thread.currentThread().interrupt(); } } Memory consistency effects: Actions in a thread prior to the submission of a {@code Runnable} or {@code Callable} task to an {@code ExecutorService} happen-before any actions taken by that task, which in turn happen-before the result is retrieved via {@code Future.get()}. @since 1.5 @author Doug Lea
method,java/util/concurrent/ExecutorService/shutdown/, Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. @throws SecurityException if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold {@link java.lang.RuntimePermission}(modifyThread), or the security manager's checkAccess method denies access.
method,java/util/concurrent/ExecutorService/shutdownNow/, Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. For example, typical implementations will cancel via {@link Thread#interrupt}, so any task that fails to respond to interrupts may never terminate. @return list of tasks that never commenced execution @throws SecurityException if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold {@link java.lang.RuntimePermission}(modifyThread), or the security manager's checkAccess method denies access.
method,java/util/concurrent/ExecutorService/isShutdown/, Returns true if this executor has been shut down. @return true if this executor has been shut down
method,java/util/concurrent/ExecutorService/isTerminated/, Returns true if all tasks have completed following shut down. Note that isTerminated is never true unless either shutdown or shutdownNow was called first. @return true if all tasks have completed following shut down
method,java/util/concurrent/ExecutorService/awaitTermination/long;TimeUnit, Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. @param timeout the maximum time to wait @param unit the time unit of the timeout argument @return true if this executor terminated and false if the timeout elapsed before termination @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/ExecutorService/submit/Callable, Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future's get method will return the task's result upon successful completion. If you would like to immediately block waiting for a task, you can use constructions of the form result = exec.submit(aCallable).get(); Note: The {@link Executors} class includes a set of methods that can convert some other common closure-like objects, for example, {@link java.security.PrivilegedAction} to {@link Callable} form so they can be submitted. @param task the task to submit @return a Future representing pending completion of the task @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if the task is null
method,java/util/concurrent/ExecutorService/submit/Runnable;Object, Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion. @param task the task to submit @param result the result to return @return a Future representing pending completion of the task @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if the task is null
method,java/util/concurrent/ExecutorService/submit/Runnable, Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return null upon successful completion. @param task the task to submit @return a Future representing pending completion of the task @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if the task is null
method,java/util/concurrent/ExecutorService/invokeAll/Collection, Executes the given tasks, returning a list of Futures holding their status and results when all complete. {@link Future#isDone} is true for each element of the returned list. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress. @param tasks the collection of tasks @return A list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed. @throws InterruptedException if interrupted while waiting, in which case unfinished tasks are cancelled. @throws NullPointerException if tasks or any of its elements are null @throws RejectedExecutionException if any task cannot be scheduled for execution
method,java/util/concurrent/ExecutorService/invokeAll/Collection;long;TimeUnit, Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first. {@link Future#isDone} is true for each element of the returned list. Upon return, tasks that have not completed are cancelled. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress. @param tasks the collection of tasks @param timeout the maximum time to wait @param unit the time unit of the timeout argument @return a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed. @throws InterruptedException if interrupted while waiting, in which case unfinished tasks are cancelled @throws NullPointerException if tasks, any of its elements, or unit are null @throws RejectedExecutionException if any task cannot be scheduled for execution
method,java/util/concurrent/ExecutorService/invokeAny/Collection, Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress. @param tasks the collection of tasks @return the result returned by one of the tasks @throws InterruptedException if interrupted while waiting @throws NullPointerException if tasks or any of its elements are null @throws IllegalArgumentException if tasks is empty @throws ExecutionException if no task successfully completes @throws RejectedExecutionException if tasks cannot be scheduled for execution
method,java/util/concurrent/ExecutorService/invokeAny/Collection;long;TimeUnit, Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress. @param tasks the collection of tasks @param timeout the maximum time to wait @param unit the time unit of the timeout argument @return the result returned by one of the tasks. @throws InterruptedException if interrupted while waiting @throws NullPointerException if tasks, any of its elements, or unit are null @throws TimeoutException if the given timeout elapses before any task successfully completes @throws ExecutionException if no task successfully completes @throws RejectedExecutionException if tasks cannot be scheduled for execution
class,java/util/concurrent/ExecutorCompletionService, A {@link CompletionService} that uses a supplied {@link Executor} to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using take. The class is lightweight enough to be suitable for transient use when processing groups of tasks. Usage Examples. Suppose you have a set of solvers for a certain problem, each returning a value of some type Result, and would like to run them concurrently, processing the results of each of them that return a non-null value, in some method use(Result r). You could write this as: void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers) throws InterruptedException, ExecutionException { CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e); for (Callable&lt;Result&gt; s : solvers) ecs.submit(s); int n = solvers.size(); for (int i = 0; i &lt; n; ++i) { Result r = ecs.take().get(); if (r != null) use(r); } } Suppose instead that you would like to use the first non-null result of the set of tasks, ignoring any that encounter exceptions, and cancelling all other tasks when the first one is ready: void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers) throws InterruptedException { CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e); int n = solvers.size(); List&lt;Future&lt;Result&gt;&gt; futures = new ArrayList&lt;Future&lt;Result&gt;&gt;(n); Result result = null; try { for (Callable&lt;Result&gt; s : solvers) futures.add(ecs.submit(s)); for (int i = 0; i &lt; n; ++i) { try { Result r = ecs.take().get(); if (r != null) { result = r; break; } } catch (ExecutionException ignore) {} } } finally { for (Future&lt;Result&gt; f : futures) f.cancel(true); } if (result != null) use(result); } 
method,java/util/concurrent/ExecutorCompletionService/submit/Callable,
method,java/util/concurrent/ExecutorCompletionService/submit/Runnable;Object,
method,java/util/concurrent/ExecutorCompletionService/take/,
method,java/util/concurrent/ExecutorCompletionService/poll/,
method,java/util/concurrent/ExecutorCompletionService/poll/long;TimeUnit,
method,java/util/concurrent/ExecutorCompletionService/ExecutorCompletionService/Executor, Creates an ExecutorCompletionService using the supplied executor for base task execution and a {@link LinkedBlockingQueue} as a completion queue. @param executor the executor to use @throws NullPointerException if executor is null
method,java/util/concurrent/ExecutorCompletionService/ExecutorCompletionService/Executor;BlockingQueue, Creates an ExecutorCompletionService using the supplied executor for base task execution and the supplied queue as its completion queue. @param executor the executor to use @param completionQueue the queue to use as the completion queue normally one dedicated for use by this service @throws NullPointerException if executor or completionQueue are null
interface,java/util/concurrent/Executor, An object that executes submitted {@link Runnable} tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads. For example, rather than invoking new Thread(new(RunnableTask())).start() for each of a set of tasks, you might use: Executor executor = anExecutor; executor.execute(new RunnableTask1()); executor.execute(new RunnableTask2()); ... However, the Executor interface does not strictly require that execution be asynchronous. In the simplest case, an executor can run the submitted task immediately in the caller's thread: class DirectExecutor implements Executor { public void execute(Runnable r) { r.run(); } } More typically, tasks are executed in some thread other than the caller's thread. The executor below spawns a new thread for each task. class ThreadPerTaskExecutor implements Executor { public void execute(Runnable r) { new Thread(r).start(); } } Many Executor implementations impose some sort of limitation on how and when tasks are scheduled. The executor below serializes the submission of tasks to a second executor, illustrating a composite executor. class SerialExecutor implements Executor { final Queue&lt;Runnable&gt; tasks = new ArrayDeque&lt;Runnable&gt;(); final Executor executor; Runnable active; SerialExecutor(Executor executor) { this.executor = executor; } public synchronized void execute(final Runnable r) { tasks.offer(new Runnable() { public void run() { try { r.run(); } finally { scheduleNext(); } } }); if (active == null) { scheduleNext(); } } protected synchronized void scheduleNext() { if ((active = tasks.poll()) != null) { executor.execute(active); } } } The Executor implementations provided in this package implement {@link ExecutorService}, which is a more extensive interface. The {@link ThreadPoolExecutor} class provides an extensible thread pool implementation. The {@link Executors} class provides convenient factory methods for these Executors. Memory consistency effects: Actions in a thread prior to submitting a {@code Runnable} object to an {@code Executor} happen-before its execution begins, perhaps in another thread. @since 1.5 @author Doug Lea
method,java/util/concurrent/Executor/execute/Runnable, Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the Executor implementation. @param command the runnable task @throws RejectedExecutionException if this task cannot be accepted for execution. @throws NullPointerException if command is null
class,java/util/concurrent/ExecutionException, Exception thrown when attempting to retrieve the result of a task that aborted by throwing an exception. This exception can be inspected using the {@link #getCause()} method. @see Future @since 1.5 @author Doug Lea
method,java/util/concurrent/ExecutionException/ExecutionException/, Constructs an ExecutionException with no detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause(Throwable) initCause}.
method,java/util/concurrent/ExecutionException/ExecutionException/String, Constructs an ExecutionException with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause(Throwable) initCause}. @param message the detail message
method,java/util/concurrent/ExecutionException/ExecutionException/String;Throwable, Constructs an ExecutionException with the specified detail message and cause. @param message the detail message @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method)
method,java/util/concurrent/ExecutionException/ExecutionException/Throwable, Constructs an ExecutionException with the specified cause. The detail message is set to: (cause == null ? null : cause.toString()) (which typically contains the class and detail message of cause). @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method)
class,java/util/concurrent/Exchanger, A synchronization point at which threads can pair and swap elements within pairs. Each thread presents some object on entry to the {@link #exchange exchange} method, matches with a partner thread, and receives its partner's object on return. An Exchanger may be viewed as a bidirectional form of a {@link SynchronousQueue}. Exchangers may be useful in applications such as genetic algorithms and pipeline designs. Sample Usage: Here are the highlights of a class that uses an {@code Exchanger} to swap buffers between threads so that the thread filling the buffer gets a freshly emptied one when it needs it, handing off the filled one to the thread emptying the buffer. {@code class FillAndEmpty { Exchanger exchanger = new Exchanger(); DataBuffer initialEmptyBuffer = ... a made-up type DataBuffer initialFullBuffer = ... class FillingLoop implements Runnable { public void run() { DataBuffer currentBuffer = initialEmptyBuffer; try { while (currentBuffer != null) { addToBuffer(currentBuffer); if (currentBuffer.isFull()) currentBuffer = exchanger.exchange(currentBuffer); } } catch (InterruptedException ex) { ... handle ... } } } class EmptyingLoop implements Runnable { public void run() { DataBuffer currentBuffer = initialFullBuffer; try { while (currentBuffer != null) { takeFromBuffer(currentBuffer); if (currentBuffer.isEmpty()) currentBuffer = exchanger.exchange(currentBuffer); } } catch (InterruptedException ex) { ... handle ...} } } void start() { new Thread(new FillingLoop()).start(); new Thread(new EmptyingLoop()).start(); } } } Memory consistency effects: For each pair of threads that successfully exchange objects via an {@code Exchanger}, actions prior to the {@code exchange()} in each thread happen-before those subsequent to a return from the corresponding {@code exchange()} in the other thread. @since 1.5 @author Doug Lea and Bill Scherer and Michael Scott @param The type of objects that may be exchanged
method,java/util/concurrent/Exchanger/exchange/Object, Waits for another thread to arrive at this exchange point (unless the current thread is {@linkplain Thread#interrupt interrupted}), and then transfers the given object to it, receiving its object in return. If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread. If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of two things happens: Some other thread enters the exchange; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting for the exchange, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. @param x the object to exchange @return the object provided by the other thread @throws InterruptedException if the current thread was interrupted while waiting
method,java/util/concurrent/Exchanger/exchange/Object;long;TimeUnit, Waits for another thread to arrive at this exchange point (unless the current thread is {@linkplain Thread#interrupt interrupted} or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return. If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread. If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread enters the exchange; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or The specified waiting time elapses. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting for the exchange, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then {@link TimeoutException} is thrown. If the time is less than or equal to zero, the method will not wait at all. @param x the object to exchange @param timeout the maximum time to wait @param unit the time unit of the timeout argument @return the object provided by the other thread @throws InterruptedException if the current thread was interrupted while waiting @throws TimeoutException if the specified waiting time elapses before another thread enters the exchange
method,java/util/concurrent/Exchanger/Exchanger/, Creates a new Exchanger.
method,java/util/concurrent/Delayed/getDelay/TimeUnit, Returns the remaining delay associated with this object, in the given time unit. @param unit the time unit @return the remaining delay; zero or negative values indicate that the delay has already elapsed
class,java/util/concurrent/DelayQueue, An unbounded {@linkplain BlockingQueue blocking queue} of Delayed elements, in which an element can only be taken when its delay has expired. The head of the queue is that Delayed element whose delay expired furthest in the past. If no delay has expired there is no head and poll will return null. Expiration occurs when an element's getDelay(TimeUnit.NANOSECONDS) method returns a value less than or equal to zero. Even though unexpired elements cannot be removed using take or poll, they are otherwise treated as normal elements. For example, the size method returns the count of both expired and unexpired elements. This queue does not permit null elements. This class and its iterator implement all of the optional methods of the {@link Collection} and {@link Iterator} interfaces. This class is a member of the Java Collections Framework. @since 1.5 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/DelayQueue/add/Delayed, Inserts the specified element into this delay queue. @param e the element to add @return true (as specified by {@link Collection#add}) @throws NullPointerException if the specified element is null
method,java/util/concurrent/DelayQueue/offer/Delayed, Inserts the specified element into this delay queue. @param e the element to add @return true @throws NullPointerException if the specified element is null
method,java/util/concurrent/DelayQueue/put/Delayed, Inserts the specified element into this delay queue. As the queue is unbounded this method will never block. @param e the element to add @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/DelayQueue/poll/, Retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay. @return the head of this queue, or null if this queue has no elements with an expired delay
method,java/util/concurrent/DelayQueue/take/, Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue. @return the head of this queue @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/DelayQueue/poll/long;TimeUnit, Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires. @return the head of this queue, or null if the specified waiting time elapses before an element with an expired delay becomes available @throws InterruptedException {@inheritDoc}
method,java/util/concurrent/DelayQueue/peek/, Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. Unlike poll, if no expired elements are available in the queue, this method returns the element that will expire next, if one exists. @return the head of this queue, or null if this queue is empty.
method,java/util/concurrent/DelayQueue/size/,
method,java/util/concurrent/DelayQueue/drainTo/Collection, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/DelayQueue/drainTo/Collection;int, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/DelayQueue/clear/, Atomically removes all of the elements from this delay queue. The queue will be empty after this call returns. Elements with an unexpired delay are not waited for; they are simply discarded from the queue.
method,java/util/concurrent/DelayQueue/remainingCapacity/, Always returns Integer.MAX_VALUE because a DelayQueue is not capacity constrained. @return Integer.MAX_VALUE
method,java/util/concurrent/DelayQueue/remove/Object, Removes a single instance of the specified element from this queue, if it is present, whether or not it has expired.
method,java/util/concurrent/DelayQueue/DelayQueue/, Creates a new DelayQueue that is initially empty.
method,java/util/concurrent/DelayQueue/DelayQueue/Collection, Creates a DelayQueue initially containing the elements of the given collection of {@link Delayed} instances. @param c the collection of elements to initially contain @throws NullPointerException if the specified collection or any of its elements are null
class,java/util/concurrent/CyclicBarrier, A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point. CyclicBarriers are useful in programs involving a fixed sized party of threads that must occasionally wait for each other. The barrier is called cyclic because it can be re-used after the waiting threads are released. A CyclicBarrier supports an optional {@link Runnable} command that is run once per barrier point, after the last thread in the party arrives, but before any threads are released. This barrier action is useful for updating shared-state before any of the parties continue. Sample usage: Here is an example of using a barrier in a parallel decomposition design: class Solver { final int N; final float[][] data; final CyclicBarrier barrier; class Worker implements Runnable { int myRow; Worker(int row) { myRow = row; } public void run() { while (!done()) { processRow(myRow); try { barrier.await(); } catch (InterruptedException ex) { return; } catch (BrokenBarrierException ex) { return; } } } } public Solver(float[][] matrix) { data = matrix; N = matrix.length; barrier = new CyclicBarrier(N, new Runnable() { public void run() { mergeRows(...); } }); for (int i = 0; i Here, each worker thread processes a row of the matrix then waits at the barrier until all rows have been processed. When all rows are processed the supplied {@link Runnable} barrier action is executed and merges the rows. If the merger determines that a solution has been found then done() will return true and each worker will terminate. If the barrier action does not rely on the parties being suspended when it is executed, then any of the threads in the party could execute that action when it is released. To facilitate this, each invocation of {@link #await} returns the arrival index of that thread at the barrier. You can then choose which thread should execute the barrier action, for example: if (barrier.await() == 0) { // log the completion of this iteration } The CyclicBarrier uses an all-or-none breakage model for failed synchronization attempts: If a thread leaves a barrier point prematurely because of interruption, failure, or timeout, all other threads waiting at that barrier point will also leave abnormally via {@link BrokenBarrierException} (or {@link InterruptedException} if they too were interrupted at about the same time). Memory consistency effects: Actions in a thread prior to calling {@code await()} happen-before actions that are part of the barrier action, which in turn happen-before actions following a successful return from the corresponding {@code await()} in other threads. @since 1.5 @see CountDownLatch @author Doug Lea
method,java/util/concurrent/CyclicBarrier/getParties/, Returns the number of parties required to trip this barrier. @return the number of parties required to trip this barrier
method,java/util/concurrent/CyclicBarrier/await/, Waits until all {@linkplain #getParties parties} have invoked await on this barrier. If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: The last thread arrives; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or Some other thread {@linkplain Thread#interrupt interrupts} one of the other waiting threads; or Some other thread times out while waiting for barrier; or Some other thread invokes {@link #reset} on this barrier. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. If the barrier is {@link #reset} while any thread is waiting, or if the barrier {@linkplain #isBroken is broken} when await is invoked, or while any thread is waiting, then {@link BrokenBarrierException} is thrown. If any thread is {@linkplain Thread#interrupt interrupted} while waiting, then all other waiting threads will throw {@link BrokenBarrierException} and the barrier is placed in the broken state. If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state. @return the arrival index of the current thread, where index {@link #getParties()} - 1 indicates the first to arrive and zero indicates the last to arrive @throws InterruptedException if the current thread was interrupted while waiting @throws BrokenBarrierException if another thread was interrupted or timed out while the current thread was waiting, or the barrier was reset, or the barrier was broken when {@code await} was called, or the barrier action (if present) failed due an exception.
method,java/util/concurrent/CyclicBarrier/await/long;TimeUnit, Waits until all {@linkplain #getParties parties} have invoked await on this barrier, or the specified waiting time elapses. If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: The last thread arrives; or The specified timeout elapses; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or Some other thread {@linkplain Thread#interrupt interrupts} one of the other waiting threads; or Some other thread times out while waiting for barrier; or Some other thread invokes {@link #reset} on this barrier. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then {@link TimeoutException} is thrown. If the time is less than or equal to zero, the method will not wait at all. If the barrier is {@link #reset} while any thread is waiting, or if the barrier {@linkplain #isBroken is broken} when await is invoked, or while any thread is waiting, then {@link BrokenBarrierException} is thrown. If any thread is {@linkplain Thread#interrupt interrupted} while waiting, then all other waiting threads will throw {@link BrokenBarrierException} and the barrier is placed in the broken state. If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state. @param timeout the time to wait for the barrier @param unit the time unit of the timeout parameter @return the arrival index of the current thread, where index {@link #getParties()} - 1 indicates the first to arrive and zero indicates the last to arrive @throws InterruptedException if the current thread was interrupted while waiting @throws TimeoutException if the specified timeout elapses @throws BrokenBarrierException if another thread was interrupted or timed out while the current thread was waiting, or the barrier was reset, or the barrier was broken when {@code await} was called, or the barrier action (if present) failed due an exception
method,java/util/concurrent/CyclicBarrier/isBroken/, Queries if this barrier is in a broken state. @return {@code true} if one or more parties broke out of this barrier due to interruption or timeout since construction or the last reset, or a barrier action failed due to an exception; {@code false} otherwise.
method,java/util/concurrent/CyclicBarrier/reset/, Resets the barrier to its initial state. If any parties are currently waiting at the barrier, they will return with a {@link BrokenBarrierException}. Note that resets after a breakage has occurred for other reasons can be complicated to carry out; threads need to re-synchronize in some other way, and choose one to perform the reset. It may be preferable to instead create a new barrier for subsequent use.
method,java/util/concurrent/CyclicBarrier/getNumberWaiting/, Returns the number of parties currently waiting at the barrier. This method is primarily useful for debugging and assertions. @return the number of parties currently blocked in {@link #await}
method,java/util/concurrent/CyclicBarrier/CyclicBarrier/int;Runnable, Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, and which will execute the given barrier action when the barrier is tripped, performed by the last thread entering the barrier. @param parties the number of threads that must invoke {@link #await} before the barrier is tripped @param barrierAction the command to execute when the barrier is tripped, or {@code null} if there is no action @throws IllegalArgumentException if {@code parties} is less than 1
method,java/util/concurrent/CyclicBarrier/CyclicBarrier/int, Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, and does not perform a predefined action when the barrier is tripped. @param parties the number of threads that must invoke {@link #await} before the barrier is tripped @throws IllegalArgumentException if {@code parties} is less than 1
class,java/util/concurrent/CountDownLatch, A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes. A {@code CountDownLatch} is initialized with a given count. The {@link #await await} methods block until the current count reaches zero due to invocations of the {@link #countDown} method, after which all waiting threads are released and any subsequent invocations of {@link #await await} return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a {@link CyclicBarrier}. A {@code CountDownLatch} is a versatile synchronization tool and can be used for a number of purposes. A {@code CountDownLatch} initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking {@link #await await} wait at the gate until it is opened by a thread invoking {@link #countDown}. A {@code CountDownLatch} initialized to N can be used to make one thread wait until N threads have completed some action, or some action has been completed N times. A useful property of a {@code CountDownLatch} is that it doesn't require that threads calling {@code countDown} wait for the count to reach zero before proceeding, it simply prevents any thread from proceeding past an {@link #await await} until all threads could pass. Sample usage: Here is a pair of classes in which a group of worker threads use two countdown latches: The first is a start signal that prevents any worker from proceeding until the driver is ready for them to proceed; The second is a completion signal that allows the driver to wait until all workers have completed. class Driver { // ... void main() throws InterruptedException { CountDownLatch startSignal = new CountDownLatch(1); CountDownLatch doneSignal = new CountDownLatch(N); for (int i = 0; i Another typical usage would be to divide a problem into N parts, describe each part with a Runnable that executes that portion and counts down on the latch, and queue all the Runnables to an Executor. When all sub-parts are complete, the coordinating thread will be able to pass through await. (When threads must repeatedly count down in this way, instead use a {@link CyclicBarrier}.) class Driver2 { // ... void main() throws InterruptedException { CountDownLatch doneSignal = new CountDownLatch(N); Executor e = ... for (int i = 0; i Memory consistency effects: Actions in a thread prior to calling {@code countDown()} happen-before actions following a successful return from a corresponding {@code await()} in another thread. @since 1.5 @author Doug Lea
method,java/util/concurrent/CountDownLatch/await/, Causes the current thread to wait until the latch has counted down to zero, unless the thread is {@linkplain Thread#interrupt interrupted}. If the current count is zero then this method returns immediately. If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen: The count reaches zero due to invocations of the {@link #countDown} method; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. @throws InterruptedException if the current thread is interrupted while waiting
method,java/util/concurrent/CountDownLatch/await/long;TimeUnit, Causes the current thread to wait until the latch has counted down to zero, unless the thread is {@linkplain Thread#interrupt interrupted}, or the specified waiting time elapses. If the current count is zero then this method returns immediately with the value {@code true}. If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happen: The count reaches zero due to invocations of the {@link #countDown} method; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or The specified waiting time elapses. If the count reaches zero then the method returns with the value {@code true}. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while waiting, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value {@code false} is returned. If the time is less than or equal to zero, the method will not wait at all. @param timeout the maximum time to wait @param unit the time unit of the {@code timeout} argument @return {@code true} if the count reached zero and {@code false} if the waiting time elapsed before the count reached zero @throws InterruptedException if the current thread is interrupted while waiting
method,java/util/concurrent/CountDownLatch/countDown/, Decrements the count of the latch, releasing all waiting threads if the count reaches zero. If the current count is greater than zero then it is decremented. If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes. If the current count equals zero then nothing happens.
method,java/util/concurrent/CountDownLatch/getCount/, Returns the current count. This method is typically used for debugging and testing purposes. @return the current count
method,java/util/concurrent/CountDownLatch/toString/, Returns a string identifying this latch, as well as its state. The state, in brackets, includes the String {@code Count =} followed by the current count. @return a string identifying this latch, as well as its state
method,java/util/concurrent/CountDownLatch/CountDownLatch/int, Constructs a {@code CountDownLatch} initialized with the given count. @param count the number of times {@link #countDown} must be invoked before threads can pass through {@link #await} @throws IllegalArgumentException if {@code count} is negative
class,java/util/concurrent/CopyOnWriteArraySet, A {@link java.util.Set} that uses an internal {@link CopyOnWriteArrayList} for all of its operations. Thus, it shares the same basic properties: It is best suited for applications in which set sizes generally stay small, read-only operations vastly outnumber mutative operations, and you need to prevent interference among threads during traversal. It is thread-safe. Mutative operations (add, set, remove, etc.) are expensive since they usually entail copying the entire underlying array. Iterators do not support the mutative remove operation. Traversal via iterators is fast and cannot encounter interference from other threads. Iterators rely on unchanging snapshots of the array at the time the iterators were constructed. Sample Usage. The following code sketch uses a copy-on-write set to maintain a set of Handler objects that perform some action upon state updates. class Handler { void handle(); ... } class X { private final CopyOnWriteArraySet&lt;Handler&gt; handlers = new CopyOnWriteArraySet&lt;Handler&gt;(); public void addHandler(Handler h) { handlers.add(h); } private long internalState; private synchronized void changeState() { internalState = ...; } public void update() { changeState(); for (Handler handler : handlers) handler.handle(); } } This class is a member of the Java Collections Framework. @see CopyOnWriteArrayList @since 1.5 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/CopyOnWriteArraySet/size/, Returns the number of elements in this set. @return the number of elements in this set
method,java/util/concurrent/CopyOnWriteArraySet/isEmpty/, Returns true if this set contains no elements. @return true if this set contains no elements
method,java/util/concurrent/CopyOnWriteArraySet/contains/Object, Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)). @param o element whose presence in this set is to be tested @return true if this set contains the specified element
method,java/util/concurrent/CopyOnWriteArraySet/clear/, Removes all of the elements from this set. The set will be empty after this call returns.
method,java/util/concurrent/CopyOnWriteArraySet/add/Object, Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that (e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2)). If this set already contains the element, the call leaves the set unchanged and returns false. @param e element to be added to this set @return true if this set did not already contain the specified element
method,java/util/concurrent/CopyOnWriteArraySet/containsAll/Collection, Returns true if this set contains all of the elements of the specified collection. If the specified collection is also a set, this method returns true if it is a subset of this set. @param c collection to be checked for containment in this set @return true if this set contains all of the elements of the 	 specified collection @throws NullPointerException if the specified collection is null @see #contains(Object)
method,java/util/concurrent/CopyOnWriteArraySet/addAll/Collection, Adds all of the elements in the specified collection to this set if they're not already present. If the specified collection is also a set, the addAll operation effectively modifies this set so that its value is the union of the two sets. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. @param c collection containing elements to be added to this set @return true if this set changed as a result of the call @throws NullPointerException if the specified collection is null @see #add(Object)
method,java/util/concurrent/CopyOnWriteArraySet/removeAll/Collection, Removes from this set all of its elements that are contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets. @param c collection containing elements to be removed from this set @return true if this set changed as a result of the call @throws ClassCastException if the class of an element of this set is incompatible with the specified collection (optional) @throws NullPointerException if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object)
method,java/util/concurrent/CopyOnWriteArraySet/retainAll/Collection, Retains only the elements in this set that are contained in the specified collection. In other words, removes from this set all of its elements that are not contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the intersection of the two sets. @param c collection containing elements to be retained in this set @return true if this set changed as a result of the call @throws ClassCastException if the class of an element of this set is incompatible with the specified collection (optional) @throws NullPointerException if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object)
method,java/util/concurrent/CopyOnWriteArraySet/iterator/, Returns an iterator over the elements contained in this set in the order in which these elements were added. The returned iterator provides a snapshot of the state of the set when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove method. @return an iterator over the elements in this set
method,java/util/concurrent/CopyOnWriteArraySet/equals/Object, Compares the specified object with this set for equality. Returns {@code true} if the specified object is the same object as this object, or if it is also a {@link Set} and the elements returned by an {@linkplain List#iterator() iterator} over the specified set are the same as the elements returned by an iterator over this set. More formally, the two iterators are considered to return the same elements if they return the same number of elements and for every element {@code e1} returned by the iterator over the specified set, there is an element {@code e2} returned by the iterator over this set such that {@code (e1==null ? e2==null : e1.equals(e2))}. @param o object to be compared for equality with this set @return {@code true} if the specified object is equal to this set
method,java/util/concurrent/CopyOnWriteArraySet/CopyOnWriteArraySet/, Creates an empty set.
method,java/util/concurrent/CopyOnWriteArraySet/CopyOnWriteArraySet/Collection, Creates a set containing all of the elements of the specified collection. @param c the collection of elements to initially contain @throws NullPointerException if the specified collection is null
class,java/util/concurrent/CopyOnWriteArrayList, A thread-safe variant of {@link java.util.ArrayList} in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array. This is ordinarily too costly, but may be more efficient than alternatives when traversal operations vastly outnumber mutations, and is useful when you cannot or don't want to synchronize traversals, yet need to preclude interference among concurrent threads. The snapshot style iterator method uses a reference to the state of the array at the point that the iterator was created. This array never changes during the lifetime of the iterator, so interference is impossible and the iterator is guaranteed not to throw ConcurrentModificationException. The iterator will not reflect additions, removals, or changes to the list since the iterator was created. Element-changing operations on iterators themselves (remove, set, and add) are not supported. These methods throw UnsupportedOperationException. All elements are permitted, including null. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a {@code CopyOnWriteArrayList} happen-before actions subsequent to the access or removal of that element from the {@code CopyOnWriteArrayList} in another thread. This class is a member of the Java Collections Framework. @since 1.5 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/CopyOnWriteArrayList/size/, Returns the number of elements in this list. @return the number of elements in this list
method,java/util/concurrent/CopyOnWriteArrayList/isEmpty/, Returns true if this list contains no elements. @return true if this list contains no elements
method,java/util/concurrent/CopyOnWriteArrayList/contains/Object, Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)). @param o element whose presence in this list is to be tested @return true if this list contains the specified element
method,java/util/concurrent/CopyOnWriteArrayList/indexOf/Object, {@inheritDoc}
method,java/util/concurrent/CopyOnWriteArrayList/indexOf/Object;int, Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found. More formally, returns the lowest index i such that (i&nbsp;&gt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i)))), or -1 if there is no such index. @param e element to search for @param index index to start searching from @return the index of the first occurrence of the element in this list at position index or later in the list; -1 if the element is not found. @throws IndexOutOfBoundsException if the specified index is negative
method,java/util/concurrent/CopyOnWriteArrayList/lastIndexOf/Object, {@inheritDoc}
method,java/util/concurrent/CopyOnWriteArrayList/lastIndexOf/Object;int, Returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found. More formally, returns the highest index i such that (i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i)))), or -1 if there is no such index. @param e element to search for @param index index to start searching backwards from @return the index of the last occurrence of the element at position less than or equal to index in this list; -1 if the element is not found. @throws IndexOutOfBoundsException if the specified index is greater than or equal to the current size of this list
method,java/util/concurrent/CopyOnWriteArrayList/clone/, Returns a shallow copy of this list. (The elements themselves are not copied.) @return a clone of this list
method,java/util/concurrent/CopyOnWriteArrayList/get/int, {@inheritDoc} @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/concurrent/CopyOnWriteArrayList/set/int;Object, Replaces the element at the specified position in this list with the specified element. @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/concurrent/CopyOnWriteArrayList/add/Object, Appends the specified element to the end of this list. @param e element to be appended to this list @return true (as specified by {@link Collection#add})
method,java/util/concurrent/CopyOnWriteArrayList/add/int;Object, Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/concurrent/CopyOnWriteArrayList/remove/int, Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list. @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/concurrent/CopyOnWriteArrayList/remove/Object, Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call). @param o element to be removed from this list, if present @return true if this list contained the specified element
method,java/util/concurrent/CopyOnWriteArrayList/addIfAbsent/Object, Append the element if not present. @param e element to be added to this list, if absent @return true if the element was added
method,java/util/concurrent/CopyOnWriteArrayList/containsAll/Collection, Returns true if this list contains all of the elements of the specified collection. @param c collection to be checked for containment in this list @return true if this list contains all of the elements of the specified collection @throws NullPointerException if the specified collection is null @see #contains(Object)
method,java/util/concurrent/CopyOnWriteArrayList/removeAll/Collection, Removes from this list all of its elements that are contained in the specified collection. This is a particularly expensive operation in this class because of the need for an internal temporary array. @param c collection containing elements to be removed from this list @return true if this list changed as a result of the call @throws ClassCastException if the class of an element of this list is incompatible with the specified collection (optional) @throws NullPointerException if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object)
method,java/util/concurrent/CopyOnWriteArrayList/retainAll/Collection, Retains only the elements in this list that are contained in the specified collection. In other words, removes from this list all of its elements that are not contained in the specified collection. @param c collection containing elements to be retained in this list @return true if this list changed as a result of the call @throws ClassCastException if the class of an element of this list is incompatible with the specified collection (optional) @throws NullPointerException if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null @see #remove(Object)
method,java/util/concurrent/CopyOnWriteArrayList/addAllAbsent/Collection, Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator. @param c collection containing elements to be added to this list @return the number of elements added @throws NullPointerException if the specified collection is null @see #addIfAbsent(Object)
method,java/util/concurrent/CopyOnWriteArrayList/clear/, Removes all of the elements from this list. The list will be empty after this call returns.
method,java/util/concurrent/CopyOnWriteArrayList/addAll/Collection, Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator. @param c collection containing elements to be added to this list @return true if this list changed as a result of the call @throws NullPointerException if the specified collection is null @see #add(Object)
method,java/util/concurrent/CopyOnWriteArrayList/addAll/int;Collection, Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. @param index index at which to insert the first element from the specified collection @param c collection containing elements to be added to this list @return true if this list changed as a result of the call @throws IndexOutOfBoundsException {@inheritDoc} @throws NullPointerException if the specified collection is null @see #add(int,Object)
method,java/util/concurrent/CopyOnWriteArrayList/toString/, Returns a string representation of this list. The string representation consists of the string representations of the list's elements in the order they are returned by its iterator, enclosed in square brackets ([]). Adjacent elements are separated by the characters , (comma and space). Elements are converted to strings as by {@link String#valueOf(Object)}. @return a string representation of this list
method,java/util/concurrent/CopyOnWriteArrayList/equals/Object, Compares the specified object with this list for equality. Returns {@code true} if the specified object is the same object as this object, or if it is also a {@link List} and the sequence of elements returned by an {@linkplain List#iterator() iterator} over the specified list is the same as the sequence returned by an iterator over this list. The two sequences are considered to be the same if they have the same length and corresponding elements at the same position in the sequence are equal. Two elements {@code e1} and {@code e2} are considered equal if {@code (e1==null ? e2==null : e1.equals(e2))}. @param o the object to be compared for equality with this list @return {@code true} if the specified object is equal to this list
method,java/util/concurrent/CopyOnWriteArrayList/hashCode/, Returns the hash code value for this list. This implementation uses the definition in {@link List#hashCode}. @return the hash code value for this list
method,java/util/concurrent/CopyOnWriteArrayList/iterator/, Returns an iterator over the elements in this list in proper sequence. The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove method. @return an iterator over the elements in this list in proper sequence
method,java/util/concurrent/CopyOnWriteArrayList/listIterator/, {@inheritDoc} The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove, set or add methods.
method,java/util/concurrent/CopyOnWriteArrayList/listIterator/int, {@inheritDoc} The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove, set or add methods. @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/concurrent/CopyOnWriteArrayList/subList/int;int, Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive. The returned list is backed by this list, so changes in the returned list are reflected in this list, and vice-versa. While mutative operations are supported, they are probably not very useful for CopyOnWriteArrayLists. The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is structurally modified in any way other than via the returned list. (Structural modifications are those that change the size of the list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.) @param fromIndex low endpoint (inclusive) of the subList @param toIndex high endpoint (exclusive) of the subList @return a view of the specified range within this list @throws IndexOutOfBoundsException {@inheritDoc}
method,java/util/concurrent/CopyOnWriteArrayList/CopyOnWriteArrayList/, Creates an empty list.
method,java/util/concurrent/CopyOnWriteArrayList/CopyOnWriteArrayList/Collection, Creates a list containing the elements of the specified collection, in the order they are returned by the collection's iterator. @param c the collection of initially held elements @throws NullPointerException if the specified collection is null
method,java/util/concurrent/CopyOnWriteArrayList/CopyOnWriteArrayList/Object[], Creates a list holding a copy of the given array. @param toCopyIn the array (a copy of this array is used as the internal array) @throws NullPointerException if the specified array is null
method,java/util/concurrent/ConcurrentSkipListSet/clone/, Returns a shallow copy of this ConcurrentSkipListSet instance. (The elements themselves are not cloned.) @return a shallow copy of this set
method,java/util/concurrent/ConcurrentSkipListSet/isEmpty/, Returns true if this set contains no elements. @return true if this set contains no elements
method,java/util/concurrent/ConcurrentSkipListSet/contains/Object, Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that o.equals(e). @param o object to be checked for containment in this set @return true if this set contains the specified element @throws ClassCastException if the specified element cannot be compared with the elements currently in this set @throws NullPointerException if the specified element is null
method,java/util/concurrent/ConcurrentSkipListSet/add/Object, Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that e.equals(e2). If this set already contains the element, the call leaves the set unchanged and returns false. @param e element to be added to this set @return true if this set did not already contain the specified element @throws ClassCastException if e cannot be compared with the elements currently in this set @throws NullPointerException if the specified element is null
method,java/util/concurrent/ConcurrentSkipListSet/clear/, Removes all of the elements from this set.
method,java/util/concurrent/ConcurrentSkipListSet/iterator/, Returns an iterator over the elements in this set in ascending order. @return an iterator over the elements in this set in ascending order
method,java/util/concurrent/ConcurrentSkipListSet/descendingIterator/, Returns an iterator over the elements in this set in descending order. @return an iterator over the elements in this set in descending order
method,java/util/concurrent/ConcurrentSkipListSet/equals/Object, Compares the specified object with this set for equality. Returns true if the specified object is also a set, the two sets have the same size, and every member of the specified set is contained in this set (or equivalently, every member of this set is contained in the specified set). This definition ensures that the equals method works properly across different implementations of the set interface. @param o the object to be compared for equality with this set @return true if the specified object is equal to this set
method,java/util/concurrent/ConcurrentSkipListSet/removeAll/Collection, Removes from this set all of its elements that are contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets. @param c collection containing elements to be removed from this set @return true if this set changed as a result of the call @throws ClassCastException if the types of one or more elements in this set are incompatible with the specified collection @throws NullPointerException if the specified collection or any of its elements are null
method,java/util/concurrent/ConcurrentSkipListSet/lower/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified element is null
method,java/util/concurrent/ConcurrentSkipListSet/floor/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified element is null
method,java/util/concurrent/ConcurrentSkipListSet/ceiling/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified element is null
method,java/util/concurrent/ConcurrentSkipListSet/higher/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified element is null
method,java/util/concurrent/ConcurrentSkipListSet/pollFirst/,
method,java/util/concurrent/ConcurrentSkipListSet/pollLast/,
method,java/util/concurrent/ConcurrentSkipListSet/comparator/,
method,java/util/concurrent/ConcurrentSkipListSet/first/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListSet/last/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListSet/subSet/Object;boolean;Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromElement} or {@code toElement} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListSet/headSet/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code toElement} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListSet/tailSet/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromElement} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListSet/subSet/Object;Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromElement} or {@code toElement} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListSet/headSet/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code toElement} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListSet/tailSet/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromElement} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListSet/descendingSet/, Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. The returned set has an ordering equivalent to {@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator()). The expression {@code s.descendingSet().descendingSet()} returns a view of {@code s} essentially equivalent to {@code s}. @return a reverse order view of this set
method,java/util/concurrent/ConcurrentSkipListSet/ConcurrentSkipListSet/, Constructs a new, empty set that orders its elements according to their {@linkplain Comparable natural ordering}.
method,java/util/concurrent/ConcurrentSkipListSet/ConcurrentSkipListSet/Comparator, Constructs a new, empty set that orders its elements according to the specified comparator. @param comparator the comparator that will be used to order this set. If null, the {@linkplain Comparable natural ordering} of the elements will be used.
method,java/util/concurrent/ConcurrentSkipListSet/ConcurrentSkipListSet/Collection, Constructs a new set containing the elements in the specified collection, that orders its elements according to their {@linkplain Comparable natural ordering}. @param c The elements that will comprise the new set @throws ClassCastException if the elements in c are not {@link Comparable}, or are not mutually comparable @throws NullPointerException if the specified collection or any of its elements are null
method,java/util/concurrent/ConcurrentSkipListSet/ConcurrentSkipListSet/SortedSet, Constructs a new set containing the same elements and using the same ordering as the specified sorted set. @param s sorted set whose elements will comprise the new set @throws NullPointerException if the specified sorted set or any of its elements are null
method,java/util/concurrent/ConcurrentSkipListMap/clone/, Returns a shallow copy of this ConcurrentSkipListMap instance. (The keys and values themselves are not cloned.) @return a shallow copy of this map
method,java/util/concurrent/ConcurrentSkipListMap/containsValue/Object, Returns true if this map maps one or more keys to the specified value. This operation requires time linear in the map size. @param value value whose presence in this map is to be tested @return true if a mapping to value exists; false otherwise @throws NullPointerException if the specified value is null
method,java/util/concurrent/ConcurrentSkipListMap/isEmpty/, Returns true if this map contains no key-value mappings. @return true if this map contains no key-value mappings
method,java/util/concurrent/ConcurrentSkipListMap/clear/, Removes all of the mappings from this map.
method,java/util/concurrent/ConcurrentSkipListMap/keySet/, Returns a {@link NavigableSet} view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the {@code Iterator.remove}, {@code Set.remove}, {@code removeAll}, {@code retainAll}, and {@code clear} operations. It does not support the {@code add} or {@code addAll} operations. The view's {@code iterator} is a weakly consistent iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction. This method is equivalent to method {@code navigableKeySet}. @return a navigable set view of the keys in this map
method,java/util/concurrent/ConcurrentSkipListMap/navigableKeySet/,
method,java/util/concurrent/ConcurrentSkipListMap/descendingMap/,
method,java/util/concurrent/ConcurrentSkipListMap/descendingKeySet/,
method,java/util/concurrent/ConcurrentSkipListMap/equals/Object, Compares the specified object with this map for equality. Returns true if the given object is also a map and the two maps represent the same mappings. More formally, two maps m1 and m2 represent the same mappings if m1.entrySet().equals(m2.entrySet()). This operation may return misleading results if either map is concurrently modified during execution of this method. @param o object to be compared for equality with this map @return true if the specified object is equal to this map
method,java/util/concurrent/ConcurrentSkipListMap/comparator/,
method,java/util/concurrent/ConcurrentSkipListMap/firstKey/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListMap/lastKey/, @throws NoSuchElementException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListMap/subMap/Object;boolean;Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromKey} or {@code toKey} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListMap/headMap/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code toKey} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListMap/tailMap/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromKey} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListMap/subMap/Object;Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromKey} or {@code toKey} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListMap/headMap/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code toKey} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListMap/tailMap/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if {@code fromKey} is null @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentSkipListMap/lowerEntry/Object, Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key. The returned entry does not support the Entry.setValue method. @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentSkipListMap/lowerKey/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentSkipListMap/floorEntry/Object, Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key. The returned entry does not support the Entry.setValue method. @param key the key @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentSkipListMap/floorKey/Object, @param key the key @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentSkipListMap/ceilingEntry/Object, Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such entry. The returned entry does not support the Entry.setValue method. @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentSkipListMap/ceilingKey/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentSkipListMap/higherEntry/Object, Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key. The returned entry does not support the Entry.setValue method. @param key the key @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentSkipListMap/higherKey/Object, @param key the key @throws ClassCastException {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentSkipListMap/firstEntry/, Returns a key-value mapping associated with the least key in this map, or null if the map is empty. The returned entry does not support the Entry.setValue method.
method,java/util/concurrent/ConcurrentSkipListMap/lastEntry/, Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty. The returned entry does not support the Entry.setValue method.
method,java/util/concurrent/ConcurrentSkipListMap/pollFirstEntry/, Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty. The returned entry does not support the Entry.setValue method.
method,java/util/concurrent/ConcurrentSkipListMap/pollLastEntry/, Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty. The returned entry does not support the Entry.setValue method.
method,java/util/concurrent/ConcurrentSkipListMap/ConcurrentSkipListMap/, Constructs a new, empty map, sorted according to the {@linkplain Comparable natural ordering} of the keys.
method,java/util/concurrent/ConcurrentSkipListMap/ConcurrentSkipListMap/Comparator, Constructs a new, empty map, sorted according to the specified comparator. @param comparator the comparator that will be used to order this map. If null, the {@linkplain Comparable natural ordering} of the keys will be used.
method,java/util/concurrent/ConcurrentSkipListMap/ConcurrentSkipListMap/Map, Constructs a new map containing the same mappings as the given map, sorted according to the {@linkplain Comparable natural ordering} of the keys. @param m the map whose mappings are to be placed in this map @throws ClassCastException if the keys in m are not {@link Comparable}, or are not mutually comparable @throws NullPointerException if the specified map or any of its keys or values are null
method,java/util/concurrent/ConcurrentSkipListMap/ConcurrentSkipListMap/SortedMap, Constructs a new map containing the same mappings and using the same ordering as the specified sorted map. @param m the sorted map whose mappings are to be placed in this map, and whose comparator is to be used to sort this map @throws NullPointerException if the specified sorted map or any of its keys or values are null
interface,java/util/concurrent/ConcurrentNavigableMap, A {@link ConcurrentMap} supporting {@link NavigableMap} operations, and recursively so for its navigable sub-maps. This interface is a member of the Java Collections Framework. @author Doug Lea @param the type of keys maintained by this map @param the type of mapped values @since 1.6
method,java/util/concurrent/ConcurrentNavigableMap/subMap/Object;boolean;Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentNavigableMap/headMap/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentNavigableMap/tailMap/Object;boolean, @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentNavigableMap/subMap/Object;Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentNavigableMap/headMap/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentNavigableMap/tailMap/Object, @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ConcurrentNavigableMap/descendingMap/, Returns a reverse order view of the mappings contained in this map. The descending map is backed by this map, so changes to the map are reflected in the descending map, and vice-versa. The returned map has an ordering equivalent to {@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator()). The expression {@code m.descendingMap().descendingMap()} returns a view of {@code m} essentially equivalent to {@code m}. @return a reverse order view of this map
method,java/util/concurrent/ConcurrentNavigableMap/navigableKeySet/, Returns a {@link NavigableSet} view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the {@code Iterator.remove}, {@code Set.remove}, {@code removeAll}, {@code retainAll}, and {@code clear} operations. It does not support the {@code add} or {@code addAll} operations. The view's {@code iterator} is a weakly consistent iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction. @return a navigable set view of the keys in this map
method,java/util/concurrent/ConcurrentNavigableMap/keySet/, Returns a {@link NavigableSet} view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the {@code Iterator.remove}, {@code Set.remove}, {@code removeAll}, {@code retainAll}, and {@code clear} operations. It does not support the {@code add} or {@code addAll} operations. The view's {@code iterator} is a weakly consistent iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction. This method is equivalent to method {@code navigableKeySet}. @return a navigable set view of the keys in this map
method,java/util/concurrent/ConcurrentNavigableMap/descendingKeySet/, Returns a reverse order {@link NavigableSet} view of the keys contained in this map. The set's iterator returns the keys in descending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the {@code Iterator.remove}, {@code Set.remove}, {@code removeAll}, {@code retainAll}, and {@code clear} operations. It does not support the {@code add} or {@code addAll} operations. The view's {@code iterator} is a weakly consistent iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction. @return a reverse order navigable set view of the keys in this map
interface,java/util/concurrent/ConcurrentMap, A {@link java.util.Map} providing additional atomic putIfAbsent, remove, and replace methods. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a {@code ConcurrentMap} as a key or value happen-before actions subsequent to the access or removal of that object from the {@code ConcurrentMap} in another thread. This interface is a member of the Java Collections Framework. @since 1.5 @author Doug Lea @param the type of keys maintained by this map @param the type of mapped values
method,java/util/concurrent/ConcurrentMap/putIfAbsent/Object;Object, If the specified key is not already associated with a value, associate it with the given value. This is equivalent to if (!map.containsKey(key)) return map.put(key, value); else return map.get(key); except that the action is performed atomically. @param key key with which the specified value is to be associated @param value value to be associated with the specified key @return the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.) @throws UnsupportedOperationException if the put operation is not supported by this map @throws ClassCastException if the class of the specified key or value prevents it from being stored in this map @throws NullPointerException if the specified key or value is null, and this map does not permit null keys or values @throws IllegalArgumentException if some property of the specified key or value prevents it from being stored in this map
method,java/util/concurrent/ConcurrentMap/remove/Object;Object, Removes the entry for a key only if currently mapped to a given value. This is equivalent to if (map.containsKey(key) &amp;&amp; map.get(key).equals(value)) { map.remove(key); return true; } else return false; except that the action is performed atomically. @param key key with which the specified value is associated @param value value expected to be associated with the specified key @return true if the value was removed @throws UnsupportedOperationException if the remove operation is not supported by this map @throws ClassCastException if the key or value is of an inappropriate type for this map (optional) @throws NullPointerException if the specified key or value is null, and this map does not permit null keys or values (optional)
method,java/util/concurrent/ConcurrentMap/replace/Object;Object;Object, Replaces the entry for a key only if currently mapped to a given value. This is equivalent to if (map.containsKey(key) &amp;&amp; map.get(key).equals(oldValue)) { map.put(key, newValue); return true; } else return false; except that the action is performed atomically. @param key key with which the specified value is associated @param oldValue value expected to be associated with the specified key @param newValue value to be associated with the specified key @return true if the value was replaced @throws UnsupportedOperationException if the put operation is not supported by this map @throws ClassCastException if the class of a specified key or value prevents it from being stored in this map @throws NullPointerException if a specified key or value is null, and this map does not permit null keys or values @throws IllegalArgumentException if some property of a specified key or value prevents it from being stored in this map
method,java/util/concurrent/ConcurrentMap/replace/Object;Object, Replaces the entry for a key only if currently mapped to some value. This is equivalent to if (map.containsKey(key)) { return map.put(key, value); } else return null; except that the action is performed atomically. @param key key with which the specified value is associated @param value value to be associated with the specified key @return the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.) @throws UnsupportedOperationException if the put operation is not supported by this map @throws ClassCastException if the class of the specified key or value prevents it from being stored in this map @throws NullPointerException if the specified key or value is null, and this map does not permit null keys or values @throws IllegalArgumentException if some property of the specified key or value prevents it from being stored in this map
class,java/util/concurrent/ConcurrentLinkedQueue, An unbounded thread-safe {@linkplain Queue queue} based on linked nodes. This queue orders elements FIFO (first-in-first-out). The head of the queue is that element that has been on the queue the longest time. The tail of the queue is that element that has been on the queue the shortest time. New elements are inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. A {@code ConcurrentLinkedQueue} is an appropriate choice when many threads will share access to a common collection. This queue does not permit {@code null} elements. This implementation employs an efficient &quot;wait-free&quot; algorithm based on one described in Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms by Maged M. Michael and Michael L. Scott. Beware that, unlike in most collections, the {@code size} method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires a traversal of the elements. This class and its iterator implement all of the optional methods of the {@link Collection} and {@link Iterator} interfaces. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a {@code ConcurrentLinkedQueue} happen-before actions subsequent to the access or removal of that element from the {@code ConcurrentLinkedQueue} in another thread. This class is a member of the Java Collections Framework. @since 1.5 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/ConcurrentLinkedQueue/add/Object, Inserts the specified element at the tail of this queue. @return {@code true} (as specified by {@link Collection#add}) @throws NullPointerException if the specified element is null
method,java/util/concurrent/ConcurrentLinkedQueue/offer/Object, Inserts the specified element at the tail of this queue. @return {@code true} (as specified by {@link Queue#offer}) @throws NullPointerException if the specified element is null
method,java/util/concurrent/ConcurrentLinkedQueue/poll/,
method,java/util/concurrent/ConcurrentLinkedQueue/peek/,
method,java/util/concurrent/ConcurrentLinkedQueue/isEmpty/, Returns {@code true} if this queue contains no elements. @return {@code true} if this queue contains no elements
method,java/util/concurrent/ConcurrentLinkedQueue/contains/Object, Returns {@code true} if this queue contains the specified element. More formally, returns {@code true} if and only if this queue contains at least one element {@code e} such that {@code o.equals(e)}. @param o object to be checked for containment in this queue @return {@code true} if this queue contains the specified element
method,java/util/concurrent/ConcurrentLinkedQueue/remove/Object, Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element {@code e} such that {@code o.equals(e)}, if this queue contains one or more such elements. Returns {@code true} if this queue contained the specified element (or equivalently, if this queue changed as a result of the call). @param o element to be removed from this queue, if present @return {@code true} if this queue changed as a result of the call
method,java/util/concurrent/ConcurrentLinkedQueue/iterator/, Returns an iterator over the elements in this queue in proper sequence. The returned iterator is a weakly consistent iterator that will never throw {@link java.util.ConcurrentModificationException ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction. @return an iterator over the elements in this queue in proper sequence
method,java/util/concurrent/ConcurrentLinkedQueue/ConcurrentLinkedQueue/, Creates a {@code ConcurrentLinkedQueue} that is initially empty.
method,java/util/concurrent/ConcurrentLinkedQueue/ConcurrentLinkedQueue/Collection, Creates a {@code ConcurrentLinkedQueue} initially containing the elements of the given collection, added in traversal order of the collection's iterator. @param c the collection of elements to initially contain @throws NullPointerException if the specified collection or any of its elements are null
method,java/util/concurrent/ConcurrentHashMap/isEmpty/, Returns true if this map contains no key-value mappings. @return true if this map contains no key-value mappings
method,java/util/concurrent/ConcurrentHashMap/size/, Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. @return the number of key-value mappings in this map
method,java/util/concurrent/ConcurrentHashMap/get/Object, Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key. More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code key.equals(k)}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.) @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentHashMap/containsKey/Object, Tests if the specified object is a key in this table. @param key possible key @return true if and only if the specified object is a key in this table, as determined by the equals method; false otherwise. @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentHashMap/contains/Object, Legacy method testing if some key maps into the specified value in this table. This method is identical in functionality to {@link #containsValue}, and exists solely to ensure full compatibility with class {@link java.util.Hashtable}, which supported this method prior to introduction of the Java Collections framework. @param value a value to search for @return true if and only if some key maps to the value argument in this table as determined by the equals method; false otherwise @throws NullPointerException if the specified value is null
method,java/util/concurrent/ConcurrentHashMap/put/Object;Object, Maps the specified key to the specified value in this table. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key. @param key key with which the specified value is to be associated @param value value to be associated with the specified key @return the previous value associated with key, or null if there was no mapping for key @throws NullPointerException if the specified key or value is null
method,java/util/concurrent/ConcurrentHashMap/putIfAbsent/Object;Object, {@inheritDoc} @return the previous value associated with the specified key, or null if there was no mapping for the key @throws NullPointerException if the specified key or value is null
method,java/util/concurrent/ConcurrentHashMap/putAll/Map, Copies all of the mappings from the specified map to this one. These mappings replace any mappings that this map had for any of the keys currently in the specified map. @param m mappings to be stored in this map
method,java/util/concurrent/ConcurrentHashMap/remove/Object, Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map. @param key the key that needs to be removed @return the previous value associated with key, or null if there was no mapping for key @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentHashMap/remove/Object;Object, {@inheritDoc} @throws NullPointerException if the specified key is null
method,java/util/concurrent/ConcurrentHashMap/replace/Object;Object;Object, {@inheritDoc} @throws NullPointerException if any of the arguments are null
method,java/util/concurrent/ConcurrentHashMap/replace/Object;Object, {@inheritDoc} @return the previous value associated with the specified key, or null if there was no mapping for the key @throws NullPointerException if the specified key or value is null
method,java/util/concurrent/ConcurrentHashMap/clear/, Removes all of the mappings from this map.
method,java/util/concurrent/ConcurrentHashMap/keys/, Returns an enumeration of the keys in this table. @return an enumeration of the keys in this table @see #keySet()
method,java/util/concurrent/ConcurrentHashMap/elements/, Returns an enumeration of the values in this table. @return an enumeration of the values in this table @see #values()
method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/int;float;int, Creates a new, empty map with the specified initial capacity, load factor and concurrency level. @param initialCapacity the initial capacity. The implementation performs internal sizing to accommodate this many elements. @param loadFactor the load factor threshold, used to control resizing. Resizing may be performed when the average number of elements per bin exceeds this threshold. @param concurrencyLevel the estimated number of concurrently updating threads. The implementation performs internal sizing to try to accommodate this many threads. @throws IllegalArgumentException if the initial capacity is negative or the load factor or concurrencyLevel are nonpositive.
method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/int;float, Creates a new, empty map with the specified initial capacity and load factor and with the default concurrencyLevel (16). @param initialCapacity The implementation performs internal sizing to accommodate this many elements. @param loadFactor the load factor threshold, used to control resizing. Resizing may be performed when the average number of elements per bin exceeds this threshold. @throws IllegalArgumentException if the initial capacity of elements is negative or the load factor is nonpositive @since 1.6
method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/int, Creates a new, empty map with the specified initial capacity, and with default load factor (0.75) and concurrencyLevel (16). @param initialCapacity the initial capacity. The implementation performs internal sizing to accommodate this many elements. @throws IllegalArgumentException if the initial capacity of elements is negative.
method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/, Creates a new, empty map with a default initial capacity (16), load factor (0.75) and concurrencyLevel (16).
method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/Map, Creates a new map with the same mappings as the given map. The map is created with a capacity of 1.5 times the number of mappings in the given map or 16 (whichever is greater), and a default load factor (0.75) and concurrencyLevel (16). @param m the map
interface,java/util/concurrent/CompletionService, A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks. Producers submit tasks for execution. Consumers take completed tasks and process their results in the order they complete. A CompletionService can for example be used to manage asynchronous IO, in which tasks that perform reads are submitted in one part of a program or system, and then acted upon in a different part of the program when the reads complete, possibly in a different order than they were requested. Typically, a CompletionService relies on a separate {@link Executor} to actually execute the tasks, in which case the CompletionService only manages an internal completion queue. The {@link ExecutorCompletionService} class provides an implementation of this approach. Memory consistency effects: Actions in a thread prior to submitting a task to a {@code CompletionService} happen-before actions taken by that task, which in turn happen-before actions following a successful return from the corresponding {@code take()}.
method,java/util/concurrent/CompletionService/submit/Callable, Submits a value-returning task for execution and returns a Future representing the pending results of the task. Upon completion, this task may be taken or polled. @param task the task to submit @return a Future representing pending completion of the task @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if the task is null
method,java/util/concurrent/CompletionService/submit/Runnable;Object, Submits a Runnable task for execution and returns a Future representing that task. Upon completion, this task may be taken or polled. @param task the task to submit @param result the result to return upon successful completion @return a Future representing pending completion of the task, and whose get() method will return the given result value upon completion @throws RejectedExecutionException if the task cannot be scheduled for execution @throws NullPointerException if the task is null
method,java/util/concurrent/CompletionService/take/, Retrieves and removes the Future representing the next completed task, waiting if none are yet present. @return the Future representing the next completed task @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/CompletionService/poll/, Retrieves and removes the Future representing the next completed task or null if none are present. @return the Future representing the next completed task, or null if none are present
method,java/util/concurrent/CompletionService/poll/long;TimeUnit, Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present. @param timeout how long to wait before giving up, in units of unit @param unit a TimeUnit determining how to interpret the timeout parameter @return the Future representing the next completed task or null if the specified waiting time elapses before one is present @throws InterruptedException if interrupted while waiting
class,java/util/concurrent/CancellationException, Exception indicating that the result of a value-producing task, such as a {@link FutureTask}, cannot be retrieved because the task was cancelled. @since 1.5 @author Doug Lea
method,java/util/concurrent/CancellationException/CancellationException/, Constructs a CancellationException with no detail message.
method,java/util/concurrent/CancellationException/CancellationException/String, Constructs a CancellationException with the specified detail message. @param message the detail message
interface,java/util/concurrent/Callable, A task that returns a result and may throw an exception. Implementors define a single method with no arguments called call. The Callable interface is similar to {@link java.lang.Runnable}, in that both are designed for classes whose instances are potentially executed by another thread. A Runnable, however, does not return a result and cannot throw a checked exception. The {@link Executors} class contains utility methods to convert from other common forms to Callable classes. @see Executor @since 1.5 @author Doug Lea @param the result type of method call
method,java/util/concurrent/Callable/call/, Computes a result, or throws an exception if unable to do so. @return computed result @throws Exception if unable to compute a result
class,java/util/concurrent/BrokenBarrierException, Exception thrown when a thread tries to wait upon a barrier that is in a broken state, or which enters the broken state while the thread is waiting. @see CyclicBarrier @since 1.5 @author Doug Lea
method,java/util/concurrent/BrokenBarrierException/BrokenBarrierException/, Constructs a BrokenBarrierException with no specified detail message.
method,java/util/concurrent/BrokenBarrierException/BrokenBarrierException/String, Constructs a BrokenBarrierException with the specified detail message. @param message the detail message
method,java/util/concurrent/BlockingQueue/take/, Retrieves and removes the head of this queue, waiting if necessary until an element becomes available. @return the head of this queue @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/BlockingQueue/poll/long;TimeUnit, Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available. @param timeout how long to wait before giving up, in units of unit @param unit a TimeUnit determining how to interpret the timeout parameter @return the head of this queue, or null if the specified waiting time elapses before an element is available @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/BlockingQueue/remainingCapacity/, Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element. @return the remaining capacity
method,java/util/concurrent/BlockingQueue/drainTo/Collection, Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress. @param c the collection to transfer elements into @return the number of elements transferred @throws UnsupportedOperationException if addition of elements is not supported by the specified collection @throws ClassCastException if the class of an element of this queue prevents it from being added to the specified collection @throws NullPointerException if the specified collection is null @throws IllegalArgumentException if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection
method,java/util/concurrent/BlockingQueue/drainTo/Collection;int, Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress. @param c the collection to transfer elements into @param maxElements the maximum number of elements to transfer @return the number of elements transferred @throws UnsupportedOperationException if addition of elements is not supported by the specified collection @throws ClassCastException if the class of an element of this queue prevents it from being added to the specified collection @throws NullPointerException if the specified collection is null @throws IllegalArgumentException if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection
interface,java/util/concurrent/BlockingDeque, A {@link Deque} that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element. BlockingDeque methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either null or false, depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table: First Element (Head) Throws exception Special value Blocks Times out Insert {@link #addFirst addFirst(e)} {@link #offerFirst(Object) offerFirst(e)} {@link #putFirst putFirst(e)} {@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)} Remove {@link #removeFirst removeFirst()} {@link #pollFirst pollFirst()} {@link #takeFirst takeFirst()} {@link #pollFirst(long, TimeUnit) pollFirst(time, unit)} Examine {@link #getFirst getFirst()} {@link #peekFirst peekFirst()} not applicable not applicable Last Element (Tail) Throws exception Special value Blocks Times out Insert {@link #addLast addLast(e)} {@link #offerLast(Object) offerLast(e)} {@link #putLast putLast(e)} {@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)} Remove {@link #removeLast() removeLast()} {@link #pollLast() pollLast()} {@link #takeLast takeLast()} {@link #pollLast(long, TimeUnit) pollLast(time, unit)} Examine {@link #getLast getLast()} {@link #peekLast peekLast()} not applicable not applicable Like any {@link BlockingQueue}, a BlockingDeque is thread safe, does not permit null elements, and may (or may not) be capacity-constrained. A BlockingDeque implementation may be used directly as a FIFO BlockingQueue. The methods inherited from the BlockingQueue interface are precisely equivalent to BlockingDeque methods as indicated in the following table: BlockingQueue Method Equivalent BlockingDeque Method Insert {@link #add(Object) add(e)} {@link #addLast(Object) addLast(e)} {@link #offer(Object) offer(e)} {@link #offerLast(Object) offerLast(e)} {@link #put(Object) put(e)} {@link #putLast(Object) putLast(e)} {@link #offer(Object, long, TimeUnit) offer(e, time, unit)} {@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)} Remove {@link #remove() remove()} {@link #removeFirst() removeFirst()} {@link #poll() poll()} {@link #pollFirst() pollFirst()} {@link #take() take()} {@link #takeFirst() takeFirst()} {@link #poll(long, TimeUnit) poll(time, unit)} {@link #pollFirst(long, TimeUnit) pollFirst(time, unit)} Examine {@link #element() element()} {@link #getFirst() getFirst()} {@link #peek() peek()} {@link #peekFirst() peekFirst()} Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a {@code BlockingDeque} happen-before actions subsequent to the access or removal of that element from the {@code BlockingDeque} in another thread. This interface is a member of the Java Collections Framework. @since 1.6 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/BlockingDeque/takeFirst/, Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available. @return the head of this deque @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/BlockingDeque/takeLast/, Retrieves and removes the last element of this deque, waiting if necessary until an element becomes available. @return the tail of this deque @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/BlockingDeque/pollFirst/long;TimeUnit, Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available. @param timeout how long to wait before giving up, in units of unit @param unit a TimeUnit determining how to interpret the timeout parameter @return the head of this deque, or null if the specified waiting time elapses before an element is available @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/BlockingDeque/pollLast/long;TimeUnit, Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available. @param timeout how long to wait before giving up, in units of unit @param unit a TimeUnit determining how to interpret the timeout parameter @return the tail of this deque, or null if the specified waiting time elapses before an element is available @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/BlockingDeque/remove/, Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from {@link #poll poll} only in that it throws an exception if this deque is empty. This method is equivalent to {@link #removeFirst() removeFirst}. @return the head of the queue represented by this deque @throws NoSuchElementException if this deque is empty
method,java/util/concurrent/BlockingDeque/poll/, Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to {@link #pollFirst()}. @return the head of this deque, or null if this deque is empty
method,java/util/concurrent/BlockingDeque/take/, Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available. This method is equivalent to {@link #takeFirst() takeFirst}. @return the head of this deque @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/BlockingDeque/poll/long;TimeUnit, Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available. This method is equivalent to {@link #pollFirst(long,TimeUnit) pollFirst}. @return the head of this deque, or null if the specified waiting time elapses before an element is available @throws InterruptedException if interrupted while waiting
method,java/util/concurrent/BlockingDeque/element/, Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from {@link #peek peek} only in that it throws an exception if this deque is empty. This method is equivalent to {@link #getFirst() getFirst}. @return the head of this deque @throws NoSuchElementException if this deque is empty
method,java/util/concurrent/BlockingDeque/peek/, Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to {@link #peekFirst() peekFirst}. @return the head of this deque, or null if this deque is empty
method,java/util/concurrent/BlockingDeque/size/, Returns the number of elements in this deque. @return the number of elements in this deque
method,java/util/concurrent/BlockingDeque/iterator/, Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail). @return an iterator over the elements in this deque in proper sequence
class,java/util/concurrent/ArrayBlockingQueue, A bounded {@linkplain BlockingQueue blocking queue} backed by an array. This queue orders elements FIFO (first-in-first-out). The head of the queue is that element that has been on the queue the longest time. The tail of the queue is that element that has been on the queue the shortest time. New elements are inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. This is a classic &quot;bounded buffer&quot;, in which a fixed-sized array holds elements inserted by producers and extracted by consumers. Once created, the capacity cannot be increased. Attempts to put an element into a full queue will result in the operation blocking; attempts to take an element from an empty queue will similarly block. This class supports an optional fairness policy for ordering waiting producer and consumer threads. By default, this ordering is not guaranteed. However, a queue constructed with fairness set to true grants threads access in FIFO order. Fairness generally decreases throughput but reduces variability and avoids starvation. This class and its iterator implement all of the optional methods of the {@link Collection} and {@link Iterator} interfaces. This class is a member of the Java Collections Framework. @since 1.5 @author Doug Lea @param the type of elements held in this collection
method,java/util/concurrent/ArrayBlockingQueue/add/Object, Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an IllegalStateException if this queue is full. @param e the element to add @return true (as specified by {@link Collection#add}) @throws IllegalStateException if this queue is full @throws NullPointerException if the specified element is null
method,java/util/concurrent/ArrayBlockingQueue/offer/Object, Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full. This method is generally preferable to method {@link #add}, which can fail to insert an element only by throwing an exception. @throws NullPointerException if the specified element is null
method,java/util/concurrent/ArrayBlockingQueue/put/Object, Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full. @throws InterruptedException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/ArrayBlockingQueue/offer/Object;long;TimeUnit, Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full. @throws InterruptedException {@inheritDoc} @throws NullPointerException {@inheritDoc}
method,java/util/concurrent/ArrayBlockingQueue/poll/,
method,java/util/concurrent/ArrayBlockingQueue/take/,
method,java/util/concurrent/ArrayBlockingQueue/poll/long;TimeUnit,
method,java/util/concurrent/ArrayBlockingQueue/peek/,
method,java/util/concurrent/ArrayBlockingQueue/size/, Returns the number of elements in this queue. @return the number of elements in this queue
method,java/util/concurrent/ArrayBlockingQueue/remainingCapacity/, Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this queue less the current size of this queue. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element.
method,java/util/concurrent/ArrayBlockingQueue/remove/Object, Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if this queue contained the specified element (or equivalently, if this queue changed as a result of the call). @param o element to be removed from this queue, if present @return true if this queue changed as a result of the call
method,java/util/concurrent/ArrayBlockingQueue/contains/Object, Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e). @param o object to be checked for containment in this queue @return true if this queue contains the specified element
method,java/util/concurrent/ArrayBlockingQueue/toString/,
method,java/util/concurrent/ArrayBlockingQueue/clear/, Atomically removes all of the elements from this queue. The queue will be empty after this call returns.
method,java/util/concurrent/ArrayBlockingQueue/drainTo/Collection, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ArrayBlockingQueue/drainTo/Collection;int, @throws UnsupportedOperationException {@inheritDoc} @throws ClassCastException {@inheritDoc} @throws NullPointerException {@inheritDoc} @throws IllegalArgumentException {@inheritDoc}
method,java/util/concurrent/ArrayBlockingQueue/ArrayBlockingQueue/int, Creates an ArrayBlockingQueue with the given (fixed) capacity and default access policy. @param capacity the capacity of this queue @throws IllegalArgumentException if capacity is less than 1
method,java/util/concurrent/ArrayBlockingQueue/ArrayBlockingQueue/int;boolean, Creates an ArrayBlockingQueue with the given (fixed) capacity and the specified access policy. @param capacity the capacity of this queue @param fair if true then queue accesses for threads blocked on insertion or removal, are processed in FIFO order; if false the access order is unspecified. @throws IllegalArgumentException if capacity is less than 1
method,java/util/concurrent/ArrayBlockingQueue/ArrayBlockingQueue/int;boolean;Collection, Creates an ArrayBlockingQueue with the given (fixed) capacity, the specified access policy and initially containing the elements of the given collection, added in traversal order of the collection's iterator. @param capacity the capacity of this queue @param fair if true then queue accesses for threads blocked on insertion or removal, are processed in FIFO order; if false the access order is unspecified. @param c the collection of elements to initially contain @throws IllegalArgumentException if capacity is less than c.size(), or less than 1. @throws NullPointerException if the specified collection or any of its elements are null
method,java/util/concurrent/AbstractExecutorService/newTaskFor/Runnable;Object, Returns a RunnableFuture for the given runnable and default value. @param runnable the runnable task being wrapped @param value the default value for the returned future @return a RunnableFuture which when run will run the underlying runnable and which, as a Future, will yield the given value as its result and provide for cancellation of the underlying task. @since 1.6
method,java/util/concurrent/AbstractExecutorService/newTaskFor/Callable, Returns a RunnableFuture for the given callable task. @param callable the callable task being wrapped @return a RunnableFuture which when run will call the underlying callable and which, as a Future, will yield the callable's result as its result and provide for cancellation of the underlying task. @since 1.6
method,java/util/concurrent/AbstractExecutorService/submit/Runnable,
method,java/util/concurrent/AbstractExecutorService/submit/Runnable;Object,
method,java/util/concurrent/AbstractExecutorService/submit/Callable,
method,java/util/concurrent/AbstractExecutorService/invokeAny/Collection,
method,java/util/concurrent/AbstractExecutorService/invokeAny/Collection;long;TimeUnit,
method,java/util/concurrent/AbstractExecutorService/invokeAll/Collection,
method,java/util/concurrent/AbstractExecutorService/invokeAll/Collection;long;TimeUnit,
method,java/util/concurrent/AbstractExecutorService/AbstractExecutorService/,
class,java/util/concurrent/atomic/AtomicStampedReference, An {@code AtomicStampedReference} maintains an object reference along with an integer stamp, that can be updated atomically. Implementation note. This implementation maintains stamped references by creating internal objects representing boxed [reference, integer] pairs. @since 1.5 @author Doug Lea @param The type of object referred to by this reference
method,java/util/concurrent/atomic/AtomicStampedReference/getReference/, Returns the current value of the reference. @return the current value of the reference
method,java/util/concurrent/atomic/AtomicStampedReference/getStamp/, Returns the current value of the stamp. @return the current value of the stamp
method,java/util/concurrent/atomic/AtomicStampedReference/get/int[], Returns the current values of both the reference and the stamp. Typical usage is {@code int[1] holder; ref = v.get(holder); }. @param stampHolder an array of size of at least one. On return, {@code stampholder[0]} will hold the value of the stamp. @return the current value of the reference
method,java/util/concurrent/atomic/AtomicStampedReference/weakCompareAndSet/Object;Object;int;int, Atomically sets the value of both the reference and stamp to the given update values if the current reference is {@code ==} to the expected reference and the current stamp is equal to the expected stamp. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param expectedReference the expected value of the reference @param newReference the new value for the reference @param expectedStamp the expected value of the stamp @param newStamp the new value for the stamp @return true if successful
method,java/util/concurrent/atomic/AtomicStampedReference/compareAndSet/Object;Object;int;int, Atomically sets the value of both the reference and stamp to the given update values if the current reference is {@code ==} to the expected reference and the current stamp is equal to the expected stamp. @param expectedReference the expected value of the reference @param newReference the new value for the reference @param expectedStamp the expected value of the stamp @param newStamp the new value for the stamp @return true if successful
method,java/util/concurrent/atomic/AtomicStampedReference/set/Object;int, Unconditionally sets the value of both the reference and stamp. @param newReference the new value for the reference @param newStamp the new value for the stamp
method,java/util/concurrent/atomic/AtomicStampedReference/attemptStamp/Object;int, Atomically sets the value of the stamp to the given update value if the current reference is {@code ==} to the expected reference. Any given invocation of this operation may fail (return {@code false}) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed. @param expectedReference the expected value of the reference @param newStamp the new value for the stamp @return true if successful
method,java/util/concurrent/atomic/AtomicStampedReference/AtomicStampedReference/Object;int, Creates a new {@code AtomicStampedReference} with the given initial values. @param initialRef the initial reference @param initialStamp the initial stamp
class,java/util/concurrent/atomic/AtomicReferenceFieldUpdater, A reflection-based utility that enables atomic updates to designated {@code volatile} reference fields of designated classes. This class is designed for use in atomic data structures in which several reference fields of the same node are independently subject to atomic updates. For example, a tree node might be declared as class Node { private volatile Node left, right; private static final AtomicReferenceFieldUpdater&lt;Node, Node&gt; leftUpdater = AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, left); private static AtomicReferenceFieldUpdater&lt;Node, Node&gt; rightUpdater = AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, right); Node getLeft() { return left; } boolean compareAndSetLeft(Node expect, Node update) { return leftUpdater.compareAndSet(this, expect, update); } // ... and so on } Note that the guarantees of the {@code compareAndSet} method in this class are weaker than in other atomic classes. Because this class cannot ensure that all uses of the field are appropriate for purposes of atomic access, it can guarantee atomicity only with respect to other invocations of {@code compareAndSet} and {@code set} on the same updater. @since 1.5 @author Doug Lea @param The type of the object holding the updatable field @param The type of the field
method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/newUpdater/Class;Class;String, Creates and returns an updater for objects with the given field. The Class arguments are needed to check that reflective types and generic types match. @param tclass the class of the objects holding the field. @param vclass the class of the field @param fieldName the name of the field to be updated. @return the updater @throws IllegalArgumentException if the field is not a volatile reference type. @throws RuntimeException with a nested reflection-based exception if the class does not hold field or is the wrong type.
method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/compareAndSet/Object;Object;Object, Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value. This method is guaranteed to be atomic with respect to other calls to {@code compareAndSet} and {@code set}, but not necessarily with respect to other changes in the field. @param obj An object whose field to conditionally set @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/weakCompareAndSet/Object;Object;Object, Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value. This method is guaranteed to be atomic with respect to other calls to {@code compareAndSet} and {@code set}, but not necessarily with respect to other changes in the field. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param obj An object whose field to conditionally set @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/set/Object;Object, Sets the field of the given object managed by this updater to the given updated value. This operation is guaranteed to act as a volatile store with respect to subsequent invocations of {@code compareAndSet}. @param obj An object whose field to set @param newValue the new value
method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/lazySet/Object;Object, Eventually sets the field of the given object managed by this updater to the given updated value. @param obj An object whose field to set @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/get/Object, Gets the current value held in the field of the given object managed by this updater. @param obj An object whose field to get @return the current value
method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/getAndSet/Object;Object, Atomically sets the field of the given object managed by this updater to the given value and returns the old value. @param obj An object whose field to get and set @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/AtomicReferenceFieldUpdater/, Protected do-nothing constructor for use by subclasses.
class,java/util/concurrent/atomic/AtomicReferenceArray, An array of object references in which elements may be updated atomically. See the {@link java.util.concurrent.atomic} package specification for description of the properties of atomic variables. @since 1.5 @author Doug Lea @param The base class of elements held in this array
method,java/util/concurrent/atomic/AtomicReferenceArray/length/, Returns the length of the array. @return the length of the array
method,java/util/concurrent/atomic/AtomicReferenceArray/get/int, Gets the current value at position {@code i}. @param i the index @return the current value
method,java/util/concurrent/atomic/AtomicReferenceArray/set/int;Object, Sets the element at position {@code i} to the given value. @param i the index @param newValue the new value
method,java/util/concurrent/atomic/AtomicReferenceArray/lazySet/int;Object, Eventually sets the element at position {@code i} to the given value. @param i the index @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicReferenceArray/getAndSet/int;Object, Atomically sets the element at position {@code i} to the given value and returns the old value. @param i the index @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicReferenceArray/compareAndSet/int;Object;Object, Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value. @param i the index @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/atomic/AtomicReferenceArray/weakCompareAndSet/int;Object;Object, Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param i the index @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicReferenceArray/toString/, Returns the String representation of the current values of array. @return the String representation of the current values of array.
method,java/util/concurrent/atomic/AtomicReferenceArray/AtomicReferenceArray/int, Creates a new AtomicReferenceArray of given length. @param length the length of the array
class,java/util/concurrent/atomic/AtomicReference, An object reference that may be updated atomically. See the {@link java.util.concurrent.atomic} package specification for description of the properties of atomic variables. @since 1.5 @author Doug Lea @param The type of object referred to by this reference
method,java/util/concurrent/atomic/AtomicReference/get/, Gets the current value. @return the current value
method,java/util/concurrent/atomic/AtomicReference/set/Object, Sets to the given value. @param newValue the new value
method,java/util/concurrent/atomic/AtomicReference/lazySet/Object, Eventually sets to the given value. @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicReference/compareAndSet/Object;Object, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/atomic/AtomicReference/weakCompareAndSet/Object;Object, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicReference/getAndSet/Object, Atomically sets to the given value and returns the old value. @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicReference/toString/, Returns the String representation of the current value. @return the String representation of the current value.
method,java/util/concurrent/atomic/AtomicReference/AtomicReference/Object, Creates a new AtomicReference with the given initial value. @param initialValue the initial value
method,java/util/concurrent/atomic/AtomicReference/AtomicReference/, Creates a new AtomicReference with null initial value.
class,java/util/concurrent/atomic/AtomicMarkableReference, An {@code AtomicMarkableReference} maintains an object reference along with a mark bit, that can be updated atomically. Implementation note. This implementation maintains markable references by creating internal objects representing boxed [reference, boolean] pairs. @since 1.5 @author Doug Lea @param The type of object referred to by this reference
method,java/util/concurrent/atomic/AtomicMarkableReference/getReference/, Returns the current value of the reference. @return the current value of the reference
method,java/util/concurrent/atomic/AtomicMarkableReference/isMarked/, Returns the current value of the mark. @return the current value of the mark
method,java/util/concurrent/atomic/AtomicMarkableReference/get/boolean[], Returns the current values of both the reference and the mark. Typical usage is {@code boolean[1] holder; ref = v.get(holder); }. @param markHolder an array of size of at least one. On return, {@code markholder[0]} will hold the value of the mark. @return the current value of the reference
method,java/util/concurrent/atomic/AtomicMarkableReference/weakCompareAndSet/Object;Object;boolean;boolean, Atomically sets the value of both the reference and mark to the given update values if the current reference is {@code ==} to the expected reference and the current mark is equal to the expected mark. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param expectedReference the expected value of the reference @param newReference the new value for the reference @param expectedMark the expected value of the mark @param newMark the new value for the mark @return true if successful
method,java/util/concurrent/atomic/AtomicMarkableReference/compareAndSet/Object;Object;boolean;boolean, Atomically sets the value of both the reference and mark to the given update values if the current reference is {@code ==} to the expected reference and the current mark is equal to the expected mark. @param expectedReference the expected value of the reference @param newReference the new value for the reference @param expectedMark the expected value of the mark @param newMark the new value for the mark @return true if successful
method,java/util/concurrent/atomic/AtomicMarkableReference/set/Object;boolean, Unconditionally sets the value of both the reference and mark. @param newReference the new value for the reference @param newMark the new value for the mark
method,java/util/concurrent/atomic/AtomicMarkableReference/attemptMark/Object;boolean, Atomically sets the value of the mark to the given update value if the current reference is {@code ==} to the expected reference. Any given invocation of this operation may fail (return {@code false}) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed. @param expectedReference the expected value of the reference @param newMark the new value for the mark @return true if successful
method,java/util/concurrent/atomic/AtomicMarkableReference/AtomicMarkableReference/Object;boolean, Creates a new {@code AtomicMarkableReference} with the given initial values. @param initialRef the initial reference @param initialMark the initial mark
class,java/util/concurrent/atomic/AtomicLongFieldUpdater, A reflection-based utility that enables atomic updates to designated {@code volatile long} fields of designated classes. This class is designed for use in atomic data structures in which several fields of the same node are independently subject to atomic updates. Note that the guarantees of the {@code compareAndSet} method in this class are weaker than in other atomic classes. Because this class cannot ensure that all uses of the field are appropriate for purposes of atomic access, it can guarantee atomicity only with respect to other invocations of {@code compareAndSet} and {@code set} on the same updater. @since 1.5 @author Doug Lea @param The type of the object holding the updatable field
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/newUpdater/Class;String, Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match. @param tclass the class of the objects holding the field @param fieldName the name of the field to be updated. @return the updater @throws IllegalArgumentException if the field is not a volatile long type. @throws RuntimeException with a nested reflection-based exception if the class does not hold field or is the wrong type.
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/compareAndSet/Object;long;long, Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value. This method is guaranteed to be atomic with respect to other calls to {@code compareAndSet} and {@code set}, but not necessarily with respect to other changes in the field. @param obj An object whose field to conditionally set @param expect the expected value @param update the new value @return true if successful. @throws ClassCastException if {@code obj} is not an instance of the class possessing the field established in the constructor.
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/weakCompareAndSet/Object;long;long, Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value. This method is guaranteed to be atomic with respect to other calls to {@code compareAndSet} and {@code set}, but not necessarily with respect to other changes in the field. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param obj An object whose field to conditionally set @param expect the expected value @param update the new value @return true if successful. @throws ClassCastException if {@code obj} is not an instance of the class possessing the field established in the constructor.
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/set/Object;long, Sets the field of the given object managed by this updater to the given updated value. This operation is guaranteed to act as a volatile store with respect to subsequent invocations of {@code compareAndSet}. @param obj An object whose field to set @param newValue the new value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/lazySet/Object;long, Eventually sets the field of the given object managed by this updater to the given updated value. @param obj An object whose field to set @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/get/Object, Gets the current value held in the field of the given object managed by this updater. @param obj An object whose field to get @return the current value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/getAndSet/Object;long, Atomically sets the field of the given object managed by this updater to the given value and returns the old value. @param obj An object whose field to get and set @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/getAndIncrement/Object, Atomically increments by one the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @return the previous value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/getAndDecrement/Object, Atomically decrements by one the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @return the previous value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/getAndAdd/Object;long, Atomically adds the given value to the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @param delta the value to add @return the previous value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/incrementAndGet/Object, Atomically increments by one the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @return the updated value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/decrementAndGet/Object, Atomically decrements by one the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @return the updated value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/addAndGet/Object;long, Atomically adds the given value to the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @param delta the value to add @return the updated value
method,java/util/concurrent/atomic/AtomicLongFieldUpdater/AtomicLongFieldUpdater/, Protected do-nothing constructor for use by subclasses.
class,java/util/concurrent/atomic/AtomicLongArray, A {@code long} array in which elements may be updated atomically. See the {@link java.util.concurrent.atomic} package specification for description of the properties of atomic variables. @since 1.5 @author Doug Lea
method,java/util/concurrent/atomic/AtomicLongArray/length/, Returns the length of the array. @return the length of the array
method,java/util/concurrent/atomic/AtomicLongArray/get/int, Gets the current value at position {@code i}. @param i the index @return the current value
method,java/util/concurrent/atomic/AtomicLongArray/set/int;long, Sets the element at position {@code i} to the given value. @param i the index @param newValue the new value
method,java/util/concurrent/atomic/AtomicLongArray/lazySet/int;long, Eventually sets the element at position {@code i} to the given value. @param i the index @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicLongArray/getAndSet/int;long, Atomically sets the element at position {@code i} to the given value and returns the old value. @param i the index @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicLongArray/compareAndSet/int;long;long, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. @param i the index @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/atomic/AtomicLongArray/weakCompareAndSet/int;long;long, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param i the index @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicLongArray/getAndIncrement/int, Atomically increments by one the element at index {@code i}. @param i the index @return the previous value
method,java/util/concurrent/atomic/AtomicLongArray/getAndDecrement/int, Atomically decrements by one the element at index {@code i}. @param i the index @return the previous value
method,java/util/concurrent/atomic/AtomicLongArray/getAndAdd/int;long, Atomically adds the given value to the element at index {@code i}. @param i the index @param delta the value to add @return the previous value
method,java/util/concurrent/atomic/AtomicLongArray/incrementAndGet/int, Atomically increments by one the element at index {@code i}. @param i the index @return the updated value
method,java/util/concurrent/atomic/AtomicLongArray/decrementAndGet/int, Atomically decrements by one the element at index {@code i}. @param i the index @return the updated value
method,java/util/concurrent/atomic/AtomicLongArray/addAndGet/int;long, Atomically adds the given value to the element at index {@code i}. @param i the index @param delta the value to add @return the updated value
method,java/util/concurrent/atomic/AtomicLongArray/toString/, Returns the String representation of the current values of array. @return the String representation of the current values of array.
method,java/util/concurrent/atomic/AtomicLongArray/AtomicLongArray/int, Creates a new AtomicLongArray of given length. @param length the length of the array
class,java/util/concurrent/atomic/AtomicLong, A {@code long} value that may be updated atomically. See the {@link java.util.concurrent.atomic} package specification for description of the properties of atomic variables. An {@code AtomicLong} is used in applications such as atomically incremented sequence numbers, and cannot be used as a replacement for a {@link java.lang.Long}. However, this class does extend {@code Number} to allow uniform access by tools and utilities that deal with numerically-based classes. @since 1.5 @author Doug Lea
method,java/util/concurrent/atomic/AtomicLong/get/, Gets the current value. @return the current value
method,java/util/concurrent/atomic/AtomicLong/set/long, Sets to the given value. @param newValue the new value
method,java/util/concurrent/atomic/AtomicLong/lazySet/long, Eventually sets to the given value. @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicLong/getAndSet/long, Atomically sets to the given value and returns the old value. @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicLong/compareAndSet/long;long, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/atomic/AtomicLong/weakCompareAndSet/long;long, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicLong/getAndIncrement/, Atomically increments by one the current value. @return the previous value
method,java/util/concurrent/atomic/AtomicLong/getAndDecrement/, Atomically decrements by one the current value. @return the previous value
method,java/util/concurrent/atomic/AtomicLong/getAndAdd/long, Atomically adds the given value to the current value. @param delta the value to add @return the previous value
method,java/util/concurrent/atomic/AtomicLong/incrementAndGet/, Atomically increments by one the current value. @return the updated value
method,java/util/concurrent/atomic/AtomicLong/decrementAndGet/, Atomically decrements by one the current value. @return the updated value
method,java/util/concurrent/atomic/AtomicLong/addAndGet/long, Atomically adds the given value to the current value. @param delta the value to add @return the updated value
method,java/util/concurrent/atomic/AtomicLong/toString/, Returns the String representation of the current value. @return the String representation of the current value.
method,java/util/concurrent/atomic/AtomicLong/intValue/,
method,java/util/concurrent/atomic/AtomicLong/longValue/,
method,java/util/concurrent/atomic/AtomicLong/floatValue/,
method,java/util/concurrent/atomic/AtomicLong/doubleValue/,
method,java/util/concurrent/atomic/AtomicLong/AtomicLong/long, Creates a new AtomicLong with the given initial value. @param initialValue the initial value
method,java/util/concurrent/atomic/AtomicLong/AtomicLong/, Creates a new AtomicLong with initial value {@code 0}.
class,java/util/concurrent/atomic/AtomicIntegerFieldUpdater, A reflection-based utility that enables atomic updates to designated {@code volatile int} fields of designated classes. This class is designed for use in atomic data structures in which several fields of the same node are independently subject to atomic updates. Note that the guarantees of the {@code compareAndSet} method in this class are weaker than in other atomic classes. Because this class cannot ensure that all uses of the field are appropriate for purposes of atomic access, it can guarantee atomicity only with respect to other invocations of {@code compareAndSet} and {@code set} on the same updater. @since 1.5 @author Doug Lea @param The type of the object holding the updatable field
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/newUpdater/Class;String, Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match. @param tclass the class of the objects holding the field @param fieldName the name of the field to be updated @return the updater @throws IllegalArgumentException if the field is not a volatile integer type @throws RuntimeException with a nested reflection-based exception if the class does not hold field or is the wrong type
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/compareAndSet/Object;int;int, Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value. This method is guaranteed to be atomic with respect to other calls to {@code compareAndSet} and {@code set}, but not necessarily with respect to other changes in the field. @param obj An object whose field to conditionally set @param expect the expected value @param update the new value @return true if successful @throws ClassCastException if {@code obj} is not an instance of the class possessing the field established in the constructor
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/weakCompareAndSet/Object;int;int, Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value. This method is guaranteed to be atomic with respect to other calls to {@code compareAndSet} and {@code set}, but not necessarily with respect to other changes in the field. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param obj An object whose field to conditionally set @param expect the expected value @param update the new value @return true if successful @throws ClassCastException if {@code obj} is not an instance of the class possessing the field established in the constructor
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/set/Object;int, Sets the field of the given object managed by this updater to the given updated value. This operation is guaranteed to act as a volatile store with respect to subsequent invocations of {@code compareAndSet}. @param obj An object whose field to set @param newValue the new value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/lazySet/Object;int, Eventually sets the field of the given object managed by this updater to the given updated value. @param obj An object whose field to set @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/get/Object, Gets the current value held in the field of the given object managed by this updater. @param obj An object whose field to get @return the current value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/getAndSet/Object;int, Atomically sets the field of the given object managed by this updater to the given value and returns the old value. @param obj An object whose field to get and set @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/getAndIncrement/Object, Atomically increments by one the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @return the previous value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/getAndDecrement/Object, Atomically decrements by one the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @return the previous value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/getAndAdd/Object;int, Atomically adds the given value to the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @param delta the value to add @return the previous value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/incrementAndGet/Object, Atomically increments by one the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @return the updated value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/decrementAndGet/Object, Atomically decrements by one the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @return the updated value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/addAndGet/Object;int, Atomically adds the given value to the current value of the field of the given object managed by this updater. @param obj An object whose field to get and set @param delta the value to add @return the updated value
method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/AtomicIntegerFieldUpdater/, Protected do-nothing constructor for use by subclasses.
class,java/util/concurrent/atomic/AtomicIntegerArray, An {@code int} array in which elements may be updated atomically. See the {@link java.util.concurrent.atomic} package specification for description of the properties of atomic variables. @since 1.5 @author Doug Lea
method,java/util/concurrent/atomic/AtomicIntegerArray/length/, Returns the length of the array. @return the length of the array
method,java/util/concurrent/atomic/AtomicIntegerArray/get/int, Gets the current value at position {@code i}. @param i the index @return the current value
method,java/util/concurrent/atomic/AtomicIntegerArray/set/int;int, Sets the element at position {@code i} to the given value. @param i the index @param newValue the new value
method,java/util/concurrent/atomic/AtomicIntegerArray/lazySet/int;int, Eventually sets the element at position {@code i} to the given value. @param i the index @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicIntegerArray/getAndSet/int;int, Atomically sets the element at position {@code i} to the given value and returns the old value. @param i the index @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicIntegerArray/compareAndSet/int;int;int, Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value. @param i the index @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/atomic/AtomicIntegerArray/weakCompareAndSet/int;int;int, Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param i the index @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicIntegerArray/getAndIncrement/int, Atomically increments by one the element at index {@code i}. @param i the index @return the previous value
method,java/util/concurrent/atomic/AtomicIntegerArray/getAndDecrement/int, Atomically decrements by one the element at index {@code i}. @param i the index @return the previous value
method,java/util/concurrent/atomic/AtomicIntegerArray/getAndAdd/int;int, Atomically adds the given value to the element at index {@code i}. @param i the index @param delta the value to add @return the previous value
method,java/util/concurrent/atomic/AtomicIntegerArray/incrementAndGet/int, Atomically increments by one the element at index {@code i}. @param i the index @return the updated value
method,java/util/concurrent/atomic/AtomicIntegerArray/decrementAndGet/int, Atomically decrements by one the element at index {@code i}. @param i the index @return the updated value
method,java/util/concurrent/atomic/AtomicIntegerArray/addAndGet/int;int, Atomically adds the given value to the element at index {@code i}. @param i the index @param delta the value to add @return the updated value
method,java/util/concurrent/atomic/AtomicIntegerArray/toString/, Returns the String representation of the current values of array. @return the String representation of the current values of array.
method,java/util/concurrent/atomic/AtomicIntegerArray/AtomicIntegerArray/int, Creates a new AtomicIntegerArray of given length. @param length the length of the array
class,java/util/concurrent/atomic/AtomicInteger, An {@code int} value that may be updated atomically. See the {@link java.util.concurrent.atomic} package specification for description of the properties of atomic variables. An {@code AtomicInteger} is used in applications such as atomically incremented counters, and cannot be used as a replacement for an {@link java.lang.Integer}. However, this class does extend {@code Number} to allow uniform access by tools and utilities that deal with numerically-based classes. @since 1.5 @author Doug Lea
method,java/util/concurrent/atomic/AtomicInteger/get/, Gets the current value. @return the current value
method,java/util/concurrent/atomic/AtomicInteger/set/int, Sets to the given value. @param newValue the new value
method,java/util/concurrent/atomic/AtomicInteger/lazySet/int, Eventually sets to the given value. @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicInteger/getAndSet/int, Atomically sets to the given value and returns the old value. @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicInteger/compareAndSet/int;int, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/atomic/AtomicInteger/weakCompareAndSet/int;int, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicInteger/getAndIncrement/, Atomically increments by one the current value. @return the previous value
method,java/util/concurrent/atomic/AtomicInteger/getAndDecrement/, Atomically decrements by one the current value. @return the previous value
method,java/util/concurrent/atomic/AtomicInteger/getAndAdd/int, Atomically adds the given value to the current value. @param delta the value to add @return the previous value
method,java/util/concurrent/atomic/AtomicInteger/incrementAndGet/, Atomically increments by one the current value. @return the updated value
method,java/util/concurrent/atomic/AtomicInteger/decrementAndGet/, Atomically decrements by one the current value. @return the updated value
method,java/util/concurrent/atomic/AtomicInteger/addAndGet/int, Atomically adds the given value to the current value. @param delta the value to add @return the updated value
method,java/util/concurrent/atomic/AtomicInteger/toString/, Returns the String representation of the current value. @return the String representation of the current value.
method,java/util/concurrent/atomic/AtomicInteger/intValue/,
method,java/util/concurrent/atomic/AtomicInteger/longValue/,
method,java/util/concurrent/atomic/AtomicInteger/floatValue/,
method,java/util/concurrent/atomic/AtomicInteger/doubleValue/,
method,java/util/concurrent/atomic/AtomicInteger/AtomicInteger/int, Creates a new AtomicInteger with the given initial value. @param initialValue the initial value
method,java/util/concurrent/atomic/AtomicInteger/AtomicInteger/, Creates a new AtomicInteger with initial value {@code 0}.
class,java/util/concurrent/atomic/AtomicBoolean, A {@code boolean} value that may be updated atomically. See the {@link java.util.concurrent.atomic} package specification for description of the properties of atomic variables. An {@code AtomicBoolean} is used in applications such as atomically updated flags, and cannot be used as a replacement for a {@link java.lang.Boolean}. @since 1.5 @author Doug Lea
method,java/util/concurrent/atomic/AtomicBoolean/get/, Returns the current value. @return the current value
method,java/util/concurrent/atomic/AtomicBoolean/compareAndSet/boolean;boolean, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/atomic/AtomicBoolean/weakCompareAndSet/boolean;boolean, Atomically sets the value to the given updated value if the current value {@code ==} the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}. @param expect the expected value @param update the new value @return true if successful.
method,java/util/concurrent/atomic/AtomicBoolean/set/boolean, Unconditionally sets to the given value. @param newValue the new value
method,java/util/concurrent/atomic/AtomicBoolean/lazySet/boolean, Eventually sets to the given value. @param newValue the new value @since 1.6
method,java/util/concurrent/atomic/AtomicBoolean/getAndSet/boolean, Atomically sets to the given value and returns the previous value. @param newValue the new value @return the previous value
method,java/util/concurrent/atomic/AtomicBoolean/toString/, Returns the String representation of the current value. @return the String representation of the current value.
method,java/util/concurrent/atomic/AtomicBoolean/AtomicBoolean/boolean, Creates a new {@code AtomicBoolean} with the given initial value. @param initialValue the initial value
method,java/util/concurrent/atomic/AtomicBoolean/AtomicBoolean/, Creates a new {@code AtomicBoolean} with initial value {@code false}.
class,java/util/concurrent/locks/ReentrantReadWriteLock, An implementation of {@link ReadWriteLock} supporting similar semantics to {@link ReentrantLock}. This class has the following properties: Acquisition order This class does not impose a reader or writer preference ordering for lock access. However, it does support an optional fairness policy. Non-fair mode (default) When constructed as non-fair (the default), the order of entry to the read and write lock is unspecified, subject to reentrancy constraints. A nonfair lock that is continously contended may indefinitely postpone one or more reader or writer threads, but will normally have higher throughput than a fair lock. Fair mode When constructed as fair, threads contend for entry using an approximately arrival-order policy. When the currently held lock is released either the longest-waiting single writer thread will be assigned the write lock, or if there is a group of reader threads waiting longer than all waiting writer threads, that group will be assigned the read lock. A thread that tries to acquire a fair read lock (non-reentrantly) will block if either the write lock is held, or there is a waiting writer thread. The thread will not acquire the read lock until after the oldest currently waiting writer thread has acquired and released the write lock. Of course, if a waiting writer abandons its wait, leaving one or more reader threads as the longest waiters in the queue with the write lock free, then those readers will be assigned the read lock. A thread that tries to acquire a fair write lock (non-reentrantly) will block unless both the read lock and write lock are free (which implies there are no waiting threads). (Note that the non-blocking {@link ReadLock#tryLock()} and {@link WriteLock#tryLock()} methods do not honor this fair setting and will acquire the lock if it is possible, regardless of waiting threads.) Reentrancy This lock allows both readers and writers to reacquire read or write locks in the style of a {@link ReentrantLock}. Non-reentrant readers are not allowed until all write locks held by the writing thread have been released. Additionally, a writer can acquire the read lock, but not vice-versa. Among other applications, reentrancy can be useful when write locks are held during calls or callbacks to methods that perform reads under read locks. If a reader tries to acquire the write lock it will never succeed. Lock downgrading Reentrancy also allows downgrading from the write lock to a read lock, by acquiring the write lock, then the read lock and then releasing the write lock. However, upgrading from a read lock to the write lock is not possible. Interruption of lock acquisition The read lock and write lock both support interruption during lock acquisition. {@link Condition} support The write lock provides a {@link Condition} implementation that behaves in the same way, with respect to the write lock, as the {@link Condition} implementation provided by {@link ReentrantLock#newCondition} does for {@link ReentrantLock}. This {@link Condition} can, of course, only be used with the write lock. The read lock does not support a {@link Condition} and {@code readLock().newCondition()} throws {@code UnsupportedOperationException}. Instrumentation This class supports methods to determine whether locks are held or contended. These methods are designed for monitoring system state, not for synchronization control. Serialization of this class behaves in the same way as built-in locks: a deserialized lock is in the unlocked state, regardless of its state when serialized. Sample usages. Here is a code sketch showing how to exploit reentrancy to perform lock downgrading after updating a cache (exception handling is elided for simplicity): class CachedData { Object data; volatile boolean cacheValid; ReentrantReadWriteLock rwl = new ReentrantReadWriteLock(); void processCachedData() { rwl.readLock().lock(); if (!cacheValid) { // Must release read lock before acquiring write lock rwl.readLock().unlock(); rwl.writeLock().lock(); // Recheck state because another thread might have acquired // write lock and changed state before we did. if (!cacheValid) { data = ... cacheValid = true; } // Downgrade by acquiring read lock before releasing write lock rwl.readLock().lock(); rwl.writeLock().unlock(); // Unlock write, still hold read } use(data); rwl.readLock().unlock(); } } ReentrantReadWriteLocks can be used to improve concurrency in some uses of some kinds of Collections. This is typically worthwhile only when the collections are expected to be large, accessed by more reader threads than writer threads, and entail operations with overhead that outweighs synchronization overhead. For example, here is a class using a TreeMap that is expected to be large and concurrently accessed. {@code class RWDictionary { private final Map m = new TreeMap(); private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock(); private final Lock r = rwl.readLock(); private final Lock w = rwl.writeLock(); public Data get(String key) { r.lock(); try { return m.get(key); } finally { r.unlock(); } } public String[] allKeys() { r.lock(); try { return m.keySet().toArray(); } finally { r.unlock(); } } public Data put(String key, Data value) { w.lock(); try { return m.put(key, value); } finally { w.unlock(); } } public void clear() { w.lock(); try { m.clear(); } finally { w.unlock(); } } }} Implementation Notes This lock supports a maximum of 65535 recursive write locks and 65535 read locks. Attempts to exceed these limits result in {@link Error} throws from locking methods. @since 1.5 @author Doug Lea
method,java/util/concurrent/locks/ReentrantReadWriteLock/writeLock/,
method,java/util/concurrent/locks/ReentrantReadWriteLock/readLock/,
method,java/util/concurrent/locks/ReentrantReadWriteLock/isFair/, Returns {@code true} if this lock has fairness set true. @return {@code true} if this lock has fairness set true
method,java/util/concurrent/locks/ReentrantReadWriteLock/getOwner/, Returns the thread that currently owns the write lock, or {@code null} if not owned. When this method is called by a thread that is not the owner, the return value reflects a best-effort approximation of current lock status. For example, the owner may be momentarily {@code null} even if there are threads trying to acquire the lock but have not yet done so. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities. @return the owner, or {@code null} if not owned
method,java/util/concurrent/locks/ReentrantReadWriteLock/getReadLockCount/, Queries the number of read locks held for this lock. This method is designed for use in monitoring system state, not for synchronization control. @return the number of read locks held.
method,java/util/concurrent/locks/ReentrantReadWriteLock/isWriteLocked/, Queries if the write lock is held by any thread. This method is designed for use in monitoring system state, not for synchronization control. @return {@code true} if any thread holds the write lock and {@code false} otherwise
method,java/util/concurrent/locks/ReentrantReadWriteLock/isWriteLockedByCurrentThread/, Queries if the write lock is held by the current thread. @return {@code true} if the current thread holds the write lock and {@code false} otherwise
method,java/util/concurrent/locks/ReentrantReadWriteLock/getWriteHoldCount/, Queries the number of reentrant write holds on this lock by the current thread. A writer thread has a hold on a lock for each lock action that is not matched by an unlock action. @return the number of holds on the write lock by the current thread, or zero if the write lock is not held by the current thread
method,java/util/concurrent/locks/ReentrantReadWriteLock/getReadHoldCount/, Queries the number of reentrant read holds on this lock by the current thread. A reader thread has a hold on a lock for each lock action that is not matched by an unlock action. @return the number of holds on the read lock by the current thread, or zero if the read lock is not held by the current thread @since 1.6
method,java/util/concurrent/locks/ReentrantReadWriteLock/hasQueuedThreads/, Queries whether any threads are waiting to acquire the read or write lock. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire a lock. This method is designed primarily for use in monitoring of the system state. @return {@code true} if there may be other threads waiting to acquire the lock
method,java/util/concurrent/locks/ReentrantReadWriteLock/hasQueuedThread/Thread, Queries whether the given thread is waiting to acquire either the read or write lock. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that this thread will ever acquire a lock. This method is designed primarily for use in monitoring of the system state. @param thread the thread @return {@code true} if the given thread is queued waiting for this lock @throws NullPointerException if the thread is null
method,java/util/concurrent/locks/ReentrantReadWriteLock/getQueueLength/, Returns an estimate of the number of threads waiting to acquire either the read or write lock. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring of the system state, not for synchronization control. @return the estimated number of threads waiting for this lock
method,java/util/concurrent/locks/ReentrantReadWriteLock/hasWaiters/Condition, Queries whether any threads are waiting on the given condition associated with the write lock. Note that because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee that a future {@code signal} will awaken any threads. This method is designed primarily for use in monitoring of the system state. @param condition the condition @return {@code true} if there are any waiting threads @throws IllegalMonitorStateException if this lock is not held @throws IllegalArgumentException if the given condition is not associated with this lock @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/ReentrantReadWriteLock/getWaitQueueLength/Condition, Returns an estimate of the number of threads waiting on the given condition associated with the write lock. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control. @param condition the condition @return the estimated number of waiting threads @throws IllegalMonitorStateException if this lock is not held @throws IllegalArgumentException if the given condition is not associated with this lock @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/ReentrantReadWriteLock/toString/, Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes the String {@code Write locks =} followed by the number of reentrantly held write locks, and the String {@code Read locks =} followed by the number of held read locks. @return a string identifying this lock, as well as its lock state
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReentrantReadWriteLock/, Creates a new {@code ReentrantReadWriteLock} with default (nonfair) ordering properties.
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReentrantReadWriteLock/boolean, Creates a new {@code ReentrantReadWriteLock} with the given fairness policy. @param fair {@code true} if this lock should use a fair ordering policy
class,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock, The lock returned by method {@link ReentrantReadWriteLock#readLock}.
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/lock/, Acquires the read lock. Acquires the read lock if the write lock is not held by another thread and returns immediately. If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the read lock has been acquired.
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/lockInterruptibly/, Acquires the read lock unless the current thread is {@linkplain Thread#interrupt interrupted}. Acquires the read lock if the write lock is not held by another thread and returns immediately. If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: The read lock is acquired by the current thread; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while acquiring the read lock, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock. @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/tryLock/, Acquires the read lock only if the write lock is not held by another thread at the time of invocation. Acquires the read lock if the write lock is not held by another thread and returns immediately with the value {@code true}. Even when this lock has been set to use a fair ordering policy, a call to {@code tryLock()} will immediately acquire the read lock if it is available, whether or not other threads are currently waiting for the read lock. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) } which is almost equivalent (it also detects interruption). If the write lock is held by another thread then this method will return immediately with the value {@code false}. @return {@code true} if the read lock was acquired
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/tryLock/long;TimeUnit, Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. Acquires the read lock if the write lock is not held by another thread and returns immediately with the value {@code true}. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the lock. This is in contrast to the {@link #tryLock()} method. If you want a timed {@code tryLock} that does permit barging on a fair lock then combine the timed and un-timed forms together: if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The read lock is acquired by the current thread; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or The specified waiting time elapses. If the read lock is acquired then the value {@code true} is returned. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while acquiring the read lock, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value {@code false} is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time. @param timeout the time to wait for the read lock @param unit the time unit of the timeout argument @return {@code true} if the read lock was acquired @throws InterruptedException if the current thread is interrupted @throws NullPointerException if the time unit is null
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/unlock/, Attempts to release this lock. If the number of readers is now zero then the lock is made available for write lock attempts.
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/newCondition/, Throws {@code UnsupportedOperationException} because {@code ReadLocks} do not support conditions. @throws UnsupportedOperationException always
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/toString/, Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes the String {@code Read locks =} followed by the number of held read locks. @return a string identifying this lock, as well as its lock state
method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/ReentrantReadWriteLock/ReadLock/ReentrantReadWriteLock, Constructor for use by subclasses @param lock the outer lock object @throws NullPointerException if the lock is null
class,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock, The lock returned by method {@link ReentrantReadWriteLock#writeLock}.
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/lock/, Acquires the write lock. Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately, setting the write lock hold count to one. If the current thread already holds the write lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the write lock has been acquired, at which time the write lock hold count is set to one.
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/lockInterruptibly/, Acquires the write lock unless the current thread is {@linkplain Thread#interrupt interrupted}. Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately, setting the write lock hold count to one. If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: The write lock is acquired by the current thread; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread. If the write lock is acquired by the current thread then the lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while acquiring the write lock, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock. @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/tryLock/, Acquires the write lock only if it is not held by another thread at the time of invocation. Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately with the value {@code true}, setting the write lock hold count to one. Even when this lock has been set to use a fair ordering policy, a call to {@code tryLock()} will immediately acquire the lock if it is available, whether or not other threads are currently waiting for the write lock. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) } which is almost equivalent (it also detects interruption). If the current thread already holds this lock then the hold count is incremented by one and the method returns {@code true}. If the lock is held by another thread then this method will return immediately with the value {@code false}. @return {@code true} if the lock was free and was acquired by the current thread, or the write lock was already held by the current thread; and {@code false} otherwise.
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/tryLock/long;TimeUnit, Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately with the value {@code true}, setting the write lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the write lock. This is in contrast to the {@link #tryLock()} method. If you want a timed {@code tryLock} that does permit barging on a fair lock then combine the timed and un-timed forms together: if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } If the current thread already holds this lock then the hold count is incremented by one and the method returns {@code true}. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The write lock is acquired by the current thread; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or The specified waiting time elapses If the write lock is acquired then the value {@code true} is returned and the write lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while acquiring the write lock, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value {@code false} is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time. @param timeout the time to wait for the write lock @param unit the time unit of the timeout argument @return {@code true} if the lock was free and was acquired by the current thread, or the write lock was already held by the current thread; and {@code false} if the waiting time elapsed before the lock could be acquired. @throws InterruptedException if the current thread is interrupted @throws NullPointerException if the time unit is null
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/unlock/, Attempts to release this lock. If the current thread is the holder of this lock then the hold count is decremented. If the hold count is now zero then the lock is released. If the current thread is not the holder of this lock then {@link IllegalMonitorStateException} is thrown. @throws IllegalMonitorStateException if the current thread does not hold this lock.
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/toString/, Returns a string identifying this lock, as well as its lock state. The state, in brackets includes either the String {@code Unlocked} or the String {@code Locked by} followed by the {@linkplain Thread#getName name} of the owning thread. @return a string identifying this lock, as well as its lock state
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/isHeldByCurrentThread/, Queries if this write lock is held by the current thread. Identical in effect to {@link ReentrantReadWriteLock#isWriteLockedByCurrentThread}. @return {@code true} if the current thread holds this lock and	 {@code false} otherwise @since 1.6
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/getHoldCount/, Queries the number of holds on this write lock by the current thread. A thread has a hold on a lock for each lock action that is not matched by an unlock action. Identical in effect to {@link ReentrantReadWriteLock#getWriteHoldCount}. @return the number of holds on this lock by the current thread,	 or zero if this lock is not held by the current thread @since 1.6
method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/ReentrantReadWriteLock/WriteLock/ReentrantReadWriteLock, Constructor for use by subclasses @param lock the outer lock object @throws NullPointerException if the lock is null
class,java/util/concurrent/locks/ReentrantLock, A reentrant mutual exclusion {@link Lock} with the same basic behavior and semantics as the implicit monitor lock accessed using {@code synchronized} methods and statements, but with extended capabilities. A {@code ReentrantLock} is owned by the thread last successfully locking, but not yet unlocking it. A thread invoking {@code lock} will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods {@link #isHeldByCurrentThread}, and {@link #getHoldCount}. The constructor for this class accepts an optional fairness parameter. When set {@code true}, under contention, locks favor granting access to the longest-waiting thread. Otherwise this lock does not guarantee any particular access order. Programs using fair locks accessed by many threads may display lower overall throughput (i.e., are slower; often much slower) than those using the default setting, but have smaller variances in times to obtain locks and guarantee lack of starvation. Note however, that fairness of locks does not guarantee fairness of thread scheduling. Thus, one of many threads using a fair lock may obtain it multiple times in succession while other active threads are not progressing and not currently holding the lock. Also note that the untimed {@link #tryLock() tryLock} method does not honor the fairness setting. It will succeed if the lock is available even if other threads are waiting. It is recommended practice to always immediately follow a call to {@code lock} with a {@code try} block, most typically in a before/after construction such as: class X { private final ReentrantLock lock = new ReentrantLock(); // ... public void m() { lock.lock(); // block until condition holds try { // ... method body } finally { lock.unlock() } } } In addition to implementing the {@link Lock} interface, this class defines methods {@code isLocked} and {@code getLockQueueLength}, as well as some associated {@code protected} access methods that may be useful for instrumentation and monitoring. Serialization of this class behaves in the same way as built-in locks: a deserialized lock is in the unlocked state, regardless of its state when serialized. This lock supports a maximum of 2147483647 recursive locks by the same thread. Attempts to exceed this limit result in {@link Error} throws from locking methods. @since 1.5 @author Doug Lea
method,java/util/concurrent/locks/ReentrantLock/lock/, Acquires the lock. Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. If the current thread already holds the lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired, at which time the lock hold count is set to one.
method,java/util/concurrent/locks/ReentrantLock/lockInterruptibly/, Acquires the lock unless the current thread is {@linkplain Thread#interrupt interrupted}. Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: The lock is acquired by the current thread; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread. If the lock is acquired by the current thread then the lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while acquiring the lock, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock. @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/ReentrantLock/tryLock/, Acquires the lock only if it is not held by another thread at the time of invocation. Acquires the lock if it is not held by another thread and returns immediately with the value {@code true}, setting the lock hold count to one. Even when this lock has been set to use a fair ordering policy, a call to {@code tryLock()} will immediately acquire the lock if it is available, whether or not other threads are currently waiting for the lock. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) } which is almost equivalent (it also detects interruption). If the current thread already holds this lock then the hold count is incremented by one and the method returns {@code true}. If the lock is held by another thread then this method will return immediately with the value {@code false}. @return {@code true} if the lock was free and was acquired by the current thread, or the lock was already held by the current thread; and {@code false} otherwise
method,java/util/concurrent/locks/ReentrantLock/tryLock/long;TimeUnit, Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. Acquires the lock if it is not held by another thread and returns immediately with the value {@code true}, setting the lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the lock. This is in contrast to the {@link #tryLock()} method. If you want a timed {@code tryLock} that does permit barging on a fair lock then combine the timed and un-timed forms together: if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } If the current thread already holds this lock then the hold count is incremented by one and the method returns {@code true}. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The lock is acquired by the current thread; or Some other thread {@linkplain Thread#interrupt interrupts} the current thread; or The specified waiting time elapses If the lock is acquired then the value {@code true} is returned and the lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is {@linkplain Thread#interrupt interrupted} while acquiring the lock, then {@link InterruptedException} is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value {@code false} is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time. @param timeout the time to wait for the lock @param unit the time unit of the timeout argument @return {@code true} if the lock was free and was acquired by the current thread, or the lock was already held by the current thread; and {@code false} if the waiting time elapsed before the lock could be acquired @throws InterruptedException if the current thread is interrupted @throws NullPointerException if the time unit is null
method,java/util/concurrent/locks/ReentrantLock/unlock/, Attempts to release this lock. If the current thread is the holder of this lock then the hold count is decremented. If the hold count is now zero then the lock is released. If the current thread is not the holder of this lock then {@link IllegalMonitorStateException} is thrown. @throws IllegalMonitorStateException if the current thread does not hold this lock
method,java/util/concurrent/locks/ReentrantLock/newCondition/, Returns a {@link Condition} instance for use with this {@link Lock} instance. The returned {@link Condition} instance supports the same usages as do the {@link Object} monitor methods ({@link Object#wait() wait}, {@link Object#notify notify}, and {@link Object#notifyAll notifyAll}) when used with the built-in monitor lock. If this lock is not held when any of the {@link Condition} {@linkplain Condition#await() waiting} or {@linkplain Condition#signal signalling} methods are called, then an {@link IllegalMonitorStateException} is thrown. When the condition {@linkplain Condition#await() waiting} methods are called the lock is released and, before they return, the lock is reacquired and the lock hold count restored to what it was when the method was called. If a thread is {@linkplain Thread#interrupt interrupted} while waiting then the wait will terminate, an {@link InterruptedException} will be thrown, and the thread's interrupted status will be cleared. Waiting threads are signalled in FIFO order. The ordering of lock reacquisition for threads returning from waiting methods is the same as for threads initially acquiring the lock, which is in the default case not specified, but for fair locks favors those threads that have been waiting the longest. @return the Condition object
method,java/util/concurrent/locks/ReentrantLock/getHoldCount/, Queries the number of holds on this lock by the current thread. A thread has a hold on a lock for each lock action that is not matched by an unlock action. The hold count information is typically only used for testing and debugging purposes. For example, if a certain section of code should not be entered with the lock already held then we can assert that fact: class X { ReentrantLock lock = new ReentrantLock(); // ... public void m() { assert lock.getHoldCount() == 0; lock.lock(); try { // ... method body } finally { lock.unlock(); } } } @return the number of holds on this lock by the current thread, or zero if this lock is not held by the current thread
method,java/util/concurrent/locks/ReentrantLock/isHeldByCurrentThread/, Queries if this lock is held by the current thread. Analogous to the {@link Thread#holdsLock} method for built-in monitor locks, this method is typically used for debugging and testing. For example, a method that should only be called while a lock is held can assert that this is the case: class X { ReentrantLock lock = new ReentrantLock(); // ... public void m() { assert lock.isHeldByCurrentThread(); // ... method body } } It can also be used to ensure that a reentrant lock is used in a non-reentrant manner, for example: class X { ReentrantLock lock = new ReentrantLock(); // ... public void m() { assert !lock.isHeldByCurrentThread(); lock.lock(); try { // ... method body } finally { lock.unlock(); } } } @return {@code true} if current thread holds this lock and {@code false} otherwise
method,java/util/concurrent/locks/ReentrantLock/isLocked/, Queries if this lock is held by any thread. This method is designed for use in monitoring of the system state, not for synchronization control. @return {@code true} if any thread holds this lock and {@code false} otherwise
method,java/util/concurrent/locks/ReentrantLock/isFair/, Returns {@code true} if this lock has fairness set true. @return {@code true} if this lock has fairness set true
method,java/util/concurrent/locks/ReentrantLock/getOwner/, Returns the thread that currently owns this lock, or {@code null} if not owned. When this method is called by a thread that is not the owner, the return value reflects a best-effort approximation of current lock status. For example, the owner may be momentarily {@code null} even if there are threads trying to acquire the lock but have not yet done so. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities. @return the owner, or {@code null} if not owned
method,java/util/concurrent/locks/ReentrantLock/hasQueuedThreads/, Queries whether any threads are waiting to acquire this lock. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire this lock. This method is designed primarily for use in monitoring of the system state. @return {@code true} if there may be other threads waiting to acquire the lock
method,java/util/concurrent/locks/ReentrantLock/hasQueuedThread/Thread, Queries whether the given thread is waiting to acquire this lock. Note that because cancellations may occur at any time, a {@code true} return does not guarantee that this thread will ever acquire this lock. This method is designed primarily for use in monitoring of the system state. @param thread the thread @return {@code true} if the given thread is queued waiting for this lock @throws NullPointerException if the thread is null
method,java/util/concurrent/locks/ReentrantLock/getQueueLength/, Returns an estimate of the number of threads waiting to acquire this lock. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring of the system state, not for synchronization control. @return the estimated number of threads waiting for this lock
method,java/util/concurrent/locks/ReentrantLock/hasWaiters/Condition, Queries whether any threads are waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee that a future {@code signal} will awaken any threads. This method is designed primarily for use in monitoring of the system state. @param condition the condition @return {@code true} if there are any waiting threads @throws IllegalMonitorStateException if this lock is not held @throws IllegalArgumentException if the given condition is not associated with this lock @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/ReentrantLock/getWaitQueueLength/Condition, Returns an estimate of the number of threads waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control. @param condition the condition @return the estimated number of waiting threads @throws IllegalMonitorStateException if this lock is not held @throws IllegalArgumentException if the given condition is not associated with this lock @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/ReentrantLock/toString/, Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes either the String {@code Unlocked} or the String {@code Locked by} followed by the {@linkplain Thread#getName name} of the owning thread. @return a string identifying this lock, as well as its lock state
method,java/util/concurrent/locks/ReentrantLock/ReentrantLock/, Creates an instance of {@code ReentrantLock}. This is equivalent to using {@code ReentrantLock(false)}.
method,java/util/concurrent/locks/ReentrantLock/ReentrantLock/boolean, Creates an instance of {@code ReentrantLock} with the given fairness policy. @param fair {@code true} if this lock should use a fair ordering policy
method,java/util/concurrent/locks/ReadWriteLock/readLock/, Returns the lock used for reading. @return the lock used for reading.
method,java/util/concurrent/locks/ReadWriteLock/writeLock/, Returns the lock used for writing. @return the lock used for writing.
method,java/util/concurrent/locks/LockSupport/unpark/Thread, Makes available the permit for the given thread, if it was not already available. If the thread was blocked on {@code park} then it will unblock. Otherwise, its next call to {@code park} is guaranteed not to block. This operation is not guaranteed to have any effect at all if the given thread has not been started. @param thread the thread to unpark, or {@code null}, in which case this operation has no effect
method,java/util/concurrent/locks/LockSupport/getBlocker/Thread, Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked. The value returned is just a momentary snapshot -- the thread may have since unblocked or blocked on a different blocker object. @return the blocker @since 1.6
method,java/util/concurrent/locks/Lock/lock/, Acquires the lock. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired. Implementation Considerations A {@code Lock} implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that {@code Lock} implementation.
method,java/util/concurrent/locks/Lock/tryLock/, Acquires the lock only if it is free at the time of invocation. Acquires the lock if it is available and returns immediately with the value {@code true}. If the lock is not available then this method will return immediately with the value {@code false}. A typical usage idiom for this method would be: Lock lock = ...; if (lock.tryLock()) { try { // manipulate protected state } finally { lock.unlock(); } } else { // perform alternative actions } This usage ensures that the lock is unlocked if it was acquired, and doesn't try to unlock if the lock was not acquired. @return {@code true} if the lock was acquired and {@code false} otherwise
method,java/util/concurrent/locks/Lock/unlock/, Releases the lock. Implementation Considerations A {@code Lock} implementation will usually impose restrictions on which thread can release a lock (typically only the holder of the lock can release it) and may throw an (unchecked) exception if the restriction is violated. Any restrictions and the exception type must be documented by that {@code Lock} implementation.
method,java/util/concurrent/locks/Condition/await/long;TimeUnit, Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. This method is behaviorally equivalent to: awaitNanos(unit.toNanos(time)) &gt; 0 @param time the maximum time to wait @param unit the time unit of the {@code time} argument @return {@code false} if the waiting time detectably elapsed before return from the method, else {@code true} @throws InterruptedException if the current thread is interrupted (and interruption of thread suspension is supported)
method,java/util/concurrent/locks/Condition/signal/, Wakes up one waiting thread. If any threads are waiting on this condition then one is selected for waking up. That thread must then re-acquire the lock before returning from {@code await}.
method,java/util/concurrent/locks/Condition/signalAll/, Wakes up all waiting threads. If any threads are waiting on this condition then they are all woken up. Each thread must re-acquire the lock before it can return from {@code await}.
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getState/, Returns the current value of synchronization state. This operation has memory semantics of a volatile read. @return current state value
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/setState/int, Sets the value of synchronization state. This operation has memory semantics of a volatile write. @param newState the new state value
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/compareAndSetState/int;int, Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write. @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/isHeldExclusively/, Returns {@code true} if synchronization is held exclusively with respect to the current (calling) thread. This method is invoked upon each call to a non-waiting {@link ConditionObject} method. (Waiting methods instead invoke {@link #release}.) The default implementation throws {@link UnsupportedOperationException}. This method is invoked internally only within {@link ConditionObject} methods, so need not be defined if conditions are not used. @return {@code true} if synchronization is held exclusively; {@code false} otherwise @throws UnsupportedOperationException if conditions are not supported
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/acquire/int, Acquires in exclusive mode, ignoring interrupts. Implemented by invoking at least once {@link #tryAcquire}, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success. This method can be used to implement method {@link Lock#lock}. @param arg the acquire argument. This value is conveyed to {@link #tryAcquire} but is otherwise uninterpreted and can represent anything you like.
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/acquireInterruptibly/int, Acquires in exclusive mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquire}, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success or the thread is interrupted. This method can be used to implement method {@link Lock#lockInterruptibly}. @param arg the acquire argument. This value is conveyed to {@link #tryAcquire} but is otherwise uninterpreted and can represent anything you like. @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/tryAcquireNanos/int;long, Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquire}, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success or the thread is interrupted or the timeout elapses. This method can be used to implement method {@link Lock#tryLock(long, TimeUnit)}. @param arg the acquire argument. This value is conveyed to {@link #tryAcquire} but is otherwise uninterpreted and can represent anything you like. @param nanosTimeout the maximum number of nanoseconds to wait @return {@code true} if acquired; {@code false} if timed out @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/release/int, Releases in exclusive mode. Implemented by unblocking one or more threads if {@link #tryRelease} returns true. This method can be used to implement method {@link Lock#unlock}. @param arg the release argument. This value is conveyed to {@link #tryRelease} but is otherwise uninterpreted and can represent anything you like. @return the value returned from {@link #tryRelease}
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/acquireShared/int, Acquires in shared mode, ignoring interrupts. Implemented by first invoking at least once {@link #tryAcquireShared}, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success. @param arg the acquire argument. This value is conveyed to {@link #tryAcquireShared} but is otherwise uninterpreted and can represent anything you like.
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/acquireSharedInterruptibly/int, Acquires in shared mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquireShared}, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success or the thread is interrupted. @param arg the acquire argument. This value is conveyed to {@link #tryAcquireShared} but is otherwise uninterpreted and can represent anything you like. @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/tryAcquireSharedNanos/int;long, Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquireShared}, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success or the thread is interrupted or the timeout elapses. @param arg the acquire argument. This value is conveyed to {@link #tryAcquireShared} but is otherwise uninterpreted and can represent anything you like. @param nanosTimeout the maximum number of nanoseconds to wait @return {@code true} if acquired; {@code false} if timed out @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/releaseShared/int, Releases in shared mode. Implemented by unblocking one or more threads if {@link #tryReleaseShared} returns true. @param arg the release argument. This value is conveyed to {@link #tryReleaseShared} but is otherwise uninterpreted and can represent anything you like. @return the value returned from {@link #tryReleaseShared}
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/hasQueuedThreads/, Queries whether any threads are waiting to acquire. Note that because cancellations due to interrupts and timeouts may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire. In this implementation, this operation returns in constant time. @return {@code true} if there may be other threads waiting to acquire
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/hasContended/, Queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked. In this implementation, this operation returns in constant time. @return {@code true} if there has ever been contention
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getFirstQueuedThread/, Returns the first (longest-waiting) thread in the queue, or {@code null} if no threads are currently queued. In this implementation, this operation normally returns in constant time, but may iterate upon contention if other threads are concurrently modifying the queue. @return the first (longest-waiting) thread in the queue, or {@code null} if no threads are currently queued
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/isQueued/Thread, Returns true if the given thread is currently queued. This implementation traverses the queue to determine presence of the given thread. @param thread the thread @return {@code true} if the given thread is on the queue @throws NullPointerException if the thread is null
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getQueueLength/, Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control. @return the estimated number of threads waiting to acquire
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getExclusiveQueuedThreads/, Returns a collection containing threads that may be waiting to acquire in exclusive mode. This has the same properties as {@link #getQueuedThreads} except that it only returns those threads waiting due to an exclusive acquire. @return the collection of threads
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getSharedQueuedThreads/, Returns a collection containing threads that may be waiting to acquire in shared mode. This has the same properties as {@link #getQueuedThreads} except that it only returns those threads waiting due to a shared acquire. @return the collection of threads
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/toString/, Returns a string identifying this synchronizer, as well as its state. The state, in brackets, includes the String {@code State =} followed by the current value of {@link #getState}, and either {@code nonempty} or {@code empty} depending on whether the queue is empty. @return a string identifying this synchronizer, as well as its state
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/owns/ConditionObject, Queries whether the given ConditionObject uses this synchronizer as its lock. @param condition the condition @return true if owned @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/hasWaiters/ConditionObject, Queries whether any threads are waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state. @param condition the condition @return true if there are any waiting threads @throws IllegalMonitorStateException if exclusive synchronization is not held @throws IllegalArgumentException if the given condition is not associated with this synchronizer @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getWaitQueueLength/ConditionObject, Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control. @param condition the condition @return the estimated number of waiting threads @throws IllegalMonitorStateException if exclusive synchronization is not held @throws IllegalArgumentException if the given condition is not associated with this synchronizer @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/AbstractQueuedSynchronizer/, Creates a new AbstractQueuedSynchronizer instance with initial synchronization state of zero.
class,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject, Condition implementation for a {@link AbstractQueuedSynchronizer} serving as the basis of a {@link Lock} implementation. Method documentation for this class describes mechanics, not behavioral specifications from the point of view of Lock and Condition users. Exported versions of this class will in general need to be accompanied by documentation describing condition semantics that rely on those of the associated AbstractQueuedSynchronizer. This class is Serializable, but all fields are transient, so deserialized conditions have no waiters.
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/signal/, Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock. @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/signalAll/, Moves all threads from the wait queue for this condition to the wait queue for the owning lock. @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/awaitUninterruptibly/, Implements uninterruptible condition wait. Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. 
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/await/, Implements interruptible condition wait. If current thread is interrupted, throw InterruptedException Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled or interrupted Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. If interrupted while blocked in step 4, throw exception 
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/awaitNanos/long, Implements timed condition wait. If current thread is interrupted, throw InterruptedException Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException 
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/awaitUntil/Date, Implements absolute timed condition wait. If current thread is interrupted, throw InterruptedException Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException If timed out while blocked in step 4, return false, else true 
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/await/long;TimeUnit, Implements timed condition wait. If current thread is interrupted, throw InterruptedException Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException If timed out while blocked in step 4, return false, else true 
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/hasWaiters/, Queries whether any threads are waiting on this condition. Implements {@link AbstractQueuedSynchronizer#hasWaiters}. @return {@code true} if there are any waiting threads @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/getWaitQueueLength/, Returns an estimate of the number of threads waiting on this condition. Implements {@link AbstractQueuedSynchronizer#getWaitQueueLength}. @return the estimated number of waiting threads @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/getWaitingThreads/, Returns a collection containing those threads that may be waiting on this Condition. Implements {@link AbstractQueuedSynchronizer#getWaitingThreads}. @return the collection of threads @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/AbstractQueuedSynchronizer/ConditionObject/, Creates a new ConditionObject instance.
class,java/util/concurrent/locks/AbstractQueuedLongSynchronizer, A version of {@link AbstractQueuedSynchronizer} in which synchronization state is maintained as a long. This class has exactly the same structure, properties, and methods as AbstractQueuedSynchronizer with the exception that all state-related parameters and results are defined as long rather than int. This class may be useful when creating synchronizers such as multilevel locks and barriers that require 64 bits of state. See {@link AbstractQueuedSynchronizer} for usage notes and examples. @since 1.6 @author Doug Lea
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getState/, Returns the current value of synchronization state. This operation has memory semantics of a volatile read. @return current state value
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/setState/long, Sets the value of synchronization state. This operation has memory semantics of a volatile write. @param newState the new state value
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/compareAndSetState/long;long, Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write. @param expect the expected value @param update the new value @return true if successful. False return indicates that the actual value was not equal to the expected value.
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/isHeldExclusively/, Returns {@code true} if synchronization is held exclusively with respect to the current (calling) thread. This method is invoked upon each call to a non-waiting {@link ConditionObject} method. (Waiting methods instead invoke {@link #release}.) The default implementation throws {@link UnsupportedOperationException}. This method is invoked internally only within {@link ConditionObject} methods, so need not be defined if conditions are not used. @return {@code true} if synchronization is held exclusively; {@code false} otherwise @throws UnsupportedOperationException if conditions are not supported
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/acquire/long, Acquires in exclusive mode, ignoring interrupts. Implemented by invoking at least once {@link #tryAcquire}, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success. This method can be used to implement method {@link Lock#lock}. @param arg the acquire argument. This value is conveyed to {@link #tryAcquire} but is otherwise uninterpreted and can represent anything you like.
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/acquireInterruptibly/long, Acquires in exclusive mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquire}, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success or the thread is interrupted. This method can be used to implement method {@link Lock#lockInterruptibly}. @param arg the acquire argument. This value is conveyed to {@link #tryAcquire} but is otherwise uninterpreted and can represent anything you like. @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/tryAcquireNanos/long;long, Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquire}, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success or the thread is interrupted or the timeout elapses. This method can be used to implement method {@link Lock#tryLock(long, TimeUnit)}. @param arg the acquire argument. This value is conveyed to {@link #tryAcquire} but is otherwise uninterpreted and can represent anything you like. @param nanosTimeout the maximum number of nanoseconds to wait @return {@code true} if acquired; {@code false} if timed out @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/release/long, Releases in exclusive mode. Implemented by unblocking one or more threads if {@link #tryRelease} returns true. This method can be used to implement method {@link Lock#unlock}. @param arg the release argument. This value is conveyed to {@link #tryRelease} but is otherwise uninterpreted and can represent anything you like. @return the value returned from {@link #tryRelease}
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/acquireShared/long, Acquires in shared mode, ignoring interrupts. Implemented by first invoking at least once {@link #tryAcquireShared}, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success. @param arg the acquire argument. This value is conveyed to {@link #tryAcquireShared} but is otherwise uninterpreted and can represent anything you like.
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/acquireSharedInterruptibly/long, Acquires in shared mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquireShared}, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success or the thread is interrupted. @param arg the acquire argument. This value is conveyed to {@link #tryAcquireShared} but is otherwise uninterpreted and can represent anything you like. @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/tryAcquireSharedNanos/long;long, Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquireShared}, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquireShared} until success or the thread is interrupted or the timeout elapses. @param arg the acquire argument. This value is conveyed to {@link #tryAcquireShared} but is otherwise uninterpreted and can represent anything you like. @param nanosTimeout the maximum number of nanoseconds to wait @return {@code true} if acquired; {@code false} if timed out @throws InterruptedException if the current thread is interrupted
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/releaseShared/long, Releases in shared mode. Implemented by unblocking one or more threads if {@link #tryReleaseShared} returns true. @param arg the release argument. This value is conveyed to {@link #tryReleaseShared} but is otherwise uninterpreted and can represent anything you like. @return the value returned from {@link #tryReleaseShared}
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/hasQueuedThreads/, Queries whether any threads are waiting to acquire. Note that because cancellations due to interrupts and timeouts may occur at any time, a {@code true} return does not guarantee that any other thread will ever acquire. In this implementation, this operation returns in constant time. @return {@code true} if there may be other threads waiting to acquire
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/hasContended/, Queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked. In this implementation, this operation returns in constant time. @return {@code true} if there has ever been contention
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getFirstQueuedThread/, Returns the first (longest-waiting) thread in the queue, or {@code null} if no threads are currently queued. In this implementation, this operation normally returns in constant time, but may iterate upon contention if other threads are concurrently modifying the queue. @return the first (longest-waiting) thread in the queue, or {@code null} if no threads are currently queued
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/isQueued/Thread, Returns true if the given thread is currently queued. This implementation traverses the queue to determine presence of the given thread. @param thread the thread @return {@code true} if the given thread is on the queue @throws NullPointerException if the thread is null
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getQueueLength/, Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control. @return the estimated number of threads waiting to acquire
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getExclusiveQueuedThreads/, Returns a collection containing threads that may be waiting to acquire in exclusive mode. This has the same properties as {@link #getQueuedThreads} except that it only returns those threads waiting due to an exclusive acquire. @return the collection of threads
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getSharedQueuedThreads/, Returns a collection containing threads that may be waiting to acquire in shared mode. This has the same properties as {@link #getQueuedThreads} except that it only returns those threads waiting due to a shared acquire. @return the collection of threads
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/toString/, Returns a string identifying this synchronizer, as well as its state. The state, in brackets, includes the String {@code State =} followed by the current value of {@link #getState}, and either {@code nonempty} or {@code empty} depending on whether the queue is empty. @return a string identifying this synchronizer, as well as its state
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/owns/ConditionObject, Queries whether the given ConditionObject uses this synchronizer as its lock. @param condition the condition @return true if owned @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/hasWaiters/ConditionObject, Queries whether any threads are waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state. @param condition the condition @return true if there are any waiting threads @throws IllegalMonitorStateException if exclusive synchronization is not held @throws IllegalArgumentException if the given condition is not associated with this synchronizer @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getWaitQueueLength/ConditionObject, Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control. @param condition the condition @return the estimated number of waiting threads @throws IllegalMonitorStateException if exclusive synchronization is not held @throws IllegalArgumentException if the given condition is not associated with this synchronizer @throws NullPointerException if the condition is null
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/AbstractQueuedLongSynchronizer/, Creates a new AbstractQueuedLongSynchronizer instance with initial synchronization state of zero.
class,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject, Condition implementation for a {@link AbstractQueuedLongSynchronizer} serving as the basis of a {@link Lock} implementation. Method documentation for this class describes mechanics, not behavioral specifications from the point of view of Lock and Condition users. Exported versions of this class will in general need to be accompanied by documentation describing condition semantics that rely on those of the associated AbstractQueuedLongSynchronizer. This class is Serializable, but all fields are transient, so deserialized conditions have no waiters. @since 1.6
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/signal/, Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock. @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/signalAll/, Moves all threads from the wait queue for this condition to the wait queue for the owning lock. @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/awaitUninterruptibly/, Implements uninterruptible condition wait. Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. 
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/await/, Implements interruptible condition wait. If current thread is interrupted, throw InterruptedException Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled or interrupted Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. If interrupted while blocked in step 4, throw exception 
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/awaitNanos/long, Implements timed condition wait. If current thread is interrupted, throw InterruptedException Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException 
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/awaitUntil/Date, Implements absolute timed condition wait. If current thread is interrupted, throw InterruptedException Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException If timed out while blocked in step 4, return false, else true 
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/await/long;TimeUnit, Implements timed condition wait. If current thread is interrupted, throw InterruptedException Save lock state returned by {@link #getState} Invoke {@link #release} with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out Reacquire by invoking specialized version of {@link #acquire} with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException If timed out while blocked in step 4, return false, else true 
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/hasWaiters/, Queries whether any threads are waiting on this condition. Implements {@link AbstractQueuedLongSynchronizer#hasWaiters}. @return {@code true} if there are any waiting threads @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/getWaitQueueLength/, Returns an estimate of the number of threads waiting on this condition. Implements {@link AbstractQueuedLongSynchronizer#getWaitQueueLength}. @return the estimated number of waiting threads @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/getWaitingThreads/, Returns a collection containing those threads that may be waiting on this Condition. Implements {@link AbstractQueuedLongSynchronizer#getWaitingThreads}. @return the collection of threads @throws IllegalMonitorStateException if {@link #isHeldExclusively} returns {@code false}
method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/AbstractQueuedLongSynchronizer/ConditionObject/, Creates a new ConditionObject instance.
class,java/util/concurrent/locks/AbstractOwnableSynchronizer, A synchronizer that may be exclusively owned by a thread. This class provides a basis for creating locks and related synchronizers that may entail a notion of ownership. The AbstractOwnableSynchronizer class itself does not manage or use this information. However, subclasses and tools may use appropriately maintained values to help control and monitor access and provide diagnostics. @since 1.6 @author Doug Lea
method,java/util/concurrent/locks/AbstractOwnableSynchronizer/setExclusiveOwnerThread/Thread, Sets the thread that currently owns exclusive access. A null argument indicates that no thread owns access. This method does not otherwise impose any synchronization or volatile field accesses.
method,java/util/concurrent/locks/AbstractOwnableSynchronizer/getExclusiveOwnerThread/, Returns the thread last set by setExclusiveOwnerThread, or null if never set. This method does not otherwise impose any synchronization or volatile field accesses. @return the owner thread
method,java/util/concurrent/locks/AbstractOwnableSynchronizer/AbstractOwnableSynchronizer/, Empty constructor for use by subclasses.
method,java/util/spi/TimeZoneNameProvider/TimeZoneNameProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/util/spi/LocaleServiceProvider/LocaleServiceProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
method,java/util/spi/LocaleNameProvider/getDisplayLanguage/String;Locale, Returns a localized name for the given ISO 639 language code and the given locale that is appropriate for display to the user. For example, if languageCode is fr and locale is en_US, getDisplayLanguage() will return French; if languageCode is en and locale is fr_FR, getDisplayLanguage() will return anglais. If the name returned cannot be localized according to locale, (say, the provider does not have a Japanese name for Croatian), this method returns null. @param languageCode the ISO 639 language code string in the form of two lower-case letters between 'a' (U+0061) and 'z' (U+007A) @param locale the desired locale @return the name of the given language code for the specified locale, or null if it's not available. @exception NullPointerException if languageCode or locale is null @exception IllegalArgumentException if languageCode is not in the form of two lower-case letters, or locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @see java.util.Locale#getDisplayLanguage(java.util.Locale)
method,java/util/spi/LocaleNameProvider/getDisplayCountry/String;Locale, Returns a localized name for the given ISO 3166 country code and the given locale that is appropriate for display to the user. For example, if countryCode is FR and locale is en_US, getDisplayCountry() will return France; if countryCode is US and locale is fr_FR, getDisplayCountry() will return Etats-Unis. If the name returned cannot be localized according to locale, (say, the provider does not have a Japanese name for Croatia), this method returns null. @param countryCode the ISO 3166 country code string in the form of two upper-case letters between 'A' (U+0041) and 'Z' (U+005A) @param locale the desired locale @return the name of the given country code for the specified locale, or null if it's not available. @exception NullPointerException if countryCode or locale is null @exception IllegalArgumentException if countryCode is not in the form of two upper-case letters, or locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @see java.util.Locale#getDisplayCountry(java.util.Locale)
method,java/util/spi/LocaleNameProvider/getDisplayVariant/String;Locale, Returns a localized name for the given variant code and the given locale that is appropriate for display to the user. If the name returned cannot be localized according to locale, this method returns null. @param variant the variant string @param locale the desired locale @return the name of the given variant string for the specified locale, or null if it's not available. @exception NullPointerException if variant or locale is null @exception IllegalArgumentException if locale isn't one of the locales returned from {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()}. @see java.util.Locale#getDisplayVariant(java.util.Locale)
method,java/util/spi/LocaleNameProvider/LocaleNameProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
class,java/util/spi/CurrencyNameProvider, An abstract class for service providers that provide localized currency symbols for the {@link java.util.Currency Currency} class. Note that currency symbols are considered names when determining behaviors described in the {@link java.util.spi.LocaleServiceProvider LocaleServiceProvider} specification. @since 1.6 @version @(#)CurrencyNameProvider.java	1.3 10/03/23
method,java/util/spi/CurrencyNameProvider/CurrencyNameProvider/, Sole constructor. (For invocation by subclass constructors, typically implicit.)
class,java/util/regex/PatternSyntaxException, Unchecked exception thrown to indicate a syntax error in a regular-expression pattern. @author unascribed @version 1.17, 10/03/23 @since 1.4 @spec JSR-51
method,java/util/regex/PatternSyntaxException/getIndex/, Retrieves the error index. @return The approximate index in the pattern of the error, or -1 if the index is not known
method,java/util/regex/PatternSyntaxException/getDescription/, Retrieves the description of the error. @return The description of the error
method,java/util/regex/PatternSyntaxException/getMessage/, Returns a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern. @return The full detail message
method,java/util/regex/PatternSyntaxException/PatternSyntaxException/String;String;int, Constructs a new instance of this class. @param desc A description of the error @param regex The erroneous pattern @param index The approximate index in the pattern of the error, or -1 if the index is not known
method,java/util/regex/Pattern/compile/String;int, Compiles the given regular expression into a pattern with the given flags. @param regex The expression to be compiled @param flags Match flags, a bit mask that may include {@link #CASE_INSENSITIVE}, {@link #MULTILINE}, {@link #DOTALL}, {@link #UNICODE_CASE}, {@link #CANON_EQ}, {@link #UNIX_LINES}, {@link #LITERAL} and {@link #COMMENTS} @throws IllegalArgumentException If bit values other than those corresponding to the defined match flags are set in flags @throws PatternSyntaxException If the expression's syntax is invalid
method,java/util/regex/Pattern/split/CharSequence, Splits the given input sequence around matches of this pattern. This method works as if by invoking the two-argument {@link #split(java.lang.CharSequence, int) split} method with the given input sequence and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The input boo:and:foo, for example, yields the following results with these expressions: Regex&nbsp;&nbsp;&nbsp;&nbsp; Result : { boo, and, foo } o { b, , :and:f } @param input The character sequence to be split @return The array of strings computed by splitting the input around matches of this pattern
field,java/util/regex/Pattern/UNIX_LINES, Enables Unix lines mode. In this mode, only the '' line terminator is recognized in the behavior of ., ^, and $. Unix lines mode can also be enabled via the embedded flag expression&nbsp;(?d).
field,java/util/regex/Pattern/MULTILINE, Enables multiline mode. In multiline mode the expressions ^ and $ match just after or just before, respectively, a line terminator or the end of the input sequence. By default these expressions only match at the beginning and the end of the entire input sequence. Multiline mode can also be enabled via the embedded flag expression&nbsp;(?m). 
field,java/util/regex/Pattern/LITERAL, Enables literal parsing of the pattern. When this flag is specified then the input string that specifies the pattern is treated as a sequence of literal characters. Metacharacters or escape sequences in the input sequence will be given no special meaning. The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on matching when used in conjunction with this flag. The other flags become superfluous. There is no embedded flag character for enabling literal parsing. @since 1.5
field,java/util/regex/Pattern/DOTALL, Enables dotall mode. In dotall mode, the expression . matches any character, including a line terminator. By default this expression does not match line terminators. Dotall mode can also be enabled via the embedded flag expression&nbsp;(?s). (The s is a mnemonic for single-line mode, which is what this is called in Perl.) 
class,java/util/regex/Matcher, An engine that performs match operations on a {@link java.lang.CharSequence character sequence} by interpreting a {@link Pattern}. A matcher is created from a pattern by invoking the pattern's {@link Pattern#matcher matcher} method. Once created, a matcher can be used to perform three different kinds of match operations: The {@link #matches matches} method attempts to match the entire input sequence against the pattern. The {@link #lookingAt lookingAt} method attempts to match the input sequence, starting at the beginning, against the pattern. The {@link #find find} method scans the input sequence looking for the next subsequence that matches the pattern. Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher. A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher's input. The region can be modified via the{@link #region region} method and queried via the {@link #regionStart regionStart} and {@link #regionEnd regionEnd} methods. The way that the region boundaries interact with some pattern constructs can be changed. See {@link #useAnchoringBounds useAnchoringBounds} and {@link #useTransparentBounds useTransparentBounds} for more details. This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The {@link #appendReplacement appendReplacement} and {@link #appendTail appendTail} methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient {@link #replaceAll replaceAll} method can be used to create a string in which every matching subsequence in the input sequence is replaced. The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form. The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an {@link IllegalStateException} to be thrown. The explicit state of a matcher is recomputed by every match operation. The implicit state of a matcher includes the input character sequence as well as the append position, which is initially zero and is updated by the {@link #appendReplacement appendReplacement} method. A matcher may be reset explicitly by invoking its {@link #reset()} method or, if a new input sequence is desired, its {@link #reset(java.lang.CharSequence) reset(CharSequence)} method. Resetting a matcher discards its explicit state information and sets the append position to zero. Instances of this class are not safe for use by multiple concurrent threads. @author Mike McCloskey @author	Mark Reinhold @author	JSR-51 Expert Group @version 	1.65, 10/03/23 @since	1.4 @spec JSR-51
method,java/util/regex/Matcher/end/, Returns the offset after the last character matched. @return The offset after the last character matched @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed
method,java/util/regex/Matcher/end/int, Returns the offset after the last character of the subsequence captured by the given group during the previous match operation. Capturing groups are indexed from left to right, starting at one. Group zero denotes the entire pattern, so the expression m.end(0) is equivalent to m.end(). @param group The index of a capturing group in this matcher's pattern @return The offset after the last character captured by the group, or -1 if the match was successful but the group itself did not match anything @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed @throws IndexOutOfBoundsException If there is no capturing group in the pattern with the given index
method,java/util/regex/Matcher/group/, Returns the input subsequence matched by the previous match. For a matcher m with input sequence s, the expressions m.group() and s.substring(m.start(),&nbsp;m.end()) are equivalent. Note that some patterns, for example a*, match the empty string. This method will return the empty string when the pattern successfully matches the empty string in the input. @return The (possibly empty) subsequence matched by the previous match, in string form @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed
method,java/util/regex/Matcher/group/int, Returns the input subsequence captured by the given group during the previous match operation. For a matcher m, input sequence s, and group index g, the expressions m.group(g) and s.substring(m.start(g),&nbsp;m.end(g)) are equivalent. Capturing groups are indexed from left to right, starting at one. Group zero denotes the entire pattern, so the expression m.group(0) is equivalent to m.group(). If the match was successful but the group specified failed to match any part of the input sequence, then null is returned. Note that some groups, for example (a*), match the empty string. This method will return the empty string when such a group successfully matches the empty string in the input. @param group The index of a capturing group in this matcher's pattern @return The (possibly empty) subsequence captured by the group during the previous match, or null if the group failed to match part of the input @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed @throws IndexOutOfBoundsException If there is no capturing group in the pattern with the given index
method,java/util/regex/Matcher/matches/, Attempts to match the entire region against the pattern. If the match succeeds then more information can be obtained via the start, end, and group methods. @return true if, and only if, the entire region sequence matches this matcher's pattern
method,java/util/regex/Matcher/find/, Attempts to find the next subsequence of the input sequence that matches the pattern. This method starts at the beginning of this matcher's region, or, if a previous invocation of the method was successful and the matcher has not since been reset, at the first character not matched by the previous match. If the match succeeds then more information can be obtained via the start, end, and group methods. @return true if, and only if, a subsequence of the input sequence matches this matcher's pattern
method,java/util/regex/Matcher/find/int, Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index. If the match succeeds then more information can be obtained via the start, end, and group methods, and subsequent invocations of the {@link #find()} method will start at the first character not matched by this match. @throws IndexOutOfBoundsException If start is less than zero or if start is greater than the length of the input sequence. @return true if, and only if, a subsequence of the input sequence starting at the given index matches this matcher's pattern
method,java/util/regex/Matcher/appendReplacement/StringBuffer;String, Implements a non-terminal append-and-replace step. This method performs the following actions: It reads characters from the input sequence, starting at the append position, and appends them to the given string buffer. It stops after reading the last character preceding the previous match, that is, the character at index {@link #start()}&nbsp;-&nbsp;1. It appends the given replacement string to the string buffer. It sets the append position of this matcher to the index of the last character matched, plus one, that is, to {@link #end()}. The replacement string may contain references to subsequences captured during the previous match: Each occurrence of $g will be replaced by the result of evaluating {@link #group(int) group}(g). The first number after the $ is always treated as part of the group reference. Subsequent numbers are incorporated into g if they would form a legal group reference. Only the numerals '0' through '9' are considered as potential components of the group reference. If the second group matched the string foo, for example, then passing the replacement string $2bar would cause foobar to be appended to the string buffer. A dollar sign ($) may be included as a literal in the replacement string by preceding it with a backslash (\$). Note that backslashes (\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string. Dollar signs may be treated as references to captured subsequences as described above, and backslashes are used to escape literal characters in the replacement string. This method is intended to be used in a loop together with the {@link #appendTail appendTail} and {@link #find find} methods. The following code, for example, writes one dog two dogs in the yard to the standard-output stream: Pattern p = Pattern.compile(cat); Matcher m = p.matcher(one cat two cats in the yard); StringBuffer sb = new StringBuffer(); while (m.find()) { m.appendReplacement(sb, dog); } m.appendTail(sb); System.out.println(sb.toString()); @param sb The target string buffer @param replacement The replacement string @return This matcher @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed @throws IndexOutOfBoundsException If the replacement string refers to a capturing group that does not exist in the pattern
method,java/util/regex/Matcher/appendTail/StringBuffer, Implements a terminal append-and-replace step. This method reads characters from the input sequence, starting at the append position, and appends them to the given string buffer. It is intended to be invoked after one or more invocations of the {@link #appendReplacement appendReplacement} method in order to copy the remainder of the input sequence. @param sb The target string buffer @return The target string buffer
method,java/util/regex/Matcher/region/int;int, Sets the limits of this matcher's region. The region is the part of the input sequence that will be searched to find a match. Invoking this method resets the matcher, and then sets the region to start at the index specified by the start parameter and end at the index specified by the end parameter. Depending on the transparency and anchoring being used (see {@link #useTransparentBounds useTransparentBounds} and {@link #useAnchoringBounds useAnchoringBounds}), certain constructs such as anchors may behave differently at or around the boundaries of the region. @param start The index to start searching at (inclusive) @param end The index to end searching at (exclusive) @throws IndexOutOfBoundsException If start or end is less than zero, if start is greater than the length of the input sequence, if end is greater than the length of the input sequence, or if start is greater than end. @return this matcher @since 1.5
method,java/util/regex/Matcher/useTransparentBounds/boolean, Sets the transparency of region bounds for this matcher. Invoking this method with an argument of true will set this matcher to use transparent bounds. If the boolean argument is false, then opaque bounds will be used. Using transparent bounds, the boundaries of this matcher's region are transparent to lookahead, lookbehind, and boundary matching constructs. Those constructs can see beyond the boundaries of the region to see if a match is appropriate. Using opaque bounds, the boundaries of this matcher's region are opaque to lookahead, lookbehind, and boundary matching constructs that may try to see beyond them. Those constructs cannot look past the boundaries so they will fail to match anything outside of the region. By default, a matcher uses opaque bounds. @param b a boolean indicating whether to use opaque or transparent regions @return this matcher @see java.util.regex.Matcher#hasTransparentBounds @since 1.5
method,java/util/regex/Matcher/useAnchoringBounds/boolean, Sets the anchoring of region bounds for this matcher. Invoking this method with an argument of true will set this matcher to use anchoring bounds. If the boolean argument is false, then non-anchoring bounds will be used. Using anchoring bounds, the boundaries of this matcher's region match anchors such as ^ and $. Without anchoring bounds, the boundaries of this matcher's region will not match anchors such as ^ and $. By default, a matcher uses anchoring region boundaries. @param b a boolean indicating whether or not to use anchoring bounds. @return this matcher @see java.util.regex.Matcher#hasAnchoringBounds @since 1.5
method,java/util/regex/Matcher/toString/, Returns the string representation of this matcher. The string representation of a Matcher contains information that may be useful for debugging. The exact format is unspecified. @return The string representation of this matcher @since 1.5
method,java/util/regex/Matcher/requireEnd/, Returns true if more input could change a positive match into a negative one. If this method returns true, and a match was found, then more input could cause the match to be lost. If this method returns false and a match was found, then more input might change the match but the match won't be lost. If a match was not found, then requireEnd has no meaning. @return true iff more input could change a positive match into a negative one. @since 1.5
method,java/util/regex/MatchResult/end/, Returns the offset after the last character matched. @return @return The offset after the last character matched @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed
method,java/util/regex/MatchResult/end/int, Returns the offset after the last character of the subsequence captured by the given group during this match. Capturing groups are indexed from left to right, starting at one. Group zero denotes the entire pattern, so the expression m.end(0) is equivalent to m.end(). @param group The index of a capturing group in this matcher's pattern @return The offset after the last character captured by the group, or -1 if the match was successful but the group itself did not match anything @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed @throws IndexOutOfBoundsException If there is no capturing group in the pattern with the given index
method,java/util/regex/MatchResult/group/, Returns the input subsequence matched by the previous match. For a matcher m with input sequence s, the expressions m.group() and s.substring(m.start(),&nbsp;m.end()) are equivalent. Note that some patterns, for example a*, match the empty string. This method will return the empty string when the pattern successfully matches the empty string in the input. @return The (possibly empty) subsequence matched by the previous match, in string form @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed
method,java/util/regex/MatchResult/group/int, Returns the input subsequence captured by the given group during the previous match operation. For a matcher m, input sequence s, and group index g, the expressions m.group(g) and s.substring(m.start(g),&nbsp;m.end(g)) are equivalent. Capturing groups are indexed from left to right, starting at one. Group zero denotes the entire pattern, so the expression m.group(0) is equivalent to m.group(). If the match was successful but the group specified failed to match any part of the input sequence, then null is returned. Note that some groups, for example (a*), match the empty string. This method will return the empty string when such a group successfully matches the empty string in the input. @param group The index of a capturing group in this matcher's pattern @return The (possibly empty) subsequence captured by the group during the previous match, or null if the group failed to match part of the input @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed @throws IndexOutOfBoundsException If there is no capturing group in the pattern with the given index
method,java/util/jar/Pack200/Packer/properties/, Get the set of this engine's properties. This set is a live view, so that changing its contents immediately affects the Packer engine, and changes from the engine (such as progress indications) are immediately visible in the map. The property map may contain pre-defined implementation specific and default properties. Users are encouraged to read the information and fully understand the implications, before modifying pre-existing properties. Implementation specific properties are prefixed with a package name associated with the implementor, beginning with com. or a similar prefix. All property names beginning with pack. and unpack. are reserved for use by this API. Unknown properties may be ignored or rejected with an unspecified error, and invalid entries may cause an unspecified error to be thrown. The returned map implements all optional {@link SortedMap} operations @return A sorted association of property key strings to property values.
method,java/util/jar/Pack200/Packer/addPropertyChangeListener/PropertyChangeListener, Registers a listener for PropertyChange events on the properties map. This is typically used by applications to update a progress bar. @see #properties @see #PROGRESS @param listener An object to be invoked when a property is changed.
field,java/util/jar/Pack200/Packer/SEGMENT_LIMIT, This property is a numeral giving the estimated target size N (in bytes) of each archive segment. If a single input file requires more than N bytes, it will be given its own archive segment. As a special case, a value of -1 will produce a single large segment with all input files, while a value of 0 will produce one segment for each class. Larger archive segments result in less fragmentation and better compression, but processing them requires more memory. The size of each segment is estimated by counting the size of each input file to be transmitted in the segment, along with the size of its name and other transmitted properties. The default is 1000000 (a million bytes). This allows input JAR files of moderate size to be transmitted in one segment. It also puts a limit on memory requirements for packers and unpackers. A 10Mb JAR packed without this limit will typically pack about 10% smaller, but the packer may require a larger Java heap (about ten times the segment limit).
field,java/util/jar/Pack200/Packer/KEEP_FILE_ORDER, If this property is set to {@link #TRUE}, the packer will transmit all elements in their original order within the source archive. If it is set to {@link #FALSE}, the packer may reorder elements, and also remove JAR directory entries, which carry no useful information for Java applications. (Typically this enables better compression.) The default is {@link #TRUE}, which preserves the input information, but may cause the transmitted archive to be larger than necessary.
field,java/util/jar/Pack200/Packer/DEFLATE_HINT, If this property is set to {@link #TRUE} or {@link #FALSE}, the packer will set the deflation hint accordingly in the output archive, and will not transmit the individual deflation hints of archive elements. If this property is set to the special string {@link #KEEP}, the packer will attempt to determine an independent deflation hint for each available element of the input archive, and transmit this hint separately. The default is {@link #KEEP}, which preserves the input information, but may cause the transmitted archive to be larger than necessary. It is up to the unpacker implementation to take action upon the hint to suitably compress the elements of the resulting unpacked jar. The deflation hint of a ZIP or JAR element indicates whether the element was deflated or stored directly.
field,java/util/jar/Pack200/Packer/MODIFICATION_TIME, If this property is set to the special string {@link #LATEST}, the packer will attempt to determine the latest modification time, among all the available entries in the original archive or the latest modification time of all the available entries in each segment. This single value will be transmitted as part of the segment and applied to all the entries in each segment, {@link #SEGMENT_LIMIT}. This can marginally decrease the transmitted size of the archive, at the expense of setting all installed files to a single date. If this property is set to the special string {@link #KEEP}, the packer transmits a separate modification time for each input element. The default is {@link #KEEP}, which preserves the input information, but may cause the transmitted archive to be larger than necessary. It is up to the unpacker implementation to take action to suitably set the modification time of each element of its output file. @see #SEGMENT_LIMIT
field,java/util/jar/Pack200/Packer/PASS_FILE_PFX, Indicates that a file should be passed through bytewise, with no compression. Multiple files may be specified by specifying additional properties with distinct strings appended, to make a family of properties with the common prefix. There is no pathname transformation, except that the system file separator is replaced by the JAR file separator '/'. The resulting file names must match exactly as strings with their occurrences in the JAR file. If a property value is a directory name, all files under that directory will be passed also. Examples: Map p = packer.properties(); p.put(PASS_FILE_PFX+0, mutants/Rogue.class); p.put(PASS_FILE_PFX+1, mutants/Wolverine.class); p.put(PASS_FILE_PFX+2, mutants/Storm.class); # Pass all files in an entire directory hierarchy: p.put(PASS_FILE_PFX+3, police/); .
field,java/util/jar/Pack200/Packer/UNKNOWN_ATTRIBUTE, Indicates the action to take when a class-file containing an unknown attribute is encountered. Possible values are the strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}. The string {@link #ERROR} means that the pack operation as a whole will fail, with an exception of type IOException. The string {@link #STRIP} means that the attribute will be dropped. The string {@link #PASS} means that the whole class-file will be passed through (as if it were a resource file) without compression, with a suitable warning. This is the default value for this property. Examples: Map p = pack200.getProperties(); p.put(UNKNOWN_ATTRIBUTE, ERROR); p.put(UNKNOWN_ATTRIBUTE, STRIP); p.put(UNKNOWN_ATTRIBUTE, PASS); 
field,java/util/jar/Pack200/Packer/CLASS_ATTRIBUTE_PFX, When concatenated with a class attribute name, indicates the format of that attribute, using the layout language specified in the JSR 200 specification. For example, the effect of this option is built in: pack.class.attribute.SourceFile=RUH. The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS} are also allowed, with the same meaning as {@link #UNKNOWN_ATTRIBUTE}. This provides a way for users to request that specific attributes be refused, stripped, or passed bitwise (with no class compression). Code like this might be used to support attributes for JCOV: Map p = packer.properties(); p.put(CODE_ATTRIBUTE_PFX+CoverageTable, NH[PHHII]); p.put(CODE_ATTRIBUTE_PFX+CharacterRangeTable, NH[PHPOHIIH]); p.put(CLASS_ATTRIBUTE_PFX+SourceID, RUH); p.put(CLASS_ATTRIBUTE_PFX+CompilationID, RUH); Code like this might be used to strip debugging attributes: Map p = packer.properties(); p.put(CODE_ATTRIBUTE_PFX+LineNumberTable, STRIP); p.put(CODE_ATTRIBUTE_PFX+LocalVariableTable, STRIP); p.put(CLASS_ATTRIBUTE_PFX+SourceFile, STRIP); 
field,java/util/jar/Pack200/Packer/FIELD_ATTRIBUTE_PFX, When concatenated with a field attribute name, indicates the format of that attribute. For example, the effect of this option is built in: pack.field.attribute.Deprecated=. The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS} are also allowed. @see #CLASS_ATTRIBUTE_PFX
field,java/util/jar/Pack200/Packer/METHOD_ATTRIBUTE_PFX, When concatenated with a method attribute name, indicates the format of that attribute. For example, the effect of this option is built in: pack.method.attribute.Exceptions=NH[RCH]. The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS} are also allowed. @see #CLASS_ATTRIBUTE_PFX
field,java/util/jar/Pack200/Packer/CODE_ATTRIBUTE_PFX, When concatenated with a code attribute name, indicates the format of that attribute. For example, the effect of this option is built in: pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]. The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS} are also allowed. @see #CLASS_ATTRIBUTE_PFX
field,java/util/jar/Pack200/Packer/ERROR,The string error, a possible value for certain properties. @see #UNKNOWN_ATTRIBUTE @see #CLASS_ATTRIBUTE_PFX @see #FIELD_ATTRIBUTE_PFX @see #METHOD_ATTRIBUTE_PFX @see #CODE_ATTRIBUTE_PFX
method,java/util/jar/Pack200/Unpacker/properties/, Get the set of this engine's properties. This set is a live view, so that changing its contents immediately affects the Packer engine, and changes from the engine (such as progress indications) are immediately visible in the map. The property map may contain pre-defined implementation specific and default properties. Users are encouraged to read the information and fully understand the implications, before modifying pre-existing properties. Implementation specific properties are prefixed with a package name associated with the implementor, beginning with com. or a similar prefix. All property names beginning with pack. and unpack. are reserved for use by this API. Unknown properties may be ignored or rejected with an unspecified error, and invalid entries may cause an unspecified error to be thrown. @return A sorted association of option key strings to option values.
method,java/util/jar/Pack200/Unpacker/addPropertyChangeListener/PropertyChangeListener, Registers a listener for PropertyChange events on the properties map. This is typically used by applications to update a progress bar. @see #properties @see #PROGRESS @param listener An object to be invoked when a property is changed.
field,java/util/jar/Pack200/Unpacker/DEFLATE_HINT, Property indicating that the unpacker should ignore all transmitted values for DEFLATE_HINT, replacing them by the given value, {@link #TRUE} or {@link #FALSE}. The default value is the special string {@link #KEEP}, which asks the unpacker to preserve all transmitted deflation hints.
method,java/util/jar/Manifest/getAttributes/String, Returns the Attributes for the specified entry name. This method is defined as: 	 return (Attributes)getEntries().get(name) Though {@code null} is a valid {@code name}, when {@code getAttributes(null)} is invoked on a {@code Manifest} obtained from a jar file, {@code null} will be returned. While jar files themselves do not allow {@code null}-named attributes, it is possible to invoke {@link #getEntries} on a {@code Manifest}, and on that result, invoke {@code put} with a null key and an arbitrary value. Subsequent invocations of {@code getAttributes(null)} will return the just-{@code put} value. Note that this method does not return the manifest's main attributes; see {@link #getMainAttributes}. @param name entry name @return the Attributes for the specified entry name
method,java/util/jar/Manifest/read/InputStream, Reads the Manifest from the specified InputStream. The entry names and attributes read will be merged in with the current manifest entries. @param is the input stream @exception IOException if an I/O error has occurred
method,java/util/jar/Manifest/Manifest/InputStream, Constructs a new Manifest from the specified input stream. @param is the input stream containing manifest data @throws IOException if an I/O error has occured
class,java/util/jar/JarOutputStream, The JarOutputStream class is used to write the contents of a JAR file to any output stream. It extends the class java.util.zip.ZipOutputStream with support for writing an optional Manifest entry. The Manifest can be used to specify meta-information about the JAR file and its entries. @author David Connelly @version 1.25, 03/23/10 @see	 Manifest @see	 java.util.zip.ZipOutputStream @since 1.2
method,java/util/jar/JarOutputStream/putNextEntry/ZipEntry, Begins writing a new JAR file entry and positions the stream to the start of the entry data. This method will also close any previous entry. The default compression method will be used if no compression method was specified for the entry. The current time will be used if the entry has no set modification time. @param ze the ZIP/JAR entry to be written @exception ZipException if a ZIP error has occurred @exception IOException if an I/O error has occurred
method,java/util/jar/JarOutputStream/JarOutputStream/OutputStream;Manifest, Creates a new JarOutputStream with the specified Manifest. The manifest is written as the first entry to the output stream. @param out the actual output stream @param man the optional Manifest @exception IOException if an I/O error has occurred
method,java/util/jar/JarOutputStream/JarOutputStream/OutputStream, Creates a new JarOutputStream with no manifest. @param out the actual output stream @exception IOException if an I/O error has occurred
class,java/util/jar/JarInputStream, The JarInputStream class is used to read the contents of a JAR file from any input stream. It extends the class java.util.zip.ZipInputStream with support for reading an optional Manifest entry. The Manifest can be used to store meta-information about the JAR file and its entries. @author David Connelly @version 1.38, 03/23/10 @see	 Manifest @see	 java.util.zip.ZipInputStream @since 1.2
method,java/util/jar/JarInputStream/getNextEntry/, Reads the next ZIP file entry and positions the stream at the beginning of the entry data. If verification has been enabled, any invalid signature detected while positioning the stream for the next entry will result in an exception. @exception ZipException if a ZIP file error has occurred @exception IOException if an I/O error has occurred @exception SecurityException if any of the jar file entries are incorrectly signed.
method,java/util/jar/JarInputStream/getNextJarEntry/, Reads the next JAR file entry and positions the stream at the beginning of the entry data. If verification has been enabled, any invalid signature detected while positioning the stream for the next entry will result in an exception. @return the next JAR file entry, or null if there are no more entries @exception ZipException if a ZIP file error has occurred @exception IOException if an I/O error has occurred @exception SecurityException if any of the jar file entries are incorrectly signed.
method,java/util/jar/JarInputStream/JarInputStream/InputStream, Creates a new JarInputStream and reads the optional manifest. If a manifest is present, also attempts to verify the signatures if the JarInputStream is signed. @param in the actual input stream @exception IOException if an I/O error has occurred
method,java/util/jar/JarInputStream/JarInputStream/InputStream;boolean, Creates a new JarInputStream and reads the optional manifest. If a manifest is present and verify is true, also attempts to verify the signatures if the JarInputStream is signed. @param in the actual input stream @param verify whether or not to verify the JarInputStream if it is signed. @exception IOException if an I/O error has occurred
method,java/util/jar/JarFile/getManifest/, Returns the jar file manifest, or null if none. @return the jar file manifest, or null if none @throws IllegalStateException may be thrown if the jar file has been closed
method,java/util/jar/JarFile/getJarEntry/String, Returns the JarEntry for the given entry name or null if not found. @param name the jar file entry name @return the JarEntry for the given entry name or null if not found. @throws IllegalStateException may be thrown if the jar file has been closed @see java.util.jar.JarEntry
method,java/util/jar/JarFile/getEntry/String, Returns the ZipEntry for the given entry name or null if not found. @param name the jar file entry name @return the ZipEntry for the given entry name or null if not found @throws IllegalStateException may be thrown if the jar file has been closed @see java.util.zip.ZipEntry
method,java/util/jar/JarFile/getInputStream/ZipEntry, Returns an input stream for reading the contents of the specified zip file entry. @param ze the zip file entry @return an input stream for reading the contents of the specified zip file entry @throws ZipException if a zip file format error has occurred @throws IOException if an I/O error has occurred @throws SecurityException if any of the jar file entries are incorrectly signed. @throws IllegalStateException may be thrown if the jar file has been closed
method,java/util/jar/JarFile/JarFile/String, Creates a new JarFile to read from the specified file name. The JarFile will be verified if it is signed. @param name the name of the jar file to be opened for reading @throws IOException if an I/O error has occurred @throws SecurityException if access to the file is denied by the SecurityManager
method,java/util/jar/JarFile/JarFile/String;boolean, Creates a new JarFile to read from the specified file name. @param name the name of the jar file to be opened for reading @param verify whether or not to verify the jar file if it is signed. @throws IOException if an I/O error has occurred @throws SecurityException if access to the file is denied by the SecurityManager 
method,java/util/jar/JarFile/JarFile/File, Creates a new JarFile to read from the specified File object. The JarFile will be verified if it is signed. @param file the jar file to be opened for reading @throws IOException if an I/O error has occurred @throws SecurityException if access to the file is denied by the SecurityManager
method,java/util/jar/JarFile/JarFile/File;boolean, Creates a new JarFile to read from the specified File object. @param file the jar file to be opened for reading @param verify whether or not to verify the jar file if it is signed. @throws IOException if an I/O error has occurred @throws SecurityException if access to the file is denied by the SecurityManager.
class,java/util/jar/JarException, Signals that an error of some sort has occurred while reading from or writing to a JAR file. @author David Connelly @version 1.14, 03/23/10 @since 1.2
method,java/util/jar/JarEntry/getCertificates/, Returns the Certificate objects for this entry, or null if none. This method can only be called once the JarEntry has been completely verified by reading from the entry input stream until the end of the stream has been reached. Otherwise, this method will return null. The returned certificate array comprises all the signer certificates that were used to verify this entry. Each signer certificate is followed by its supporting certificate chain (which may be empty). Each signer certificate and its supporting certificate chain are ordered bottom-to-top (i.e., with the signer certificate first and the (root) certificate authority last). @return the Certificate objects for this entry, or null if none.
method,java/util/jar/JarEntry/getCodeSigners/, Returns the CodeSigner objects for this entry, or null if none. This method can only be called once the JarEntry has been completely verified by reading from the entry input stream until the end of the stream has been reached. Otherwise, this method will return null. The returned array comprises all the code signers that have signed this entry. @return the CodeSigner objects for this entry, or null if none. @since 1.5
class,java/util/jar/Attributes, The Attributes class maps Manifest attribute names to associated string values. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values. @author David Connelly @version 1.57, 03/23/10 @see	 Manifest @since 1.2
class,java/util/jar/Attributes/Name, The Attributes.Name class represents an attribute name stored in this Map. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.
method,java/util/zip/ZipOutputStream/write/byte[];int;int, Writes an array of bytes to the current ZIP entry data. This method will block until all the bytes are written. @param b the data to be written @param off the start offset in the data @param len the number of bytes that are written @exception ZipException if a ZIP file error has occurred @exception IOException if an I/O error has occurred
method,java/util/zip/ZipOutputStream/finish/, Finishes writing the contents of the ZIP output stream without closing the underlying stream. Use this method when applying multiple filters in succession to the same output stream. @exception ZipException if a ZIP file error has occurred @exception IOException if an I/O exception has occurred
method,java/util/zip/ZipOutputStream/close/, Closes the ZIP output stream as well as the stream being filtered. @exception ZipException if a ZIP file error has occurred @exception IOException if an I/O error has occurred
method,java/util/zip/ZipInputStream/getNextEntry/, Reads the next ZIP file entry and positions the stream at the beginning of the entry data. @return the next ZIP file entry, or null if there are no more entries @exception ZipException if a ZIP file error has occurred @exception IOException if an I/O error has occurred
method,java/util/zip/ZipInputStream/closeEntry/, Closes the current ZIP entry and positions the stream for reading the next entry. @exception ZipException if a ZIP file error has occurred @exception IOException if an I/O error has occurred
method,java/util/zip/ZipInputStream/skip/long, Skips specified number of bytes in the current ZIP entry. @param n the number of bytes to skip @return the actual number of bytes skipped @exception ZipException if a ZIP file error has occurred @exception IOException if an I/O error has occurred @exception IllegalArgumentException if n < 0
method,java/util/zip/ZipInputStream/close/, Closes this input stream and releases any system resources associated with the stream. @exception IOException if an I/O error has occurred
method,java/util/zip/ZipFile/getInputStream/ZipEntry, Returns an input stream for reading the contents of the specified zip file entry. Closing this ZIP file will, in turn, close all input streams that have been returned by invocations of this method. @param entry the zip file entry @return the input stream for reading the contents of the specified zip file entry. @throws ZipException if a ZIP format error has occurred @throws IOException if an I/O error has occurred @throws IllegalStateException if the zip file has been closed
method,java/util/zip/ZipFile/close/, Closes the ZIP file. Closing this ZIP file will close all of the input streams previously returned by invocations of the {@link #getInputStream getInputStream} method. @throws IOException if an I/O error has occurred
method,java/util/zip/ZipFile/ZipFile/String, Opens a zip file for reading. First, if there is a security manager, its checkRead method is called with the name argument as its argument to ensure the read is allowed. @param name the name of the zip file @throws ZipException if a ZIP format error has occurred @throws IOException if an I/O error has occurred @throws SecurityException if a security manager exists and its checkRead method doesn't allow read access to the file. @see SecurityManager#checkRead(java.lang.String)
method,java/util/zip/ZipFile/ZipFile/File, Opens a ZIP file for reading given the specified File object. @param file the ZIP file to be opened for reading @throws ZipException if a ZIP error has occurred @throws IOException if an I/O error has occurred
field,java/util/zip/ZipFile/OPEN_DELETE, Mode flag to open a zip file and mark it for deletion. The file will be deleted some time between the moment that it is opened and the moment that it is closed, but its contents will remain accessible via the ZipFile object until either the close method is invoked or the virtual machine exits.
method,java/util/zip/ZipException/ZipException/, Constructs an ZipException with null as its error detail message. 
class,java/util/zip/ZipError, Signals that an unrecoverable error has occurred. @author Dave Bristor @version 1.2, 03/23/10 @since 1.6
method,java/util/zip/InflaterOutputStream/close/, Writes any remaining uncompressed data to the output stream and closes the underlying output stream. @throws IOException if an I/O error occurs
method,java/util/zip/InflaterOutputStream/flush/, Flushes this output stream, forcing any pending buffered output bytes to be written. @throws IOException if an I/O error occurs or this stream is already closed
method,java/util/zip/InflaterOutputStream/finish/, Finishes writing uncompressed data to the output stream without closing the underlying stream. Use this method when applying multiple filters in succession to the same output stream. @throws IOException if an I/O error occurs or this stream is already closed
method,java/util/zip/InflaterInputStream/read/, Reads a byte of uncompressed data. This method will block until enough input is available for decompression. @return the byte read, or -1 if end of compressed input is reached @exception IOException if an I/O error has occurred
method,java/util/zip/InflaterInputStream/skip/long, Skips specified number of bytes of uncompressed data. @param n the number of bytes to skip @return the actual number of bytes skipped. @exception IOException if an I/O error has occurred @exception IllegalArgumentException if n < 0
method,java/util/zip/InflaterInputStream/close/, Closes this input stream and releases any system resources associated with the stream. @exception IOException if an I/O error has occurred
method,java/util/zip/InflaterInputStream/fill/, Fills input buffer with more data to decompress. @exception IOException if an I/O error has occurred
method,java/util/zip/InflaterInputStream/mark/int, Marks the current position in this input stream. The mark method of InflaterInputStream does nothing. @param readlimit the maximum limit of bytes that can be read before the mark position becomes invalid. @see java.io.InputStream#reset()
method,java/util/zip/InflaterInputStream/reset/, Repositions this stream to the position at the time the mark method was last called on this input stream. The method reset for class InflaterInputStream does nothing except throw an IOException. @exception IOException if this method is invoked. @see java.io.InputStream#mark(int) @see java.io.IOException
method,java/util/zip/Inflater/getRemaining/, Returns the total number of bytes remaining in the input buffer. This can be used to find out what bytes still remain in the input buffer after decompression has finished. @return the total number of bytes remaining in the input buffer
method,java/util/zip/Inflater/needsInput/, Returns true if no data remains in the input buffer. This can be used to determine if #setInput should be called in order to provide more input. @return true if no data remains in the input buffer
method,java/util/zip/Inflater/getTotalIn/, Returns the total number of compressed bytes input so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the {@link #getBytesRead()} method is now the preferred means of obtaining this information. @return the total number of compressed bytes input so far
method,java/util/zip/Inflater/getTotalOut/, Returns the total number of uncompressed bytes output so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now the preferred means of obtaining this information. @return the total number of uncompressed bytes output so far
method,java/util/zip/GZIPOutputStream/write/byte[];int;int, Writes array of bytes to the compressed output stream. This method will block until all the bytes are written. @param buf the data to be written @param off the start offset of the data @param len the length of the data @exception IOException If an I/O error has occurred.
method,java/util/zip/GZIPOutputStream/finish/, Finishes writing compressed data to the output stream without closing the underlying stream. Use this method when applying multiple filters in succession to the same output stream. @exception IOException if an I/O error has occurred
method,java/util/zip/GZIPOutputStream/GZIPOutputStream/OutputStream;int, Creates a new output stream with the specified buffer size. @param out the output stream @param size the output buffer size @exception IOException If an I/O error has occurred. @exception IllegalArgumentException if size is <= 0
method,java/util/zip/GZIPOutputStream/GZIPOutputStream/OutputStream, Creates a new output stream with a default buffer size. @param out the output stream @exception IOException If an I/O error has occurred.
method,java/util/zip/GZIPInputStream/read/byte[];int;int, Reads uncompressed data into an array of bytes. If len is not zero, the method will block until some input can be decompressed; otherwise, no bytes are read and 0 is returned. @param buf the buffer into which the data is read @param off the start offset in the destination array b @param len the maximum number of bytes read @return	the actual number of bytes read, or -1 if the end of the		compressed input stream is reached @exception NullPointerException If buf is null. @exception IndexOutOfBoundsException If off is negative, len is negative, or len is greater than buf.length - off @exception IOException if an I/O error has occurred or the compressed			 input data is corrupt
method,java/util/zip/GZIPInputStream/close/, Closes this input stream and releases any system resources associated with the stream. @exception IOException if an I/O error has occurred
method,java/util/zip/GZIPInputStream/GZIPInputStream/InputStream;int, Creates a new input stream with the specified buffer size. @param in the input stream @param size the input buffer size @exception IOException if an I/O error has occurred @exception IllegalArgumentException if size is <= 0
method,java/util/zip/GZIPInputStream/GZIPInputStream/InputStream, Creates a new input stream with a default buffer size. @param in the input stream @exception IOException if an I/O error has occurred
method,java/util/zip/DeflaterOutputStream/write/int, Writes a byte to the compressed output stream. This method will block until the byte can be written. @param b the byte to be written @exception IOException if an I/O error has occurred
method,java/util/zip/DeflaterOutputStream/write/byte[];int;int, Writes an array of bytes to the compressed output stream. This method will block until all the bytes are written. @param b the data to be written @param off the start offset of the data @param len the length of the data @exception IOException if an I/O error has occurred
method,java/util/zip/DeflaterOutputStream/finish/, Finishes writing compressed data to the output stream without closing the underlying stream. Use this method when applying multiple filters in succession to the same output stream. @exception IOException if an I/O error has occurred
method,java/util/zip/DeflaterOutputStream/close/, Writes remaining compressed data to the output stream and closes the underlying stream. @exception IOException if an I/O error has occurred
method,java/util/zip/DeflaterOutputStream/deflate/, Writes next block of compressed data to the output stream. @throws IOException if an I/O error has occurred
method,java/util/zip/DeflaterInputStream/close/, Closes this input stream and its underlying input stream, discarding any pending uncompressed data. @throws IOException if an I/O error occurs
method,java/util/zip/DeflaterInputStream/read/, Reads a single byte of compressed data from the input stream. This method will block until some input can be read and compressed. @return a single byte of compressed data, or -1 if the end of the uncompressed input stream is reached @throws IOException if an I/O error occurs or if this stream is already closed
method,java/util/zip/DeflaterInputStream/read/byte[];int;int, Reads compressed data into a byte array. This method will block until some input can be read and compressed. @param b buffer into which the data is read @param off starting offset of the data within {@code b} @param len maximum number of compressed bytes to read into {@code b} @return the actual number of bytes read, or -1 if the end of the uncompressed input stream is reached @throws IndexOutOfBoundsException if {@code len} > {@code b.length - off} @throws IOException if an I/O error occurs or if this input stream is already closed
method,java/util/zip/DeflaterInputStream/skip/long, Skips over and discards data from the input stream. This method may block until the specified number of bytes are read and skipped. Note: While {@code n} is given as a {@code long}, the maximum number of bytes which can be skipped is {@code Integer.MAX_VALUE}. @param n number of bytes to be skipped @return the actual number of bytes skipped @throws IOException if an I/O error occurs or if this stream is already closed
method,java/util/zip/DeflaterInputStream/mark/int, This operation is not supported. @param limit maximum bytes that can be read before invalidating the position marker
method,java/util/zip/Deflater/needsInput/, Returns true if the input data buffer is empty and setInput() should be called in order to provide more input. @return true if the input data buffer is empty and setInput() should be called in order to provide more input
method,java/util/zip/Deflater/finish/, When called, indicates that compression should end with the current contents of the input buffer.
method,java/util/zip/Deflater/getTotalIn/, Returns the total number of uncompressed bytes input so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the {@link #getBytesRead()} method is now the preferred means of obtaining this information. @return the total number of uncompressed bytes input so far
method,java/util/zip/Deflater/getTotalOut/, Returns the total number of compressed bytes output so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now the preferred means of obtaining this information. @return the total number of compressed bytes output so far
field,java/util/zip/Deflater/DEFLATED, Compression method for the deflate algorithm (the only one currently supported).
field,java/util/zip/Deflater/BEST_COMPRESSION, Compression level for best compression.
field,java/util/zip/Deflater/FILTERED, Compression strategy best used for data consisting mostly of small values with a somewhat random distribution. Forces more Huffman coding and less string matching.
field,java/util/zip/Deflater/HUFFMAN_ONLY, Compression strategy for Huffman coding only.
class,java/util/zip/DataFormatException, Signals that a data format error has occurred. @version 	1.15, 03/23/10 @author 	David Connelly
method,java/util/zip/CheckedOutputStream/write/int, Writes a byte. Will block until the byte is actually written. @param b the byte to be written @exception IOException if an I/O error has occurred
method,java/util/zip/CheckedOutputStream/write/byte[];int;int, Writes an array of bytes. Will block until the bytes are actually written. @param b the data to be written @param off the start offset of the data @param len the number of bytes to be written @exception IOException if an I/O error has occurred
method,java/util/zip/CheckedInputStream/read/, Reads a byte. Will block if no input is available. @return the byte read, or -1 if the end of the stream is reached. @exception IOException if an I/O error has occurred
method,java/util/zip/CheckedInputStream/read/byte[];int;int, Reads into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned. @param buf the buffer into which the data is read @param off the start offset in the destination array b @param len the maximum number of bytes read @return the actual number of bytes read, or -1 if the end		 of the stream is reached. @exception NullPointerException If buf is null. @exception IndexOutOfBoundsException If off is negative, len is negative, or len is greater than buf.length - off @exception IOException if an I/O error has occurred
method,java/util/zip/CheckedInputStream/skip/long, Skips specified number of bytes of input. @param n the number of bytes to skip @return the actual number of bytes skipped @exception IOException if an I/O error has occurred
class,java/math/RoundingMode, Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode indicates how the least significant returned digit of a rounded result is to be calculated. If fewer digits are returned than the digits needed to represent the exact numerical result, the discarded digits will be referred to as the discarded fraction regardless the digits' contribution to the value of the number. In other words, considered as a numerical value, the discarded fraction could have an absolute value greater than one. Each rounding mode description includes a table listing how different two-digit decimal values would round to a one digit decimal value under the rounding mode in question. The result column in the tables could be gotten by creating a BigDecimal number with the specified value, forming a {@link MathContext} object with the proper settings (precision set to 1, and the roundingMode set to the rounding mode in question), and calling {@link BigDecimal#round round} on this number with the proper MathContext. A summary table showing the results of these rounding operations for all rounding modes appears below. Summary of Rounding Operations Under Different Rounding Modes Result of rounding input to one digit with the given rounding mode Input Number	 UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 5.5	 6 5 6 5 6 5 6 throw ArithmeticException 2.5	 3 2 3 2 3 2 2 throw ArithmeticException 1.6	 2 1 2 	 1 2 2 2 throw ArithmeticException 1.1	 2 1 2 	 1 1 1 1 throw ArithmeticException 1.0	 1 1 1 	 1 1 1 1 1 -1.0 -1 -1 -1	 -1 -1 -1 -1 -1 -1.1 -2 -1 -1	 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1	 -2 -2 -2 -2 throw ArithmeticException -2.5 -3 -2 -2	 -3 -3 -2 -2 throw ArithmeticException -5.5 -6 -5 -5	 -6 -6 -5 -6 throw ArithmeticException This enum is intended to replace the integer-based enumeration of rounding mode constants in {@link BigDecimal} ({@link BigDecimal#ROUND_UP}, {@link BigDecimal#ROUND_DOWN}, etc. ). @see BigDecimal @see MathContext @version 1.x 01/xx/xx @author Josh Bloch @author Mike Cowlishaw @author Joseph D. Darcy @since 1.5
field,java/math/RoundingMode/UP, Rounding mode to round away from zero. Always increments the digit prior to a non-zero discarded fraction. Note that this rounding mode never decreases the magnitude of the calculated value.Example:Input Number Input rounded to one digit with UP rounding5.5	62.5	31.6	21.1	21.0	1-1.0	-1-1.1	-2-1.6	-2-2.5	-3-5.5	-6
field,java/math/RoundingMode/DOWN, Rounding mode to round towards zero. Never increments the digit prior to a discarded fraction (i.e., truncates). Note that this rounding mode never increases the magnitude of the calculated value.Example:Input Number Input rounded to one digit with DOWN rounding5.5	52.5	21.6	11.1	11.0	1-1.0	-1-1.1	-1-1.6	-1-2.5	-2-5.5	-5
field,java/math/RoundingMode/CEILING, Rounding mode to round towards positive infinity. If the result is positive, behaves as for RoundingMode.UP; if negative, behaves as for RoundingMode.DOWN. Note that this rounding mode never decreases the calculated value.Example:Input Number Input rounded to one digit with CEILING rounding5.5	62.5	31.6	21.1	21.0	1-1.0	-1-1.1	-1-1.6	-1-2.5	-2-5.5	-5
field,java/math/RoundingMode/FLOOR, Rounding mode to round towards negative infinity. If the result is positive, behave as for RoundingMode.DOWN; if negative, behave as for RoundingMode.UP. Note that this rounding mode never increases the calculated value.Example:Input Number Input rounded to one digit with FLOOR rounding5.5	52.5	21.6	11.1	11.0	1-1.0	-1-1.1	-2-1.6	-2-2.5	-3-5.5	-6
field,java/math/RoundingMode/HALF_UP, Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round up. Behaves as for RoundingMode.UP if the discarded fraction is &gt;= 0.5; otherwise, behaves as for RoundingMode.DOWN. Note that this is the rounding mode commonly taught at school.Example:Input Number Input rounded to one digit with HALF_UP rounding5.5	62.5	31.6	21.1	11.0	1-1.0	-1-1.1	-1-1.6	-2-2.5	-3-5.5	-6
field,java/math/RoundingMode/HALF_EVEN, Rounding mode to round towards the &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case, round towards the even neighbor. Behaves as for RoundingMode.HALF_UP if the digit to the left of the discarded fraction is odd; behaves as for RoundingMode.HALF_DOWN if it's even. Note that this is the rounding mode that statistically minimizes cumulative error when applied repeatedly over a sequence of calculations. It is sometimes known as &quot;Banker's rounding,&quot; and is chiefly used in the USA. This rounding mode is analogous to the rounding policy used for float and double arithmetic in Java.Example:Input Number Input rounded to one digit with HALF_EVEN rounding5.5	62.5	21.6	21.1	11.0	1-1.0	-1-1.1	-1-1.6	-2-2.5	-2-5.5	-6
field,java/math/RoundingMode/UNNECESSARY, Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary. If this rounding mode is specified on an operation that yields an inexact result, an ArithmeticException is thrown.Example:Input Number Input rounded to one digit with UNNECESSARY rounding5.5	throw ArithmeticException2.5	throw ArithmeticException1.6	throw ArithmeticException1.1	throw ArithmeticException1.0	1-1.0	-1-1.1	throw ArithmeticException-1.6	throw ArithmeticException-2.5	throw ArithmeticException-5.5	throw ArithmeticException	
method,java/math/MathContext/equals/Object, Compares this {@code MathContext} with the specified {@code Object} for equality. @param x {@code Object} to which this {@code MathContext} is to be compared. @return {@code true} if and only if the specified {@code Object} is a {@code MathContext} object which has exactly the same settings as this object
method,java/math/MathContext/toString/, Returns the string representation of this {@code MathContext}. The {@code String} returned represents the settings of the {@code MathContext} object as two space-delimited words (separated by a single space character, '&#92;u0020', and with no leading or trailing white space), as follows: The string {@code precision=}, immediately followed by the value of the precision setting as a numeric string as if generated by the {@link Integer#toString(int) Integer.toString} method. The string {@code roundingMode=}, immediately followed by the value of the {@code roundingMode} setting as a word. This word will be the same as the name of the corresponding public constant in the {@link RoundingMode} enum. For example: precision=9 roundingMode=HALF_UP Additional words may be appended to the result of {@code toString} in the future if more properties are added to this class. @return a {@code String} representing the context settings
field,java/math/MathContext/UNLIMITED, A {@code MathContext} object whose settings have the values required for unlimited precision arithmetic. The values of the settings are: precision=0 roundingMode=HALF_UP 
class,java/math/BigInteger, Immutable arbitrary-precision integers. All operations behave as if BigIntegers were represented in two's-complement notation (like Java's primitive integer types). BigInteger provides analogues to all of Java's primitive integer operators, and all relevant methods from java.lang.Math. Additionally, BigInteger provides operations for modular arithmetic, GCD calculation, primality testing, prime generation, bit manipulation, and a few other miscellaneous operations. Semantics of arithmetic operations exactly mimic those of Java's integer arithmetic operators, as defined in The Java Language Specification. For example, division by zero throws an {@code ArithmeticException}, and division of a negative by a positive yields a negative (or zero) remainder. All of the details in the Spec concerning overflow are ignored, as BigIntegers are made as large as necessary to accommodate the results of an operation. Semantics of shift operations extend those of Java's shift operators to allow for negative shift distances. A right-shift with a negative shift distance results in a left shift, and vice-versa. The unsigned right shift operator ({@code >>>}) is omitted, as this operation makes little sense in combination with the infinite word size abstraction provided by this class. Semantics of bitwise logical operations exactly mimic those of Java's bitwise integer operators. The binary operators ({@code and}, {@code or}, {@code xor}) implicitly perform sign extension on the shorter of the two operands prior to performing the operation. Comparison operations perform signed integer comparisons, analogous to those performed by Java's relational and equality operators. Modular arithmetic operations are provided to compute residues, perform exponentiation, and compute multiplicative inverses. These methods always return a non-negative result, between {@code 0} and {@code (modulus - 1)}, inclusive. Bit operations operate on a single bit of the two's-complement representation of their operand. If necessary, the operand is sign- extended so that it contains the designated bit. None of the single-bit operations can produce a BigInteger with a different sign from the BigInteger being operated on, as they affect only a single bit, and the infinite word size abstraction provided by this class ensures that there are infinitely many virtual sign bits preceding each BigInteger. For the sake of brevity and clarity, pseudo-code is used throughout the descriptions of BigInteger methods. The pseudo-code expression {@code (i + j)} is shorthand for a BigInteger whose value is that of the BigInteger {@code i} plus that of the BigInteger {@code j}. The pseudo-code expression {@code (i == j)} is shorthand for {@code true} if and only if the BigInteger {@code i} represents the same value as the BigInteger {@code j}. Other pseudo-code expressions are interpreted similarly. All methods and constructors in this class throw {@code NullPointerException} when passed a null object reference for any input parameter. @see BigDecimal @author Josh Bloch @author Michael McCloskey @since JDK1.1
method,java/math/BigInteger/nextProbablePrime/, Returns the first integer greater than this {@code BigInteger} that is probably prime. The probability that the number returned by this method is composite does not exceed 2-100. This method will never skip over a prime when searching: if it returns {@code p}, there is no prime {@code q} such that {@code this < q < p}. @return the first integer greater than this {@code BigInteger} that is probably prime. @throws ArithmeticException {@code this < 0}. @since 1.5
method,java/math/BigInteger/pow/int, Returns a BigInteger whose value is (thisexponent). Note that {@code exponent} is an integer rather than a BigInteger. @param exponent exponent to which this BigInteger is to be raised. @return thisexponent @throws ArithmeticException {@code exponent} is negative. (This would	 cause the operation to yield a non-integer value.)
method,java/math/BigInteger/shiftRight/int, Returns a BigInteger whose value is {@code (this >> n)}. Sign extension is performed. The shift distance, {@code n}, may be negative, in which case this method performs a left shift. (Computes floor(this / 2n).) @param n shift distance, in bits. @return {@code this >> n} @see #shiftLeft
method,java/math/BigInteger/and/BigInteger, Returns a BigInteger whose value is {@code (this & val)}. (This method returns a negative BigInteger if and only if this and val are both negative.) @param val value to be AND'ed with this BigInteger. @return {@code this & val}
method,java/math/BigInteger/or/BigInteger, Returns a BigInteger whose value is {@code (this | val)}. (This method returns a negative BigInteger if and only if either this or val is negative.) @param val value to be OR'ed with this BigInteger. @return {@code this | val}
method,java/math/BigInteger/xor/BigInteger, Returns a BigInteger whose value is {@code (this ^ val)}. (This method returns a negative BigInteger if and only if exactly one of this and val are negative.) @param val value to be XOR'ed with this BigInteger. @return {@code this ^ val}
method,java/math/BigInteger/not/, Returns a BigInteger whose value is {@code (~this)}. (This method returns a negative value if and only if this BigInteger is non-negative.) @return {@code ~this}
method,java/math/BigInteger/andNot/BigInteger, Returns a BigInteger whose value is {@code (this & ~val)}. This method, which is equivalent to {@code and(val.not())}, is provided as a convenience for masking operations. (This method returns a negative BigInteger if and only if {@code this} is negative and {@code val} is positive.) @param val value to be complemented and AND'ed with this BigInteger. @return {@code this & ~val}
method,java/math/BigInteger/testBit/int, Returns {@code true} if and only if the designated bit is set. (Computes {@code ((this & (1<<n)) != 0)}.) @param n index of bit to test. @return {@code true} if and only if the designated bit is set. @throws ArithmeticException {@code n} is negative.
method,java/math/BigInteger/equals/Object, Compares this BigInteger with the specified Object for equality. @param x Object to which this BigInteger is to be compared. @return {@code true} if and only if the specified Object is a	 BigInteger whose value is numerically equal to this BigInteger.
method,java/math/BigInteger/min/BigInteger, Returns the minimum of this BigInteger and {@code val}. @param val value with which the minimum is to be computed. @return the BigInteger whose value is the lesser of this BigInteger and 	 {@code val}. If they are equal, either may be returned.
method,java/math/BigInteger/max/BigInteger, Returns the maximum of this BigInteger and {@code val}. @param val value with which the maximum is to be computed. @return the BigInteger whose value is the greater of this and {@code val}. If they are equal, either may be returned.
method,java/math/BigInteger/toByteArray/, Returns a byte array containing the two's-complement representation of this BigInteger. The byte array will be in big-endian byte-order: the most significant byte is in the zeroth element. The array will contain the minimum number of bytes required to represent this BigInteger, including at least one sign bit, which is {@code (ceil((this.bitLength() + 1)/8))}. (This representation is compatible with the {@link #BigInteger(byte[]) (byte[])} constructor.) @return a byte array containing the two's-complement representation of	 this BigInteger. @see #BigInteger(byte[])
method,java/math/BigInteger/intValue/, Converts this BigInteger to an {@code int}. This conversion is analogous to a narrowing primitive conversion from {@code long} to {@code int} as defined in the Java Language Specification: if this BigInteger is too big to fit in an {@code int}, only the low-order 32 bits are returned. Note that this conversion can lose information about the overall magnitude of the BigInteger value as well as return a result with the opposite sign. @return this BigInteger converted to an {@code int}.
method,java/math/BigInteger/longValue/, Converts this BigInteger to a {@code long}. This conversion is analogous to a narrowing primitive conversion from {@code long} to {@code int} as defined in the Java Language Specification: if this BigInteger is too big to fit in a {@code long}, only the low-order 64 bits are returned. Note that this conversion can lose information about the overall magnitude of the BigInteger value as well as return a result with the opposite sign. @return this BigInteger converted to a {@code long}.
method,java/math/BigInteger/floatValue/, Converts this BigInteger to a {@code float}. This conversion is similar to the narrowing primitive conversion from {@code double} to {@code float} defined in the Java Language Specification: if this BigInteger has too great a magnitude to represent as a {@code float}, it will be converted to {@link Float#NEGATIVE_INFINITY} or {@link Float#POSITIVE_INFINITY} as appropriate. Note that even when the return value is finite, this conversion can lose information about the precision of the BigInteger value. @return this BigInteger converted to a {@code float}.
method,java/math/BigInteger/doubleValue/, Converts this BigInteger to a {@code double}. This conversion is similar to the narrowing primitive conversion from {@code double} to {@code float} defined in the Java Language Specification: if this BigInteger has too great a magnitude to represent as a {@code double}, it will be converted to {@link Double#NEGATIVE_INFINITY} or {@link Double#POSITIVE_INFINITY} as appropriate. Note that even when the return value is finite, this conversion can lose information about the precision of the BigInteger value. @return this BigInteger converted to a {@code double}.
method,java/math/BigInteger/BigInteger/String;int, Translates the String representation of a BigInteger in the specified radix into a BigInteger. The String representation consists of an optional minus sign followed by a sequence of one or more digits in the specified radix. The character-to-digit mapping is provided by {@code Character.digit}. The String may not contain any extraneous characters (whitespace, for example). @param val String representation of BigInteger. @param radix radix to be used in interpreting {@code val}. @throws NumberFormatException {@code val} is not a valid representation	 of a BigInteger in the specified radix, or {@code radix} is	 outside the range from {@link Character#MIN_RADIX} to	 {@link Character#MAX_RADIX}, inclusive. @see Character#digit
method,java/math/BigInteger/BigInteger/String, Translates the decimal String representation of a BigInteger into a BigInteger. The String representation consists of an optional minus sign followed by a sequence of one or more decimal digits. The character-to-digit mapping is provided by {@code Character.digit}. The String may not contain any extraneous characters (whitespace, for example). @param val decimal String representation of BigInteger. @throws NumberFormatException {@code val} is not a valid representation	 of a BigInteger. @see Character#digit
method,java/math/BigInteger/BigInteger/int;Random, Constructs a randomly generated BigInteger, uniformly distributed over the range {@code 0} to (2{@code numBits} - 1), inclusive. The uniformity of the distribution assumes that a fair source of random bits is provided in {@code rnd}. Note that this constructor always constructs a non-negative BigInteger. @param numBits maximum bitLength of the new BigInteger. @param rnd source of randomness to be used in computing the new	 BigInteger. @throws IllegalArgumentException {@code numBits} is negative. @see #bitLength()
class,java/math/BigDecimal, Immutable, arbitrary-precision signed decimal numbers. A {@code BigDecimal} consists of an arbitrary precision integer unscaled value and a 32-bit integer scale. If zero or positive, the scale is the number of digits to the right of the decimal point. If negative, the unscaled value of the number is multiplied by ten to the power of the negation of the scale. The value of the number represented by the {@code BigDecimal} is therefore (unscaledValue &times; 10-scale). The {@code BigDecimal} class provides operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion. The {@link #toString} method provides a canonical representation of a {@code BigDecimal}. The {@code BigDecimal} class gives its user complete control over rounding behavior. If no rounding mode is specified and the exact result cannot be represented, an exception is thrown; otherwise, calculations can be carried out to a chosen precision and rounding mode by supplying an appropriate {@link MathContext} object to the operation. In either case, eight rounding modes are provided for the control of rounding. Using the integer fields in this class (such as {@link #ROUND_HALF_UP}) to represent rounding mode is largely obsolete; the enumeration values of the {@code RoundingMode} {@code enum}, (such as {@link RoundingMode#HALF_UP}) should be used instead. When a {@code MathContext} object is supplied with a precision setting of 0 (for example, {@link MathContext#UNLIMITED}), arithmetic operations are exact, as are the arithmetic methods which take no {@code MathContext} object. (This is the only behavior that was supported in releases prior to 5.) As a corollary of computing the exact result, the rounding mode setting of a {@code MathContext} object with a precision setting of 0 is not used and thus irrelevant. In the case of divide, the exact quotient could have an infinitely long decimal expansion; for example, 1 divided by 3. If the quotient has a nonterminating decimal expansion and the operation is specified to return an exact result, an {@code ArithmeticException} is thrown. Otherwise, the exact result of the division is returned, as done for other operations. When the precision setting is not 0, the rules of {@code BigDecimal} arithmetic are broadly compatible with selected modes of operation of the arithmetic defined in ANSI X3.274-1996 and ANSI X3.274-1996/AM 1-2000 (section 7.4). Unlike those standards, {@code BigDecimal} includes many rounding modes, which were mandatory for division in {@code BigDecimal} releases prior to 5. Any conflicts between these ANSI standards and the {@code BigDecimal} specification are resolved in favor of {@code BigDecimal}. Since the same numerical value can have different representations (with different scales), the rules of arithmetic and rounding must specify both the numerical result and the scale used in the result's representation. In general the rounding modes and precision setting determine how operations return results with a limited number of digits when the exact result has more digits (perhaps infinitely many in the case of division) than the number of digits returned. First, the total number of digits to return is specified by the {@code MathContext}'s {@code precision} setting; this determines the result's precision. The digit count starts from the leftmost nonzero digit of the exact result. The rounding mode determines how any discarded trailing digits affect the returned result. For all arithmetic operators , the operation is carried out as though an exact intermediate result were first calculated and then rounded to the number of digits specified by the precision setting (if necessary), using the selected rounding mode. If the exact result is not returned, some digit positions of the exact result are discarded. When rounding increases the magnitude of the returned result, it is possible for a new digit position to be created by a carry propagating to a leading {@literal 9} digit. For example, rounding the value 999.9 to three digits rounding up would be numerically equal to one thousand, represented as 100&times;101. In such cases, the new {@literal 1} is the leading digit position of the returned result. Besides a logical exact result, each arithmetic operation has a preferred scale for representing a result. The preferred scale for each operation is listed in the table below. Preferred Scales for Results of Arithmetic Operations OperationPreferred Scale of Result Addmax(addend.scale(), augend.scale()) Subtractmax(minuend.scale(), subtrahend.scale()) Multiplymultiplier.scale() + multiplicand.scale() Dividedividend.scale() - divisor.scale() These scales are the ones used by the methods which return exact arithmetic results; except that an exact divide may have to use a larger scale since the exact result may have more digits. For example, {@code 1/32} is {@code 0.03125}. Before rounding, the scale of the logical exact intermediate result is the preferred scale for that operation. If the exact numerical result cannot be represented in {@code precision} digits, rounding selects the set of digits to return and the scale of the result is reduced from the scale of the intermediate result to the least scale which can represent the {@code precision} digits actually returned. If the exact result can be represented with at most {@code precision} digits, the representation of the result with the scale closest to the preferred scale is returned. In particular, an exactly representable quotient may be represented in fewer than {@code precision} digits by removing trailing zeros and decreasing the scale. For example, rounding to three digits using the {@linkplain RoundingMode#FLOOR floor} rounding mode, {@code 19/100 = 0.19 // integer=19, scale=2} but {@code 21/110 = 0.190 // integer=190, scale=3} Note that for add, subtract, and multiply, the reduction in scale will equal the number of digit positions of the exact result which are discarded. If the rounding causes a carry propagation to create a new high-order digit position, an additional digit of the result is discarded than when no new digit position is created. Other methods may have slightly different rounding semantics. For example, the result of the {@code pow} method using the {@linkplain #pow(int, MathContext) specified algorithm} can occasionally differ from the rounded mathematical result by more than one unit in the last place, one {@linkplain #ulp() ulp}. Two types of operations are provided for manipulating the scale of a {@code BigDecimal}: scaling/rounding operations and decimal point motion operations. Scaling/rounding operations ({@link #setScale setScale} and {@link #round round}) return a {@code BigDecimal} whose value is approximately (or exactly) equal to that of the operand, but whose scale or precision is the specified value; that is, they increase or decrease the precision of the stored number with minimal effect on its value. Decimal point motion operations ({@link #movePointLeft movePointLeft} and {@link #movePointRight movePointRight}) return a {@code BigDecimal} created from the operand by moving the decimal point a specified distance in the specified direction. For the sake of brevity and clarity, pseudo-code is used throughout the descriptions of {@code BigDecimal} methods. The pseudo-code expression {@code (i + j)} is shorthand for a {@code BigDecimal} whose value is that of the {@code BigDecimal} {@code i} added to that of the {@code BigDecimal} {@code j}. The pseudo-code expression {@code (i == j)} is shorthand for {@code true} if and only if the {@code BigDecimal} {@code i} represents the same value as the {@code BigDecimal} {@code j}. Other pseudo-code expressions are interpreted similarly. Square brackets are used to represent the particular {@code BigInteger} and scale pair defining a {@code BigDecimal} value; for example [19, 2] is the {@code BigDecimal} numerically equal to 0.19 having a scale of 2. Note: care should be exercised if {@code BigDecimal} objects are used as keys in a {@link java.util.SortedMap SortedMap} or elements in a {@link java.util.SortedSet SortedSet} since {@code BigDecimal}'s natural ordering is inconsistent with equals. See {@link Comparable}, {@link java.util.SortedMap} or {@link java.util.SortedSet} for more information. All methods and constructors for this class throw {@code NullPointerException} when passed a {@code null} object reference for any input parameter. @see BigInteger @see MathContext @see RoundingMode @see java.util.SortedMap @see java.util.SortedSet @author Josh Bloch @author Mike Cowlishaw @author Joseph D. Darcy
method,java/math/BigDecimal/valueOf/double, Translates a {@code double} into a {@code BigDecimal}, using the {@code double}'s canonical string representation provided by the {@link Double#toString(double)} method. Note: This is generally the preferred way to convert a {@code double} (or {@code float}) into a {@code BigDecimal}, as the value returned is equal to that resulting from constructing a {@code BigDecimal} from the result of using {@link Double#toString(double)}. @param val {@code double} to convert to a {@code BigDecimal}. @return a {@code BigDecimal} whose value is equal to or approximately equal to the value of {@code val}. @throws NumberFormatException if {@code val} is infinite or NaN. @since 1.5
method,java/math/BigDecimal/add/BigDecimal;MathContext, Returns a {@code BigDecimal} whose value is {@code (this + augend)}, with rounding according to the context settings. If either number is zero and the precision setting is nonzero then the other number, rounded if necessary, is used as the result. @param augend value to be added to this {@code BigDecimal}. @param mc the context to use. @return {@code this + augend}, rounded as necessary. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @since 1.5
method,java/math/BigDecimal/subtract/BigDecimal;MathContext, Returns a {@code BigDecimal} whose value is {@code (this - subtrahend)}, with rounding according to the context settings. If {@code subtrahend} is zero then this, rounded if necessary, is used as the result. If this is zero then the result is {@code subtrahend.negate(mc)}. @param subtrahend value to be subtracted from this {@code BigDecimal}. @param mc the context to use. @return {@code this - subtrahend}, rounded as necessary. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @since 1.5
method,java/math/BigDecimal/multiply/BigDecimal;MathContext, Returns a {@code BigDecimal} whose value is (this &times; multiplicand), with rounding according to the context settings. @param multiplicand value to be multiplied by this {@code BigDecimal}. @param mc the context to use. @return {@code this * multiplicand}, rounded as necessary. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @since 1.5
method,java/math/BigDecimal/divide/BigDecimal;int;RoundingMode, Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, and whose scale is as specified. If rounding must be performed to generate a result with the specified scale, the specified rounding mode is applied. @param divisor value by which this {@code BigDecimal} is to be divided. @param scale scale of the {@code BigDecimal} quotient to be returned. @param roundingMode rounding mode to apply. @return {@code this / divisor} @throws ArithmeticException if {@code divisor} is zero, {@code roundingMode==RoundingMode.UNNECESSARY} and the specified scale is insufficient to represent the result of the division exactly. @since 1.5
method,java/math/BigDecimal/divide/BigDecimal;RoundingMode, Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, and whose scale is {@code this.scale()}. If rounding must be performed to generate a result with the given scale, the specified rounding mode is applied. @param divisor value by which this {@code BigDecimal} is to be divided. @param roundingMode rounding mode to apply. @return {@code this / divisor} @throws ArithmeticException if {@code divisor==0}, or {@code roundingMode==RoundingMode.UNNECESSARY} and {@code this.scale()} is insufficient to represent the result of the division exactly. @since 1.5
method,java/math/BigDecimal/divide/BigDecimal;MathContext, Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, with rounding according to the context settings. @param divisor value by which this {@code BigDecimal} is to be divided. @param mc the context to use. @return {@code this / divisor}, rounded as necessary. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY} or {@code mc.precision == 0} and the quotient has a non-terminating decimal expansion. @since 1.5
method,java/math/BigDecimal/divideToIntegralValue/BigDecimal;MathContext, Returns a {@code BigDecimal} whose value is the integer part of {@code (this / divisor)}. Since the integer part of the exact quotient does not depend on the rounding mode, the rounding mode does not affect the values returned by this method. The preferred scale of the result is {@code (this.scale() - divisor.scale())}. An {@code ArithmeticException} is thrown if the integer part of the exact quotient needs more than {@code mc.precision} digits. @param divisor value by which this {@code BigDecimal} is to be divided. @param mc the context to use. @return The integer part of {@code this / divisor}. @throws ArithmeticException if {@code divisor==0} @throws ArithmeticException if {@code mc.precision} {@literal >} 0 and the result requires a precision of more than {@code mc.precision} digits. @since 1.5 @author Joseph D. Darcy
method,java/math/BigDecimal/remainder/BigDecimal, Returns a {@code BigDecimal} whose value is {@code (this % divisor)}. The remainder is given by {@code this.subtract(this.divideToIntegralValue(divisor).multiply(divisor))}. Note that this is not the modulo operation (the result can be negative). @param divisor value by which this {@code BigDecimal} is to be divided. @return {@code this % divisor}. @throws ArithmeticException if {@code divisor==0} @since 1.5
method,java/math/BigDecimal/remainder/BigDecimal;MathContext, Returns a {@code BigDecimal} whose value is {@code (this % divisor)}, with rounding according to the context settings. The {@code MathContext} settings affect the implicit divide used to compute the remainder. The remainder computation itself is by definition exact. Therefore, the remainder may contain more than {@code mc.getPrecision()} digits. The remainder is given by {@code this.subtract(this.divideToIntegralValue(divisor, mc).multiply(divisor))}. Note that this is not the modulo operation (the result can be negative). @param divisor value by which this {@code BigDecimal} is to be divided. @param mc the context to use. @return {@code this % divisor}, rounded as necessary. @throws ArithmeticException if {@code divisor==0} @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}, or {@code mc.precision} {@literal >} 0 and the result of {@code this.divideToIntgralValue(divisor)} would require a precision of more than {@code mc.precision} digits. @see #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext) @since 1.5
method,java/math/BigDecimal/divideAndRemainder/BigDecimal, Returns a two-element {@code BigDecimal} array containing the result of {@code divideToIntegralValue} followed by the result of {@code remainder} on the two operands. Note that if both the integer quotient and remainder are needed, this method is faster than using the {@code divideToIntegralValue} and {@code remainder} methods separately because the division need only be carried out once. @param divisor value by which this {@code BigDecimal} is to be divided, and the remainder computed. @return a two element {@code BigDecimal} array: the quotient (the result of {@code divideToIntegralValue}) is the initial element and the remainder is the final element. @throws ArithmeticException if {@code divisor==0} @see #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext) @see #remainder(java.math.BigDecimal, java.math.MathContext) @since 1.5
method,java/math/BigDecimal/divideAndRemainder/BigDecimal;MathContext, Returns a two-element {@code BigDecimal} array containing the result of {@code divideToIntegralValue} followed by the result of {@code remainder} on the two operands calculated with rounding according to the context settings. Note that if both the integer quotient and remainder are needed, this method is faster than using the {@code divideToIntegralValue} and {@code remainder} methods separately because the division need only be carried out once. @param divisor value by which this {@code BigDecimal} is to be divided, and the remainder computed. @param mc the context to use. @return a two element {@code BigDecimal} array: the quotient (the result of {@code divideToIntegralValue}) is the initial element and the remainder is the final element. @throws ArithmeticException if {@code divisor==0} @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}, or {@code mc.precision} {@literal >} 0 and the result of {@code this.divideToIntgralValue(divisor)} would require a precision of more than {@code mc.precision} digits. @see #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext) @see #remainder(java.math.BigDecimal, java.math.MathContext) @since 1.5
method,java/math/BigDecimal/pow/int, Returns a {@code BigDecimal} whose value is (thisn), The power is computed exactly, to unlimited precision. The parameter {@code n} must be in the range 0 through 999999999, inclusive. {@code ZERO.pow(0)} returns {@link #ONE}. Note that future releases may expand the allowable exponent range of this method. @param n power to raise this {@code BigDecimal} to. @return thisn @throws ArithmeticException if {@code n} is out of range. @since 1.5
method,java/math/BigDecimal/pow/int;MathContext, Returns a {@code BigDecimal} whose value is (thisn). The current implementation uses the core algorithm defined in ANSI standard X3.274-1996 with rounding according to the context settings. In general, the returned numerical value is within two ulps of the exact numerical value for the chosen precision. Note that future releases may use a different algorithm with a decreased allowable error bound and increased allowable exponent range. The X3.274-1996 algorithm is: An {@code ArithmeticException} exception is thrown if {@code abs(n) > 999999999} {@code mc.precision == 0} and {@code n {@code mc.precision > 0} and {@code n} has more than {@code mc.precision} decimal digits if {@code n} is zero, {@link #ONE} is returned even if {@code this} is zero, otherwise if {@code n} is positive, the result is calculated via the repeated squaring technique into a single accumulator. The individual multiplications with the accumulator use the same math context settings as in {@code mc} except for a precision increased to {@code mc.precision + elength + 1} where {@code elength} is the number of decimal digits in {@code n}. if {@code n} is negative, the result is calculated as if {@code n} were positive; this value is then divided into one using the working precision specified above. The final value from either the positive or negative case is then rounded to the destination precision. @param n power to raise this {@code BigDecimal} to. @param mc the context to use. @return thisn using the ANSI standard X3.274-1996 algorithm @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}, or {@code n} is out of range. @since 1.5
method,java/math/BigDecimal/abs/MathContext, Returns a {@code BigDecimal} whose value is the absolute value of this {@code BigDecimal}, with rounding according to the context settings. @param mc the context to use. @return {@code abs(this)}, rounded as necessary. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @since 1.5
method,java/math/BigDecimal/negate/MathContext, Returns a {@code BigDecimal} whose value is {@code (-this)}, with rounding according to the context settings. @param mc the context to use. @return {@code -this}, rounded as necessary. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @since 1.5
method,java/math/BigDecimal/plus/MathContext, Returns a {@code BigDecimal} whose value is {@code (+this)}, with rounding according to the context settings. The effect of this method is identical to that of the {@link #round(MathContext)} method. @param mc the context to use. @return {@code this}, rounded as necessary. A zero result will have a scale of 0. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @see #round(MathContext) @since 1.5
method,java/math/BigDecimal/round/MathContext, Returns a {@code BigDecimal} rounded according to the {@code MathContext} settings. If the precision setting is 0 then no rounding takes place. The effect of this method is identical to that of the {@link #plus(MathContext)} method. @param mc the context to use. @return a {@code BigDecimal} rounded according to the {@code MathContext} settings. @throws ArithmeticException if the rounding mode is {@code UNNECESSARY} and the {@code BigDecimal} operation would require rounding. @see #plus(MathContext) @since 1.5
method,java/math/BigDecimal/movePointLeft/int, Returns a {@code BigDecimal} which is equivalent to this one with the decimal point moved {@code n} places to the left. If {@code n} is non-negative, the call merely adds {@code n} to the scale. If {@code n} is negative, the call is equivalent to {@code movePointRight(-n)}. The {@code BigDecimal} returned by this call has value (this &times; 10-n) and scale {@code max(this.scale()+n, 0)}. @param n number of places to move the decimal point to the left. @return a {@code BigDecimal} which is equivalent to this one with the decimal point moved {@code n} places to the left. @throws ArithmeticException if scale overflows.
method,java/math/BigDecimal/movePointRight/int, Returns a {@code BigDecimal} which is equivalent to this one with the decimal point moved {@code n} places to the right. If {@code n} is non-negative, the call merely subtracts {@code n} from the scale. If {@code n} is negative, the call is equivalent to {@code movePointLeft(-n)}. The {@code BigDecimal} returned by this call has value (this &times; 10n) and scale {@code max(this.scale()-n, 0)}. @param n number of places to move the decimal point to the right. @return a {@code BigDecimal} which is equivalent to this one with the decimal point moved {@code n} places to the right. @throws ArithmeticException if scale overflows.
method,java/math/BigDecimal/equals/Object, Compares this {@code BigDecimal} with the specified {@code Object} for equality. Unlike {@link #compareTo(BigDecimal) compareTo}, this method considers two {@code BigDecimal} objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method). @param x {@code Object} to which this {@code BigDecimal} is to be compared. @return {@code true} if and only if the specified {@code Object} is a {@code BigDecimal} whose value and scale are equal to this {@code BigDecimal}'s. @see #compareTo(java.math.BigDecimal) @see #hashCode
method,java/math/BigDecimal/hashCode/, Returns the hash code for this {@code BigDecimal}. Note that two {@code BigDecimal} objects that are numerically equal but differ in scale (like 2.0 and 2.00) will generally not have the same hash code. @return hash code for this {@code BigDecimal}. @see #equals(Object)
method,java/math/BigDecimal/toString/, Returns the string representation of this {@code BigDecimal}, using scientific notation if an exponent is needed. A standard canonical string form of the {@code BigDecimal} is created as though by the following steps: first, the absolute value of the unscaled value of the {@code BigDecimal} is converted to a string in base ten using the characters {@code '0'} through {@code '9'} with no leading zeros (except if its value is zero, in which case a single {@code '0'} character is used). Next, an adjusted exponent is calculated; this is the negated scale, plus the number of characters in the converted unscaled value, less one. That is, {@code -scale+(ulength-1)}, where {@code ulength} is the length of the absolute value of the unscaled value in decimal digits (its precision). If the scale is greater than or equal to zero and the adjusted exponent is greater than or equal to {@code -6}, the number will be converted to a character form without using exponential notation. In this case, if the scale is zero then no decimal point is added and if the scale is positive a decimal point will be inserted with the scale specifying the number of characters to the right of the decimal point. {@code '0'} characters are added to the left of the converted unscaled value as necessary. If no character precedes the decimal point after this insertion then a conventional {@code '0'} character is prefixed. Otherwise (that is, if the scale is negative, or the adjusted exponent is less than {@code -6}), the number will be converted to a character form using exponential notation. In this case, if the converted {@code BigInteger} has more than one digit a decimal point is inserted after the first digit. An exponent in character form is then suffixed to the converted unscaled value (perhaps with inserted decimal point); this comprises the letter {@code 'E'} followed immediately by the adjusted exponent converted to a character form. The latter is in base ten, using the characters {@code '0'} through {@code '9'} with no leading zeros, and is always prefixed by a sign character {@code '-'} ('&#92;u002D') if the adjusted exponent is negative, {@code '+'} ('&#92;u002B') otherwise). Finally, the entire string is prefixed by a minus sign character {@code '-'} ('&#92;u002D') if the unscaled value is less than zero. No sign character is prefixed if the unscaled value is zero or positive. Examples: For each representation [unscaled value, scale] on the left, the resulting string is shown on the right. [123,0] 123 [-123,0] -123 [123,-1] 1.23E+3 [123,-3] 1.23E+5 [123,1] 12.3 [123,5] 0.00123 [123,10] 1.23E-8 [-123,12] -1.23E-10 Notes: There is a one-to-one mapping between the distinguishable {@code BigDecimal} values and the result of this conversion. That is, every distinguishable {@code BigDecimal} value (unscaled value and scale) has a unique string representation as a result of using {@code toString}. If that string representation is converted back to a {@code BigDecimal} using the {@link #BigDecimal(String)} constructor, then the original value will be recovered. The string produced for a given number is always the same; it is not affected by locale. This means that it can be used as a canonical string representation for exchanging decimal data, or as a key for a Hashtable, etc. Locale-sensitive number formatting and parsing is handled by the {@link java.text.NumberFormat} class and its subclasses. The {@link #toEngineeringString} method may be used for presenting numbers with exponents in engineering notation, and the {@link #setScale(int,RoundingMode) setScale} method may be used for rounding a {@code BigDecimal} so it has a known number of digits after the decimal point. The digit-to-character mapping provided by {@code Character.forDigit} is used. @return string representation of this {@code BigDecimal}. @see Character#forDigit @see #BigDecimal(java.lang.String)
method,java/math/BigDecimal/toEngineeringString/, Returns a string representation of this {@code BigDecimal}, using engineering notation if an exponent is needed. Returns a string that represents the {@code BigDecimal} as described in the {@link #toString()} method, except that if exponential notation is used, the power of ten is adjusted to be a multiple of three (engineering notation) such that the integer part of nonzero values will be in the range 1 through 999. If exponential notation is used for zero values, a decimal point and one or two fractional zero digits are used so that the scale of the zero value is preserved. Note that unlike the output of {@link #toString()}, the output of this method is not guaranteed to recover the same [integer, scale] pair of this {@code BigDecimal} if the output string is converting back to a {@code BigDecimal} using the {@linkplain #BigDecimal(String) string constructor}. The result of this method meets the weaker constraint of always producing a numerically equal result from applying the string constructor to the method's output. @return string representation of this {@code BigDecimal}, using engineering notation if an exponent is needed. @since 1.5
method,java/math/BigDecimal/toPlainString/, Returns a string representation of this {@code BigDecimal} without an exponent field. For values with a positive scale, the number of digits to the right of the decimal point is used to indicate scale. For values with a zero or negative scale, the resulting string is generated as if the value were converted to a numerically equal value with zero scale and as if all the trailing zeros of the zero scale value were present in the result. The entire string is prefixed by a minus sign character '-' ('&#92;u002D') if the unscaled value is less than zero. No sign character is prefixed if the unscaled value is zero or positive. Note that if the result of this method is passed to the {@linkplain #BigDecimal(String) string constructor}, only the numerical value of this {@code BigDecimal} will necessarily be recovered; the representation of the new {@code BigDecimal} may have a different scale. In particular, if this {@code BigDecimal} has a negative scale, the string resulting from this method will have a scale of zero when processed by the string constructor. (This method behaves analogously to the {@code toString} method in 1.4 and earlier releases.) @return a string representation of this {@code BigDecimal} without an exponent field. @since 1.5 @see #toString() @see #toEngineeringString()
method,java/math/BigDecimal/toBigInteger/, Converts this {@code BigDecimal} to a {@code BigInteger}. This conversion is analogous to a narrowing primitive conversion from {@code double} to {@code long} as defined in the Java Language Specification: any fractional part of this {@code BigDecimal} will be discarded. Note that this conversion can lose information about the precision of the {@code BigDecimal} value. To have an exception thrown if the conversion is inexact (in other words if a nonzero fractional part is discarded), use the {@link #toBigIntegerExact()} method. @return this {@code BigDecimal} converted to a {@code BigInteger}.
method,java/math/BigDecimal/longValue/, Converts this {@code BigDecimal} to a {@code long}. This conversion is analogous to a narrowing primitive conversion from {@code double} to {@code short} as defined in the Java Language Specification: any fractional part of this {@code BigDecimal} will be discarded, and if the resulting {@code BigInteger} is too big to fit in a {@code long}, only the low-order 64 bits are returned. Note that this conversion can lose information about the overall magnitude and precision of this {@code BigDecimal} value as well as return a result with the opposite sign. @return this {@code BigDecimal} converted to a {@code long}.
method,java/math/BigDecimal/intValue/, Converts this {@code BigDecimal} to an {@code int}. This conversion is analogous to a narrowing primitive conversion from {@code double} to {@code short} as defined in the Java Language Specification: any fractional part of this {@code BigDecimal} will be discarded, and if the resulting {@code BigInteger} is too big to fit in an {@code int}, only the low-order 32 bits are returned. Note that this conversion can lose information about the overall magnitude and precision of this {@code BigDecimal} value as well as return a result with the opposite sign. @return this {@code BigDecimal} converted to an {@code int}.
method,java/math/BigDecimal/floatValue/, Converts this {@code BigDecimal} to a {@code float}. This conversion is similar to the narrowing primitive conversion from {@code double} to {@code float} defined in the Java Language Specification: if this {@code BigDecimal} has too great a magnitude to represent as a {@code float}, it will be converted to {@link Float#NEGATIVE_INFINITY} or {@link Float#POSITIVE_INFINITY} as appropriate. Note that even when the return value is finite, this conversion can lose information about the precision of the {@code BigDecimal} value. @return this {@code BigDecimal} converted to a {@code float}.
method,java/math/BigDecimal/doubleValue/, Converts this {@code BigDecimal} to a {@code double}. This conversion is similar to the narrowing primitive conversion from {@code double} to {@code float} as defined in the Java Language Specification: if this {@code BigDecimal} has too great a magnitude represent as a {@code double}, it will be converted to {@link Double#NEGATIVE_INFINITY} or {@link Double#POSITIVE_INFINITY} as appropriate. Note that even when the return value is finite, this conversion can lose information about the precision of the {@code BigDecimal} value. @return this {@code BigDecimal} converted to a {@code double}.
method,java/math/BigDecimal/ulp/, Returns the size of an ulp, a unit in the last place, of this {@code BigDecimal}. An ulp of a nonzero {@code BigDecimal} value is the positive distance between this value and the {@code BigDecimal} value next larger in magnitude with the same number of digits. An ulp of a zero value is numerically equal to 1 with the scale of {@code this}. The result is stored with the same scale as {@code this} so the result for zero and nonzero values is equal to {@code [1, this.scale()]}. @return the size of an ulp of {@code this} @since 1.5
method,java/math/BigDecimal/BigDecimal/char[];int;int, Translates a character array representation of a {@code BigDecimal} into a {@code BigDecimal}, accepting the same sequence of characters as the {@link #BigDecimal(String)} constructor, while allowing a sub-array to be specified. Note that if the sequence of characters is already available within a character array, using this constructor is faster than converting the {@code char} array to string and using the {@code BigDecimal(String)} constructor . @param in {@code char} array that is the source of characters. @param offset first character in the array to inspect. @param len number of characters to consider. @throws NumberFormatException if {@code in} is not a valid representation of a {@code BigDecimal} or the defined subarray is not wholly within {@code in}. @since 1.5
method,java/math/BigDecimal/BigDecimal/char[];int;int;MathContext, Translates a character array representation of a {@code BigDecimal} into a {@code BigDecimal}, accepting the same sequence of characters as the {@link #BigDecimal(String)} constructor, while allowing a sub-array to be specified and with rounding according to the context settings. Note that if the sequence of characters is already available within a character array, using this constructor is faster than converting the {@code char} array to string and using the {@code BigDecimal(String)} constructor . @param in {@code char} array that is the source of characters. @param offset first character in the array to inspect. @param len number of characters to consider.. @param mc the context to use. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @throws NumberFormatException if {@code in} is not a valid representation of a {@code BigDecimal} or the defined subarray is not wholly within {@code in}. @since 1.5
method,java/math/BigDecimal/BigDecimal/char[], Translates a character array representation of a {@code BigDecimal} into a {@code BigDecimal}, accepting the same sequence of characters as the {@link #BigDecimal(String)} constructor. Note that if the sequence of characters is already available as a character array, using this constructor is faster than converting the {@code char} array to string and using the {@code BigDecimal(String)} constructor . @param in {@code char} array that is the source of characters. @throws NumberFormatException if {@code in} is not a valid representation of a {@code BigDecimal}. @since 1.5
method,java/math/BigDecimal/BigDecimal/char[];MathContext, Translates a character array representation of a {@code BigDecimal} into a {@code BigDecimal}, accepting the same sequence of characters as the {@link #BigDecimal(String)} constructor and with rounding according to the context settings. Note that if the sequence of characters is already available as a character array, using this constructor is faster than converting the {@code char} array to string and using the {@code BigDecimal(String)} constructor . @param in {@code char} array that is the source of characters. @param mc the context to use. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @throws NumberFormatException if {@code in} is not a valid representation of a {@code BigDecimal}. @since 1.5
method,java/math/BigDecimal/BigDecimal/double, Translates a {@code double} into a {@code BigDecimal} which is the exact decimal representation of the {@code double}'s binary floating-point value. The scale of the returned {@code BigDecimal} is the smallest value such that (10scale &times; val) is an integer. Notes: The results of this constructor can be somewhat unpredictable. One might assume that writing {@code new BigDecimal(0.1)} in Java creates a {@code BigDecimal} which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a {@code double} (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding. The {@code String} constructor, on the other hand, is perfectly predictable: writing {@code new BigDecimal(0.1)} creates a {@code BigDecimal} which is exactly equal to 0.1, as one would expect. Therefore, it is generally recommended that the {@linkplain #BigDecimal(String) String constructor} be used in preference to this one. When a {@code double} must be used as a source for a {@code BigDecimal}, note that this constructor provides an exact conversion; it does not give the same result as converting the {@code double} to a {@code String} using the {@link Double#toString(double)} method and then using the {@link #BigDecimal(String)} constructor. To get that result, use the {@code static} {@link #valueOf(double)} method. @param val {@code double} value to be converted to {@code BigDecimal}. @throws NumberFormatException if {@code val} is infinite or NaN.
method,java/math/BigDecimal/BigDecimal/int;MathContext, Translates an {@code int} into a {@code BigDecimal}, with rounding according to the context settings. The scale of the {@code BigDecimal}, before any rounding, is zero. @param val {@code int} value to be converted to {@code BigDecimal}. @param mc the context to use. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @since 1.5
method,java/math/BigDecimal/BigDecimal/long;MathContext, Translates a {@code long} into a {@code BigDecimal}, with rounding according to the context settings. The scale of the {@code BigDecimal}, before any rounding, is zero. @param val {@code long} value to be converted to {@code BigDecimal}. @param mc the context to use. @throws ArithmeticException if the result is inexact but the rounding mode is {@code UNNECESSARY}. @since 1.5
field,java/math/BigDecimal/ROUND_UP, Rounding mode to round away from zero. Always increments the digit prior to a nonzero discarded fraction. Note that this rounding mode never decreases the magnitude of the calculated value.
field,java/math/BigDecimal/ROUND_DOWN, Rounding mode to round towards zero. Never increments the digit prior to a discarded fraction (i.e., truncates). Note that this rounding mode never increases the magnitude of the calculated value.
field,java/math/BigDecimal/ROUND_CEILING, Rounding mode to round towards positive infinity. If the {@code BigDecimal} is positive, behaves as for {@code ROUND_UP}; if negative, behaves as for {@code ROUND_DOWN}. Note that this rounding mode never decreases the calculated value.
field,java/math/BigDecimal/ROUND_FLOOR, Rounding mode to round towards negative infinity. If the {@code BigDecimal} is positive, behave as for {@code ROUND_DOWN}; if negative, behave as for {@code ROUND_UP}. Note that this rounding mode never increases the calculated value.
field,java/math/BigDecimal/ROUND_HALF_UP, Rounding mode to round towards {@literal nearest neighbor} unless both neighbors are equidistant, in which case round up. Behaves as for {@code ROUND_UP} if the discarded fraction is &ge; 0.5; otherwise, behaves as for {@code ROUND_DOWN}. Note that this is the rounding mode that most of us were taught in grade school.
field,java/math/BigDecimal/ROUND_HALF_EVEN, Rounding mode to round towards the {@literal nearest neighbor} unless both neighbors are equidistant, in which case, round towards the even neighbor. Behaves as for {@code ROUND_HALF_UP} if the digit to the left of the discarded fraction is odd; behaves as for {@code ROUND_HALF_DOWN} if it's even. Note that this is the rounding mode that minimizes cumulative error when applied repeatedly over a sequence of calculations.
field,java/math/BigDecimal/ROUND_UNNECESSARY, Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary. If this rounding mode is specified on an operation that yields an inexact result, an {@code ArithmeticException} is thrown.
class,java/security/UnresolvedPermission, The UnresolvedPermission class is used to hold Permissions that were unresolved when the Policy was initialized. An unresolved permission is one whose actual Permission class does not yet exist at the time the Policy is initialized (see below). The policy for a Java runtime (specifying which permissions are available for code from various principals) is represented by a Policy object. Whenever a Policy is initialized or refreshed, Permission objects of appropriate classes are created for all permissions allowed by the Policy. Many permission class types referenced by the policy configuration are ones that exist locally (i.e., ones that can be found on CLASSPATH). Objects for such permissions can be instantiated during Policy initialization. For example, it is always possible to instantiate a java.io.FilePermission, since the FilePermission class is found on the CLASSPATH. Other permission classes may not yet exist during Policy initialization. For example, a referenced permission class may be in a JAR file that will later be loaded. For each such class, an UnresolvedPermission is instantiated. Thus, an UnresolvedPermission is essentially a placeholder containing information about the permission. Later, when code calls AccessController.checkPermission on a permission of a type that was previously unresolved, but whose class has since been loaded, previously-unresolved permissions of that type are resolved. That is, for each such UnresolvedPermission, a new object of the appropriate class type is instantiated, based on the information in the UnresolvedPermission. To instantiate the new class, UnresolvedPermission assumes the class provides a zero, one, and/or two-argument constructor. The zero-argument constructor would be used to instantiate a permission without a name and without actions. A one-arg constructor is assumed to take a String name as input, and a two-arg constructor is assumed to take a String name and String actions as input. UnresolvedPermission may invoke a constructor with a null name and/or actions. If an appropriate permission constructor is not available, the UnresolvedPermission is ignored and the relevant permission will not be granted to executing code. The newly created permission object replaces the UnresolvedPermission, which is removed. Note that the getName method for an UnresolvedPermission returns the type (class name) for the underlying permission that has not been resolved. @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @see java.security.Policy @version 1.32 10/03/23 @author Roland Schemers
method,java/security/UnresolvedPermission/implies/Permission, This method always returns false for unresolved permissions. That is, an UnresolvedPermission is never considered to imply another permission. @param p the permission to check against. @return false.
method,java/security/UnresolvedPermission/equals/Object, Checks two UnresolvedPermission objects for equality. Checks that obj is an UnresolvedPermission, and has the same type (class) name, permission name, actions, and certificates as this object. To determine certificate equality, this method only compares actual signer certificates. Supporting certificate chains are not taken into consideration by this method. @param obj the object we are testing for equality with this object. @return true if obj is an UnresolvedPermission, and has the same type (class) name, permission name, actions, and certificates as this object.
method,java/security/UnresolvedPermission/getActions/, Returns the canonical string representation of the actions, which currently is the empty string , since there are no actions for an UnresolvedPermission. That is, the actions for the permission that will be created when this UnresolvedPermission is resolved may be non-null, but an UnresolvedPermission itself is never considered to have any actions. @return the empty string .
method,java/security/UnresolvedPermission/getUnresolvedCerts/, Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved. @return the signer certificates for the underlying permission that has not been resolved, or null, if there are no signer certificates. Returns a new array each time this method is called. @since 1.5
method,java/security/Timestamp/equals/Object, Tests for equality between the specified object and this timestamp. Two timestamps are considered equal if the date and time of their timestamp's and their signer's certificate paths are equal. @param obj the object to test for equality with this timestamp. @return true if the timestamp are considered equal, false otherwise.
method,java/security/Signer/getPrivateKey/, Returns this signer's private key. First, if there is a security manager, its checkSecurityAccess method is called with getSignerPrivateKey as its argument to see if it's ok to return the private key. @return this signer's private key, or null if the private key has not yet been set. @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow returning the private key. @see SecurityManager#checkSecurityAccess
method,java/security/Signer/setKeyPair/KeyPair, Sets the key pair (public key and private key) for this signer. First, if there is a security manager, its checkSecurityAccess method is called with setSignerKeyPair as its argument to see if it's ok to set the key pair. @param pair an initialized key pair. @exception InvalidParameterException if the key pair is not properly initialized. @exception KeyException if the key pair cannot be set for any other reason. @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow setting the key pair. @see SecurityManager#checkSecurityAccess
method,java/security/SignedObject/getObject/, Retrieves the encapsulated object. The encapsulated object is de-serialized before it is returned. @return the encapsulated object. @exception IOException if an error occurs during de-serialization @exception ClassNotFoundException if an error occurs during de-serialization
method,java/security/SignedObject/getSignature/, Retrieves the signature on the signed object, in the form of a byte array. @return the signature. Returns a new array each time this method is called.
method,java/security/SignedObject/SignedObject/Serializable;PrivateKey;Signature, Constructs a SignedObject from any Serializable object. The given object is signed with the given signing key, using the designated signature engine. @param object the object to be signed. @param signingKey the private key for signing. @param signingEngine the signature signing engine. @exception IOException if an error occurs during serialization @exception InvalidKeyException if the key is invalid. @exception SignatureException if signing fails.
class,java/security/SignatureSpi, This class defines the Service Provider Interface (SPI) for the Signature class, which is used to provide the functionality of a digital signature algorithm. Digital signatures are used for authentication and integrity assurance of digital data.. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular signature algorithm. @author Benjamin Renaud @version 1.27, 03/23/10 @see Signature
method,java/security/SignatureSpi/engineSetParameter/String;Object, Sets the specified algorithm parameter to the specified value. This method supplies a general-purpose mechanism through which it is possible to set the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time. @param param the string identifier of the parameter. @param value the parameter value. @exception InvalidParameterException if param is an invalid parameter for this signature algorithm engine, the parameter is already set and cannot be set again, a security exception occurs, and so on. @deprecated Replaced by {@link #engineSetParameter(java.security.spec.AlgorithmParameterSpec) engineSetParameter}.
method,java/security/SignatureSpi/engineSetParameter/AlgorithmParameterSpec, This method is overridden by providers to initialize this signature engine with the specified parameter set. @param params the parameters @exception UnsupportedOperationException if this method is not overridden by a provider @exception InvalidAlgorithmParameterException if this method is overridden by a provider and the the given parameters are inappropriate for this signature engine
method,java/security/SignatureSpi/engineGetParameter/String, Gets the value of the specified algorithm parameter. This method supplies a general-purpose mechanism through which it is possible to get the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time. @param param the string name of the parameter. @return the object that represents the parameter value, or null if there is none. @exception InvalidParameterException if param is an invalid parameter for this engine, or another exception occurs while trying to get this parameter. @deprecated
method,java/security/SignatureSpi/clone/, Returns a clone if the implementation is cloneable. @return a clone if the implementation is cloneable. @exception CloneNotSupportedException if this is called on an implementation that does not support Cloneable.
method,java/security/Signature/getInstance/String, Returns a Signature object that implements the specified signature algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new Signature object encapsulating the SignatureSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param algorithm the standard name of the algorithm requested. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @return the new Signature object. @exception NoSuchAlgorithmException if no Provider supports a Signature implementation for the specified algorithm. @see Provider
method,java/security/Signature/getInstance/String;Provider, Returns a Signature object that implements the specified signature algorithm. A new Signature object encapsulating the SignatureSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param algorithm the name of the algorithm requested. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @param provider the provider. @return the new Signature object. @exception NoSuchAlgorithmException if a SignatureSpi		implementation for the specified algorithm is not available		from the specified Provider object. @exception IllegalArgumentException if the provider is null. @see Provider @since 1.4
method,java/security/Signature/initVerify/PublicKey, Initializes this object for verification. If this method is called again with a different argument, it negates the effect of this call. @param publicKey the public key of the identity whose signature is going to be verified. @exception InvalidKeyException if the key is invalid.
method,java/security/Signature/initSign/PrivateKey, Initialize this object for signing. If this method is called again with a different argument, it negates the effect of this call. @param privateKey the private key of the identity whose signature is going to be generated. @exception InvalidKeyException if the key is invalid. 
method,java/security/Signature/initSign/PrivateKey;SecureRandom, Initialize this object for signing. If this method is called again with a different argument, it negates the effect of this call. @param privateKey the private key of the identity whose signature is going to be generated. @param random the source of randomness for this signature. @exception InvalidKeyException if the key is invalid. 
method,java/security/Signature/sign/, Returns the signature bytes of all the data updated. The format of the signature depends on the underlying signature scheme. A call to this method resets this signature object to the state it was in when previously initialized for signing via a call to initSign(PrivateKey). That is, the object is reset and available to generate another signature from the same signer, if desired, via new calls to update and sign. @return the signature bytes of the signing operation's result. @exception SignatureException if this signature object is not initialized properly or if this signature algorithm is unable to process the input data provided.
method,java/security/Signature/verify/byte[], Verifies the passed-in signature. A call to this method resets this signature object to the state it was in when previously initialized for verification via a call to initVerify(PublicKey). That is, the object is reset and available to verify another signature from the identity whose public key was specified in the call to initVerify. @param signature the signature bytes to be verified. @return true if the signature was verified, false if not. @exception SignatureException if this signature object is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc.
method,java/security/Signature/verify/byte[];int;int, Verifies the passed-in signature in the specified array of bytes, starting at the specified offset. A call to this method resets this signature object to the state it was in when previously initialized for verification via a call to initVerify(PublicKey). That is, the object is reset and available to verify another signature from the identity whose public key was specified in the call to initVerify. @param signature the signature bytes to be verified. @param offset the offset to start from in the array of bytes. @param length the number of bytes to use, starting at offset. @return true if the signature was verified, false if not. @exception SignatureException if this signature object is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc. @exception IllegalArgumentException if the signature byte array is null, or the offset or length is less than 0, or the sum of the offset and length is greater than the length of the signature byte array. @since 1.4
method,java/security/Signature/setParameter/String;Object, Sets the specified algorithm parameter to the specified value. This method supplies a general-purpose mechanism through which it is possible to set the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time. @param param the string identifier of the parameter. @param value the parameter value. @exception InvalidParameterException if param is an invalid parameter for this signature algorithm engine, the parameter is already set and cannot be set again, a security exception occurs, and so on. @see #getParameter @deprecated Use {@link #setParameter(java.security.spec.AlgorithmParameterSpec) setParameter}.
method,java/security/Signature/getParameter/String, Gets the value of the specified algorithm parameter. This method supplies a general-purpose mechanism through which it is possible to get the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time. @param param the string name of the parameter. @return the object that represents the parameter value, or null if there is none. @exception InvalidParameterException if param is an invalid parameter for this engine, or another exception occurs while trying to get this parameter. @see #setParameter(String, Object) @deprecated
method,java/security/Signature/clone/, Returns a clone if the implementation is cloneable. @return a clone if the implementation is cloneable. @exception CloneNotSupportedException if this is called on an implementation that does not support Cloneable.
class,java/security/SecurityPermission, This class is for security permissions. A SecurityPermission contains a name (also referred to as a target name) but no actions list; you either have the named permission or you don't. The target name is the name of a security configuration parameter (see below). Currently the SecurityPermission object is used to guard access to the Policy, Security, Provider, Signer, and Identity objects. The following table lists all the possible SecurityPermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission. Permission Target Name What the Permission Allows Risks of Allowing this Permission createAccessControlContext Creation of an AccessControlContext This allows someone to instantiate an AccessControlContext with a DomainCombiner. Since DomainCombiners are given a reference to the ProtectionDomains currently on the stack, this could potentially lead to a privacy leak if the DomainCombiner is malicious. getDomainCombiner Retrieval of an AccessControlContext's DomainCombiner This allows someone to retrieve an AccessControlContext's DomainCombiner. Since DomainCombiners may contain sensitive information, this could potentially lead to a privacy leak. getPolicy Retrieval of the system-wide security policy (specifically, of the currently-installed Policy object) This allows someone to query the policy via the getPermissions call, which discloses which permissions would be granted to a given CodeSource. While revealing the policy does not compromise the security of the system, it does provide malicious code with additional information which it may use to better aim an attack. It is wise not to divulge more information than necessary. setPolicy Setting of the system-wide security policy (specifically, the Policy object) Granting this permission is extremely dangerous, as malicious code may grant itself all the necessary permissions it needs to successfully mount an attack on the system. createPolicy.{policy type} Getting an instance of a Policy implementation from a provider Granting this permission enables code to obtain a Policy object. Malicious code may query the Policy object to determine what permissions have been granted to code other than itself. getProperty.{key} Retrieval of the security property with the specified key Depending on the particular key for which access has been granted, the code may have access to the list of security providers, as well as the location of the system-wide and user security policies. while revealing this information does not compromise the security of the system, it does provide malicious code with additional information which it may use to better aim an attack. setProperty.{key} Setting of the security property with the specified key This could include setting a security provider or defining the location of the the system-wide security policy. Malicious code that has permission to set a new security provider may set a rogue provider that steals confidential information such as cryptographic private keys. In addition, malicious code with permission to set the location of the system-wide security policy may point it to a security policy that grants the attacker all the necessary permissions it requires to successfully mount an attack on the system. insertProvider.{provider name} Addition of a new provider, with the specified name This would allow somebody to introduce a possibly malicious provider (e.g., one that discloses the private keys passed to it) as the highest-priority provider. This would be possible because the Security object (which manages the installed providers) currently does not check the integrity or authenticity of a provider before attaching it. removeProvider.{provider name} Removal of the specified provider This may change the behavior or disable execution of other parts of the program. If a provider subsequently requested by the program has been removed, execution may fail. Also, if the removed provider is not explicitly requested by the rest of the program, but it would normally be the provider chosen when a cryptography service is requested (due to its previous order in the list of providers), a different provider will be chosen instead, or no suitable provider will be found, thereby resulting in program failure. setSystemScope Setting of the system identity scope This would allow an attacker to configure the system identity scope with certificates that should not be trusted, thereby granting applet or application code signed with those certificates privileges that would have been denied by the system's original identity scope setIdentityPublicKey Setting of the public key for an Identity If the identity is marked as trusted, this allows an attacker to introduce a different public key (e.g., its own) that is not trusted by the system's identity scope, thereby granting applet or application code signed with that public key privileges that would have been denied otherwise. setIdentityInfo Setting of a general information string for an Identity This allows attackers to set the general description for an identity. This may trick applications into using a different identity than intended or may prevent applications from finding a particular identity. addIdentityCertificate Addition of a certificate for an Identity This allows attackers to set a certificate for an identity's public key. This is dangerous because it affects the trust relationship across the system. This public key suddenly becomes trusted to a wider audience than it otherwise would be. removeIdentityCertificate Removal of a certificate for an Identity This allows attackers to remove a certificate for an identity's public key. This is dangerous because it affects the trust relationship across the system. This public key suddenly becomes considered less trustworthy than it otherwise would be. printIdentity Viewing the name of a principal and optionally the scope in which it is used, and whether or not it is considered trusted in that scope The scope that is printed out may be a filename, in which case it may convey local system information. For example, here's a sample printout of an identity named carol, who is marked not trusted in the user's identity database: carol[/home/luehe/identitydb.obj][not trusted] clearProviderProperties.{provider name} Clearing of a Provider so that it no longer contains the properties used to look up services implemented by the provider This disables the lookup of services implemented by the provider. This may thus change the behavior or disable execution of other parts of the program that would normally utilize the Provider, as described under the removeProvider.{provider name} permission. putProviderProperty.{provider name} Setting of properties for the specified Provider The provider properties each specify the name and location of a particular service implemented by the provider. By granting this permission, you let code replace the service specification with another one, thereby specifying a different implementation. removeProviderProperty.{provider name} Removal of properties from the specified Provider This disables the lookup of services implemented by the provider. They are no longer accessible due to removal of the properties specifying their names and locations. This may change the behavior or disable execution of other parts of the program that would normally utilize the Provider, as described under the removeProvider.{provider name} permission. getSignerPrivateKey Retrieval of a Signer's private key It is very dangerous to allow access to a private key; private keys are supposed to be kept secret. Otherwise, code can use the private key to sign various files and claim the signature came from the Signer. setSignerKeyPair Setting of the key pair (public key and private key) for a Signer This would allow an attacker to replace somebody else's (the target's) keypair with a possibly weaker keypair (e.g., a keypair of a smaller keysize). This also would allow the attacker to listen in on encrypted communication between the target and its peers. The target's peers might wrap an encryption session key under the target's new public key, which would allow the attacker (who possesses the corresponding private key) to unwrap the session key and decipher the communication data encrypted under that session key. @see java.security.BasicPermission @see java.security.Permission @see java.security.Permissions @see java.security.PermissionCollection @see java.lang.SecurityManager @version 1.31 10/03/23 @author Marianne Mueller @author Roland Schemers
method,java/security/Security/getAlgorithmProperty/String;String, Gets a specified property for an algorithm. The algorithm name should be a standard name. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. One possible use is by specialized algorithm parsers, which may map classes to algorithms which they understand (much like Key parsers do). @param algName the algorithm name. @param propName the name of the property to get. @return the value of the specified property. @deprecated This method used to return the value of a proprietary property in the master file of the SUN Cryptographic Service Provider in order to determine how to parse algorithm-specific parameters. Use the new provider-based and algorithm-independent AlgorithmParameters and KeyFactory engine classes (introduced in the J2SE version 1.2 platform) instead.
method,java/security/Security/insertProviderAt/Provider;int, Adds a new provider, at a specified position. The position is the preference order in which providers are searched for requested algorithms. The position is 1-based, that is, 1 is most preferred, followed by 2, and so on. If the given provider is installed at the requested position, the provider that used to be at that position, and all providers with a position greater than position, are shifted up one position (towards the end of the list of installed providers). A provider cannot be added if it is already installed. First, if there is a security manager, its checkSecurityAccess method is called with the string insertProvider.+provider.getName() to see if it's ok to add a new provider. If the default implementation of checkSecurityAccess is used (i.e., that method is not overriden), then this will result in a call to the security manager's checkPermission method with a SecurityPermission(insertProvider.+provider.getName()) permission. @param provider the provider to be added. @param position the preference position that the caller would like for this provider. @return the actual preference position in which the provider was added, or -1 if the provider was not added because it is already installed. @throws NullPointerException if provider is null @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to add a new provider @see #getProvider @see #removeProvider @see java.security.SecurityPermission
method,java/security/Security/addProvider/Provider, Adds a provider to the next position available. First, if there is a security manager, its checkSecurityAccess method is called with the string insertProvider.+provider.getName() to see if it's ok to add a new provider. If the default implementation of checkSecurityAccess is used (i.e., that method is not overriden), then this will result in a call to the security manager's checkPermission method with a SecurityPermission(insertProvider.+provider.getName()) permission. @param provider the provider to be added. @return the preference position in which the provider was added, or -1 if the provider was not added because it is already installed. @throws NullPointerException if provider is null @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to add a new provider @see #getProvider @see #removeProvider @see java.security.SecurityPermission
method,java/security/Security/removeProvider/String, Removes the provider with the specified name. When the specified provider is removed, all providers located at a position greater than where the specified provider was are shifted down one position (towards the head of the list of installed providers). This method returns silently if the provider is not installed or if name is null. First, if there is a security manager, its checkSecurityAccess method is called with the string removeProvider.+name to see if it's ok to remove the provider. If the default implementation of checkSecurityAccess is used (i.e., that method is not overriden), then this will result in a call to the security manager's checkPermission method with a SecurityPermission(removeProvider.+name) permission. @param name the name of the provider to remove. @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to remove the provider @see #getProvider @see #addProvider
method,java/security/Security/getProviders/Map, Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed. The returned providers are ordered according to their preference order. The selection criteria are represented by a map. Each map entry represents a selection criterion. A provider is selected iff it satisfies all selection criteria. The key for any entry in such a map must be in one of the following two formats: &lt;crypto_service>.&lt;algorithm_or_type> The cryptographic service name must not contain any dots. The value associated with the key must be an empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service. &lt;crypto_service>.&lt;algorithm_or_type> &lt;attribute_name> The cryptographic service name must not contain any dots. There must be one or more space charaters between the &lt;algorithm_or_type> and the &lt;attribute_name>. The value associated with the key must be a non-empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service and its implementation meets the constraint expressed by the specified attribute name/value pair. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard cryptographic service names, standard algorithm names and standard attribute names. @param filter the criteria for selecting providers. The filter is case-insensitive. @return all the installed providers that satisfy the selection criteria, or null if no such providers have been installed. @throws InvalidParameterException if the filter is not in the required format @throws NullPointerException if filter is null @see #getProviders(java.lang.String) @since 1.3
method,java/security/Security/getProperty/String, Gets a security property value. First, if there is a security manager, its checkPermission method is called with a java.security.SecurityPermission(getProperty.+key) permission to see if it's ok to retrieve the specified security property value.. @param key the key of the property being retrieved. @return the value of the security property corresponding to key. @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkPermission} method denies access to retrieve the specified security property value @throws NullPointerException is key is null @see #setProperty @see java.security.SecurityPermission
method,java/security/Security/setProperty/String;String, Sets a security property value. First, if there is a security manager, its checkPermission method is called with a java.security.SecurityPermission(setProperty.+key) permission to see if it's ok to set the specified security property value. @param key the name of the property to be set. @param datum the value of the property to be set. @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkPermission} method denies access to set the specified security property value @throws NullPointerException if key or datum is null @see #getProperty @see java.security.SecurityPermission
method,java/security/Security/getAlgorithms/String, Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Returns an empty Set if there is no provider that supports the specified service or if serviceName is null. For a complete list of Java cryptographic services, please see the Java Cryptography Architecture API Specification &amp; Reference. Note: the returned set is immutable. @param serviceName the name of the Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Note: this parameter is case-insensitive. @return a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service or an empty set if no provider supports the specified service. @since 1.4
class,java/security/SecureRandomSpi, This class defines the Service Provider Interface (SPI) for the SecureRandom class. All the abstract methods in this class must be implemented by each service provider who wishes to supply the implementation of a cryptographically strong pseudo-random number generator. @version 1.14, 03/23/10 @see SecureRandom @since 1.2
method,java/security/SecureRandomSpi/engineNextBytes/byte[], Generates a user-specified number of random bytes. If a call to engineSetSeed had not occurred previously, the first call to this method forces this SecureRandom implementation to seed itself. This self-seeding will not occur if engineSetSeed was previously called. @param bytes the array to be filled in with random bytes.
method,java/security/SecureRandomSpi/engineGenerateSeed/int, Returns the given number of seed bytes. This call may be used to seed other random number generators. @param numBytes the number of seed bytes to generate. @return the seed bytes.
method,java/security/SecureRandom/getInstance/String, Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called. @param algorithm the name of the RNG algorithm. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard RNG algorithm names. @return the new SecureRandom object. @exception NoSuchAlgorithmException if no Provider supports a		SecureRandomSpi implementation for the		specified algorithm. @see Provider @since 1.2
method,java/security/SecureRandom/getInstance/String;Provider, Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called. @param algorithm the name of the RNG algorithm. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard RNG algorithm names. @param provider the provider. @return the new SecureRandom object. @exception NoSuchAlgorithmException if a SecureRandomSpi		implementation for the specified algorithm is not available		from the specified Provider object. @exception IllegalArgumentException if the specified provider is null. @see Provider @since 1.4
method,java/security/SecureRandom/nextBytes/byte[], Generates a user-specified number of random bytes. If a call to setSeed had not occurred previously, the first call to this method forces this SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called. @param bytes the array to be filled in with random bytes.
method,java/security/SecureRandom/next/int, Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros). This method overrides a java.util.Random method, and serves to provide a source of random bits to all of the methods inherited from that class (for example, nextInt, nextLong, and nextFloat). @param numBits number of pseudo-random bits to be generated, where 0 numBits int containing the user-specified number of pseudo-random bits (right justified, with leading zeros).
method,java/security/SecureRandom/generateSeed/int, Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself. This call may be used to seed other random number generators. @param numBytes the number of seed bytes to generate. @return the seed bytes.
method,java/security/SecureRandom/SecureRandom/, Constructs a secure random number generator (RNG) implementing the default random number algorithm. This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard RNG algorithm names. The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if setSeed was previously called.
method,java/security/SecureRandom/SecureRandom/byte[], Constructs a secure random number generator (RNG) implementing the default random number algorithm. The SecureRandom instance is seeded with the specified seed bytes. This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard RNG algorithm names. @param seed the seed.
class,java/security/SecureClassLoader, This class extends ClassLoader with additional support for defining classes with an associated code source and permissions which are retrieved by the system policy by default. @version 1.89, 03/23/10 @author Li Gong @author Roland Schemers
method,java/security/SecureClassLoader/getPermissions/CodeSource, Returns the permissions for the given CodeSource object. This method is invoked by the defineClass method which takes a CodeSource as an argument when it is constructing the ProtectionDomain for the class being defined. @param codesource the codesource. @return the permissions granted to the codesource.
method,java/security/SecureClassLoader/SecureClassLoader/ClassLoader, Creates a new SecureClassLoader using the specified parent class loader for delegation. If there is a security manager, this method first calls the security manager's checkCreateClassLoader method to ensure creation of a class loader is allowed. @param parent the parent ClassLoader @exception SecurityException if a security manager exists and its checkCreateClassLoader method doesn't allow creation of a class loader. @see SecurityManager#checkCreateClassLoader
method,java/security/SecureClassLoader/SecureClassLoader/, Creates a new SecureClassLoader using the default parent class loader for delegation. If there is a security manager, this method first calls the security manager's checkCreateClassLoader method to ensure creation of a class loader is allowed. @exception SecurityException if a security manager exists and its checkCreateClassLoader method doesn't allow creation of a class loader. @see SecurityManager#checkCreateClassLoader
interface,java/security/PublicKey, A public key. This interface contains no methods or constants. It merely serves to group (and provide type safety for) all public key interfaces. Note: The specialized public key interfaces extend this interface. See, for example, the DSAPublicKey interface in java.security.interfaces. @see Key @see PrivateKey @see Certificate @see Signature#initVerify @see java.security.interfaces.DSAPublicKey @see java.security.interfaces.RSAPublicKey @version 1.34 10/03/23
method,java/security/Provider/getInfo/, Returns a human-readable description of the provider and its services. This may return an HTML page, with relevant links. @return a description of the provider and its services.
method,java/security/Provider/clear/, Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider. First, if there is a security manager, its checkSecurityAccess method is called with the string clearProviderProperties.+name (where name is the provider name) to see if it's ok to clear this provider. If the default implementation of checkSecurityAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a SecurityPermission(clearProviderProperties.+name) permission. @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to clear this provider @since 1.2
method,java/security/Provider/load/InputStream, Reads a property list (key and element pairs) from the input stream. @param inStream the input stream. @exception IOException if an error occurred when reading from the input stream. @see java.util.Properties#load
method,java/security/Provider/put/Object;Object, Sets the key property to have the specified value. First, if there is a security manager, its checkSecurityAccess method is called with the string putProviderProperty.+name, where name is the provider name, to see if it's ok to set this provider's property values. If the default implementation of checkSecurityAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a SecurityPermission(putProviderProperty.+name) permission. @param key the property key. @param value the property value. @return the previous value of the specified property (key), or null if it did not have one. @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to set property values. @since 1.2
method,java/security/Provider/remove/Object, Removes the key property (and its corresponding value). First, if there is a security manager, its checkSecurityAccess method is called with the string removeProviderProperty.+name, where name is the provider name, to see if it's ok to remove this provider's properties. If the default implementation of checkSecurityAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a SecurityPermission(removeProviderProperty.+name) permission. @param key the key for the property to be removed. @return the value to which the key had been mapped, or null if the key did not have a mapping. @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to remove this provider's properties. @since 1.2
method,java/security/Provider/putService/Service, Add a service. If a service of the same type with the same algorithm name exists and it was added using {@link #putService putService()}, it is replaced by the new service. This method also places information about this service in the provider's Hashtable values in the format described in the Java Cryptography Architecture API Specification &amp; Reference . Also, if there is a security manager, its checkSecurityAccess method is called with the string putProviderProperty.+name, where name is the provider name, to see if it's ok to set this provider's property values. If the default implementation of checkSecurityAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a SecurityPermission(putProviderProperty.+name) permission. @param s the Service to add @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to set property values. @throws NullPointerException if s is null @since 1.5
method,java/security/Provider/removeService/Service, Remove a service previously added using {@link #putService putService()}. The specified service is removed from this provider. It will no longer be returned by {@link #getService getService()} and its information will be removed from this provider's Hashtable. Also, if there is a security manager, its checkSecurityAccess method is called with the string removeProviderProperty.+name, where name is the provider name, to see if it's ok to remove this provider's properties. If the default implementation of checkSecurityAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a SecurityPermission(removeProviderProperty.+name) permission. @param s the Service to be removed @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to remove this provider's properties. @throws NullPointerException if s is null @since 1.5
class,java/security/Provider/Service, The description of a security service. It encapsulates the properties of a service and contains a factory method to obtain new implementation instances of this service. Each service has a provider that offers the service, a type, an algorithm name, and the name of the class that implements the service. Optionally, it also includes a list of alternate algorithm names for this service (aliases) and attributes, which are a map of (name, value) String pairs. This class defines the methods {@link #supportsParameter supportsParameter()} and {@link #newInstance newInstance()} which are used by the Java security framework when it searches for suitable services and instantes them. The valid arguments to those methods depend on the type of service. For the service types defined within Java SE, see the Java Cryptography Architecture API Specification &amp; Reference for the valid values. Note that components outside of Java SE can define additional types of services and their behavior. Instances of this class are immutable. @since 1.5
method,java/security/Provider/Service/newInstance/Object, Return a new instance of the implementation described by this service. The security provider framework uses this method to construct implementations. Applications will typically not need to call it. The default implementation uses reflection to invoke the standard constructor for this type of service. Security providers can override this method to implement instantiation in a different way. For details and the values of constructorParameter that are valid for the various types of services see the Java Cryptography Architecture API Specification &amp; Reference. @param constructorParameter the value to pass to the constructor, or null if this type of service does not use a constructorParameter. @return a new implementation of this service @throws InvalidParameterException if the value of constructorParameter is invalid for this type of service. @throws NoSuchAlgorithmException if instantation failed for any other reason.
method,java/security/Provider/Service/supportsParameter/Object, Test whether this Service can use the specified parameter. Returns false if this service cannot use the parameter. Returns true if this service can use the parameter, if a fast test is infeasible, or if the status is unknown. The security provider framework uses this method with some types of services to quickly exclude non-matching implementations for consideration. Applications will typically not need to call it. For details and the values of parameter that are valid for the various types of services see the top of this class and the Java Cryptography Architecture API Specification &amp; Reference. Security providers can override it to implement their own test. @param parameter the parameter to test @return false if this this service cannot use the specified parameter; true if it can possibly use the parameter @throws InvalidParameterException if the value of parameter is invalid for this type of service or if this method cannot be used with this type of service
method,java/security/ProtectionDomain/getCodeSource/, Returns the CodeSource of this domain. @return the CodeSource of this domain which may be null. @since 1.2
method,java/security/ProtectionDomain/getClassLoader/, Returns the ClassLoader of this domain. @return the ClassLoader of this domain which may be null. @since 1.4
method,java/security/ProtectionDomain/getPrincipals/, Returns an array of principals for this domain. @return a non-null array of principals for this domain. Returns a new array each time this method is called. @since 1.4
method,java/security/ProtectionDomain/getPermissions/, Returns the static permissions granted to this domain. @return the static set of permissions for this domain which may be null. @see Policy#refresh @see Policy#getPermissions(ProtectionDomain)
method,java/security/ProtectionDomain/implies/Permission, Check and see if this ProtectionDomain implies the permissions expressed in the Permission object. The set of permissions evaluated is a function of whether the ProtectionDomain was constructed with a static set of permissions or it was bound to a dynamically mapped set of permissions. If the ProtectionDomain was constructed to a {@link #ProtectionDomain(CodeSource, PermissionCollection) statically bound} PermissionCollection then the permission will only be checked against the PermissionCollection supplied at construction. However, if the ProtectionDomain was constructed with the constructor variant which supports {@link #ProtectionDomain(CodeSource, PermissionCollection, ClassLoader, java.security.Principal[]) dynamically binding} permissions, then the permission will be checked against the combination of the PermissionCollection supplied at construction and the current Policy binding. @param permission the Permission object to check. @return true if permission is implicit to this ProtectionDomain.
method,java/security/ProtectionDomain/ProtectionDomain/CodeSource;PermissionCollection, Creates a new ProtectionDomain with the given CodeSource and Permissions. If the permissions object is not null, then setReadOnly()) will be called on the passed in Permissions object. The only permissions granted to this domain are the ones specified; the current Policy will not be consulted. @param codesource the codesource associated with this domain @param permissions the permissions granted to this domain
method,java/security/ProtectionDomain/ProtectionDomain/CodeSource;PermissionCollection;ClassLoader;Principal[], Creates a new ProtectionDomain qualified by the given CodeSource, Permissions, ClassLoader and array of Principals. If the permissions object is not null, then setReadOnly() will be called on the passed in Permissions object. The permissions granted to this domain are dynamic; they include both the static permissions passed to this constructor, and any permissions granted to this domain by the current Policy at the time a permission is checked. This constructor is typically used by {@link SecureClassLoader ClassLoaders} and {@link DomainCombiner DomainCombiners} which delegate to Policy to actively associate the permissions granted to this domain. This constructor affords the Policy provider the opportunity to augment the supplied PermissionCollection to reflect policy changes. @param codesource the CodeSource associated with this domain @param permissions the permissions granted to this domain @param classloader the ClassLoader associated with this domain @param principals the array of Principals associated with this domain. The contents of the array are copied to protect against subsequent modification. @see Policy#refresh @see Policy#getPermissions(ProtectionDomain) @since 1.4
method,java/security/PrivilegedExceptionAction/run/, Performs the computation. This method will be called by AccessController.doPrivileged after enabling privileges. @return a class-dependent value that may represent the results of the	 computation. Each class that implements	 PrivilegedExceptionAction should document what (if anything) this value represents. @throws Exception an exceptional condition has occurred. Each class	 that implements PrivilegedExceptionAction should document the exceptions that its run method can throw. @see AccessController#doPrivileged(PrivilegedExceptionAction) @see AccessController#doPrivileged(PrivilegedExceptionAction,AccessControlContext)
class,java/security/PrivilegedActionException, This exception is thrown by doPrivileged(PrivilegedExceptionAction) and doPrivileged(PrivilegedExceptionAction, AccessControlContext context) to indicate that the action being performed threw a checked exception. The exception thrown by the action can be obtained by calling the getException method. In effect, an PrivilegedActionException is a wrapper for an exception thrown by a privileged action. As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The exception thrown by the privileged computation that is provided at construction time and accessed via the {@link #getException()} method is now known as the cause, and may be accessed via the {@link Throwable#getCause()} method, as well as the aforementioned legacy method. @see PrivilegedExceptionAction @see AccessController#doPrivileged(PrivilegedExceptionAction) @see AccessController#doPrivileged(PrivilegedExceptionAction,AccessControlContext)
method,java/security/PrivilegedAction/run/, Performs the computation. This method will be called by AccessController.doPrivileged after enabling privileges. @return a class-dependent value that may represent the results of the	 computation. Each class that implements PrivilegedAction	 should document what (if anything) this value represents. @see AccessController#doPrivileged(PrivilegedAction) @see AccessController#doPrivileged(PrivilegedAction, AccessControlContext)
interface,java/security/PrivateKey, A private key. This interface contains no methods or constants. It merely serves to group (and provide type safety for) all private key interfaces. Note: The specialized private key interfaces extend this interface. See, for example, the DSAPrivateKey interface in java.security.interfaces. @see Key @see PublicKey @see Certificate @see Signature#initVerify @see java.security.interfaces.DSAPrivateKey @see java.security.interfaces.RSAPrivateKey @see java.security.interfaces.RSAPrivateCrtKey @version 1.31 10/03/23 @author Benjamin Renaud @author Josh Bloch
method,java/security/PolicySpi/engineRefresh/, Refreshes/reloads the policy configuration. The behavior of this method depends on the implementation. For example, calling refresh on a file-based policy will cause the file to be re-read. The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by the policy implementation.
method,java/security/PolicySpi/engineGetPermissions/CodeSource, Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource. The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden if the policy implementation can return a set of permissions granted to a CodeSource. @param codesource the CodeSource to which the returned		PermissionCollection has been granted. @return a set of permissions granted to the specified CodeSource.		If this operation is supported, the returned		set of permissions must be a new mutable instance		and it must support heterogeneous Permission types.		If this operation is not supported,		Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.
method,java/security/PolicySpi/engineGetPermissions/ProtectionDomain, Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain. The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden if the policy implementation can return a set of permissions granted to a ProtectionDomain. @param domain the ProtectionDomain to which the returned		PermissionCollection has been granted. @return a set of permissions granted to the specified ProtectionDomain.		If this operation is supported, the returned		set of permissions must be a new mutable instance		and it must support heterogeneous Permission types.		If this operation is not supported,		Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.
method,java/security/Policy/setPolicy/Policy, Sets the system-wide Policy object. This method first calls SecurityManager.checkPermission with a SecurityPermission(setPolicy) permission to ensure it's ok to set the Policy. @param p the new system Policy object. @throws SecurityException if a security manager exists and its checkPermission method doesn't allow setting the Policy. @see SecurityManager#checkPermission(Permission) @see #getPolicy()
method,java/security/Policy/getProvider/, Return the Provider of this Policy. This Policy instance will only have a Provider if it was obtained via a call to Policy.getInstance. Otherwise this method returns null. @return the Provider of this Policy, or null. @since 1.6
method,java/security/Policy/getType/, Return the type of this Policy. This Policy instance will only have a type if it was obtained via a call to Policy.getInstance. Otherwise this method returns null. @return the type of this Policy, or null. @since 1.6
method,java/security/Policy/getParameters/, Return Policy parameters. This Policy instance will only have parameters if it was obtained via a call to Policy.getInstance. Otherwise this method returns null. @return Policy parameters, or null. @since 1.6
method,java/security/Policy/refresh/, Refreshes/reloads the policy configuration. The behavior of this method depends on the implementation. For example, calling refresh on a file-based policy will cause the file to be re-read. The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by the policy implementation.
field,java/security/Policy/UNSUPPORTED_EMPTY_COLLECTION, A read-only empty PermissionCollection instance. @since 1.6
method,java/security/Permissions/implies/Permission, Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the permission object. Returns true if the combination of permissions in the appropriate PermissionCollection (e.g., a FilePermissionCollection for a FilePermission) together imply the specified permission. For example, suppose there is a FilePermissionCollection in this Permissions object, and it contains one FilePermission that specifies read access for all files in all subdirectories of the /tmp directory, and another FilePermission that specifies write access for all files in the /tmp/scratch/foo directory. Then if the implies method is called with a permission specifying both read and write access to files in the /tmp/scratch/foo directory, true is returned. Additionally, if this PermissionCollection contains the AllPermission, this method will always return true. @param permission the Permission object to check. @return true if permission is implied by the permissions in the PermissionCollection it belongs to, false if not.
method,java/security/PermissionCollection/setReadOnly/, Marks this PermissionCollection object as readonly. After a PermissionCollection object is marked as readonly, no new Permission objects can be added to it using add.
method,java/security/PermissionCollection/isReadOnly/, Returns true if this PermissionCollection object is marked as readonly. If it is readonly, no new Permission objects can be added to it using add. By default, the object is not readonly. It can be set to readonly by a call to setReadOnly. @return true if this PermissionCollection object is marked as readonly, false otherwise.
method,java/security/PermissionCollection/toString/, Returns a string describing this PermissionCollection object, providing information about all the permissions it contains. The format is: super.toString() ( // enumerate all the Permission // objects and call toString() on them, // one per line.. ) super.toString is a call to the toString method of this object's superclass, which is Object. The result is this PermissionCollection's type name followed by this object's hashcode, thus enabling clients to differentiate different PermissionCollections object, even if they contain the same permissions. @return information about this PermissionCollection object, as described above.
method,java/security/Permission/checkGuard/Object, Implements the guard interface for a permission. The SecurityManager.checkPermission method is called, passing this permission object as the permission to check. Returns silently if access is granted. Otherwise, throws a SecurityException. @param object the object being guarded (currently ignored). @throws SecurityException if a security manager exists and its checkPermission method doesn't allow access. @see Guard @see GuardedObject @see SecurityManager#checkPermission 
method,java/security/NoSuchAlgorithmException/NoSuchAlgorithmException/String, Constructs a NoSuchAlgorithmException with the specified detail message. A detail message is a String that describes this particular exception, which may, for example, specify which algorithm is not available. @param msg the detail message. 
class,java/security/MessageDigestSpi, This class defines the Service Provider Interface (SPI) for the MessageDigest class, which provides the functionality of a message digest algorithm, such as MD5 or SHA. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value. All the abstract methods in this class must be implemented by a cryptographic service provider who wishes to supply the implementation of a particular message digest algorithm. Implementations are free to implement the Cloneable interface. @author Benjamin Renaud @version 1.18, 03/23/10 @see MessageDigest
method,java/security/MessageDigestSpi/engineGetDigestLength/, Returns the digest length in bytes. This concrete method has been added to this previously-defined abstract class. (For backwards compatibility, it cannot be abstract.) The default behavior is to return 0. This method may be overridden by a provider to return the digest length. @return the digest length in bytes. @since 1.2
method,java/security/MessageDigestSpi/clone/, Returns a clone if the implementation is cloneable. @return a clone if the implementation is cloneable. @exception CloneNotSupportedException if this is called on an implementation that does not support Cloneable.
method,java/security/MessageDigest/getInstance/String, Returns a MessageDigest object that implements the specified digest algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param algorithm the name of the algorithm requested. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @return a Message Digest object that implements the specified algorithm. @exception NoSuchAlgorithmException if no Provider supports a		MessageDigestSpi implementation for the		specified algorithm. @see Provider
method,java/security/MessageDigest/getInstance/String;Provider, Returns a MessageDigest object that implements the specified digest algorithm. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param algorithm the name of the algorithm requested. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @param provider the provider. @return a MessageDigest object that implements the specified algorithm. @exception NoSuchAlgorithmException if a MessageDigestSpi		implementation for the specified algorithm is not available		from the specified Provider object. @exception IllegalArgumentException if the specified provider is null. @see Provider @since 1.4
method,java/security/MessageDigest/digest/, Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made. @return the array of bytes for the resulting hash value. 
method,java/security/MessageDigest/digest/byte[];int;int, Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made. @param buf output buffer for the computed digest @param offset offset into the output buffer to begin storing the digest @param len number of bytes within buf allotted for the digest @return the number of bytes placed into buf @exception DigestException if an error occurs.
method,java/security/MessageDigest/digest/byte[], Performs a final update on the digest using the specified array of bytes, then completes the digest computation. That is, this method first calls {@link #update(byte[]) update(input)}, passing the input array to the update method, then calls {@link #digest() digest()}. @param input the input to be updated before the digest is completed. @return the array of bytes for the resulting hash value. 
method,java/security/MessageDigest/getAlgorithm/, Returns a string that identifies the algorithm, independent of implementation details. The name should be a standard Java Security name (such as SHA, MD5, and so on). See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @return the name of the algorithm
method,java/security/MessageDigest/clone/, Returns a clone if the implementation is cloneable. @return a clone if the implementation is cloneable. @exception CloneNotSupportedException if this is called on an implementation that does not support Cloneable.
class,java/security/KeyStoreSpi, This class defines the Service Provider Interface (SPI) for the KeyStore class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a keystore for a particular keystore type. @author Jan Luehe @version 1.23, 03/23/10 @see KeyStore @since 1.2
method,java/security/KeyStoreSpi/engineGetCertificate/String, Returns the certificate associated with the given alias. If the given alias name identifies an entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the trusted certificate contained in that entry is returned. If the given alias name identifies an entry created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the first element of the certificate chain in that entry (if a chain exists) is returned. @param alias the alias name @return the certificate, or null if the given alias does not exist or does not contain a certificate.
method,java/security/KeyStoreSpi/engineSetCertificateEntry/String;Certificate, Assigns the given certificate to the given alias. If the given alias identifies an existing entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, the trusted certificate in the existing entry is overridden by the given certificate. @param alias the alias name @param cert the certificate @exception KeyStoreException if the given alias already exists and does not identify an entry containing a trusted certificate, or this operation fails for some other reason.
method,java/security/KeyStoreSpi/engineIsKeyEntry/String, Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry. @param alias the alias for the keystore entry to be checked @return true if the entry identified by the given alias is a key-related, false otherwise.
method,java/security/KeyStoreSpi/engineIsCertificateEntry/String, Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry. @param alias the alias for the keystore entry to be checked @return true if the entry identified by the given alias contains a trusted certificate, false otherwise.
method,java/security/KeyStoreSpi/engineGetCertificateAlias/Certificate, Returns the (alias) name of the first keystore entry whose certificate matches the given certificate. This method attempts to match the given certificate with each keystore entry. If the entry being considered was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the given certificate is compared to that entry's certificate. If the entry being considered was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the given certificate is compared to the first element of that entry's certificate chain. @param cert the certificate to match with. @return the alias name of the first entry with matching certificate, or null if no such entry exists in this keystore.
method,java/security/KeyStoreSpi/engineStore/LoadStoreParameter, Stores this keystore using the given KeyStore.LoadStoreParmeter. @param param the KeyStore.LoadStoreParmeter		that specifies how to store the keystore,		which may be null @exception IllegalArgumentException if the given		KeyStore.LoadStoreParmeter		input is not recognized @exception IOException if there was an I/O problem with data @exception NoSuchAlgorithmException if the appropriate data integrity		algorithm could not be found @exception CertificateException if any of the certificates included in		the keystore data could not be stored @since 1.5
method,java/security/KeyStoreSpi/engineLoad/LoadStoreParameter, Loads the keystore using the given KeyStore.LoadStoreParameter. Note that if this KeyStore has already been loaded, it is reinitialized and loaded again from the given parameter. @param param the KeyStore.LoadStoreParameter		that specifies how to load the keystore,		which may be null @exception IllegalArgumentException if the given		KeyStore.LoadStoreParameter		input is not recognized @exception IOException if there is an I/O or format problem with the		keystore data. If the error is due to an incorrect ProtectionParameter (e.g. wrong password) the {@link Throwable#getCause cause} of the IOException should be an UnrecoverableKeyException @exception NoSuchAlgorithmException if the algorithm used to check		the integrity of the keystore cannot be found @exception CertificateException if any of the certificates in the		keystore could not be loaded @since 1.5
method,java/security/KeyStoreSpi/engineGetEntry/String;ProtectionParameter, Gets a KeyStore.Entry for the specified alias with the specified protection parameter. @param alias get the KeyStore.Entry for this alias @param protParam the ProtectionParameter		used to protect the Entry,		which may be null @return the KeyStore.Entry for the specified alias,		or null if there is no such entry @exception KeyStoreException if the operation failed @exception NoSuchAlgorithmException if the algorithm for recovering the		entry cannot be found @exception UnrecoverableEntryException if the specified		protParam were insufficient or invalid @exception UnrecoverableKeyException if the entry is a PrivateKeyEntry or SecretKeyEntry and the specified protParam does not contain the information needed to recover the key (e.g. wrong password) @since 1.5
method,java/security/KeyStoreSpi/engineSetEntry/String;Entry;ProtectionParameter, Saves a KeyStore.Entry under the specified alias. The specified protection parameter is used to protect the Entry. If an entry already exists for the specified alias, it is overridden. @param alias save the KeyStore.Entry under this alias @param entry the Entry to save @param protParam the ProtectionParameter		used to protect the Entry,		which may be null @exception KeyStoreException if this operation fails @since 1.5
method,java/security/KeyStoreSpi/engineEntryInstanceOf/String;Class, Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass. @param alias the alias name @param entryClass the entry class @return true if the keystore Entry for the specified		alias is an instance or subclass of the		specified entryClass, false otherwise @since 1.5
method,java/security/KeyStore/getInstance/String, Returns a keystore object of the specified type. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyStore object encapsulating the KeyStoreSpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param type the type of keystore. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard keystore types. @return a keystore object of the specified type. @exception KeyStoreException if no Provider supports a KeyStoreSpi implementation for the specified type. @see Provider
method,java/security/KeyStore/getInstance/String;Provider, Returns a keystore object of the specified type. A new KeyStore object encapsulating the KeyStoreSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param type the type of keystore. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard keystore types. @param provider the provider. @return a keystore object of the specified type. @exception KeyStoreException if KeyStoreSpi implementation for the specified type is not available from the specified Provider object. @exception IllegalArgumentException if the specified provider is null. @see Provider @since 1.4
method,java/security/KeyStore/getDefaultType/, Returns the default keystore type as specified in the Java security properties file, or the string &quot;jks&quot; (acronym for &quot;Java keystore&quot;) if no such property exists. The Java security properties file is located in the file named &lt;JAVA_HOME&gt;/lib/security/java.security. &lt;JAVA_HOME&gt; refers to the value of the java.home system property, and specifies the directory where the JRE is installed. The default keystore type can be used by applications that do not want to use a hard-coded keystore type when calling one of the getInstance methods, and want to provide a default keystore type in case a user does not specify its own. The default keystore type can be changed by setting the value of the keystore.type security property (in the Java security properties file) to the desired keystore type. @return the default keystore type as specified in the Java security properties file, or the string &quot;jks&quot; if no such property exists.
method,java/security/KeyStore/getCertificate/String, Returns the certificate associated with the given alias. If the given alias name identifies an entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the trusted certificate contained in that entry is returned. If the given alias name identifies an entry created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the first element of the certificate chain in that entry is returned. @param alias the alias name @return the certificate, or null if the given alias does not exist or does not contain a certificate. @exception KeyStoreException if the keystore has not been initialized (loaded).
method,java/security/KeyStore/setCertificateEntry/String;Certificate, Assigns the given trusted certificate to the given alias. If the given alias identifies an existing entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, the trusted certificate in the existing entry is overridden by the given certificate. @param alias the alias name @param cert the certificate @exception KeyStoreException if the keystore has not been initialized, or the given alias already exists and does not identify an entry containing a trusted certificate, or this operation fails for some other reason.
method,java/security/KeyStore/isKeyEntry/String, Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry. @param alias the alias for the keystore entry to be checked @return true if the entry identified by the given alias is a key-related entry, false otherwise. @exception KeyStoreException if the keystore has not been initialized (loaded).
method,java/security/KeyStore/isCertificateEntry/String, Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry. @param alias the alias for the keystore entry to be checked @return true if the entry identified by the given alias contains a trusted certificate, false otherwise. @exception KeyStoreException if the keystore has not been initialized (loaded).
method,java/security/KeyStore/getCertificateAlias/Certificate, Returns the (alias) name of the first keystore entry whose certificate matches the given certificate. This method attempts to match the given certificate with each keystore entry. If the entry being considered was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the given certificate is compared to that entry's certificate. If the entry being considered was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the given certificate is compared to the first element of that entry's certificate chain. @param cert the certificate to match with. @return the alias name of the first entry with a matching certificate, or null if no such entry exists in this keystore. @exception KeyStoreException if the keystore has not been initialized (loaded).
method,java/security/KeyStore/store/LoadStoreParameter, Stores this keystore using the given LoadStoreParameter. @param param the LoadStoreParameter		that specifies how to store the keystore,		which may be null @exception IllegalArgumentException if the given		LoadStoreParameter		input is not recognized @exception KeyStoreException if the keystore has not been initialized		(loaded) @exception IOException if there was an I/O problem with data @exception NoSuchAlgorithmException if the appropriate data integrity		algorithm could not be found @exception CertificateException if any of the certificates included in		the keystore data could not be stored @since 1.5
method,java/security/KeyStore/load/LoadStoreParameter, Loads this keystore using the given LoadStoreParameter. Note that if this KeyStore has already been loaded, it is reinitialized and loaded again from the given parameter. @param param the LoadStoreParameter		that specifies how to load the keystore,		which may be null @exception IllegalArgumentException if the given		LoadStoreParameter		input is not recognized @exception IOException if there is an I/O or format problem with the		keystore data. If the error is due to an incorrect ProtectionParameter (e.g. wrong password) the {@link Throwable#getCause cause} of the IOException should be an UnrecoverableKeyException @exception NoSuchAlgorithmException if the algorithm used to check		the integrity of the keystore cannot be found @exception CertificateException if any of the certificates in the		keystore could not be loaded @since 1.5
method,java/security/KeyStore/getEntry/String;ProtectionParameter, Gets a keystore Entry for the specified alias with the specified protection parameter. @param alias get the keystore Entry for this alias @param protParam the ProtectionParameter		used to protect the Entry,		which may be null @return the keystore Entry for the specified alias,		or null if there is no such entry @exception NullPointerException if		alias is null @exception NoSuchAlgorithmException if the algorithm for recovering the		entry cannot be found @exception UnrecoverableEntryException if the specified		protParam were insufficient or invalid @exception UnrecoverableKeyException if the entry is a PrivateKeyEntry or SecretKeyEntry and the specified protParam does not contain the information needed to recover the key (e.g. wrong password) @exception KeyStoreException if the keystore has not been initialized		(loaded). @see #setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter) @since 1.5
method,java/security/KeyStore/setEntry/String;Entry;ProtectionParameter, Saves a keystore Entry under the specified alias. The protection parameter is used to protect the Entry. If an entry already exists for the specified alias, it is overridden. @param alias save the keystore Entry under this alias @param entry the Entry to save @param protParam the ProtectionParameter		used to protect the Entry,		which may be null @exception NullPointerException if		alias or entry		is null @exception KeyStoreException if the keystore has not been initialized		(loaded), or if this operation fails for some other reason @see #getEntry(String, KeyStore.ProtectionParameter) @since 1.5
method,java/security/KeyStore/entryInstanceOf/String;Class, Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass. @param alias the alias name @param entryClass the entry class @return true if the keystore Entry for the specified		alias is an instance or subclass of the		specified entryClass, false otherwise @exception NullPointerException if		alias or entryClass		is null @exception KeyStoreException if the keystore has not been		initialized (loaded) @since 1.5
interface,java/security/KeyStore/ProtectionParameter, A marker interface for keystore protection parameters. The information stored in a ProtectionParameter object protects the contents of a keystore. For example, protection parameters may be used to check the integrity of keystore data, or to protect the confidentiality of sensitive keystore data (such as a PrivateKey). @since 1.5
method,java/security/KeyStore/PasswordProtection/getPassword/, Gets the password. Note that this method returns a reference to the password. If a clone of the array is created it is the caller's responsibility to zero out the password information after it is no longer needed. @see #destroy() @return the password, which may be null @exception IllegalStateException if the password has		been cleared (destroyed)
method,java/security/KeyStore/PasswordProtection/KeyStore/PasswordProtection/char[], Creates a password parameter. The specified password is cloned before it is stored in the new PasswordProtection object. @param password the password, which may be null
class,java/security/KeyStore/CallbackHandlerProtection, A ProtectionParameter encapsulating a CallbackHandler. @since 1.5
method,java/security/KeyStore/CallbackHandlerProtection/getCallbackHandler/, Returns the CallbackHandler. @return the CallbackHandler.
method,java/security/KeyStore/CallbackHandlerProtection/KeyStore/CallbackHandlerProtection/CallbackHandler, Constructs a new CallbackHandlerProtection from a CallbackHandler. @param handler the CallbackHandler @exception NullPointerException if handler is null
method,java/security/KeyStore/PrivateKeyEntry/getCertificateChain/, Gets the Certificate chain from this entry. The stored chain is cloned before being returned. @return an array of Certificates corresponding	to the certificate chain for the public key.	If the certificates are of type X.509,	the runtime type of the returned array is	X509Certificate[].
method,java/security/KeyStore/PrivateKeyEntry/KeyStore/PrivateKeyEntry/PrivateKey;Certificate[], Constructs a PrivateKeyEntry with a PrivateKey and corresponding certificate chain. The specified chain is cloned before it is stored in the new PrivateKeyEntry object. @param privateKey the PrivateKey @param chain an array of Certificates	representing the certificate chain.	The chain must be ordered and contain a	Certificate at index 0	corresponding to the private key. @exception NullPointerException if	privateKey or chain	is null @exception IllegalArgumentException if the specified chain has a	length of 0, if the specified chain does not contain	Certificates of the same type,	or if the PrivateKey algorithm	does not match the algorithm of the PublicKey	in the end entity Certificate (at index 0)
class,java/security/KeyStore/Builder, A description of a to-be-instantiated KeyStore object. An instance of this class encapsulates the information needed to instantiate and initialize a KeyStore object. That process is triggered when the {@linkplain #getKeyStore} method is called. This makes it possible to decouple configuration from KeyStore object creation and e.g. delay a password prompt until it is needed. @see KeyStore @see javax.net.ssl.KeyStoreBuilderParameters @since 1.5
method,java/security/KeyStore/Builder/getKeyStore/, Returns the KeyStore described by this object. @exception KeyStoreException if an error occured during the operation, for example if the KeyStore could not be instantiated or loaded
method,java/security/KeyStore/Builder/newInstance/String;Provider;File;ProtectionParameter, Returns a new Builder object. The first call to the {@link #getKeyStore} method on the returned builder will create a KeyStore of type type and call its {@link KeyStore#load load()} method. The inputStream argument is constructed from file. If protection is a PasswordProtection, the password is obtained by calling the getPassword method. Otherwise, if protection is a CallbackHandlerProtection, the password is obtained by invoking the CallbackHandler. Subsequent calls to {@link #getKeyStore} return the same object as the initial call. If the initial call to failed with a KeyStoreException, subsequent calls also throw a KeyStoreException. The KeyStore is instantiated from provider if non-null. Otherwise, all installed providers are searched. Calls to {@link #getProtectionParameter getProtectionParameter()} will return a {@link KeyStore.PasswordProtection PasswordProtection} object encapsulating the password that was used to invoke the load method. Note that the {@link #getKeyStore} method is executed within the {@link AccessControlContext} of the code invoking this method. @return a new Builder object @param type the type of KeyStore to be constructed @param provider the provider from which the KeyStore is to be instantiated (or null) @param file the File that contains the KeyStore data @param protection the ProtectionParameter securing the KeyStore data @throws NullPointerException if type, file or protection is null @throws IllegalArgumentException if protection is not an instance of either PasswordProtection or CallbackHandlerProtection; or if file does not exist or does not refer to a normal file
method,java/security/KeyStore/Builder/newInstance/String;Provider;ProtectionParameter, Returns a new Builder object. Each call to the {@link #getKeyStore} method on the returned builder will return a new KeyStore object of type type. Its {@link KeyStore#load(KeyStore.LoadStoreParameter) load()} method is invoked using a LoadStoreParameter that encapsulates protection. The KeyStore is instantiated from provider if non-null. Otherwise, all installed providers are searched. Calls to {@link #getProtectionParameter getProtectionParameter()} will return protection. Note that the {@link #getKeyStore} method is executed within the {@link AccessControlContext} of the code invoking this method. @return a new Builder object @param type the type of KeyStore to be constructed @param provider the provider from which the KeyStore is to be instantiated (or null) @param protection the ProtectionParameter securing the Keystore @throws NullPointerException if type or protection is null
class,java/security/KeyRep, Standardized representation for serialized Key objects. Note that a serialized Key may contain sensitive information which should not be exposed in untrusted environments. See the Security Appendix of the Serialization Specification for more information. @see Key @see KeyFactory @see javax.crypto.spec.SecretKeySpec @see java.security.spec.X509EncodedKeySpec @see java.security.spec.PKCS8EncodedKeySpec @version 1.11, 10/03/23 @since 1.5
method,java/security/KeyPairGeneratorSpi/initialize/AlgorithmParameterSpec;SecureRandom, Initializes the key pair generator using the specified parameter set and user-provided source of randomness. This concrete method has been added to this previously-defined abstract class. (For backwards compatibility, it cannot be abstract.) It may be overridden by a provider to initialize the key pair generator. Such an override is expected to throw an InvalidAlgorithmParameterException if a parameter is inappropriate for this key pair generator. If this method is not overridden, it always throws an UnsupportedOperationException. @param params the parameter set used to generate the keys. @param random the source of randomness for this generator. @exception InvalidAlgorithmParameterException if the given parameters are inappropriate for this key pair generator. @since 1.2
method,java/security/KeyPairGeneratorSpi/generateKeyPair/, Generates a key pair. Unless an initialization method is called using a KeyPairGenerator interface, algorithm-specific defaults will be used. This will generate a new key pair every time it is called. @return the newly generated KeyPair
method,java/security/KeyPairGenerator/getInstance/String, Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param algorithm the standard string name of the algorithm. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @return the new KeyPairGenerator object. @exception NoSuchAlgorithmException if no Provider supports a KeyPairGeneratorSpi implementation for the specified algorithm. @see Provider
method,java/security/KeyPairGenerator/getInstance/String;Provider, Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param algorithm the standard string name of the algorithm. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @param provider the provider. @return the new KeyPairGenerator object. @exception NoSuchAlgorithmException if a KeyPairGeneratorSpi implementation for the specified algorithm is not available from the specified Provider object. @exception IllegalArgumentException if the specified provider is null. @see Provider @since 1.4
method,java/security/KeyPairGenerator/initialize/AlgorithmParameterSpec, Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.). This concrete method has been added to this previously-defined abstract class. This method calls the KeyPairGeneratorSpi {@link KeyPairGeneratorSpi#initialize( java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) initialize} method, passing it params and a source of randomness (obtained from the highest-priority installed provider or system-provided if none of the installed providers supply one). That initialize method always throws an UnsupportedOperationException if it is not overridden by the provider. @param params the parameter set used to generate the keys. @exception InvalidAlgorithmParameterException if the given parameters are inappropriate for this key pair generator. @since 1.2
method,java/security/KeyPairGenerator/initialize/AlgorithmParameterSpec;SecureRandom, Initializes the key pair generator with the given parameter set and source of randomness. This concrete method has been added to this previously-defined abstract class. This method calls the KeyPairGeneratorSpi {@link KeyPairGeneratorSpi#initialize( java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) initialize} method, passing it params and random. That initialize method always throws an UnsupportedOperationException if it is not overridden by the provider. @param params the parameter set used to generate the keys. @param random the source of randomness. @exception InvalidAlgorithmParameterException if the given parameters are inappropriate for this key pair generator. @since 1.2
method,java/security/KeyPairGenerator/genKeyPair/, Generates a key pair. If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults will be used for the size and other (algorithm-specific) values of the generated keys. This will generate a new key pair every time it is called. This method is functionally equivalent to {@link #generateKeyPair() generateKeyPair}. @return the generated key pair @since 1.2
method,java/security/KeyPairGenerator/generateKeyPair/, Generates a key pair. If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults will be used for the size and other (algorithm-specific) values of the generated keys. This will generate a new key pair every time it is called. This method is functionally equivalent to {@link #genKeyPair() genKeyPair}. @return the generated key pair
class,java/security/KeyPair, This class is a simple holder for a key pair (a public key and a private key). It does not enforce any security, and, when initialized, should be treated like a PrivateKey. @see PublicKey @see PrivateKey @version 1.17 10/03/23 @author Benjamin Renaud
method,java/security/KeyPair/KeyPair/PublicKey;PrivateKey, Constructs a key pair from the given public key and private key. Note that this constructor only stores references to the public and private key components in the generated key pair. This is safe, because Key objects are immutable. @param publicKey the public key. @param privateKey the private key.
class,java/security/KeyManagementException, This is the general key management exception for all operations dealing with key management. Examples of subclasses of KeyManagementException that developers might create for giving more detailed information could include: KeyIDConflictException KeyAuthorizationFailureException ExpiredKeyException @version 1.20 10/03/23 @author Benjamin Renaud @see Key @see KeyException
method,java/security/KeyFactorySpi/engineTranslateKey/Key, Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory. @param key the key whose provider is unknown or untrusted. @return the translated key. @exception InvalidKeyException if the given key cannot be processed by this key factory.
class,java/security/KeyFactory, Key factories are used to convert keys (opaque cryptographic keys of type Key) into key specifications (transparent representations of the underlying key material), and vice versa. Key factories are bi-directional. That is, they allow you to build an opaque key object from a given key specification (key material), or to retrieve the underlying key material of a key object in a suitable format. Multiple compatible key specifications may exist for the same key. For example, a DSA public key may be specified using DSAPublicKeySpec or X509EncodedKeySpec. A key factory can be used to translate between compatible key specifications. The following is an example of how to use a key factory in order to instantiate a DSA public key from its encoding. Assume Alice has received a digital signature from Bob. Bob also sent her his public key (in encoded format) to verify his signature. Alice then performs the following actions: X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey); KeyFactory keyFactory = KeyFactory.getInstance(DSA); PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec); Signature sig = Signature.getInstance(DSA); sig.initVerify(bobPubKey); sig.update(data); sig.verify(signature); @author Jan Luehe @version 1.36, 03/23/10 @see Key @see PublicKey @see PrivateKey @see java.security.spec.KeySpec @see java.security.spec.DSAPublicKeySpec @see java.security.spec.X509EncodedKeySpec @since 1.2
method,java/security/KeyFactory/getInstance/String, Returns a KeyFactory object that converts public/private keys of the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyFactory object encapsulating the KeyFactorySpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param algorithm the name of the requested key algorithm. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @return the new KeyFactory object. @exception NoSuchAlgorithmException if no Provider supports a KeyFactorySpi implementation for the specified algorithm. @see Provider
method,java/security/KeyFactory/getInstance/String;Provider, Returns a KeyFactory object that converts public/private keys of the specified algorithm. A new KeyFactory object encapsulating the KeyFactorySpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param algorithm the name of the requested key algorithm. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @param provider the provider. @return the new KeyFactory object. @exception NoSuchAlgorithmException if a KeyFactorySpi implementation for the specified algorithm is not available from the specified Provider object. @exception IllegalArgumentException if the specified provider is null. @see Provider @since 1.4
method,java/security/KeyFactory/translateKey/Key, Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory. @param key the key whose provider is unknown or untrusted. @return the translated key. @exception InvalidKeyException if the given key cannot be processed by this key factory.
class,java/security/IdentityScope, This class represents a scope for identities. It is an Identity itself, and therefore has a name and can have a scope. It can also optionally have a public key and associated certificates. An IdentityScope can contain Identity objects of all kinds, including Signers. All types of Identity objects can be retrieved, added, and removed using the same methods. Note that it is possible, and in fact expected, that different types of identity scopes will apply different policies for their various operations on the various types of Identities. There is a one-to-one mapping between keys and identities, and there can only be one copy of one key per scope. For example, suppose Acme Software, Inc is a software publisher known to a user. Suppose it is an Identity, that is, it has a public key, and a set of associated certificates. It is named in the scope using the name Acme Software. No other named Identity in the scope has the same public key. Of course, none has the same name as well. @see Identity @see Signer @see Principal @see Key @version 1.56 10/03/23 @author Benjamin Renaud @deprecated This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal.
method,java/security/IdentityScope/setSystemScope/IdentityScope, Sets the system's identity scope. First, if there is a security manager, its checkSecurityAccess method is called with setSystemScope as its argument to see if it's ok to set the identity scope. @param scope the scope to set. @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow setting the identity scope. @see #getSystemScope @see SecurityManager#checkSecurityAccess
method,java/security/IdentityScope/getIdentity/Principal, Retrieves the identity whose name is the same as that of the specified principal. (Note: Identity implements Principal.) @param principal the principal corresponding to the identity to be retrieved. @return the identity whose name is the same as that of the principal, or null if there are no identities of the same name in this scope.
method,java/security/IdentityScope/IdentityScope/, This constructor is used for serialization only and should not be used by subclasses.
class,java/security/Identity, This class represents identities: real-world objects such as people, companies or organizations whose identities can be authenticated using their public keys. Identities may also be more abstract (or concrete) constructs, such as daemon threads or smart cards. All Identity objects have a name and a public key. Names are immutable. Identities may also be scoped. That is, if an Identity is specified to have a particular scope, then the name and public key of the Identity are unique within that scope. An Identity also has a set of certificates (all certifying its own public key). The Principal names specified in these certificates need not be the same, only the key. An Identity can be subclassed, to include postal and email addresses, telephone numbers, images of faces and logos, and so on. @see IdentityScope @see Signer @see Principal @version 1.63 @author Benjamin Renaud @deprecated This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal.
method,java/security/Identity/setPublicKey/PublicKey, Sets this identity's public key. The old key and all of this identity's certificates are removed by this operation. First, if there is a security manager, its checkSecurityAccess method is called with setIdentityPublicKey as its argument to see if it's ok to set the public key. @param key the public key for this identity. @exception KeyManagementException if another identity in the identity's scope has the same public key, or if another exception occurs. @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow setting the public key. @see #getPublicKey @see SecurityManager#checkSecurityAccess
method,java/security/Identity/setInfo/String, Specifies a general information string for this identity. First, if there is a security manager, its checkSecurityAccess method is called with setIdentityInfo as its argument to see if it's ok to specify the information string. @param info the information string. @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow setting the information string. @see #getInfo @see SecurityManager#checkSecurityAccess
method,java/security/Identity/addCertificate/Certificate, Adds a certificate for this identity. If the identity has a public key, the public key in the certificate must be the same, and if the identity does not have a public key, the identity's public key is set to be that specified in the certificate. First, if there is a security manager, its checkSecurityAccess method is called with addIdentityCertificate as its argument to see if it's ok to add a certificate. @param certificate the certificate to be added. @exception KeyManagementException if the certificate is not valid, if the public key in the certificate being added conflicts with this identity's public key, or if another exception occurs. @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow adding a certificate. @see SecurityManager#checkSecurityAccess
method,java/security/Identity/removeCertificate/Certificate, Removes a certificate from this identity. First, if there is a security manager, its checkSecurityAccess method is called with removeIdentityCertificate as its argument to see if it's ok to remove a certificate. @param certificate the certificate to be removed. @exception KeyManagementException if the certificate is missing, or if another exception occurs. @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow removing a certificate. @see SecurityManager#checkSecurityAccess
method,java/security/Identity/toString/, Returns a short string describing this identity, telling its name and its scope (if any). First, if there is a security manager, its checkSecurityAccess method is called with printIdentity as its argument to see if it's ok to return the string. @return information about this identity, such as its name and the name of its scope (if any). @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow returning a string describing this identity. @see SecurityManager#checkSecurityAccess
method,java/security/Identity/toString/boolean, Returns a string representation of this identity, with optionally more details than that provided by the toString method without any arguments. First, if there is a security manager, its checkSecurityAccess method is called with printIdentity as its argument to see if it's ok to return the string. @param detailed whether or not to provide detailed information. @return information about this identity. If detailed is true, then this method returns more information than that provided by the toString method without any arguments. @exception SecurityException if a security manager exists and its checkSecurityAccess method doesn't allow returning a string describing this identity. @see #toString @see SecurityManager#checkSecurityAccess
method,java/security/Identity/Identity/, Constructor for serialization only.
class,java/security/GuardedObject, A GuardedObject is an object that is used to protect access to another object. A GuardedObject encapsulates a target object and a Guard object, such that access to the target object is possible only if the Guard object allows it. Once an object is encapsulated by a GuardedObject, access to that object is controlled by the getObject method, which invokes the checkGuard method on the Guard object that is guarding access. If access is not allowed, an exception is thrown. @see Guard @see Permission @version 1.18 10/03/23 @author Roland Schemers @author Li Gong
interface,java/security/Guard, This interface represents a guard, which is an object that is used to protect access to another object. This interface contains a single method, checkGuard, with a single object argument. checkGuard is invoked (by the GuardedObject getObject method) to determine whether or not to allow access to the object. @see GuardedObject @version 1.14 10/03/23 @author Roland Schemers @author Li Gong
class,java/security/GeneralSecurityException, The GeneralSecurityException class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it. @version 1.18, 10/03/23 @author Jan Luehe
interface,java/security/DomainCombiner, A DomainCombiner provides a means to dynamically update the ProtectionDomains associated with the current AccessControlContext. A DomainCombiner is passed as a parameter to the appropriate constructor for AccessControlContext. The newly constructed context is then passed to the AccessController.doPrivileged(..., context) method to bind the provided context (and associated DomainCombiner) with the current execution Thread. Subsequent calls to AccessController.getContext or AccessController.checkPermission cause the DomainCombiner.combine to get invoked. The combine method takes two arguments. The first argument represents an array of ProtectionDomains from the current execution Thread, since the most recent call to AccessController.doPrivileged. If no call to doPrivileged was made, then the first argument will contain all the ProtectionDomains from the current execution Thread. The second argument represents an array of inherited ProtectionDomains, which may be null. ProtectionDomains may be inherited from a parent Thread, or from a privileged context. If no call to doPrivileged was made, then the second argument will contain the ProtectionDomains inherited from the parent Thread. If one or more calls to doPrivileged were made, and the most recent call was to doPrivileged(action, context), then the second argument will contain the ProtectionDomains from the privileged context. If the most recent call was to doPrivileged(action), then there is no privileged context, and the second argument will be null. The combine method investigates the two input arrays of ProtectionDomains and returns a single array containing the updated ProtectionDomains. In the simplest case, the combine method merges the two stacks into one. In more complex cases, the combine method returns a modified stack of ProtectionDomains. The modification may have added new ProtectionDomains, removed certain ProtectionDomains, or simply updated existing ProtectionDomains. Re-ordering and other optimizations to the ProtectionDomains are also permitted. Typically the combine method bases its updates on the information encapsulated in the DomainCombiner. After the AccessController.getContext method receives the combined stack of ProtectionDomains back from the DomainCombiner, it returns a new AccessControlContext that has both the combined ProtectionDomains as well as the DomainCombiner. @see AccessController @see AccessControlContext @version 1.10, 03/23/10 @since 1.3
method,java/security/DomainCombiner/combine/ProtectionDomain[];ProtectionDomain[], Modify or update the provided ProtectionDomains. ProtectionDomains may be added to or removed from the given ProtectionDomains. The ProtectionDomains may be re-ordered. Individual ProtectionDomains may be may be modified (with a new set of Permissions, for example). @param currentDomains the ProtectionDomains associated with the		current execution Thread, up to the most recent		privileged ProtectionDomain.		The ProtectionDomains are are listed in order of execution,		with the most recently executing ProtectionDomain		residing at the beginning of the array. This parameter may		be null if the current execution Thread		has no associated ProtectionDomains. @param assignedDomains an array of inherited ProtectionDomains.		ProtectionDomains may be inherited from a parent Thread,		or from a privileged AccessControlContext.		This parameter may be null		if there are no inherited ProtectionDomains. @return a new array consisting of the updated ProtectionDomains,		or null.
class,java/security/DigestOutputStream, A transparent stream that updates the associated message digest using the bits going through the stream. To complete the message digest computation, call one of the digest methods on the associated message digest after your calls to one of this digest ouput stream's {@link #write(int) write} methods. It is possible to turn this stream on or off (see {@link #on(boolean) on}). When it is on, a call to one of the write methods results in an update on the message digest. But when it is off, the message digest is not updated. The default is for the stream to be on. @see MessageDigest @see DigestInputStream @version 1.33 10/03/23 @author Benjamin Renaud
method,java/security/DigestOutputStream/on/boolean, Turns the digest function on or off. The default is on. When it is on, a call to one of the write methods results in an update on the message digest. But when it is off, the message digest is not updated. @param on true to turn the digest function on, false to turn it off.
method,java/security/DigestInputStream/on/boolean, Turns the digest function on or off. The default is on. When it is on, a call to one of the read methods results in an update on the message digest. But when it is off, the message digest is not updated. @param on true to turn the digest function on, false to turn it off.
class,java/security/CodeSource, This class extends the concept of a codebase to encapsulate not only the location (URL) but also the certificate chains that were used to verify signed code originating from that location. @version 	1.42, 03/23/10 @author Li Gong @author Roland Schemers
method,java/security/CodeSource/getCertificates/, Returns the certificates associated with this CodeSource. If this CodeSource object was created using the {@link #CodeSource(URL url, CodeSigner[] signers)} constructor then its certificate chains are extracted and used to create an array of Certificate objects. Each signer certificate is followed by its supporting certificate chain (which may be empty). Each signer certificate and its supporting certificate chain is ordered bottom-to-top (i.e., with the signer certificate first and the (root) certificate authority last). @return A copy of the certificates array, or null if there is none. 
method,java/security/CodeSource/getCodeSigners/, Returns the code signers associated with this CodeSource. If this CodeSource object was created using the {@link #CodeSource(URL url, Certificate[] certs)} constructor then its certificate chains are extracted and used to create an array of CodeSigner objects. Note that only X.509 certificates are examined - all other certificate types are ignored. @return A copy of the code signer array, or null if there is none. @since 1.5
method,java/security/CodeSource/implies/CodeSource, Returns true if this CodeSource object implies the specified CodeSource. More specifically, this method makes the following checks, in order. If any fail, it returns false. If they all succeed, it returns true. codesource must not be null. If this object's certificates are not null, then all of this object's certificates must be present in codesource's certificates. If this object's location (getLocation()) is not null, then the following checks are made against this object's location and codesource's: codesource's location must not be null. If this object's location equals codesource's location, then return true. This object's protocol (getLocation().getProtocol()) must be equal to codesource's protocol. If this object's host (getLocation().getHost()) is not null, then the SocketPermission constructed with this object's host must imply the SocketPermission constructed with codesource's host. If this object's port (getLocation().getPort()) is not equal to -1 (that is, if a port is specified), it must equal codesource's port. If this object's file (getLocation().getFile()) doesn't equal codesource's file, then the following checks are made: If this object's file ends with /-, then codesource's file must start with this object's file (exclusive the trailing -). If this object's file ends with a /*, then codesource's file must start with this object's file and must not have any further / separators. If this object's file doesn't end with a /, then codesource's file must match this object's file with a '/' appended. If this object's reference (getLocation().getRef()) is not null, it must equal codesource's reference. For example, the codesource objects with the following locations and null certificates all imply the codesource with the location http://java.sun.com/classes/foo.jar and null certificates: http: http://*.sun.com/classes/* http://java.sun.com/classes/- http://java.sun.com/classes/foo.jar Note that if this CodeSource has a null location and a null certificate chain, then it implies every other CodeSource. @param codesource CodeSource to compare against. @return true if the specified codesource is implied by this codesource, false if not. 
method,java/security/CodeSource/CodeSource/URL;Certificate[], Constructs a CodeSource and associates it with the specified location and set of certificates. @param url the location (URL). @param certs the certificate(s). It may be null. The contents of the array are copied to protect against subsequent modification.
method,java/security/CodeSource/CodeSource/URL;CodeSigner[], Constructs a CodeSource and associates it with the specified location and set of code signers. @param url the location (URL). @param signers the code signers. It may be null. The contents of the array are copied to protect against subsequent modification. @since 1.5
method,java/security/CodeSigner/equals/Object, Tests for equality between the specified object and this code signer. Two code signers are considered equal if their signer certificate paths are equal and if their timestamps are equal, if present in both. @param obj the object to test for equality with this object. @return true if the objects are considered equal, false otherwise.
interface,java/security/Certificate, This is an interface of abstract methods for managing a variety of identity certificates. An identity certificate is a guarantee by a principal that a public key is that of another principal. (A principal represents an entity such as an individual user, a group, or a corporation.) In particular, this interface is intended to be a common abstraction for constructs that have different formats but important common uses. For example, different types of certificates, such as X.509 certificates and PGP certificates, share general certificate functionality (the need to encode and decode certificates) and some types of information, such as a public key, the principal whose key it is, and the guarantor guaranteeing that the public key is that of the specified principal. So an implementation of X.509 certificates and an implementation of PGP certificates can both utilize the Certificate interface, even though their formats and additional types and amounts of information stored are different. Important: This interface is useful for cataloging and grouping objects sharing certain common uses. It does not have any semantics of its own. In particular, a Certificate object does not make any statement as to the validity of the binding. It is the duty of the application implementing this interface to verify the certificate and satisfy itself of its validity. @version 	1.40, 03/23/10 @author Benjamin Renaud @deprecated A new certificate handling package is created in the Java platform. This Certificate interface is entirely deprecated and is here to allow for a smooth transition to the new package. @see java.security.cert.Certificate
method,java/security/BasicPermission/hashCode/, Returns the hash code value for this object. The hash code used is the hash code of the name, that is, getName().hashCode(), where getName is from the Permission superclass. @return a hash code value for this object.
class,java/security/AuthProvider, This class defines login and logout methods for a provider. While callers may invoke login directly, the provider may also invoke login on behalf of callers if it determines that a login must be performed prior to certain operations. @version 1.5, 03/23/10 @since 1.5
method,java/security/AuthProvider/logout/, Log out from this provider. @exception LoginException if the logout operation fails @exception SecurityException if the caller does not pass a	security check for	SecurityPermission(authProvider.name),	where name is the value returned by	this provider's getName method
class,java/security/AlgorithmParametersSpi, This class defines the Service Provider Interface (SPI) for the AlgorithmParameters class, which is used to manage algorithm parameters. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply parameter management for a particular algorithm. @author Jan Luehe @version 1.15, 03/23/10 @see AlgorithmParameters @see java.security.spec.AlgorithmParameterSpec @see java.security.spec.DSAParameterSpec @since 1.2
method,java/security/AlgorithmParametersSpi/engineInit/byte[], Imports the specified parameters and decodes them according to the primary decoding format for parameters. The primary decoding format for parameters is ASN.1, if an ASN.1 specification for this type of parameters exists. @param params the encoded parameters. @exception IOException on decoding errors
method,java/security/AlgorithmParametersSpi/engineInit/byte[];String, Imports the parameters from params and decodes them according to the specified decoding format. If format is null, the primary decoding format for parameters is used. The primary decoding format is ASN.1, if an ASN.1 specification for these parameters exists. @param params the encoded parameters. @param format the name of the decoding format. @exception IOException on decoding errors
method,java/security/AlgorithmParametersSpi/engineGetParameterSpec/Class, Returns a (transparent) specification of this parameters object. paramSpec identifies the specification class in which the parameters should be returned. It could, for example, be DSAParameterSpec.class, to indicate that the parameters should be returned in an instance of the DSAParameterSpec class. @param paramSpec the the specification class in which the parameters should be returned. @return the parameter specification. @exception InvalidParameterSpecException if the requested parameter specification is inappropriate for this parameter object.
method,java/security/AlgorithmParametersSpi/engineGetEncoded/, Returns the parameters in their primary encoding format. The primary encoding format for parameters is ASN.1, if an ASN.1 specification for this type of parameters exists. @return the parameters encoded using their primary encoding format. @exception IOException on encoding errors.
method,java/security/AlgorithmParametersSpi/engineGetEncoded/String, Returns the parameters encoded in the specified format. If format is null, the primary encoding format for parameters is used. The primary encoding format is ASN.1, if an ASN.1 specification for these parameters exists. @param format the name of the encoding format. @return the parameters encoded using the specified encoding scheme. @exception IOException on encoding errors.
method,java/security/AlgorithmParameters/init/byte[], Imports the specified parameters and decodes them according to the primary decoding format for parameters. The primary decoding format for parameters is ASN.1, if an ASN.1 specification for this type of parameters exists. @param params the encoded parameters. @exception IOException on decoding errors, or if this parameter object has already been initialized.
method,java/security/AlgorithmParameters/init/byte[];String, Imports the parameters from params and decodes them according to the specified decoding scheme. If format is null, the primary decoding format for parameters is used. The primary decoding format is ASN.1, if an ASN.1 specification for these parameters exists. @param params the encoded parameters. @param format the name of the decoding scheme. @exception IOException on decoding errors, or if this parameter object has already been initialized.
method,java/security/AlgorithmParameters/getParameterSpec/Class, Returns a (transparent) specification of this parameter object. paramSpec identifies the specification class in which the parameters should be returned. It could, for example, be DSAParameterSpec.class, to indicate that the parameters should be returned in an instance of the DSAParameterSpec class. @param paramSpec the specification class in which the parameters should be returned. @return the parameter specification. @exception InvalidParameterSpecException if the requested parameter specification is inappropriate for this parameter object, or if this parameter object has not been initialized.
method,java/security/AlgorithmParameters/getEncoded/, Returns the parameters in their primary encoding format. The primary encoding format for parameters is ASN.1, if an ASN.1 specification for this type of parameters exists. @return the parameters encoded using their primary encoding format. @exception IOException on encoding errors, or if this parameter object has not been initialized.
method,java/security/AlgorithmParameters/getEncoded/String, Returns the parameters encoded in the specified scheme. If format is null, the primary encoding format for parameters is used. The primary encoding format is ASN.1, if an ASN.1 specification for these parameters exists. @param format the name of the encoding format. @return the parameters encoded using the specified encoding scheme. @exception IOException on encoding errors, or if this parameter object has not been initialized.
method,java/security/AlgorithmParameterGenerator/getInstance/String, Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new AlgorithmParameterGenerator object encapsulating the AlgorithmParameterGeneratorSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param algorithm the name of the algorithm this parameter generator is associated with. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @return the new AlgorithmParameterGenerator object. @exception NoSuchAlgorithmException if no Provider supports an		AlgorithmParameterGeneratorSpi implementation for the		specified algorithm. @see Provider
method,java/security/AlgorithmParameterGenerator/getInstance/String;Provider, Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm. A new AlgorithmParameterGenerator object encapsulating the AlgorithmParameterGeneratorSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param algorithm the string name of the algorithm this parameter generator is associated with. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard algorithm names. @param provider the Provider object. @return the new AlgorithmParameterGenerator object. @exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi		implementation for the specified algorithm is not available		from the specified Provider object. @exception IllegalArgumentException if the specified provider is null. @see Provider @since 1.4
class,java/security/AccessController, The AccessController class is used for access control operations and decisions. More specifically, the AccessController class is used for three purposes: to decide whether an access to a critical system resource is to be allowed or denied, based on the security policy currently in effect, to mark code as being privileged, thus affecting subsequent access determinations, and to obtain a snapshot of the current calling context so access-control decisions from a different context can be made with respect to the saved context. The {@link #checkPermission(Permission) checkPermission} method determines whether the access request indicated by a specified permission should be granted or denied. A sample call appears below. In this example, checkPermission will determine whether or not to grant read access to the file named testFile in the /temp directory. FilePermission perm = new FilePermission(/temp/testFile, read); AccessController.checkPermission(perm); If a requested access is allowed, checkPermission returns quietly. If denied, an AccessControlException is thrown. AccessControlException can also be thrown if the requested permission is of an incorrect type or contains an invalid value. Such information is given whenever possible. Suppose the current thread traversed m callers, in the order of caller 1 to caller 2 to caller m. Then caller m invoked the checkPermission method. The checkPermission method determines whether access is granted or denied based on the following algorithm: i = m; while (i > 0) { if (caller i's domain does not have the permission) throw AccessControlException else if (caller i is marked as privileged) { if (a context was specified in the call to doPrivileged) context.checkPermission(permission) return; } i = i - 1; }; // Next, check the context inherited when // the thread was created. Whenever a new thread is created, the // AccessControlContext at that time is // stored and associated with the new thread, as the inherited // context. inheritedContext.checkPermission(permission); A caller can be marked as being privileged (see {@link #doPrivileged(PrivilegedAction) doPrivileged} and below). When making access control decisions, the checkPermission method stops checking if it reaches a caller that was marked as privileged via a doPrivileged call without a context argument (see below for information about a context argument). If that caller's domain has the specified permission, no further checking is done and checkPermission returns quietly, indicating that the requested access is allowed. If that domain does not have the specified permission, an exception is thrown, as usual. The normal use of the privileged feature is as follows. If you don't need to return a value from within the privileged block, do the following: somemethod() { ...normal code here... AccessController.doPrivileged(new PrivilegedAction() { public Object run() { // privileged code goes here, for example: System.loadLibrary(awt); return null; // nothing to return } }); ...normal code here... } PrivilegedAction is an interface with a single method, named run, that returns an Object. The above example shows creation of an implementation of that interface; a concrete implementation of the run method is supplied. When the call to doPrivileged is made, an instance of the PrivilegedAction implementation is passed to it. The doPrivileged method calls the run method from the PrivilegedAction implementation after enabling privileges, and returns the run method's return value as the doPrivileged return value (which is ignored in this example). If you need to return a value, you can do something like the following: somemethod() { ...normal code here... String user = (String) AccessController.doPrivileged( new PrivilegedAction() { public Object run() { return System.getProperty(user.name); } } ); ...normal code here... } If the action performed in your run method could throw a checked exception (those listed in the throws clause of a method), then you need to use the PrivilegedExceptionAction interface instead of the PrivilegedAction interface: somemethod() throws FileNotFoundException { ...normal code here... try { FileInputStream fis = (FileInputStream) AccessController.doPrivileged( new PrivilegedExceptionAction() { public Object run() throws FileNotFoundException { return new FileInputStream(someFile); } } ); } catch (PrivilegedActionException e) { // e.getException() should be an instance of FileNotFoundException, // as only checked exceptions will be wrapped in a // PrivilegedActionException. throw (FileNotFoundException) e.getException(); } ...normal code here... } Be *very* careful in your use of the privileged construct, and always remember to make the privileged code section as small as possible. Note that checkPermission always performs security checks within the context of the currently executing thread. Sometimes a security check that should be made within a given context will actually need to be done from within a different context (for example, from within a worker thread). The {@link #getContext() getContext} method and AccessControlContext class are provided for this situation. The getContext method takes a snapshot of the current calling context, and places it in an AccessControlContext object, which it returns. A sample call is the following: AccessControlContext acc = AccessController.getContext() AccessControlContext itself has a checkPermission method that makes access decisions based on the context it encapsulates, rather than that of the current execution thread. Code within a different context can thus call that method on the previously-saved AccessControlContext object. A sample call is the following: acc.checkPermission(permission) There are also times where you don't know a priori which permissions to check the context against. In these cases you can use the doPrivileged method that takes a context: somemethod() { AccessController.doPrivileged(new PrivilegedAction() { public Object run() { // Code goes here. Any permission checks within this // run method will require that the intersection of the // callers protection domain and the snapshot's // context have the desired permission. } }, acc); ...normal code here... } @see AccessControlContext @version 1.60 10/03/23 @author Li Gong @author Roland Schemers
method,java/security/AccessController/doPrivileged/PrivilegedAction, Performs the specified PrivilegedAction with privileges enabled. The action is performed with all of the permissions possessed by the caller's protection domain. If the action's run method throws an (unchecked) exception, it will propagate through this method. Note that any DomainCombiner associated with the current AccessControlContext will be ignored while the action is performed. @param action the action to be performed. @return the value returned by the action's run method. @exception NullPointerException if the action is null @see #doPrivileged(PrivilegedAction,AccessControlContext) @see #doPrivileged(PrivilegedExceptionAction) @see #doPrivilegedWithCombiner(PrivilegedAction) @see java.security.DomainCombiner
method,java/security/AccessController/doPrivilegedWithCombiner/PrivilegedAction, Performs the specified PrivilegedAction with privileges enabled. The action is performed with all of the permissions possessed by the caller's protection domain. If the action's run method throws an (unchecked) exception, it will propagate through this method. This method preserves the current AccessControlContext's DomainCombiner (which may be null) while the action is performed. @param action the action to be performed. @return the value returned by the action's run method. @exception NullPointerException if the action is null @see #doPrivileged(PrivilegedAction) @see java.security.DomainCombiner @since 1.6
method,java/security/AccessController/doPrivileged/PrivilegedExceptionAction, Performs the specified PrivilegedExceptionAction with privileges enabled. The action is performed with all of the permissions possessed by the caller's protection domain. If the action's run method throws an unchecked exception, it will propagate through this method. Note that any DomainCombiner associated with the current AccessControlContext will be ignored while the action is performed. @param action the action to be performed @return the value returned by the action's run method @exception PrivilegedActionException if the specified action's run method threw a checked exception @exception NullPointerException if the action is null @see #doPrivileged(PrivilegedAction) @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext) @see #doPrivilegedWithCombiner(PrivilegedExceptionAction) @see java.security.DomainCombiner
method,java/security/AccessController/doPrivilegedWithCombiner/PrivilegedExceptionAction, Performs the specified PrivilegedExceptionAction with privileges enabled. The action is performed with all of the permissions possessed by the caller's protection domain. If the action's run method throws an unchecked exception, it will propagate through this method. This method preserves the current AccessControlContext's DomainCombiner (which may be null) while the action is performed. @param action the action to be performed. @return the value returned by the action's run method @exception PrivilegedActionException if the specified action's run method threw a checked exception @exception NullPointerException if the action is null @see #doPrivileged(PrivilegedAction) @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext) @see java.security.DomainCombiner @since 1.6
method,java/security/AccessController/getContext/, This method takes a snapshot of the current calling context, which includes the current Thread's inherited AccessControlContext, and places it in an AccessControlContext object. This context may then be checked at a later point, possibly in another thread. @see AccessControlContext @return the AccessControlContext based on the current context.
method,java/security/AccessController/checkPermission/Permission, Determines whether the access request indicated by the specified permission should be allowed or denied, based on the current AccessControlContext and security policy. This method quietly returns if the access request is permitted, or throws a suitable AccessControlException otherwise. @param perm the requested permission. @exception AccessControlException if the specified permission is not permitted, based on the current security policy. @exception NullPointerException if the specified permission is null and is checked based on the security policy currently in effect.
class,java/security/AccessControlException, This exception is thrown by the AccessController to indicate that a requested access (to a critical system resource such as the file system or the network) is denied. The reason to deny access can vary. For example, the requested permission might be of an incorrect type, contain an invalid value, or request access that is not allowed according to the security policy. Such information should be given whenever possible at the time the exception is thrown. @version 	1.15, 03/23/10 @author Li Gong @author Roland Schemers
class,java/security/AccessControlContext, An AccessControlContext is used to make system resource access decisions based on the context it encapsulates. More specifically, it encapsulates a context and has a single method, checkPermission, that is equivalent to the checkPermission method in the AccessController class, with one difference: The AccessControlContext checkPermission method makes access decisions based on the context it encapsulates, rather than that of the current execution thread. Thus, the purpose of AccessControlContext is for those situations where a security check that should be made within a given context actually needs to be done from within a different context (for example, from within a worker thread). An AccessControlContext is created by calling the AccessController.getContext method. The getContext method takes a snapshot of the current calling context, and places it in an AccessControlContext object, which it returns. A sample call is the following: AccessControlContext acc = AccessController.getContext() Code within a different context can subsequently call the checkPermission method on the previously-saved AccessControlContext object. A sample call is the following: acc.checkPermission(permission) @see AccessController @author Roland Schemers
method,java/security/AccessControlContext/getDomainCombiner/, Get the DomainCombiner associated with this AccessControlContext. @return the DomainCombiner associated with this		AccessControlContext, or null		if there is none. @exception SecurityException if the caller does not have permission		to get the DomainCombiner associated with this		AccessControlContext. @since 1.3
method,java/security/AccessControlContext/checkPermission/Permission, Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object. The request is allowed only if every ProtectionDomain in the context implies the permission. Otherwise the request is denied. This method quietly returns if the access request is permitted, or throws a suitable AccessControlException otherwise. @param perm the requested permission. @exception AccessControlException if the specified permission is not permitted, based on the current security policy and the context encapsulated by this object. @exception NullPointerException if the permission to check for is null.
method,java/security/AccessControlContext/AccessControlContext/AccessControlContext;DomainCombiner, Create a new AccessControlContext with the given AccessControlContext and DomainCombiner. This constructor associates the provided DomainCombiner with the provided AccessControlContext. @param acc the AccessControlContext associated		with the provided DomainCombiner. @param combiner the DomainCombiner to be associated		with the provided AccessControlContext. @exception NullPointerException if the provided		context is null. @exception SecurityException if the caller does not have permission		to invoke this constructor. @since 1.3
method,java/security/interfaces/RSAMultiPrimePrivateCrtKey/getOtherPrimeInfo/, Returns the otherPrimeInfo or null if there are only two prime factors (p and q). @return the otherPrimeInfo.
interface,java/security/interfaces/DSAKeyPairGenerator, An interface to an object capable of generating DSA key pairs. The initialize methods may each be called any number of times. If no initialize method is called on a DSAKeyPairGenerator, the default is to generate 1024-bit keys, using precomputed p, q and g parameters and an instance of SecureRandom as the random bit source. Users wishing to indicate DSA-specific parameters, and to generate a key pair suitable for use with the DSA algorithm typically Get a key pair generator for the DSA algorithm by calling the KeyPairGenerator getInstance method with DSA as its argument. Initialize the generator by casting the result to a DSAKeyPairGenerator and calling one of the initialize methods from this DSAKeyPairGenerator interface. Generate a key pair by calling the generateKeyPair method from the KeyPairGenerator class. Note: it is not always necessary to do do algorithm-specific initialization for a DSA key pair generator. That is, it is not always necessary to call an initialize method in this interface. Algorithm-independent initialization using the initialize method in the KeyPairGenerator interface is all that is needed when you accept defaults for algorithm-specific parameters. @see java.security.KeyPairGenerator
method,java/security/interfaces/DSAKeyPairGenerator/initialize/int;boolean;SecureRandom, Initializes the key pair generator for a given modulus length (instead of parameters), and an optional SecureRandom bit source. If a SecureRandom bit source is needed but not supplied, i.e. null, a default SecureRandom instance will be used. If genParams is true, this method generates new p, q and g parameters. If it is false, the method uses precomputed parameters for the modulus length requested. If there are no precomputed parameters for that modulus length, an exception will be thrown. It is guaranteed that there will always be default parameters for modulus lengths of 512 and 1024 bits. @param modlen the modulus length in bits. Valid values are any multiple of 8 between 512 and 1024, inclusive. @param random the random bit source to use to generate key bits; can be null. @param genParams whether or not to generate new parameters for the modulus length requested. @exception InvalidParameterException if modlen is not between 512 and 1024, or if genParams is false and there are no precomputed parameters for the requested modulus length. 
method,java/security/interfaces/DSAKey/getParams/, Returns the DSA-specific key parameters. These parameters are never secret. @return the DSA-specific key parameters. @see DSAParams
method,java/security/spec/X509EncodedKeySpec/getEncoded/, Returns the key bytes, encoded according to the X.509 standard. @return the X.509 encoding of the key. Returns a new array each time this method is called.
class,java/security/spec/RSAPrivateCrtKeySpec, This class specifies an RSA private key, as defined in the PKCS#1 standard, using the Chinese Remainder Theorem (CRT) information values for efficiency. @author Jan Luehe @version 1.14 10/03/23 @see java.security.Key @see java.security.KeyFactory @see KeySpec @see PKCS8EncodedKeySpec @see RSAPrivateKeySpec @see RSAPublicKeySpec
class,java/security/spec/RSAMultiPrimePrivateCrtKeySpec, This class specifies an RSA multi-prime private key, as defined in the PKCS#1 v2.1, using the Chinese Remainder Theorem (CRT) information values for efficiency. @author Valerie Peng @version 1.10 10/03/23 @see java.security.Key @see java.security.KeyFactory @see KeySpec @see PKCS8EncodedKeySpec @see RSAPrivateKeySpec @see RSAPublicKeySpec @see RSAOtherPrimeInfo @since 1.4
method,java/security/spec/RSAMultiPrimePrivateCrtKeySpec/getOtherPrimeInfo/, Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q). @return the otherPrimeInfo. Returns a new array each time this method is called.
method,java/security/spec/RSAMultiPrimePrivateCrtKeySpec/RSAMultiPrimePrivateCrtKeySpec/BigInteger;BigInteger;BigInteger;BigInteger;BigInteger;BigInteger;BigInteger;BigInteger;RSAOtherPrimeInfo[], Creates a new RSAMultiPrimePrivateCrtKeySpec given the modulus, publicExponent, privateExponent, primeP, primeQ, primeExponentP, primeExponentQ, crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1. Note that the contents of otherPrimeInfo are copied to protect against subsequent modification when constructing this object. @param modulus the modulus n. @param publicExponent the public exponent e. @param privateExponent the private exponent d. @param primeP the prime factor p of n. @param primeQ the prime factor q of n. @param primeExponentP this is d mod (p-1). @param primeExponentQ this is d mod (q-1). @param crtCoefficient the Chinese Remainder Theorem coefficient q-1 mod p. @param otherPrimeInfo triplets of the rest of primes, null can be specified if there are only two prime factors (p and q). @exception NullPointerException if any of the parameters, i.e. modulus, publicExponent, privateExponent, primeP, primeQ, primeExponentP, primeExponentQ, crtCoefficient, is null. @exception IllegalArgumentException if an empty, i.e. 0-length, otherPrimeInfo is specified.
class,java/security/spec/PSSParameterSpec, This class specifies a parameter spec for RSA-PSS signature scheme, as defined in the PKCS#1 v2.1 standard. Its ASN.1 definition in PKCS#1 standard is described below: RSASSA-PSS-params ::= SEQUENCE { hashAlgorithm [0] OAEP-PSSDigestAlgorithms DEFAULT sha1, maskGenAlgorithm [1] PKCS1MGFAlgorithms DEFAULT mgf1SHA1, saltLength [2] INTEGER DEFAULT 20, trailerField [3] INTEGER DEFAULT 1 } where OAEP-PSSDigestAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-sha1 PARAMETERS NULL }| { OID id-sha256 PARAMETERS NULL }| { OID id-sha384 PARAMETERS NULL }| { OID id-sha512 PARAMETERS NULL }, ... -- Allows for future expansion -- } PKCS1MGFAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms }, ... -- Allows for future expansion -- } Note: the PSSParameterSpec.DEFAULT uses the following: message digest -- SHA-1 mask generation function (mgf) -- MGF1 parameters for mgf -- MGF1ParameterSpec.SHA1 SaltLength -- 20 TrailerField -- 1 @see MGF1ParameterSpec @see AlgorithmParameterSpec @see java.security.Signature @author Valerie Peng @version 1.10 10/03/23 @since 1.4
method,java/security/spec/PKCS8EncodedKeySpec/getEncoded/, Returns the key bytes, encoded according to the PKCS #8 standard. @return the PKCS #8 encoding of the key. Returns a new array each time this method is called.
interface,java/security/spec/KeySpec, A (transparent) specification of the key material that constitutes a cryptographic key. If the key is stored on a hardware device, its specification may contain information that helps identify the key on the device. A key may be specified in an algorithm-specific way, or in an algorithm-independent encoding format (such as ASN.1). For example, a DSA private key may be specified by its components x, p, q, and g (see {@link DSAPrivateKeySpec}), or it may be specified using its DER encoding (see {@link PKCS8EncodedKeySpec}). This interface contains no methods or constants. Its only purpose is to group (and provide type safety for) all key specifications. All key specifications must implement this interface. @author Jan Luehe @version 1.19, 03/23/10 @see java.security.Key @see java.security.KeyFactory @see EncodedKeySpec @see X509EncodedKeySpec @see PKCS8EncodedKeySpec @see DSAPrivateKeySpec @see DSAPublicKeySpec @since 1.2
method,java/security/spec/EncodedKeySpec/getEncoded/, Returns the encoded key. @return the encoded key. Returns a new array each time this method is called.
method,java/security/spec/EncodedKeySpec/getFormat/, Returns the name of the encoding format associated with this key specification. If the opaque representation of a key (see {@link java.security.Key Key}) can be transformed (see {@link java.security.KeyFactory KeyFactory}) into this key specification (or a subclass of it), getFormat called on the opaque key returns the same value as the getFormat method of this key specification. @return a string representation of the encoding format.
class,java/security/spec/EllipticCurve, This immutable class holds the necessary values needed to represent an elliptic curve. @see ECField @see ECFieldFp @see ECFieldF2m @author Valerie Peng @version 1.6, 03/23/10 @since 1.5
method,java/security/spec/EllipticCurve/getSeed/, Returns the seeding bytes seed used during curve generation. May be null if not specified. @return the seeding bytes seed. A new array is returned each time this method is called.
class,java/security/spec/ECPoint, This immutable class represents a point on an elliptic curve (EC) in affine coordinates. Other coordinate systems can extend this class to represent this point in other coordinates. @author Valerie Peng @version 1.5, 03/23/10 @since 1.5
method,java/security/spec/ECPoint/getAffineX/, Returns the affine x-coordinate x. Note: POINT_INFINITY has a null affine x-coordinate. @return the affine x-coordinate.
method,java/security/spec/ECPoint/getAffineY/, Returns the affine y-coordinate y. Note: POINT_INFINITY has a null affine y-coordinate. @return the affine y-coordinate.
method,java/security/spec/ECFieldF2m/getMidTermsOfReductionPolynomial/, Returns an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis. @return an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis. A new array is returned each time this method is called.
method,java/security/spec/ECFieldF2m/ECFieldF2m/int;BigInteger, Creates an elliptic curve characteristic 2 finite field which has 2^m elements with polynomial basis. The reduction polynomial for this field is based on rp whose i-th bit correspondes to the i-th coefficient of the reduction polynomial. Note: A valid reduction polynomial is either a trinomial (X^m + X^k + 1 with m > k >= 1) or a pentanomial (X^m + X^k3 + X^k2 + X^k1 + 1 with m > k3 > k2 > k1 >= 1). @param m with 2^m being the number of elements. @param rp the BigInteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial. @exception NullPointerException if rp is null. @exception IllegalArgumentException if m is not positive, or rp does not represent a valid reduction polynomial. 
interface,java/security/spec/ECField, This interface represents an elliptic curve (EC) finite field. All specialized EC fields must implements this interface. @see ECFieldFp @see ECFieldF2m @author Valerie Peng @version 1.6, 03/23/10 @since 1.5
method,java/security/spec/ECField/getFieldSize/, Returns the field size in bits. Note: For prime finite field ECFieldFp, size of prime p in bits is returned. For characteristic 2 finite field ECFieldF2m, m is returned. @return the field size in bits.
interface,java/security/spec/AlgorithmParameterSpec, A (transparent) specification of cryptographic parameters. This interface contains no methods or constants. Its only purpose is to group (and provide type safety for) all parameter specifications. All parameter specifications must implement this interface. @author Jan Luehe @version 1.16, 03/23/10 @see java.security.AlgorithmParameters @see DSAParameterSpec @since 1.2
interface,java/security/cert/X509Extension, Interface for an X.509 extension. The extensions defined for X.509 v3 {@link X509Certificate Certificates} and v2 {@link X509CRL CRLs} (Certificate Revocation Lists) provide methods for associating additional attributes with users or public keys, for managing the certification hierarchy, and for managing CRL distribution. The X.509 extensions format also allows communities to define private extensions to carry information unique to those communities. Each extension in a certificate/CRL may be designated as critical or non-critical. A certificate/CRL-using system (an application validating a certificate/CRL) must reject the certificate/CRL if it encounters a critical extension it does not recognize. A non-critical extension may be ignored if it is not recognized. The ASN.1 definition for this is: Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension Extension ::= SEQUENCE { extnId OBJECT IDENTIFIER, critical BOOLEAN DEFAULT FALSE, extnValue OCTET STRING -- contains a DER encoding of a value -- of the type registered for use with -- the extnId object identifier value } Since not all extensions are known, the getExtensionValue method returns the DER-encoded OCTET STRING of the extension value (i.e., the extnValue). This can then be handled by a Class that understands the extension. @author Hemma Prafullchandra @version 1.24 10/03/23
class,java/security/cert/X509Certificate, Abstract class for X.509 certificates. This provides a standard way to access all the attributes of an X.509 certificate. In June of 1996, the basic X.509 v3 format was completed by ISO/IEC and ANSI X9, which is described below in ASN.1: Certificate ::= SEQUENCE { tbsCertificate TBSCertificate, signatureAlgorithm AlgorithmIdentifier, signature BIT STRING } These certificates are widely used to support authentication and other functionality in Internet security systems. Common applications include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL), code signing for trusted software distribution, and Secure Electronic Transactions (SET). These certificates are managed and vouched for by Certificate Authorities (CAs). CAs are services which create certificates by placing data in the X.509 standard format and then digitally signing that data. CAs act as trusted third parties, making introductions between principals who have no direct knowledge of each other. CA certificates are either signed by themselves, or by some other CA such as a root CA. More information can be found in RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile at http://www.ietf.org/rfc/rfc2459.txt . The ASN.1 definition of tbsCertificate is: TBSCertificate ::= SEQUENCE { version [0] EXPLICIT Version DEFAULT v1, serialNumber CertificateSerialNumber, signature AlgorithmIdentifier, issuer Name, validity Validity, subject Name, subjectPublicKeyInfo SubjectPublicKeyInfo, issuerUniqueID [1] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version must be v2 or v3 subjectUniqueID [2] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version must be v2 or v3 extensions [3] EXPLICIT Extensions OPTIONAL -- If present, version must be v3 } Certificates are instantiated using a certificate factory. The following is an example of how to instantiate an X.509 certificate: InputStream inStream = new FileInputStream(fileName-of-cert); CertificateFactory cf = CertificateFactory.getInstance(X.509); X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream); inStream.close(); @author Hemma Prafullchandra @version 1.41 @see Certificate @see CertificateFactory @see X509Extension
method,java/security/cert/X509Certificate/getTBSCertificate/, Gets the DER-encoded certificate information, the tbsCertificate from this certificate. This can be used to verify the signature independently. @return the DER-encoded certificate information. @exception CertificateEncodingException if an encoding error occurs.
method,java/security/cert/X509Certificate/getIssuerUniqueID/, Gets the issuerUniqueID value from the certificate. The issuer unique identifier is present in the certificate to handle the possibility of reuse of issuer names over time. RFC 2459 recommends that names not be reused and that conforming certificates not make use of unique identifiers. Applications conforming to that profile should be capable of parsing unique identifiers and making comparisons. The ASN.1 definition for this is: issuerUniqueID [1] IMPLICIT UniqueIdentifier OPTIONAL UniqueIdentifier ::= BIT STRING @return the issuer unique identifier or null if it is not present in the certificate.
method,java/security/cert/X509Certificate/getKeyUsage/, Gets a boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15). The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate. The ASN.1 definition for this is: KeyUsage ::= BIT STRING { digitalSignature (0), nonRepudiation (1), keyEncipherment (2), dataEncipherment (3), keyAgreement (4), keyCertSign (5), cRLSign (6), encipherOnly (7), decipherOnly (8) } RFC 2459 recommends that when used, this be marked as a critical extension. @return the KeyUsage extension of this certificate, represented as an array of booleans. The order of KeyUsage values in the array is the same as in the above ASN.1 definition. The array will contain a value for each KeyUsage defined above. If the KeyUsage list encoded in the certificate is longer than the above list, it will not be truncated. Returns null if this certificate does not contain a KeyUsage extension.
method,java/security/cert/X509Certificate/getBasicConstraints/, Gets the certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19). The basic constraints extension identifies whether the subject of the certificate is a Certificate Authority (CA) and how deep a certification path may exist through that CA. The pathLenConstraint field (see below) is meaningful only if cA is set to TRUE. In this case, it gives the maximum number of CA certificates that may follow this certificate in a certification path. A value of zero indicates that only an end-entity certificate may follow in the path. Note that for RFC 2459 this extension is always marked critical if cA is TRUE, meaning this certificate belongs to a Certificate Authority. The ASN.1 definition for this is: BasicConstraints ::= SEQUENCE { cA BOOLEAN DEFAULT FALSE, pathLenConstraint INTEGER (0..MAX) OPTIONAL } @return the value of pathLenConstraint if the BasicConstraints extension is present in the certificate and the subject of the certificate is a CA, otherwise -1. If the subject of the certificate is a CA and pathLenConstraint does not appear, Integer.MAX_VALUE is returned to indicate that there is no limit to the allowed length of the certification path.
method,java/security/cert/X509CertSelector/setCertificate/X509Certificate, Sets the certificateEquals criterion. The specified X509Certificate must be equal to the X509Certificate passed to the match method. If null, then this check is not applied. This method is particularly useful when it is necessary to match a single certificate. Although other criteria can be specified in conjunction with the certificateEquals criterion, it is usually not practical or necessary. @param cert the X509Certificate to match (or null) @see #getCertificate
method,java/security/cert/X509CertSelector/setSerialNumber/BigInteger, Sets the serialNumber criterion. The specified serial number must match the certificate serial number in the X509Certificate. If null, any certificate serial number will do. @param serial the certificate serial number to match (or null) @see #getSerialNumber
method,java/security/cert/X509CertSelector/setIssuer/X500Principal, Sets the issuer criterion. The specified distinguished name must match the issuer distinguished name in the X509Certificate. If null, any issuer distinguished name will do. @param issuer a distinguished name as X500Principal (or null) @since 1.5
method,java/security/cert/X509CertSelector/setSubject/X500Principal, Sets the subject criterion. The specified distinguished name must match the subject distinguished name in the X509Certificate. If null, any subject distinguished name will do. @param subject a distinguished name as X500Principal (or null) @since 1.5
method,java/security/cert/X509CertSelector/setCertificateValid/Date, Sets the certificateValid criterion. The specified date must fall within the certificate validity period for the X509Certificate. If null, no certificateValid check will be done. Note that the Date supplied here is cloned to protect against subsequent modifications. @param certValid the Date to check (or null) @see #getCertificateValid
method,java/security/cert/X509CertSelector/setPrivateKeyValid/Date, Sets the privateKeyValid criterion. The specified date must fall within the private key validity period for the X509Certificate. If null, no privateKeyValid check will be done. Note that the Date supplied here is cloned to protect against subsequent modifications. @param privateKeyValid the Date to check (or null) @see #getPrivateKeyValid
method,java/security/cert/X509CertSelector/setSubjectPublicKeyAlgID/String, Sets the subjectPublicKeyAlgID criterion. The X509Certificate must contain a subject public key with the specified algorithm. If null, no subjectPublicKeyAlgID check will be done. @param oid The object identifier (OID) of the algorithm to check for (or null). An OID is represented by a set of nonnegative integers separated by periods. @throws IOException if the OID is invalid, such as the first component being not 0, 1 or 2 or the second component being greater than 39. @see #getSubjectPublicKeyAlgID
method,java/security/cert/X509CertSelector/setSubjectPublicKey/PublicKey, Sets the subjectPublicKey criterion. The X509Certificate must contain the specified subject public key. If null, no subjectPublicKey check will be done. @param key the subject public key to check for (or null) @see #getSubjectPublicKey
method,java/security/cert/X509CertSelector/setKeyUsage/boolean[], Sets the keyUsage criterion. The X509Certificate must allow the specified keyUsage values. If null, no keyUsage check will be done. Note that an X509Certificate that has no keyUsage extension implicitly allows all keyUsage values. Note that the boolean array supplied here is cloned to protect against subsequent modifications. @param keyUsage a boolean array in the same format as the boolean array returned by {@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}. Or null. @see #getKeyUsage
method,java/security/cert/X509CertSelector/setExtendedKeyUsage/Set, Sets the extendedKeyUsage criterion. The X509Certificate must allow the specified key purposes in its extended key usage extension. If keyPurposeSet is empty or null, no extendedKeyUsage check will be done. Note that an X509Certificate that has no extendedKeyUsage extension implicitly allows all key purposes. Note that the Set is cloned to protect against subsequent modifications. @param keyPurposeSet a Set of key purpose OIDs in string format (or null). Each OID is represented by a set of nonnegative integers separated by periods. @throws IOException if the OID is invalid, such as the first component being not 0, 1 or 2 or the second component being greater than 39. @see #getExtendedKeyUsage
method,java/security/cert/X509CertSelector/setMatchAllSubjectAltNames/boolean, Enables/disables matching all of the subjectAlternativeNames specified in the {@link #setSubjectAlternativeNames setSubjectAlternativeNames} or {@link #addSubjectAlternativeName addSubjectAlternativeName} methods. If enabled, the X509Certificate must contain all of the specified subject alternative names. If disabled, the X509Certificate must contain at least one of the specified subject alternative names. The matchAllNames flag is true by default. @param matchAllNames if true, the flag is enabled; if false, the flag is disabled. @see #getMatchAllSubjectAltNames
method,java/security/cert/X509CertSelector/setSubjectAlternativeNames/Collection, Sets the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see {@link #setMatchAllSubjectAltNames setMatchAllSubjectAltNames}). This method allows the caller to specify, with a single method call, the complete set of subject alternative names for the subjectAlternativeNames criterion. The specified value replaces the previous value for the subjectAlternativeNames criterion. The names parameter (if not null) is a Collection with one entry for each name to be included in the subject alternative name criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If null is supplied as the value for this argument, no subjectAlternativeNames check will be performed. Each subject alternative name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see {@link #addSubjectAlternativeName(int type, String name) addSubjectAlternativeName(int type, String name)} and {@link #addSubjectAlternativeName(int type, byte [] name) addSubjectAlternativeName(int type, byte [] name)}. Note: for distinguished names, specify the byte array form instead of the String form. See the note in {@link #addSubjectAlternativeName(int, String)} for more information. Note that the names parameter can contain duplicate names (same name and name type), but they may be removed from the Collection of names returned by the {@link #getSubjectAlternativeNames getSubjectAlternativeNames} method. Note that a deep copy is performed on the Collection to protect against subsequent modifications. @param names a Collection of names (or null) @throws IOException if a parsing error occurs @see #getSubjectAlternativeNames
method,java/security/cert/X509CertSelector/setBasicConstraints/int, Sets the basic constraints constraint. If the value is greater than or equal to zero, X509Certificates must include a basicConstraints extension with a pathLen of at least this value. If the value is -2, only end-entity certificates are accepted. If the value is -1, no check is done. This constraint is useful when building a certification path forward (from the target toward the trust anchor. If a partial path has been built, any candidate certificate must have a maxPathLen value greater than or equal to the number of certificates in the partial path. @param minMaxPathLen the value for the basic constraints constraint @throws IllegalArgumentException if the value is less than -2 @see #getBasicConstraints
method,java/security/cert/X509CertSelector/setPolicy/Set, Sets the policy constraint. The X509Certificate must include at least one of the specified policies in its certificate policies extension. If certPolicySet is empty, then the X509Certificate must include at least some specified policy in its certificate policies extension. If certPolicySet is null, no policy check will be performed. Note that the Set is cloned to protect against subsequent modifications. @param certPolicySet a Set of certificate policy OIDs in string format (or null). Each OID is represented by a set of nonnegative integers 			 separated by periods. @throws IOException if a parsing error occurs on the OID such as the first component is not 0, 1 or 2 or the second component is greater than 39. @see #getPolicy
method,java/security/cert/X509CertSelector/setPathToNames/Collection, Sets the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified names. This method allows the caller to specify, with a single method call, the complete set of names which the X509Certificates's name constraints must permit. The specified value replaces the previous value for the pathToNames criterion. This constraint is useful when building a certification path forward (from the target toward the trust anchor. If a partial path has been built, any candidate certificate must not include name constraints that would prohibit building a path to any of the names in the partial path. The names parameter (if not null) is a Collection with one entry for each name to be included in the pathToNames criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If null is supplied as the value for this argument, no pathToNames check will be performed. Each name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see {@link #addPathToName(int type, String name) addPathToName(int type, String name)} and {@link #addPathToName(int type, byte [] name) addPathToName(int type, byte [] name)}. Note: for distinguished names, specify the byte array form instead of the String form. See the note in {@link #addPathToName(int, String)} for more information. Note that the names parameter can contain duplicate names (same name and name type), but they may be removed from the Collection of names returned by the {@link #getPathToNames getPathToNames} method. Note that a deep copy is performed on the Collection to protect against subsequent modifications. @param names a Collection with one entry per name (or null) @throws IOException if a parsing error occurs @see #getPathToNames
method,java/security/cert/X509CertSelector/getCertificate/, Returns the certificateEquals criterion. The specified X509Certificate must be equal to the X509Certificate passed to the match method. If null, this check is not applied. @return the X509Certificate to match (or null) @see #setCertificate
method,java/security/cert/X509CertSelector/getSerialNumber/, Returns the serialNumber criterion. The specified serial number must match the certificate serial number in the X509Certificate. If null, any certificate serial number will do. @return the certificate serial number to match (or null) @see #setSerialNumber
method,java/security/cert/X509CertSelector/getIssuer/, Returns the issuer criterion as an X500Principal. This distinguished name must match the issuer distinguished name in the X509Certificate. If null, the issuer criterion is disabled and any issuer distinguished name will do. @return the required issuer distinguished name as X500Principal (or null) @since 1.5
method,java/security/cert/X509CertSelector/getIssuerAsBytes/, Returns the issuer criterion as a byte array. This distinguished name must match the issuer distinguished name in the X509Certificate. If null, the issuer criterion is disabled and any issuer distinguished name will do. If the value returned is not null, it is a byte array containing a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is supplied in the documentation for {@link #setIssuer(byte [] issuerDN) setIssuer(byte [] issuerDN)}. Note that the byte array returned is cloned to protect against subsequent modifications. @return a byte array containing the required issuer distinguished name in ASN.1 DER format (or null) @throws IOException if an encoding error occurs
method,java/security/cert/X509CertSelector/getSubject/, Returns the subject criterion as an X500Principal. This distinguished name must match the subject distinguished name in the X509Certificate. If null, the subject criterion is disabled and any subject distinguished name will do. @return the required subject distinguished name as X500Principal (or null) @since 1.5
method,java/security/cert/X509CertSelector/getSubjectAsBytes/, Returns the subject criterion as a byte array. This distinguished name must match the subject distinguished name in the X509Certificate. If null, the subject criterion is disabled and any subject distinguished name will do. If the value returned is not null, it is a byte array containing a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is supplied in the documentation for {@link #setSubject(byte [] subjectDN) setSubject(byte [] subjectDN)}. Note that the byte array returned is cloned to protect against subsequent modifications. @return a byte array containing the required subject distinguished name in ASN.1 DER format (or null) @throws IOException if an encoding error occurs
method,java/security/cert/X509CertSelector/getSubjectKeyIdentifier/, Returns the subjectKeyIdentifier criterion. The X509Certificate must contain a SubjectKeyIdentifier extension with the specified value. If null, no subjectKeyIdentifier check will be done. Note that the byte array returned is cloned to protect against subsequent modifications. @return the key identifier (or null) @see #setSubjectKeyIdentifier
method,java/security/cert/X509CertSelector/getAuthorityKeyIdentifier/, Returns the authorityKeyIdentifier criterion. The X509Certificate must contain a AuthorityKeyIdentifier extension with the specified value. If null, no authorityKeyIdentifier check will be done. Note that the byte array returned is cloned to protect against subsequent modifications. @return the key identifier (or null) @see #setAuthorityKeyIdentifier
method,java/security/cert/X509CertSelector/getCertificateValid/, Returns the certificateValid criterion. The specified date must fall within the certificate validity period for the X509Certificate. If null, no certificateValid check will be done. Note that the Date returned is cloned to protect against subsequent modifications. @return the Date to check (or null) @see #setCertificateValid
method,java/security/cert/X509CertSelector/getPrivateKeyValid/, Returns the privateKeyValid criterion. The specified date must fall within the private key validity period for the X509Certificate. If null, no privateKeyValid check will be done. Note that the Date returned is cloned to protect against subsequent modifications. @return the Date to check (or null) @see #setPrivateKeyValid
method,java/security/cert/X509CertSelector/getSubjectPublicKeyAlgID/, Returns the subjectPublicKeyAlgID criterion. The X509Certificate must contain a subject public key with the specified algorithm. If null, no subjectPublicKeyAlgID check will be done. @return the object identifier (OID) of the signature algorithm to check for (or null). An OID is represented by a set of nonnegative integers separated by periods. @see #setSubjectPublicKeyAlgID
method,java/security/cert/X509CertSelector/getSubjectPublicKey/, Returns the subjectPublicKey criterion. The X509Certificate must contain the specified subject public key. If null, no subjectPublicKey check will be done. @return the subject public key to check for (or null) @see #setSubjectPublicKey
method,java/security/cert/X509CertSelector/getKeyUsage/, Returns the keyUsage criterion. The X509Certificate must allow the specified keyUsage values. If null, no keyUsage check will be done. Note that the boolean array returned is cloned to protect against subsequent modifications. @return a boolean array in the same format as the boolean array returned by {@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}. Or null. @see #setKeyUsage
method,java/security/cert/X509CertSelector/getExtendedKeyUsage/, Returns the extendedKeyUsage criterion. The X509Certificate must allow the specified key purposes in its extended key usage extension. If the keyPurposeSet returned is empty or null, no extendedKeyUsage check will be done. Note that an X509Certificate that has no extendedKeyUsage extension implicitly allows all key purposes. @return an immutable Set of key purpose OIDs in string format (or null) @see #setExtendedKeyUsage
method,java/security/cert/X509CertSelector/getMatchAllSubjectAltNames/, Indicates if the X509Certificate must contain all or at least one of the subjectAlternativeNames specified in the {@link #setSubjectAlternativeNames setSubjectAlternativeNames} or {@link #addSubjectAlternativeName addSubjectAlternativeName} methods. If true, the X509Certificate must contain all of the specified subject alternative names. If false, the X509Certificate must contain at least one of the specified subject alternative names. @return true if the flag is enabled; false if the flag is disabled. The flag is true by default. @see #setMatchAllSubjectAltNames
method,java/security/cert/X509CertSelector/getSubjectAlternativeNames/, Returns a copy of the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see {@link #getMatchAllSubjectAltNames getMatchAllSubjectAltNames}). If the value returned is null, no subjectAlternativeNames check will be performed. If the value returned is not null, it is a Collection with one entry for each name to be included in the subject alternative name criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. Note that the Collection returned may contain duplicate names (same name and name type). Each subject alternative name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see {@link #addSubjectAlternativeName(int type, String name) addSubjectAlternativeName(int type, String name)} and {@link #addSubjectAlternativeName(int type, byte [] name) addSubjectAlternativeName(int type, byte [] name)}. Note that a deep copy is performed on the Collection to protect against subsequent modifications. @return a Collection of names (or null) @see #setSubjectAlternativeNames
method,java/security/cert/X509CertSelector/getNameConstraints/, Returns the name constraints criterion. The X509Certificate must have subject and subject alternative names that meet the specified name constraints. The name constraints are returned as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 2459 and X.509. The ASN.1 notation for this structure is supplied in the documentation for {@link #setNameConstraints(byte [] bytes) setNameConstraints(byte [] bytes)}. Note that the byte array returned is cloned to protect against subsequent modifications. @return a byte array containing the ASN.1 DER encoding of a NameConstraints extension used for checking name constraints. null if no name constraints check will be performed. @see #setNameConstraints
method,java/security/cert/X509CertSelector/getBasicConstraints/, Returns the basic constraints constraint. If the value is greater than or equal to zero, the X509Certificates must include a basicConstraints extension with a pathLen of at least this value. If the value is -2, only end-entity certificates are accepted. If the value is -1, no basicConstraints check is done. @return the value for the basic constraints constraint @see #setBasicConstraints
method,java/security/cert/X509CertSelector/getPolicy/, Returns the policy criterion. The X509Certificate must include at least one of the specified policies in its certificate policies extension. If the Set returned is empty, then the X509Certificate must include at least some specified policy in its certificate policies extension. If the Set returned is null, no policy check will be performed. @return an immutable Set of certificate policy OIDs in string format (or null) @see #setPolicy
method,java/security/cert/X509CertSelector/getPathToNames/, Returns a copy of the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified names. If the value returned is null, no pathToNames check will be performed. If the value returned is not null, it is a Collection with one entry for each name to be included in the pathToNames criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. Note that the Collection returned may contain duplicate names (same name and name type). Each name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see {@link #addPathToName(int type, String name) addPathToName(int type, String name)} and {@link #addPathToName(int type, byte [] name) addPathToName(int type, byte [] name)}. Note that a deep copy is performed on the Collection to protect against subsequent modifications. @return a Collection of names (or null) @see #setPathToNames
method,java/security/cert/X509CertSelector/match/Certificate, Decides whether a Certificate should be selected. @param cert the Certificate to be checked @return true if the Certificate should be selected, false otherwise
method,java/security/cert/X509CRLSelector/setIssuers/Collection, Sets the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. If null, any issuer distinguished name will do. This method allows the caller to specify, with a single method call, the complete set of issuer names which X509CRLs may contain. The specified value replaces the previous value for the issuerNames criterion. The names parameter (if not null) is a Collection of X500Principals. Note that the names parameter can contain duplicate distinguished names, but they may be removed from the Collection of names returned by the {@link #getIssuers getIssuers} method. Note that a copy is performed on the Collection to protect against subsequent modifications. @param issuers a Collection of X500Principals (or null) @see #getIssuers @since 1.5
method,java/security/cert/X509CRLSelector/addIssuer/X500Principal, Adds a name to the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. This method allows the caller to add a name to the set of issuer names which X509CRLs may contain. The specified name is added to any previous value for the issuerNames criterion. If the specified name is a duplicate, it may be ignored. @param issuer the issuer as X500Principal @since 1.5
method,java/security/cert/X509CRLSelector/setMinCRLNumber/BigInteger, Sets the minCRLNumber criterion. The X509CRL must have a CRL number extension whose value is greater than or equal to the specified value. If null, no minCRLNumber check will be done. @param minCRL the minimum CRL number accepted (or null)
method,java/security/cert/X509CRLSelector/setMaxCRLNumber/BigInteger, Sets the maxCRLNumber criterion. The X509CRL must have a CRL number extension whose value is less than or equal to the specified value. If null, no maxCRLNumber check will be done. @param maxCRL the maximum CRL number accepted (or null)
method,java/security/cert/X509CRLSelector/setCertificateChecking/X509Certificate, Sets the certificate being checked. This is not a criterion. Rather, it is optional information that may help a CertStore find CRLs that would be relevant when checking revocation for the specified certificate. If null is specified, then no such optional information is provided. @param cert the X509Certificate being checked (or null) @see #getCertificateChecking
method,java/security/cert/X509CRLSelector/getIssuers/, Returns the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. If the value returned is null, any issuer distinguished name will do. If the value returned is not null, it is a unmodifiable Collection of X500Principals. @return an unmodifiable Collection of names (or null) @see #setIssuers @since 1.5
method,java/security/cert/X509CRLSelector/getMinCRL/, Returns the minCRLNumber criterion. The X509CRL must have a CRL number extension whose value is greater than or equal to the specified value. If null, no minCRLNumber check will be done. @return the minimum CRL number accepted (or null)
method,java/security/cert/X509CRLSelector/getMaxCRL/, Returns the maxCRLNumber criterion. The X509CRL must have a CRL number extension whose value is less than or equal to the specified value. If null, no maxCRLNumber check will be done. @return the maximum CRL number accepted (or null)
method,java/security/cert/X509CRLSelector/getCertificateChecking/, Returns the certificate being checked. This is not a criterion. Rather, it is optional information that may help a CertStore find CRLs that would be relevant when checking revocation for the specified certificate. If the value returned is null, then no such optional information is provided. @return the certificate being checked (or null) @see #setCertificateChecking
method,java/security/cert/X509CRLSelector/match/CRL, Decides whether a CRL should be selected. @param crl the CRL to be checked @return true if the CRL should be selected, false otherwise
class,java/security/cert/X509CRLEntry, Abstract class for a revoked certificate in a CRL (Certificate Revocation List). The ASN.1 definition for revokedCertificates is: revokedCertificates SEQUENCE OF SEQUENCE { userCertificate CertificateSerialNumber, revocationDate ChoiceOfTime, crlEntryExtensions Extensions OPTIONAL -- if present, must be v2 } OPTIONAL CertificateSerialNumber ::= INTEGER Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension Extension ::= SEQUENCE { extnId OBJECT IDENTIFIER, critical BOOLEAN DEFAULT FALSE, extnValue OCTET STRING -- contains a DER encoding of a value -- of the type registered for use with -- the extnId object identifier value } @see X509CRL @see X509Extension @author Hemma Prafullchandra @version 1.18 10/03/23
method,java/security/cert/X509CRLEntry/getEncoded/, Returns the ASN.1 DER-encoded form of this CRL Entry, that is the inner SEQUENCE. @return the encoded form of this certificate @exception CRLException if an encoding error occurs.
class,java/security/cert/X509CRL, Abstract class for an X.509 Certificate Revocation List (CRL). A CRL is a time-stamped list identifying revoked certificates. It is signed by a Certificate Authority (CA) and made freely available in a public repository. Each revoked certificate is identified in a CRL by its certificate serial number. When a certificate-using system uses a certificate (e.g., for verifying a remote user's digital signature), that system not only checks the certificate signature and validity but also acquires a suitably- recent CRL and checks that the certificate serial number is not on that CRL. The meaning of suitably-recent may vary with local policy, but it usually means the most recently-issued CRL. A CA issues a new CRL on a regular periodic basis (e.g., hourly, daily, or weekly). Entries are added to CRLs as revocations occur, and an entry may be removed when the certificate expiration date is reached. The X.509 v2 CRL format is described below in ASN.1: CertificateList ::= SEQUENCE { tbsCertList TBSCertList, signatureAlgorithm AlgorithmIdentifier, signature BIT STRING } More information can be found in RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile at http://www.ietf.org/rfc/rfc2459.txt . The ASN.1 definition of tbsCertList is: TBSCertList ::= SEQUENCE { version Version OPTIONAL, -- if present, must be v2 signature AlgorithmIdentifier, issuer Name, thisUpdate ChoiceOfTime, nextUpdate ChoiceOfTime OPTIONAL, revokedCertificates SEQUENCE OF SEQUENCE { userCertificate CertificateSerialNumber, revocationDate ChoiceOfTime, crlEntryExtensions Extensions OPTIONAL -- if present, must be v2 } OPTIONAL, crlExtensions [0] EXPLICIT Extensions OPTIONAL -- if present, must be v2 } CRLs are instantiated using a certificate factory. The following is an example of how to instantiate an X.509 CRL: InputStream inStream = new FileInputStream(fileName-of-crl); CertificateFactory cf = CertificateFactory.getInstance(X.509); X509CRL crl = (X509CRL)cf.generateCRL(inStream); inStream.close(); @author Hemma Prafullchandra @version 1.31, 03/23/10 @see CRL @see CertificateFactory @see X509Extension
method,java/security/cert/X509CRL/getEncoded/, Returns the ASN.1 DER-encoded form of this CRL. @return the encoded form of this certificate @exception CRLException if an encoding error occurs.
method,java/security/cert/X509CRL/verify/PublicKey, Verifies that this CRL was signed using the private key that corresponds to the given public key. @param key the PublicKey used to carry out the verification. @exception NoSuchAlgorithmException on unsupported signature algorithms. @exception InvalidKeyException on incorrect key. @exception NoSuchProviderException if there's no default provider. @exception SignatureException on signature errors. @exception CRLException on encoding errors.
method,java/security/cert/X509CRL/verify/PublicKey;String, Verifies that this CRL was signed using the private key that corresponds to the given public key. This method uses the signature verification engine supplied by the given provider. @param key the PublicKey used to carry out the verification. @param sigProvider the name of the signature provider. @exception NoSuchAlgorithmException on unsupported signature algorithms. @exception InvalidKeyException on incorrect key. @exception NoSuchProviderException on incorrect provider. @exception SignatureException on signature errors. @exception CRLException on encoding errors.
method,java/security/cert/X509CRL/getVersion/, Gets the version (version number) value from the CRL. The ASN.1 definition for this is: version Version OPTIONAL, -- if present, must be v2 Version ::= INTEGER { v1(0), v2(1), v3(2) } -- v3 does not apply to CRLs but appears for consistency -- with definition of Version for certs @return the version number, i.e. 1 or 2.
method,java/security/cert/X509CRL/getTBSCertList/, Gets the DER-encoded CRL information, the tbsCertList from this CRL. This can be used to verify the signature independently. @return the DER-encoded CRL information. @exception CRLException if an encoding error occurs.
method,java/security/cert/TrustAnchor/getNameConstraints/, Returns the name constraints parameter. The specified name constraints are associated with this trust anchor and are intended to be used as additional constraints when validating an X.509 certification path. The name constraints are returned as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 2459 and X.509. The ASN.1 notation for this structure is supplied in the documentation for {@link #TrustAnchor(X509Certificate, byte[]) TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }. Note that the byte array returned is cloned to protect against subsequent modifications. @return a byte array containing the ASN.1 DER encoding of a NameConstraints extension used for checking name constraints, or null if not set. 
method,java/security/cert/PolicyQualifierInfo/getPolicyQualifierId/, Returns the policyQualifierId field of this PolicyQualifierInfo. The policyQualifierId is an Object Identifier (OID) represented by a set of nonnegative integers separated by periods. @return the OID (never null)
method,java/security/cert/PolicyQualifierInfo/getPolicyQualifier/, Returns the ASN.1 DER encoded form of the qualifier field of this PolicyQualifierInfo. @return the ASN.1 DER encoded bytes of the qualifier field. Note that a copy is returned, so the data is cloned each time this method is called.
method,java/security/cert/PKIXParameters/getTrustAnchors/, Returns an immutable Set of the most-trusted CAs. @return an immutable Set of TrustAnchors (never null) @see #setTrustAnchors
method,java/security/cert/PKIXParameters/setTrustAnchors/Set, Sets the Set of most-trusted CAs. Note that the Set is copied to protect against subsequent modifications. @param trustAnchors a Set of TrustAnchors @throws InvalidAlgorithmParameterException if the specified Set is empty (trustAnchors.isEmpty() == true) @throws NullPointerException if the specified Set is null @throws ClassCastException if any of the elements in the set are not of type java.security.cert.TrustAnchor @see #getTrustAnchors
method,java/security/cert/PKIXParameters/getInitialPolicies/, Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing. The default return value is an empty Set, which is interpreted as meaning that any policy would be acceptable. @return an immutable Set of initial policy OIDs in String format, or an empty Set (implying any policy is acceptable). Never returns null. @see #setInitialPolicies
method,java/security/cert/PKIXParameters/setInitialPolicies/Set, Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing. By default, any policy is acceptable (i.e. all policies), so a user that wants to allow any policy as acceptable does not need to call this method, or can call it with an empty Set (or null). Note that the Set is copied to protect against subsequent modifications. @param initialPolicies a Set of initial policy OIDs in String format (or null) @throws ClassCastException if any of the elements in the set are not of type String @see #getInitialPolicies
method,java/security/cert/PKIXParameters/setCertStores/List, Sets the list of CertStores to be used in finding certificates and CRLs. May be null, in which case no CertStores will be used. The first CertStores in the list may be preferred to those that appear later. Note that the List is copied to protect against subsequent modifications. @param stores a List of CertStores (or null) @throws ClassCastException if any of the elements in the list are not of type java.security.cert.CertStore @see #getCertStores
method,java/security/cert/PKIXParameters/getCertStores/, Returns an immutable List of CertStores that are used to find certificates and CRLs. @return an immutable List of CertStores (may be empty, but never null) @see #setCertStores
method,java/security/cert/PKIXParameters/setRevocationEnabled/boolean, Sets the RevocationEnabled flag. If this flag is true, the default revocation checking mechanism of the underlying PKIX service provider will be used. If this flag is false, the default revocation checking mechanism will be disabled (not used). When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common strategy for checking revocation, since each service provider must support revocation checking to be PKIX compliant. Sophisticated applications should set this flag to false when it is not practical to use a PKIX service provider's default revocation checking mechanism or when an alternative revocation checking mechanism is to be substituted (by also calling the {@link #addCertPathChecker addCertPathChecker} or {@link #setCertPathCheckers setCertPathCheckers} methods). @param val the new value of the RevocationEnabled flag
method,java/security/cert/PKIXParameters/setExplicitPolicyRequired/boolean, Sets the ExplicitPolicyRequired flag. If this flag is true, an acceptable policy needs to be explicitly identified in every certificate. By default, the ExplicitPolicyRequired flag is false. @param val true if explicit policy is to be required, false otherwise
method,java/security/cert/PKIXParameters/isExplicitPolicyRequired/, Checks if explicit policy is required. If this flag is true, an acceptable policy needs to be explicitly identified in every certificate. By default, the ExplicitPolicyRequired flag is false. @return true if explicit policy is required, false otherwise
method,java/security/cert/PKIXParameters/setAnyPolicyInhibited/boolean, Sets state to determine if the any policy OID should be processed if it is included in a certificate. By default, the any policy OID is not inhibited ({@link #isAnyPolicyInhibited isAnyPolicyInhibited()} returns false). @param val true if the any policy OID is to be inhibited, false otherwise
method,java/security/cert/PKIXParameters/isAnyPolicyInhibited/, Checks whether the any policy OID should be processed if it is included in a certificate. @return true if the any policy OID is inhibited, false otherwise
method,java/security/cert/PKIXParameters/setPolicyQualifiersRejected/boolean, Sets the PolicyQualifiersRejected flag. If this flag is true, certificates that include policy qualifiers in a certificate policies extension that is marked critical are rejected. If the flag is false, certificates are not rejected on this basis. When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications that want to use a more sophisticated policy must set this flag to false. Note that the PKIX certification path validation algorithm specifies that any policy qualifier in a certificate policies extension that is marked critical must be processed and validated. Otherwise the certification path must be rejected. If the policyQualifiersRejected flag is set to false, it is up to the application to validate all policy qualifiers in this manner in order to be PKIX compliant. @param qualifiersRejected the new value of the PolicyQualifiersRejected flag @see #getPolicyQualifiersRejected @see PolicyQualifierInfo
method,java/security/cert/PKIXParameters/getPolicyQualifiersRejected/, Gets the PolicyQualifiersRejected flag. If this flag is true, certificates that include policy qualifiers in a certificate policies extension that is marked critical are rejected. If the flag is false, certificates are not rejected on this basis. When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications that want to use a more sophisticated policy must set this flag to false. @return the current value of the PolicyQualifiersRejected flag @see #setPolicyQualifiersRejected
method,java/security/cert/PKIXParameters/getCertPathCheckers/, Returns the List of certification path checkers. The returned List is immutable, and each PKIXCertPathChecker in the List is cloned to protect against subsequent modifications. @return an immutable List of PKIXCertPathCheckers (may be empty, but not null) @see #setCertPathCheckers
method,java/security/cert/PKIXParameters/addCertPathChecker/PKIXCertPathChecker, Adds a PKIXCertPathChecker to the list of certification path checkers. See the {@link #setCertPathCheckers setCertPathCheckers} method for more details. Note that the PKIXCertPathChecker is cloned to protect against subsequent modifications. @param checker a PKIXCertPathChecker to add to the list of checks. If null, the checker is ignored (not added to list).
method,java/security/cert/PKIXParameters/getTargetCertConstraints/, Returns the required constraints on the target certificate. The constraints are returned as an instance of CertSelector. If null, no constraints are defined. Note that the CertSelector returned is cloned to protect against subsequent modifications. @return a CertSelector specifying the constraints on the target certificate (or null) @see #setTargetCertConstraints
method,java/security/cert/PKIXParameters/setTargetCertConstraints/CertSelector, Sets the required constraints on the target certificate. The constraints are specified as an instance of CertSelector. If null, no constraints are defined. Note that the CertSelector specified is cloned to protect against subsequent modifications. @param selector a CertSelector specifying the constraints on the target certificate (or null) @see #getTargetCertConstraints
method,java/security/cert/PKIXParameters/PKIXParameters/Set, Creates an instance of PKIXParameters with the specified Set of most-trusted CAs. Each element of the set is a {@link TrustAnchor TrustAnchor}. Note that the Set is copied to protect against subsequent modifications. @param trustAnchors a Set of TrustAnchors @throws InvalidAlgorithmParameterException if the specified Set is empty (trustAnchors.isEmpty() == true) @throws NullPointerException if the specified Set is null @throws ClassCastException if any of the elements in the Set are not of type java.security.cert.TrustAnchor
method,java/security/cert/PKIXParameters/PKIXParameters/KeyStore, Creates an instance of PKIXParameters that populates the set of most-trusted CAs from the trusted certificate entries contained in the specified KeyStore. Only keystore entries that contain trusted X509Certificates are considered; all other certificate types are ignored. @param keystore a KeyStore from which the set of most-trusted CAs will be populated @throws KeyStoreException if the keystore has not been initialized @throws InvalidAlgorithmParameterException if the keystore does not contain at least one trusted certificate entry @throws NullPointerException if the keystore is null
method,java/security/cert/PKIXCertPathValidatorResult/getTrustAnchor/, Returns the TrustAnchor describing the CA that served as a trust anchor for the certification path. @return the TrustAnchor (never null)
method,java/security/cert/PKIXCertPathValidatorResult/getPolicyTree/, Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm. The PolicyNode object that is returned and any objects that it returns through public methods are immutable. Most applications will not need to examine the valid policy tree. They can achieve their policy processing goals by setting the policy-related parameters in PKIXParameters. However, more sophisticated applications, especially those that process policy qualifiers, may need to traverse the valid policy tree using the {@link PolicyNode#getParent PolicyNode.getParent} and {@link PolicyNode#getChildren PolicyNode.getChildren} methods. @return the root node of the valid policy tree, or null if there are no valid policies
method,java/security/cert/PKIXCertPathValidatorResult/getPublicKey/, Returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable. @return the public key of the subject (never null)
method,java/security/cert/PKIXCertPathBuilderResult/getCertPath/, Returns the built and validated certification path. The CertPath object does not include the trust anchor. Instead, use the {@link #getTrustAnchor() getTrustAnchor()} method to obtain the TrustAnchor that served as the trust anchor for the certification path. @return the built and validated CertPath (never null)
method,java/security/cert/PKIXBuilderParameters/getMaxPathLength/, Returns the value of the maximum number of intermediate non-self-issued certificates that may exist in a certification path. See the {@link #setMaxPathLength} method for more details. @return the maximum number of non-self-issued intermediate certificates that may exist in a certification path, or -1 if there is no limit @see #setMaxPathLength
method,java/security/cert/PKIXBuilderParameters/PKIXBuilderParameters/Set;CertSelector, Creates an instance of PKIXBuilderParameters with the specified Set of most-trusted CAs. Each element of the set is a {@link TrustAnchor TrustAnchor}. Note that the Set is copied to protect against subsequent modifications. @param trustAnchors a Set of TrustAnchors @param targetConstraints a CertSelector specifying the constraints on the target certificate @throws InvalidAlgorithmParameterException if trustAnchors is empty (trustAnchors.isEmpty() == true) @throws NullPointerException if trustAnchors is null @throws ClassCastException if any of the elements of trustAnchors are not of type java.security.cert.TrustAnchor
method,java/security/cert/PKIXBuilderParameters/PKIXBuilderParameters/KeyStore;CertSelector, Creates an instance of PKIXBuilderParameters that populates the set of most-trusted CAs from the trusted certificate entries contained in the specified KeyStore. Only keystore entries that contain trusted X509Certificates are considered; all other certificate types are ignored. @param keystore a KeyStore from which the set of most-trusted CAs will be populated @param targetConstraints a CertSelector specifying the constraints on the target certificate @throws KeyStoreException if keystore has not been initialized @throws InvalidAlgorithmParameterException if keystore does not contain at least one trusted certificate entry @throws NullPointerException if keystore is null
method,java/security/cert/LDAPCertStoreParameters/clone/, Returns a copy of this object. Changes to the copy will not affect the original and vice versa. Note: this method currently performs a shallow copy of the object (simply calls Object.clone()). This may be changed in a future revision to perform a deep copy if new parameters are added that should not be shared. @return the copy
method,java/security/cert/CollectionCertStoreParameters/getCollection/, Returns the Collection from which Certificates and CRLs are retrieved. This is not a copy of the Collection, it is a reference. This allows the caller to subsequently add or remove Certificates or CRLs from the Collection. @return the Collection (never null)
method,java/security/cert/CollectionCertStoreParameters/clone/, Returns a copy of this object. Note that only a reference to the Collection is copied, and not the contents. @return the copy
class,java/security/cert/CertificateNotYetValidException, Certificate is not yet valid exception. This is thrown whenever the current Date or the specified Date is before the notBefore date/time in the Certificate validity period. @author Hemma Prafullchandra 1.12
method,java/security/cert/CertificateFactorySpi/engineGenerateCertificate/InputStream, Generates a certificate object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, the returned certificate object can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the returned certificate object can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, the certificate provided in inStream must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----. Note that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and {@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. Otherwise, each call to this method consumes one certificate and the read position of the input stream is positioned to the next available byte after the the inherent end-of-certificate marker. If the data in the input stream does not contain an inherent end-of-certificate marker (other than EOF) and there is trailing data after the certificate is parsed, a CertificateException is thrown. @param inStream an input stream with the certificate data. @return a certificate object initialized with the data from the input stream. @exception CertificateException on parsing errors.
method,java/security/cert/CertificateFactorySpi/engineGenerateCertPath/InputStream, Generates a CertPath object and initializes it with the data read from the InputStream inStream. The data is assumed to be in the default encoding. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an UnsupportedOperationException. @param inStream an InputStream containing the data @return a CertPath initialized with the data from the InputStream @exception CertificateException if an exception occurs while decoding @exception UnsupportedOperationException if the method is not supported @since 1.4
method,java/security/cert/CertificateFactorySpi/engineGenerateCertificates/InputStream, Returns a (possibly empty) collection view of the certificates read from the given input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the elements in the returned collection can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, inStream may contain a single DER-encoded certificate in the formats described for {@link CertificateFactory#generateCertificate(java.io.InputStream) generateCertificate}. In addition, inStream may contain a PKCS#7 certificate chain. This is a PKCS#7 SignedData object, with the only significant field being certificates. In particular, the signature and the contents are ignored. This format allows multiple certificates to be downloaded at once. If no certificates are present, an empty collection is returned. Note that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and {@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. @param inStream the input stream with the certificates. @return a (possibly empty) collection view of java.security.cert.Certificate objects initialized with the data from the input stream. @exception CertificateException on parsing errors.
method,java/security/cert/CertificateFactorySpi/engineGenerateCRL/InputStream, Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, the returned CRL object can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the returned CRL object can be typecast to the X509CRL class. Note that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and {@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. Otherwise, each call to this method consumes one CRL and the read position of the input stream is positioned to the next available byte after the the inherent end-of-CRL marker. If the data in the input stream does not contain an inherent end-of-CRL marker (other than EOF) and there is trailing data after the CRL is parsed, a CRLException is thrown. @param inStream an input stream with the CRL data. @return a CRL object initialized with the data from the input stream. @exception CRLException on parsing errors.
method,java/security/cert/CertificateFactorySpi/engineGenerateCRLs/InputStream, Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the elements in the returned collection can be typecast to the X509CRL class. In the case of a certificate factory for X.509 CRLs, inStream may contain a single DER-encoded CRL. In addition, inStream may contain a PKCS#7 CRL set. This is a PKCS#7 SignedData object, with the only significant field being crls. In particular, the signature and the contents are ignored. This format allows multiple CRLs to be downloaded at once. If no CRLs are present, an empty collection is returned. Note that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and {@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. @param inStream the input stream with the CRLs. @return a (possibly empty) collection view of java.security.cert.CRL objects initialized with the data from the input stream. @exception CRLException on parsing errors.
method,java/security/cert/CertificateFactory/getInstance/String, Returns a certificate factory object that implements the specified certificate type. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param type the name of the requested certificate type. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard certificate types. @return a certificate factory object for the specified type. @exception CertificateException if no Provider supports a		CertificateFactorySpi implementation for the		specified type. @see java.security.Provider
method,java/security/cert/CertificateFactory/getInstance/String;Provider, Returns a certificate factory object for the specified certificate type. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param type the certificate type. See Appendix A in the Java Cryptography Architecture API Specification &amp; Reference for information about standard certificate types. @param provider the provider. @return a certificate factory object for the specified type. @exception CertificateException if a CertificateFactorySpi		implementation for the specified algorithm is not available		from the specified Provider object. @exception IllegalArgumentException if the provider is		null. @see java.security.Provider @since 1.4
method,java/security/cert/CertificateFactory/generateCertificate/InputStream, Generates a certificate object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, the returned certificate object can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the returned certificate object can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, the certificate provided in inStream must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----. Note that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and {@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. Otherwise, each call to this method consumes one certificate and the read position of the input stream is positioned to the next available byte after the inherent end-of-certificate marker. If the data in the input stream does not contain an inherent end-of-certificate marker (other than EOF) and there is trailing data after the certificate is parsed, a CertificateException is thrown. @param inStream an input stream with the certificate data. @return a certificate object initialized with the data from the input stream. @exception CertificateException on parsing errors.
method,java/security/cert/CertificateFactory/generateCertPath/InputStream, Generates a CertPath object and initializes it with the data read from the InputStream inStream. The data is assumed to be in the default encoding. The name of the default encoding is the first element of the Iterator returned by the {@link #getCertPathEncodings getCertPathEncodings} method. @param inStream an InputStream containing the data @return a CertPath initialized with the data from the InputStream @exception CertificateException if an exception occurs while decoding @since 1.4
method,java/security/cert/CertificateFactory/generateCertificates/InputStream, Returns a (possibly empty) collection view of the certificates read from the given input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the elements in the returned collection can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, inStream may contain a sequence of DER-encoded certificates in the formats described for {@link #generateCertificate(java.io.InputStream) generateCertificate}. In addition, inStream may contain a PKCS#7 certificate chain. This is a PKCS#7 SignedData object, with the only significant field being certificates. In particular, the signature and the contents are ignored. This format allows multiple certificates to be downloaded at once. If no certificates are present, an empty collection is returned. Note that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and {@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. @param inStream the input stream with the certificates. @return a (possibly empty) collection view of java.security.cert.Certificate objects initialized with the data from the input stream. @exception CertificateException on parsing errors.
method,java/security/cert/CertificateFactory/generateCRL/InputStream, Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, the returned CRL object can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the returned CRL object can be typecast to the X509CRL class. Note that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and {@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. Otherwise, each call to this method consumes one CRL and the read position of the input stream is positioned to the next available byte after the the inherent end-of-CRL marker. If the data in the input stream does not contain an inherent end-of-CRL marker (other than EOF) and there is trailing data after the CRL is parsed, a CRLException is thrown. @param inStream an input stream with the CRL data. @return a CRL object initialized with the data from the input stream. @exception CRLException on parsing errors.
method,java/security/cert/CertificateFactory/generateCRLs/InputStream, Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the elements in the returned collection can be typecast to the X509CRL class. In the case of a certificate factory for X.509 CRLs, inStream may contain a sequence of DER-encoded CRLs. In addition, inStream may contain a PKCS#7 CRL set. This is a PKCS#7 SignedData object, with the only significant field being crls. In particular, the signature and the contents are ignored. This format allows multiple CRLs to be downloaded at once. If no CRLs are present, an empty collection is returned. Note that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and {@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. @param inStream the input stream with the CRLs. @return a (possibly empty) collection view of java.security.cert.CRL objects initialized with the data from the input stream. @exception CRLException on parsing errors.
class,java/security/cert/CertificateExpiredException, Certificate Expired Exception. This is thrown whenever the current Date or the specified Date is after the notAfter date/time specified in the validity period of the certificate. @author Hemma Prafullchandra 1.12
class,java/security/cert/CertificateEncodingException, Certificate Encoding Exception. This is thrown whenever an error occurs while attempting to encode a certificate. @author Hemma Prafullchandra 1.14
class,java/security/cert/Certificate, Abstract class for managing a variety of identity certificates. An identity certificate is a binding of a principal to a public key which is vouched for by another principal. (A principal represents an entity such as an individual user, a group, or a corporation.) This class is an abstraction for certificates that have different formats but important common uses. For example, different types of certificates, such as X.509 and PGP, share general certificate functionality (like encoding and verifying) and some types of information (like a public key). X.509, PGP, and SDSI certificates can all be implemented by subclassing the Certificate class, even though they contain different sets of information, and they store and retrieve the information in different ways. @see X509Certificate @see CertificateFactory @author Hemma Prafullchandra @version 1.28, 03/23/10
method,java/security/cert/Certificate/getEncoded/, Returns the encoded form of this certificate. It is assumed that each certificate type would have only a single form of encoding; for example, X.509 certificates would be encoded as ASN.1 DER. @return the encoded form of this certificate @exception CertificateEncodingException if an encoding error occurs.
method,java/security/cert/Certificate/verify/PublicKey, Verifies that this certificate was signed using the private key that corresponds to the specified public key. @param key the PublicKey used to carry out the verification. @exception NoSuchAlgorithmException on unsupported signature algorithms. @exception InvalidKeyException on incorrect key. @exception NoSuchProviderException if there's no default provider. @exception SignatureException on signature errors. @exception CertificateException on encoding errors.
method,java/security/cert/Certificate/verify/PublicKey;String, Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the specified provider. @param key the PublicKey used to carry out the verification. @param sigProvider the name of the signature provider. @exception NoSuchAlgorithmException on unsupported signature algorithms. @exception InvalidKeyException on incorrect key. @exception NoSuchProviderException on incorrect provider. @exception SignatureException on signature errors. @exception CertificateException on encoding errors.
method,java/security/cert/CertStoreSpi/CertStoreSpi/CertStoreParameters, The sole constructor. @param params the initialization parameters (may be null) @throws InvalidAlgorithmParameterException if the initialization parameters are inappropriate for this CertStoreSpi
interface,java/security/cert/CertStoreParameters, A specification of CertStore parameters. The purpose of this interface is to group (and provide type safety for) all CertStore parameter specifications. All CertStore parameter specifications must implement this interface. Typically, a CertStoreParameters object is passed as a parameter to one of the {@link CertStore#getInstance CertStore.getInstance} methods. The getInstance method returns a CertStore that is used for retrieving Certificates and CRLs. The CertStore that is returned is initialized with the specified parameters. The type of parameters needed may vary between different types of CertStores. @see CertStore#getInstance @version 	1.7 03/23/10 @since	1.4 @author	Steve Hanna
method,java/security/cert/CertStoreException/CertStoreException/Throwable, Creates a CertStoreException that wraps the specified throwable. This allows any exception to be converted into a CertStoreException, while retaining information about the cause, which may be useful for debugging. The detail message is set to (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause). @param cause the cause (which is saved for later retrieval by the {@link #getCause getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)
method,java/security/cert/CertStore/getInstance/String;CertStoreParameters, Returns a CertStore object that implements the specified CertStore type and is initialized with the specified parameters. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertStore object encapsulating the CertStoreSpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. The CertStore that is returned is initialized with the specified CertStoreParameters. The type of parameters needed may vary between different types of CertStores. Note that the specified CertStoreParameters object is cloned. @param type the name of the requested CertStore type. See Appendix A in the Java Certification Path API Programmer's Guide for information about standard types. @param params the initialization parameters (may be null). @return a CertStore object that implements the specified		CertStore type. @throws NoSuchAlgorithmException if no Provider supports a		CertStoreSpi implementation for the specified type. @throws InvalidAlgorithmParameterException if the specified		initialization parameters are inappropriate for this		CertStore. @see java.security.Provider
method,java/security/cert/CertStore/getInstance/String;CertStoreParameters;Provider, Returns a CertStore object that implements the specified CertStore type. A new CertStore object encapsulating the CertStoreSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. The CertStore that is returned is initialized with the specified CertStoreParameters. The type of parameters needed may vary between different types of CertStores. Note that the specified CertStoreParameters object is cloned. @param type the requested CertStore type. See Appendix A in the Java Certification Path API Programmer's Guide for information about standard types. @param params the initialization parameters (may be null). @param provider the provider. @return a CertStore object that implements the		specified type. @exception NoSuchAlgorithmException if a CertStoreSpi		implementation for the specified type is not available		from the specified Provider object. @throws InvalidAlgorithmParameterException if the specified		initialization parameters are inappropriate for this 		CertStore @exception IllegalArgumentException if the provider is		null. @see java.security.Provider
method,java/security/cert/CertStore/getCertStoreParameters/, Returns the parameters used to initialize this CertStore. Note that the CertStoreParameters object is cloned before it is returned. @return the parameters used to initialize this CertStore (may be null)
method,java/security/cert/CertStore/getDefaultType/, Returns the default CertStore type as specified in the Java security properties file, or the string &quot;LDAP&quot; if no such property exists. The Java security properties file is located in the file named &lt;JAVA_HOME&gt;/lib/security/java.security. &lt;JAVA_HOME&gt; refers to the value of the java.home system property, and specifies the directory where the JRE is installed. The default CertStore type can be used by applications that do not want to use a hard-coded type when calling one of the getInstance methods, and want to provide a default CertStore type in case a user does not specify its own. The default CertStore type can be changed by setting the value of the certstore.type security property (in the Java security properties file) to the desired type. @return the default CertStore type as specified in the Java security properties file, or the string &quot;LDAP&quot; if no such property exists.
method,java/security/cert/CertStore/CertStore/CertStoreSpi;Provider;String;CertStoreParameters, Creates a CertStore object of the given type, and encapsulates the given provider implementation (SPI object) in it. @param storeSpi the provider implementation @param provider the provider @param type the type @param params the initialization parameters (may be null)
method,java/security/cert/CertSelector/match/Certificate, Decides whether a Certificate should be selected. @param	cert	the Certificate to be checked @return	true if the Certificate should be selected, false otherwise
method,java/security/cert/CertPathValidatorException/getIndex/, Returns the index of the certificate in the certification path that caused the exception to be thrown. Note that the list of certificates in a CertPath is zero based. If no index has been set, -1 is returned. @return the index that has been set, or -1 if none has been set
method,java/security/cert/CertPathValidatorException/CertPathValidatorException/Throwable, Creates a CertPathValidatorException that wraps the specified throwable. This allows any exception to be converted into a CertPathValidatorException, while retaining information about the wrapped exception, which may be useful for debugging. The detail message is set to (cause==null ? null : cause.toString() ) (which typically contains the class and detail message of cause). @param cause the cause (which is saved for later retrieval by the {@link #getCause getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)
method,java/security/cert/CertPathValidatorException/CertPathValidatorException/String;Throwable;CertPath;int, Creates a CertPathValidatorException with the specified detail message, cause, certification path, and index. @param msg the detail message (or null if none) @param cause the cause (or null if none) @param certPath the certification path that was in the process of being validated when the error was encountered @param index the index of the certificate in the certification path that caused the error (or -1 if not applicable). Note that the list of certificates in a CertPath is zero based. @throws IndexOutOfBoundsException if the index is out of range (index = certPath.getCertificates().size()) @throws IllegalArgumentException if certPath is null and index is not -1
method,java/security/cert/CertPathValidator/getInstance/String, Returns a CertPathValidator object that implements the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertPathValidator object encapsulating the CertPathValidatorSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param algorithm the name of the requested CertPathValidator algorithm. See Appendix A in the Java Certification Path API Programmer's Guide for information about standard algorithm names. @return a CertPathValidator object that implements the		specified algorithm. @exception NoSuchAlgorithmException if no Provider supports a		CertPathValidatorSpi implementation for the		specified algorithm. @see java.security.Provider
method,java/security/cert/CertPathValidator/getInstance/String;Provider, Returns a CertPathValidator object that implements the specified algorithm. A new CertPathValidator object encapsulating the CertPathValidatorSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param algorithm the name of the requested CertPathValidator algorithm. See Appendix A in the Java Certification Path API Programmer's Guide for information about standard algorithm names. @param provider the provider. @return a CertPathValidator object that implements the		specified algorithm. @exception NoSuchAlgorithmException if a CertPathValidatorSpi		implementation for the specified algorithm is not available		from the specified Provider object. @exception IllegalArgumentException if the provider is		null. @see java.security.Provider
interface,java/security/cert/CertPathParameters, A specification of certification path algorithm parameters. The purpose of this interface is to group (and provide type safety for) all CertPath parameter specifications. All CertPath parameter specifications must implement this interface. @version 	1.7 03/23/10 @author	Yassir Elley @see 	CertPathValidator#validate(CertPath, CertPathParameters) @see 	CertPathBuilder#build(CertPathParameters) @since	1.4
method,java/security/cert/CertPathBuilderResult/getCertPath/, Returns the built certification path. @return the certification path (never null)
method,java/security/cert/CertPathBuilderException/CertPathBuilderException/Throwable, Creates a CertPathBuilderException that wraps the specified throwable. This allows any exception to be converted into a CertPathBuilderException, while retaining information about the wrapped exception, which may be useful for debugging. The detail message is set to (cause==null ? null : cause.toString() ) (which typically contains the class and detail message of cause). @param cause the cause (which is saved for later retrieval by the {@link #getCause getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)
method,java/security/cert/CertPathBuilder/getInstance/String, Returns a CertPathBuilder object that implements the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertPathBuilder object encapsulating the CertPathBuilderSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the {@link Security#getProviders() Security.getProviders()} method. @param algorithm the name of the requested CertPathBuilder algorithm. See Appendix A in the Java Certification Path API Programmer's Guide for information about standard algorithm names. @return a CertPathBuilder object that implements the		specified algorithm. @throws NoSuchAlgorithmException if no Provider supports a CertPathBuilderSpi implementation for the specified algorithm. @see java.security.Provider
method,java/security/cert/CertPathBuilder/getInstance/String;Provider, Returns a CertPathBuilder object that implements the specified algorithm. A new CertPathBuilder object encapsulating the CertPathBuilderSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. @param algorithm the name of the requested CertPathBuilder algorithm. See Appendix A in the Java Certification Path API Programmer's Guide for information about standard algorithm names. @param provider the provider. @return a CertPathBuilder object that implements the 		specified algorithm. @exception NoSuchAlgorithmException if a CertPathBuilderSpi		implementation for the specified algorithm is not available		from the specified Provider object. @exception IllegalArgumentException if the provider is		null. @see java.security.Provider
method,java/security/cert/CertPath/getType/, Returns the type of Certificates in this certification path. This is the same string that would be returned by {@link java.security.cert.Certificate#getType() cert.getType()} for all Certificates in the certification path. @return the type of Certificates in this certification path (never null)
method,java/security/cert/CertPath/hashCode/, Returns the hashcode for this certification path. The hash code of a certification path is defined to be the result of the following calculation: hashCode = path.getType().hashCode(); hashCode = 31*hashCode + path.getCertificates().hashCode(); This ensures that path1.equals(path2) implies that path1.hashCode()==path2.hashCode() for any two certification paths, path1 and path2, as required by the general contract of Object.hashCode. @return the hashcode value for this certification path
method,java/security/cert/CertPath/toString/, Returns a string representation of this certification path. This calls the toString method on each of the Certificates in the path. @return a string representation of this certification path
method,java/security/cert/CertPath/getEncoded/, Returns the encoded form of this certification path, using the default encoding. @return the encoded bytes @exception CertificateEncodingException if an encoding error occurs
method,java/security/cert/CertPath/getEncoded/String, Returns the encoded form of this certification path, using the specified encoding. @param encoding the name of the encoding to use @return the encoded bytes @exception CertificateEncodingException if an encoding error occurs or the encoding requested is not supported
method,java/security/cert/CRLSelector/match/CRL, Decides whether a CRL should be selected. @param	crl the CRL to be checked @return	true if the CRL should be selected, false otherwise
class,java/security/cert/CRL, This class is an abstraction of certificate revocation lists (CRLs) that have different formats but important common uses. For example, all CRLs share the functionality of listing revoked certificates, and can be queried on whether or not they list a given certificate. Specialized CRL types can be defined by subclassing off of this abstract class. @author Hemma Prafullchandra @version 1.15, 03/23/10 @see X509CRL @see CertificateFactory @since 1.2
class,java/security/acl/NotOwnerException, This is an exception that is thrown whenever the modification of an object (such as an Access Control List) is only allowed to be done by an owner of the object, but the Principal attempting the modification is not an owner. @author 	Satish Dharmaraj
interface,java/security/acl/Group, This interface is used to represent a group of principals. (A principal represents an entity such as an individual user or a company). Note that Group extends Principal. Thus, either a Principal or a Group can be passed as an argument to methods containing a Principal parameter. For example, you can add either a Principal or a Group to a Group object by calling the object's addMember method, passing it the Principal or Group. @author 	Satish Dharmaraj
method,java/security/acl/Group/members/, Returns an enumeration of the members in the group. The returned objects can be instances of either Principal or Group (which is a subclass of Principal). @return an enumeration of the group members.
interface,java/security/acl/AclEntry, This is the interface used for representing one entry in an Access Control List (ACL). An ACL can be thought of as a data structure with multiple ACL entry objects. Each ACL entry object contains a set of permissions associated with a particular principal. (A principal represents an entity such as an individual user or a group). Additionally, each ACL entry is specified as being either positive or negative. If positive, the permissions are to be granted to the associated principal. If negative, the permissions are to be denied. Each principal can have at most one positive ACL entry and one negative entry; that is, multiple positive or negative ACL entries are not allowed for any principal. Note: ACL entries are by default positive. An entry becomes a negative entry only if the {@link #setNegativePermissions() setNegativePermissions} method is called on it. @see java.security.acl.Acl @author 	Satish Dharmaraj
method,java/security/acl/AclEntry/setNegativePermissions/, Sets this ACL entry to be a negative one. That is, the associated principal (e.g., a user or a group) will be denied the permission set specified in the entry. Note: ACL entries are by default positive. An entry becomes a negative entry only if this setNegativePermissions method is called on it.
method,java/security/acl/AclEntry/addPermission/Permission, Adds the specified permission to this ACL entry. Note: An entry can have multiple permissions. @param permission the permission to be associated with the principal in this entry. @return true if the permission was added, false if the permission was already part of this entry's permission set.
interface,java/security/acl/Acl, Interface representing an Access Control List (ACL). An Access Control List is a data structure used to guard access to resources. An ACL can be thought of as a data structure with multiple ACL entries. Each ACL entry, of interface type AclEntry, contains a set of permissions associated with a particular principal. (A principal represents an entity such as an individual user or a group). Additionally, each ACL entry is specified as being either positive or negative. If positive, the permissions are to be granted to the associated principal. If negative, the permissions are to be denied. The ACL Entries in each ACL observe the following rules: Each principal can have at most one positive ACL entry and one negative entry; that is, multiple positive or negative ACL entries are not allowed for any principal. Each entry specifies the set of permissions that are to be granted (if positive) or denied (if negative). If there is no entry for a particular principal, then the principal is considered to have a null (empty) permission set. If there is a positive entry that grants a principal a particular permission, and a negative entry that denies the principal the same permission, the result is as though the permission was never granted or denied. Individual permissions always override permissions of the group(s) to which the individual belongs. That is, individual negative permissions (specific denial of permissions) override the groups' positive permissions. And individual positive permissions override the groups' negative permissions. The java.security.acl package provides the interfaces to the ACL and related data structures (ACL entries, groups, permissions, etc.), and the sun.security.acl classes provide a default implementation of the interfaces. For example, java.security.acl.Acl provides the interface to an ACL and the sun.security.acl.AclImpl class provides the default implementation of the interface. The java.security.acl.Acl interface extends the java.security.acl.Owner interface. The Owner interface is used to maintain a list of owners for each ACL. Only owners are allowed to modify an ACL. For example, only an owner can call the ACL's addEntry method to add a new ACL entry to the ACL. @see java.security.acl.AclEntry @see java.security.acl.Owner @see java.security.acl.Acl#getPermissions @version 1.25, 10/03/23 @author Satish Dharmaraj 
method,java/security/acl/Acl/getPermissions/Principal, Returns an enumeration for the set of allowed permissions for the specified principal (representing an entity such as an individual or a group). This set of allowed permissions is calculated as follows: If there is no entry in this Access Control List for the specified principal, an empty permission set is returned. Otherwise, the principal's group permission sets are determined. (A principal can belong to one or more groups, where a group is a group of principals, represented by the Group interface.) The group positive permission set is the union of all the positive permissions of each group that the principal belongs to. The group negative permission set is the union of all the negative permissions of each group that the principal belongs to. If there is a specific permission that occurs in both the positive permission set and the negative permission set, it is removed from both. The individual positive and negative permission sets are also determined. The positive permission set contains the permissions specified in the positive ACL entry (if any) for the principal. Similarly, the negative permission set contains the permissions specified in the negative ACL entry (if any) for the principal. The individual positive (or negative) permission set is considered to be null if there is not a positive (negative) ACL entry for the principal in this ACL. The set of permissions granted to the principal is then calculated using the simple rule that individual permissions always override the group permissions. That is, the principal's individual negative permission set (specific denial of permissions) overrides the group positive permission set, and the principal's individual positive permission set overrides the group negative permission set. @param user the principal whose permission set is to be returned. @return the permission set specifying the permissions the principal is allowed. 
