"\nProvides support for dialogs.\n<h2>\nPackage Specification</h2>\nA dialog is a specialized window, typically consisting of a dialog area\nand a button bar, designed for narrow-focussed communication with the user.\n<p>The dialog framework consists of an abstract base class (<tt>Dialog</tt>),\nalong with more concrete dialog subclasses for displaying messages (<tt>MessageDialog</tt>),\nsoliciting text input (<tt>InputDialog</tt>), and displaying progress during\na long-running operation (<tt>ProgressMonitorDialog</tt>).\n<p>Dialog stores (<tt>IDialogStore</tt>, <tt>DialogStore</tt>) provide\na general framework for organizing a dialog's settings into key/value pairs.\nMulti-page dialogs are made easier through the use of dialog pages (<tt>IDialogPage</tt>,\n<tt>DialogPage</tt>).\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n<br>&nbsp;\n<br>&nbsp;\n"
" A <code>TrayDialog</code> is a specialized <code>Dialog</code> that can contain\n a tray on its side. The tray's content is provided as a <code>DialogTray</code>.\n <p>\n It is recommended to subclass this class instead of <code>Dialog</code> in all\n cases except where the dialog should never show a tray. For example, dialogs\n which are very short, simple, and quick to dismiss (e.g. a message dialog with\n an OK button) should subclass <code>Dialog</code>.\n </p>\n <p>\n Note: Trays are not supported on dialogs that use a custom layout on the <code>\n Shell</code> by overriding <code>Window#getLayout()</code>.\n </p>\n \n @see org.eclipse.jface.dialogs.DialogTray\n @see org.eclipse.jface.window.Window#getLayout()\n @since 3.2\n"
" Closes this dialog's tray, disposing its widgets.\n \n @throws IllegalStateException if the tray was not open\n"
""
""
" Creates a new help control that provides access to context help.\n <p>\n The <code>TrayDialog</code> implementation of this method creates\n the control, registers it for selection events including selection,\n Note that the parent's layout is assumed to be a <code>GridLayout</code>\n and the number of columns in this layout is incremented. Subclasses may\n override.\n </p>\n \n @param parent the parent composite\n @return the help control\n"
" Returns whether or not context help is available for this dialog. This\n can affect whether or not the dialog will display additional help\n mechanisms such as a help control in the button bar.\n \n @return whether or not context help is available for this dialog\n"
" The tray dialog's default layout is a modified version of the default\n <code>Window</code> layout that can accomodate a tray, however it still\n conforms to the description of the <code>Window</code> default layout.\n <p>\n Note: Trays may not be supported with all custom layouts on the dialog's\n Shell. To avoid problems, use a single outer <code>Composite</code> for\n your dialog area, and set your custom layout on that <code>Composite</code>.\n </p>\n \n @see org.eclipse.jface.window.Window#getLayout()\n @return a newly created layout or <code>null</code> for no layout\n"
" Returns the tray currently shown in the dialog, or <code>null</code>\n if there is no tray.\n \n @return the dialog's current tray, or <code>null</code> if there is none\n"
" Constructs the tray's widgets and displays the tray in this dialog. The\n dialog's size will be adjusted to accomodate the tray.\n \n @param tray the tray to show in this dialog\n @throws IllegalStateException if the dialog already has a tray open\n @throws UnsupportedOperationException if the dialog does not support trays,\n            for example if it uses a custom layout.\n"
" Sets whether or not context help is available for this dialog. This\n can affect whether or not the dialog will display additional help\n mechanisms such as a help control in the button bar.\n \n @param helpAvailable whether or not context help is available for the dialog\n"
" Tests if dialogs that have help control should show it\n all the time or only when explicitly requested for\n each dialog instance.\n \n @return <code>true</code> if dialogs that support help\n control should show it by default, <code>false</code> otherwise.\n @since 3.2\n"
" Sets whether JFace dialogs that support help control should\n show the control by default. If set to <code>false</code>, \n help control can still be shown on a per-dialog basis.\n \n @param helpAvailable <code>true</code> to show the help\n control, <code>false</code> otherwise.\n @since 3.2\n"
" Creates a tray dialog instance. Note that the window will have no visual\n representation (no widgets) until it is told to open.\n \n @param shell the parent shell, or <code>null</code> to create a top-level shell\n"
" IDialogConstants is the interface for common dialog strings and ids\n used throughout JFace.\n It is recommended that you use these labels and ids whereever \n for consistency with the JFace dialogs.\n"
" Button id for an "Ok" button (value 0).\n"
" Button id for a "Cancel" button (value 1).\n"
" Button id for a "Yes" button (value 2).\n"
" Button id for a "No" button (value 3).\n"
" Button id for a "Yes to All" button (value 4).\n"
" Button id for a "Skip" button (value 5).\n"
" Button id for a "Stop" button (value 6).\n"
" Button id for an "Abort" button (value 7).\n"
" Button id for a "Retry" button (value 8).\n"
" Button id for an "Ignore" button (value 9).\n"
" Button id for a "Proceed" button (value 10).\n"
" Button id for an "Open" button (value 11).\n"
" Button id for a "Close" button (value 12).\n"
" Button id for a "Details" button (value 13).\n"
" Button id for a "Back" button (value 14).\n"
" Button id for a "Next" button (value 15).\n"
" Button id for a "Finish" button (value 16).\n"
" Button id for a "Help" button (value 17).\n"
" Button id for a "Select All" button (value 18).\n"
" Button id for a "Deselect All" button (value 19).\n"
" Button id for a "Select types" button (value 20).\n"
" Button id for a "No to All" button (value 21).\n"
" Starting button id reserved for internal use by JFace (value 256). JFace\n classes make ids by adding to this number.\n"
" Starting button id reserved for use by clients of JFace (value 1024).\n Clients of JFace should make ids by adding to this number.\n"
" The label for OK buttons.\n"
" The label for cancel buttons.\n"
" The label for yes buttons.\n"
" The label for no buttons.\n"
" The label for not to all buttons.\n"
" The label for yes to all buttons.\n"
" The label for skip buttons.\n"
" The label for stop buttons.\n"
" The label for abort buttons.\n"
" The label for retry buttons.\n"
" The label for ignore buttons.\n"
" The label for proceed buttons.\n"
" The label for open buttons.\n"
" The label for close buttons.\n"
" The label for show details buttons.\n"
" The label for hide details buttons.\n"
" The label for back buttons.\n"
" The label for next buttons.\n"
" The label for finish buttons.\n"
" The label for help buttons.\n"
" Vertical margin in dialog units (value 7).\n"
" Vertical spacing in dialog units (value 4).\n"
" Horizontal margin in dialog units (value 7).\n"
" Horizontal spacing in dialog units (value 4).\n"
" Height of button bar in dialog units (value 25).\n"
" Left margin in dialog units (value 20).\n"
" Button margin in dialog units (value 4).\n"
" Button height in dialog units (value 14).\n \n @deprecated This constant is no longer in use.\n The button heights are now determined by the layout.\n"
" Button width in dialog units (value 61).\n"
" Indent in dialog units (value 21).\n"
" Small indent in dialog units (value 7).\n"
" Entry field width in dialog units (value 200).\n"
" Minimum width of message area in dialog units (value 300).\n"
" ControlAnimator provides a simple implementation to display or hide a control\n at the bottom of the parent composite. Other animations will be written as\n subclasses of this class. <p>\n Instances of this class can be created using an AnimatorFactory.\n \n @since 3.2\n"
" Displays or hides a control at the bottom of the parent composite\n and makes use of the control's SWT visible flag.<p>\n Subclasses should override this method.</p>\n \n @param visible <code>true</code> if the control should be shown, \n 		  and <code>false</code> otherwise.\n"
" Constructs a new ControlAnimator instance and passes along the\n control that will be displayed or hidden.\n \n @param control the control that will be displayed or hidden.\n"
"the control that will be displayed or hidden "
" A control for showing progress feedback for a long running operation. This\n control supports both determinate and indeterminate SWT progress bars. For\n indeterminate progress, we don't have to know the total amount of work in\n advance and no <code>worked</code> method needs to be called.\n"
" Initialize the progress bar to be animated.\n"
" Initialize the progress bar.\n \n @param max\n            The maximum value.\n"
" Progress is done.\n"
" Moves the progress indicator to the end.\n"
" Moves the progress indicator by the given amount of work units\n @param work the amount of work to increment by.\n"
" Show the receiver as showing an error.\n @since 3.4\n"
" Show the receiver as being paused.\n @since 3.4\n"
" Reset the progress bar to it's normal style.\n @since 3.4\n"
" Create a ProgressIndicator as a child under the given parent.\n \n @param parent\n            The widgets parent\n"
" Create a ProgressIndicator as a child under the given parent.\n \n @param parent\n            The widgets parent\n @param style the SWT style constants for progress monitors created \n 	by the receiver.\n @since 3.4\n"
" Minimal interface to a message provider. Used for dialog pages which can\n provide a message with an icon.\n \n @since 2.0\n"
" Returns the current message for this message provider.\n <p>\n A message provides instruction or information to the user.\n </p>\n \n @return the message, or <code>null</code> if none\n"
" Returns a value indicating if the message is a an information message, a\n warning message, or an error message.\n <p>\n Returns one of <code>NONE</code>,<code>INFORMATION</code>,\n <code>WARNING</code>, or <code>ERROR</code>.\n </p>\n \n @return the message type\n"
" Constant for a regular message (value 0).\n <p>\n Typically this indicates that the message should be shown without an\n icon.\n </p>\n"
" Constant for an info message (value 1).\n"
" Constant for a warning message (value 2).\n"
" Constant for an error message (value 3).\n"
" The IInputValidator is the interface for simple validators. \n @see org.eclipse.jface.dialogs.InputDialog\n"
" Validates the given string.  Returns an error message to display\n if the new text is invalid.  Returns <code>null</code> if there\n is no error.  Note that the empty string is not treated the same\n as <code>null</code>; it indicates an error state but with no message\n to display.\n \n @param newText the text to check for validity\n \n @return an error message or <code>null</code> if no error\n"
" A modal dialog that displays progress during a long running operation.\n <p>\n This concrete dialog class can be instantiated as is, or further subclassed\n as required.\n </p>\n <p>\n Typical usage is:\n \n <pre>\n  \n   \n    try {\n       IRunnableWithProgress op = ...;\n       new ProgressMonitorDialog(activeShell).run(true, true, op);\n    } catch (InvocationTargetException e) {\n       // handle exception\n    } catch (InterruptedException e) {\n       // handle cancelation\n    }\n    \n   \n </pre>\n \n </p>\n <p>\n Note that the ProgressMonitorDialog is not intended to be used with multiple\n runnables - this dialog should be discarded after completion of one\n IRunnableWithProgress and a new one instantiated for use by a second or\n sebsequent IRunnableWithProgress to ensure proper initialization.\n </p>\n <p>\n Note that not forking the process will result in it running in the UI which\n may starve the UI. The most obvious symptom of this problem is non\n responsiveness of the cancel button. If you are running within the UI Thread\n you should do the bulk of your work in another Thread to prevent starvation.\n It is recommended that fork is set to true in most cases.\n </p>\n"
" Clear blocked state from the receiver.\n"
" Set blocked state from the receiver.\n \n @param reason\n            IStatus that gives the details\n"
" The cancel button has been pressed.\n \n @since 3.0\n"
" The <code>ProgressMonitorDialog</code> implementation of this method\n only closes the dialog if there are no currently running runnables.\n"
" Clear the cursors in the dialog.\n \n @since 3.0\n"
""
""
" Creates the cancel button.\n \n @param parent\n            the parent composite\n @since 3.0\n"
""
""
" Returns the progress monitor to use for operations run in this progress\n dialog.\n \n @return the progress monitor\n"
" This implementation of IRunnableContext#run(boolean, boolean,\n IRunnableWithProgress) runs the given <code>IRunnableWithProgress</code>\n using the progress monitor for this progress dialog and blocks until the\n runnable has been run, regardless of the value of <code>fork</code>.\n The dialog is opened before the runnable is run, and closed after it\n completes. It is recommended that <code>fork</code> is set to true in\n most cases. If <code>fork</code> is set to <code>false</code>, the\n runnable will run in the UI thread and it is the runnable's\n responsibility to call <code>Display.readAndDispatch()</code> to ensure\n UI responsiveness.\n"
" Returns whether the dialog should be opened before the operation is run.\n Defaults to <code>true</code>\n \n @return <code>true</code> to open the dialog before run,\n         <code>false</code> to only create the dialog, but not open it\n @since 3.0\n"
" Sets whether the dialog should be opened before the operation is run.\n NOTE: Setting this to false and not forking a process may starve any\n asyncExec that tries to open the dialog later.\n \n @param openOnRun\n            <code>true</code> to open the dialog before run,\n            <code>false</code> to only create the dialog, but not open\n            it\n @since 3.0\n"
" Returns the nesting depth of running operations.\n \n @return the nesting depth of running operations\n @since 3.0\n"
" Increments the nesting depth of running operations.\n \n @since 3.0\n"
" Decrements the nesting depth of running operations.\n \n @since 3.0\n \n"
" Called just before the operation is run. Default behaviour is to open or\n create the dialog, based on the setting of <code>getOpenOnRun</code>,\n and increment the nesting depth.\n \n @since 3.0\n"
" Called just after the operation is run. Default behaviour is to decrement\n the nesting depth, and close the dialog.\n \n @since 3.0\n"
" Sets whether the progress dialog is cancelable or not.\n \n @param cancelable\n            <code>true</code> if the end user can cancel this progress\n            dialog, and <code>false</code> if it cannot be canceled\n"
" Helper to enable/disable Cancel button for this dialog.\n \n @param b\n            <code>true</code> to enable the cancel button, and\n            <code>false</code> to disable it\n @since 3.0\n"
""
""
" Creates a progress monitor dialog under the given shell. The dialog has a\n standard title and no image. <code>open</code> is non-blocking.\n \n @param parent\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n"
" The progress indicator control.\n"
" The label control for the task. Kept for backwards compatibility.\n"
" The label control for the subtask.\n"
" The Cancel button control.\n"
" Indicates whether the Cancel button is to be shown.\n"
" Indicates whether the Cancel button is to be enabled.\n"
" The cursor used in the cancel button;\n"
" A dialog to display one or more errors to the user, as contained in an\n <code>IStatus</code> object. If an error contains additional detailed\n information then a Details button is automatically supplied, which shows or\n hides an error details viewer when pressed by the user.\n \n <p>\n This dialog should be considered being a "local" way of error handling. It\n cannot be changed or replaced by "global" error handling facility (\n <code>org.eclipse.ui.statushandler.StatusManager</code>). If product defines\n its own way of handling errors, this error dialog may cause UI inconsistency,\n so until it is absolutely necessary, <code>StatusManager</code> should be\n used.\n </p>\n \n @see org.eclipse.core.runtime.IStatus\n"
""
""
""
" Create the details button if it should be included.\n \n @param parent\n            the parent composite\n @since 3.2\n"
" This implementation of the <code>Dialog</code> framework method creates\n and lays out a composite. Subclasses that require a different dialog area\n may either override this method, or call the <code>super</code>\n implementation and add controls to the created composite.\n \n Note:  Since 3.4, the created composite no longer grabs excess vertical space.\n See https://bugs.eclipse.org/bugs/show_bug.cgi?id=72489.\n If the old behavior is desired by subclasses, get the returned composite's\n layout data and set grabExcessVerticalSpace to true.\n"
""
""
" Create this dialog's drop-down list component. The list is displayed\n after the user presses details button. It is developer responsibility\n to display details button if and only if there is some content on \n drop down list. The visibility of the details button is controlled by\n {@link #shouldShowDetailsButton()}, which should also be overridden\n together with this method.\n \n @param parent\n            the parent composite\n @return the drop-down list component\n @see #shouldShowDetailsButton()\n"
" Extends <code>Window.open()</code>. Opens an error dialog to display\n the error. If you specified a mask to filter the displaying of these\n children, the error dialog will only be displayed if there is at least\n one child status matching the mask.\n"
" Opens an error dialog to display the given error. Use this method if the\n error object being displayed does not contain child items, or if you wish\n to display all such items without filtering.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param dialogTitle\n            the title to use for this dialog, or <code>null</code> to\n            indicate that the default title should be used\n @param message\n            the message to show in this dialog, or <code>null</code> to\n            indicate that the error's message should be shown as the\n            primary message\n @param status\n            the error to show to the user\n @return the code of the button that was pressed that resulted in this\n         dialog closing. This will be <code>Dialog.OK</code> if the OK\n         button was pressed, or <code>Dialog.CANCEL</code> if this\n         dialog's close window decoration or the ESC key was used.\n"
" Opens an error dialog to display the given error. Use this method if the\n error object being displayed contains child items <it>and </it> you wish\n to specify a mask which will be used to filter the displaying of these\n children. The error dialog will only be displayed if there is at least\n one child status matching the mask.\n \n @param parentShell\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the title to use for this dialog, or <code>null</code> to\n            indicate that the default title should be used\n @param message\n            the message to show in this dialog, or <code>null</code> to\n            indicate that the error's message should be shown as the\n            primary message\n @param status\n            the error to show to the user\n @param displayMask\n            the mask to use to filter the displaying of child items, as\n            per <code>IStatus.matches</code>\n @return the code of the button that was pressed that resulted in this\n         dialog closing. This will be <code>Dialog.OK</code> if the OK\n         button was pressed, or <code>Dialog.CANCEL</code> if this\n         dialog's close window decoration or the ESC key was used.\n @see org.eclipse.core.runtime.IStatus#matches(int)\n"
" Returns whether the given status object should be displayed.\n \n @param status\n            a status object\n @param mask\n            a mask as per <code>IStatus.matches</code>\n @return <code>true</code> if the given status should be displayed, and\n         <code>false</code> otherwise\n @see org.eclipse.core.runtime.IStatus#matches(int)\n"
""
" Show the details portion of the dialog if it is not already visible. This\n method will only work when it is invoked after the control of the dialog\n has been set. In other words, after the <code>createContents</code>\n method has been invoked and has returned the control for the content area\n of the dialog. Invoking the method before the content area has been set\n or after the dialog has been disposed will have no effect.\n \n @since 3.1\n"
" Return whether the Details button should be included. This method is\n invoked once when the dialog is built. Default implementation is tight to\n default implementation of {@link #createDropDownList(Composite)} and \n displays details button if there is anything on the display list.\n \n @return whether the Details button should be included\n @since 3.1\n @see #createDropDownList(Composite)\n"
" Set the status displayed by this error dialog to the given status. This\n only affects the status displayed by the Details list. The message, image\n and title should be updated by the subclass, if desired.\n \n @param status\n            the status to be displayed in the details list\n @since 3.1\n"
""
" Creates an error dialog. Note that the dialog will have no visual\n representation (no widgets) until it is told to open.\n <p>\n Normally one should use <code>openError</code> to create and open one\n of these. This constructor is useful only if the error object being\n displayed contains child items <it>and </it> you need to specify a mask\n which will be used to filter the displaying of these children. The error\n dialog will only be displayed if there is at least one child status\n matching the mask.\n </p>\n \n @param parentShell\n            the shell under which to create this dialog\n @param dialogTitle\n            the title to use for this dialog, or <code>null</code> to\n            indicate that the default title should be used\n @param message\n            the message to show in this dialog, or <code>null</code> to\n            indicate that the error's message should be shown as the\n            primary message\n @param status\n            the error to show to the user\n @param displayMask\n            the mask to use to filter the displaying of child items, as\n            per <code>IStatus.matches</code>\n @see org.eclipse.core.runtime.IStatus#matches(int)\n"
" Static to prevent opening of error dialogs for automated testing.\n"
" Interface for a page in a multi-page dialog.\n"
" Creates the top level control for this dialog\n page under the given parent composite.\n <p>\n Implementors are responsible for ensuring that\n the created control can be accessed via <code>getControl</code>\n </p>\n\n @param parent the parent composite\n"
" Disposes the SWT resources allocated by this\n dialog page.\n"
" Returns the top level control for this dialog page.\n <p>\n May return <code>null</code> if the control\n has not been created yet.\n </p>\n\n @return the top level control or <code>null</code>\n"
" Returns this dialog page's description text.\n\n @return the description text for this dialog page, \n  or <code>null</code> if none\n"
" Returns the current error message for this dialog page.\n May be <code>null</code> to indicate no error message.\n <p>\n An error message should describe some error state,\n as opposed to a message which may simply provide instruction\n or information to the user.\n </p>\n \n @return the error message, or <code>null</code> if none\n"
" Returns this dialog page's image.\n\n @return the image for this dialog page, or <code>null</code>\n  if none\n"
" Returns the current message for this wizard page.\n <p>\n A message provides instruction or information to the \n user, as opposed to an error message which should \n describe some error state.\n </p>\n \n @return the message, or <code>null</code> if none\n"
" Returns this dialog page's title.\n\n @return the title of this dialog page, \n  or <code>null</code> if none\n"
" Notifies that help has been requested for this dialog page.\n"
" Sets this dialog page's description text.\n \n @param description the description text for this dialog\n  page, or <code>null</code> if none\n"
" Sets this dialog page's image.\n\n @param image the image for this dialog page, \n  or <code>null</code> if none\n"
" Set this dialog page's title.\n\n @param title the title of this dialog page, \n  or <code>null</code> if none\n"
" Sets the visibility of this dialog page.\n\n @param visible <code>true</code> to make this page visible,\n  and <code>false</code> to hide it\n"
" An abstract base class for dialogs with a status bar and OK/CANCEL buttons.\n The status message is specified in an IStatus which can be of severity ERROR,\n WARNING, INFO or OK. The OK button is enabled or disabled depending on the\n status.\n \n @since 3.1\n"
" Specifies whether status line appears to the left of the buttons\n (default) or above them.\n \n @param aboveButtons\n            if <code>true</code> status line is placed above buttons; if\n            <code>false</code> to the right\n"
" Update the dialog's status line to reflect the given status. It is safe\n to call this method before the dialog has been opened.\n \n @param status\n            the status to set\n"
" Returns the last status.\n \n @return IStatus\n"
" Updates the status of the ok button to reflect the given status.\n Subclasses may override this method to update additional buttons.\n \n @param status\n            the status.\n"
""
""
""
""
" Sets the title for this dialog.\n \n @param title\n            the title.\n"
" Sets the image for this dialog.\n \n @param image\n            the image.\n"
" Creates an instance of a status dialog.\n \n @param parent\n            the parent Shell of the dialog\n"
" Concrete implementation of a dialog settings (<code>IDialogSettings</code>)\n using a hash table and XML. The dialog store can be read\n from and saved to a stream. All keys and values must be strings or array of\n strings. Primitive types are converted to strings.\n <p>\n This class was not designed to be subclassed.\n\n Here is an example of using a DialogSettings:\n </p>\n <pre>\n <code>\n DialogSettings settings = new DialogSettings("root");\n settings.put("Boolean1",true);\n settings.put("Long1",100);\n settings.put("Array1",new String[]{"aaaa1","bbbb1","cccc1"});\n DialogSettings section = new DialogSettings("sectionName");\n settings.addSection(section);\n section.put("Int2",200);\n section.put("Float2",1.1);\n section.put("Array2",new String[]{"aaaa2","bbbb2","cccc2"});\n settings.save("c:\\temp\\test\\dialog.xml");\n </code>\n </pre>\n @noextend This class is not intended to be subclassed by clients.\n"
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
" Create an empty dialog settings which loads and saves its\n content to a file.\n Use the methods <code>load(String)</code> and <code>store(String)</code>\n to load and store this dialog settings.\n\n @param sectionName the name of the section in the settings.\n"
" Event object describing a page selection change. The source of these events\n is a page change provider.\n \n @see IPageChangeProvider\n @see IPageChangedListener\n \n @since 3.1\n"
" Returns the selected page.\n \n @return the selected page. In dialogs implemented by JFace, \n 		this will be an <code>IDialogPage</code>.\n"
" Returns the page change provider that is the source of this event.\n \n @return the originating page change provider\n"
" Creates a new event for the given source and selected page.\n \n @param source\n            the page change provider\n @param selectedPage\n            the selected page. In the JFace provided dialogs this\n            will be an <code>IDialogPage</code>.\n"
" The selected page.\n"
" A dialog that has a title area for displaying a title and an image as well as\n a common area for displaying a description, a message, or an error message.\n <p>\n This dialog class may be subclassed.\n"
""
" Creates and returns the contents of the upper part of this dialog (above\n the button bar).\n <p>\n The <code>Dialog</code> implementation of this framework method creates\n and returns a new <code>Composite</code> with no margins and spacing.\n Subclasses should override.\n </p>\n \n @param parent\n            The parent composite to contain the dialog area\n @return the dialog area control\n"
" The <code>TitleAreaDialog</code> implementation of this\n <code>Window</code> methods returns an initial size which is at least\n some reasonable minimum.\n \n @return the initial size of the dialog\n"
" Retained for backward compatibility.\n \n Returns the title area composite. There is no composite in this\n implementation so the shell is returned.\n \n @return Composite\n @deprecated\n"
" Returns the title image label.\n \n @return the title image label\n"
" Display the given error message. The currently displayed message is saved\n and will be redisplayed when the error message is set to\n <code>null</code>.\n \n @param newErrorMessage\n            the newErrorMessage to display or <code>null</code>\n"
" Set the message text. If the message line currently displays an error,\n the message is saved and will be redisplayed when the error message is\n set to <code>null</code>.\n <p>\n Shortcut for <code>setMessage(newMessage, IMessageProvider.NONE)</code>\n </p>\n This method should be called after the dialog has been opened as it\n updates the message label immediately.\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n"
" Sets the message for this dialog with an indication of what type of\n message it is.\n <p>\n The valid message types are one of <code>NONE</code>,\n <code>INFORMATION</code>,<code>WARNING</code>, or\n <code>ERROR</code>.\n </p>\n <p>\n Note that for backward compatibility, a message of type\n <code>ERROR</code> is different than an error message (set using\n <code>setErrorMessage</code>). An error message overrides the current\n message until the error message is cleared. This method replaces the\n current message and does not affect the error message.\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n @param newType\n            the message type\n @since 2.0\n"
" Sets the title to be shown in the title area of this dialog.\n \n @param newTitle\n            the title show\n"
" Sets the title bar color for this dialog.\n \n @param color\n            the title bar color\n"
" Sets the title image to be shown in the title area of this dialog.\n \n @param newTitleImage\n            the title image to be shown\n"
" Instantiate a new title area dialog.\n \n @param parentShell\n            the parent SWT shell\n"
" Image registry key for error message image.\n"
" Image registry key for banner image (value\n <code>"dialog_title_banner_image"</code>).\n"
" Message type constant used to display an info icon with the message.\n \n @since 2.0\n @deprecated\n"
" Message type constant used to display a warning icon with the message.\n \n @since 2.0\n @deprecated\n"
" The IconAndMessageDialog is the abstract superclass of dialogs that have an\n icon and a message as the first two widgets. In this dialog the icon and\n message are direct children of the shell in order that they can be read by\n accessibility tools more easily.\n <p>\n <strong>Note:</strong> Clients are expected to call {@link #createMessageArea(Composite)},\n otherwise neither the icon nor the message will appear.\n </p>\n"
" Create the area the message will be shown in.\n <p>\n The parent composite is assumed to use GridLayout as its layout manager,\n since the parent is typically the composite created in\n {@link Dialog#createDialogArea}.\n </p>\n <p>\n <strong>Note:</strong> Clients are expected to call this method, otherwise\n neither the icon nor the message will appear.\n </p>\n \n @param composite\n            The composite to parent from.\n @return Control\n"
" Returns the style for the message label.\n \n @return the style for the message label\n \n @since 3.0\n"
""
" Returns the image to display beside the message in this dialog.\n <p>\n Subclasses may override.\n </p>\n \n @return the image to display beside the message\n @since 2.0\n"
""
" Create the dialog area and the button bar for the receiver.\n \n @param parent\n"
" Return the <code>Image</code> to be used when displaying an error.\n \n @return image the error image\n"
" Return the <code>Image</code> to be used when displaying a warning.\n \n @return image the warning image\n"
" Return the <code>Image</code> to be used when displaying information.\n \n @return image the information image\n"
" Return the <code>Image</code> to be used when displaying a question.\n \n @return image the question image\n"
" Constructor for IconAndMessageDialog.\n \n @param parentShell\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n"
" Message (a localized string).\n"
" Message label is the label the message is shown on.\n"
" Return the label for the image.\n"
" Instances of this class provide a message area to display a message and an\n associated image.\n <p>\n This class is not intended to be extended by clients.\n </p>\n \n @since 3.2\n @deprecated As of 3.3, this class is no longer necessary.\n \n"
""
" Sets the text in the decorated field which will be displayed in the\n message area.\n \n @param text\n            the text to be displayed in the message area\n \n @see org.eclipse.swt.widgets.Text#setText(String string)\n"
" Adds an image to decorated field to be shown in the message area.\n \n @param image\n            desired image to be shown in the ImageAndMessageArea\n"
""
""
" Constructs a new ImageAndMessageArea with an empty decorated field. Calls\n to <code>setText(String text)</code> and\n <code>setImage(Image image)</code> are required in order to fill the\n message area. Also, the instance will be invisible when initially\n created.\n <p>\n The style bit <code>SWT.WRAP</code> should be used if a larger message\n area is desired.\n </p>\n \n @param parent\n            the parent composite\n @param style\n            the SWT style bits. Using SWT.WRAP will create a larger\n            message area.\n"
" A lightweight, transient dialog that is popped up to show contextual or\n temporal information and is easily dismissed. Clients control whether the\n dialog should be able to receive input focus. An optional title area at the\n top and an optional info area at the bottom can be used to provide additional\n information.\n <p>\n Because the dialog is short-lived, most of the configuration of the dialog is\n done in the constructor. Set methods are only provided for those values that\n are expected to be dynamically computed based on a particular instance's\n internal state.\n <p>\n Clients are expected to override the creation of the main dialog area, and\n may optionally override the creation of the title area and info area in order\n to add content. In general, however, the creation of stylistic features, such\n as the dialog menu, separator styles, and fonts, is kept private so that all\n popup dialogs will have a similar appearance.\n \n @since 3.2\n"
""
" The <code>PopupDialog</code> implementation of this <code>Window</code>\n method creates and lays out the top level composite for the dialog. It\n then calls the <code>createTitleMenuArea</code>,\n <code>createDialogArea</code>, and <code>createInfoTextArea</code>\n methods to create an optional title and menu area on the top, a dialog\n area in the center, and an optional info text area at the bottom.\n Overriding <code>createDialogArea</code> and (optionally)\n <code>createTitleMenuArea</code> and <code>createTitleMenuArea</code>\n are recommended rather than overriding this method.\n \n @param parent\n            the composite used to parent the contents.\n \n @return the control representing the contents.\n"
" Creates and returns the contents of the dialog (the area below the title\n area and above the info text area.\n <p>\n The <code>PopupDialog</code> implementation of this framework method\n creates and returns a new <code>Composite</code> with standard margins\n and spacing.\n <p>\n The returned control's layout data must be an instance of\n <code>GridData</code>. This method must not modify the parent's\n layout.\n <p>\n Subclasses must override this method but may call <code>super</code> as\n in the following example:\n \n <pre>\n Composite composite = (Composite) super.createDialogArea(parent);\n //add controls to composite as necessary\n return composite;\n </pre>\n \n @param parent\n            the parent composite to contain the dialog area\n @return the dialog area control\n"
" Returns the control that should get initial focus. Subclasses may\n override this method.\n \n @return the Control that should receive focus when the popup opens.\n"
" Sets the tab order for the popup. Clients should override to introduce\n specific tab ordering.\n \n @param composite\n            the composite in which all content, including the title area\n            and info area, was created. This composite's parent is the\n            shell.\n"
" Returns a boolean indicating whether the popup should have a title area\n at the top of the dialog. Subclasses may override. Default behavior is to\n have a title area if there is to be a menu or title text.\n \n @return <code>true</code> if a title area should be created,\n         <code>false</code> if it should not.\n"
" Returns a boolean indicating whether the popup should have an info area\n at the bottom of the dialog. Subclasses may override. Default behavior is\n to have an info area if info text was provided at the time of creation.\n \n @return <code>true</code> if a title area should be created,\n         <code>false</code> if it should not.\n"
" Creates the title and menu area. Subclasses typically need not override\n this method, but instead should use the constructor parameters\n <code>showDialogMenu</code> and <code>showPersistAction</code> to\n indicate whether a menu should be shown, and\n <code>createTitleControl</code> to to customize the presentation of the\n title.\n \n <p>\n If this method is overridden, the returned control's layout data must be\n an instance of <code>GridData</code>. This method must not modify the\n parent's layout.\n \n @param parent\n            The parent composite.\n @return The Control representing the title and menu area.\n"
" Creates the control to be used to represent the dialog's title text.\n Subclasses may override if a different control is desired for\n representing the title text, or if something different than the title\n should be displayed in location where the title text typically is shown.\n \n <p>\n If this method is overridden, the returned control's layout data must be\n an instance of <code>GridData</code>. This method must not modify the\n parent's layout.\n \n @param parent\n            The parent composite.\n @return The Control representing the title area.\n"
" Creates the optional info text area. This method is only called if the\n <code>hasInfoArea()</code> method returns true. Subclasses typically\n need not override this method, but may do so.\n \n <p>\n If this method is overridden, the returned control's layout data must be\n an instance of <code>GridData</code>. This method must not modify the\n parent's layout.\n \n \n @param parent\n            The parent composite.\n @return The control representing the info text area.\n \n @see PopupDialog#hasInfoArea()\n @see PopupDialog#createTitleControl(Composite)\n"
" Fill the dialog's menu. Subclasses may extend or override.\n \n @param dialogMenu\n            The dialog's menu.\n"
" Show the dialog's menu. This message has no effect if the receiver was\n not configured to show a menu. Clients may call this method in order to\n trigger the menu via keystrokes or other gestures. Subclasses typically\n do not override method.\n"
" Set the text to be shown in the popup's info area. This message has no\n effect if there was no info text supplied when the dialog first opened.\n Subclasses may override this method.\n \n @param text\n            the text to be shown when the info area is displayed.\n \n"
" Set the text to be shown in the popup's title area. This message has no\n effect if there was no title label specified when the dialog was\n originally opened. Subclasses may override this method.\n \n @param text\n            the text to be shown when the title area is displayed.\n \n"
" Return a boolean indicating whether this dialog will persist its bounds.\n This value is initially set in the dialog's constructor, but can be\n modified if the persist bounds action is shown on the menu and the user\n has changed its value. Subclasses may override this method.\n \n @return <code>true</code> if the dialog's bounds will be persisted,\n         <code>false</code> if it will not.\n \n @deprecated As of 3.4, please use {@link #getPersistLocation()} or\n             {@link #getPersistSize()} to determine separately whether\n             size or location should be persisted.\n"
" Return a boolean indicating whether this dialog will persist its\n location. This value is initially set in the dialog's constructor, but\n can be modified if the persist location action is shown on the menu and\n the user has changed its value. Subclasses may override this method.\n \n @return <code>true</code> if the dialog's location will be persisted,\n         <code>false</code> if it will not.\n \n @see #getPersistSize()\n @since 3.4\n"
" Return a boolean indicating whether this dialog will persist its size.\n This value is initially set in the dialog's constructor, but can be\n modified if the persist size action is shown on the menu and the user has\n changed its value. Subclasses may override this method.\n \n @return <code>true</code> if the dialog's size will be persisted,\n         <code>false</code> if it will not.\n \n @see #getPersistLocation()\n @since 3.4\n"
" Opens this window, creating it first if it has not yet been created.\n <p>\n This method is reimplemented for special configuration of PopupDialogs.\n It never blocks on open, immediately returning <code>OK</code> if the\n open is successful, or <code>CANCEL</code> if it is not. It provides\n framework hooks that allow subclasses to set the focus and tab order, and\n avoids the use of <code>shell.open()</code> in cases where the focus\n should not be given to the shell initially.\n \n @return the return code\n \n @see org.eclipse.jface.window.Window#open()\n"
" Closes this window, disposes its shell, and removes this window from its\n window manager (if it has one).\n <p>\n This method is extended to save the dialog bounds and initialize widget\n state so that the widgets can be recreated if the dialog is reopened.\n This method may be extended (<code>super.close</code> must be called).\n </p>\n \n @return <code>true</code> if the window is (or was already) closed, and\n         <code>false</code> if it is still open\n"
" Gets the dialog settings that should be used for remembering the bounds\n of the dialog. Subclasses should override this method when they wish to\n persist the bounds of the dialog.\n \n @return settings the dialog settings used to store the dialog's location\n         and/or size, or <code>null</code> if the dialog's bounds should\n         never be stored.\n"
" Saves the bounds of the shell in the appropriate dialog settings. The\n bounds are recorded relative to the parent shell, if there is one, or\n display coordinates if there is no parent shell. Subclasses typically\n need not override this method, but may extend it (calling\n <code>super.saveDialogBounds</code> if additional bounds information\n should be stored. Clients may also call this method to persist the bounds\n at times other than closing the dialog.\n \n @param shell\n            The shell whose bounds are to be stored\n"
""
" Return the default size to use for the shell. This default size is used\n if the dialog does not have any persisted size to restore. The default\n implementation returns the preferred size of the shell. Subclasses should\n override this method when an alternate default size is desired, rather\n than overriding {@link #getInitialSize()}.\n \n @return the initial size of the shell\n \n @see #getPersistSize()\n @since 3.4\n"
" Returns the default location to use for the shell. This default location\n is used if the dialog does not have any persisted location to restore.\n The default implementation uses the location computed by\n {@link org.eclipse.jface.window.Window#getInitialLocation(Point)}.\n Subclasses should override this method when an alternate default location\n is desired, rather than overriding {@link #getInitialLocation(Point)}.\n \n @param initialSize\n            the initial size of the shell, as returned by\n            <code>getInitialSize</code>.\n @return the initial location of the shell\n \n @see #getPersistLocation()\n @since 3.4\n"
" Adjust the bounds of the popup as necessary prior to opening the dialog.\n Default is to do nothing, which honors any bounds set directly by clients\n or those that have been saved in the dialog settings. Subclasses should\n override this method when there are bounds computations that must be\n checked each time the dialog is opened.\n"
" (non-Javadoc)\n \n @see org.eclipse.jface.window.Window#getInitialLocation(org.eclipse.swt.graphics.Point)\n"
" Get the foreground color that should be used for this popup. Subclasses\n may override.\n \n @return the foreground color to be used. Should not be <code>null</code>.\n \n @since 3.4\n \n @see #getForegroundColorExclusions()\n"
" Get the background color that should be used for this popup. Subclasses\n may override.\n \n @return the background color to be used. Should not be <code>null</code>.\n \n @since 3.4\n \n @see #getBackgroundColorExclusions()\n"
" Set the specified foreground color for the specified control and all of\n its children. Subclasses may override this method, but typically do not.\n If a subclass wishes to exclude a particular control in its contents from\n getting the specified foreground color, it may instead override\n {@link #getForegroundColorExclusions()}.\n \n @param color\n            the color to use as the foreground color\n @param control\n            the control whose color is to be changed\n @see PopupDialog#getForegroundColorExclusions()\n"
" Set the specified background color for the specified control and all of\n its children. Subclasses may override this method, but typically do not.\n If a subclass wishes to exclude a particular control in its contents from\n getting the specified background color, it may instead override\n {@link #getBackgroundColorExclusions()}\n \n @param color\n            the color to use as the background color\n @param control\n            the control whose color is to be changed\n @see PopupDialog#getBackgroundColorExclusions()\n"
" Return a list of controls which should never have their foreground color\n reset. Subclasses may extend this method, but should always call\n <code>super.getForegroundColorExclusions</code> to aggregate the list.\n \n \n @return the List of controls\n"
" Return a list of controls which should never have their background color\n reset. Subclasses may extend this method, but should always call\n <code>super.getBackgroundColorExclusions</code> to aggregate the list.\n \n @return the List of controls\n"
" Constructs a new instance of <code>PopupDialog</code>.\n \n @param parent\n            The parent shell.\n @param shellStyle\n            The shell style.\n @param takeFocusOnOpen\n            A boolean indicating whether focus should be taken by this\n            popup when it opens.\n @param persistBounds\n            A boolean indicating whether the bounds (size and location) of\n            the dialog should be persisted upon close of the dialog. The\n            bounds can only be persisted if the dialog settings for\n            persisting the bounds are also specified. If a menu action\n            will be provided that allows the user to control this feature,\n            then the last known value of the user's setting will be used\n            instead of this flag.\n @param showDialogMenu\n            A boolean indicating whether a menu for moving and resizing\n            the popup should be provided.\n @param showPersistActions\n            A boolean indicating whether actions allowing the user to\n            control the persisting of the dialog size and location should\n            be shown in the dialog menu. This parameter has no effect if\n            <code>showDialogMenu</code> is <code>false</code>.\n @param titleText\n            Text to be shown in an upper title area, or <code>null</code>\n            if there is no title.\n @param infoText\n            Text to be shown in a lower info area, or <code>null</code>\n            if there is no info area.\n \n @see PopupDialog#getDialogSettings()\n @deprecated As of 3.4, replaced by\n             {@link #PopupDialog(Shell, int, boolean, boolean, boolean, boolean, boolean, String, String)}\n"
" Constructs a new instance of <code>PopupDialog</code>.\n \n @param parent\n            The parent shell.\n @param shellStyle\n            The shell style.\n @param takeFocusOnOpen\n            A boolean indicating whether focus should be taken by this\n            popup when it opens.\n @param persistSize\n            A boolean indicating whether the size should be persisted upon\n            close of the dialog. The size can only be persisted if the\n            dialog settings for persisting the bounds are also specified.\n            If a menu action will be provided that allows the user to\n            control this feature and the user hasn't changed that setting,\n            then this flag is used as initial default for the menu.\n @param persistLocation\n            A boolean indicating whether the location should be persisted\n            upon close of the dialog. The location can only be persisted\n            if the dialog settings for persisting the bounds are also\n            specified. If a menu action will be provided that allows the\n            user to control this feature and the user hasn't changed that\n            setting, then this flag is used as initial default for the\n            menu. default for the menu until the user changed it.\n @param showDialogMenu\n            A boolean indicating whether a menu for moving and resizing\n            the popup should be provided.\n @param showPersistActions\n            A boolean indicating whether actions allowing the user to\n            control the persisting of the dialog bounds and location\n            should be shown in the dialog menu. This parameter has no\n            effect if <code>showDialogMenu</code> is <code>false</code>.\n @param titleText\n            Text to be shown in an upper title area, or <code>null</code>\n            if there is no title.\n @param infoText\n            Text to be shown in a lower info area, or <code>null</code>\n            if there is no info area.\n \n @see PopupDialog#getDialogSettings()\n \n @since 3.4\n"
" Shell style appropriate for a simple hover popup that cannot get focus.\n \n"
" Shell style appropriate for an info popup that can get focus.\n"
" Shell style appropriate for a resizable info popup that can get focus.\n"
" Margin width (in pixels) to be used in layouts inside popup dialogs\n (value is 0).\n"
" Margin height (in pixels) to be used in layouts inside popup dialogs\n (value is 0).\n"
" Vertical spacing (in pixels) between cells in the layouts inside popup\n dialogs (value is 1).\n"
" Vertical spacing (in pixels) between cells in the layouts inside popup\n dialogs (value is 1).\n"
" Image registry key for menu image.\n \n @since 3.4\n"
" Image registry key for disabled menu image.\n \n @since 3.4\n"
" Abstract base implementation of a dialog page. All dialog pages are\n subclasses of this one.\n"
" Returns the number of pixels corresponding to the height of the given\n number of characters.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param chars\n            the number of characters\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the given number of\n horizontal dialog units.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param dlus\n            the number of horizontal dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the given number of\n vertical dialog units.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param dlus\n            the number of vertical dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the width of the given\n number of characters.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param chars\n            the number of characters\n @return the number of pixels\n"
" The <code>DialogPage</code> implementation of this\n <code>IDialogPage</code> method disposes of the page\n image if it has one. \n Subclasses may extend.\n"
" Returns the top level control for this dialog page.\n \n @return the top level control\n"
""
" Returns the symbolic font name used by dialog pages.\n \n @return the symbolic font name\n"
""
" Returns the default font to use for this dialog page.\n \n @return the font\n"
""
""
""
" Returns this dialog page's shell. Convenience method for\n <code>getControl().getShell()</code>. This method may only be called\n after the page's control has been created.\n \n @return the shell\n"
""
" Returns the tool tip text for the widget with the given id.\n <p>\n The default implementation of this framework method does nothing and\n returns <code>null</code>. Subclasses may override.\n </p>\n \n @param widgetId\n            the id of the widget for which hover help is requested\n @return the tool tip text, or <code>null</code> if none\n @deprecated \n"
" Initializes the computation of horizontal and vertical dialog units based\n on the size of current font.\n <p>\n This method must be called before any of the dialog unit based conversion\n methods are called.\n </p>\n \n @param testControl\n            a control from which to obtain the current font\n"
" Sets the <code>GridData</code> on the specified button to be one that\n is spaced for the current dialog page units. The method\n <code>initializeDialogUnits</code> must be called once before calling\n this method for the first time.\n \n @param button\n            the button to set the <code>GridData</code>\n @return the <code>GridData</code> set on the specified button\n"
" Tests whether this page's UI content has already been created.\n \n @return <code>true</code> if the control has been created, and\n         <code>false</code> if not\n"
" This default implementation of an <code>IDialogPage</code> method does\n nothing. Subclasses should override to take some action in response to a\n help request.\n"
" Set the control for the receiver.\n @param newControl\n"
""
" Sets or clears the error message for this page.\n \n @param newMessage\n            the message, or <code>null</code> to clear the error message\n"
""
" Sets or clears the message for this page.\n <p>\n This is a shortcut for <code>setMessage(newMesasge, NONE)</code>\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n"
" Sets the message for this page with an indication of what type of message\n it is.\n <p>\n The valid message types are one of <code>NONE</code>,\n <code>INFORMATION</code>,<code>WARNING</code>, or\n <code>ERROR</code>.\n </p>\n <p>\n Note that for backward compatibility, a message of type\n <code>ERROR</code> is different than an error message (set using\n <code>setErrorMessage</code>). An error message overrides the current\n message until the error message is cleared. This method replaces the\n current message and does not affect the error message.\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n @param newType\n            the message type\n @since 2.0\n"
" The <code>DialogPage</code> implementation of this\n <code>IDialogPage</code> method remembers the title in an internal\n state variable. Subclasses may extend.\n"
" The <code>DialogPage</code> implementation of this\n <code>IDialogPage</code> method sets the control to the given\n visibility state. Subclasses may extend.\n"
" Creates a new empty dialog page.\n"
" Creates a new dialog page with the given title.\n \n @param title\n            the title of this dialog page, or <code>null</code> if none\n"
" Creates a new dialog page with the given title and image.\n \n @param title\n            the title of this dialog page, or <code>null</code> if none\n @param image\n            the image for this dialog page, or <code>null</code> if none\n"
" A dialog is a specialized window used for narrow-focused communication with\n the user.\n <p>\n Dialogs are usually modal. Consequently, it is generally bad practice to open\n a dialog without a parent. A modal dialog without a parent is not prevented\n from disappearing behind the application's other windows, making it very\n confusing for the user.\n </p>\n <p>\n If there is more than one modal dialog is open the second one should be\n parented off of the shell of the first one otherwise it is possible that the\n OS will give focus to the first dialog potentially blocking the UI.\n </p>\n"
" Returns the number of pixels corresponding to the height of the given\n number of characters.\n <p>\n The required <code>FontMetrics</code> parameter may be created in the\n following way: <code>\n 	GC gc = new GC(control);\n	gc.setFont(control.getFont());\n	fontMetrics = gc.getFontMetrics();\n	gc.dispose();\n </code>\n </p>\n \n @param fontMetrics\n            used in performing the conversion\n @param chars\n            the number of characters\n @return the number of pixels\n @since 2.0\n"
" Returns the number of pixels corresponding to the given number of\n horizontal dialog units.\n <p>\n The required <code>FontMetrics</code> parameter may be created in the\n following way: <code>\n 	GC gc = new GC(control);\n	gc.setFont(control.getFont());\n	fontMetrics = gc.getFontMetrics();\n	gc.dispose();\n </code>\n </p>\n \n @param fontMetrics\n            used in performing the conversion\n @param dlus\n            the number of horizontal dialog units\n @return the number of pixels\n @since 2.0\n"
" Returns the number of pixels corresponding to the given number of\n vertical dialog units.\n <p>\n The required <code>FontMetrics</code> parameter may be created in the\n following way: <code>\n 	GC gc = new GC(control);\n	gc.setFont(control.getFont());\n	fontMetrics = gc.getFontMetrics();\n	gc.dispose();\n </code>\n </p>\n \n @param fontMetrics\n            used in performing the conversion\n @param dlus\n            the number of vertical dialog units\n @return the number of pixels\n @since 2.0\n"
" Returns the number of pixels corresponding to the width of the given\n number of characters.\n <p>\n The required <code>FontMetrics</code> parameter may be created in the\n following way: <code>\n 	GC gc = new GC(control);\n	gc.setFont(control.getFont());\n	fontMetrics = gc.getFontMetrics();\n	gc.dispose();\n </code>\n </p>\n \n @param fontMetrics\n            used in performing the conversion\n @param chars\n            the number of characters\n @return the number of pixels\n @since 2.0\n"
" Shortens the given text <code>textValue</code> so that its width in\n pixels does not exceed the width of the given control. Overrides\n characters in the center of the original string with an ellipsis ("...")\n if necessary. If a <code>null</code> value is given, <code>null</code>\n is returned.\n \n @param textValue\n            the original string or <code>null</code>\n @param control\n            the control the string will be displayed on\n @return the string to display, or <code>null</code> if null was passed\n         in\n \n @since 3.0\n"
" Notifies that this dialog's button with the given id has been pressed.\n <p>\n The <code>Dialog</code> implementation of this framework method calls\n <code>okPressed</code> if the ok button is the pressed, and\n <code>cancelPressed</code> if the cancel button is the pressed. All\n other button presses are ignored. Subclasses may override to handle other\n buttons, but should call <code>super.buttonPressed</code> if the\n default handling of the ok and cancel buttons is desired.\n </p>\n \n @param buttonId\n            the id of the button that was pressed (see\n            <code>IDialogConstants.*_ID</code> constants)\n"
" Notifies that the cancel button of this dialog has been pressed.\n <p>\n The <code>Dialog</code> implementation of this framework method sets\n this dialog's return code to <code>Window.CANCEL</code> and closes the\n dialog. Subclasses may override if desired.\n </p>\n"
" Returns the number of pixels corresponding to the height of the given\n number of characters.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param chars\n            the number of characters\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the given number of\n horizontal dialog units.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param dlus\n            the number of horizontal dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the given number of\n vertical dialog units.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param dlus\n            the number of vertical dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the width of the given\n number of characters.\n <p>\n This method may only be called after <code>initializeDialogUnits</code>\n has been called.\n </p>\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @param chars\n            the number of characters\n @return the number of pixels\n"
" Creates a new button with the given id.\n <p>\n The <code>Dialog</code> implementation of this framework method creates\n a standard push button, registers it for selection events including\n button presses, and registers default buttons with its shell. The button\n id is stored as the button's client data. If the button id is\n <code>IDialogConstants.CANCEL_ID</code>, the new button will be\n accessible from <code>getCancelButton()</code>. If the button id is\n <code>IDialogConstants.OK_ID</code>, the new button will be accesible\n from <code>getOKButton()</code>. Note that the parent's layout is\n assumed to be a <code>GridLayout</code> and the number of columns in\n this layout is incremented. Subclasses may override.\n </p>\n \n @param parent\n            the parent composite\n @param id\n            the id of the button (see <code>IDialogConstants.*_ID</code>\n            constants for standard dialog button ids)\n @param label\n            the label from the button\n @param defaultButton\n            <code>true</code> if the button is to be the default button,\n            and <code>false</code> otherwise\n \n @return the new button\n \n @see #getCancelButton\n @see #getOKButton()\n"
" Creates and returns the contents of this dialog's button bar.\n <p>\n The <code>Dialog</code> implementation of this framework method lays\n out a button bar and calls the <code>createButtonsForButtonBar</code>\n framework method to populate it. Subclasses may override.\n </p>\n <p>\n The returned control's layout data must be an instance of\n <code>GridData</code>.\n </p>\n \n @param parent\n            the parent composite to contain the button bar\n @return the button bar control\n"
" Adds buttons to this dialog's button bar.\n <p>\n The <code>Dialog</code> implementation of this framework method adds\n standard ok and cancel buttons using the <code>createButton</code>\n framework method. These standard buttons will be accessible from\n <code>getCancelButton</code>, and <code>getOKButton</code>.\n Subclasses may override.\n </p>\n \n @param parent\n            the button bar composite\n"
""
" The <code>Dialog</code> implementation of this <code>Window</code>\n method creates and lays out the top level composite for the dialog, and\n determines the appropriate horizontal and vertical dialog units based on\n the font size. It then calls the <code>createDialogArea</code> and\n <code>createButtonBar</code> methods to create the dialog area and\n button bar, respectively. Overriding <code>createDialogArea</code> and\n <code>createButtonBar</code> are recommended rather than overriding\n this method.\n"
" Creates and returns the contents of the upper part of this dialog (above\n the button bar).\n <p>\n The <code>Dialog</code> implementation of this framework method creates\n and returns a new <code>Composite</code> with standard margins and\n spacing.\n </p>\n <p>\n The returned control's layout data must be an instance of\n <code>GridData</code>. This method must not modify the parent's\n layout.\n </p>\n <p>\n Subclasses must override this method but may call <code>super</code> as\n in the following example:\n </p>\n \n <pre>\n Composite composite = (Composite) super.createDialogArea(parent);\n //add controls to composite as necessary\n return composite;\n </pre>\n \n @param parent\n            the parent composite to contain the dialog area\n @return the dialog area control\n"
" Returns the button created by the method <code>createButton</code> for\n the specified ID as defined on <code>IDialogConstants</code>. If\n <code>createButton</code> was never called with this ID, or if\n <code>createButton</code> is overridden, this method will return\n <code>null</code>.\n \n @param id\n            the id of the button to look for\n \n @return the button for the ID or <code>null</code>\n \n @see #createButton(Composite, int, String, boolean)\n @since 2.0\n"
" Returns the button bar control.\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @return the button bar, or <code>null</code> if the button bar has not\n         been created yet\n"
" Returns the button created when <code>createButton</code> is called\n with an ID of <code>IDialogConstants.CANCEL_ID</code>. If\n <code>createButton</code> was never called with this parameter, or if\n <code>createButton</code> is overridden, <code>getCancelButton</code>\n will return <code>null</code>.\n \n @return the cancel button or <code>null</code>\n \n @see #createButton(Composite, int, String, boolean)\n @since 2.0\n @deprecated Use <code>getButton(IDialogConstants.CANCEL_ID)</code>\n             instead. This method will be removed soon.\n"
" Returns the dialog area control.\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n \n @return the dialog area, or <code>null</code> if the dialog area has\n         not been created yet\n"
" Returns the standard dialog image with the given key. Note that these\n images are managed by the dialog framework, and must not be disposed by\n another party.\n \n @param key\n            one of the <code>Dialog.DLG_IMG_* </code> constants\n @return the standard dialog image\n \n NOTE: Dialog does not use the following images in the registry\n DLG_IMG_ERROR DLG_IMG_INFO DLG_IMG_QUESTION DLG_IMG_WARNING\n \n They are now coming directly from SWT, see ImageRegistry. For backwards\n compatibility they are still supported, however new code should use SWT\n for these.\n \n @see Display#getSystemImage(int)\n"
" Returns the button created when <code>createButton</code> is called\n with an ID of <code>IDialogConstants.OK_ID</code>. If\n <code>createButton</code> was never called with this parameter, or if\n <code>createButton</code> is overridden, <code>getOKButton</code>\n will return <code>null</code>.\n \n @return the OK button or <code>null</code>\n \n @see #createButton(Composite, int, String, boolean)\n @since 2.0\n @deprecated Use <code>getButton(IDialogConstants.OK_ID)</code> instead.\n             This method will be removed soon.\n"
" Initializes the computation of horizontal and vertical dialog units based\n on the size of current font.\n <p>\n This method must be called before any of the dialog unit based conversion\n methods are called.\n </p>\n \n @param control\n            a control from which to obtain the current font\n"
" Notifies that the ok button of this dialog has been pressed.\n <p>\n The <code>Dialog</code> implementation of this framework method sets\n this dialog's return code to <code>Window.OK</code> and closes the\n dialog. Subclasses may override.\n </p>\n"
" Set the layout data of the button to a GridData with appropriate heights\n and widths.\n \n @param button\n"
" Set the layout data of the button to a FormData with appropriate heights\n and widths.\n \n @param button\n"
" @see org.eclipse.jface.window.Window#close()\n"
" Applies the dialog font to all controls that currently have the default\n font.\n \n @param control\n            the control to apply the font to. Font will also be applied to\n            its children. If the control is <code>null</code> nothing\n            happens.\n"
" Return whether or not the dialog font is currently the same as the\n default font.\n \n @return boolean if the two are the same\n"
""
" Get the IDialogBlockedHandler to be used by WizardDialogs and\n ModalContexts.\n \n @return Returns the blockedHandler.\n"
" Set the IDialogBlockedHandler to be used by WizardDialogs and\n ModalContexts.\n \n @param blockedHandler\n            The blockedHandler for the dialogs.\n"
" Gets the dialog settings that should be used for remembering the bounds of\n of the dialog, according to the dialog bounds strategy.\n \n @return settings the dialog settings used to store the dialog's location\n         and/or size, or <code>null</code> if the dialog's bounds should\n         never be stored.\n \n @since 3.2\n @see Dialog#getDialogBoundsStrategy()\n"
" Get the integer constant that describes the strategy for persisting the\n dialog bounds. This strategy is ignored if the implementer does not also\n specify the dialog settings for storing the bounds in\n Dialog.getDialogBoundsSettings().\n \n @return the constant describing the strategy for persisting the dialog\n         bounds.\n \n @since 3.2\n @see Dialog#DIALOG_PERSISTLOCATION\n @see Dialog#DIALOG_PERSISTSIZE\n @see Dialog#getDialogBoundsSettings()\n"
" Returns the initial size to use for the shell. Overridden\n to check whether a size has been stored in dialog settings.\n If a size has been stored, it is returned.\n \n @return the initial size of the shell\n \n @since 3.2\n @see #getDialogBoundsSettings()\n @see #getDialogBoundsStrategy()\n"
" Returns the initial location to use for the shell. Overridden\n to check whether the bounds of the dialog have been stored in\n dialog settings.  If a location has been stored, it is returned.\n \n @param initialSize\n            the initial size of the shell, as returned by\n            <code>getInitialSize</code>.\n @return the initial location of the shell\n \n @since 3.2\n @see #getDialogBoundsSettings()\n @see #getDialogBoundsStrategy()\n"
" Returns a boolean indicating whether the dialog should be\n considered resizable when the shell style is initially\n set.  \n \n This method is used to ensure that all style \n bits appropriate for resizable dialogs are added to the \n shell style.  Individual dialogs may always set the shell \n style to ensure that a dialog is resizable, but using this\n method ensures that resizable dialogs will be created with\n the same set of style bits.\n \n Style bits will never be removed based on the return value \n of this method.  For example, if a dialog returns \n <code>false</code>, but also sets a style bit for a \n SWT.RESIZE border, the style bit will be honored.\n \n @return a boolean indicating whether the dialog is \n resizable and should have the default style bits for\n resizable dialogs\n \n @since 3.4\n"
" Creates a dialog instance. Note that the window will have no visual\n representation (no widgets) until it is told to open. By default,\n <code>open</code> blocks for dialogs.\n \n @param parentShell\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n"
" Image registry key for error image (value\n <code>"dialog_error_image"</code>).\n \n @deprecated use\n             org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_ERROR)\n"
" Image registry key for info image (value <code>"dialog_info_image"</code>).\n \n @deprecated use\n             org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_INFORMATION)\n"
" Image registry key for question image (value\n <code>"dialog_question_image"</code>).\n \n @deprecated org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_QUESTION)\n"
" Image registry key for warning image (value\n <code>"dialog_warning_image"</code>).\n \n @deprecated use\n             org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_WARNING)\n"
" Image registry key for info message image (value\n <code>"dialog_messasge_info_image"</code>).\n \n @since 2.0\n"
" Image registry key for info message image (value\n <code>"dialog_messasge_warning_image"</code>).\n \n @since 2.0\n"
" Image registry key for info message image (value\n <code>"dialog_message_error_image"</code>).\n \n @since 2.0\n"
" Image registry key for help image (value\n <code>"dialog_help_image"</code>).\n \n @since 3.2\n"
" The ellipsis is the string that is used to represent shortened text.\n \n @since 3.0\n"
" A value that can be used for stored dialog width or height that\n indicates that the default bounds should be used.\n \n @since 3.2\n"
" Persist the last location of the dialog.\n @since 3.2\n"
" Persist the last known size of the dialog.\n @since 3.2\n"
" The dialog area; <code>null</code> until dialog is layed out.\n"
" The button bar; <code>null</code> until dialog is layed out.\n"
" Create a default instance of the blocked handler which does not do\n anything.\n"
" Helper class to save the enable/disable state of a control including all its\n descendent controls.\n"
" Saves the current enable/disable state of the given control and its\n descendents in the returned object; the controls are all disabled.\n \n @param w\n            the control\n @return an object capturing the enable/disable state\n"
" Saves the current enable/disable state of the given control and its\n descendents in the returned object except for the given list of exception\n cases; the controls that are saved are also disabled.\n \n @param w\n            the control\n @param exceptions\n            the list of controls to not disable (element type:\n            <code>Control</code>)\n @return an object capturing the enable/disable state\n"
" Restores the window enable state saved in this object.\n"
" Creates a new object and saves in it the current enable/disable state of\n the given control and its descendents; the controls that are saved are\n also disabled.\n \n @param w\n            the control\n"
" Creates a new object and saves in it the current enable/disable state of\n the given control and its descendents except for the given list of\n exception cases; the controls that are saved are also disabled.\n \n @param w\n            the control\n @param exceptions\n            the list of controls to not disable (element type:\n            <code>Control</code>), or <code>null</code> if none\n"
" A ErrorSupportProvider defines the area to be shown in an error dialog for extra support information.\n @since 3.3\n\n"
" Create an area for adding support components as a child of parent.\n @param parent The parent {@link Composite}\n @param status The {@link IStatus} that is being displayed.\n @return Control\n"
""
" <p>\n This class is the abstract superclass of all dialog trays. A tray can be opened\n in any <code>TrayDialog</code>.\n </p>\n \n @see org.eclipse.jface.dialogs.TrayDialog\n @since 3.2\n"
" Creates the contents (widgets) that will be contained in the tray.\n <p>\n Tray implementions must not set a layout on the parent composite, or assume\n a particular layout on the parent. The tray dialog will allocate space\n according to the natural size of the tray, and will fill the tray area with the\n tray's contents.\n </p>\n \n @param parent the composite that will contain the tray\n @return the contents of the tray, as a <code>Control</code>\n"
""
" The DialogMessageArea is a resusable component for adding an accessible\n message area to a dialog.\n \n When the message is normal a CLabel is used but an errors replaces the\n message area with a non editable text that can take focus for use by screen\n readers.\n \n @since 3.0\n"
" Create the contents for the receiver.\n \n @param parent\n            the Composite that the children will be created in\n"
" Set the layoutData for the title area. In most cases this will be a copy\n of the layoutData used in setMessageLayoutData.\n \n @param layoutData\n            the layoutData for the title\n @see #setMessageLayoutData(Object)\n"
" Set the layoutData for the messageArea. In most cases this will be a copy\n of the layoutData used in setTitleLayoutData.\n \n @param layoutData\n            the layoutData for the message area composite.\n @see #setTitleLayoutData(Object)\n"
" Show the title.\n \n @param titleMessage\n            String for the titke\n @param titleImage\n            Image or <code>null</code>\n"
" Enable the title and disable the message text and image.\n"
" Show the new message in the message text and update the image. Base the\n background color on whether or not there are errors.\n \n @param newMessage\n            The new value for the message\n @param newType\n            One of the IMessageProvider constants. If newType is\n            IMessageProvider.NONE show the title.\n @see IMessageProvider\n"
" Clear the error message. Restore the previously displayed message if\n there is one, if not restore the title label.\n  \n"
" Create a new instance of the receiver.\n"
" Minimal interface to a page change provider. Used for dialogs which can\n switch between multiple pages.\n \n @since 3.1\n"
" Returns the currently selected page in the dialog.\n \n @return the selected page in the dialog or <code>null</code> if none is\n         selected. The type may be domain specific. In \n         the JFace provided dialogs this will be an instance of \n         <code>IDialogPage</code>. \n"
" Adds a listener for page changes in this page change provider. Has no\n effect if an identical listener is already registered.\n \n @param listener\n            a page changed listener\n"
" Removes the given page change listener from this page change provider.\n Has no effect if an identical listener is not registered.\n \n @param listener\n            a page changed listener\n"
" An interface to a storage mechanism for making dialog settings persistent.\n The store manages a collection of key/value pairs. The keys must be strings\n and the values can be either, strings or array of strings. Convenience API to\n convert primitive types to strings is provided.\n"
" Create a new section in the receiver and return it.\n \n @param name\n            the name of the new section\n @return the new section\n"
" Add a section in the receiver.\n \n @param section\n            the section to be added\n"
" Returns the value of the given key in this dialog settings.\n \n @param key\n            the key\n @return the value, or <code>null</code> if none\n"
" Returns the value, an array of strings, of the given key in this dialog\n settings.\n \n @param key\n            the key\n @return the array of string, or <code>null</code> if none\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a boolean and return it.\n \n @param key\n            the key\n @return the boolean value, or <code>false</code> if none\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a double and return it.\n \n @param key\n            the key\n @return the value coverted to double, or throws\n         <code>NumberFormatException</code> if none\n \n @exception NumberFormatException\n                if the string value does not contain a parsable number.\n @see java.lang.Double#valueOf(java.lang.String)\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a float and return it.\n \n @param key\n            the key\n @return the value coverted to float, or throws\n         <code>NumberFormatException</code> if none\n \n @exception NumberFormatException\n                if the string value does not contain a parsable number.\n @see java.lang.Float#valueOf(java.lang.String)\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a int and return it.\n \n @param key\n            the key\n @return the value coverted to int, or throws\n         <code>NumberFormatException</code> if none\n \n @exception NumberFormatException\n                if the string value does not contain a parsable number.\n @see java.lang.Integer#valueOf(java.lang.String)\n"
" Convenience API. Convert the value of the given key in this dialog\n settings to a long and return it.\n \n @param key\n            the key\n @return the value coverted to long, or throws\n         <code>NumberFormatException</code> if none\n \n @exception NumberFormatException\n                if the string value does not contain a parsable number.\n @see java.lang.Long#valueOf(java.lang.String)\n"
" Returns the IDialogSettings name.\n \n @return the name\n"
" Returns the section with the given name in this dialog settings.\n \n @param sectionName\n            the key\n @return IDialogSettings (the section), or <code>null</code> if none\n"
" Returns all the sections in this dialog settings.\n \n @return the section, or <code>null</code> if none\n"
" Load a dialog settings from a stream and fill the receiver with its\n content.\n \n @param reader\n            a Reader specifying the stream where the settings are read\n            from.\n @throws IOException\n"
" Load a dialog settings from a file and fill the receiver with its\n content.\n \n @param fileName\n            the name of the file the settings are read from.\n @throws IOException\n"
" Adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the double <code>value</code> to a string and\n adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the float <code>value</code> to a string and\n adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the int <code>value</code> to a string and\n adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the long <code>value</code> to a string and\n adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Convenience API. Converts the boolean <code>value</code> to a string\n and adds the pair <code>key/value</code> to this dialog settings.\n \n @param key\n            the key.\n @param value\n            the value to be associated with the <code>key</code>\n"
" Save a dialog settings to a stream\n \n @param writer\n            a Writer specifying the stream the settings are written in.\n @throws IOException\n"
" Save a dialog settings to a file.\n \n @param fileName\n            the name of the file the settings are written in.\n @throws IOException\n"
" Event object describing an <code>IDialogPage</code> in the midst of changing.\n \n @see IPageChangingListener\n @since 3.3\n"
" Returns the current page from which the page change originates.\n \n @return the current page. In dialogs implemented by JFace, \n 		this will be an <code>IDialogPage</code>.\n"
" Returns the target page to change to.\n \n @return the target page. In dialogs implemented by JFace, \n 		this will be an <code>IDialogPage</code>.\n"
" Creates a new event for the given source, selected (current) page and\n direction.\n \n @param source\n            the page changing provider (the source of this event)\n @param currentPage\n            the current page. In the JFace provided dialogs this will be\n            an <code>IDialogPage</code>.\n @param targetPage\n            the target page. In the JFace provided dialogs this will be an\n            <code>IDialogPage</code>.\n"
" Public field that dictates if the page change will successfully change.\n \n Set this field to <code>false</code> to prevent the page from changing.\n   \n Default value is <code>true</code>.\n"
" Factory for control animators used by JFace to animate the display of an SWT\n Control. Through the use of the method\n {@link org.eclipse.jface.util.Policy#setAnimatorFactory(AnimatorFactory)} \n a new type of animator factory can be plugged into JFace.\n \n @since 3.2\n @deprecated as of 3.3, this class is no longer used.\n"
" Creates a new ControlAnimator for use by JFace in animating\n the display of an SWT Control. <p>\n Subclasses should override this method.\n \n @param control the SWT Control to de displayed \n @return the ControlAnimator.\n @since 3.2\n"
""
" A listener which is notified when the current page of a multi-page dialog is\n changing. Use this listener to perform long-running work that should only be\n executed once, when the page is in the process of changing, rather then\n during validation of page controls.\n \n @see PageChangingEvent\n @since 3.3\n"
" Handle the an <code>IDialogPage</code> changing.\n \n The <code>doit</code> field of the <code>PageChangingEvent</code>\n must be set to false to prevent the page from changing.\n \n @param event\n            event object describing the change\n"
" The IDialogBlockedHandler is the handler used by\n JFace to provide extra information when a\n blocking has occured. There is one static instance\n of this class used by WizardDialog and ModalContext.\n @see org.eclipse.core.runtime.IProgressMonitorWithBlocking#clearBlocked()\n @see  org.eclipse.core.runtime.IProgressMonitorWithBlocking#setBlocked(IStatus)\n @see WizardDialog\n @since 3.0\n"
" The blockage has been cleared. Clear the\n extra information and resume.\n"
" A blockage has occured. Show the blockage and \n forward any actions to blockingMonitor. \n <b>NOTE:</b> This will open any blocked notification immediately\n even if there is a modal shell open.\n \n @param parentShell The shell this is being sent from. If the parent\n shell is <code>null</code> the behavior will be the same as\n IDialogBlockedHandler#showBlocked(IProgressMonitor, IStatus, String)\n \n @param blocking The monitor to forward to. This is most\n important for calls to <code>cancel()</code>.\n @param blockingStatus The status that describes the blockage\n @param blockedName The name of the locked operation.\n @see IDialogBlockedHandler#showBlocked(IProgressMonitor, IStatus, String)\n"
" A blockage has occured. Show the blockage when there is \n no longer any modal shells in the UI and forward any actions \n to blockingMonitor. \n \n <b>NOTE:</b> As no shell has been specified this method will\n not open any blocked notification until all other modal shells\n have been closed.\n \n @param blocking The monitor to forward to. This is most\n important for calls to <code>cancel()</code>.\n @param blockingStatus The status that describes the blockage\n @param blockedName The name of the locked operation.\n"
" A dialog for showing messages to the user.\n <p>\n This concrete dialog class can be instantiated as is, or further subclassed\n as required.\n </p>\n"
""
""
""
" Creates and returns the contents of an area of the dialog which appears\n below the message and above the button bar.\n <p>\n The default implementation of this framework method returns\n <code>null</code>. Subclasses may override.\n </p>\n \n @param parent\n            parent composite to contain the custom area\n @return the custom area control, or <code>null</code>\n"
" This implementation of the <code>Dialog</code> framework method creates\n and lays out a composite and calls <code>createMessageArea</code> and\n <code>createCustomArea</code> to populate it. Subclasses should\n override <code>createCustomArea</code> to add contents below the\n message.\n"
" Gets a button in this dialog's button bar.\n \n @param index\n            the index of the button in the dialog's button bar\n @return a button in the dialog's button bar\n"
" Returns the minimum message area width in pixels This determines the\n minimum width of the dialog.\n <p>\n Subclasses may override.\n </p>\n \n @return the minimum message area width (in pixels)\n"
" Handle the shell close. Set the return code to <code>SWT.DEFAULT</code>\n as there has been no explicit close by the user.\n \n @see org.eclipse.jface.window.Window#handleShellCloseEvent()\n"
" Opens this message dialog, creating it first if it has not yet been created.\n <p>\n This method waits until the dialog is closed by the end user, and then it\n returns the dialog's return code. The dialog's return code is either the\n index of the button the user pressed, or {@link SWT#DEFAULT} if the dialog\n has been closed by other means.\n </p>\n\n @return the return code\n\n @see org.eclipse.jface.window.Window#open()\n"
" Convenience method to open a simple dialog as specified by the\n <code>kind</code> flag.\n \n @param kind\n            the kind of dialog to open, one of {@link #ERROR},\n            {@link #INFORMATION}, {@link #QUESTION}, {@link #WARNING},\n            {@link #CONFIRM}, or {@link #QUESTION_WITH_CANCEL}.\n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param style\n            {@link SWT#NONE} for a default dialog, or {@link SWT#SHEET} for\n            a dialog with sheet behavior\n @return <code>true</code> if the user presses the OK or Yes button,\n         <code>false</code> otherwise\n @since 3.5\n"
" Convenience method to open a simple confirm (OK/Cancel) dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @return <code>true</code> if the user presses the OK button,\n         <code>false</code> otherwise\n"
" Convenience method to open a standard error dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n"
" Convenience method to open a standard information dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n"
" Convenience method to open a simple Yes/No question dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @return <code>true</code> if the user presses the Yes button,\n         <code>false</code> otherwise\n"
" Convenience method to open a standard warning dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n"
""
" Return whether or not we should apply the workaround where we take focus\n for the default button or if that should be determined by the dialog. By\n default only return true if the custom area is a label or CLabel that\n cannot take focus.\n \n @return boolean\n"
""
" An accessor for the labels to use on the buttons.\n \n @return The button labels to used; never <code>null</code>.\n"
" An accessor for the index of the default button in the button array.\n \n @return The default button index.\n"
" A mutator for the array of buttons in the button bar.\n \n @param buttons\n            The buttons in the button bar; must not be <code>null</code>.\n"
" A mutator for the button labels.\n \n @param buttonLabels\n            The button labels to use; must not be <code>null</code>.\n"
" Create a message dialog. Note that the dialog will have no visual\n representation (no widgets) until it is told to open.\n <p>\n The labels of the buttons to appear in the button bar are supplied in\n this constructor as an array. The <code>open</code> method will return\n the index of the label in this array corresponding to the button that was\n pressed to close the dialog.\n </p>\n <p>\n <strong>Note:</strong> If the dialog was dismissed without pressing\n a button (ESC key, close box, etc.) then {@link SWT#DEFAULT} is returned.\n Note that the <code>open</code> method blocks.\n </p>\n\n @param parentShell\n            the parent shell\n @param dialogTitle\n            the dialog title, or <code>null</code> if none\n @param dialogTitleImage\n            the dialog title image, or <code>null</code> if none\n @param dialogMessage\n            the dialog message\n @param dialogImageType\n            one of the following values:\n            <ul>\n            <li><code>MessageDialog.NONE</code> for a dialog with no\n            image</li>\n            <li><code>MessageDialog.ERROR</code> for a dialog with an\n            error image</li>\n            <li><code>MessageDialog.INFORMATION</code> for a dialog\n            with an information image</li>\n            <li><code>MessageDialog.QUESTION </code> for a dialog with a\n            question image</li>\n            <li><code>MessageDialog.WARNING</code> for a dialog with a\n            warning image</li>\n            </ul>\n @param dialogButtonLabels\n            an array of labels for the buttons in the button bar\n @param defaultIndex\n            the index in the button label array of the default button\n"
" Constant for no image (value 0).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n"
" Constant for the error image, or a simple dialog with the error image and a single OK button (value 1).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
" Constant for the info image, or a simple dialog with the info image and a single OK button (value 2).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
" Constant for the question image, or a simple dialog with the question image and Yes/No buttons (value 3).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
" Constant for the warning image, or a simple dialog with the warning image and a single OK button (value 4).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
" Constant for a simple dialog with the question image and OK/Cancel buttons (value 5).\n \n @see #open(int, Shell, String, String, int)\n @since 3.5\n"
" Constant for a simple dialog with the question image and Yes/No/Cancel buttons (value 6).\n \n @see #open(int, Shell, String, String, int)\n @since 3.5\n"
" <p>\n A message dialog which also allows the user to adjust a toggle setting. If a\n preference store is provided and the user selects the toggle, then the user's\n answer (yes/ok or no) will be persisted in the store. If no store is\n provided, then this information can be queried after the dialog closes.\n </p>\n <p>\n This type of dialog should be used whenever you want to user to be able to\n avoid being prompted in the future. It is <strong>strongly </strong>\n recommended that a cancel option be provided, so that the user has the option\n of making the decision at a later point in time. The semantic for a cancel\n button should be to cancel the operation (if it has not yet started), or stop\n the operation (if it has already started).\n </p>\n <p>\n It is the responsibility of the developer to provide a mechanism for the user\n to change this preference at some later point in time (e.g., through a\n preference page).\n </p>\n \n @since 3.0\n"
" Convenience method to open a simple dialog as specified by the <code>kind</code> flag,\n with a "don't show again' toggle.\n\n @param kind \n            the kind of dialog to open, one of {@link #ERROR},\n            {@link #INFORMATION}, {@link #QUESTION}, {@link #WARNING},\n            {@link #CONFIRM}, or {#QUESTION_WITH_CANCEL}.\n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @param style\n            {@link SWT#NONE} for a default dialog, or {@link SWT#SHEET} for\n            a dialog with sheet behavior\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n @since 3.5\n"
" Convenience method to open a standard error dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a standard information dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n \n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a simple confirm (OK/Cancel) dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a standard warning dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a simple question Yes/No/Cancel dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" Convenience method to open a simple Yes/No question dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n @param store\n            the IPreference store in which the user's preference should be\n            persisted; <code>null</code> if you don't want it persisted\n            automatically.\n @param key\n            the key to use when persisting the user's preference;\n            <code>null</code> if you don't want it persisted.\n \n @return the dialog, after being closed by the user, which the client can\n         only call <code>getReturnCode()</code> or\n         <code>getToggleState()</code>\n"
" @see org.eclipse.jface.dialogs.Dialog#buttonPressed(int)\n"
" @see Dialog#createButtonBar(Composite)\n"
" @see Dialog#createDialogArea(Composite)\n"
" Creates a toggle button without any text or state.  The text and state\n will be created by <code>createDialogArea</code>. \n \n @param parent\n            The composite in which the toggle button should be placed;\n            must not be <code>null</code>.\n @return The added toggle button; never <code>null</code>.\n"
" Returns the toggle button.\n \n @return the toggle button\n"
" An accessor for the current preference store for this dialog.\n \n @return The preference store; this value may be <code>null</code> if no\n         preference is being used.\n"
" An accessor for the current key of the toggle preference.\n \n @return The preference key; this value may be <code>null</code> if no\n         preference is being used.\n"
" Returns the toggle state. This can be called even after the dialog is\n closed.\n \n @return <code>true</code> if the toggle button is checked,\n         <code>false</code> if not\n"
" A mutator for the key of the preference to be modified by the toggle\n button.\n \n @param prefKey\n            The prefKey to set. If this value is <code>null</code>,\n            then no preference will be modified.\n"
" A mutator for the preference store to be modified by the toggle button.\n \n @param prefStore\n            The prefStore to set. If this value is <code>null</code>,\n            then no preference will be modified.\n"
" A mutator for the button providing the toggle option. If the button\n exists, then it will automatically get the text set to the current toggle\n message, and its selection state set to the current selection state.\n \n @param button\n            The button to use; must not be <code>null</code>.\n"
" A mutator for the text on the toggle button. The button will\n automatically get updated with the new text, if it exists.\n \n @param message\n            The new text of the toggle button; if it is <code>null</code>,\n            then used the default toggle message.\n"
" A mutator for the state of the toggle button. This method will update the\n button, if it exists.\n \n @param toggleState\n            The desired state of the toggle button (<code>true</code>\n            means the toggle should be selected).\n"
" Creates a message dialog with a toggle. See the superclass constructor\n for info on the other parameters.\n \n @param parentShell\n            the parent shell\n @param dialogTitle\n            the dialog title, or <code>null</code> if none\n @param image\n            the dialog title image, or <code>null</code> if none\n @param message\n            the dialog message\n @param dialogImageType\n            one of the following values:\n            <ul>\n            <li><code>MessageDialog.NONE</code> for a dialog with no\n            image</li>\n            <li><code>MessageDialog.ERROR</code> for a dialog with an\n            error image</li>\n            <li><code>MessageDialog.INFORMATION</code> for a dialog\n            with an information image</li>\n            <li><code>MessageDialog.QUESTION </code> for a dialog with a\n            question image</li>\n            <li><code>MessageDialog.WARNING</code> for a dialog with a\n            warning image</li>\n            </ul>\n @param dialogButtonLabels\n            an array of labels for the buttons in the button bar\n @param defaultIndex\n            the index in the button label array of the default button\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n  \n"
" The value of the preference when the user has asked that the answer to\n the question always be "okay" or "yes".\n"
" The value of the preference when the user has asked that the answer to\n the question always be "no".\n"
" The value of the preference when the user wishes to prompted for an\n answer every time the question is to be asked.\n"
" A listener which is notified when the current page of the multi-page dialog\n is changed.\n \n @see IPageChangeProvider\n @see PageChangedEvent\n \n @since 3.1\n"
" Notifies that the selected page has changed.\n \n @param event\n            event object describing the change\n"
" A simple input dialog for soliciting an input string from the user.\n <p>\n This concrete dialog class can be instantiated as is, or further subclassed as\n required.\n </p>\n"
""
""
""
""
" Returns the error message label.\n \n @return the error message label\n @deprecated use setErrorMessage(String) instead\n"
" Returns the ok button.\n \n @return the ok button\n"
" Returns the text area.\n \n @return the text area\n"
" Returns the validator.\n \n @return the validator\n"
" Returns the string typed into this input dialog.\n \n @return the input string\n"
" Validates the input.\n <p>\n The default implementation of this framework method delegates the request\n to the supplied input validator object; if it finds the input invalid,\n the error message is displayed in the dialog's message line. This hook\n method is called whenever the text changes in the input field.\n </p>\n"
" Sets or clears the error message.\n If not <code>null</code>, the OK button is disabled.\n \n @param errorMessage\n            the error message, or <code>null</code> to clear\n @since 3.0\n"
" Returns the style bits that should be used for the input text field.\n Defaults to a single line entry. Subclasses may override.\n \n @return the integer style bits that should be used when creating the\n         input text\n \n @since 3.4\n"
" Creates an input dialog with OK and Cancel buttons. Note that the dialog\n will have no visual representation (no widgets) until it is told to open.\n <p>\n Note that the <code>open</code> method blocks for input dialogs.\n </p>\n \n @param parentShell\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n @param dialogTitle\n            the dialog title, or <code>null</code> if none\n @param dialogMessage\n            the dialog message, or <code>null</code> if none\n @param initialValue\n            the initial input value, or <code>null</code> if none\n            (equivalent to the empty string)\n @param validator\n            an input validator, or <code>null</code> if none\n"
"\nProvides support for managing resources such as SWT\nfonts and images.\n<h2>\nPackage Specification</h2>\nThis package contains support for managing resources, including:\n<ul>\n<li>\nfont registries (<tt>FontRegistry</tt>) - for hanging on to the SWT font\nobjects needed by an application</li>\n\n<li>\ncolor registries (<tt>ColorRegistry</tt>) - for hanging on to the SWT color \nobjects needed by an application</li>\n\n<li>\nimage registries (<tt>ImageRegistry</tt>) - for hanging on to the SWT image\nobjects needed by an application</li>\n\n<li>\nimage descriptors (<tt>ImageDescriptor</tt>) - surrogate object for creating\nSWT images</li>\n\n<li>\nstring conversion (<tt>StringConverter</tt>) - for parsing property files</li>\n</ul>\nThe JFace resources module is an independent JFace module requiring a basic\nknowledge of SWT and the JFace property change event mechanism. Familiarity\nwith other JFace modules is not required.\n<p>Image descriptors are objects that knows how to create an image on demand.\nThey serve as a lightweight representation of images in situations where\nno SWT display exists yet, and are used mainly in conjunction with image\nregistries. This package contains the image descriptor framework, which\nis a simple hierarchy rooted at the abstract class <tt>ImageDescriptor</tt>.\nThe framework includes abstract subclasses for composing images (<tt>CompositeImageDescriptor</tt>)\nas well as a ready-made concrete subclass for loading images from files\n(<tt>FileImageDescriptor</tt>).\n<p>The class <tt>JFaceResources</tt> maintains global state on behalf of\nJFace itself consisting of JFace's own image registry, font registry, resource\nbundle, and preference store.\n<br>&nbsp;\n"
" JFaceColors is the class that stores references\n to all of the colors used by JFace.\n"
" @param display the display the color is from\n @return the Color used for banner backgrounds\n @see SWT#COLOR_LIST_BACKGROUND\n @see Display#getSystemColor(int)\n"
" @param display the display the color is from\n @return the Color used for banner foregrounds\n @see SWT#COLOR_LIST_FOREGROUND\n @see Display#getSystemColor(int)\n"
" @param display the display the color is from\n @return the background Color for widgets that display errors.\n @see SWT#COLOR_WIDGET_BACKGROUND\n @see Display#getSystemColor(int)\n"
" @param display the display the color is from\n @return the border Color for widgets that display errors.\n @see SWT#COLOR_WIDGET_DARK_SHADOW\n @see Display#getSystemColor(int)\n"
" @param display the display the color is from\n @return the default color to use for displaying errors.\n @see ColorRegistry#get(String)\n @see JFacePreferences#ERROR_COLOR\n"
" @param display the display the color is from\n @return the default color to use for displaying hyperlinks.\n @see ColorRegistry#get(String)\n @see JFacePreferences#HYPERLINK_COLOR\n"
" @param display the display the color is from\n @return the default color to use for displaying active hyperlinks.\n @see ColorRegistry#get(String)\n @see JFacePreferences#ACTIVE_HYPERLINK_COLOR\n"
" Clear out the cached color for name. This is generally\n done when the color preferences changed and any cached colors\n may be disposed. Users of the colors in this class should add a IPropertyChangeListener\n to detect when any of these colors change.\n @param colorName name of the color\n \n @deprecated JFaceColors no longer maintains a cache of colors.  This job \n is now handled by the ColorRegistry.\n"
" Dispose of all allocated colors. Called on workbench\n shutdown.\n \n @deprecated JFaceColors no longer maintains a cache of colors.  This job \n is now handled by the ColorRegistry.\n"
" Set the foreground and background colors of the\n control to the specified values. If the values are\n null than ignore them. \n @param control the control the foreground and/or background color should be set\n \n @param foreground Color the foreground color (maybe <code>null</code>)\n @param background Color the background color (maybe <code>null</code>)\n"
""
" An image descriptor is an object that knows how to create\n an SWT image.  It does not hold onto images or cache them,\n but rather just creates them on demand.  An image descriptor\n is intended to be a lightweight representation of an image\n that can be manipulated even when no SWT display exists.\n <p>\n This package defines a concrete image descriptor implementation\n which reads an image from a file (<code>FileImageDescriptor</code>).\n It also provides abstract framework classes (this one and\n <code>CompositeImageDescriptor</code>) which may be subclassed to define\n news kinds of image descriptors.\n </p>\n <p>\n Using this abstract class involves defining a concrete subclass\n and providing an implementation for the <code>getImageData</code>\n method.\n </p>\n <p>\n There are two ways to get an Image from an ImageDescriptor. The method\n createImage will always return a new Image which must be disposed by\n the caller. Alternatively, createResource() returns a shared\n Image. When the caller is done with an image obtained from createResource,\n they must call destroyResource() rather than disposing the Image directly.\n The result of createResource() can be safely cast to an Image. \n </p>\n\n @see org.eclipse.swt.graphics.Image\n"
" Creates and returns a new image descriptor from a file.\n Convenience method for\n <code>new FileImageDescriptor(location,filename)</code>.\n\n @param location the class whose resource directory contain the file\n @param filename the file name\n @return a new image descriptor\n"
" Creates and returns a new image descriptor given ImageData\n describing the image.\n \n @since 3.1 \n\n @param data contents of the image\n @return newly created image descriptor\n"
" Creates and returns a new image descriptor for the given image. Note \n that disposing the original Image will cause the descriptor to become invalid.\n \n @since 3.1 \n\n @param img image to create\n @return a newly created image descriptor\n"
" Creates an ImageDescriptor based on the given original descriptor, but with additional\n SWT flags.\n  \n <p>\n Note that this sort of ImageDescriptor is slower and consumes more resources than\n a regular image descriptor. It will also never generate results that look as nice as\n a hand-drawn image. Clients are encouraged to supply their own disabled/grayed/etc. images\n rather than using a default image and transforming it.\n </p>\n \n @param originalImage image to transform\n @param swtFlags any flag that can be passed to the flags argument of Image#Image(Device, Image, int)\n @return an ImageDescriptor that creates new images by transforming the given image descriptor\n \n @see Image#Image(Device, Image, int) \n @since 3.1 \n\n"
" Creates and returns a new image descriptor for the given image. This\n method takes the Device that created the Image as an argument, allowing\n the original Image to be reused if the descriptor is asked for another\n Image on the same device. Note that disposing the original Image will \n cause the descriptor to become invalid.\n \n @deprecated use {@link ImageDescriptor#createFromImage(Image)}\n @since 3.1 \n\n @param img image to create\n @param theDevice the device that was used to create the Image\n @return a newly created image descriptor\n"
" Creates and returns a new image descriptor from a URL.\n\n @param url The URL of the image file.\n @return a new image descriptor\n"
""
""
" Creates and returns a new SWT image for this image descriptor. Note that\n each call returns a new SWT image object. The returned image must be\n explicitly disposed using the image's dispose call. The image will not be\n automatically garbage collected. A default image is returned in the event\n of an error.\n \n <p>\n Note: this method differs from createResource(Device) in that the returned image\n must be disposed directly, whereas an image obtained from createResource(...)\n must be disposed by calling destroyResource(...). It is not possible to \n mix-and-match. If you obtained the Image from this method, you must not dispose\n it by calling destroyResource. Clients are encouraged to use \n create/destroyResource and downcast the result to Image rather than using \n createImage.\n </p>\n \n <p>\n Note: it is still possible for this method to return <code>null</code>\n in extreme cases, for example if SWT runs out of image handles.\n </p>\n \n @return a new image or <code>null</code> if the image could not be\n         created\n"
" Creates and returns a new SWT image for this image descriptor. The\n returned image must be explicitly disposed using the image's dispose\n call. The image will not be automatically garbage collected. In the event\n of an error, a default image is returned if\n <code>returnMissingImageOnError</code> is true, otherwise\n <code>null</code> is returned.\n <p>\n Note: Even if <code>returnMissingImageOnError</code> is true, it is\n still possible for this method to return <code>null</code> in extreme\n cases, for example if SWT runs out of image handles.\n </p>\n \n @param returnMissingImageOnError\n            flag that determines if a default image is returned on error\n @return a new image or <code>null</code> if the image could not be\n         created\n"
" Creates and returns a new SWT image for this image descriptor. The\n returned image must be explicitly disposed using the image's dispose\n call. The image will not be automatically garbage collected. A default\n image is returned in the event of an error.\n <p>\n Note: it is still possible for this method to return <code>null</code>\n in extreme cases, for example if SWT runs out of image handles.\n </p>\n \n @param device\n            the device on which to create the image\n @return a new image or <code>null</code> if the image could not be\n         created\n @since 2.0\n"
" Creates and returns a new SWT image for this image descriptor. The\n returned image must be explicitly disposed using the image's dispose\n call. The image will not be automatically garbage collected. In the even\n of an error, a default image is returned if\n <code>returnMissingImageOnError</code> is true, otherwise\n <code>null</code> is returned.\n <p>\n Note: Even if <code>returnMissingImageOnError</code> is true, it is\n still possible for this method to return <code>null</code> in extreme\n cases, for example if SWT runs out of image handles.\n </p>\n \n @param returnMissingImageOnError\n            flag that determines if a default image is returned on error\n @param device\n            the device on which to create the image\n @return a new image or <code>null</code> if the image could not be\n         created\n @since 2.0\n"
" Creates and returns a new SWT <code>ImageData</code> object\n for this image descriptor.\n Note that each call returns a new SWT image data object.\n <p>\n This framework method is declared public so that it is\n possible to request an image descriptor's image data without\n creating an SWT image object.\n </p>\n <p>\n Returns <code>null</code> if the image data could not be created.\n </p>\n\n @return a new image data or <code>null</code>\n"
" Returns the shared image descriptor for a missing image.\n\n @return the missing image descriptor\n"
" Constructs an image descriptor.\n"
"\n A small red square used to warn that an image cannot be created.\n <p>\n"
" A color registry maintains a mapping between symbolic color names and SWT \n <code>Color</code>s.\n <p>\n A color registry owns all of the <code>Color</code> objects registered with \n it, and automatically disposes of them when the SWT Display that creates the \n <code>Color</code>s is disposed. Because of this, clients do not need to \n (indeed, must not attempt to) dispose of <code>Color</code> objects \n themselves.\n </p>\n <p>\n Methods are provided for registering listeners that will be kept\n apprised of changes to list of registed colors.\n </p>\n <p>\n Clients may instantiate this class (it was not designed to be subclassed).\n </p>\n \n @since 3.0\n @noextend This class is not intended to be subclassed by clients.\n"
" Returns the <code>color</code> associated with the given symbolic color \n name, or <code>null</code> if no such definition exists.\n \n @param symbolicName symbolic color name\n @return the <code>Color</code> or <code>null</code>\n"
""
" Returns the color data associated with the given symbolic color name.\n\n @param symbolicName symbolic color name.\n @return the <code>RGB</code> data, or <code>null</code> if the symbolic name\n is not valid.\n"
" Returns the color descriptor associated with the given symbolic color\n name. As of 3.4 if this color is not defined then an unspecified color\n is returned. Users that wish to ensure a reasonable default value should\n use {@link #getColorDescriptor(String, ColorDescriptor)} instead.\n \n @since 3.1\n \n @param symbolicName\n @return the color descriptor associated with the given symbolic color\n         name or an unspecified sentinel.\n"
" Returns the color descriptor associated with the given symbolic color\n name. If this name does not exist within the registry the supplied\n default value will be used.\n \n @param symbolicName\n @param defaultValue\n @return the color descriptor associated with the given symbolic color\n         name or the default\n @since 3.4\n"
""
""
" Adds (or replaces) a color to this color registry under the given \n symbolic name.\n <p>\n A property change event is reported whenever the mapping from a symbolic\n name to a color changes. The source of the event is this registry; the\n property name is the symbolic color name.\n </p>\n \n @param symbolicName the symbolic color name\n @param colorData an <code>RGB</code> object\n"
" Create a new instance of the receiver that is hooked to the current \n display.\n \n @see org.eclipse.swt.widgets.Display#getCurrent()\n"
" Create a new instance of the receiver.\n \n @param display the <code>Display</code> to hook into.\n"
" Create a new instance of the receiver.\n \n @param display the <code>Display</code> to hook into\n @param cleanOnDisplayDisposal\n            whether all fonts allocated by this <code>ColorRegistry</code>\n            should be disposed when the display is disposed\n @since 3.1\n"
" This registries <code>Display</code>. All colors will be allocated using \n it.\n"
" Runnable that cleans up the manager on disposal of the display.\n"
" Lightweight descriptor for an SWT color. Each ColorDescriptor will create a particular SWT \n Color on demand. This object will be compared so hashCode(...) and equals(...) must \n return meaningful values.\n \n @since 3.1\n"
" Creates a ColorDescriptor from an existing Color, given the Device associated\n with the original Color. This is the usual way to convert a Color into\n a ColorDescriptor. Note that the returned ColorDescriptor depends on the\n original Color, and disposing the Color will invalidate the ColorDescriptor.\n \n @deprecated use {@link ColorDescriptor#createFrom(Color)}\n \n @since 3.1\n\n @param toCreate Color to convert into a ColorDescriptor.\n @param originalDevice this must be the same Device that was passed into the\n original Color's constructor.\n @return a newly created ColorDescriptor that describes the given Color.\n"
" Creates a ColorDescriptor from an existing color. \n \n The returned ColorDescriptor depends on the original Color. Disposing\n the original colour while the color descriptor is still in use may cause \n SWT to throw a graphic disposed exception.\n \n @since 3.1\n\n @param toCreate Color to generate a ColorDescriptor from\n @return a newly created ColorDescriptor\n"
" Returns a color descriptor for the given RGB values\n @since 3.1 \n\n @param toCreate RGB values to create\n @return a new ColorDescriptor\n"
" Returns the Color described by this descriptor.\n \n @param device SWT device on which to allocate the Color\n @return a newly allocated SWT Color object (never null)\n @throws DeviceResourceException if unable to allocate the Color\n"
" Undoes whatever was done by createColor. \n \n @since 3.1 \n\n @param toDestroy a Color that was previously allocated by an equal ColorDescriptor\n"
""
""
""
" An image registry maintains a mapping between symbolic image names \n and SWT image objects or special image descriptor objects which\n defer the creation of SWT image objects until they are needed.\n <p>\n An image registry owns all of the image objects registered\n with it, and automatically disposes of them when the SWT Display\n that creates the images is disposed. Because of this, clients do not \n need to (indeed, must not attempt to) dispose of these images themselves.\n </p>\n <p>\n Clients may instantiate this class (it was not designed to be subclassed).\n </p>\n <p>\n Unlike the FontRegistry, it is an error to replace images. As a result\n there are no events that fire when values are changed in the registry\n </p>\n @noextend This class is not intended to be subclassed by clients.\n"
" Returns the image associated with the given key in this registry, \n or <code>null</code> if none.\n \n @param key the key\n @return the image, or <code>null</code> if none\n"
" Returns the descriptor associated with the given key in this registry, \n or <code>null</code> if none.\n\n @param key the key\n @return the descriptor, or <code>null</code> if none\n @since 2.1\n"
" Adds (or replaces) an image descriptor to this registry. The first time\n this new entry is retrieved, the image descriptor's image will be computed \n (via </code>ImageDescriptor.createImage</code>) and remembered. \n This method replaces an existing image descriptor associated with the \n given key, but fails if there is a real image associated with it.\n\n @param key the key\n @param descriptor the ImageDescriptor\n @exception IllegalArgumentException if the key already exists\n"
" Adds an image to this registry.  This method fails if there\n is already an image or descriptor for the given key.\n <p>\n Note that an image registry owns all of the image objects registered\n with it, and automatically disposes of them when the SWT Display is disposed. \n Because of this, clients must not register an image object\n that is managed by another object.\n </p>\n\n @param key the key\n @param image the image, should not be <code>null</code>\n @exception IllegalArgumentException if the key already exists\n"
" Removes an image from this registry.  \n If an SWT image was allocated, it is disposed.\n This method has no effect if there is no image or descriptor for the given key.\n @param key the key\n"
" Disposes this image registry, disposing any images\n that were allocated for it, and clearing its entries.\n \n @since 3.1\n"
" Creates an empty image registry.\n <p>\n There must be an SWT Display created in the current \n thread before calling this method.\n </p>\n"
" Creates an empty image registry using the given resource manager to allocate images.\n \n @param manager the resource manager used to allocate images\n \n @since 3.1\n"
" Creates an empty image registry.\n \n @param display this <code>Display</code> must not be \n        <code>null</code> and must not be disposed in order\n        to use this registry\n"
" A local registry that shares its resources with some global registry.\n LocalResourceManager is typically used to safeguard against leaks. Clients\n can use a nested registry to allocate and deallocate resources in the\n global registry. Calling dispose() on the nested registry will deallocate\n everything allocated for the nested registry without affecting the rest\n of the global registry.\n <p>\n A nested registry can be used to manage the resources for, say, a dialog\n box.\n </p>\n @since 3.1\n"
""
""
""
""
" Creates a local registry that delegates to the given global registry\n for all resource allocation and deallocation. \n \n @param parentRegistry global registry \n"
" Creates a local registry that wraps the given global registry. Anything\n allocated by this registry will be automatically cleaned up with the given\n control is disposed. Note that registries created in this way should not\n be used to allocate any resource that must outlive the given control.\n \n @param parentRegistry global registry that handles resource allocation\n @param owner control whose disposal will trigger cleanup of everything \n in the registry.\n"
" Manages SWT resources for a particular device.\n  \n <p>\n IMPORTANT: in most cases clients should use a <code>LocalResourceManager</code> instead of a\n <code>DeviceResourceManager</code>. To create a resource manager on a particular display, \n use <code>new LocalResourceManager(JFaceResources.getResources(myDisplay))</code>.\n <code>DeviceResourceManager</code> should only be used directly when managing\n resources for a device other than a Display (such as a printer).  \n </p>\n \n @see LocalResourceManager\n \n @since 3.1\n"
""
""
""
""
""
" Creates a new registry for the given device.\n \n @param device device to manage\n"
" Thrown when allocation of an SWT device resource fails\n \n @since 3.1\n"
" Returns the cause of this throwable or <code>null</code> if the\n cause is nonexistent or unknown. \n \n @return the cause or <code>null</code>\n @since 3.1\n"
" Creates a DeviceResourceException indicating an error attempting to\n create a resource and an embedded low-level exception describing the cause \n \n @param missingResource\n @param cause cause of the exception (or null if none)\n"
" Creates a DeviceResourceException indicating an error attempting to\n create a resource \n \n @param missingResource\n"
" Instances of this class can allocate and dispose SWT resources. Each\n instance describes a particular resource (such as a Color, Font, or Image)\n and can create and destroy that resource on demand. DeviceResourceDescriptors\n are managed by a ResourceRegistry.\n \n @see org.eclipse.jface.resource.ResourceManager\n \n @since 3.1\n"
" Creates the resource described by this descriptor\n \n @since 3.1 \n\n @param device the Device on which to allocate the resource\n @return the newly allocated resource (not null)\n @throws DeviceResourceException if unable to allocate the resource\n"
" Undoes everything that was done by a previous call to create(...), given\n the object that was returned by create(...).\n \n @since 3.1 \n\n @param previouslyCreatedObject an object that was returned by an equal \n descriptor in a previous call to createResource(...).\n"
""
" Lightweight descriptor for a font. Creates the described font on demand.\n Subclasses can implement different ways of describing a font. These objects\n will be compared, so hashCode(...) and equals(...) must return something \n meaningful.\n \n @since 3.1\n"
" Creates a FontDescriptor that describes an existing font. The resulting\n descriptor depends on the Font. Disposing the Font while the descriptor\n is still in use may throw a graphic disposed exception.\n \n @since 3.1\n\n @deprecated use {@link FontDescriptor#createFrom(Font)}\n\n @param font a font to describe\n @param originalDevice must be the same Device that was passed into\n the font's constructor when it was first created.\n @return a newly created FontDescriptor.\n"
" Creates a FontDescriptor that describes an existing font. The resulting\n descriptor depends on the original Font, and disposing the original Font\n while the descriptor is still in use may cause SWT to throw a graphic\n disposed exception.\n \n @since 3.1\n\n @param font font to create\n @return a newly created FontDescriptor that describes the given font\n"
" Creates a new FontDescriptor given the an array of FontData that describes \n the font.\n \n @since 3.1\n\n @param data an array of FontData that describes the font (will be passed into\n the Font's constructor)\n @return a FontDescriptor that describes the given font\n"
" Creates a new FontDescriptor given the associated FontData\n \n @param data FontData describing the font to create\n @return a newly created FontDescriptor\n"
" Creates a new FontDescriptor given an OS-specific font name, height, and style.\n \n @see Font#Font(org.eclipse.swt.graphics.Device, java.lang.String, int, int)\n\n @param name os-specific font name\n @param height height (pixels)\n @param style a bitwise combination of NORMAL, BOLD, ITALIC \n @return a new FontDescriptor\n"
" Returns the set of FontData associated with this font. Modifying the elements\n in the returned array has no effect on the original FontDescriptor.\n \n @return the set of FontData associated with this font\n @since 3.3\n"
" Returns an array of FontData containing copies of the FontData\n from the original. \n \n @param original array to copy\n @return a deep copy of the original array\n @since 3.3\n"
" Returns a copy of the original FontData\n \n @param next FontData to copy\n @return a copy of the given FontData\n @since 3.3\n"
" Returns a FontDescriptor that is equivalent to the reciever, but uses\n the given style bits. \n \n <p>Does not modify the reciever.</p>\n \n @param style a bitwise combination of SWT.NORMAL, SWT.ITALIC and SWT.BOLD\n @return a new FontDescriptor with the given style\n \n @since 3.3\n"
" <p>Returns a FontDescriptor that is equivalent to the reciever, but\n has the given style bits, in addition to any styles the reciever already has.</p>\n \n <p>Does not modify the reciever.</p>\n \n @param style a bitwise combination of SWT.NORMAL, SWT.ITALIC and SWT.BOLD\n @return a new FontDescriptor with the given additional style bits\n @since 3.3\n"
" <p>Returns a new FontDescriptor that is equivalent to the reciever, but\n has the given height.</p>\n \n <p>Does not modify the reciever.</p>\n \n @param height a height, in points\n @return a new FontDescriptor with the height, in points\n @since 3.3\n"
" <p>Returns a FontDescriptor that is equivalent to the reciever, but whose height\n is larger by the given number of points.</p>\n \n <p>Does not modify the reciever.</p>\n \n @param heightDelta a change in height, in points. Negative values will return smaller\n fonts. \n @return a FontDescriptor whose height differs from the reciever by the given number\n of points. \n @since 3.3\n"
" Creates the Font described by this descriptor. \n \n @since 3.1 \n\n @param device device on which to allocate the font\n @return a newly allocated Font (never null)\n @throws DeviceResourceException if unable to allocate the Font\n"
" Deallocates anything that was allocated by createFont, given a font\n that was allocated by an equal FontDescriptor.\n \n @since 3.1 \n\n @param previouslyCreatedFont previously allocated font\n"
""
""
""
" An exception indicating that a string value could not be\n converted into the requested data type.\n\n @see StringConverter\n"
" Creates a new exception.\n"
" Creates a new exception.\n\n @param message the message\n"
" This class manages SWT resources. It manages reference-counted instances of resources\n such as Fonts, Images, and Colors, and allows them to be accessed using descriptors.\n Everything allocated through the registry should also be disposed through the registry.\n Since the resources are shared and reference counted, they should never be disposed\n directly.\n <p>\n ResourceManager handles correct allocation and disposal of resources. It differs from \n the various JFace *Registry classes, which also map symbolic IDs onto resources. In \n general, you should use a *Registry class to map IDs onto descriptors, and use a \n ResourceManager to convert the descriptors into real Images/Fonts/etc.\n </p>\n \n @since 3.1\n"
" Returns the Device for which this ResourceManager will create resources \n \n @since 3.1\n\n @return the Device associated with this ResourceManager\n"
" Returns the resource described by the given descriptor. If the resource already\n exists, the reference count is incremented and the exiting resource is returned.\n Otherwise, a new resource is allocated. Every call to this method should have\n a corresponding call to {@link #destroy(DeviceResourceDescriptor)}.\n \n <p>If the resource is intended to live for entire lifetime of the resource manager, \n a subsequent call to {@link #destroy(DeviceResourceDescriptor)} may be omitted and the\n resource will be cleaned up when the resource manager is disposed. This pattern\n is useful for short-lived {@link LocalResourceManager}s, but should never be used \n with the global resource manager since doing so effectively leaks the resource.</p>\n \n <p>The resources returned from this method are reference counted and may be shared \n internally with other resource managers. They should never be disposed outside of the \n ResourceManager framework, or it will cause exceptions in other code that shares\n them. For example, never call {@link org.eclipse.swt.graphics.Resource#dispose()} \n on anything returned from this method.</p>\n \n <p>Callers may safely downcast the result to the resource type associated with \n the descriptor. For example, when given an ImageDescriptor, the return\n value of this method will always be an Image.</p>\n \n @since 3.1 \n\n @param descriptor descriptor for the resource to allocate\n @return the newly allocated resource (not null)\n @throws DeviceResourceException if unable to allocate the resource\n"
" Deallocates a resource previously allocated by {@link #create(DeviceResourceDescriptor)}. \n Descriptors are compared by equality, not identity. If the same resource was \n created multiple times, this may decrement a reference count rather than \n disposing the actual resource.  \n \n @since 3.1 \n\n @param descriptor identifier for the resource\n"
" <p>Returns a previously-allocated resource or allocates a new one if none\n exists yet. The resource will remain allocated for at least the lifetime\n of this resource manager. If necessary, the resource will be deallocated \n automatically when the resource manager is disposed.</p>\n \n <p>The resources returned from this method are reference counted and may be shared \n internally with other resource managers. They should never be disposed outside of the \n ResourceManager framework, or it will cause exceptions in other code that shares\n them. For example, never call {@link org.eclipse.swt.graphics.Resource#dispose()} \n on anything returned from this method.</p>\n \n <p>\n Callers may safely downcast the result to the resource type associated with \n the descriptor. For example, when given an ImageDescriptor, the return\n value of this method may be downcast to Image.\n </p>\n \n <p>\n This method should only be used for resources that should remain\n allocated for the lifetime of the resource manager. To allocate shorter-lived\n resources, manage them with <code>create</code>, and <code>destroy</code>\n rather than this method.\n </p>\n \n <p>\n This method should never be called on the global resource manager,\n since all resources will remain allocated for the lifetime of the app and\n will be effectively leaked.\n </p>\n \n @param descriptor identifier for the requested resource\n @return the requested resource. Never null.\n @throws DeviceResourceException if the resource does not exist yet and cannot\n be created for any reason.\n \n @since 3.3\n"
" <p>Creates an image, given an image descriptor. Images allocated in this manner must\n be disposed by {@link #destroyImage(ImageDescriptor)}, and never by calling \n {@link Image#dispose()}.</p>\n \n <p>\n If the image is intended to remain allocated for the lifetime of the ResourceManager,\n the call to destroyImage may be omitted and the image will be cleaned up automatically\n when the ResourceManager is disposed. This should only be done with short-lived ResourceManagers,\n as doing so with the global manager effectively leaks the resource.\n </p>\n \n @since 3.1 \n\n @param descriptor descriptor for the image to create\n @return the Image described by this descriptor (possibly shared by other equivalent\n ImageDescriptors)\n @throws DeviceResourceException if unable to allocate the Image\n"
" Creates an image, given an image descriptor. Images allocated in this manner must\n be disposed by {@link #destroyImage(ImageDescriptor)}, and never by calling \n {@link Image#dispose()}.\n \n @since 3.1 \n\n @param descriptor descriptor for the image to create\n @return the Image described by this descriptor (possibly shared by other equivalent\n ImageDescriptors)\n"
" Returns the default image that will be returned in the event that the intended\n image is missing.\n \n @since 3.1\n\n @return a default image that will be returned in the event that the intended\n image is missing.\n"
" Undoes everything that was done by {@link #createImage(ImageDescriptor)}.\n \n @since 3.1 \n\n @param descriptor identifier for the image to dispose\n"
" Allocates a color, given a color descriptor. Any color allocated in this\n manner must be disposed by calling {@link #destroyColor(ColorDescriptor)}, \n or by an eventual call to {@link #dispose()}. {@link Color#dispose()} must\n never been called directly on the returned color.\n \n @since 3.1 \n\n @param descriptor descriptor for the color to create\n @return the Color described by the given ColorDescriptor (not null)\n @throws DeviceResourceException if unable to create the color\n"
" Allocates a color, given its RGB value. Any color allocated in this\n manner must be disposed by calling {@link #destroyColor(RGB)}, \n or by an eventual call to {@link #dispose()}. {@link Color#dispose()} must\n never been called directly on the returned color.\n \n @since 3.1 \n\n @param descriptor descriptor for the color to create\n @return the Color described by the given ColorDescriptor (not null)\n @throws DeviceResourceException if unable to create the color\n"
" Undoes everything that was done by a call to {@link #createColor(RGB)}.\n \n @since 3.1 \n\n @param descriptor RGB value of the color to dispose\n"
" Returns the Font described by the given FontDescriptor. Any Font\n allocated in this manner must be deallocated by calling disposeFont(...),\n or by an eventual call to {@link #dispose()}.  The method {@link Font#dispose()}\n must never be called directly on the returned font.\n \n @since 3.1 \n\n @param descriptor description of the font to create\n @return the Font described by the given descriptor\n @throws DeviceResourceException if unable to create the font\n"
" Undoes everything that was done by a previous call to {@link #createFont(FontDescriptor)}.\n \n @since 3.1 \n\n @param descriptor description of the font to destroy\n"
" Disposes any remaining resources allocated by this manager. \n"
" Returns a previously allocated resource associated with the given descriptor, or\n null if none exists yet. \n \n @since 3.1\n\n @param descriptor descriptor to find\n @return a previously allocated resource for the given descriptor or null if none.\n"
" Causes the <code>run()</code> method of the runnable to\n be invoked just before the receiver is disposed. The runnable\n can be subsequently canceled by a call to <code>cancelDisposeExec</code>.\n \n @param r runnable to execute.\n"
" Cancels a runnable that was previously scheduled with <code>disposeExec</code>.\n Has no effect if the given runnable was not previously registered with\n disposeExec.\n \n @param r runnable to cancel\n"
""
" Abstract base class for various JFace registries.\n \n @since 3.0\n"
" Adds a property change listener to this registry.\n \n @param listener a property change listener\n"
" Disposes all currently allocated resources.\n"
"\n @return the set of keys this manager knows about.  This collection \n should be immutable.\n"
" Return whether or not the receiver has a value for the supplied key.\n \n @param key the key\n @return <code>true</code> if there is a value for this key\n"
" Fires a <code>PropertyChangeEvent</code>.\n \n @param name the name of the symbolic value that is changing.\n @param oldValue the old value.\n @param newValue the new value.\n"
" Removes the given listener from this registry. Has no affect if the\n listener is not registered.\n \n @param listener a property change listener\n"
""
" Abstract base class for image descriptors that synthesize an image from other\n images in order to simulate the effect of custom drawing. For example, this\n could be used to superimpose a red bar dexter symbol across an image to\n indicate that something was disallowed.\n <p>\n Subclasses must implement the <code>getSize</code> and <code>fill</code>\n methods. Little or no work happens until the image descriptor's image is\n actually requested by a call to <code>createImage</code> (or to\n <code>getImageData</code> directly).\n </p>\n"
" Draw the composite images.\n <p>\n Subclasses must implement this framework method to paint images within\n the given bounds using one or more calls to the <code>drawImage</code>\n framework method.\n </p>\n \n @param width\n            the width\n @param height\n            the height\n"
" Draws the given source image data into this composite image at the given\n position.\n <p>\n Call this internal framework method to superimpose another image atop\n this composite image.\n </p>\n \n @param src\n            the source image data\n @param ox\n            the x position\n @param oy\n            the y position\n"
""
" Return the transparent pixel for the receiver.\n <strong>NOTE</strong> This value is not currently in use in the \n default implementation.\n @return int\n @since 3.3\n"
" Return the size of this composite image.\n <p>\n Subclasses must implement this framework method.\n </p>\n \n @return the x and y size of the image expressed as a point object\n"
" @param imageData The imageData to set.\n @since 3.3\n"
" Constructs an uninitialized composite image.\n"
" Helper class for converting various data types to and from\n strings. Supported types include:\n <ul>\n   <li><code>boolean</code></li>\n   <li><code>int</code></li>\n   <li><code>long</code></li>\n   <li><code>float</code></li>\n   <li><code>double</code></li>\n   <li><code>org.eclipse.swt.graphics.Point</code></li>\n   <li><code>org.eclipse.swt.graphics.Rectangle</code></li>\n   <li><code>org.eclipse.swt.graphics.RGB</code></li>\n   <li><code>org.eclipse.swt.graphics.FontData</code></li>\n </ul>\n <p>\n All methods declared on this class are static. This\n class cannot be instantiated.\n </p>\n @noinstantiate This class is not intended to be instantiated by clients.\n @noextend This class is not intended to be subclassed by clients.\n"
" Breaks out space-separated words into an array of words.\n For example: <code>"no comment"</code> into an array \n <code>a[0]="no"</code> and <code>a[1]= "comment"</code>.\n\n @param value the string to be converted\n @return the list of words\n @throws DataFormatException thrown if request string could not seperated\n"
"     /**\n Breaks out space-separated words into an array of words.\n For example: <code>"no comment"</code> into an array \n <code>a[0]="no"</code> and <code>a[1]= "comment"</code>.\n Returns the given default value if the value cannot be parsed.\n\n @param value the string to be converted\n @param dflt the default value\n @return the list of words, or the default value\n"
" Converts the given value into a boolean.\n This method fails if the value does not represent a boolean.\n <p>\n Valid representations of <code>true</code> include the strings\n "<code>t</code>", "<code>true</code>", or equivalent in mixed\n or upper case.\n Similarly, valid representations of <code>false</code> include the strings\n "<code>f</code>", "<code>false</code>", or equivalent in mixed\n or upper case. \n </p>\n\n @param value the value to be converted\n @return the value as a boolean\n @exception DataFormatException if the given value does not represent\n	a boolean\n"
" Converts the given value into a boolean.\n Returns the given default value if the \n value does not represent a boolean.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as a boolean, or the default value\n"
" Converts the given value into a double.\n This method fails if the value does not represent a double.\n\n @param value the value to be converted\n @return the value as a double\n @exception DataFormatException if the given value does not represent\n	a double\n"
" Converts the given value into a double.\n Returns the given default value if the \n value does not represent a double.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as a double, or the default value\n"
" Converts the given value into a float.\n This method fails if the value does not represent a float.\n\n @param value the value to be converted\n @return the value as a float\n @exception DataFormatException if the given value does not represent\n	a float\n"
" Converts the given value into a float.\n Returns the given default value if the \n value does not represent a float.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as a float, or the default value\n"
" Converts the given value into an SWT font data object.\n This method fails if the value does not represent font data.\n <p>\n A valid font data representation is a string of the form\n <code><it>fontname</it>-<it>style</it>-<it>height</it></code> where\n <code><it>fontname</it></code> is the name of a font,\n <code><it>style</it></code> is a font style (one of\n <code>"regular"</code>, <code>"bold"</code>,\n <code>"italic"</code>, or <code>"bold italic"</code>)\n and <code><it>height</it></code> is an integer representing the\n font height. Example: <code>Times New Roman-bold-36</code>.\n </p>\n\n @param value the value to be converted\n @return the value as font data\n @exception DataFormatException if the given value does not represent\n	font data\n"
" Convert the given value into an array of SWT font data objects.\n \n @param value the font list string \n @return the value as a font list\n @since 3.0\n"
" Converts the given value into an SWT font data object.\n Returns the given default value if the \n value does not represent a font data object.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as a font data object, or the default value\n"
" Converts the given value into an int.\n This method fails if the value does not represent an int.\n\n @param value the value to be converted\n @return the value as an int\n @exception DataFormatException if the given value does not represent\n	an int\n"
" Converts the given value into an int.\n Returns the given default value if the \n value does not represent an int.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as an int, or the default value\n"
" Converts the given value into a long.\n This method fails if the value does not represent a long.\n\n @param value the value to be converted\n @return the value as a long\n @exception DataFormatException if the given value does not represent\n	a long\n"
" Converts the given value into a long.\n Returns the given default value if the \n value does not represent a long.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as a long, or the default value\n"
" Converts the given value into an SWT point.\n This method fails if the value does not represent a point.\n <p>\n A valid point representation is a string of the form\n <code><it>x</it>,<it>y</it></code> where\n <code><it>x</it></code> and <code><it>y</it></code>\n are valid ints.\n </p>\n\n @param value the value to be converted\n @return the value as a point\n @exception DataFormatException if the given value does not represent\n	a point\n"
" Converts the given value into an SWT point.\n Returns the given default value if the \n value does not represent a point.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as a point, or the default value\n"
" Converts the given value into an SWT rectangle.\n This method fails if the value does not represent a rectangle.\n <p>\n A valid rectangle representation is a string of the form\n <code><it>x</it>,<it>y</it>,<it>width</it>,<it>height</it></code>\n where <code><it>x</it></code>, <code><it>y</it></code>,\n <code><it>width</it></code>, and <code><it>height</it></code>\n are valid ints.\n </p>\n\n @param value the value to be converted\n @return the value as a rectangle\n @exception DataFormatException if the given value does not represent\n	a rectangle\n"
" Converts the given value into an SWT rectangle.\n Returns the given default value if the \n value does not represent a rectangle.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as a rectangle, or the default value\n"
" Converts the given value into an SWT RGB color value.\n This method fails if the value does not represent an RGB\n color value.\n <p>\n A valid RGB color value representation is a string of the form\n <code><it>red</it>,<it>green</it></code>,<it>blue</it></code> where\n <code><it>red</it></code>, <it>green</it></code>, and \n <code><it>blue</it></code> are valid ints.\n </p>\n\n @param value the value to be converted\n @return the value as an RGB color value\n @exception DataFormatException if the given value does not represent\n	an RGB color value\n"
" Converts the given value into an SWT RGB color value.\n Returns the given default value if the \n value does not represent an RGB color value.\n\n @param value the value to be converted\n @param dflt the default value\n @return the value as a RGB color value, or the default value\n"
" Converts the given double value to a string.\n Equivalent to <code>String.valueOf(value)</code>.\n\n @param value the double value\n @return the string representing the given double\n"
" Converts the given float value to a string.\n Equivalent to <code>String.valueOf(value)</code>.\n\n @param value the float value\n @return the string representing the given float\n"
" Converts the given int value to a string.\n Equivalent to <code>String.valueOf(value)</code>.\n\n @param value the int value\n @return the string representing the given int\n"
" Converts the given long value to a string.\n Equivalent to <code>String.valueOf(value)</code>.\n\n @param value the long value\n @return the string representing the given long\n"
" Converts the given boolean object to a string.\n Equivalent to <code>String.valueOf(value.booleanValue())</code>.\n\n @param value the boolean object\n @return the string representing the given boolean value\n"
" Converts the given double object to a string.\n Equivalent to <code>String.valueOf(value.doubleValue())</code>.\n\n @param value the double object\n @return the string representing the given double value\n"
" Converts the given float object to a string.\n Equivalent to <code>String.valueOf(value.floatValue())</code>.\n\n @param value the float object\n @return the string representing the given float value\n"
" Converts the given integer object to a string.\n Equivalent to <code>String.valueOf(value.intValue())</code>.\n\n @param value the integer object\n @return the string representing the given integer value\n"
" Converts the given long object to a string.\n Equivalent to <code>String.valueOf(value.longValue())</code>.\n\n @param value the long object\n @return the string representing the given long value\n"
" Converts a font data array  to a string. The string representation is\n that of asString(FontData) seperated by ';'\n \n @param value The font data.\n @return The string representation of the font data arra.\n @since 3.0\n"
" Converts a font data object to a string. The string representation is\n "font name-style-height" (for example "Times New Roman-bold-36").\n @param value The font data.\n @return The string representation of the font data object.\n"
" Converts the given SWT point object to a string.\n <p>\n The string representation of a point has the form\n <code><it>x</it>,<it>y</it></code> where\n <code><it>x</it></code> and <code><it>y</it></code>\n are string representations of integers.\n </p>\n\n @param value the point object\n @return the string representing the given point\n"
" Converts the given SWT rectangle object to a string.\n <p>\n The string representation of a rectangle has the form\n <code><it>x</it>,<it>y</it>,<it>width</it>,<it>height</it></code>\n where <code><it>x</it></code>, <code><it>y</it></code>,\n <code><it>width</it></code>, and <code><it>height</it></code>\n are string representations of integers.\n </p>\n\n @param value the rectangle object\n @return the string representing the given rectangle\n"
" Converts the given SWT RGB color value object to a string.\n <p>\n The string representation of an RGB color value has the form\n <code><it>red</it>,<it>green</it></code>,<it>blue</it></code> where\n <code><it>red</it></code>, <it>green</it></code>, and \n <code><it>blue</it></code> are string representations of integers.\n </p>\n\n @param value the RGB color value object\n @return the string representing the given RGB color value\n"
" Returns the given string with all whitespace characters removed.\n <p>\n All characters that have codes less than or equal to <code>'&#92;u0020'</code> \n (the space character) are considered to be a white space.\n </p>\n\n @param s the source string\n @return the string with all whitespace characters removed\n"
" Converts a font data object to a string representation for display. \n 	The string representation is\n "font name-style-height" (for example "Times New Roman-bold-36").\n @param value The font data.\n @return The string representation of the font data object.\n @deprecated use asString(FontData)\n"
" Utility methods to access JFace-specific resources.\n <p>\n All methods declared on this class are static. This class cannot be\n instantiated.\n </p>\n <p>\n The following global state is also maintained by this class:\n <ul>\n <li>a font registry</li>\n <li>a color registry</li>\n <li>an image registry</li>\n <li>a resource bundle</li>\n </ul>\n </p>\n @noinstantiate This class is not intended to be instantiated by clients.\n @noextend This class is not intended to be subclassed by clients.\n"
" Returns the formatted message for the given key in JFace's resource\n bundle.\n \n @param key\n            the resource name\n @param args\n            the message arguments\n @return the string\n"
" Returns the JFace's banner font. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT)\n </pre>\n \n @return the font\n"
" Returns the resource bundle for JFace itself. The resouble bundle is\n obtained from\n <code>ResourceBundle.getBundle("org.eclipse.jface.jface_nls")</code>.\n <p>\n Note that several static convenience methods are also provided on this\n class for directly accessing resources in this bundle.\n </p>\n \n @return the resource bundle\n"
" Returns the color registry for JFace itself.\n <p>\n \n @return the <code>ColorRegistry</code>.\n @since 3.0\n"
" Returns the global resource manager for the given display\n \n @since 3.1\n \n @param toQuery\n            display to query\n @return the global resource manager for the given display\n"
" Returns the ResourceManager for the current display. May only be called\n from a UI thread.\n \n @since 3.1\n \n @return the global ResourceManager for the current display\n"
" Returns JFace's standard font. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(JFaceResources.DEFAULT_FONT)\n </pre>\n \n @return the font\n"
" Returns the descriptor for JFace's standard font. Convenience method\n equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().getDescriptor(JFaceResources.DEFAULT_FONT)\n </pre>\n \n @return the font\n @since 3.3\n"
" Returns the JFace's dialog font. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(JFaceResources.DIALOG_FONT)\n </pre>\n \n @return the font\n"
" Returns the descriptor for JFace's dialog font. Convenience method\n equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().getDescriptor(JFaceResources.DIALOG_FONT)\n </pre>\n \n @return the font\n @since 3.3\n"
" Returns the font in JFace's font registry with the given symbolic font\n name. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(symbolicName)\n </pre>\n \n If an error occurs, return the default font.\n \n @param symbolicName\n            the symbolic font name\n @return the font\n"
" Returns the font descriptor for in JFace's font registry with the given\n symbolic name. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().getDescriptor(symbolicName)\n </pre>\n \n If an error occurs, return the default font.\n \n @param symbolicName\n            the symbolic font name\n @return the font descriptor (never null)\n @since 3.3\n"
" Returns the font registry for JFace itself. If the value has not been\n established by an earlier call to <code>setFontRegistry</code>, is it\n initialized to\n <code>new FontRegistry("org.eclipse.jface.resource.jfacefonts")</code>.\n <p>\n Note that several static convenience methods are also provided on this\n class for directly accessing JFace's standard fonts.\n </p>\n \n @return the JFace font registry\n"
" Returns the JFace's header font. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT)\n </pre>\n \n @return the font\n"
" Returns the descriptor for JFace's header font. Convenience method\n equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT)\n </pre>\n \n @return the font descriptor (never null)\n @since 3.3\n"
" Returns the image in JFace's image registry with the given key, or\n <code>null</code> if none. Convenience method equivalent to\n \n <pre>\n JFaceResources.getImageRegistry().get(key)\n </pre>\n \n @param key\n            the key\n @return the image, or <code>null</code> if none\n"
" Returns the image registry for JFace itself.\n <p>\n Note that the static convenience method <code>getImage</code> is also\n provided on this class.\n </p>\n \n @return the JFace image registry\n"
" Returns the resource object with the given key in JFace's resource\n bundle. If there isn't any value under the given key, the key is\n returned.\n \n @param key\n            the resource name\n @return the string\n"
" Returns a list of string values corresponding to the given list of keys.\n The lookup is done with <code>getString</code>. The values are in the\n same order as the keys.\n \n @param keys\n            a list of keys\n @return a list of corresponding string values\n"
" Returns JFace's text font. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT)\n </pre>\n \n @return the font\n"
" Returns the descriptor for JFace's text font. Convenience method\n equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().getDescriptor(JFaceResources.TEXT_FONT)\n </pre>\n \n @return the font descriptor (never null)\n @since 3.3\n"
" Returns JFace's viewer font. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(JFaceResources.VIEWER_FONT)\n </pre>\n \n @return the font\n @deprecated This font is not in use\n"
" Sets JFace's font registry to the given value. This method may only be\n called once; the call must occur before\n <code>JFaceResources.getFontRegistry</code> is invoked (either directly\n or indirectly).\n \n @param registry\n            a font registry\n"
" The symbolic font name for the banner font (value\n <code>"org.eclipse.jface.bannerfont"</code>).\n"
" The symbolic font name for the standard font (value\n <code>"org.eclipse.jface.defaultfont"</code>).\n"
" The symbolic font name for the dialog font (value\n <code>"org.eclipse.jface.dialogfont"</code>).\n"
" The symbolic font name for the header font (value\n <code>"org.eclipse.jface.headerfont"</code>).\n"
" The symbolic font name for the text font (value\n <code>"org.eclipse.jface.textfont"</code>).\n"
" The symbolic font name for the viewer font (value\n <code>"org.eclipse.jface.viewerfont"</code>).\n \n @deprecated This font is not in use\n"
" The symbolic font name for the window font (value\n <code>"org.eclipse.jface.windowfont"</code>).\n \n @deprecated This font is not in use\n"
" A font registry maintains a mapping between symbolic font names \n and SWT fonts.\n <p>\n A font registry owns all of the font objects registered\n with it, and automatically disposes of them when the SWT Display\n that creates the fonts is disposed. Because of this, clients do \n not need to (indeed, must not attempt to) dispose of font \n objects themselves.\n </p>\n <p>\n A special constructor is provided for populating a font registry\n from a property files using the standard Java resource bundle mechanism.\n </p>\n <p>\n Methods are provided for registering listeners that will be kept\n apprised of changes to list of registered fonts.\n </p>\n <p>\n Clients may instantiate this class (it was not designed to be subclassed).\n </p>\n \n Since 3.0 this class extends ResourceRegistry.\n @noextend This class is not intended to be subclassed by clients.\n"
" Find the first valid fontData in the provided list. If none are valid\n return the first one regardless. If the list is empty return null. Return\n <code>null</code> if one cannot be found.\n \n @param fonts the font list\n @param display the display used \n @return the font data of the like describe above\n \n @deprecated use bestDataArray in order to support Motif multiple entry\n             fonts.\n"
" Find the first valid fontData in the provided list. \n If none are valid return the first one regardless.\n If the list is empty return <code>null</code>.\n \n @param fonts list of fonts\n @param display the display\n @return font data like described above\n @deprecated use filterData in order to preserve \n multiple entry fonts on Motif\n"
" Removes from the list all fonts that do not exist in this system.  \n If none are valid, return the first irregardless.  If the list is \n empty return <code>null</code>.\n \n @param fonts the fonts to check\n @param display the display to check against\n @return the list of fonts that have been found on this system\n @since 3.1\n"
" Returns the default font data.  Creates it if necessary.\n <p>\n This method should only be called from the UI thread. If you are not on the UI\n thread then wrap the call with a\n <code>PlatformUI.getWorkbench().getDisplay().synchExec()</code> in order to\n guarantee the correct result. Failure to do this may result in an {@link\n SWTException} being thrown.\n </p>\n @return Font\n"
" Returns the font descriptor for the font with the given symbolic\n font name. Returns the default font if there is no special value\n associated with that name\n \n @param symbolicName symbolic font name\n @return the font descriptor (never null)\n \n @since 3.3\n"
" Returns the font data associated with the given symbolic font name.\n Returns the default font data if there is no special value associated\n with that name.\n\n @param symbolicName symbolic font name\n @return the font\n"
" Returns the font associated with the given symbolic font name.\n Returns the default font if there is no special value associated\n with that name.\n <p>\n This method should only be called from the UI thread. If you are not on the UI\n thread then wrap the call with a\n <code>PlatformUI.getWorkbench().getDisplay().synchExec()</code> in order to\n guarantee the correct result. Failure to do this may result in an {@link\n SWTException} being thrown.\n </p>\n @param symbolicName symbolic font name\n @return the font\n"
" Returns the bold font associated with the given symbolic font name.\n Returns the bolded default font if there is no special value associated\n with that name.\n <p>\n This method should only be called from the UI thread. If you are not on the UI\n thread then wrap the call with a\n <code>PlatformUI.getWorkbench().getDisplay().synchExec()</code> in order to\n guarantee the correct result. Failure to do this may result in an {@link\n SWTException} being thrown.\n </p>\n @param symbolicName symbolic font name\n @return the font\n @since 3.0\n"
" Returns the italic font associated with the given symbolic font name.\n Returns the italic default font if there is no special value associated\n with that name.\n <p>\n This method should only be called from the UI thread. If you are not on the UI\n thread then wrap the call with a\n <code>PlatformUI.getWorkbench().getDisplay().synchExec()</code> in order to\n guarantee the correct result. Failure to do this may result in an {@link\n SWTException} being thrown.\n </p>\n @param symbolicName symbolic font name\n @return the font\n @since 3.0\n"
""
""
""
" Adds (or replaces) a font to this font registry under the given\n symbolic name.\n <p>\n A property change event is reported whenever the mapping from\n a symbolic name to a font changes. The source of the event is\n this registry; the property name is the symbolic font name.\n </p>\n\n @param symbolicName the symbolic font name\n @param fontData an Array of FontData\n"
" Returns the font descriptor for the JFace default font.\n \n @return the font descriptor for the JFace default font\n @since 3.3\n"
" Creates an empty font registry.\n <p>\n There must be an SWT Display created in the current \n thread before calling this method.\n </p>\n"
" Creates a font registry and initializes its content from\n a property file.\n <p>\n There must be an SWT Display created in the current \n thread before calling this method.\n </p>\n <p>\n The OS name (retrieved using <code>System.getProperty("os.name")</code>)\n is converted to lowercase, purged of whitespace, and appended \n as suffix (separated by an underscore <code>'_'</code>) to the given \n location string to yield the base name of a resource bundle\n acceptable to <code>ResourceBundle.getBundle</code>.\n The standard Java resource bundle mechanism is then used to locate\n and open the appropriate properties file, taking into account\n locale specific variations.\n </p>\n <p>\n For example, on the Windows 2000 operating system the location string\n <code>"com.example.myapp.Fonts"</code> yields the base name \n <code>"com.example.myapp.Fonts_windows2000"</code>. For the US English locale,\n this further elaborates to the resource bundle name\n <code>"com.example.myapp.Fonts_windows2000_en_us"</code>.\n </p>\n <p>\n If no appropriate OS-specific resource bundle is found, the\n process is repeated using the location as the base bundle name.\n </p>\n <p>\n The property file contains entries that look like this:\n <pre>\n	textfont.0=MS Sans Serif-regular-10\n	textfont.1=Times New Roman-regular-10\n	\n	titlefont.0=MS Sans Serif-regular-12\n	titlefont.1=Times New Roman-regular-12\n </pre>\n Each entry maps a symbolic font names (the font registry keys) with\n a "<code>.<it>n</it></code> suffix to standard font names\n on the right. The suffix indicated order of preference: \n "<code>.0</code>" indicates the first choice,\n "<code>.1</code>" indicates the second choice, and so on.\n </p>\n The following example shows how to use the font registry:\n <pre>\n	FontRegistry registry = new FontRegistry("com.example.myapp.fonts");\n  Font font = registry.get("textfont");\n  control.setFont(font);\n  ...\n </pre>\n\n @param location the name of the resource bundle\n @param loader the ClassLoader to use to find the resource bundle\n @exception MissingResourceException if the resource bundle cannot be found\n @since 2.1\n"
" Load the FontRegistry using the ClassLoader from the PlatformUI\n plug-in\n <p>\n This method should only be called from the UI thread. If you are not on the UI\n thread then wrap the call with a\n <code>PlatformUI.getWorkbench().getDisplay().synchExec()</code> in order to\n guarantee the correct result. Failure to do this may result in an {@link\n SWTException} being thrown.\n </p>\n @param location the location to read the resource bundle from\n @throws MissingResourceException Thrown if a resource is missing\n"
" Creates an empty font registry.\n\n @param display the Display\n"
" Creates an empty font registry.\n \n @param display\n            the <code>Display</code>\n @param cleanOnDisplayDisposal\n            whether all fonts allocated by this <code>FontRegistry</code>\n            should be disposed when the display is disposed\n @since 3.1\n"
" Runnable that cleans up the manager on disposal of the display.\n"
"\nProvides JFace support for long-running operations.\n<h2>\nPackage Specification</h2>\nLong-running operations must be dealt with specially in order to keep the\nUI helpful and responsive. Typically this involves temporarily disabling\nmost controls and displaying a busy cursor and progress indicator; while\nthe operation is in progress, the only requests that will be accepted will\nbe ones to cancel the operation.\n<p>The <tt>IRunnableWithProgress</tt> interface should be implemented by\nany class whose instances are intended to be executed as long-running operations.\nThese objects can then be run in any runnable context (<tt>IRunnableContext</tt>),\nincluding such standard JFace UI components as application windows (<tt>ApplicationWindow</tt>),\nwizard dialogs (<tt>WizardDialog</tt>), and progress monitor dialogs (<tt>ProgressMonitorDialog</tt>).\nThe utility class <tt>ModalContext</tt> defines the basic mechanism and\nUI event loop for modal operations.\n"
" Interface for UI components which can execute a long-running operation\n in the form of an <code>IRunnableWithProgress</code>.\n The context is responsible for displaying a progress indicator and Cancel\n button to the end user while the operation is in progress; the context\n supplies a progress monitor to be used from code running inside the operation.\n Note that an <code>IRunnableContext</code> is not a runnable itself.\n <p>\n For examples of UI components which implement this interface,\n see <code>ApplicationWindow</code>, <code>ProgressMonitorDialog</code>,\n and <code>WizardDialog</code>.\n </p>\n\n @see IRunnableWithProgress\n @see org.eclipse.jface.window.ApplicationWindow\n @see org.eclipse.jface.dialogs.ProgressMonitorDialog\n @see org.eclipse.jface.wizard.WizardDialog\n"
" <p>\n Runs the given <code>IRunnableWithProgress</code> in this context.\n For example, if this is a <code>ProgressMonitorDialog</code> then the runnable\n is run using this dialog's progress monitor.\n </p>\n <p>\n If <code>fork</code> is <code>false</code>, the current thread is used\n to run the runnable. Note that if <code>fork</code> is <code>true</code>,\n it is unspecified whether or not this method blocks until the runnable\n has been run. Implementers should document whether the runnable is run\n synchronously (blocking) or asynchronously (non-blocking), or if no\n assumption can be made about the blocking behaviour.\n </p>\n\n @param fork <code>true</code> if the runnable should be run in a separate thread,\n  and <code>false</code> to run in the same thread\n @param cancelable <code>true</code> to enable the cancelation, and\n  <code>false</code> to make the operation uncancellable\n @param runnable the runnable to run\n\n @exception InvocationTargetException wraps any exception or error which occurs \n  while running the runnable\n @exception InterruptedException propagated by the context if the runnable \n  acknowledges cancelation by throwing this exception.  This should not be thrown\n  if cancelable is <code>false</code>.\n"
" The <code>IRunnableWithProgress</code> interface should be implemented by any\n class whose instances are intended to be executed as a long-running operation.\n Long-running operations are typically presented at the UI via a modal dialog\n showing a progress indicator and a Cancel button.\n The class must define a <code>run</code> method that takes a progress monitor.\n The <code>run</code> method is usually not invoked directly, but rather by\n passing the <code>IRunnableWithProgress</code> to the <code>run</code> method of\n an <code>IRunnableContext</code>, which provides the UI for the progress monitor\n and Cancel button.\n\n @see IRunnableContext\n"
" Runs this operation.  Progress should be reported to the given progress monitor.\n This method is usually invoked by an <code>IRunnableContext</code>'s <code>run</code> method,\n which supplies the progress monitor.\n A request to cancel the operation should be honored and acknowledged \n by throwing <code>InterruptedException</code>.\n\n @param monitor the progress monitor to use to display progress and receive\n   requests for cancelation\n @exception InvocationTargetException if the run method must propagate a checked exception,\n 	it should wrap it inside an <code>InvocationTargetException</code>; runtime exceptions are automatically\n  wrapped in an <code>InvocationTargetException</code> by the calling context\n @exception InterruptedException if the operation detects a request to cancel, \n  using <code>IProgressMonitor.isCanceled()</code>, it should exit by throwing \n  <code>InterruptedException</code>\n\n @see IRunnableContext#run\n"
" A thread listener is an object that is interested in receiving notifications\n of thread changes.  For example, a thread listener can be used to notify a \n runnable of the thread that will execute it, allowing the runnable to transfer\n thread-local state from the calling thread before control passes to the new thread.\n \n @since 3.1\n"
" Notification that a thread change is occurring.\n \n @param thread The new thread\n"
" Utility class for supporting modal operations. The runnable passed to the\n <code>run</code> method is executed in a separate thread, depending on the\n value of the passed fork argument. If the runnable is executed in a separate\n thread then the current thread either waits until the new thread ends or, if\n the current thread is the UI thread, it polls the SWT event queue and\n dispatches each event.\n <p>\n This class is not intended to be subclassed.\n </p>\n @noinstantiate This class is not intended to be instantiated by clients.\n @noextend This class is not intended to be subclassed by clients.\n"
" Returns whether the first progress monitor is the same as, or a wrapper\n around, the second progress monitor.\n \n @param monitor1\n            the first progress monitor\n @param monitor2\n            the second progress monitor\n @return <code>true</code> if the first is the same as, or a wrapper\n         around, the second\n @see ProgressMonitorWrapper\n"
" Checks with the given progress monitor and throws\n <code>InterruptedException</code> if it has been canceled.\n <p>\n Code in a long-running operation should call this method regularly so\n that a request to cancel will be honored.\n </p>\n <p>\n Convenience for:\n \n <pre>\n if (monitor.isCanceled())\n 	throw new InterruptedException();\n </pre>\n \n </p>\n \n @param monitor\n            the progress monitor\n @exception InterruptedException\n                if cancelling the operation has been requested\n @see IProgressMonitor#isCanceled()\n"
" Returns the modal nesting level.\n <p>\n The modal nesting level increases by one each time the\n <code>ModalContext.run</code> method is called within the dynamic scope\n of another call to <code>ModalContext.run</code>.\n </p>\n \n @return the modal nesting level, or <code>0</code> if this method is\n         called outside the dynamic scope of any invocation of\n         <code>ModalContext.run</code>\n"
" Returns whether the given thread is running a modal context.\n \n @param thread\n            The thread to be checked\n @return <code>true</code> if the given thread is running a modal\n         context, <code>false</code> if not\n"
" Runs the given runnable in a modal context, passing it a progress\n monitor.\n <p>\n The modal nesting level is increased by one from the perspective of the\n given runnable.\n </p>\n <p>\n If the supplied operation implements <code>IThreadListener</code>, it\n will be notified of any thread changes required to execute the operation.\n Specifically, the operation will be notified of the thread that will call\n its <code>run</code> method before it is called, and will be notified\n of the change of control back to the thread calling this method when the\n operation completes. These thread change notifications give the operation\n an opportunity to transfer any thread-local state to the execution thread\n before control is transferred to the new thread.\n </p>\n \n @param operation\n            the runnable to run\n @param fork\n            <code>true</code> if the runnable should run in a separate\n            thread, and <code>false</code> if in the same thread\n @param monitor\n            the progress monitor to use to display progress and receive\n            requests for cancelation\n @param display\n            the display to be used to read and dispatch events\n @exception InvocationTargetException\n                if the run method must propagate a checked exception, it\n                should wrap it inside an\n                <code>InvocationTargetException</code>; runtime\n                exceptions and errors are automatically wrapped in an\n                <code>InvocationTargetException</code> by this method\n @exception InterruptedException\n                if the operation detects a request to cancel, using\n                <code>IProgressMonitor.isCanceled()</code>, it should\n                exit by throwing <code>InterruptedException</code>;\n                this method propagates the exception\n"
" Sets whether ModalContext is running in debug mode.\n \n @param debugMode\n            <code>true</code> for debug mode, and <code>false</code>\n            for normal mode (the default)\n"
" Sets whether ModalContext may process events (by calling\n <code>Display.readAndDispatch()</code>) while running operations. By\n default, ModalContext will process events while running operations. Use\n this method to disallow event processing temporarily.\n \n @param allowReadAndDispatch\n            <code>true</code> (the default) if events may be processed\n            while running an operation, <code>false</code> if\n            Display.readAndDispatch() should not be called from\n            ModalContext.\n @since 3.2\n"
""
"\nProvides a framework for preferences.\n<h2>\nPackage Specification</h2>\nA <b>preference manager</b> (class <tt>PreferenceManager</tt>) maintains\na tree of <b>preference nodes</b>. Preferences are presented to the end\nuser in a <b>preference dialog</b> consisting of <b>preference pages</b>.\nA preference page consists of multiple preference fields, which can be\ndisplayed and modified though <b>field editors</b>. The framework contains\nan abstract base class for preference dialogs (<tt>PreferenceDialog</tt>),\nand an abstract preference page class (<tt>FieldEditorPreferencePage</tt>)\nfor hosting these field editors.\n<p>The individual preference values are maintained in a <b>preference store</b>\n(<tt>IPreferenceStore</tt>). Each preference has a current value and a\ndefault value use to (re-)initialize it. The framework provides a concrete\npreference store implementation (<tt>PreferenceStore</tt>) based on an\ninternal <tt>java.util.Properties</tt> object, with support for persisting\nthe non-default preference values to files or streams.\n<p>A field editor presents the value of a single preference to the end\nuser. The value is loaded from the preference store; if modified by the\nend user, the value is validated and eventually stored back to the preference\nstore.\n<p>This package contains ready-to-use field editors for various types of\npreferences:\n<ul>\n<li>\n<tt>BooleanFieldEditor</tt> - booleans</li>\n\n<li>\n<tt>IntegerFieldEditor</tt> - integers</li>\n\n<li>\n<tt>StringFieldEditor</tt> - text strings</li>\n\n<li>\n<tt>RadioGroupFieldEditor</tt> - enumerations</li>\n\n<li>\n<tt>ColorFieldEditor</tt> - RGB colors</li>\n\n<li>\n<tt>FontFieldEditor</tt> - fonts</li>\n\n<li>\n<tt>DirectoryFieldEditor</tt> - directories</li>\n\n<li>\n<tt>FileFieldEditor</tt> - files</li>\n\n<li>\n<tt>PathEditor</tt> - paths</li>\n</ul>\nAll field editors are subclasses of the abstract base class <tt>FieldEditor</tt>;\nthe framework allows new kinds of field editors to be defined by subclassing\nthis class or one of its subclasses.\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n"
" A field editor to edit directory paths.\n"
""
""
""
" Creates a new path field editor \n"
" Creates a path field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param dirChooserLabelText the label text displayed for the directory chooser\n @param parent the parent of the field editor's control\n"
" A field editor for an integer type preference. This class may be used as is,\n or subclassed as required.\n \n @since 3.0\n"
""
""
""
""
""
" Returns the value that will be used for Scale.setIncrement(int).\n \n @return the value.\n @see org.eclipse.swt.widgets.Scale#setIncrement(int)\n"
" Returns the value that will be used for Scale.setMaximum(int).\n \n @return the value.\n @see org.eclipse.swt.widgets.Scale#setMaximum(int)\n"
" Returns the value that will be used for Scale.setMinimum(int).\n \n @return the value.\n @see org.eclipse.swt.widgets.Scale#setMinimum(int)\n"
""
" Returns the value that will be used for Scale.setPageIncrement(int).\n \n @return the value.\n @see org.eclipse.swt.widgets.Scale#setPageIncrement(int)\n"
" Returns this field editor's scale control.\n \n @return the scale control, or <code>null</code> if no scale field is\n         created yet\n"
""
" Set the value to be used for Scale.setIncrement(int) and update the\n scale.\n \n @param increment\n            a value greater than 0.\n @see org.eclipse.swt.widgets.Scale#setIncrement(int)\n"
" Set the value to be used for Scale.setMaximum(int) and update the\n scale.\n \n @param max\n            a value greater than 0.\n @see org.eclipse.swt.widgets.Scale#setMaximum(int)\n"
" Set the value to be used for Scale.setMinumum(int) and update the\n scale.\n \n @param min\n            a value greater than 0.\n @see org.eclipse.swt.widgets.Scale#setMinimum(int)\n"
" Set the value to be used for Scale.setPageIncrement(int) and update the\n scale.\n \n @param pageIncrement\n            a value greater than 0.\n @see org.eclipse.swt.widgets.Scale#setPageIncrement(int)\n"
" Informs this field editor's listener, if it has one, about a change to\n the value (<code>VALUE</code> property) provided that the old and new\n values are different.\n <p>\n This hook is <em>not</em> called when the scale is initialized (or\n reset to the default value) from the preference store.\n </p>\n"
" Creates a scale field editor.\n \n @param name\n            the name of the preference this field editor works on\n @param labelText\n            the label text of the field editor\n @param parent\n            the parent of the field editor's control\n"
" Creates a scale field editor with particular scale values.\n \n @param name\n            the name of the preference this field editor works on\n @param labelText\n            the label text of the field editor\n @param parent\n            the parent of the field editor's control\n @param min\n            the value used for Scale.setMinimum(int).\n @param max\n            the value used for Scale.setMaximum(int).\n @param increment\n            the value used for Scale.setIncrement(int).\n @param pageIncrement\n            the value used for Scale.setPageIncrement(int).\n"
" The scale, or <code>null</code> if none.\n"
" Abstract base class for all field editors.\n <p>\n A field editor presents the value of a preference to the end \n user. The value is loaded from a preference store; if\n modified by the end user, the value is validated and eventually\n stored back to the preference store. A field editor reports\n an event when the value, or the validity of the value, changes.\n </p>\n <p>\n Field editors should be used in conjunction with a field \n editor preference page (<code>FieldEditorPreferencePage</code>)\n which coordinates everything and provides the message line\n which display messages emanating from the editor.\n </p>\n <p>\n This package contains ready-to-use field editors for various\n types of preferences:\n <ul>\n   <li><code>BooleanFieldEditor</code> - booleans</li>\n   <li><code>IntegerFieldEditor</code> - integers</li>\n   <li><code>StringFieldEditor</code> - text strings</li>\n   <li><code>RadioGroupFieldEditor</code> - enumerations</li>\n   <li><code>ColorFieldEditor</code> - RGB colors</li>\n   <li><code>FontFieldEditor</code> - fonts</li>\n   <li><code>DirectoryFieldEditor</code> - directories</li>\n   <li><code>FileFieldEditor</code> - files</li>\n   <li><code>PathEditor</code> - paths</li>\n </ul>\n </p>\n"
" Adjusts the horizontal span of this field editor's basic controls.\n <p>\n Subclasses must implement this method to adjust the horizontal span \n of controls so they appear correct in the given number of columns.\n </p>\n <p>\n The number of columns will always be equal to or greater than the \n value returned by this editor's <code>getNumberOfControls</code> method.\n\n @param numColumns the number of columns\n"
" Applies a font.\n <p>\n The default implementation of this framework method\n does nothing. Subclasses should override this method\n if they want to change the font of the SWT control to\n a value different than the standard dialog font.\n </p>\n"
" Checks if the given parent is the current parent of the\n supplied control; throws an (unchecked) exception if they\n are not correctly related.\n\n @param control the control\n @param parent the parent control\n"
" Clears the error message from the message line.\n"
" Clears the normal message from the message line.\n"
" Returns the number of pixels corresponding to the\n given number of horizontal dialog units.\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n\n @param control the control being sized\n @param dlus the number of horizontal dialog units\n @return the number of pixels\n"
" Returns the number of pixels corresponding to the\n given number of vertical dialog units.\n <p>\n Clients may call this framework method, but should not override it.\n </p>\n\n @param control the control being sized\n @param dlus the number of vertical dialog units\n @return the number of pixels\n"
" Creates this field editor's main control containing all of its\n basic controls.\n\n @param parent the parent control\n"
" Disposes the SWT resources used by this field editor.\n"
" Fills this field editor's basic controls into the given parent.\n <p>\n Subclasses must implement this method to create the controls\n for this field editor.\n </p>\n <p>\n Note this method may be called by the constructor, so it must not access\n fields on the receiver object because they will not be fully initialized.\n </p>\n\n @param parent the composite used as a parent for the basic controls;\n	the parent's layout must be a <code>GridLayout</code>\n @param numColumns the number of columns\n"
" Initializes this field editor with the preference value from\n the preference store.\n <p>\n Subclasses must implement this method to properly initialize \n the field editor.\n </p>\n"
" Initializes this field editor with the default preference value from\n the preference store.\n <p>\n Subclasses must implement this method to properly initialize \n the field editor.\n </p>\n"
" Stores the preference value from this field editor into\n the preference store.\n <p>\n Subclasses must implement this method to save the entered value\n into the preference store.\n </p>\n"
" Fills this field editor's basic controls into the given parent. \n\n @param parent the composite used as a parent for the basic controls;\n	the parent's layout must be a <code>GridLayout</code>\n @param numColumns the number of columns\n"
" Informs this field editor's listener, if it has one, about a change to\n one of this field editor's boolean-valued properties. Does nothing\n if the old and new values are the same.\n\n @param property the field editor property name, \n   such as <code>VALUE</code> or <code>IS_VALID</code>\n @param oldValue the old value\n @param newValue the new value\n"
" Informs this field editor's listener, if it has one, about a change to\n one of this field editor's properties.\n\n @param property the field editor property name, \n   such as <code>VALUE</code> or <code>IS_VALID</code>\n @param oldValue the old value object, or <code>null</code>\n @param newValue the new value, or <code>null</code>\n"
" Returns the symbolic font name used by this field editor.\n\n @return the symbolic font name\n"
" Returns the label control. \n\n @return the label control, or <code>null</code>\n  if no label control has been created\n"
" Returns this field editor's label component.\n <p>\n The label is created if it does not already exist\n </p>\n\n @param parent the parent\n @return the label control\n"
" Returns this field editor's label text.\n\n @return the label text\n"
" Returns the number of basic controls this field editor consists of.\n\n @return the number of controls\n"
" Returns the name of the preference this field editor operates on.\n\n @return the name of the preference\n"
" Returns the preference page in which this field editor\n appears.\n\n @return the preference page, or <code>null</code> if none\n @deprecated use #getPage()\n"
" Return the DialogPage that the receiver is sending\n updates to.\n \n @return DialogPage or <code>null</code> if it \n has not been set.\n \n @since 3.1\n"
" Returns the preference store used by this field editor.\n\n @return the preference store, or <code>null</code> if none\n @see #setPreferenceStore\n"
" Initialize the field editor with the given preference name and label.\n \n @param name the name of the preference this field editor works on\n @param text the label text of the field editor\n"
" Returns whether this field editor contains a valid value.\n <p>\n The default implementation of this framework method\n returns <code>true</code>. Subclasses wishing to perform\n validation should override both this method and\n <code>refreshValidState</code>.\n </p>\n \n @return <code>true</code> if the field value is valid,\n   and <code>false</code> if invalid\n @see #refreshValidState()\n"
" Initializes this field editor with the preference value from\n the preference store.\n"
" Initializes this field editor with the default preference value\n from the preference store.\n"
" Returns whether this field editor currently presents the\n default value for its preference.\n \n @return <code>true</code> if the default value is presented,\n   and <code>false</code> otherwise\n"
" Refreshes this field editor's valid state after a value change\n and fires an <code>IS_VALID</code> property change event if\n warranted.\n <p>\n The default implementation of this framework method does\n nothing. Subclasses wishing to perform validation should override\n both this method and <code>isValid</code>.\n </p>\n\n @see #isValid\n"
" Sets the focus to this field editor.\n <p>\n The default implementation of this framework method\n does nothing. Subclasses may reimplement.\n </p>\n"
" Sets this field editor's label text.\n The label is typically presented to the left of the entry field.\n\n @param text the label text\n"
" Sets the name of the preference this field editor operates on.\n <p>\n The ability to change this allows the same field editor object\n to be reused for different preferences.\n </p>\n <p>\n For example: <p>\n <pre>\n 	...\n  editor.setPreferenceName("font");\n 	editor.load();\n </pre>\n </p>\n\n @param name the name of the preference\n"
" Sets the preference page in which this field editor\n appears.\n\n @param preferencePage the preference page, or <code>null</code> if none\n @deprecated use #setPage(DialogPage)\n"
" Set the page to be the receiver.\n @param dialogPage\n \n @since 3.1\n"
" Sets the preference store used by this field editor.\n\n @param store the preference store, or <code>null</code> if none\n @see #getPreferenceStore\n"
" Sets whether this field editor is presenting the default value.\n\n @param booleanValue <code>true</code> if the default value is being presented,\n  and <code>false</code> otherwise\n"
" Sets or removes the property change listener for this field editor.\n <p>\n Note that field editors can support only a single listener.\n </p>\n\n @param listener a property change listener, or <code>null</code>\n  to remove\n"
" Shows the given error message in the page for this\n field editor if it has one.\n\n @param msg the error message\n"
" Shows the given message in the page for this\n field editor if it has one.\n\n @param msg the message\n"
" Stores this field editor's value back into the preference store.\n"
" Set the GridData on button to be one that is spaced for the\n current font.\n @param button the button the data is being set on.\n"
" Set whether or not the controls in the field editor\n are enabled.\n @param enabled The enabled state.\n @param parent The parent of the controls in the group.\n  Used to create the controls if required.\n"
" Creates a new field editor.\n"
" Creates a new field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n"
" Property name constant (value <code>"field_editor_is_valid"</code>)\n to signal a change in the validity of the value of this field editor.\n"
" Property name constant (value <code>"field_editor_value"</code>)\n to signal a change in the value of this field editor.\n"
"\n Gap between label and control.\n"
" A concrete implementation of a node in a preference dialog tree. This class\n also supports lazy creation of the node's preference page.\n"
""
""
" (non-Javadoc) Method declared on IPreferenceNode.\n"
""
""
" Returns the image descriptor for this node.\n \n @return the image descriptor\n"
""
""
""
""
""
""
" Set the current page to be newPage.\n \n @param newPage\n"
" Creates a new preference node with the given id. The new node has no\n subnodes.\n \n @param id\n            the node id\n"
" Creates a preference node with the given id, label, and image, and\n lazily-loaded preference page. The preference node assumes (sole)\n responsibility for disposing of the image; this will happen when the node\n is disposed.\n \n @param id\n            the node id\n @param label\n            the label used to display the node in the preference dialog's\n            tree\n @param image\n            the image displayed left of the label in the preference\n            dialog's tree, or <code>null</code> if none\n @param className\n            the class name of the preference page; this class must\n            implement <code>IPreferencePage</code>\n"
" Creates a preference node with the given id and preference page. The\n title of the preference page is used for the node label. The node will\n not have an image.\n \n @param id\n            the node id\n @param preferencePage\n            the preference page\n"
" A utility class for dealing with preferences whose values are\n common SWT objects (color, points, rectangles, and font data).\n The static methods on this class handle the conversion between\n the SWT objects and their string representations.\n <p>\n Usage:\n <pre>\n IPreferenceStore store = ...;\n PreferenceConverter.setValue(store, "bg", new RGB(127,127,127));\n ...\n RBG bgColor = PreferenceConverter.getValue(store, "bg");\n </pre>\n </p>\n <p>\n This class contains static methods and fields only and cannot \n be instantiated.\n </p>\n Note: touching this class has the side effect of creating a display (static initializer).\n @noinstantiate This class is not intended to be instantiated by clients.\n"
" Helper method to construct a <code>FontData</code> from the given string.\n String is in the form FontData;FontData; in order that\n multiple FontDatas can be defined.\n @param value the identifier for the font\n @return FontData[]\n \n @since 3.0\n"
" Reads the supplied string and returns its corresponding\n FontData. If it cannot be read then the default FontData\n will be returned.\n \n @param fontDataValue the string value for the font data  \n @return the font data\n"
" Returns the current value of the color-valued preference with the\n given name in the given preference store.\n Returns the default-default value (<code>COLOR_DEFAULT_DEFAULT</code>) \n if there is no preference with the given name, or if the current value \n cannot be treated as a color.\n\n @param store the preference store\n @param name the name of the preference\n @return the color-valued preference\n"
" Returns the default value for the color-valued preference\n with the given name in the given preference store.\n Returns the default-default value (<code>COLOR_DEFAULT_DEFAULT</code>) \n is no default preference with the given name, or if the default \n value cannot be treated as a color.\n\n @param store the preference store\n @param name the name of the preference\n @return the default value of the preference\n"
" Returns the default value array for the font-valued preference\n with the given name in the given preference store.\n Returns the default-default value (<code>FONTDATA_ARRAY_DEFAULT_DEFAULT</code>) \n is no default preference with the given name, or if the default \n value cannot be treated as font data.\n\n @param store the preference store\n @param name the name of the preference\n @return the default value of the preference\n"
" Returns a single default value for the font-valued preference\n with the given name in the given preference store.\n Returns the default-default value (<code>FONTDATA_DEFAULT_DEFAULT</code>) \n is no default preference with the given name, or if the default \n value cannot be treated as font data.\n This method is provided for backwards compatibility. It is\n recommended that <code>getDefaultFontDataArray</code> is\n used instead.\n\n @param store the preference store\n @param name the name of the preference\n @return the default value of the preference\n"
" Returns the default value for the point-valued preference\n with the given name in the given preference store.\n Returns the default-default value (<code>POINT_DEFAULT_DEFAULT</code>) \n is no default preference with the given name, or if the default \n value cannot be treated as a point.\n\n @param store the preference store\n @param name the name of the preference\n @return the default value of the preference\n"
" Returns the default value for the rectangle-valued preference\n with the given name in the given preference store.\n Returns the default-default value (<code>RECTANGLE_DEFAULT_DEFAULT</code>) \n is no default preference with the given name, or if the default \n value cannot be treated as a rectangle.\n\n @param store the preference store\n @param name the name of the preference\n @return the default value of the preference\n"
" Returns the current value of the font-valued preference with the\n given name in the given preference store.\n Returns the default-default value (<code>FONTDATA_ARRAY_DEFAULT_DEFAULT</code>) \n if there is no preference with the given name, or if the current value \n cannot be treated as font data.\n\n @param store the preference store\n @param name the name of the preference\n @return the font-valued preference\n"
" Returns the current value of the first entry of the\n font-valued preference with the\n given name in the given preference store.\n Returns the default-default value (<code>FONTDATA_ARRAY_DEFAULT_DEFAULT</code>) \n if there is no preference with the given name, or if the current value \n cannot be treated as font data.\n This API is provided for backwards compatibility. It is\n recommended that <code>getFontDataArray</code> is used instead.\n\n @param store the preference store\n @param name the name of the preference\n @return the font-valued preference\n"
" Returns the current value of the point-valued preference with the\n given name in the given preference store.\n Returns the default-default value (<code>POINT_DEFAULT_DEFAULT</code>) \n if there is no preference with the given name, or if the current value \n cannot be treated as a point.\n\n @param store the preference store\n @param name the name of the preference\n @return the point-valued preference\n"
" Returns the current value of the rectangle-valued preference with the\n given name in the given preference store.\n Returns the default-default value (<code>RECTANGLE_DEFAULT_DEFAULT</code>) \n if there is no preference with the given name, or if the current value \n cannot be treated as a rectangle.\n\n @param store the preference store\n @param name the name of the preference\n @return the rectangle-valued preference\n"
" Sets the default value of the preference with the given name\n in the given preference store. As FontDatas are stored as \n arrays this method is only provided for backwards compatibility.\n Use <code>setDefault(IPreferenceStore, String, FontData[])</code>\n instead.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new default value of the preference\n"
" Sets the default value of the preference with the given name\n in the given preference store.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new default value of the preference\n"
" Sets the default value of the preference with the given name\n in the given preference store.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new default value of the preference\n"
" Sets the default value of the preference with the given name\n in the given preference store.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new default value of the preference\n"
" Sets the default value of the preference with the given name\n in the given preference store.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new default value of the preference\n"
" Sets the current value of the preference with the given name\n in the given preference store. \n <p>\n Included for backwards compatibility.  This method is equivalent to\n </code>setValue(store, name, new FontData[]{value})</code>.\n </p>\n \n @param store the preference store\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Sets the current value of the preference with the given name\n in the given preference store. This method also sets the corresponding\n key in the JFace font registry to the value and fires a \n property change event to listeners on the preference store.\n \n <p>\n Note that this API does not update any other settings that may\n be dependant upon it. Only the value in the preference store \n and in the font registry is updated.\n </p> \n @param store the preference store\n @param name the name of the preference\n @param value the new current value of the preference\n \n @see #putValue(IPreferenceStore, String, FontData[])\n"
" Sets the current value of the preference with the given name\n in the given preference store. This method does not update\n the font registry or fire a property change event.\n \n @param store the preference store\n @param name the name of the preference\n @param value the new current value of the preference\n \n @see PreferenceConverter#setValue(IPreferenceStore, String, FontData[])\n"
" Returns the stored representation of the given array of FontData objects.\n The stored representation has the form FontData;FontData;\n Only includes the non-null entries.\n \n @param fontData the array of FontData objects\n @return the stored representation of the FontData objects\n @since 3.0\n"
" Sets the current value of the preference with the given name\n in the given preference store.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Sets the current value of the preference with the given name\n in the given preference store.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Sets the current value of the preference with the given name\n in the given preference store.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new current value of the preference\n"
" The default-default value for point preferences\n (the origin, <code>(0,0)</code>).\n"
" The default-default value for rectangle preferences\n (the empty rectangle <code>(0,0,0,0)</code>).\n"
" The default-default value for color preferences \n (black, <code>RGB(0,0,0)</code>).\n"
" The default-default value for <code>FontData[]</code> preferences.\n"
" The default-default value for <code>FontData</code> preferences.\n"
" \n JFacePreferences is a class used to administer the preferences used by JFace\n objects.\n"
" Return the preference store for the receiver.\n \n @return IPreferenceStore or null\n"
" Set the preference store for the receiver.\n \n @param store\n            IPreferenceStore\n"
" Identifier for the Error Color\n"
" Identifier for the Hyperlink Color\n"
" Identifier for the Active Hyperlink Colour\n"
" Identifier for the color used to show extra informations in labels, as a\n qualified name. For example in 'Foo.txt - myproject/bar', the qualifier\n is '- myproject/bar'.\n \n @since 3.4\n"
" Identifier for the color used to show label decorations For example in\n 'Foo.txt [1.16]', the decoration is '[1.16]'.\n \n @since 3.4\n"
" Identifier for the color used to counter informations For example in\n 'Foo.txt (2 matches)', the counter information is '(2 matches)'.\n \n @since 3.4\n"
" Identifier for the color used for the background of content assist\n popup dialogs.\n \n @since 3.4\n"
" Identifier for the color used for the foreground of content assist\n popup dialogs.\n \n @since 3.4\n"
" An interface used by a preference page to talk to\n its dialog.\n"
" Returns the preference store.\n\n @return the preference store, or <code>null</code> if none\n"
" Adjusts the enable state of the OK \n button to reflect the state of the currently active \n page in this container.\n <p>\n This method is called by the container itself\n when its preference page changes and may be called\n by the page at other times to force a button state\n update.\n </p>\n"
" Updates the message (or error message) shown in the message line to \n reflect the state of the currently active page in this container.\n <p>\n This method is called by the container itself\n when its preference page changes and may be called\n by the page at other times to force a message \n update.\n </p>\n"
" Updates the title to reflect the state of the \n currently active page in this container.\n <p>\n This method is called by the container itself\n when its page changes and may be called\n by the page at other times to force a title  \n update.\n </p>\n"
" The <code>ColorSelector</code> is a wrapper for a button that displays a\n selected <code>Color</code> and allows the user to change the selection.\n"
" Adds a property change listener to this <code>ColorSelector</code>.\n Events are fired when the color in the control changes via the user\n clicking an selecting a new one in the color dialog. No event is fired in\n the case where <code>setColorValue(RGB)</code> is invoked.\n \n @param listener\n            a property change listener\n @since 3.0\n"
" Get the button control being wrappered by the selector.\n \n @return <code>Button</code>\n"
" Return the currently displayed color.\n \n @return <code>RGB</code>\n"
" Removes the given listener from this <code>ColorSelector</code>. Has\n no affect if the listener is not registered.\n \n @param listener\n            a property change listener\n @since 3.0\n"
" Set the current color value and update the control.\n \n @param rgb\n            The new color.\n"
" Set whether or not the button is enabled.\n \n @param state\n            the enabled state.\n"
" Update the image being displayed on the button using the current color\n setting.\n"
" Activate the editor for this selector. This causes the color selection\n dialog to appear and wait for user input.\n \n @since 3.2\n"
" Create a new instance of the reciever and the button that it wrappers in\n the supplied parent <code>Composite</code>.\n \n @param parent\n            The parent of the button.\n"
" Property name that signifies the selected color of this\n <code>ColorSelector</code> has changed.\n \n @since 3.0\n"
" A field editor for a boolean type preference.\n"
""
""
" Returns the control responsible for displaying this field editor's label.\n This method can be used to set a tooltip for a\n <code>BooleanFieldEditor</code>. Note that the normal pattern of\n <code>getLabelControl(parent).setToolTipText(tooltipText)</code> does not\n work for boolean field editors, as it can lead to duplicate text (see bug\n 259952).\n \n @param parent\n            the parent composite\n @return the control responsible for displaying the label\n \n @since 3.5\n"
""
""
""
" Returns this field editor's current value.\n \n @return the value\n"
" Returns the change button for this field editor.\n \n @param parent\n            The Composite to create the receiver in.\n \n @return the change button\n"
""
""
""
" Informs this field editor's listener, if it has one, about a change to\n the value (<code>VALUE</code> property) provided that the old and new\n values are different.\n \n @param oldValue\n            the old value\n @param newValue\n            the new value\n"
""
" Creates a new boolean field editor\n"
" Creates a boolean field editor in the given style.\n \n @param name\n            the name of the preference this field editor works on\n @param labelText\n            the label text of the field editor\n @param style\n            the style, either <code>DEFAULT</code> or\n            <code>SEPARATE_LABEL</code>\n @param parent\n            the parent of the field editor's control\n @see #DEFAULT\n @see #SEPARATE_LABEL\n"
" Creates a boolean field editor in the default style.\n \n @param name\n            the name of the preference this field editor works on\n @param label\n            the label text of the field editor\n @param parent\n            the parent of the field editor's control\n"
" Style constant (value <code>0</code>) indicating the default layout where\n the field editor's check box appears to the left of the label.\n"
" Style constant (value <code>1</code>) indicating a layout where the field\n editor's label appears on the left with a check box on the right.\n"
" An abstract field editor that manages a list of input values. \n The editor displays a list containing the values, buttons for\n adding and removing values, and Up and Down buttons to adjust\n the order of elements in the list.\n <p>\n Subclasses must implement the <code>parseString</code>,\n <code>createList</code>, and <code>getNewInputObject</code>\n framework methods.\n </p>\n"
""
" Combines the given list of items into a single string.\n This method is the converse of <code>parseString</code>. \n <p>\n Subclasses must implement this method.\n </p>\n\n @param items the list of items\n @return the combined string\n @see #parseString\n"
" Creates a selection listener.\n"
""
""
""
""
" Returns this field editor's button box containing the Add, Remove,\n Up, and Down button.\n\n @param parent the parent control\n @return the button box\n"
" Returns this field editor's list control.\n\n @param parent the parent control\n @return the list control\n"
" Creates and returns a new item for the list.\n <p>\n Subclasses must implement this method.\n </p>\n\n @return a new item\n"
""
" Returns this field editor's shell.\n <p>\n This method is internal to the framework; subclassers should not call\n this method.\n </p>\n\n @return the shell\n"
" Splits the given string into a list of strings.\n This method is the converse of <code>createList</code>. \n <p>\n Subclasses must implement this method.\n </p>\n\n @param stringList the string\n @return an array of <code>String</code>\n @see #createList\n"
" Invoked when the selection in the list has changed.\n \n <p>\n The default implementation of this method utilizes the selection index\n and the size of the list to toggle the enablement of the up, down and\n remove buttons.\n </p>\n \n <p>\n Sublcasses may override.\n </p>\n \n @since 3.5\n"
""
""
" Return the Add button.  \n \n @return the button\n @since 3.5\n"
" Return the Remove button.  \n \n @return the button\n @since 3.5\n"
" Return the Up button.  \n \n @return the button\n @since 3.5\n"
" Return the Down button.  \n \n @return the button\n @since 3.5\n"
" Return the List.\n \n @return the list\n @since 3.5\n"
" Creates a new list field editor \n"
" Creates a list field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n"
" A field editor for an enumeration type preference.\n The choices are presented as a list of radio buttons.\n"
""
""
""
""
""
""
" Returns this field editor's radio group control.\n @param parent The parent to create the radioBox in\n @return the radio group control\n"
" Sets the indent used for the first column of the radion button matrix.\n\n @param indent the indent (in pixels)\n"
""
" Creates a new radio group field editor \n"
" Creates a radio group field editor.  \n This constructor does not use a <code>Group</code> to contain the radio buttons.\n It is equivalent to using the following constructor with <code>false</code>\n for the <code>useGroup</code> argument.\n <p>\n Example usage:\n <pre>\n		RadioGroupFieldEditor editor= new RadioGroupFieldEditor(\n			"GeneralPage.DoubleClick", resName, 1,\n			new String[][] {\n				{"Open Browser", "open"},\n				{"Expand Tree", "expand"}\n			},\n          parent);	\n </pre>\n </p>\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param numColumns the number of columns for the radio button presentation\n @param labelAndValues list of radio button [label, value] entries;\n  the value is returned when the radio button is selected\n @param parent the parent of the field editor's control\n"
" Creates a radio group field editor.\n <p>\n Example usage:\n <pre>\n		RadioGroupFieldEditor editor= new RadioGroupFieldEditor(\n			"GeneralPage.DoubleClick", resName, 1,\n			new String[][] {\n				{"Open Browser", "open"},\n				{"Expand Tree", "expand"}\n			},\n          parent,\n          true);	\n </pre>\n </p>\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param numColumns the number of columns for the radio button presentation\n @param labelAndValues list of radio button [label, value] entries;\n  the value is returned when the radio button is selected\n @param parent the parent of the field editor's control\n @param useGroup whether to use a Group control to contain the radio buttons\n"
" Provides a tree model for <code>PreferenceManager</code> content.\n \n @since 3.0\n"
""
""
""
""
""
""
" Set the manager for the preferences.\n @param manager The manager to set.\n \n @since 3.1\n"
""
" A field editor for a color type preference.\n"
""
" Computes the size of the color image displayed on the button.\n <p>\n This is an internal method and should not be called by clients.\n </p>\n \n @param window\n            the window to create a GC on for calculation.\n @return Point The image size\n  \n"
""
""
""
""
" Get the color selector used by the receiver.\n \n @return ColorSelector/\n"
" Returns the change button for this field editor.\n \n @param parent\n            The control to create the button in if required.\n @return the change button\n"
""
""
" Creates a new color field editor\n"
" Creates a color field editor.\n \n @param name\n            the name of the preference this field editor works on\n @param labelText\n            the label text of the field editor\n @param parent\n            the parent of the field editor's control\n"
" The BooleanPropertyAction is an action that set the values of a \n boolean property in the preference store.\n"
""
" Create a new instance of the receiver.\n @param title The displayable name of the action.\n @param preferenceStore The preference store to propogate changes to\n @param property The property that is being updated\n @throws IllegalArgumentException Thrown if preferenceStore or\n property are <code>null</code>.\n"
" A field editor for a combo box that allows the drop-down selection of one of\n a list of items.\n \n @since 3.3\n"
""
""
""
""
""
""
""
" Create the combo box field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param entryNamesAndValues the names (labels) and underlying values to populate the combo widget.  These should be\n arranged as: { {name1, value1}, {name2, value2}, ...}\n @param parent the parent composite\n"
" An abstract field editor for a string type preference that presents\n a string input field with a change button to its right to edit the\n input field's content. When the user presses the change button, the\n abstract framework method <code>changePressed()</code> gets called\n to compute a new string.\n"
""
" Notifies that this field editor's change button has been pressed.\n <p>\n Subclasses must implement this method to provide a corresponding\n new string for the text field. If the returned value is <code>null</code>,\n the currently displayed value remains.\n </p>\n\n @return the new string to display, or <code>null</code> to leave the\n  old string showing\n"
""
" Get the change control. Create it in parent if required.\n @param parent\n @return Button\n"
""
" Returns this field editor's shell.\n\n @return the shell\n"
" Sets the text of the change button.\n\n @param text the new text\n"
""
" Creates a new string button field editor \n"
" Creates a string button field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n"
" A special abstract preference page to host field editors.\n <p>\n Subclasses must implement the <code>createFieldEditors</code> method\n and should override <code>createLayout</code> if a special layout of the field\n editors is needed.\n </p>\n"
" Adds the given field editor to this page.\n\n @param editor the field editor\n"
" Adjust the layout of the field editors so that\n they are properly aligned.\n"
" Applys the font to the field editors managed by this page.\n"
" Recomputes the page's error state by calling <code>isValid</code> for\n every field editor.\n"
""
" Creates the page's field editors.\n <p>\n The default implementation of this framework method\n does nothing. Subclass must implement this method to\n create the field editors.\n </p>\n <p>\n Subclasses should call <code>getFieldEditorParent</code>\n to obtain the parent control for each field editor.\n This same parent should not be used for more than\n one editor as the parent may change for each field\n editor depending on the layout style of the page\n </p>\n"
"\n The field editor preference page implementation of an <code>IDialogPage</code>\n method disposes of this page's controls and images.\n Subclasses may override to release their own allocated SWT\n resources, but must call <code>super.dispose</code>.\n"
" Returns a parent composite for a field editor.\n <p>\n This value must not be cached since a new parent\n may be created each time this method called. Thus\n this method must be called each time a field editor\n is constructed.\n </p>\n\n @return a parent\n"
" Initializes all field editors.\n"
"\n The field editor preference page implementation of a <code>PreferencePage</code>\n method loads all the field editors with their default values.\n"
"\n The field editor preference page implementation of this \n <code>PreferencePage</code> method saves all field editors by\n calling <code>FieldEditor.store</code>. Note that this method\n does not save the preference store itself; it just stores the\n values back into the preference store.\n\n @see FieldEditor#store()\n"
" The field editor preference page implementation of this <code>IPreferencePage</code>\n (and <code>IPropertyChangeListener</code>) method intercepts <code>IS_VALID</code> \n events but passes other events on to its superclass.\n"
""
" Create a new instance of the reciever.\n"
" Creates a new field editor preference page with the given style,\n an empty title, and no image.\n\n @param style either <code>GRID</code> or <code>FLAT</code>\n"
" Creates a new field editor preference page with the given title \n and style, but no image.\n\n @param title the title of this preference page\n @param style either <code>GRID</code> or <code>FLAT</code>\n"
" Creates a new field editor preference page with the given title,\n image, and style.\n\n @param title the title of this preference page\n @param image the image for this preference page, or \n   <code>null</code> if none\n @param style either <code>GRID</code> or <code>FLAT</code>\n"
" Layout constant (value <code>0</code>) indicating that\n each field editor is handled as a single component.\n"
" Layout constant (value <code>1</code>) indicating that\n the field editors' basic controls are put into a grid layout.\n"
"\n The vertical spacing used by layout styles <code>FLAT</code> \n and <code>GRID</code>.\n"
"\n The margin width used by layout styles <code>FLAT</code> \n and <code>GRID</code>.\n"
"\n The margin height used by layout styles <code>FLAT</code> \n and <code>GRID</code>.\n"
" A preference dialog is a hierarchical presentation of preference pages. Each\n page is represented by a node in the tree shown on the left hand side of the\n dialog; when a node is selected, the corresponding page is shown on the right\n hand side.\n"
""
""
""
""
""
""
""
""
" Create the sash with right control on the right. Note\n that this method assumes GridData for the layout data\n of the rightControl.\n @param composite\n @param rightControl\n @return Sash\n \n @since 3.1\n"
" Creates the inner page container.\n \n @param parent\n @return Composite\n"
" Return the layout for the composite that contains\n the pages.\n @return PageLayout\n \n @since 3.1\n"
" Creates the wizard's title area.\n \n @param parent\n            the SWT parent for the title area composite.\n @return the created title area composite.\n"
" @param parent\n            the SWT parent for the tree area controls.\n @return the new <code>Control</code>.\n @since 3.0\n"
" Create a new <code>TreeViewer</code>.\n \n @param parent\n            the parent <code>Composite</code>.\n @return the <code>TreeViewer</code>.\n @since 3.0\n"
" Add the listeners to the tree viewer.\n @param viewer\n \n @since 3.1\n"
" Find the <code>IPreferenceNode</code> that has data the same id as the\n supplied value.\n \n @param nodeId\n            the id to search for.\n @return <code>IPreferenceNode</code> or <code>null</code> if not\n         found.\n"
" Get the last known right side width.\n \n @return the width.\n"
" Returns the preference mananger used by this preference dialog.\n \n @return the preference mananger\n"
""
" Get the name of the selected item preference\n \n @return String\n"
" @param selection\n            the <code>ISelection</code> to examine.\n @return the first element, or null if empty.\n"
" @return the <code>TreeViewer</code> for this dialog.\n @since 3.3\n"
" Save the values specified in the pages.\n <p>\n The default implementation of this framework method saves all pages of\n type <code>PreferencePage</code> (if their store needs saving and is a\n <code>PreferenceStore</code>).\n </p>\n <p>\n Subclasses may override.\n </p>\n"
" Notifies that the window's close button was pressed, the close menu was\n selected, or the ESCAPE key pressed.\n <p>\n The default implementation of this framework method sets the window's\n return code to <code>CANCEL</code> and closes the window using\n <code>close</code>. Subclasses may extend or reimplement.\n </p>\n"
" Notifies of the pressing of the Help button.\n <p>\n The default implementation of this framework method calls\n <code>performHelp</code> on the currently active page.\n </p>\n"
" Returns whether the current page is valid.\n \n @return <code>false</code> if the current page is not valid, or or\n         <code>true</code> if the current page is valid or there is no\n         current page\n"
" @param control\n            the <code>Control</code> to lay out.\n @since 3.0\n"
" The preference dialog implementation of this <code>Dialog</code>\n framework method sends <code>performOk</code> to all pages of the\n preference dialog, then calls <code>handleSave</code> on this dialog to\n save any state, and then calls <code>close</code> to close this dialog.\n"
" Selects the saved item in the tree of preference pages. If it cannot do\n this it saves the first one.\n"
" Display the given error message. The currently displayed message is saved\n and will be redisplayed when the error message is set to\n <code>null</code>.\n \n @param newErrorMessage\n            the errorMessage to display or <code>null</code>\n"
" Set the message text. If the message line currently displays an error,\n the message is stored and will be shown after a call to clearErrorMessage\n <p>\n Shortcut for <code>setMessage(newMessage, NONE)</code>\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n"
" Sets the message for this dialog with an indication of what type of\n message it is.\n <p>\n The valid message types are one of <code>NONE</code>,\n <code>INFORMATION</code>,<code>WARNING</code>, or\n <code>ERROR</code>.\n </p>\n <p>\n Note that for backward compatibility, a message of type\n <code>ERROR</code> is different than an error message (set using\n <code>setErrorMessage</code>). An error message overrides the current\n message until the error message is cleared. This method replaces the\n current message and does not affect the error message.\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n @param newType\n            the message type\n @since 2.0\n"
" Sets the minimum page size.\n \n @param minWidth\n            the minimum page width\n @param minHeight\n            the minimum page height\n @see #setMinimumPageSize(Point)\n"
" Sets the minimum page size.\n \n @param size\n            the page size encoded as <code>new Point(width,height)</code>\n @see #setMinimumPageSize(int,int)\n"
" Sets the preference store for this preference dialog.\n \n @param store\n            the preference store\n @see #getPreferenceStore\n"
" Sets the name of the selected item preference. Public equivalent to\n <code>setSelectedNodePreference</code>.\n \n @param pageId\n            The identifier for the page\n @since 3.0\n"
" Sets the name of the selected item preference.\n \n @param pageId\n            The identifier for the page\n"
" Shows the preference page corresponding to the given preference node.\n Does nothing if that page is already current.\n \n @param node\n            the preference node, or <code>null</code> if none\n @return <code>true</code> if the page flip was successful, and\n         <code>false</code> is unsuccessful\n"
" Create the page for the node.\n @param node\n \n @since 3.1\n"
" Get the page for the node.\n @param node\n @return IPreferencePage\n \n @since 3.1\n"
" Updates this dialog's controls to reflect the current page.\n"
""
""
""
" Update the tree to use the specified <code>Font</code>.\n \n @param dialogFont\n            the <code>Font</code> to use.\n @since 3.0\n"
" Returns the currentPage.\n @return IPreferencePage\n @since 3.1\n"
" Sets the current page.\n @param currentPage\n \n @since 3.1\n"
" Set the treeViewer.\n @param treeViewer\n \n @since 3.1\n"
" Get the composite that is showing the page.\n\n @return Composite.\n \n @since 3.1\n"
" Set the composite that is showing the page.\n @param pageContainer Composite\n \n @since 3.1\n"
" Create the page control for the supplied page.\n \n @param page - the preference page to be shown\n @param parent - the composite to parent the page\n \n @since 3.1\n"
" @see org.eclipse.jface.dialogs.IPageChangeProvider#getSelectedPage()\n \n @since 3.1\n"
" @see org.eclipse.jface.dialogs.IPageChangeProvider#addPageChangedListener(org.eclipse.jface.dialogs.IPageChangedListener)\n @since 3.1\n"
" @see org.eclipse.jface.dialogs.IPageChangeProvider#removePageChangedListener(org.eclipse.jface.dialogs.IPageChangedListener)\n @since 3.1\n"
" Notifies any selection changed listeners that the selected page\n has changed.\n Only listeners registered at the time this method is called are notified.\n\n @param event a selection changed event\n\n @see IPageChangedListener#pageChanged\n \n @since 3.1\n"
""
" Creates a new preference dialog under the control of the given preference\n manager.\n \n @param parentShell\n            the parent shell\n @param manager\n            the preference manager\n"
" Indentifier for the error image\n"
" Title area fields\n"
" Return code used when dialog failed\n"
" A field editor for a font type preference.\n"
""
""
""
""
""
""
" Returns the change button for this field editor.\n\n @param parent The Composite to create the button in if required.\n @return the change button\n"
""
" Returns the preferred preview height. \n\n @return the height, or <code>-1</code> if no previewer\n  is installed\n"
" Returns the preview control for this field editor.\n\n @return the preview control\n"
" Returns the value control for this field editor. The value control\n displays the currently selected font name.\n @param parent The Composite to create the viewer in if required\n @return the value control\n"
" Sets the text of the change button.\n\n @param text the new text\n"
" Store the default preference for the field\n being edited\n"
""
" Creates a new font field editor \n"
" Creates a font field editor with an optional preview area.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param previewAreaText the text used for the preview window. If it is\n <code>null</code> there will be no preview area,\n @param parent the parent of the field editor's control\n"
" Creates a font field editor without a preview.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n"
" An interface for a preference page. This interface\n is used primarily by the page's container \n"
" Computes a size for this page's UI component. \n\n @return the size of the preference page encoded as\n   <code>new Point(width,height)</code>, or \n   <code>(0,0)</code> if the page doesn't currently have any UI component\n"
" Returns whether this dialog page is in a valid state.\n \n @return <code>true</code> if the page is in a valid state,\n   and <code>false</code> if invalid\n"
" Checks whether it is alright to leave this page.\n \n @return <code>false</code> to abort page flipping and the\n  have the current page remain visible, and <code>true</code>\n  to allow the page flip\n"
" Notifies that the container of this preference page has been canceled.\n \n @return <code>false</code> to abort the container's cancel \n  procedure and <code>true</code> to allow the cancel to happen\n"
" Notifies that the OK button of this page's container has been pressed.\n \n @return <code>false</code> to abort the container's OK\n  processing and <code>true</code> to allow the OK to happen\n"
" Sets or clears the container of this page.\n\n @param preferencePageContainer the preference page container, or <code>null</code> \n"
" Sets the size of this page's UI component.\n\n @param size the size of the preference page encoded as\n   <code>new Point(width,height)</code>\n"
" Interface to a node in a preference dialog. \n A preference node maintains a label and image used to display the\n node in a preference dialog (usually in the form of a tree), \n as well as the preference page this node stands for.\n\n The node may use lazy creation for its page\n\n Note that all preference nodes must be dispose their resources.\n The node must dispose the page managed by this node, and any SWT resources\n allocated by this node (Images, Fonts, etc).\n However the node itself may be reused.\n"
" Adds the given preference node as a subnode of this\n preference node.\n\n @param node the node to add\n"
" Creates the preference page for this node.\n"
" Release the page managed by this node, and any SWT resources\n held onto by this node (Images, Fonts, etc).  \n\n Note that nodes are reused so this is not a call to dispose the\n node itself.\n"
" Returns the subnode of this contribution node with the given node id.\n\n @param id the preference node id\n @return the subnode, or <code>null</code> if none\n"
" Returns the id of this contribution node.\n This id identifies a contribution node relative to its parent.\n\n @return the node id\n"
" Returns the image used to present this node in a preference dialog.\n\n @return the image for this node, or <code>null</code>\n   if there is no image for this node\n"
" Returns the text label used to present this node in a preference dialog.\n\n @return the text label for this node, or <code>null</code>\n   if there is no label for this node\n"
" Returns the preference page for this node.\n\n @return the preference page\n"
" Returns an iterator over the subnodes (immediate children)\n of this contribution node.\n\n @return an IPreferenceNode array containing the child nodes\n"
" Removes the subnode of this preference node with the given node id.\n\n @param id the subnode id\n @return the removed subnode, or <code>null</code> if none\n"
" Removes the given preference node from the list of subnodes\n (immediate children) of this node.\n\n @param node the node to remove\n @return <code>true</code> if the node was removed,\n  and <code>false</code> otherwise\n"
" Abstract base implementation for all preference page implementations.\n <p>\n Subclasses must implement the <code>createContents</code> framework\n method to supply the page's main control.\n </p>\n <p>\n Subclasses should extend the <code>doComputeSize</code> framework\n method to compute the size of the page's control.\n </p>\n <p>\n Subclasses may override the <code>performOk</code>, <code>performApply</code>, \n <code>performDefaults</code>, <code>performCancel</code>, and <code>performHelp</code>\n framework methods to react to the standard button events.\n </p>\n <p>\n Subclasses may call the <code>noDefaultAndApplyButton</code> framework\n method before the page's control has been created to suppress\n the standard Apply and Defaults buttons.\n </p>\n"
" Computes the size for this page's UI control.\n <p>\n The default implementation of this <code>IPreferencePage</code>\n method returns the size set by <code>setSize</code>; if no size\n has been set, but the page has a UI control, the framework\n method <code>doComputeSize</code> is called to compute the size.\n </p>\n\n @return the size of the preference page encoded as\n   <code>new Point(width,height)</code>, or \n   <code>(0,0)</code> if the page doesn't currently have any UI component\n"
" Contributes additional buttons to the given composite.\n <p>\n The default implementation of this framework hook method does\n nothing. Subclasses should override this method to contribute buttons \n to this page's button bar. For each button a subclass contributes,\n it must also increase the parent's grid layout number of columns\n by one; that is,\n <pre>\n ((GridLayout) parent.getLayout()).numColumns++);\n </pre>\n </p>\n\n @param parent the button bar\n"
" Creates and returns the SWT control for the customized body \n of this preference page under the given parent composite.\n <p>\n This framework method must be implemented by concrete subclasses. Any\n subclass returning a <code>Composite</code> object whose <code>Layout</code>\n has default margins (for example, a <code>GridLayout</code>) are expected to\n set the margins of this <code>Layout</code> to 0 pixels. \n </p>\n\n @param parent the parent composite\n @return the new control\n"
" The <code>PreferencePage</code> implementation of this \n <code>IDialogPage</code> method creates a description label\n and button bar for the page. It calls <code>createContents</code>\n to create the custom contents of the page.\n <p>\n If a subclass that overrides this method creates a <code>Composite</code>\n that has a layout with default margins (for example, a <code>GridLayout</code>)\n it is expected to set the margins of this <code>Layout</code> to 0 pixels.\n @see IDialogPage#createControl(Composite)\n"
" Apply the dialog font to the composite and it's children\n if it is set. Subclasses may override if they wish to\n set the font themselves.\n @param composite\n"
" Creates and returns an SWT label under the given composite.\n\n @param parent the parent composite\n @return the new label\n"
" Computes the size needed by this page's UI control.\n <p>\n All pages should override this method and set the appropriate sizes\n of their widgets, and then call <code>super.doComputeSize</code>.\n </p>\n\n @return the size of the preference page encoded as\n   <code>new Point(width,height)</code>\n"
" Returns the preference store of this preference page.\n <p>\n This is a framework hook method for subclasses to return a\n page-specific preference store. The default implementation\n returns <code>null</code>.\n </p>\n\n @return the preference store, or <code>null</code> if none\n"
" Returns the container of this page.\n\n @return the preference page container, or <code>null</code> if this\n   page has yet to be added to a container\n"
" Returns the preference store of this preference page.\n\n @return the preference store , or <code>null</code> if none\n"
"\n The preference page implementation of an <code>IPreferencePage</code>\n method returns whether this preference page is valid. Preference\n pages are considered valid by default; call <code>setValid(false)</code>\n to make a page invalid.\n @see IPreferencePage#isValid()\n"
" Suppresses creation of the standard Default and Apply buttons\n for this page.\n <p>\n Subclasses wishing a preference page without these buttons\n should call this framework method before the page's control\n has been created.\n </p>\n"
" The <code>PreferencePage</code> implementation of this \n <code>IPreferencePage</code> method returns <code>true</code>\n if the page is valid.\n @see IPreferencePage#okToLeave()\n"
" Performs special processing when this page's Apply button has been pressed.\n <p>\n This is a framework hook method for sublcasses to do special things when\n the Apply button has been pressed.\n The default implementation of this framework method simply calls\n <code>performOk</code> to simulate the pressing of the page's OK button.\n </p>\n \n @see #performOk\n"
"\n The preference page implementation of an <code>IPreferencePage</code>\n method performs special processing when this page's Cancel button has\n been pressed.\n <p>\n This is a framework hook method for subclasses to do special things when\n the Cancel button has been pressed. The default implementation of this\n framework method does nothing and returns <code>true</code>.\n @see IPreferencePage#performCancel()\n"
" Performs special processing when this page's Defaults button has been pressed.\n <p>\n This is a framework hook method for subclasses to do special things when\n the Defaults button has been pressed.\n Subclasses may override, but should call <code>super.performDefaults</code>.\n </p>\n"
""
""
" Sets the preference store for this preference page.\n <p>\n If preferenceStore is set to null, getPreferenceStore\n will invoke doGetPreferenceStore the next time it is called.\n </p>\n\n @param store the preference store, or <code>null</code>\n @see #getPreferenceStore\n"
""
" The <code>PreferencePage</code> implementation of this <code>IDialogPage</code>\n method extends the <code>DialogPage</code> implementation to update\n the preference page container title. Subclasses may extend.\n @see IDialogPage#setTitle(String)\n"
" Sets whether this page is valid.\n The enable state of the container buttons and the\n apply button is updated when a page's valid state \n changes.\n <p>\n\n @param b the new valid state\n"
""
" Updates the enabled state of the Apply button to reflect whether \n this page is valid.\n"
" Creates a composite with a highlighted Note entry and a message text.\n This is designed to take up the full width of the page.\n \n @param font the font to use\n @param composite the parent composite\n @param title the title of the note\n @param message the message for the note\n @return the composite for the note\n"
" Returns the Apply button.\n \n @return the Apply button\n"
" Returns the Restore Defaults button.\n \n @return the Restore Defaults button\n"
""
" Apply the data to the receiver. By default do nothing.\n @param data\n @since 3.1\n"
""
""
" Creates a new preference page with an empty title and no image.\n"
" Creates a new preference page with the given title and no image.\n\n @param title the title of this preference page\n"
" Creates a new abstract preference page with the given title and image.\n\n @param title the title of this preference page\n @param image the image for this preference page,\n  or <code>null</code> if none\n"
" A field editor for an integer type preference.\n"
" Sets the range of valid values for this field.\n \n @param min the minimum allowed value (inclusive)\n @param max the maximum allowed value (inclusive)\n"
""
""
""
""
" Returns this field editor's current value as an integer.\n\n @return the value\n @exception NumberFormatException if the <code>String</code> does not\n   contain a parsable integer\n"
" Creates a new integer field editor \n"
" Creates an integer field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n"
" Creates an integer field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n @param textLimit the maximum number of characters in the text.\n"
" A field editor for a string type preference.\n <p>\n This class may be used as is, or subclassed as required.\n </p>\n"
""
" Checks whether the text input field contains a valid value or not.\n\n @return <code>true</code> if the field value is valid,\n   and <code>false</code> if invalid\n"
" Hook for subclasses to do specific state checks.\n <p>\n The default implementation of this framework method does\n nothing and returns <code>true</code>.  Subclasses should \n override this method to specific state checks.\n </p>\n\n @return <code>true</code> if the field value is valid,\n   and <code>false</code> if invalid\n"
" Fills this field editor's basic controls into the given parent.\n <p>\n The string field implementation of this <code>FieldEditor</code>\n framework method contributes the text field. Subclasses may override\n but must call <code>super.doFillIntoGrid</code>.\n </p>\n"
""
""
""
" Returns the error message that will be displayed when and if \n an error occurs.\n\n @return the error message, or <code>null</code> if none\n"
""
" Returns the field editor's value.\n\n @return the current value\n"
" Returns this field editor's text control.\n\n @return the text control, or <code>null</code> if no\n text field is created yet\n"
" Returns this field editor's text control.\n <p>\n The control is created if it does not yet exist\n </p>\n\n @param parent the parent\n @return the text control\n"
" Returns whether an empty string is a valid value.\n\n @return <code>true</code> if an empty string is a valid value, and\n  <code>false</code> if an empty string is invalid\n @see #setEmptyStringAllowed\n"
""
""
" Sets whether the empty string is a valid value or not.\n\n @param b <code>true</code> if the empty string is allowed,\n  and <code>false</code> if it is considered invalid\n"
" Sets the error message that will be displayed when and if \n an error occurs.\n\n @param message the error message\n"
""
" Sets this field editor's value.\n\n @param value the new value, or <code>null</code> meaning the empty string\n"
" Sets this text field's text limit.\n\n @param limit the limit on the number of character in the text\n  input field, or <code>UNLIMITED</code> for no limit\n\n"
" Sets the strategy for validating the text.\n <p>\n Calling this method has no effect after <code>createPartControl</code>\n is called. Thus this method is really only useful for subclasses to call\n in their constructor. However, it has public visibility for backward \n compatibility.\n </p>\n\n @param value either <code>VALIDATE_ON_KEY_STROKE</code> to perform\n  on the fly checking (the default), or <code>VALIDATE_ON_FOCUS_LOST</code> to\n  perform validation only after the text has been typed in\n"
" Shows the error message set via <code>setErrorMessage</code>.\n"
" Informs this field editor's listener, if it has one, about a change\n to the value (<code>VALUE</code> property) provided that the old and\n new values are different.\n <p>\n This hook is <em>not</em> called when the text is initialized \n (or reset to the default value) from the preference store.\n </p>\n"
""
" Creates a new string field editor \n"
" Creates a string field editor.\n Use the method <code>setTextLimit</code> to limit the text.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param width the width of the text input field in characters,\n  or <code>UNLIMITED</code> for no limit\n @param strategy either <code>VALIDATE_ON_KEY_STROKE</code> to perform\n  on the fly checking (the default), or <code>VALIDATE_ON_FOCUS_LOST</code> to\n  perform validation only after the text has been typed in\n @param parent the parent of the field editor's control\n @since 2.0\n"
" Creates a string field editor.\n Use the method <code>setTextLimit</code> to limit the text.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param width the width of the text input field in characters,\n  or <code>UNLIMITED</code> for no limit\n @param parent the parent of the field editor's control\n"
" Creates a string field editor of unlimited width.\n Use the method <code>setTextLimit</code> to limit the text.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n"
" Validation strategy constant (value <code>0</code>) indicating that\n the editor should perform validation after every key stroke.\n\n @see #setValidateStrategy\n"
" Validation strategy constant (value <code>1</code>) indicating that\n the editor should perform validation only when the text widget \n loses focus.\n\n @see #setValidateStrategy\n"
" Text limit constant (value <code>-1</code>) indicating unlimited\n text limit and width.\n"
" Old text value.\n @since 3.4 this field is protected.\n"
" IPersistentPreferenceStore is a preference store that can \n be saved.\n"
" Saves the non-default-valued preferences known to this preference\n store to the file from which they were originally loaded.\n\n @exception java.io.IOException if there is a problem saving this store\n"
" A field editor for a file path type preference. A standard file \n dialog appears when the user presses the change button.\n"
""
""
" Sets this file field editor's file extension filter.\n\n @param extensions a list of file extension, or <code>null</code> \n to set the filter to the system's default value\n"
" Creates a new file field editor \n"
" Creates a file field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n"
" Creates a file field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param enforceAbsolute <code>true</code> if the file path\n  must be absolute, and <code>false</code> otherwise\n @param parent the parent of the field editor's control\n"
" Creates a file field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param enforceAbsolute <code>true</code> if the file path\n  must be absolute, and <code>false</code> otherwise\n @param validationStrategy either {@link StringButtonFieldEditor#VALIDATE_ON_KEY_STROKE}\n  to perform on the fly checking, or {@link StringButtonFieldEditor#VALIDATE_ON_FOCUS_LOST}\n  (the default) to perform validation only after the text has been typed in\n @param parent the parent of the field editor's control.\n @since 3.4\n @see StringButtonFieldEditor#VALIDATE_ON_KEY_STROKE\n @see StringButtonFieldEditor#VALIDATE_ON_FOCUS_LOST\n"
" The <code>IPreferenceStore</code> interface represents a table mapping\n named preferences to values. If there is no value for a given name, \n then that preferences's default value is returned; and if there is no\n default value for that preference, then a default-default value is returned.\n The default-default values for the primitive types are as follows:\n <ul>\n 	<li><code>boolean</code> = <code>false</code></li>\n 	<li><code>double</code> = <code>0.0</code></li>\n 	<li><code>float</code> = <code>0.0f</code></li>\n 	<li><code>int</code> = <code>0</code></li>\n  <li><code>long</code> = <code>0</code></li>\n 	<li><code>String</code> = <code>""</code> (the empty string)</li>\n </ul>\n <p>\n Thus a preference store maintains two values for each of a set of\n names: a current value and a default value.\n The typical usage is to establish the defaults for all known preferences\n and then restore previously stored values for preferences whose values \n were different from their defaults. After the current values of\n the preferences have been modified, it is a simple matter to write\n out only those preferences whose values are different from their defaults.\n This two-tiered approach to saving and restoring preference setting\n minimized the number of preferences that need to be persisted; indeed,\n the normal starting state does not require storing any preferences\n at all.\n </p>\n <p>\n A property change event is reported whenever a preferences current\n value actually changes (whether through <code>setValue</code>,\n <code>setToDefault</code>, or other unspecified means). Note, however,\n that manipulating default values (with <code>setDefault</code>)\n does not cause such events to be reported.\n </p>\n <p>\n Clients who need a preference store may implement this interface or \n instantiate the standard implementation <code>PreferenceStore</code>.\n </p>\n\n @see PreferenceStore\n"
" <p>\n Adds a property change listener to this preference store.\n </p>\n <p>\n <b>Note</b> The types of the oldValue and newValue of the\n generated PropertyChangeEvent are determined by whether\n or not the typed API in IPreferenceStore was called.\n If values are changed via setValue(name,type) the \n values in the PropertyChangedEvent will be of that type.\n If they are set using a non typed API (i.e. #setToDefault\n or using the OSGI Preferences) the values will be unconverted\n Strings.\n </p>\n <p>\n A listener will be called in the same Thread\n that it is invoked in. Any Thread dependant listeners (such as \n those who update an SWT widget) will need to update in the\n correct Thread. In the case of an SWT update you can update\n using Display#syncExec(Runnable) or Display#asyncExec(Runnable).\n </p>\n <p>  \n Likewise any application that updates an IPreferenceStore \n from a Thread other than the UI Thread should be aware of\n any listeners that require an update in the UI Thread. \n </p>\n\n @param listener a property change listener\n @see org.eclipse.jface.util.PropertyChangeEvent\n @see #setToDefault(String)\n @see #setValue(String, boolean)\n @see #setValue(String, double)\n @see #setValue(String, float)\n @see #setValue(String, int)\n @see #setValue(String, long)\n @see #setValue(String, String)\n"
" Returns whether the named preference is known to this preference\n store.\n\n @param name the name of the preference\n @return <code>true</code> if either a current value or a default\n  value is known for the named preference, and <code>false</code> otherwise\n"
" Fires a property change event corresponding to a change to the\n current value of the preference with the given name.\n <p>\n This method is provided on this interface to simplify the implementation \n of decorators. There is normally no need to call this method since\n <code>setValue</code> and <code>setToDefault</code> report such\n events in due course. Implementations should funnel all preference\n changes through this method.\n </p>\n\n @param name the name of the preference, to be used as the property\n  in the event object\n @param oldValue the old value\n @param newValue the new value\n"
" Returns the current value of the boolean-valued preference with the\n given name.\n Returns the default-default value (<code>false</code>) if there\n is no preference with the given name, or if the current value \n cannot be treated as a boolean.\n\n @param name the name of the preference\n @return the boolean-valued preference\n"
" Returns the default value for the boolean-valued preference\n with the given name.\n Returns the default-default value (<code>false</code>) if there\n is no default preference with the given name, or if the default \n value cannot be treated as a boolean.\n\n @param name the name of the preference\n @return the default value of the named preference\n"
" Returns the default value for the double-valued preference\n with the given name.\n Returns the default-default value (<code>0.0</code>) if there\n is no default preference with the given name, or if the default \n value cannot be treated as a double.\n\n @param name the name of the preference\n @return the default value of the named preference\n"
" Returns the default value for the float-valued preference\n with the given name.\n Returns the default-default value (<code>0.0f</code>) if there\n is no default preference with the given name, or if the default \n value cannot be treated as a float.\n\n @param name the name of the preference\n @return the default value of the named preference\n"
" Returns the default value for the integer-valued preference\n with the given name.\n Returns the default-default value (<code>0</code>) if there\n is no default preference with the given name, or if the default \n value cannot be treated as an integer.\n\n @param name the name of the preference\n @return the default value of the named preference\n"
" Returns the default value for the long-valued preference\n with the given name.\n Returns the default-default value (<code>0L</code>) if there\n is no default preference with the given name, or if the default \n value cannot be treated as a long.\n\n @param name the name of the preference\n @return the default value of the named preference\n"
" Returns the default value for the string-valued preference\n with the given name.\n Returns the default-default value (the empty string <code>""</code>) \n is no default preference with the given name, or if the default \n value cannot be treated as a string.\n\n @param name the name of the preference\n @return the default value of the named preference\n"
" Returns the current value of the double-valued preference with the\n given name.\n Returns the default-default value (<code>0.0</code>) if there\n is no preference with the given name, or if the current value \n cannot be treated as a double.\n\n @param name the name of the preference\n @return the double-valued preference\n"
" Returns the current value of the float-valued preference with the\n given name.\n Returns the default-default value (<code>0.0f</code>) if there\n is no preference with the given name, or if the current value \n cannot be treated as a float.\n\n @param name the name of the preference\n @return the float-valued preference\n"
" Returns the current value of the integer-valued preference with the\n given name.\n Returns the default-default value (<code>0</code>) if there\n is no preference with the given name, or if the current value \n cannot be treated as an integter.\n\n @param name the name of the preference\n @return the int-valued preference\n"
" Returns the current value of the long-valued preference with the\n given name.\n Returns the default-default value (<code>0L</code>) if there\n is no preference with the given name, or if the current value \n cannot be treated as a long.\n\n @param name the name of the preference\n @return the long-valued preference\n"
" Returns the current value of the string-valued preference with the\n given name.\n Returns the default-default value (the empty string <code>""</code>)\n if there is no preference with the given name, or if the current value \n cannot be treated as a string.\n\n @param name the name of the preference\n @return the string-valued preference\n"
" Returns whether the current value of the preference with the given name\n has the default value.\n\n @param name the name of the preference\n @return <code>true</code> if the preference has a known default value\n and its current value is the same, and <code>false</code> otherwise\n (including the case where the preference is unknown to this store)\n"
" Returns whether the current values in this property store\n require saving.\n\n @return <code>true</code> if at least one of values of \n  the preferences known to this store has changed and \n  requires saving, and <code>false</code> otherwise.\n"
" Sets the current value of the preference with the given name to\n the given string value without sending a property change.\n <p>\n This method does not fire a property change event and \n should only be used for setting internal preferences \n that are not meant to be processed by listeners.\n Normal clients should instead call #setValue.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Removes the given listener from this preference store.\n Has no affect if the listener is not registered.\n\n @param listener a property change listener\n"
" Sets the default value for the double-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
" Sets the default value for the float-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
" Sets the default value for the integer-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
" Sets the default value for the long-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
" Sets the default value for the string-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param defaultObject the new default value for the preference\n"
" Sets the default value for the boolean-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
" Sets the current value of the preference with the given name back\n to its default value.\n <p>\n Note that the preferred way of re-initializing a preference to the\n appropriate default value is to call <code>setToDefault</code>.\n This is implemented by removing the named value from the store, \n thereby exposing the default value.\n </p>\n\n @param name the name of the preference\n"
" Sets the current value of the double-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Sets the current value of the float-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Sets the current value of the integer-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Sets the current value of the long-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Sets the current value of the string-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
" Sets the current value of the boolean-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
" The default-default value for boolean preferences (<code>false</code>).\n"
" The default-default value for double preferences (<code>0.0</code>).\n"
" The default-default value for float preferences (<code>0.0f</code>).\n"
" The default-default value for int preferences (<code>0</code>).\n"
" The default-default value for long preferences (<code>0L</code>).\n"
" The default-default value for String preferences (<code>""</code>).\n"
" The string representation used for <code>true</code> (<code>"true"</code>).\n"
" The string representation used for <code>false</code> (<code>"false"</code>).\n"
" A concrete preference store implementation based on an internal\n <code>java.util.Properties</code> object, with support for persisting the\n non-default preference values to files or streams.\n <p>\n This class was not designed to be subclassed.\n </p>\n \n @see IPreferenceStore\n @noextend This class is not intended to be subclassed by clients.\n"
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
" Prints the contents of this preference store to the given print stream.\n \n @param out\n            the print stream\n"
" Prints the contents of this preference store to the given print writer.\n \n @param out\n            the print writer\n"
" Loads this preference store from the file established in the constructor\n <code>PreferenceStore(java.lang.String)</code> (or by\n <code>setFileName</code>). Default preference values are not affected.\n \n @exception java.io.IOException\n                if there is a problem loading this store\n"
" Loads this preference store from the given input stream. Default\n preference values are not affected.\n \n @param in\n            the input stream\n @exception java.io.IOException\n                if there is a problem loading this store\n"
""
" Returns an enumeration of all preferences known to this store which have\n current values other than their default value.\n \n @return an array of preference names\n"
""
""
" Saves the non-default-valued preferences known to this preference store\n to the file from which they were originally loaded.\n \n @exception java.io.IOException\n                if there is a problem saving this store\n"
" Saves this preference store to the given output stream. The given string\n is inserted as header information.\n \n @param out\n            the output stream\n @param header\n            the header\n @exception java.io.IOException\n                if there is a problem saving this store\n"
""
""
""
""
""
""
" Sets the name of the file used when loading and storing this preference\n store.\n <p>\n Afterward, the methods <code>load()</code> and <code>save()</code>\n can be used to load and store this preference store.\n </p>\n \n @param name\n            the file name\n @see #load()\n @see #save()\n"
""
""
""
""
""
""
""
" Creates an empty preference store.\n <p>\n Use the methods <code>load(InputStream)</code> and\n <code>save(InputStream)</code> to load and store this preference store.\n </p>\n \n @see #load(InputStream)\n @see #save(OutputStream, String)\n"
" Creates an empty preference store that loads from and saves to the a\n file.\n <p>\n Use the methods <code>load()</code> and <code>save()</code> to load\n and store this preference store.\n </p>\n \n @param filename\n            the file name\n @see #load()\n @see #save()\n"
" Provides labels for <code>IPreferenceNode</code> objects.\n \n @since 3.0\n"
" @param element must be an instance of <code>IPreferenceNode</code>.\n @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)\n"
" @param element must be an instance of <code>IPreferenceNode</code>.\n @see org.eclipse.jface.viewers.ILabelProvider#getImage(java.lang.Object)\n"
""
" A field editor for a directory path type preference. A standard directory\n dialog appears when the user presses the change button.\n"
""
""
" Creates a new directory field editor \n"
" Creates a directory field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param parent the parent of the field editor's control\n"
" A preference manager maintains a hierarchy of preference nodes and\n associated preference pages.\n"
" Adds the given preference node as a subnode of the\n node at the given path.\n\n @param path the path\n @param node the node to add\n @return <code>true</code> if the add was successful,\n  and <code>false</code> if there is no contribution at\n  the given path\n"
" Adds the given preference node as a subnode of the\n root.\n\n @param node the node to add, which must implement \n   <code>IPreferenceNode</code>\n"
" Recursively enumerates all nodes at or below the given node\n and adds them to the given list in the given order.\n \n @param node the starting node\n @param sequence a read-write list of preference nodes\n  (element type: <code>IPreferenceNode</code>)\n  in the given order\n @param order the traversal order, one of \n	<code>PRE_ORDER</code> and <code>POST_ORDER</code>\n"
" Finds and returns the contribution node at the given path.\n\n @param path the path\n @return the node, or <code>null</code> if none\n"
" Finds and returns the preference node directly\n below the top at the given path.\n\n @param path the path\n @param top top at the given path\n @return the node, or <code>null</code> if none\n \n @since 3.1\n"
" Returns all preference nodes managed by this\n manager.\n\n @param order the traversal order, one of \n	<code>PRE_ORDER</code> and <code>POST_ORDER</code>\n @return a list of preference nodes\n  (element type: <code>IPreferenceNode</code>)\n  in the given order\n"
" Returns the root node.\n Note that the root node is a special internal node\n that is used to collect together all the nodes that\n have no parent; it is not given out to clients.\n\n @return the root node\n"
" Returns the root level nodes of this preference manager.\n \n @return an array containing the root nodes\n @since 3.2\n"
" Removes the preference node at the given path.\n \n @param path\n            the path\n @return the node that was removed, or <code>null</code> if there was no\n         node at the given path\n"
" Removes the given prefreence node if it is managed by\n this contribution manager.\n\n @param node the node to remove\n @return <code>true</code> if the node was removed,\n  and <code>false</code> otherwise\n"
" Removes all contribution nodes known to this manager.\n"
" Creates a new preference manager.\n"
" Creates a new preference manager with the given\n path separator.\n \n @param separatorChar\n"
" Creates a new preference manager with the given\n path separator and root node.\n\n @param separatorChar the separator character\n @param rootNode the root node. \n\n @since 3.4\n"
" Pre-order traversal means visit the root first,\n then the children.\n"
" Post-order means visit the children, and then the root.\n"
"\nProvides a framework for wizards.\n<h2>\nPackage Specification</h2>\nA wizard dialog is a specialized window for walking the end user through\na sequence of steps; each step is presented on a separate page.\n<p>At the most abstract level, the protocol is given by 3 interfaces:\n<ul>\n<li>\n<tt>IWizard</tt> - a wizard consisting of several wizard pages</li>\n\n<li>\n<tt>IWizardPage</tt> - an individual wizard page</li>\n\n<li>\n<tt>IWizardContainer</tt> - the outside world from the point of view of\na wizard</li>\n</ul>\nA wizard is any object implementing <tt>IWizard</tt>. The abstract base\nclass <tt>Wizard</tt> is provided as a starting point; it is simpler to\nsubclass <tt>Wizard</tt> than to implement <tt>IWizard</tt> from scratch.\nThe main responsibility of a <tt>Wizard</tt> subclass is doing the real\nwork when the wizard finishes.\n<p>Similarly, a wizard page is any object implementing <tt>IWizardPage</tt>.\nThe abstract base class <tt>WizardPage</tt> is provided as a starting point.\nThe main responsibility of a <tt>WizardPage</tt> subclass is providing\nthe SWT controls and the backing logic for a single wizard page.\n<p><tt>WizardDialog</tt> is a ready-to-use JFace dialog that is instantiated\nwith a wizard and acts as the wizard's container. This dialog has a standard\nlayout: an area at the top containing the wizard's title, description,\nand image; the actual wizard page appears in the middle; below it is a\nprogress indicator; and at the bottom is an area with a message line and\na button bar containing Next, Back, Finish, Cancel, and Help buttons.\n<p><tt>WizardSelectionPage</tt>, a special abstract subclass of <tt>WizardPage</tt>,\nallows whole other wizards to be connected to a root page.\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n"
" Interface for a wizard.  A wizard maintains a list of wizard pages,\n stacked on top of each other in card layout fashion.\n <p>\n The class <code>Wizard</code> provides an abstract implementation\n of this interface. However, clients are also free to implement this \n interface if <code>Wizard</code> does not suit their needs.\n </p>\n @see Wizard\n"
" Adds any last-minute pages to this wizard.\n <p>\n This method is called just before the wizard becomes visible, to give the \n wizard the opportunity to add any lazily created pages.\n </p>\n"
" Returns whether this wizard could be finished without further user\n interaction.\n <p>\n The result of this method is typically used by the wizard container to enable\n or disable the Finish button.\n </p>\n\n @return <code>true</code> if the wizard could be finished,\n   and <code>false</code> otherwise\n"
" Creates this wizard's controls in the given parent control.\n <p>\n The wizard container calls this method to create the controls\n for the wizard's pages before the wizard is opened. This allows\n the wizard to size correctly; otherwise a resize may occur when\n moving to a new page.\n </p>\n\n @param pageContainer the parent control\n"
" Disposes of this wizard and frees all SWT resources.\n"
" Returns the container of this wizard.\n\n @return the wizard container, or <code>null</code> if this\n   wizard has yet to be added to a container\n"
" Returns the default page image for this wizard.\n <p>\n This image can be used for pages which do not\n supply their own image.\n </p>\n\n @return the default page image\n"
" Returns the dialog settings for this wizard.\n <p>\n The dialog store is used to record state between\n wizard invocations (for example, radio button selections,\n last directory, etc.).\n </p>\n\n @return the dialog settings, or <code>null</code> if none\n"
" Returns the successor of the given page.\n <p>\n This method is typically called by a wizard page\n </p>\n\n @param page the page\n @return the next page, or <code>null</code> if none\n"
" Returns the wizard page with the given name belonging to this wizard.\n\n @param pageName the name of the wizard page\n @return the wizard page with the given name, or <code>null</code> if none\n"
" Returns the number of pages in this wizard.\n\n @return the number of wizard pages\n"
" Returns all the pages in this wizard.\n\n @return a list of pages\n"
" Returns the predecessor of the given page.\n <p>\n This method is typically called by a wizard page\n </p>\n\n @param page the page\n @return the previous page, or <code>null</code> if none\n"
" Returns the first page to be shown in this wizard.\n\n @return the first wizard page\n"
" Returns the title bar color for this wizard.\n\n @return the title bar color\n"
" Returns the window title string for this wizard.\n\n @return the window title string, or <code>null</code> for no title\n"
" Returns whether help is available for this wizard.\n <p>\n The result of this method is typically used by the container to\n show or hide the Help button.\n </p>\n\n @return <code>true</code> if help is available,\n   and <code>false</code> if this wizard is helpless\n"
" Returns whether this wizard needs Previous and Next buttons.\n <p>\n The result of this method is typically used by the container.\n </p>\n\n @return <code>true</code> if Previous and Next buttons are required,\n   and <code>false</code> if none are needed\n"
" Returns whether this wizard needs a progress monitor.\n <p>\n The result of this method is typically used by the container.\n </p>\n\n @return <code>true</code> if a progress monitor is required,\n   and <code>false</code> if none is needed\n"
" Performs any actions appropriate in response to the user \n having pressed the Cancel button, or refuse if canceling\n now is not permitted.\n\n @return <code>true</code> to indicate the cancel request\n   was accepted, and <code>false</code> to indicate\n   that the cancel request was refused\n"
" Performs any actions appropriate in response to the user \n having pressed the Finish button, or refuse if finishing\n now is not permitted.\n\n Normally this method is only called on the container's\n current wizard. However if the current wizard is a nested wizard\n this method will also be called on all wizards in its parent chain.\n Such parents may use this notification to save state etc. However,\n the value the parents return from this method is ignored.\n\n @return <code>true</code> to indicate the finish request\n   was accepted, and <code>false</code> to indicate\n   that the finish request was refused\n"
" Sets or clears the container of this wizard.\n\n @param wizardContainer the wizard container, or <code>null</code> \n"
" <p><code>IWizardContainer2</code> is a supplement to \n <code>IWizardContainer</code> that adds a method for updating the size of \n the wizard shell based on the contents of the current page.</p>\n \n <p>The class <code>WizardDialog</code> provides a fully functional \n implementation of this interface which will meet the needs of\n most clients. However, clients are also free to implement this \n interface if <code>WizardDialog</code> does not suit their needs.\n </p>\n \n @see org.eclipse.jface.wizard.IWizardContainer\n @since 3.0\n"
" Updates the window size to reflect the state of the current wizard.\n <p>\n This method is called by the container itself\n when its wizard changes and may be called\n by the wizard at other times to force a window \n size change.\n </p>\n"
" Interface for containers that can host a wizard. It displays\n wizard pages, at most one of which is considered\n the current page. <code>getCurrentPage</code> returns the\n current page; <code>showPage</code> programmatically changes the\n the current page. Note that the pages need not all belong\n to the same wizard.\n <p>\n The class <code>WizardDialog</code> provides a fully functional \n implementation of this interface which will meet the needs of\n most clients. However, clients are also free to implement this \n interface if <code>WizardDialog</code> does not suit their needs.\n </p>\n <p>\n Implementors are responsible for disposing of their wizards.\n </p>\n \n @see org.eclipse.jface.wizard.IWizardContainer2\n"
" Returns the current wizard page for this container.\n\n @return the current wizard page, or <code>null</code> if the container\n   is not yet showing the wizard\n @see #showPage\n"
" Returns the shell for this wizard container.\n\n @return the shell, or <code>null</code> if this wizard\n   container does not have a shell\n"
" Makes the given page visible.\n <p>\n This method should not be use for normal page\n sequencing (back, next) which is handled by the \n container itself. It may, however, be used to\n move to another page in response to some custom\n action such as double clicking in a list.\n </p>\n\n @param page the page to show\n @see #getCurrentPage\n"
" Adjusts the enable state of the Back, Next, and Finish \n buttons to reflect the state of the currently active \n page in this container.\n <p>\n This method is called by the container itself\n when its wizard page changes and may be called\n by the page at other times to force a button state\n update.\n </p>\n"
" Updates the message (or error message) shown in the message line to \n reflect the state of the currently active page in this container.\n <p>\n This method is called by the container itself\n when its wizard page changes and may be called\n by the page at other times to force a message \n update.\n </p>\n"
" Updates the title bar (title, description, and image) to \n reflect the state of the currently active page in this container.\n <p>\n This method is called by the container itself\n when its wizard page changes and may be called\n by the page at other times to force a title bar \n update.\n </p>\n"
" Updates the window title to reflect the state of the current wizard.\n <p>\n This method is called by the container itself\n when its wizard changes and may be called\n by the wizard at other times to force a window \n title change.\n </p>\n"
" A dialog to show a wizard to the end user.\n <p>\n In typical usage, the client instantiates this class with a particular\n wizard. The dialog serves as the wizard container and orchestrates the\n presentation of its pages.\n <p>\n The standard layout is roughly as follows: it has an area at the top\n containing both the wizard's title, description, and image; the actual wizard\n page appears in the middle; below that is a progress indicator (which is made\n visible if needed); and at the bottom of the page is message line and a\n button bar containing Help, Next, Back, Finish, and Cancel buttons (or some\n subset).\n </p>\n <p>\n Clients may subclass <code>WizardDialog</code>, although this is rarely\n required.\n </p>\n"
" The Back button has been pressed.\n"
""
""
""
""
" Creates the buttons for this dialog's button bar.\n <p>\n The <code>WizardDialog</code> implementation of this framework method\n prevents the parent composite's columns from being made equal width in\n order to remove the margin between the Back and Next buttons.\n </p>\n \n @param parent\n            the parent composite to contain the buttons\n"
""
" Return the cancel button if the id is a the cancel id.\n \n @param id\n            the button id\n @return the button corresponding to the button id\n"
" The <code>WizardDialog</code> implementation of this\n <code>Window</code> method calls call <code>IWizard.addPages</code>\n to allow the current wizard to add extra pages, then\n <code>super.createContents</code> to create the controls. It then calls\n <code>IWizard.createPageControls</code> to allow the wizard to\n pre-create their page controls prior to opening, so that the wizard opens\n to the correct size. And finally it shows the first page.\n"
""
" Create the progress monitor part in the receiver.\n \n @param composite\n @param pmlayout\n @return ProgressMonitorPart\n"
" The Finish button has been pressed.\n"
""
" Returns the progress monitor for this wizard dialog (if it has one).\n \n @return the progress monitor, or <code>null</code> if this wizard\n         dialog does not have one\n"
" Returns the wizard this dialog is currently displaying.\n \n @return the current wizard\n"
" The Help button has been pressed.\n"
" The Next button has been pressed.\n"
" This implementation of IRunnableContext#run(boolean, boolean,\n IRunnableWithProgress) blocks until the runnable has been run, regardless\n of the value of <code>fork</code>. It is recommended that\n <code>fork</code> is set to true in most cases. If <code>fork</code>\n is set to <code>false</code>, the runnable will run in the UI thread\n and it is the runnable's responsibility to call\n <code>Display.readAndDispatch()</code> to ensure UI responsiveness.\n \n UI state is saved prior to executing the long-running operation and is\n restored after the long-running operation completes executing. Any\n attempt to change the UI state of the wizard in the long-running\n operation will be nullified when original UI state is restored.\n \n"
" Sets the minimum page size used for the pages.\n \n @param minWidth\n            the minimum page width\n @param minHeight\n            the minimum page height\n @see #setMinimumPageSize(Point)\n"
" Sets the minimum page size used for the pages.\n \n @param size\n            the page size encoded as <code>new Point(width,height)</code>\n @see #setMinimumPageSize(int,int)\n"
" Sets the size of all pages. The given size takes precedence over computed\n sizes.\n \n @param width\n            the page width\n @param height\n            the page height\n @see #setPageSize(Point)\n"
" Sets the size of all pages. The given size takes precedence over computed\n sizes.\n \n @param size\n            the page size encoded as <code>new Point(width,height)</code>\n @see #setPageSize(int,int)\n"
" Sets the wizard this dialog is currently displaying.\n \n @param newWizard\n            the wizard\n"
""
" Updates this dialog's controls to reflect the current page.\n"
""
""
" Computes the correct dialog size for the current page and resizes its\n shell if nessessary. Also causes the container to refresh its layout.\n \n @param page\n            the wizard page to use to resize the dialog\n @since 2.0\n"
""
""
""
""
""
""
" Notifies any selection changed listeners that the selected page has\n changed. Only listeners registered at the time this method is called are\n notified.\n \n @param event\n            a selection changed event\n \n @see IPageChangedListener#pageChanged\n \n @since 3.1\n"
" Adds a listener for page changes to the list of page changing listeners\n registered for this dialog. Has no effect if an identical listener is\n already registered.\n \n @param listener\n            a page changing listener\n @since 3.3\n"
" Removes the provided page changing listener from the list of page\n changing listeners registered for the dialog.\n \n @param listener\n            a page changing listener\n @since 3.3\n"
" Notifies any page changing listeners that the currently selected dialog\n page is changing. Only listeners registered at the time this method is\n called are notified.\n \n @param event\n            a selection changing event\n \n @see IPageChangingListener#handlePageChanging(PageChangingEvent)\n @since 3.3\n"
" Creates a new wizard dialog for the given wizard.\n \n @param parentShell\n            the parent shell\n @param newWizard\n            the wizard this dialog is working on\n"
" Image registry key for error message image (value\n <code>"dialog_title_error_image"</code>).\n"
" A layout for a container which includes several pages, like a notebook,\n wizard, or preference dialog. The size computed by this layout is the\n maximum width and height of all pages currently inserted into the\n container.\n"
""
" Returns the client area for the given composite according to this\n layout.\n \n @param c\n            the composite\n @return the client area rectangle\n"
""
" Lays outs the page according to this layout.\n \n @param w\n            the control\n"
" Sets the location of the page so that its origin is in the upper left\n corner.\n \n @param w\n            the control\n"
" Creates new layout object.\n \n @param mw\n            the margin width\n @param mh\n            the margin height\n @param minW\n            the minimum width\n @param minH\n            the minimum height\n"
" The margin width; <code>5</code> pixels by default.\n"
" The margin height; <code>5</code> pixels by default.\n"
" The minimum width; <code>0</code> pixels by default.\n"
" The minimum height; <code>0</code> pixels by default.\n"
" A wizard node acts a placeholder for a real wizard in a wizard \n selection page. It is done in such a way that the actual creation\n of a wizard can be deferred until the wizard is really needed.\n <p>\n When a wizard node comes into existence, its wizard may or may\n not have been created yet; <code>isContentCreated</code> can\n be used to determine which. A node may be asked for its wizard\n using <code>getWizard</code>, which will force it to be created\n if required. Once the client is done with a wizard node, its\n <code>dispose</code>method must be called to free up the wizard;\n once disposes, the node should no longer be used.\n </p>\n <p>\n This interface should be implemented by clients wishing to\n support this kind of wizard placeholder in a wizard selection page.\n </p>\n\n @see WizardSelectionPage\n"
" Disposes the wizard managed by this node. Does nothing\n if the wizard has not been created.\n <p>\n This is the last message that should ever be sent to this node.\n </p>\n"
" Returns the extent of the wizard for this node.\n <p>\n If the content has not yet been created, calling this method\n does not trigger the creation of the wizard. This allows\n this node to suggest an extent in advance of actually creating \n the wizard.\n </p>\n\n @return the extent, or <code>(-1, -1)</code> extent is not known\n"
" Returns the wizard this node stands for.\n <p>\n If the content has not been created beforehand, calling this\n method triggers the creation of the wizard and caches it so that\n the identical wizard object is returned on subsequent calls.\n </p>\n\n @return the wizard\n"
" Returns whether a wizard has been created for this node.\n\n @return <code>true</code> if a wizard has been created,\n   and <code>false</code> otherwise\n"
" An abstract implementation of a wizard page that manages a\n set of embedded wizards.\n <p>\n A wizard selection page should present a list of wizard nodes \n corresponding to other wizards. When the end user selects one of\n them from the list, the first page of the selected wizard becomes\n the next page. The only new methods introduced by this class are \n <code>getSelectedNode</code> and <code>setSelectedNode</code>. \n Otherwise, the subclass contract is the same as <code>WizardPage</code>.\n </p>\n"
" The <code>WizardSelectionPage</code> implementation of \n this <code>IWizardPage</code> method returns <code>true</code>\n if there is a selected node.\n"
"\n The <code>WizardSelectionPage</code> implementation of an <code>IDialogPage</code>\n method disposes of all nested wizards. Subclasses may extend.\n"
" The <code>WizardSelectionPage</code> implementation of \n this <code>IWizardPage</code> method returns the first page \n of the currently selected wizard if there is one.\n"
" Returns the currently selected wizard node within this page.\n \n @return the wizard node, or <code>null</code> if no node is selected\n"
" Sets or clears the currently selected wizard node within this page. \n \n @param node the wizard node, or <code>null</code> to clear\n"
" Creates a new wizard selection page with the given name, and\n with no title or image.\n\n @param pageName the name of the page\n"
" A standard implementation of an IProgressMonitor. It consists\n of a label displaying the task and subtask name, and a\n progress indicator to show progress. In contrast to\n <code>ProgressMonitorDialog</code> this class only implements\n <code>IProgressMonitor</code>.\n"
" Attaches the progress monitor part to the given cancel\n component.\n @param cancelComponent the control whose selection will\n trigger a cancel\n"
" Implements <code>IProgressMonitor.beginTask</code>.\n @see IProgressMonitor#beginTask(java.lang.String, int)\n"
" Implements <code>IProgressMonitor.done</code>.\n @see IProgressMonitor#done()\n"
" Escapes any occurrence of '&' in the given String so that\n it is not considered as a mnemonic\n character in SWT ToolItems, MenuItems, Button and Labels.\n @param in the original String\n @return The converted String\n"
" Creates the progress monitor's UI parts and layouts them\n according to the given layout. If the layout is <code>null</code>\n the part's default layout is used.\n @param layout The layout for the receiver.\n @param progressIndicatorHeight The suggested height of the indicator\n"
" Implements <code>IProgressMonitor.internalWorked</code>.\n @see IProgressMonitor#internalWorked(double)\n"
" Implements <code>IProgressMonitor.isCanceled</code>.\n @see IProgressMonitor#isCanceled()\n"
" Detach the progress monitor part from the given cancel\n component\n @param cc\n"
" Implements <code>IProgressMonitor.setCanceled</code>.\n @see IProgressMonitor#setCanceled(boolean)\n"
" Sets the progress monitor part's font.\n"
""
""
" Updates the label with the current task and subtask names.\n"
" Implements <code>IProgressMonitor.worked</code>.\n @see IProgressMonitor#worked(int)\n"
""
""
" Creates a ProgressMonitorPart.\n @param parent The SWT parent of the part.\n @param layout The SWT grid bag layout used by the part. A client\n can supply the layout to control how the progress monitor part\n is layed out. If null is passed the part uses its default layout.\n"
" Creates a ProgressMonitorPart.\n @param parent The SWT parent of the part.\n @param layout The SWT grid bag layout used by the part. A client\n can supply the layout to control how the progress monitor part\n is layed out. If null is passed the part uses its default layout.\n @param progressIndicatorHeight The height of the progress indicator in pixel.\n"
"the label "
"the current task name "
"the current sub task name "
"the progress indicator "
"the cancel component "
"true if canceled "
"current blocked status "
"the cancel lister attached to the cancel component "
" Interface for a wizard page.\n <p>\n The class <code>WizardPage</code> provides an abstract implementation\n of this interface. However, clients are also free to implement this \n interface if <code>WizardPage</code> does not suit their needs.\n </p>\n"
" Returns whether the next page could be displayed.\n\n @return <code>true</code> if the next page could be displayed,\n   and <code>false</code> otherwise\n"
" Returns this page's name.\n\n @return the name of this page\n"
" Returns the wizard page that would to be shown if the user was to\n press the Next button.\n\n @return the next wizard page, or <code>null</code> if none\n"
" Returns the wizard page that would to be shown if the user was to\n press the Back button.\n\n @return the previous wizard page, or <code>null</code> if none\n"
" Returns the wizard that hosts this wizard page.\n\n @return the wizard, or <code>null</code> if this page has not been\n   added to any wizard\n @see #setWizard\n"
" Returns whether this page is complete or not.\n <p>\n This information is typically used by the wizard to decide\n when it is okay to finish.\n </p>\n\n @return <code>true</code> if this page is complete, and\n  <code>false</code> otherwise\n"
" Sets the wizard page that would typically be shown \n if the user was to press the Back button.\n <p>\n This method is called by the container.\n </p>\n\n @param page the previous wizard page\n"
" Sets the wizard that hosts this wizard page.\n Once established, a page's wizard cannot be changed\n to a different wizard.\n\n @param newWizard the wizard\n @see #getWizard\n"
" An abstract base implementation of a wizard. A typical client subclasses\n <code>Wizard</code> to implement a particular wizard.\n <p>\n Subclasses may call the following methods to configure the wizard:\n <ul>\n <li><code>addPage</code></li>\n <li><code>setHelpAvailable</code></li>\n <li><code>setDefaultPageImageDescriptor</code></li>\n <li><code>setDialogSettings</code></li>\n <li><code>setNeedsProgressMonitor</code></li>\n <li><code>setTitleBarColor</code></li>\n <li><code>setWindowTitle</code></li>\n </ul>\n </p>\n <p>\n Subclasses may override these methods if required:\n <ul>\n <li>reimplement <code>createPageControls</code></li>\n <li>reimplement <code>performCancel</code></li>\n <li>extend <code>addPages</code></li>\n <li>reimplement <code>performFinish</code></li>\n <li>extend <code>dispose</code></li>\n </ul>\n </p>\n <p>\n Note that clients are free to implement <code>IWizard</code> from scratch\n instead of subclassing <code>Wizard</code>. Correct implementations of\n <code>IWizard</code> will work with any correct implementation of\n <code>IWizardPage</code>.\n </p>\n"
" Adds a new page to this wizard. The page is inserted at the end of the\n page list.\n \n @param page\n            the new page\n"
" The <code>Wizard</code> implementation of this <code>IWizard</code>\n method does nothing. Subclasses should extend if extra pages need to be\n added before the wizard opens. New pages should be added by calling\n <code>addPage</code>.\n"
""
" The <code>Wizard</code> implementation of this <code>IWizard</code>\n method creates all the pages controls using\n <code>IDialogPage.createControl</code>. Subclasses should reimplement\n this method if they want to delay creating one or more of the pages\n lazily. The framework ensures that the contents of a page will be created\n before attempting to show it.\n"
" The <code>Wizard</code> implementation of this <code>IWizard</code>\n method disposes all the pages controls using\n <code>DialogPage.dispose</code>. Subclasses should extend this method\n if the wizard instance maintains addition SWT resource that need to be\n disposed.\n"
""
""
""
""
""
""
""
""
" Returns the wizard's shell if the wizard is visible. Otherwise\n <code>null</code> is returned.\n \n @return Shell\n"
""
""
""
""
""
""
" The <code>Wizard</code> implementation of this <code>IWizard</code>\n method does nothing and returns <code>true</code>. Subclasses should\n reimplement this method if they need to perform any special cancel\n processing for their wizard.\n"
" Subclasses must implement this <code>IWizard</code> method to perform\n any special finish processing for their wizard.\n"
""
" Sets the default page image descriptor for this wizard.\n <p>\n This image descriptor will be used to generate an image for a page with\n no image of its own; the image will be computed once and cached.\n </p>\n \n @param imageDescriptor\n            the default page image descriptor\n"
" Sets the dialog settings for this wizard.\n <p>\n The dialog settings is used to record state between wizard invocations\n (for example, radio button selection, last import directory, etc.)\n </p>\n \n @param settings\n            the dialog settings, or <code>null</code> if none\n @see #getDialogSettings\n  \n"
" Controls whether the wizard needs Previous and Next buttons even if it\n currently contains only one page.\n <p>\n This flag should be set on wizards where the first wizard page adds\n follow-on wizard pages based on user input.\n </p>\n \n @param b\n            <code>true</code> to always show Next and Previous buttons,\n            and <code>false</code> to suppress Next and Previous buttons\n            for single page wizards\n"
" Sets whether help is available for this wizard.\n <p>\n The result of this method is typically used by the container to show or\n hide the Help button.\n </p>\n \n @param b\n            <code>true</code> if help is available, and\n            <code>false</code> if this wizard is helpless\n @see #isHelpAvailable()\n"
" Sets whether this wizard needs a progress monitor.\n \n @param b\n            <code>true</code> if a progress monitor is required, and\n            <code>false</code> if none is needed\n @see #needsProgressMonitor()\n"
" Sets the title bar color for this wizard.\n \n @param color\n            the title bar color\n"
" Sets the window title for the container that hosts this page to the given\n string.\n \n @param newTitle\n            the window title for the container\n"
" Creates a new empty wizard.\n"
" Image registry key of the default image for wizard pages (value\n <code>"org.eclipse.jface.wizard.Wizard.pageImage"</code>).\n"
" An abstract base implementation of a wizard page.\n <p>\n Subclasses must implement the <code>createControl</code> method\n to create the specific controls for the wizard page.\n </p>\n <p>\n Subclasses may call the following methods to configure the wizard page:\n <ul>\n  <li><code>setDescription</code></li>\n  <li><code>setErrorMessage</code></li>\n  <li><code>setImageDescriptor</code></li>\n  <li><code>setMessage</code></li>\n  <li><code>setPageComplete</code></li>\n  <li><code>setPreviousPage</code></li>\n  <li><code>setTitle</code></li>\n </ul>\n </p>\n <p>\n Subclasses may override these methods if required:\n <ul>\n  <li><code>performHelp</code> - may be reimplemented to display help for the page</li>  \n <li><code>canFlipToNextPage</code> - may be extended or reimplemented</li>\n  <li><code>isPageComplete</code> - may be extended </li>\n  <li><code>setDescription</code> - may be extended </li>\n  <li><code>setTitle</code> - may be extended </li>\n  <li><code>dispose</code> - may be extended to dispose additional allocated SWT resources</li>\n </ul>\n </p>\n <p>\n Note that clients are free to implement <code>IWizardPage</code> from scratch\n instead of subclassing <code>WizardPage</code>. Correct implementations of\n <code>IWizardPage</code> will work with any correct implementation of \n <code>IWizard</code>.\n </p>\n"
" The <code>WizardPage</code> implementation of this <code>IWizardPage</code>\n method returns <code>true</code> if this page is complete (<code>isPageComplete</code>)\n and there is a next page to flip to. Subclasses may override (extend or reimplement).\n\n @see #getNextPage\n @see #isPageComplete()\n"
" Returns the wizard container for this wizard page.\n\n @return the wizard container, or <code>null</code> if this\n   wizard page has yet to be added to a wizard, or the\n   wizard has yet to be added to a container\n"
" Returns the dialog settings for this wizard page.\n\n @return the dialog settings, or <code>null</code> if none\n"
""
""
""
""
" The <code>WizardPage</code> implementation of this method declared on\n <code>DialogPage</code> returns the shell of the container.\n The advantage of this implementation is that the shell is accessable\n once the container is created even though this page's control may not \n yet be created.\n"
""
" Returns whether this page is the current one in the wizard's container.\n\n @return <code>true</code> if the page is active,\n  and <code>false</code> otherwise\n"
" The <code>WizardPage</code> implementation of this <code>IWizard</code> method \n returns the value of an internal state variable set by\n <code>setPageComplete</code>. Subclasses may extend.\n"
" The <code>WizardPage</code> implementation of this <code>IDialogPage</code>\n method extends the <code>DialogPage</code> implementation to update\n the wizard container title bar. Subclasses may extend.\n"
" The <code>WizardPage</code> implementation of this method \n declared on <code>DialogPage</code> updates the container\n if this is the current page.\n"
" The <code>WizardPage</code> implementation of this method \n declared on <code>DialogPage</code> updates the container\n if this page is the current page.\n"
" The <code>WizardPage</code> implementation of this method \n declared on <code>DialogPage</code> updates the container\n if this is the current page.\n"
" Sets whether this page is complete. \n <p>\n This information is typically used by the wizard to decide\n when it is okay to move on to the next page or finish up.\n </p>\n\n @param complete <code>true</code> if this page is complete, and\n   and <code>false</code> otherwise\n @see #isPageComplete()\n"
""
" The <code>WizardPage</code> implementation of this <code>IDialogPage</code>\n method extends the <code>DialogPage</code> implementation to update\n the wizard container title bar. Subclasses may extend.\n"
""
" Returns a printable representation of this wizard page suitable\n only for debug purposes.\n"
" Creates a new wizard page with the given name, and\n with no title or image.\n\n @param pageName the name of the page\n"
" Creates a new wizard page with the given name, title, and image.\n\n @param pageName the name of the page\n @param title the title for this wizard page,\n   or <code>null</code> if none\n @param titleImage the image descriptor for the title of this wizard page,\n   or <code>null</code> if none\n"
"\n<p>\nInternal classes and helpers to implement the revision model and its UI presentation. See\nthe <tt><a href="../../../text/revisions/package.html">org.eclipse.jface.text.revisions</a></tt>\npackage for the API classes implementing the revision model.\n</p>\nContains everything needed to:\n<ul>\n  <li>paint revision information in the vertical ruler</li>\n  <li>adapt the revision information to (quick) diff scripts</li>\n</ul>\n<p>\nThis package is internal and may be subject to change without notice.\n</p>\n"
" A change region describes a contiguous range of lines that was changed in the same revision of a\n document. Once it is adjusted to diff information, the originally contiguous range may be split\n into several ranges or even be empty.\n\n @since 3.2\n"
" Returns the revision that this region belongs to.\n\n @return the revision that this region belongs to\n"
" Returns the original (before applying diff information) line range of this change region.\n\n @return the original (before applying diff information) line range of this change region\n"
" Returns the list of {@link ILineRange}s of this change region for which the revision\n information is still valid.\n\n @return the list of adjusted line ranges\n"
" Returns the line coverage of the adjusted ranges, an empty range if the coverage is empty.\n\n @return the line coverage of the adjusted ranges\n"
" Clears any adjusted ranges, restoring the original range.\n"
" Adjusts this change region to a diff hunk. This will change the adjusted ranges.\n\n @param hunk the diff hunk to adjust to\n"
""
" Creates a new change region for the given revision and line range.\n\n @param revision the revision of the new region\n @param lines the line range of the new region\n @throws IndexOutOfBoundsException if the line range is not well-formed\n"
" A selection provider for annotate revisions. Selections of a revision can currently happen in\n following ways - note that this list may be changed in the future:\n <ul>\n <li>when the user clicks the revision ruler with the mouse</li>\n <li>when the caret is moved to a revision's line (only on post-selection)</li>\n </ul>\n <p>\n Calling {@link #setSelection(ISelection)} will set the current sticky revision on the ruler.\n </p>\n\n @since 3.2\n"
""
""
""
""
" Computes the diff hunks from an {@link ILineDiffer}.\n\n @since 3.3\n"
" Converts the line-based information of {@link ILineDiffer} into {@link Hunk}s, grouping\n contiguous blocks of lines that are changed (added, deleted).\n\n @param differ the line differ to query\n @param lines the number of lines to query\n @return the corresponding {@link Hunk} information\n"
" Thrown to indicate that an attempt to create or modify a {@link Range} failed because it would\n have resulted in an illegal range. A range is illegal if its length is &lt;= 0 or if its start\n line is &lt; 0.\n\n @since 3.2\n"
" Constructs an <code>LineIndexOutOfBoundsException</code> with no detail message.\n"
" Constructs an <code>LineIndexOutOfBoundsException</code> with the specified detail message.\n\n @param s the detail message.\n"
" Constructs a new <code>LineIndexOutOfBoundsException</code>\n object with an argument indicating the illegal index.\n\n @param index the illegal index.\n"
" A strategy for painting the live annotate colors onto the vertical ruler column. It also manages\n the revision hover.\n\n @since 3.2\n"
" Sets the revision information to be drawn and triggers a redraw.\n\n @param info the revision information to show, <code>null</code> to draw none\n"
" Changes the rendering mode and triggers redrawing if needed.\n\n @param renderingMode the rendering mode\n @since 3.3\n"
" Sets the background color.\n\n @param background the background color, <code>null</code> for the platform's list\n        background\n"
" Sets the parent ruler - the delegating column must call this method as soon as it creates its\n control.\n\n @param parentRuler the parent ruler\n"
" Delegates the painting of the quick diff colors to this painter. The painter will draw the\n color boxes onto the passed {@link GC} for all model (document) lines in\n <code>visibleModelLines</code>.\n\n @param gc the {@link GC} to draw onto\n @param visibleLines the lines (in document offsets) that are currently (perhaps only\n        partially) visible\n"
" Sets the annotation model.\n\n @param model the annotation model, possibly <code>null</code>\n @see IVerticalRulerColumn#setModel(IAnnotationModel)\n"
" Returns the revision hover.\n\n @return the revision hover\n"
" Returns the selection provider.\n\n @return the selection provider\n"
" Sets the hover later returned by {@link #getHover()}.\n\n @param hover the hover\n"
" Returns <code>true</code> if the receiver can provide a hover for a certain document line.\n\n @param activeLine the document line of interest\n @return <code>true</code> if the receiver can provide a hover\n"
" Returns <code>true</code> if a revision model has been set, <code>false</code> otherwise.\n\n @return <code>true</code> if a revision model has been set, <code>false</code> otherwise\n"
" Returns the width in chars required to display information.\n\n @return the width in chars required to display information\n @since 3.3\n"
" Enables showing the revision id.\n\n @param show <code>true</code> to show the revision, <code>false</code> to hide it\n"
" Enables showing the revision author.\n\n @param show <code>true</code> to show the author, <code>false</code> to hide it\n"
" Adds a revision listener.\n\n @param listener the listener\n @since 3.3\n"
" Removes a revision listener.\n\n @param listener the listener\n @since 3.3\n"
" Creates a new revision painter for a vertical ruler column.\n\n @param column the column that will delegate{@link #paint(GC, ILineRange) painting} to the\n        newly created painter.\n @param sharedColors a shared colors object to store shaded colors in\n"
" A variable {@link org.eclipse.jface.text.source.ILineRange} with the following invariant:\n <ul>\n <li>{@link #start() start} &gt;= 0\n <li>{@link #length() length} &gt; 0, i.e. a range cannot be empty\n </ul>\n <p>\n Attempts to create or modify a <code>Range</code> such that this invariant would be violated\n result in a {@link LineIndexOutOfBoundsException} being\n thrown.\n </p>\n\n @since 3.2\n"
" Creates a new range with the same start and length as the passed line range.\n\n @param range the range to copy\n @return a <code>Range</code> with the same start and length as <code>range</code>\n @throws LineIndexOutOfBoundsException if the passed {@link ILineRange} does not adhere to the\n         contract of {@link Range}\n"
" Creates a new range equal to the passed line range.\n\n @param range the range to copy\n @return a <code>Range</code> equal to <code>range</code>\n"
" Creates a new range with the given start offset and length.\n\n @param start the first line of the new range, must be &gt;= 0\n @param length the number of lines included in the new range, must be &gt; 0\n @return a <code>Range</code> with the given start and length\n @throws LineIndexOutOfBoundsException if the parameters violate the invariant of\n         {@link Range}\n"
" Creates a new range with the given start and end offsets.\n\n @param start the first line of the new range, must be &gt;= 0\n @param end the first line not in the range any more (exclusive), must be &gt; <code>start</code>\n @return a <code>Range</code> with the given start and end offsets\n @throws LineIndexOutOfBoundsException if the parameters violate the invariant of\n         {@link Range}\n"
""
""
" Returns the first line contained in this range. Short equivalent of {@link #getStartLine()}.\n\n @return the first line contained in this range\n"
" Returns the number of lines contained in this range. Short equivalent of {@link #getNumberOfLines()}.\n\n @return the number of lines contained in this range\n"
" Returns the first line after this range. Equivalent to {@linkplain #start() start} + {@linkplain #length() length}.\n\n @return the first line after this range\n"
" Moves the receiver to <code>start</code>, keeping {@link #length()} constant.\n\n @param start the new start, must be &gt;= 0\n @throws LineIndexOutOfBoundsException if <code>start</code> &lt; 0\n"
" Moves this range such that the {@link #end()} is at <code>end</code>, keeping\n {@link #length()} constant.\n\n @param end the new end\n @throws LineIndexOutOfBoundsException if <code>end</code> &lt;= {@link #start()}\n"
" Moves the range by <code>delta</code> lines, keeping {@link #length()} constant. The\n resulting start line must be &gt;= 0.\n\n @param delta the number of lines to shift the range\n @throws LineIndexOutOfBoundsException if <code>-delta</code> &gt; {@link #start()}\n"
" Moves the start offset to <code>start</code>, keeping {@link #end()} constant.\n\n @param start the new start, must be &gt;= 0 and &lt; {@link #end()}\n @throws LineIndexOutOfBoundsException if <code>start</code> &lt; 0 or &gt;= {@link #end()}\n"
" Sets the end of this range, keeping {@link #start()} constant.\n\n @param end the new end, must be &gt; {@link #start()}\n @throws LineIndexOutOfBoundsException if <code>end</code> &lt;= {@link #start()}\n"
" Sets the length of this range, keeping {@link #start()} constant.\n\n @param length the new length, must be &gt; 0\n @throws LineIndexOutOfBoundsException if <code>length</code> &lt;= 0\n"
" Sets the length of this range, keeping {@link #end()} constant.\n\n @param length the new length, must be &gt; 0 and &lt;= {@link #end()}\n @throws LineIndexOutOfBoundsException if <code>length</code> &lt;= 0\n"
" Resizes the range by <code>delta</code> lines, keeping {@link #start()} constant.\n\n @param delta the number of lines to resize the range\n @throws LineIndexOutOfBoundsException if <code>-delta</code> &gt;= {@link #length()}\n"
" Resizes the range by <code>delta</code> lines by moving the start offset, {@link #end()} remains unchanged.\n\n @param delta the number of lines to resize the range\n @throws LineIndexOutOfBoundsException if <code>-delta</code> &gt;= {@link #length()}\n"
" Splits a range off the end of the receiver. The receiver is shortened to only include\n <code>remaining</code> lines after the split.\n\n @param remaining the number of lines to remain in the receiver, must be in [1, {@link #length() length})\n @return the split off range\n @throws LineIndexOutOfBoundsException if <code>remaining</code>&gt;= {@link #length()} or <code>remaining</code>&ltt;= 0\n"
" Returns <code>true</code> if the passed range has the same offset and length as the receiver.\n\n @param range another line range to compare the receiver to\n @return <code>true</code> if <code>range</code> has the same offset and length as the receiver\n"
""
" Utility for color operations.\n\n @since 3.3\n"
" Returns the human-perceived brightness of a color as float in [0.0, 1.0]. The used RGB\n weights come from http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC9.\n\n @param rgb the color\n @return the gray-scale value\n"
" Normalizes a color in its perceived brightness. Yellows are darkened, while blues and reds\n are lightened. Depending on the hue, the brightness range within the RGB gamut may be\n different, outside values are clipped. Note that this is an approximation; the returned RGB\n is not guaranteed to have the requested {@link #brightness(RGB) brightness}.\n\n @param color the color to normalize\n @param brightness the requested brightness, in [0,&nbsp;1]\n @return a normalized version of <code>color</code>\n @see #brightness(RGB)\n"
" Returns an RGB that lies between the given foreground and background\n colors using the given mixing factor. A <code>factor</code> of 1.0 will produce a\n color equal to <code>fg</code>, while a <code>factor</code> of 0.0 will produce one\n equal to <code>bg</code>.\n @param bg the background color\n @param fg the foreground color\n @param factor the mixing factor, must be in [0,&nbsp;1]\n\n @return the interpolated color\n"
" Returns an array of colors in a smooth palette from <code>start</code> to <code>end</code>.\n <p>\n The returned array has size <code>steps</code>, and the color at index 0 is <code>start</code>, the color\n at index <code>steps&nbsp;-&nbsp;1</code> is <code>end</code>.\n\n @param start the start color of the palette\n @param end the end color of the palette\n @param steps the requested size, must be &gt; 0\n @return an array of <code>steps</code> colors in the palette from <code>start</code> to <code>end</code>\n"
" Returns an array of colors with hues evenly distributed on the hue wheel defined by the <a\n href="http://en.wikipedia.org/wiki/HSV_color_space">HSB color space</a>. The returned array\n has size <code>steps</code>. The distance <var>d</var> between two successive colors is\n in [120&#176;,&nbsp;180&#176;].\n <p>\n The color at a given <code>index</code> has the hue returned by\n {@linkplain #computeHue(int) computeHue(index)}; i.e. the computed hues are not equidistant,\n but adaptively distributed on the color wheel.\n </p>\n <p>\n The first six colors returned correspond to the following {@link SWT} color constants:\n {@link SWT#COLOR_RED red}, {@link SWT#COLOR_GREEN green}, {@link SWT#COLOR_BLUE blue},\n {@link SWT#COLOR_YELLOW yellow}, {@link SWT#COLOR_CYAN cyan},\n {@link SWT#COLOR_MAGENTA magenta}.\n </p>\n\n @param steps the requested size, must be &gt;= 2\n @return an array of <code>steps</code> colors evenly distributed on the color wheel\n"
" Returns an indexed hue in [0&#176;,&nbsp;360&#176;), distributing the hues evenly on the hue wheel\n defined by the <a href="http://en.wikipedia.org/wiki/HSV_color_space">HSB (or HSV) color\n space</a>. The distance <var>d</var> between two successive colors is in [120&#176;,&nbsp;180&#176;].\n <p>\n The first six colors returned correspond to the following {@link SWT} color constants:\n {@link SWT#COLOR_RED red}, {@link SWT#COLOR_GREEN green}, {@link SWT#COLOR_BLUE blue},\n {@link SWT#COLOR_YELLOW yellow}, {@link SWT#COLOR_CYAN cyan},\n {@link SWT#COLOR_MAGENTA magenta}.\n </p>\n\n @param index the index of the color, must be &gt;= 0\n @return a color hue in [0&#176;,&nbsp;360&#176;)\n @see RGB#RGB(float, float, float)\n"
" A hunk describes a contiguous range of changed, added or deleted lines. <code>Hunk</code>s are separated by\n one or more unchanged lines.\n\n @since 3.3\n"
""
""
""
" Creates a new hunk.\n\n @param line the line at which the hunk starts, must be &gt;= 0\n @param delta the difference in lines compared to the original\n @param changed the number of changed lines in this hunk, must be &gt;= 0\n"
" The line at which the hunk starts in the current document. Must be in\n <code>[0, numberOfLines]</code> &ndash; note the inclusive end; there may be a hunk with\n <code>line == numberOfLines</code> to describe deleted lines at then end of the document.\n"
" The difference in lines compared to the corresponding line range in the original. Positive\n for added lines, negative for deleted lines.\n"
"The number of changed lines in this hunk, must be &gt;= 0. "
"\nThis package is a modified copy of <code>org.eclipse.jface.text.contentassist</code> that supports the linked mode proposals.\nThis package is internal and may disappear if the changes are merged with the API content assist package. Subject to change without notice.\n"
""
""
" Reads the next line. The lengths of the line will not exceed the given maximum width.\n\n @return the next line\n @throws IOException if an I/O error occurs\n"
" Creates a reader that breaks an input text to fit in a given width.\n\n @param reader Reader of the input text\n @param gc The graphic context that defines the currently used font sizes\n @param maxLineWidth The max width (pixels) where the text has to fit in\n"
"\n"
" @param proposal the completion proposal\n"
" A custom implementation of the <code>IContentAssistant</code> interface.\n This implementation is used by the linked mode UI. This is internal and subject\n to change without notice.\n"
" Sets the document partitioning this content assistant is using.\n\n @param partitioning the document partitioning for this content assistant\n"
""
" Registers a given content assist processor for a particular content type.\n If there is already a processor registered for this type, the new processor\n is registered instead of the old one.\n\n @param processor the content assist processor to register, or <code>null</code> to remove an existing one\n @param contentType the content type under which to register\n"
""
" Enables the content assistant's auto activation mode.\n\n @param enabled indicates whether auto activation is enabled or not\n"
" Enables the content assistant's auto insertion mode. If enabled,\n the content assistant inserts a proposal automatically if it is\n the only proposal. In the case of ambiguities, the user must\n make the choice.\n\n @param enabled indicates whether auto insertion is enabled or not\n @since 2.0\n"
" Sets the delay after which the content assistant is automatically invoked\n if the cursor is behind an auto activation character.\n\n @param delay the auto activation delay\n"
" Sets the proposal pop-ups' orientation.\n The following values may be used:\n <ul>\n   <li>PROPOSAL_OVERLAY<p>\n     proposal popup windows should overlay each other\n   </li>\n   <li>PROPOSAL_REMOVE<p>\n     any currently shown proposal popup should be closed\n   </li>\n   <li>PROPOSAL_STACKED<p>\n     proposal popup windows should be vertical stacked, with no overlap,\n     beneath the line containing the current cursor location\n   </li>\n </ul>\n\n @param orientation the popup's orientation\n"
" Sets the context information popup's orientation.\n The following values may be used:\n <ul>\n   <li>CONTEXT_ABOVE<p>\n     context information popup should always appear above the line containing\n     the current cursor location\n   </li>\n   <li>CONTEXT_BELOW<p>\n     context information popup should always appear below the line containing\n     the current cursor location\n   </li>\n </ul>\n\n @param orientation the popup's orientation\n"
" Sets the context information popup's background color.\n\n @param background the background color\n"
" Sets the context information popup's foreground color.\n\n @param foreground the foreground color\n @since 2.0\n"
" Sets the context selector's background color.\n\n @param background the background color\n @since 2.0\n"
" Sets the context selector's foreground color.\n\n @param foreground the foreground color\n @since 2.0\n"
" Sets the information control creator for the additional information control.\n\n @param creator the information control creator for the additional information control\n @since 2.0\n"
""
""
""
" Hides the proposal popup.\n"
" Hides any open pop-ups.\n"
" Callback to signal this content assistant that the presentation of the possible completions has been stopped.\n @since 2.1\n"
""
" Callback to signal this content assistant that the presentation of the context information has been stopped.\n @since 2.1\n"
""
" @param completionPosition the completion position\n"
" @return the completion position\n"
" @param proposals the proposals\n"
" @param proposals the proposals\n"
""
""
" Returns whether any popups controlled by the receiver have the input focus.\n\n @return <code>true</code> if any of the managed popups have the focus, <code>false</code> otherwise\n"
""
" @param proposal the proposal\n"
" @param listener the proposal listener\n"
" @param listener the proposal listener\n"
" Enables the support for colored labels in the proposal popup.\n <p>Completion proposals can implement {@link ICompletionProposalExtension6}\n to provide colored proposal labels.</p>\n\n @param isEnabled if <code>true</code> the support for colored labels is enabled in the proposal popup\n @since 3.4\n"
" Creates a new content assistant. The content assistant is not automatically activated,\n overlays the completion proposals with context information list if necessary, and\n shows the context information above the location at which it was activated. If auto\n activation will be enabled, without further configuration steps, this content assistant\n is activated after a 500 ms delay. It uses the default partitioning.\n"
" The popup priority: &gt; info pop-ups, &lt; standard content assist.\n Default value: <code>10</code>.\n\n @since 3.0\n"
"\n<p>Provides support for bindings between commands and various user input events\n(e.g., keyboard shortcuts).</p>\n\n<h2>Package Specification</h2>\n<p>\nThis package provides the common classes and abstract classes required to\nprovide binding support.\n</p>\n<p>\nAll the real work in this package is carried out by the\n<code>BindingManager</code>, and most work with bindings can be carried out\ndirectly with it.  The binding manager manages a collection of bindings, and\ndecides which bindings are active at any point in time.  By changes the various\nproperties of the manager, the active bindings will change.  The binding\nmanager implements a caching scheme that is optimized for an infreqeuntly\nchanging set of bindings, but frequently changing properties.\n</p>\n<p>\nThe binding manager also manages schemes.  A scheme is a grouping of bindings.\nTo create a scheme, use <code>BindingManager.getScheme(String)</code>.  The\nscheme must then be defined before it can be used.\n</p>\n<p>\nIf you wish to implement your own type of binding, then you must subclass\n<code>Trigger</code> and <code>TriggerSequence</code>.  Then, simply use these\nsubclasses with the <code>BindingManager</code>.\n</p>\n"
"\n<p>Provides support for bindings between commands and keys.</p>\n\n<h2>Package Specification</h2>\n<p>\nThis just a key-specific implementation of the generic bindings and trigger\nsupport.  This package provides an abstraction layer between the SWT key events\nand key bindings within JFace.\n</p>\n<p>\n<code>KeySequence</code> is a <code>TriggerSequence</code> that has\n<code>KeyStroke</code> instances as triggers.  A <code>KeyStroke</code> is\ncomposed of one or more keys held down at the same time.  A key stroke ends\nwhen the keys are released.  A key stroke can contain zero or more modifiers\nkeys, but it always contains exactly one natural key.  A modifier key is one of\nCtrl, Shift, Alt, or Command.  A natural key is anything else.</p>\n<p>\nNatural keys are further subdivided into special keys and character keys.\nCharacter keys are keys that have an ASCII representation (e.g., Space, 'A' and\nBackspace).  Special keys are ones that do not (e.g., Arrow Up, F11, and\nNumLock).\n</p>\n<p>\n<code>SWTKeySupport</code> is a static class that provides the link between SWT\nand these internal representations.  It has methods for converting between SWT\nkey events and the internal representation, and vice versa.  It also provides\naccess to the native-style key formatting facilities.\n</p>\n"
"\n<p>Provides support for formatting key sequences.</p>\n\n<h2>Package Specification</h2>\n<p>\nThis is a collection fo various formatters for key sequences.  The formatters\nare accessible through the <code>KeyFormatterFactory</code>.  To change how\nkeys are formatted in the user interface, call\n<code>KeyFormatterFactory.setDefault(IKeyFormatter)</code>.  They provided\nformatters are:\n</p>\n<dl>\n<dt>FormalKeyFormatter</dt>\n<dd>Provides a formal grammar for reading and writing key sequences.</dd>\n<dt>NativeKeyFormatter</dt>\n<dd>Provide a native-looking, human-readable format for keys.</dd>\n<dt>CompactKeyFormatter</dt>\n<dd>A variation of the native formatter that provides a more compact representation.</dd>\n<dt>EmacsKeyFormatter</dt>\n<dd>An Xemacs-style formatter (e.g., C^x C^x).</dd>\n</dl>\n"
" <p>\n An instance of <code>ISchemeListener</code> can be used by clients to\n receive notification of changes to one or more instances of\n <code>IScheme</code>.\n </p>\n <p>\n This interface may be implemented by clients.\n </p>\n \n @since 3.1\n @see Scheme#addSchemeListener(ISchemeListener)\n @see Scheme#removeSchemeListener(ISchemeListener)\n @see SchemeEvent\n"
" Notifies that one or more attributes of an instance of\n <code>IScheme</code> have changed. Specific details are described in\n the <code>SchemeEvent</code>.\n \n @param schemeEvent\n            the scheme event. Guaranteed not to be <code>null</code>.\n"
" An instance of this class describes changes to an instance of\n <code>BindingManager</code>.\n <p>\n This class is not intended to be extended by clients.\n </p>\n \n @since 3.1\n @see IBindingManagerListener#bindingManagerChanged(BindingManagerEvent)\n"
" Returns the instance of the manager that changed.\n \n @return the instance of the manager that changed. Guaranteed not to be\n         <code>null</code>.\n"
" Returns the scheme that changed.\n \n @return The changed scheme\n"
" Returns whether the active bindings have changed.\n \n @return <code>true</code> if the active bindings have changed;\n         <code>false</code> otherwise.\n"
" Computes whether the active bindings have changed for a given command\n identifier.\n \n @param parameterizedCommand\n            The fully-parameterized command whose bindings might have\n            changed; must not be <code>null</code>.\n @return <code>true</code> if the active bindings have changed for the\n         given command identifier; <code>false</code> otherwise.\n"
" Returns whether or not the active scheme changed.\n \n @return true, iff the active scheme property changed.\n"
" Returns whether the locale has changed\n \n @return <code>true</code> if the locale changed; <code>false</code>\n         otherwise.\n"
" Returns whether the platform has changed\n \n @return <code>true</code> if the platform changed; <code>false</code>\n         otherwise.\n"
" Returns whether the list of defined scheme identifiers has changed.\n \n @return <code>true</code> if the list of scheme identifiers has\n         changed; <code>false</code> otherwise.\n"
" Returns whether or not the scheme became defined\n \n @return <code>true</code> if the scheme became defined.\n"
" Creates a new instance of this class.\n \n @param manager\n            the instance of the binding manager that changed; must not be\n            <code>null</code>.\n @param activeBindingsChanged\n            Whether the active bindings have changed.\n @param previousTriggersByParameterizedCommand\n            The map of triggers (<code>TriggerSequence</code>) by\n            fully-parameterized command (<code>ParameterizedCommand</code>)\n            before the change occured. This map may be <code>null</code>\n            or empty.\n @param activeSchemeChanged\n            true, iff the active scheme changed.\n @param scheme\n            The scheme that became defined or undefined; <code>null</code>\n            if no scheme changed state.\n @param schemeDefined\n            <code>true</code> if the given scheme became defined;\n            <code>false</code> otherwise.\n @param localeChanged\n            <code>true</code> iff the active locale changed\n @param platformChanged\n            <code>true</code> iff the active platform changed\n"
" <p>\n A sequence of one or more triggers. None of these triggers may be\n <code>null</code>.\n </p>\n \n @since 3.1\n"
" Returns whether or not this key sequence ends with the given key\n sequence.\n \n @param triggerSequence\n            a trigger sequence. Must not be <code>null</code>.\n @param equals\n            whether or not an identical trigger sequence should be\n            considered as a possible match.\n @return <code>true</code>, iff the given trigger sequence ends with\n         this trigger sequence.\n"
""
" Formats this trigger sequence into the current default look.\n \n @return A string representation for this trigger sequence using the\n         default look; never <code>null</code>.\n"
" <p>\n Returns a list of prefixes for the current sequence. A prefix is any\n leading subsequence in a <code>TriggerSequence</code>. A prefix is\n also an instance of <code>TriggerSequence</code>.\n </p>\n <p>\n For example, consider a trigger sequence that consists of four triggers:\n A, B, C and D. The prefixes would be "", "A", "A B", and "A B C". The\n list of prefixes must always be the same as the size of the trigger list.\n </p>\n \n @return The array of possible prefixes for this sequence. This array must\n         not be <code>null</code>, but may be empty. It must only\n         contains instances of <code>TriggerSequence</code>.\n"
" Returns the list of triggers.\n \n @return The triggers; never <code>null</code> and guaranteed to only\n         contain instances of <code>Trigger</code>.\n"
""
" Returns whether or not this trigger sequence is empty.\n \n @return <code>true</code>, iff the trigger sequence is empty.\n"
" Returns whether or not this trigger sequence starts with the given\n trigger sequence.\n \n @param triggerSequence\n            a trigger sequence. Must not be <code>null</code>.\n @param equals\n            whether or not an identical trigger sequence should be\n            considered as a possible match.\n @return <code>true</code>, iff the given trigger sequence starts with\n         this key sequence.\n"
" Constructs a new instance of <code>TriggerSequence</code>.\n \n @param triggers\n            The triggers contained within this sequence; must not be\n            <code>null</code> or contain <code>null</code> elements.\n            May be empty.\n"
" The hash code for this object. This value is computed lazily, and marked\n as invalid when one of the values on which it is based changes.  This\n values is <code>HASH_CODE_NOT_COMPUTED</code> iff the hash code has not\n yet been computed.\n"
" The list of trigger in this sequence. This value is never\n <code>null</code>, and never contains <code>null</code> elements.\n"
" An instance of this class describes changes to an instance of\n <code>IScheme</code>.\n <p>\n This class is not intended to be extended by clients.\n </p>\n \n @since 3.1\n @see ISchemeListener#schemeChanged(SchemeEvent)\n"
" Returns the instance of the scheme that changed.\n \n @return the instance of the scheme that changed. Guaranteed not to be\n         <code>null</code>.\n"
" Returns whether or not the parentId property changed.\n \n @return true, iff the parentId property changed.\n"
" Creates a new instance of this class.\n \n @param scheme\n            the instance of the interface that changed; must not be\n            <code>null</code>.\n @param definedChanged\n            true, iff the defined property changed.\n @param nameChanged\n            true, iff the name property changed.\n @param descriptionChanged\n            <code>true</code> if the description property changed;\n            <code>false</code> otherwise.\n @param parentIdChanged\n            true, iff the parentId property changed.\n"
" <p>\n An instance of <code>IScheme</code> is a handle representing a binding\n scheme as defined by the extension point <code>org.eclipse.ui.bindings</code>.\n The identifier of the handle is the identifier of the scheme being represented.\n </p>\n <p>\n An instance of <code>IScheme</code> can be obtained from an instance of\n <code>ICommandManager</code> for any identifier, whether or not a scheme\n with that identifier is defined in the plugin registry.\n </p>\n <p>\n The handle-based nature of this API allows it to work well with runtime\n plugin activation and deactivation. If a scheme is defined, that means that\n its corresponding plug-in is active. If the plug-in is then deactivated, the\n scheme will still exist but it will be undefined. An attempt to use an\n undefined scheme will result in a <code>NotDefinedException</code>\n being thrown.\n </p>\n <p>\n This class is not intended to be extended by clients.\n </p>\n \n @since 3.1\n @see ISchemeListener\n @see org.eclipse.core.commands.CommandManager\n"
" Registers an instance of <code>ISchemeListener</code> to listen for\n changes to attributes of this instance.\n \n @param schemeListener\n            the instance of <code>ISchemeListener</code> to register.\n            Must not be <code>null</code>. If an attempt is made to\n            register an instance of <code>ISchemeListener</code> which\n            is already registered with this instance, no operation is\n            performed.\n"
""
" <p>\n Defines this scheme by giving it a name, and possibly a description and a\n parent identifier as well. The defined property for the scheme automatically \n becomes <code>true</code>.\n </p>\n <p>\n Notification is sent to all listeners that something has changed.\n </p>\n \n @param name\n            The name of this scheme; must not be <code>null</code>.\n @param description\n            The description for this scheme; may be <code>null</code>.\n @param parentId\n            The parent identifier for this scheme; may be\n            <code>null</code>.\n"
" <p>\n Returns the identifier of the parent of the scheme represented by this\n handle.\n </p>\n <p>\n Notification is sent to all registered listeners if this attribute\n changes.\n </p>\n \n @return the identifier of the parent of the scheme represented by this\n         handle. May be <code>null</code>.\n @throws NotDefinedException\n             if the scheme represented by this handle is not defined.\n"
" Unregisters an instance of <code>ISchemeListener</code> listening for\n changes to attributes of this instance.\n \n @param schemeListener\n            the instance of <code>ISchemeListener</code> to unregister.\n            Must not be <code>null</code>. If an attempt is made to\n            unregister an instance of <code>ISchemeListener</code> which\n            is not already registered with this instance, no operation is\n            performed.\n"
" The string representation of this command -- for debugging purposes only.\n This string should not be shown to an end user.\n \n @return The string representation; never <code>null</code>.\n"
" Makes this scheme become undefined. This has the side effect of changing\n the name, description and parent identifier to <code>null</code>.\n Notification is sent to all listeners.\n"
" <p>\n The abstract class for any object that can be used as a trigger for a binding. \n This ensures that trigger conform to certain minimum requirements. Namely, triggers \n need to be hashable.\n </p>\n \n @since 3.1\n"
" Tests whether this object is equal to another object. A handle object is\n only equal to another trigger with the same properties.\n \n @param object\n            The object with which to compare; may be <code>null</code>.\n @return <code>true</code> if the objects are equal; <code>false</code>\n         otherwise.\n"
" Computes the hash code for this object.\n \n @return The hash code for this object.\n"
""
" <p>\n A central repository for bindings -- both in the defined and undefined\n states. Schemes and bindings can be created and retrieved using this manager.\n It is possible to listen to changes in the collection of schemes and bindings\n by adding a listener to the manager.\n </p>\n <p>\n The binding manager is very sensitive to performance. Misusing the manager\n can render an application unenjoyable to use. As such, each of the public\n methods states the current run-time performance. In future releases, it is\n guaranteed that the method will run in at least the stated time constraint --\n though it might get faster. Where possible, we have also tried to be memory\n efficient.\n </p>\n \n @since 3.1\n"
" <p>\n Adds a single new binding to the existing array of bindings. If the array\n is currently <code>null</code>, then a new array is created and this\n binding is added to it. This method does not detect duplicates.\n </p>\n <p>\n This method completes in amortized <code>O(1)</code>.\n </p>\n \n @param binding\n            The binding to be added; must not be <code>null</code>.\n"
" <p>\n Adds a listener to this binding manager. The listener will be notified\n when the set of defined schemes or bindings changes. This can be used to\n track the global appearance and disappearance of bindings.\n </p>\n <p>\n This method completes in amortized constant time (<code>O(1)</code>).\n </p>\n \n @param listener\n            The listener to attach; must not be <code>null</code>.\n"
" <p>\n Notifies this manager that the context manager has changed. This method\n is intended for internal use only.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n"
" <p>\n Computes the bindings for the current state of the application, but\n disregarding the current contexts. This can be useful when trying to\n display all the possible bindings.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the number of bindings.\n </p>\n \n @return A map of trigger (<code>TriggerSequence</code>) to bindings (\n         <code>Collection</code> containing <code>Binding</code>).\n         This map may be empty, but it is never <code>null</code>.\n"
" <p>\n Computes the bindings for the current state of the application, but\n disregarding the current contexts. This can be useful when trying to\n display all the possible bindings.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the number of bindings.\n </p>\n \n @return All of the active bindings (<code>Binding</code>), not sorted\n         in any fashion. This collection may be empty, but it is never\n         <code>null</code>.\n"
" <p>\n Returns the active bindings for a particular command identifier, but\n discounting the current contexts. This method operates in O(n) time over\n the number of bindings.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the active bindings are\n not yet computed, then this completes in <code>O(nn)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param parameterizedCommand\n            The fully-parameterized command whose bindings are requested.\n            This argument may be <code>null</code>.\n @return The array of active triggers (<code>TriggerSequence</code>)\n         for a particular command identifier. This value is guaranteed to\n         never be <code>null</code>, but it may be empty.\n @since 3.2\n"
" <p>\n Returns the active bindings for a particular command identifier. This\n method operates in O(n) time over the number of bindings.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the active bindings are\n not yet computed, then this completes in <code>O(nn)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param parameterizedCommand\n            The fully-parameterized command whose bindings are requested.\n            This argument may be <code>null</code>.\n @return The array of active triggers (<code>TriggerSequence</code>)\n         for a particular command identifier. This value is guaranteed to\n         never be <code>null</code>, but it may be empty.\n"
" <p>\n Gets the currently active scheme.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The active scheme; may be <code>null</code> if there is no\n         active scheme. If a scheme is returned, it is guaranteed to be\n         defined.\n"
" Gets the best active binding for a command. The best binding is the one\n that would be most appropriate to show in a menu. Bindings which belong\n to a child scheme are given preference over those in a parent scheme.\n Bindings which belong to a particular locale or platform are given\n preference over those that do not. The rest of the calculaton is based\n most on various concepts of "length", as well as giving some modifier\n keys preference (e.g., <code>Alt</code> is less likely to appear than\n <code>Ctrl</code>).\n \n @param commandId\n            The identifier of the command for which the best active\n            binding should be retrieved; must not be <code>null</code>.\n @return The trigger sequence for the best binding; may be\n         <code>null</code> if no bindings are active for the given\n         command.\n @since 3.2\n"
" @param command\n @return\n 		a trigger sequence, or <code>null</code>\n @since 3.4\n"
" Gets the formatted string representing the best active binding for a\n command. The best binding is the one that would be most appropriate to\n show in a menu. Bindings which belong to a child scheme are given\n preference over those in a parent scheme. The rest of the calculaton is\n based most on various concepts of "length", as well as giving some\n modifier keys preference (e.g., <code>Alt</code> is less likely to\n appear than <code>Ctrl</code>).\n \n @param commandId\n            The identifier of the command for which the best active\n            binding should be retrieved; must not be <code>null</code>.\n @return The formatted string for the best binding; may be\n         <code>null</code> if no bindings are active for the given\n         command.\n @since 3.2\n"
" <p>\n Returns the set of all bindings managed by this class.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The array of all bindings. This value may be <code>null</code>\n         and it may be empty.\n"
" <p>\n Returns the array of schemes that are defined.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The array of defined schemes; this value may be empty or\n         <code>null</code>.\n"
" <p>\n Returns the active locale for this binding manager. The locale is in the\n same format as <code>Locale.getDefault().toString()</code>.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The active locale; never <code>null</code>.\n"
" <p>\n Returns all of the possible bindings that start with the given trigger\n (but are not equal to the given trigger).\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the bindings aren't\n currently computed, then this completes in <code>O(n)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param trigger\n            The prefix to look for; must not be <code>null</code>.\n @return A map of triggers (<code>TriggerSequence</code>) to bindings (<code>Binding</code>).\n         This map may be empty, but it is never <code>null</code>.\n"
" <p>\n Returns the command identifier for the active binding matching this\n trigger, if any.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the bindings aren't\n currently computed, then this completes in <code>O(n)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param trigger\n            The trigger to match; may be <code>null</code>.\n @return The binding that matches, if any; <code>null</code> otherwise.\n"
" <p>\n Returns the active platform for this binding manager. The platform is in\n the same format as <code>SWT.getPlatform()</code>.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The active platform; never <code>null</code>.\n"
" <p>\n Gets the scheme with the given identifier. If the scheme does not already\n exist, then a new (undefined) scheme is created with that identifier.\n This guarantees that schemes will remain unique.\n </p>\n <p>\n This method completes in amortized <code>O(1)</code>.\n </p>\n \n @param schemeId\n            The identifier for the scheme to retrieve; must not be\n            <code>null</code>.\n @return A scheme with the given identifier.\n"
" <p>\n Returns whether the given trigger sequence is a partial match for the\n given sequence.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the bindings aren't\n currently computed, then this completes in <code>O(n)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param trigger\n            The sequence which should be the prefix for some binding;\n            should not be <code>null</code>.\n @return <code>true</code> if the trigger can be found in the active\n         bindings; <code>false</code> otherwise.\n"
" <p>\n Returns whether the given trigger sequence is a perfect match for the\n given sequence.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the bindings aren't\n currently computed, then this completes in <code>O(n)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param trigger\n            The sequence which should match exactly; should not be\n            <code>null</code>.\n @return <code>true</code> if the trigger can be found in the active\n         bindings; <code>false</code> otherwise.\n"
" <p>\n Remove the specific binding by identity. Does nothing if the binding is\n not in the manager.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the number of bindings.\n </p>\n \n @param binding\n            The binding to be removed; must not be <code>null</code>.\n @since 3.2\n"
" <p>\n Removes a listener from this binding manager.\n </p>\n <p>\n This method completes in amortized <code>O(1)</code>.\n </p>\n \n @param listener\n            The listener to be removed; must not be <code>null</code>.\n"
" <p>\n Removes any binding that matches the given values -- regardless of\n command identifier.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the number of bindings.\n </p>\n \n @param sequence\n            The sequence to match; may be <code>null</code>.\n @param schemeId\n            The scheme id to match; may be <code>null</code>.\n @param contextId\n            The context id to match; may be <code>null</code>.\n @param locale\n            The locale to match; may be <code>null</code>.\n @param platform\n            The platform to match; may be <code>null</code>.\n @param windowManager\n            The window manager to match; may be <code>null</code>. TODO\n            Currently ignored.\n @param type\n            The type to look for.\n \n"
" <p>\n Notifies this manager that a scheme has changed. This method is intended\n for internal use only.\n </p>\n <p>\n This method calls out to listeners, and so the time it takes to complete\n is dependent on third-party code.\n </p>\n \n @param schemeEvent\n            An event describing the change in the scheme.\n"
" Provides the current conflicts in the bindings as a Map The key will\n be {@link TriggerSequence} and the value will be the {@link Collection} of\n {@link Binding}\n \n @return Read-only {@link Map} of the current conflicts. If no conflicts,\n         then return an empty map. Never <code>null</code>\n @since 3.5\n"
" Provides the current conflicts in the keybindings for the given \n TriggerSequence as a {@link Collection} of {@link Binding}\n \n @param sequence The sequence for which conflict info is required\n \n @return Collection of KeyBinding. If no conflicts,\n         then returns a <code>null</code>\n @since 3.5\n"
" <p>\n Selects one of the schemes as the active scheme. This scheme must be\n defined.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the height of the context tree.\n </p>\n \n @param scheme\n            The scheme to become active; must not be <code>null</code>.\n @throws NotDefinedException\n             If the given scheme is currently undefined.\n"
" <p>\n Changes the set of bindings for this binding manager. Changing the set of\n bindings all at once ensures that: (1) duplicates are removed; and (2)\n avoids unnecessary intermediate computations. This method clears the\n existing bindings, but does not trigger a recomputation (other method\n calls are required to do that).\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the number of bindings.\n </p>\n \n @param bindings\n            The new array of bindings; may be <code>null</code>. This\n            set is copied into a local data structure.\n"
" <p>\n Changes the locale for this binding manager. The locale can be used to\n provide locale-specific bindings. If the locale is different than the\n current locale, this will force a recomputation of the bindings. The\n locale is in the same format as\n <code>Locale.getDefault().toString()</code>.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @param locale\n            The new locale; must not be <code>null</code>.\n @see Locale#getDefault()\n"
" <p>\n Changes the platform for this binding manager. The platform can be used\n to provide platform-specific bindings. If the platform is different than\n the current platform, then this will force a recomputation of the\n bindings. The locale is in the same format as\n <code>SWT.getPlatform()</code>.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @param platform\n            The new platform; must not be <code>null</code>.\n @see org.eclipse.swt.SWT#getPlatform()\n @see Util#getWS()\n"
" <p>\n Constructs a new instance of <code>BindingManager</code>.\n </p>\n <p>\n This method completes in amortized constant time (O(1)).\n </p>\n \n @param contextManager\n            The context manager that will support this binding manager.\n            This value must not be <code>null</code>.\n @param commandManager\n            The command manager that will support this binding manager.\n            This value must not be <code>null</code>.\n"
" This flag can be set to <code>true</code> if the binding manager should\n print information to <code>System.out</code> when certain boundary\n conditions occur.\n"
" <p>\n An instance of <code>BindingManagerListener</code> can be used by clients to\n receive notification of changes to an instance of\n <code>BindingManager</code>. \n </p>\n <p>\n This interface may be implemented by clients.\n </p>\n \n @since 3.1\n @see BindingManager#addBindingManagerListener(IBindingManagerListener)\n @see org.eclipse.jface.bindings.BindingManager#addBindingManagerListener(IBindingManagerListener)\n @see BindingManagerEvent\n"
" Notifies that attributes inside an instance of <code>BindingManager</code> have changed. \n Specific details are described in the <code>BindingManagerEvent</code>.  Changes in the\n binding manager can cause the set of defined or active schemes or bindings to change.\n \n @param event\n            the binding manager event. Guaranteed not to be <code>null</code>.\n"
" <p>\n A binding is a link between user input and the triggering of a particular\n command. The most common example of a binding is a keyboard shortcut, but\n there are also mouse and gesture bindings.\n </p>\n <p>\n Bindings are linked to particular conditions within the application. Some of\n these conditions change infrequently (e.g., locale, scheme), while some will\n tend to change quite frequently (e.g., context). This allows the bindings to\n be tailored to particular situations. For example, a set of bindings may be\n appropriate only inside a text editor.  Or, perhaps, a set of bindings might\n be appropriate only for a given locale, such as bindings that coexist with\n the Input Method Editor (IME) on Chinese locales.\n </p>\n <p>\n It is also possible to remove a particular binding. This is typically done as\n part of user configuration (e.g., user changing keyboard shortcuts). However,\n it can also be helpful when trying to change a binding on a particular locale\n or platform. An "unbinding" is really just a binding with no command\n identifier. For it to unbind a particular binding, it must match that binding\n in its context identifier and scheme identifier. Subclasses (e.g.,\n <code>KeyBinding</code>) may require other properties to match (e.g.,\n <code>keySequence</code>). If these properties match, then this is an\n unbinding. Note: the locale and platform can be different.\n </p>\n <p>\n For example, imagine you have a key binding that looks like this:\n </p>\n <code><pre>\n KeyBinding(command, scheme, context, &quot;Ctrl+Shift+F&quot;)\n </pre></code>\n <p>\n On GTK+, the "Ctrl+Shift+F" interferes with some native behaviour. To change\n the binding, we first unbind the "Ctrl+Shift+F" key sequence by \n assigning it a null command on the gtk platform.  We then create a new binding\n that maps the command to the "Esc Ctrl+F" key sequence.\n </p>\n <code><pre>\n     KeyBinding("Ctrl+Shift+F",null,scheme,context,null,gtk,null,SYSTEM)\n     KeyBinding("Esc Ctrl+F",parameterizedCommand,scheme,context,null,gtk,SYSTEM)\n </pre></code>\n <p>\n Bindings are intended to be immutable objects.\n </p>\n \n @since 3.1\n"
" Tests whether this binding is equal to another object. Bindings are only\n equal to other bindings with equivalent values.\n \n @param object\n            The object with which to compare; may be <code>null</code>.\n @return <code>true</code> if the object is a binding with equivalent\n         values for all of its properties; <code>false</code> otherwise.\n"
" Returns the parameterized command to which this binding applies. If the\n identifier is <code>null</code>, then this binding is "unbinding" an\n existing binding.\n \n @return The fully-parameterized command; may be <code>null</code>.\n"
" Returns the identifier of the context in which this binding applies.\n \n @return The context identifier; never <code>null</code>.\n"
" Returns the locale in which this binding applies. If the locale is\n <code>null</code>, then this binding applies to all locales. This\n string is the same format as returned by\n <code>Locale.getDefault().toString()</code>.\n \n @return The locale; may be <code>null</code>.\n"
" Returns the platform on which this binding applies. If the platform is\n <code>null</code>, then this binding applies to all platforms. This\n string is the same format as returned by <code>SWT.getPlatform()</code>.\n \n @return The platform; may be <code>null</code>.\n"
" Returns the identifier of the scheme in which this binding applies.\n \n @return The scheme identifier; never <code>null</code>.\n"
" Returns the sequence of trigger for a given binding. The triggers can be\n anything, but above all it must be hashable. This trigger sequence is\n used by the binding manager to distinguish between different bindings.\n \n @return The object representing an input event that will trigger this\n         binding; must not be <code>null</code>.\n"
" Returns the type for this binding. As it stands now, this value will\n either be <code>SYSTEM</code> or <code>USER</code>. In the future,\n more types might be added.\n \n @return The type for this binding.\n"
" Computes the hash code for this key binding based on all of its\n attributes.\n \n @return The hash code for this key binding.\n"
" The string representation of this binding -- for debugging purposes only.\n This string should not be shown to an end user. This should be overridden\n by subclasses that add properties.\n \n @return The string representation; never <code>null</code>.\n"
" Constructs a new instance of <code>Binding</code>.\n \n @param command\n            The parameterized command to which this binding applies; this\n            value may be <code>null</code> if the binding is meant to\n            "unbind" a previously defined binding.\n @param schemeId\n            The scheme to which this binding belongs; this value must not\n            be <code>null</code>.\n @param contextId\n            The context to which this binding applies; this value must not\n            be <code>null</code>.\n @param locale\n            The locale to which this binding applies; this value may be\n            <code>null</code> if it applies to all locales.\n @param platform\n            The platform to which this binding applies; this value may be\n            <code>null</code> if it applies to all platforms.\n @param windowManager\n            The window manager to which this binding applies; this value\n            may be <code>null</code> if it applies to all window\n            managers. This value is currently ignored.\n @param type\n            The type of binding. This should be either <code>SYSTEM</code>\n            or <code>USER</code>.\n"
" The type of binding that is defined by the system (i.e., by the\n application developer). In the case of an application based on the\n Eclipse workbench, this is the registry.\n"
" The type of binding that is defined by the user (i.e., by the end user of\n the application). In the case of an application based on the Eclipse\n workbench, this is the preference store.\n"
" The string representation of this binding. This string is for debugging\n purposes only, and is not meant to be displayed to the user. This value\n is computed lazily.\n"
" <p>\n A wrapper around the SWT text widget that traps literal key presses and\n converts them into key sequences for display. There are two types of key\n strokes that are displayed: complete and incomplete. A complete key stroke is\n one with a natural key, while an incomplete one has no natural key.\n Incomplete key strokes are only displayed until they are made complete or\n their component key presses are released.\n </p>\n \n @since 3.1\n"
" Adds a property change listener to this key sequence widget. It will be\n notified when the key sequence changes.\n \n @param listener\n            The listener to be notified when changes occur; must not be\n            <code>null</code>.\n @since 3.2\n"
" Clears the text field and resets all the internal values.\n"
" Fires a property change event to all of the listeners.\n \n @param oldKeySequence\n            The old key sequence; must not be <code>null</code>.\n @since 3.2\n"
" An accessor for the <code>KeySequence</code> that corresponds to the\n current state of the text field. This includes incomplete strokes.\n \n @return The key sequence representation; never <code>null</code>.\n"
" Inserts the key stroke at the current insertion point. This does a\n regular delete and insert, as if the key had been pressed.\n \n @param stroke\n            The key stroke to insert; must not be <code>null</code>.\n"
" Removes the given listener from this key sequence widget.\n \n @param listener\n            The listener to be removed; must not be <code>null</code>.\n @since 3.2\n"
" <p>\n A mutator for the key sequence stored within this widget. The text and\n caret position are updated.\n </p>\n <p>\n All sequences are limited to maxStrokes number of strokes in length. If\n there are already that number of strokes, then it does not show\n incomplete strokes, and does not keep track of them.\n </p>\n \n @param newKeySequence\n            The new key sequence for this widget; may be <code>null</code>\n            if none.\n"
" Returns the maximum number of strokes that are permitted in this widget\n at one time.\n \n @return The maximum number of strokes; will be a positive integer or\n         <code>INFINITE</code>.\n"
" A mutator for the maximum number of strokes that are permitted in this\n widget at one time.\n \n @param keyStrokeLimit\n            The maximum number of strokes; must be a positive integer or\n            <code>INFINITE</code>.\n"
" Constructs an instance of <code>KeySequenceTextField</code> with the\n text field to use. If the platform is carbon (MacOS X), then the font is\n set to be the same font used to display accelerators in the menus.\n \n @param wrappedText\n            The text widget to wrap; must not be <code>null</code>.\n"
" The special integer value for the maximum number of strokes indicating\n that an infinite number should be allowed.\n"
" The name of the property representing the current key sequence in this\n key sequence widget.\n \n @since 3.2\n"
" The keys trapped by this widget. This list is guaranteed to be roughly\n accurate. Perfection is not possible, as SWT does not export traversal\n keys as constants.\n"
" <p>\n A look-up table for the formal grammar for keys, and the integer values they\n represent. This look-up table is hard-coded to use SWT representations. By\n replacing this class (and\n {@link org.eclipse.jface.bindings.keys.SWTKeySupport}), you can remove the\n dependency on SWT.\n </p>\n \n @since 3.1\n @see org.eclipse.jface.bindings.keys.KeyLookupFactory\n"
""
""
""
""
""
""
""
""
""
" <p>\n A factory class for <code>ILookup</code> instances. This factory can be\n used to retrieve instances of look-ups defined by this package. It also\n allows you to define your own look-up for use in the classes.\n </p>\n \n @since 3.1\n"
" Provides an instance of <code>SWTKeyLookup</code>.\n \n @return The SWT look-up table for key stroke format information; never\n         <code>null</code>.\n"
" An accessor for the current default look-up.\n \n @return The default look-up; never <code>null</code>.\n"
" Sets the default look-up.\n \n @param defaultLookup\n            the default look-up. Must not be <code>null</code>.\n"
" <p>\n A utility class for converting SWT events into key strokes.\n </p>\n \n @since 3.1\n"
" Given an SWT accelerator value, provide the corresponding key stroke.\n \n @param accelerator\n            The accelerator to convert; should be a valid SWT accelerator\n            value.\n @return The equivalent key stroke; never <code>null</code>.\n"
" <p>\n Converts the given event into an SWT accelerator value -- considering the\n modified character with the shift modifier. This is the third accelerator\n value that should be checked when processing incoming key events.\n </p>\n <p>\n For example, on a standard US keyboard, "Ctrl+Shift+5" would be viewed as\n "Ctrl+Shift+%".\n </p>\n \n @param event\n            The event to be converted; must not be <code>null</code>.\n @return The combination of the state mask and the unmodified character.\n"
" <p>\n Converts the given event into an SWT accelerator value -- considering the\n unmodified character with all modifier keys. This is the first\n accelerator value that should be checked when processing incoming key\n events. However, all alphabetic characters are considered as their\n uppercase equivalents.\n </p>\n <p>\n For example, on a standard US keyboard, "Ctrl+Shift+5" would be viewed as\n "Ctrl+Shift+5".\n </p>\n \n @param event\n            The event to be converted; must not be <code>null</code>.\n @return The combination of the state mask and the unmodified character.\n"
" <p>\n Converts the given event into an SWT accelerator value -- considering the\n unmodified character with all modifier keys. This is the first\n accelerator value that should be checked. However, all alphabetic\n characters are considered as their uppercase equivalents.\n </p>\n <p>\n For example, on a standard US keyboard, "Ctrl+Shift+5" would be viewed as\n "Ctrl+%".\n </p>\n \n @param event\n            The event to be converted; must not be <code>null</code>.\n @return The combination of the state mask and the unmodified character.\n"
" Converts the given event into an SWT accelerator value -- considering the\n modified character without the shift modifier. This is the second\n accelerator value that should be checked when processing incoming key\n events. Key strokes with alphabetic natural keys are run through\n <code>convertEventToUnmodifiedAccelerator</code>.\n \n @param event\n            The event to be converted; must not be <code>null</code>.\n @return The combination of the state mask without shift, and the modified\n         character.\n"
" Given a key stroke, this method provides the equivalent SWT accelerator\n value. The functional inverse of\n <code>convertAcceleratorToKeyStroke</code>.\n \n @param keyStroke\n            The key stroke to convert; must not be <code>null</code>.\n @return The SWT accelerator value\n"
" Provides an instance of <code>IKeyFormatter</code> appropriate for the\n current instance.\n \n @return an instance of <code>IKeyFormatter</code> appropriate for the\n         current instance; never <code>null</code>.\n"
" This class should never be instantiated.\n"
" <p>\n A facilitiy for converting the formal representation for key strokes\n (i.e., used in persistence) into real key stroke instances.\n </p>\n \n @since 3.1\n"
" Looks up a single natural key by its formal name, and returns the integer\n representation for this natural key\n \n @param name\n            The formal name of the natural key to look-up; must not be\n            <code>null</code>.\n @return The integer representation of this key. If the natural key cannot\n         be found, then this method returns <code>0</code>.\n"
" Looks up a single natural key by its formal name, and returns the integer\n representation for this natural key\n \n @param name\n            The formal name of the natural key to look-up; must not be\n            <code>null</code>.\n @return The integer representation of this key. If the natural key cannot\n         be found, then this method returns <code>0</code>.\n"
" Looks up a single modifier key by its formal name, and returns the integer\n representation for this modifier key\n \n @param name\n            The formal name of the modifier key to look-up; must not be\n            <code>null</code>.\n @return The integer representation of this key. If the modifier key\n         cannot be found, then this method returns <code>0</code>.\n"
" Looks up a key value, and returns the formal string representation for\n that key\n \n @param key\n            The key to look-up.\n @return The formal string representation of this key. If this key cannot\n         be found, then it is simply the character corresponding to that\n         integer value.\n"
" Returns the integer representation of the ALT key.\n \n @return The ALT key\n"
" Returns the integer representation of the COMMAND key.\n \n @return The COMMAND key\n"
" Returns the integer representation of the CTRL key.\n \n @return The CTRL key\n"
" Returns the integer representation of the SHIFT key.\n \n @return The SHIFT key\n"
" Returns whether the given key is a modifier key.\n \n @param key\n            The integer value of the key to check.\n @return <code>true</code> if the key is one of the modifier keys;\n         <code>false</code> otherwise.\n"
" The formal name of the 'Alt' key.\n"
" The formal name of the 'Arrow Down' key.\n"
" The formal name of the 'Arrow Left' key.\n"
" The formal name of the 'Arrow Right' key.\n"
" The formal name of the 'Arrow Up' key.\n"
" An alternate name for the backspace key.\n"
" The formal name for the 'Break' key.\n"
" The formal name of the backspace key.\n"
" The formal name for the 'Caps Lock' key.\n"
" The formal name of the 'Command' key.\n"
" The formal name of the carriage return (U+000D)\n"
" The formal name of the 'Ctrl' key.\n"
" The formal name of the delete (U+007F) key\n"
" An alternative name for the delete key.\n"
" The formal name of the 'End' key.\n"
" An alternative name for the enter key.\n"
" The formal name of the escape (U+001B) key.\n"
" An alternative name for the escape key.\n"
" The formal name of the 'F1' key.\n"
" The formal name of the 'F10' key.\n"
" The formal name of the 'F11' key.\n"
" The formal name of the 'F12' key.\n"
" The formal name of the 'F13' key.\n"
" The formal name of the 'F14' key.\n"
" The formal name of the 'F15' key.\n"
" The formal name of the 'F16' key.\n \n @since 3.6\n"
" The formal name of the 'F17' key.\n \n @since 3.6\n"
" The formal name of the 'F18' key.\n \n @since 3.6\n"
" The formal name of the 'F19' key.\n \n @since 3.6\n"
" The formal name of the 'F20' key.\n \n @since 3.6\n"
" The formal name of the 'F2' key.\n"
" The formal name of the 'F3' key.\n"
" The formal name of the 'F4' key.\n"
" The formal name of the 'F5' key.\n"
" The formal name of the 'F6' key.\n"
" The formal name of the 'F7' key.\n"
" The formal name of the 'F8' key.\n"
" The formal name of the 'F9' key.\n"
" The formal name of the form feed (U+000C) key.\n"
" The formal name of the 'Home' key.\n"
" The formal name of the 'Insert' key.\n"
" The formal name of the line feed (U+000A) key.\n"
" The formal name of the 'M1' key.\n"
" The formal name of the 'M2' key.\n"
" The formal name of the 'M3' key.\n"
" The formal name of the 'M4' key.\n"
" The formal name of the null (U+0000) key.\n"
" The formal name of the 'NumLock' key.\n"
" The formal name of the '0' key on the numpad.\n"
" The formal name of the '1' key on the numpad.\n"
" The formal name of the '2' key on the numpad.\n"
" The formal name of the '3' key on the numpad.\n"
" The formal name of the '4' key on the numpad.\n"
" The formal name of the '5' key on the numpad.\n"
" The formal name of the '6' key on the numpad.\n"
" The formal name of the '7' key on the numpad.\n"
" The formal name of the '8' key on the numpad.\n"
" The formal name of the '9' key on the numpad.\n"
" The formal name of the 'Add' key on the numpad.\n"
" The formal name of the 'Decimal' key on the numpad.\n"
" The formal name of the 'Divide' key on the numpad.\n"
" The formal name of the 'Enter' key on the numpad.\n"
" The formal name of the '=' key on the numpad.\n"
" The formal name of the 'Multiply' key on the numpad.\n"
" The formal name of the 'Subtract' key on the numpad.\n"
" The formal name of the 'Page Down' key.\n"
" The formal name of the 'Page Up' key.\n"
" The formal name for the 'Pause' key.\n"
" The formal name for the 'Print Screen' key.\n"
" An alternative name for the enter key.\n"
" The formal name for the 'Scroll Lock' key.\n"
" The formal name of the 'Shift' key.\n"
" The formal name of the space (U+0020) key.\n"
" The formal name of the tab (U+0009) key.\n"
" The formal name of the vertical tab (U+000B) key.\n"
" <p>\n An exception indicating problems while parsing formal string representations\n of either <code>KeyStroke</code> or <code>KeySequence</code> objects.\n </p>\n <p>\n <code>ParseException</code> objects are immutable. Clients are not\n permitted to extend this class.\n </p>\n \n @since 3.1\n"
" Constructs a <code>ParseException</code> with the specified detail\n message.\n \n @param s\n            the detail message.\n"
" <p>\n A <code>KeySequence</code> is defined as a list of zero or more\n <code>KeyStrokes</code>, with the stipulation that all\n <code>KeyStroke</code> objects must be complete, save for the last one,\n whose completeness is optional. A <code>KeySequence</code> is said to be\n complete if all of its <code>KeyStroke</code> objects are complete.\n </p>\n <p>\n All <code>KeySequence</code> objects have a formal string representation\n available via the <code>toString()</code> method. There are a number of\n methods to get instances of <code>KeySequence</code> objects, including one\n which can parse this formal string representation.\n </p>\n <p>\n All <code>KeySequence</code> objects, via the <code>format()</code>\n method, provide a version of their formal string representation translated by\n platform and locale, suitable for display to a user.\n </p>\n <p>\n <code>KeySequence</code> objects are immutable. Clients are not permitted\n to extend this class.\n </p>\n \n @since 3.1\n"
" Gets an instance of <code>KeySequence</code>.\n \n @return a key sequence. This key sequence will have no key strokes.\n         Guaranteed not to be <code>null</code>.\n"
" Creates an instance of <code>KeySequence</code> given a key sequence\n and a key stroke.\n \n @param keySequence\n            a key sequence. Must not be <code>null</code>.\n @param keyStroke\n            a key stroke. Must not be <code>null</code>.\n @return a key sequence that is equal to the given key sequence with the\n         given key stroke appended to the end. Guaranteed not to be\n         <code>null</code>.\n"
" Creates an instance of <code>KeySequence</code> given a single key\n stroke.\n \n @param keyStroke\n            a single key stroke. Must not be <code>null</code>.\n @return a key sequence. Guaranteed not to be <code>null</code>.\n"
" Creates an instance of <code>KeySequence</code> given an array of key\n strokes.\n \n @param keyStrokes\n            the array of key strokes. This array may be empty, but it must\n            not be <code>null</code>. This array must not contain\n            <code>null</code> elements.\n @return a key sequence. Guaranteed not to be <code>null</code>.\n"
" Creates an instance of <code>KeySequence</code> given a list of key\n strokes.\n \n @param keyStrokes\n            the list of key strokes. This list may be empty, but it must\n            not be <code>null</code>. If this list is not empty, it\n            must only contain instances of <code>KeyStroke</code>.\n @return a key sequence. Guaranteed not to be <code>null</code>.\n"
" Creates an instance of <code>KeySequence</code> by parsing a given\n formal string representation.\n \n @param string\n            the formal string representation to parse.\n @return a key sequence. Guaranteed not to be <code>null</code>.\n @throws ParseException\n             if the given formal string representation could not be parsed\n             to a valid key sequence.\n"
""
" Formats this key sequence into the current default look.\n \n @return A string representation for this key sequence using the default\n         look; never <code>null</code>.\n"
" Returns the list of key strokes for this key sequence.\n \n @return the list of key strokes keys. This list may be empty, but is\n         guaranteed not to be <code>null</code>. If this list is not\n         empty, it is guaranteed to only contain instances of\n         <code>KeyStroke</code>.\n"
""
" Returns whether or not this key sequence is complete. Key sequences are\n complete iff all of their key strokes are complete.\n \n @return <code>true</code>, iff the key sequence is complete.\n"
" Returns the formal string representation for this key sequence.\n \n @return The formal string representation for this key sequence.\n         Guaranteed not to be <code>null</code>.\n @see java.lang.Object#toString()\n"
" Constructs an instance of <code>KeySequence</code> given a list of key\n strokes.\n \n @param keyStrokes\n            the list of key strokes. This list may be empty, but it must\n            not be <code>null</code>. If this list is not empty, it\n            must only contain instances of <code>KeyStroke</code>.\n"
" The delimiter between multiple key strokes in a single key sequence --\n expressed in the formal key stroke grammar. This is not to be displayed\n to the user. It is only intended as an internal representation.\n"
" The set of delimiters for <code>KeyStroke</code> objects allowed during\n parsing of the formal string representation.\n"
" <p>\n A keyboard shortcut. This is a binding between some keyboard input and the\n triggering of a command. This object is immutable.\n </p>\n \n @since 3.1\n"
" Returns the key sequence which triggers this binding. The key sequence\n will not be <code>null</code>, empty or incomplete.\n \n @return The key sequence; never <code>null</code>.\n"
""
" Constructs a new instance of <code>KeyBinding</code>.\n \n @param keySequence\n            The key sequence which should trigger this binding. This value\n            must not be <code>null</code>. It also must be a complete,\n            non-empty key sequence.\n @param command\n            The parameterized command to which this binding applies; this\n            value may be <code>null</code> if the binding is meant to\n            "unbind" a previously defined binding.\n @param schemeId\n            The scheme to which this binding belongs; this value must not\n            be <code>null</code>.\n @param contextId\n            The context to which this binding applies; this value must not\n            be <code>null</code>.\n @param locale\n            The locale to which this binding applies; this value may be\n            <code>null</code> if it applies to all locales.\n @param platform\n            The platform to which this binding applies; this value may be\n            <code>null</code> if it applies to all platforms.\n @param windowManager\n            The window manager to which this binding applies; this value\n            may be <code>null</code> if it applies to all window\n            managers. This value is currently ignored.\n @param type\n            The type of binding. This should be either <code>SYSTEM</code>\n            or <code>USER</code>.\n"
" <p>\n A <code>KeyStroke</code> is defined as an optional set of modifier keys\n followed optionally by a natural key. A <code>KeyStroke</code> is said to\n be complete if it contains a natural key. A natural key is any Unicode\n character (e.g., "backspace", etc.), any character belonging to a natural\n language (e.g., "A", "1", "[", etc.), or any special control character\n specific to computers (e.g., "F10", "PageUp", etc.).\n </p>\n <p>\n All <code>KeyStroke</code> objects have a formal string representation\n available via the <code>toString()</code> method. There are a number of\n methods to get instances of <code>KeyStroke</code> objects, including one\n which can parse this formal string representation.\n </p>\n <p>\n All <code>KeyStroke</code> objects, via the <code>format()</code> method,\n provide a version of their formal string representation translated by\n platform and locale, suitable for display to a user.\n </p>\n <p>\n <code>KeyStroke</code> objects are immutable. Clients are not permitted to\n extend this class.\n </p>\n \n @since 3.1\n"
" Creates an instance of <code>KeyStroke</code> given a natural key.\n \n @param naturalKey\n            the natural key. The format of this integer is defined by\n            whichever widget toolkit you are using; <code>NO_KEY</code>\n            always means no natural key.\n @return a key stroke. This key stroke will have no modifier keys.\n         Guaranteed not to be <code>null</code>.\n @see SWTKeySupport\n"
" Creates an instance of <code>KeyStroke</code> given a set of modifier keys\n and a natural key.\n \n @param modifierKeys\n            the modifier keys. The format of this integer is defined by\n            whichever widget toolkit you are using; <code>NO_KEY</code>\n            always means no modifier keys.\n @param naturalKey\n            the natural key. The format of this integer is defined by\n            whichever widget toolkit you are using; <code>NO_KEY</code>\n            always means no natural key.\n @return a key stroke. Guaranteed not to be <code>null</code>.\n @see SWTKeySupport\n"
" Creates an instance of <code>KeyStroke</code> by parsing a given a formal\n string representation.\n \n @param string\n            the formal string representation to parse.\n @return a key stroke. Guaranteed not to be <code>null</code>.\n @throws ParseException\n             if the given formal string representation could not be parsed\n             to a valid key stroke.\n"
""
""
" Formats this key stroke into the current default look.\n \n @return A string representation for this key stroke using the default\n         look; never <code>null</code>.\n"
" Returns the modifier keys for this key stroke.\n \n @return the bit mask of modifier keys; <code>NO_KEY</code> means that\n         there is no modifier key.\n"
" Returns the natural key for this key stroke.\n \n @return The natural key for this key stroke. This value is\n         <code>NO_KEY</code> if the key stroke is incomplete (i.e., has\n         no natural key).\n"
""
" Returns whether or not this key stroke is complete. Key strokes are\n complete iff they have a natural key which is not <code>NO_KEY</code>.\n \n @return <code>true</code>, iff the key stroke is complete.\n"
" Returns the formal string representation for this key stroke.\n \n @return The formal string representation for this key stroke. Guaranteed\n         not to be <code>null</code>.\n @see java.lang.Object#toString()\n"
" The delimiter between multiple keys in a single key strokes -- expressed\n in the formal key stroke grammar. This is not to be displayed to the\n user. It is only intended as an internal representation.\n"
" The set of delimiters for <code>Key</code> objects allowed during\n parsing of the formal string representation.\n"
" The representation for no key.\n"
" <p>\n Formats the keys in the internal key sequence grammar. This is used for\n persistence, and is not really intended for display to the user.\n </p>\n \n @since 3.1\n"
""
""
""
""
""
" <p>\n Any formatter capable of taking a key sequence or a key stroke and converting\n it into a string. These formatters are used to produce the strings that the\n user sees in the keys preference page and the menus, as well as the strings\n that are used for persistent storage.\n </p>\n \n @since 3.1\n"
" Formats an individual key into a human readable format. This uses an\n internationalization resource bundle to look up the key. This does not do\n any platform-specific formatting (e.g., Carbon's command character).\n \n @param key\n            The key to format.\n @return The key formatted as a string; should not be <code>null</code>.\n"
" Format the given key sequence into a string. The manner of the conversion\n is dependent on the formatter. It is required that unequal key sequences\n return unequal strings.\n \n @param keySequence\n            The key sequence to convert; must not be <code>null</code>.\n @return A string representation of the key sequence; must not be\n         <code>null</code>.\n"
" Format the given key strokes into a string. The manner of the conversion\n is dependent on the formatter. It is required that unequal key strokes\n return unequal strings.\n \n @param keyStroke\n            The key stroke to convert; must not be <Code>null</code>.\n @return A string representation of the key stroke; must not be <code>\n         null</code>\n"
" <p>\n A cache for formatters. It keeps a few instances of pre-defined instances of\n <code>IKeyFormatter</code> available for use. It also allows the default\n formatter to be changed.\n </p>\n \n @since 3.1\n @see org.eclipse.jface.bindings.keys.formatting.IKeyFormatter\n"
" An accessor for the current default key formatter.\n \n @return The default formatter; never <code>null</code>.\n"
" Provides an instance of <code>EmacsKeyFormatter</code>.\n \n @return The Xemacs formatter; never <code>null</code>.\n"
" Provides an instance of <code>FormalKeyFormatter</code>.\n \n @return The formal formatter; never <code>null</code>.\n"
" Sets the default key formatter.\n \n @param defaultKeyFormatter\n            the default key formatter. Must not be <code>null</code>.\n"
" <p>\n A key formatter providing the Emacs-style accelerators using single letters\n to represent the modifier keys.\n </p>\n \n @since 3.1\n"
" Formats an individual key into a human readable format. This converts the\n key into a format similar to Xemacs.\n \n @param key\n            The key to format; must not be <code>null</code>.\n @return The key formatted as a string; should not be <code>null</code>.\n"
""
""
""
""
" <p>\n An abstract implementation of a key formatter that provides a lot of common\n key formatting functionality. It is recommended that implementations of\n <code>IKeyFormatter</code> subclass from here, rather than implementing\n <code>IKeyFormatter</code> directly.\n </p>\n \n @since 3.1\n"
""
""
""
" An accessor for the delimiter you wish to use between keys. This is used\n by the default format implementations to determine the key delimiter.\n \n @return The delimiter to use between keys; should not be\n         <code>null</code>.\n"
" An accessor for the delimiter you wish to use between key strokes. This\n used by the default format implementations to determine the key stroke\n delimiter.\n \n @return The delimiter to use between key strokes; should not be\n         <code>null</code>.\n"
" Separates the modifier keys from each other, and then places them in an\n array in some sorted order. The sort order is dependent on the type of\n formatter.\n \n @param modifierKeys\n            The modifier keys from the key stroke.\n @return An array of modifier key values -- separated and sorted in some\n         order. Any values in this array that are\n         <code>KeyStroke.NO_KEY</code> should be ignored.\n"
""
" The key for the delimiter between keys. This is used in the\n internationalization bundles.\n"
" The key for the delimiter between key strokes. This is used in the\n internationalization bundles.\n"
" An empty integer array that can be used in\n <code>sortModifierKeys(int)</code>.\n"
" <p>\n Formats the key sequences and key strokes into the native human-readable\n format. This is typically what you would see on the menus for the given\n platform and locale.\n </p>\n \n @since 3.1\n"
" Formats an individual key into a human readable format. This uses an\n internationalization resource bundle to look up the key. This does the\n platform-specific formatting for Carbon.\n \n @param key\n            The key to format.\n @return The key formatted as a string; should not be <code>null</code>.\n"
""
""
""
""
