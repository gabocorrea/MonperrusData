id,type,path,text
2,package,org/eclipse/jface/dialogs,"\nProvides support for dialogs.\n<h2>\nPackage Specification</h2>\nA dialog is a specialized window, typically consisting of a dialog area\nand a button bar, designed for narrow-focussed communication with the user.\n<p>The dialog framework consists of an abstract base class (<tt>Dialog</tt>),\nalong with more concrete dialog subclasses for displaying messages (<tt>MessageDialog</tt>),\nsoliciting text input (<tt>InputDialog</tt>), and displaying progress during\na long-running operation (<tt>ProgressMonitorDialog</tt>).\n<p>Dialog stores (<tt>IDialogStore</tt>, <tt>DialogStore</tt>) provide\na general framework for organizing a dialog's settings into key/value pairs.\nMulti-page dialogs are made easier through the use of dialog pages (<tt>IDialogPage</tt>,\n<tt>DialogPage</tt>).\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n<br>&nbsp;\n<br>&nbsp;\n"
4,package,org/eclipse/jface/resource,"\nProvides support for managing resources such as SWT\nfonts and images.\n<h2>\nPackage Specification</h2>\nThis package contains support for managing resources, including:\n<ul>\n<li>\nfont registries (<tt>FontRegistry</tt>) - for hanging on to the SWT font\nobjects needed by an application</li>\n\n<li>\ncolor registries (<tt>ColorRegistry</tt>) - for hanging on to the SWT color \nobjects needed by an application</li>\n\n<li>\nimage registries (<tt>ImageRegistry</tt>) - for hanging on to the SWT image\nobjects needed by an application</li>\n\n<li>\nimage descriptors (<tt>ImageDescriptor</tt>) - surrogate object for creating\nSWT images</li>\n\n<li>\nstring conversion (<tt>StringConverter</tt>) - for parsing property files</li>\n</ul>\nThe JFace resources module is an independent JFace module requiring a basic\nknowledge of SWT and the JFace property change event mechanism. Familiarity\nwith other JFace modules is not required.\n<p>Image descriptors are objects that knows how to create an image on demand.\nThey serve as a lightweight representation of images in situations where\nno SWT display exists yet, and are used mainly in conjunction with image\nregistries. This package contains the image descriptor framework, which\nis a simple hierarchy rooted at the abstract class <tt>ImageDescriptor</tt>.\nThe framework includes abstract subclasses for composing images (<tt>CompositeImageDescriptor</tt>)\nas well as a ready-made concrete subclass for loading images from files\n(<tt>FileImageDescriptor</tt>).\n<p>The class <tt>JFaceResources</tt> maintains global state on behalf of\nJFace itself consisting of JFace's own image registry, font registry, resource\nbundle, and preference store.\n<br>&nbsp;\n"
5,package,org/eclipse/jface/operation,"\nProvides JFace support for long-running operations.\n<h2>\nPackage Specification</h2>\nLong-running operations must be dealt with specially in order to keep the\nUI helpful and responsive. Typically this involves temporarily disabling\nmost controls and displaying a busy cursor and progress indicator; while\nthe operation is in progress, the only requests that will be accepted will\nbe ones to cancel the operation.\n<p>The <tt>IRunnableWithProgress</tt> interface should be implemented by\nany class whose instances are intended to be executed as long-running operations.\nThese objects can then be run in any runnable context (<tt>IRunnableContext</tt>),\nincluding such standard JFace UI components as application windows (<tt>ApplicationWindow</tt>),\nwizard dialogs (<tt>WizardDialog</tt>), and progress monitor dialogs (<tt>ProgressMonitorDialog</tt>).\nThe utility class <tt>ModalContext</tt> defines the basic mechanism and\nUI event loop for modal operations.\n"
6,package,org/eclipse/jface/contentassist,"\nProvides a content assist add-on for implementors of <tt>IContentAssistSubjectControl</tt>.\nContent assist supports the user in writing&nbsp; by proposing context\nsensitive completions at a given position. A completion can also\nbe a incomplete in itself and content assist provides means to deal with\nnested completions.\n<h2>\nPackage Specification</h2>\n<tt>ISubjectControlContentAssistant</tt> defines the concept of the content assist add-on.\nIt collaborates with content type specific completion processors (<tt>ISubjectControlContentAssistProcessor</tt>)\nin order to generate completion proposals (<tt>ICompletionProposal</tt>)\nvalid at the current document position. The package provides a default\nimplementation <tt>SubjectControlContentAssistant</tt> which completely defines and implements\nthe UI and the control flow for content assist.\n<br>\n<br>\n<strong>Deprecated, as of 3.2, replaced by Platform UI's field assist support</strong>\n"
7,package,org/eclipse/jface/preference,"\nProvides a framework for preferences.\n<h2>\nPackage Specification</h2>\nA <b>preference manager</b> (class <tt>PreferenceManager</tt>) maintains\na tree of <b>preference nodes</b>. Preferences are presented to the end\nuser in a <b>preference dialog</b> consisting of <b>preference pages</b>.\nA preference page consists of multiple preference fields, which can be\ndisplayed and modified though <b>field editors</b>. The framework contains\nan abstract base class for preference dialogs (<tt>PreferenceDialog</tt>),\nand an abstract preference page class (<tt>FieldEditorPreferencePage</tt>)\nfor hosting these field editors.\n<p>The individual preference values are maintained in a <b>preference store</b>\n(<tt>IPreferenceStore</tt>). Each preference has a current value and a\ndefault value use to (re-)initialize it. The framework provides a concrete\npreference store implementation (<tt>PreferenceStore</tt>) based on an\ninternal <tt>java.util.Properties</tt> object, with support for persisting\nthe non-default preference values to files or streams.\n<p>A field editor presents the value of a single preference to the end\nuser. The value is loaded from the preference store; if modified by the\nend user, the value is validated and eventually stored back to the preference\nstore.\n<p>This package contains ready-to-use field editors for various types of\npreferences:\n<ul>\n<li>\n<tt>BooleanFieldEditor</tt> - booleans</li>\n\n<li>\n<tt>IntegerFieldEditor</tt> - integers</li>\n\n<li>\n<tt>StringFieldEditor</tt> - text strings</li>\n\n<li>\n<tt>RadioGroupFieldEditor</tt> - enumerations</li>\n\n<li>\n<tt>ColorFieldEditor</tt> - RGB colors</li>\n\n<li>\n<tt>FontFieldEditor</tt> - fonts</li>\n\n<li>\n<tt>DirectoryFieldEditor</tt> - directories</li>\n\n<li>\n<tt>FileFieldEditor</tt> - files</li>\n\n<li>\n<tt>PathEditor</tt> - paths</li>\n</ul>\nAll field editors are subclasses of the abstract base class <tt>FieldEditor</tt>;\nthe framework allows new kinds of field editors to be defined by subclassing\nthis class or one of its subclasses.\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n"
8,package,org/eclipse/jface/wizard,"\nProvides a framework for wizards.\n<h2>\nPackage Specification</h2>\nA wizard dialog is a specialized window for walking the end user through\na sequence of steps; each step is presented on a separate page.\n<p>At the most abstract level, the protocol is given by 3 interfaces:\n<ul>\n<li>\n<tt>IWizard</tt> - a wizard consisting of several wizard pages</li>\n\n<li>\n<tt>IWizardPage</tt> - an individual wizard page</li>\n\n<li>\n<tt>IWizardContainer</tt> - the outside world from the point of view of\na wizard</li>\n</ul>\nA wizard is any object implementing <tt>IWizard</tt>. The abstract base\nclass <tt>Wizard</tt> is provided as a starting point; it is simpler to\nsubclass <tt>Wizard</tt> than to implement <tt>IWizard</tt> from scratch.\nThe main responsibility of a <tt>Wizard</tt> subclass is doing the real\nwork when the wizard finishes.\n<p>Similarly, a wizard page is any object implementing <tt>IWizardPage</tt>.\nThe abstract base class <tt>WizardPage</tt> is provided as a starting point.\nThe main responsibility of a <tt>WizardPage</tt> subclass is providing\nthe SWT controls and the backing logic for a single wizard page.\n<p><tt>WizardDialog</tt> is a ready-to-use JFace dialog that is instantiated\nwith a wizard and acts as the wizard's container. This dialog has a standard\nlayout: an area at the top containing the wizard's title, description,\nand image; the actual wizard page appears in the middle; below it is a\nprogress indicator; and at the bottom is an area with a message line and\na button bar containing Next, Back, Finish, Cancel, and Help buttons.\n<p><tt>WizardSelectionPage</tt>, a special abstract subclass of <tt>WizardPage</tt>,\nallows whole other wizards to be connected to a root page.\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n"
10,package,org/eclipse/jface/internal/text/revisions,"\n<p>\nInternal classes and helpers to implement the revision model and its UI presentation. See\nthe <tt><a href="../../../text/revisions/package.html">org.eclipse.jface.text.revisions</a></tt>\npackage for the API classes implementing the revision model.\n</p>\nContains everything needed to:\n<ul>\n  <li>paint revision information in the vertical ruler</li>\n  <li>adapt the revision information to (quick) diff scripts</li>\n</ul>\n<p>\nThis package is internal and may be subject to change without notice.\n</p>\n"
11,package,org/eclipse/jface/internal/text/link/contentassist,"\nThis package is a modified copy of <code>org.eclipse.jface.text.contentassist</code> that supports the linked mode proposals.\nThis package is internal and may disappear if the changes are merged with the API content assist package. Subject to change without notice.\n"
14,package,org/eclipse/jface/bindings,"\n<p>Provides support for bindings between commands and various user input events\n(e.g., keyboard shortcuts).</p>\n\n<h2>Package Specification</h2>\n<p>\nThis package provides the common classes and abstract classes required to\nprovide binding support.\n</p>\n<p>\nAll the real work in this package is carried out by the\n<code>BindingManager</code>, and most work with bindings can be carried out\ndirectly with it.  The binding manager manages a collection of bindings, and\ndecides which bindings are active at any point in time.  By changes the various\nproperties of the manager, the active bindings will change.  The binding\nmanager implements a caching scheme that is optimized for an infreqeuntly\nchanging set of bindings, but frequently changing properties.\n</p>\n<p>\nThe binding manager also manages schemes.  A scheme is a grouping of bindings.\nTo create a scheme, use <code>BindingManager.getScheme(String)</code>.  The\nscheme must then be defined before it can be used.\n</p>\n<p>\nIf you wish to implement your own type of binding, then you must subclass\n<code>Trigger</code> and <code>TriggerSequence</code>.  Then, simply use these\nsubclasses with the <code>BindingManager</code>.\n</p>\n"
15,package,org/eclipse/jface/bindings/keys,"\n<p>Provides support for bindings between commands and keys.</p>\n\n<h2>Package Specification</h2>\n<p>\nThis just a key-specific implementation of the generic bindings and trigger\nsupport.  This package provides an abstraction layer between the SWT key events\nand key bindings within JFace.\n</p>\n<p>\n<code>KeySequence</code> is a <code>TriggerSequence</code> that has\n<code>KeyStroke</code> instances as triggers.  A <code>KeyStroke</code> is\ncomposed of one or more keys held down at the same time.  A key stroke ends\nwhen the keys are released.  A key stroke can contain zero or more modifiers\nkeys, but it always contains exactly one natural key.  A modifier key is one of\nCtrl, Shift, Alt, or Command.  A natural key is anything else.</p>\n<p>\nNatural keys are further subdivided into special keys and character keys.\nCharacter keys are keys that have an ASCII representation (e.g., Space, 'A' and\nBackspace).  Special keys are ones that do not (e.g., Arrow Up, F11, and\nNumLock).\n</p>\n<p>\n<code>SWTKeySupport</code> is a static class that provides the link between SWT\nand these internal representations.  It has methods for converting between SWT\nkey events and the internal representation, and vice versa.  It also provides\naccess to the native-style key formatting facilities.\n</p>\n"
16,package,org/eclipse/jface/bindings/keys/formatting,"\n<p>Provides support for formatting key sequences.</p>\n\n<h2>Package Specification</h2>\n<p>\nThis is a collection fo various formatters for key sequences.  The formatters\nare accessible through the <code>KeyFormatterFactory</code>.  To change how\nkeys are formatted in the user interface, call\n<code>KeyFormatterFactory.setDefault(IKeyFormatter)</code>.  They provided\nformatters are:\n</p>\n<dl>\n<dt>FormalKeyFormatter</dt>\n<dd>Provides a formal grammar for reading and writing key sequences.</dd>\n<dt>NativeKeyFormatter</dt>\n<dd>Provide a native-looking, human-readable format for keys.</dd>\n<dt>CompactKeyFormatter</dt>\n<dd>A variation of the native formatter that provides a more compact representation.</dd>\n<dt>EmacsKeyFormatter</dt>\n<dd>An Xemacs-style formatter (e.g., C^x C^x).</dd>\n</dl>\n"
17,package,org/eclipse/jface/viewers,"\nProvides a framework for viewers, which are model-based\ncontent adapters for SWT widgets.\n<h2>\nPackage Specification</h2>\nA viewer is a model-based adapter on an SWT widget.&nbsp; Each viewer has\nfour parts:\n<blockquote>\n<li>\nan <b>input</b> - the object that serves as the viewer's model</li>\n\n<li>\na <b>widget</b> - the SWT control through which the viewer's model is displayed</li>\n\n<li>\na <b>content provider</b> - mediates between the model and viewer</li>\n\n<li>\na <b>label provider</b> - maps model objects to displayable labels containing\ntext and/or an image</li>\n</blockquote>\nThis package contains the viewer framework. The viewer framework is an\nindependent JFace module. Using it requires a knowledge of SWT, but does\nnot require familiarity with any of the other JFace modules. The framework\nconsists of abstract base classes for viewers (<tt>Viewer</tt>, <tt>StructuredViewer</tt>,\n<tt>AbstractTreeViewer</tt>) together with concrete viewer classes (<tt>ListViewer</tt>,\n<tt>TreeViewer</tt>,\n<tt>TableViewer</tt>,\n<tt>TableTreeViewer</tt>, <tt>CheckboxTreeViewer</tt>,\nand <tt>CheckboxTableViewer</tt>),\nand various lesser support classes. The concrete structured viewer classes\nare ready-to-use and have built-in support for drag-and-drop, filtering\n(<tt>IViewerFilter</tt> and <tt>ViewerFilter</tt>), and sorting (<tt>IViewerSorter</tt>\nand <tt>ViewerSorter</tt>); these classes may also be subclassed further\nif required.\n<p>In general terms, creating a viewer involves the following steps:\n<ul>\n<li>\ninstantiating a viewer on some pre-existing SWT widget,</li>\n\n<li>\nsetting the viewer's content provider (an object implementing <tt>IContentProvider</tt>),</li>\n\n<li>\nsetting the viewer's label provider (an object implementing\n<tt>ILabelProvider</tt>),</li>\n\n<li>\nand, finally, setting the viewer's input.</li>\n</ul>\nOnce a viewer's input is set, the viewer becomes active. As the model changes,\nit is the content provider's responsibility to respond to changes to the\nmodel by telling the viewer what to change (done by calling add and remove\nmethods on the viewer). An existing viewer may be retargeted by giving\nit a different object as input; the viewer is responsible for informing\nthe content provider of these kinds of wholesale changes (<tt>IContentProvider.inputChanged</tt>).\nAlso, each viewer registers with its label provider for notification of\nchanges that would affect what the viewer displays (see <tt>ILabelProviderListener.stateChanged</tt>).\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n"
18,package,org/eclipse/jface/viewers/deferred,"\nProvides a framework for viewers that handle deferred contents. \n<h2>\nPackage Specification</h2>\n<p>The deferred viewers are viewers that can handle concurrent updates from a \n  variety of Threads.<br>\n  &nbsp; \n"
19,package,org/eclipse/jface/window,"\nProvides a general framework for creating and managing\nwindows.\n<h2>\nPackage Specification</h2>\nA JFace window is an object that has no visual representation (no widgets)\nuntil it is told to open. All JFace windows, including dialogs, are instances\nof the abstract class <tt>Window</tt> or a subclass. This package contains\nthe base window classes:\n<tt>Window</tt> itself, which provides support\nfor a basic windows; and <tt>ApplicationWindow</tt>, which provides ready-to-use\nsupport for a high-level "main window" with standard menus, tool bar, and\nstatus line. Both of these classes may be subclassed to define additional\ntypes of window as required.\n<p>This package also contains <tt>WindowManager</tt>, instance of which\nare used for managing a group of windows. Window managers are useful in\napplications which create many different windows (dialogs, wizards, etc.)\nin addition to a main window. Window managers are not required for simple\napplications.\n<p>The only global state maintained by classes in this package is a default\nimage for window title bars (<tt>Window.setDefaultImage</tt>).\n"
23,package,org/eclipse/jface/text/reconciler,"\nProvides a reconciler add-on for an <tt>ITextViewer</tt>.\nA&nbsp; reconciler provides generic synchronization support&nbsp; with\nthe content of the document serving as the <tt>ITextViewer</tt>'s input.\nThere is no explicit model of what is synchronized.\n<h2>\nPackage Specification</h2>\n<tt>IReconciler</tt> defines the concept of a reconciler. It collaborates\nwith content type specific reconciling strategies (<tt>IReconcilingStrategy</tt>)\nwhich perform the synchronization for a given dirty region. The package\ncontains a default implementation of <tt>IReconciler</tt> (<tt>Reconciler</tt>).\n\n<tt>Reconciler</tt> and <tt>MonoReconciler</tt> implements reconciling\nas a periodic background activity and folds co-located changes while being\ninactive.\n"
27,package,org/eclipse/jface/text/templates/persistence,"\nProvides persistence support for templates.\n<h3>Packages</h3>\n<ul>\n  <li><tt><big><strong>org.eclipse.jface.text.templates</strong></big></tt></li>\n  <li><tt><big><strong>org.eclipse.ui.workbench.texteditor.templates</strong></big></tt></li>\n  <li><tt><big><strong>org.eclipse.ui.editors.templates</strong></big></tt></li>\n</ul>\n<h3>Introduction</h3>\nTemplates are shortcuts for frequently used fragments of text such as\ncode patterns or complex text entities. They may contain variables\nwhich are only resolved at the time when the template is inserted\nwithin a context. Together with linked mode, inserting a template can\ncreate a on-the-fly edit mask within a text viewer.<br>\n<br>\nTemplates are specified as text, variables are defined using the <tt>${variable}</tt>\nnotation known from\nAnt, for example. The following snippet shows an example template for\nan instance check in Java:<br>\n<pre>if (${name} instanceof ${type}) {\n&nbsp;&nbsp;&nbsp; ${type} ${new_name} = (${type})${name};\n&nbsp;&nbsp;&nbsp; ${cursor}\n}\n</pre>\nIn this template, the variables (<tt>name,type, ...</tt>) are resolved\nwhen inserted into java source and changing one variable instance will\nalso change the other. When leaving linked mode, the caret is placed at\nthe <tt>cursor</tt> variable.<br>\n<br>\nTemplate functionality can be added to a custom text editor by offering\n<tt>TemplateProposal</tt>s as content assist choices, which is\nsimplified by using a subclass of <tt>TemplateCompletionProcessor</tt>. User template management can be\noffered by including a <tt>TemplatePreferencePage</tt> which uses a <tt>TemplateStore</tt> and <tt>ContextTypeRegistry</tt> as the\nunderlying model to store templates. The <tt>org.eclipse.ui.editors.templates</tt>\nextension point can be used to allow other plug-ins to contribute\ntemplates to an editor. This is accomplished by using the <tt>ContributionTemplateStore</tt> and <tt>ContributionContextTypeRegistry</tt>\nsubclasses of the above types.<br>\n<br>\nTemplate variables are resolved by a <tt>TemplateVariableResolver.</tt> <tt>GlobalTemplateVariables</tt> offers\nsome default variables such as date, user, and selection, but advanced\nfeatures such as resolving to language constructs can be performed in\nsubclasses.<br>\n<h4>Classes</h4>\n<ul>\n  <li><tt>Template</tt> a template consists of name, context\ntype identifier, and a pattern.</li>\n  <li><tt>TemplateTranslator</tt> and <tt>TemplateBuffer</tt> are used to\nparse the template grammar and don't need to be used usually.</li>\n  <li>A <tt>TemplateProposal </tt>can be\noffered in content assist, possibly created by a subclass of <tt>TemplateCompletionProcessor.</tt></li>\n  <li><tt>TemplateStore</tt> and <tt>ContextTypeRegistry</tt> manage a\nset of templates within a plug-in and offer ways to store them in the\npreferences or externally in XML streams via a <tt>TemplateReaderWriter</tt>.<br></li>\n  <li><tt>ContributionTemplateStore</tt> and <tt>ContributionContextTypeRegistry</tt>\nadd awareness for the  <tt>org.eclipse.ui.editors.templates</tt>\nextension point.</li>\n  <li><tt>TemplatePreferencePage</tt> allows\nthe user to access the templates within a <tt>TemplateStore.</tt></li>\n</ul>\n<ul>\n</ul>\n<h4>Example</h4>\nSee the Template Editor Example in the <strong>org.eclipse.ui.examples.javaeditor</strong> project.<br>\n"
32,package,org/eclipse/jface/text/presentation,"\nProvides a presentation reconciler add-on for an <tt>ITextViewer</tt>.\nA presentation reconciler keep the presentation (styles and colors) in\nsync with the content of the document serving as the <tt>ITextViewer</tt>'s\ninput.\n<h2>\nPackage Specification</h2>\n<tt>IPresentationReconciler</tt> defines the concept of a presentation\nreconciler. It collaborates with content type specific presentation damagers\n(<tt>IPresentationDamager</tt>) which for a given document change determine\nthe region of the presentation which must be rebuild, and content type\nspecific presentation repairers (<tt>IPresentationRepairer</tt>) which\nconstruct for a given damage region the document presentation. The package\ncontains a default implementation of <tt>IPresentationReconciler </tt>(<tt>PresentationReconciler</tt>).\n"
34,package,org/eclipse/jface/text/quickassist,"\nThis package provides the quick assist assistant add-on for an <tt>ISourceViewer</tt>.\nThe quick assist assistant's purpose is to propose, display, and insert quick assists and quick fixes\navailable at the current source viewer's quick assist invocation context.\n<p>\nA quick fix is a completion that can correct a problem reported and visible through an <tt>Annotation</tt>\nwhile a quick assist is not related to a problem or <tt>Annotation</tt>. Since quick assists can be proposed\nwhere appropriate they are normally not visible in the viewer. The quick assist assistant implementation in\nthis package can show the quick assists that are available on the current line.\n</p>\n\n<h2>\nPackage Specification</h2>\n<tt>IQuickAssistAssistant</tt> defines the concept of the quick assist assistant add-on.\nIt collaborates with a quick assist processor (<tt>IQuickAssistProcessor</tt>)\nin order to generate quick fix and quick assist completion proposals (<tt>ICompletionProposal</tt>)\navailable at the current quick assist invocation context (<tt>IQuickAssistInvocationContext</tt>).\nThe package provides a default implementation <tt>QuickAssistAssistant</tt> which completely defines\nand implements the UI and the control flow for a quick assist assistant.\n<br>&nbsp;\n"
36,package,org/eclipse/jface/action,"\nProvides support for shared UI resources such as menus,\ntool bars, and status lines.\n<h2>\nPackage Specification</h2>\nContribution managers coordinate contributions to shared UI resources such\nas menus, menu bars, tool bars, and status lines. <tt>ContributionManager</tt>\nmaintains the contributions as a dynamic list of contribution items (<tt>IContributionItems</tt>).\nSeparators (<tt>Separator</tt>) can be included in contribution lists to\nbreak up the list's visual representation. Internally, contribution lists\ncan be organized into named groups via special group markers (<tt>GroupMarker</tt>)\nto facilitate programatic insertion at specific positions within the list.\n<p>Three specific contribution managers are provided: a status line manager\n(<tt>StatusLineManager</tt>), a tool bar manager (<tt>ToolBarManager</tt>),\nand a hierarchical menu manager (<tt>MenuManager</tt>).\n<p>Actions (<tt>IAction</tt>) are commands which can be triggered from\nthe UI, like the ones found in menus, toolbars, and buttons. Menus and\ntools bars are typically populated with contribution items that delegate\nto actions (<tt>ActionContributionItem</tt>).\n<p>Note: None of the classes in this package maintain global state.\n<br>&nbsp;\n"
39,package,org/eclipse/jface/fieldassist,"\nProvides classes that help communicate proper content for fields in dialogs and wizards.\n<h2>\nPackage Specification</h2>\n<p>\nThis package provides classes that can be used to guide a dialog user through choosing\nappropriate content for fields in a dialog or wizard.\n<p>\nA <tt>ContentProposalAdapter</tt> can be attached to an arbitrary control to provide \na popup showing content proposals.  These proposals appear when the defined\nassist keystroke is invoked.  The <tt>ContentProposalAdapter</tt> manages the creation, \nhiding, and showing of the proposal popup, as well as the proper handling of key events\nbetween the adapted control and its popup.  Implementors of <tt>IControlContentAdapter</tt>\nallow the adapter to set and retrieve the contents of the supplied control.\n</p>\n<p>\nAn <tt>AutoCompleteField</tt> configures a <tt>ContentProposalAdapter</tt> in a manner\nthat supports automatic field completion popups that filter based on the control's\ncontents.\n</p>\n<p>\n<tt>ControlDecoration</tt> can be used to decorate an arbitrary control with \nan image that communicates information about the control's content.  Decorations can be\nused to show additional information about a field, such as its status, or a cue\nthat shows availability of content proposals.  Decorations are defined in pre-defined\nlocations relative to the control, and can be set up to show at all times, or only\nwhen the control has focus.  It is up to the client to ensure there is enough\nspace allocated to render the control decoration.  Decorations can optionally show \ndescriptive text when the user hovers over them.  \n</p>\n<p>\n<tt>DecoratedField</tt> can also be used to decorate a control.  The main difference\nis that decorated fields reserve space for multiple decorations in particular\nlocations around the control.  To do this, the field manages the creation of the \nfield's control, using a specialized layout to ensure there is adequate space \nreserved for decorations around the control. Other than using the field to manage \nthe decorations themselves, clients are expected to interact \ndirectly with the control.  \n</p>\n\n<p>Note: None of the classes in this package maintain global state.\n"
40,package,org/apache/commons/collections,"\n<p>\nThis package contains the interfaces and utilities shared across all the subpackages of this component.\n</p>\n<p>\nThe following collection implementations are provided in the package:\n<ul>\n<li>ArrayStack - a non synchronized Stack that follows the same API as java util Stack\n<li>ExtendedProperties - extends the Properties class to add extra functionality\n</ul>\n<p>\n\n"
41,package,org/apache/commons/collections/comparators,"\n<p>\nThis package contains implementations of the\n{@link java.util.Comparator Comparator} interface.\n<p>\nYou may also consider using \n{@link org.apache.commons.collections.ComparatorUtils ComparatorUtils},\nwhich is a single class that uses static methods to construct instances\nof the classes in this package.\n"
42,package,org/apache/commons/collections/list,"\n<p>\nThis package contains implementations of the\n{@link java.util.List List} interface.\n</p>\n<p>\nThe following implementations are provided in the package:\n<ul>\n<li>TreeList - a list that is optimised for insertions and removals at any index in the list</li>\n<li>CursorableLinkedList - a list that can be modified while the listIterator (cursor) is being used</li>\n<li>NodeCachingLinkedList - a linked list that caches the storage nodes for a performance gain</li>\n</ul>\n</p>\n<p>\nThe following decorators are provided in the package:\n<ul>\n<li>Synchronized - synchronizes method access for multi-threaded environments</li>\n<li>Unmodifiable - ensures the collection cannot be altered</li>\n<li>Predicated - ensures that only elements that are valid according to a predicate can be added</li>\n<li>Typed - ensures that only elements that are of a specific type can be added</li>\n<li>Transformed - transforms each element added</li>\n<li>FixedSize - ensures that the size of the list cannot change</li>\n<li>Lazy - creates objects in the list on demand</li>\n<li>Growth - grows the list instead of erroring when set/add used with index beyond the list size</li>\n<li>SetUnique - a list that avoids duplicate entries like a Set</li>\n</ul>\n</p>\n"
43,package,org/apache/commons/collections/functors,"\n<p>\nThis package contains implementations of the\n{@link org.apache.commons.collections.Closure Closure},\n{@link org.apache.commons.collections.Predicate Predicate},\n{@link org.apache.commons.collections.Transformer Transformer} and\n{@link org.apache.commons.collections.Factory Factory} interfaces.\nThese provide simple callbacks for processing with collections.\n</p>\n"
44,package,org/apache/commons/collections/iterators,"\n<p>\nThis package contains implementations of the\n{@link java.util.Iterator Iterator} interface.\n<p>\nYou may also consider using \n{@link org.apache.commons.collections.IteratorUtils IteratorUtils},\nwhich is a single class that uses static methods to construct instances\nof the classes in this package.\n"
46,package,org/apache/commons/collections/buffer,"\n<p>\nThis package contains implementations of the\n{@link org.apache.commons.collections.Buffer Buffer} interface.\n<p>\nThe following implementations are provided in the package:\n<ul>\n<li>PriorityBuffer - provides for removal based on a comparator ordering\n<li>BoundedFifoBuffer - implements a buffer with a fixed size that throws exceptions when full\n<li>CircularFifoBuffer - implements a buffer with a fixed size that discards oldest when full\n<li>UnboundedFifoBuffer - implements a buffer that grows in size if necessary\n</ul>\n<p>\nThe following decorators are provided in the package:\n<ul>\n<li>Synchronized - synchronizes method access for multi-threaded environments\n<li>Unmodifiable - ensures the collection cannot be altered\n<li>Predicated - ensures that only elements that are valid according to a predicate can be added\n<li>Typed - ensures that only elements that are of a specific type can be added\n<li>Transformed - transforms elements added to the buffer\n<li>Blocking - blocks on get and remove until an element is available\n</ul>\n</pre>\n"
47,package,org/apache/commons/collections/bidimap,"\n<p>\nThis package contains implementations of the\n{@link org.apache.commons.collections.BidiMap BidiMap},\n{@link org.apache.commons.collections.OrderedBidiMap OrderedBidiMap} and \n{@link org.apache.commons.collections.SortedBidiMap SortedBidiMap} interfaces.\nA BidiMap is an extension to Map that allows keys and values to be looked up with equal ease.\nOne example usage is a system communicating to a legacy datasource that must convert codes\nfrom the new format to the old format and vice versa.\n<p>\nThe following implementations are provided in the package:\n<ul>\n<li>DualHashBidiMap - uses two HashMaps to implement BidiMap\n<li>DualTreeBidiMap - uses two TreeMaps to implement SortedBidiMap\n<li>TreeBidiMap - red-black tree implementation of OrderedBidiMap\n</ul>\n<p>\nThe following decorators are provided in the package:\n<ul>\n<li>Unmodifiable - ensures the map cannot be altered\n<!--\n<li>Synchronized - synchronizes method access for multi-threaded environments\n<li>Predicated - ensures that only elements that are valid according to a predicate can be added\n<li>Typed - ensures that only elements that are of a specific type can be added\n<li>Transformed - transforms each element added\n<li>FixedSize - ensures that the size of the map cannot change\n<li>Lazy - creates objects in the map on demand\n<li>ListOrdered - ensures that insertion order is retained-->\n</ul>\n</pre>\n"
49,package,org/apache/commons/collections/bag,"\n<p>\nThis package contains implementations of the\n{@link org.apache.commons.collections.Bag Bag} and \n{@link org.apache.commons.collections.SortedBag SortedBag} interfaces.\nA bag stores an object and a count of the number of occurences of the object.\n<p>\nThe following implementations are provided in the package:\n<ul>\n<li>HashBag - implementation that uses a HashMap to store the data\n<li>TreeBag - implementation that uses a TreeMap to store the data\n</ul>\n<p>\nThe following decorators are provided in the package:\n<ul>\n<li>Synchronized - synchronizes method access for multi-threaded environments\n<li>Unmodifiable - ensures the bag cannot be altered\n<li>Predicated - ensures that only elements that are valid according to a predicate can be added\n<li>Typed - ensures that only elements that are of a specific type can be added\n<li>Transformed - transforms each element added to the bag\n</ul>\n</pre>\n"
50,package,org/apache/commons/collections/set,"\n<p>\nThis package contains implementations of the\n{@link java.util.Set Set} and\n{@link java.util.SortedSet SortedSet} interfaces.\n<p>\nThe implementations are in the form of direct implementations and decorators.\nA decorator wraps another implementation of the interface to add some\nspecific additional functionality.\n<p>\nThe following implementations are provided in the package:\n<ul>\n<li>CompositeSet - a set that combines multiple sets into one\n</ul>\nThe following decorators are provided in the package:\n<ul>\n<li>Synchronized - synchronizes method access for multi-threaded environments\n<li>Unmodifiable - ensures the collection cannot be altered\n<li>Predicated - ensures that only elements that are valid according to a predicate can be added\n<li>Typed - ensures that only elements that are of a specific type can be added\n<li>Transformed - transforms each element added\n<li>ListOrdered - ensures that insertion order is retained\n<li>MapBackedSet - a set formed by decorating a Map\n</ul>\n</pre>\n"
51,package,org/apache/commons/collections/map,"\n<p>\nThis package contains implementations of the \n{@link java.util.Map Map},\n{@link org.apache.commons.collections.IterableMap IterableMap},\n{@link org.apache.commons.collections.OrderedMap OrderedMap} and\n{@link java.util.SortedMap SortedMap} interfaces.\nA Map provides a lookup from a key to a value.\nA number of implementations also support the new MapIterator interface that enables\nsimple iteration of map keys and values.\n<p>\nThe following implementations are provided:\n<ul>\n<li>CaseInsensitiveMap - map that compares keys in a case insensitive way\n<li>CompositeMap - map that combines multiple maps into a single view\n<li>HashedMap - general purpose HashMap replacement supporting MapIterator\n<li>IdentityMap - map that uses == for comparison instead of equals()\n<li>Flat3Map - designed for good performance at size 3 or less\n<li>LinkedMap - a hash map that maintains insertion order, supporting OrderedMapIterator\n<li>MultiKeyMap - map that provides special methods for using more than one key to access the value\n<li>ReferenceMap - allows the garbage collector to collect keys and values using equals() for comparison\n<li>ReferenceIdentityMap - allows the garbage collector to collect keys and values using == for comparison\n<li>SingletonMap - a fully featured map to hold one key-value pair\n<li>StaticBucketMap - internally synchronized and designed for thread-contentious environments\n</ul>\n<p>\nThe following decorators are provided:\n<ul>\n<li>Unmodifiable - ensures the collection cannot be altered\n<li>Predicated - ensures that only elements that are valid according to a predicate can be added\n<li>Typed - ensures that only elements that are of a specific type can be added\n<li>Transformed - transforms each element added\n<li>FixedSize - ensures that the size of the map cannot change\n<li>Lazy - creates objects in the map on demand\n<li>ListOrdered - ensures that insertion order is retained\n</ul>\n</pre>\n"
52,package,org/apache/commons/collections/collection,"\n<p>\nThis package contains implementations of the\n{@link java.util.Collection Collection} interface.\n<p>\nThe following implementations are provided in the package:\n<ul>\n<li>CompositeCollection - a collection that combines multiple collections into one\n</ul>\nThe following decorators are provided in the package:\n<ul>\n<li>Synchronized - synchronizes method access for multi-threaded environments\n<li>Unmodifiable - ensures the collection cannot be altered\n<li>Predicated - ensures that only elements that are valid according to a predicate can be added\n<li>Typed - ensures that only elements that are of a specific type can be added\n<li>Transformed - transforms elements as they are added\n</ul>\n</pre>\n"
53,package,java/io,"\n\nProvides for system input and output through data streams,\nserialization and the file system.\n\nUnless otherwise noted, passing a null argument to a constructor\nor method in any class or interface in this package will cause a\n<tt>NullPointerException</tt> to be thrown.\n\n<h2>Package Specification</h2>\n<ul>\n  <li><a href="../../../platform/serialization/spec/serialTOC.html"> Java Object Serialization Specification </a>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation,\nplease see:\n<ul>\n  <li><a href="../../../technotes/guides/serialization">Serialization Enhancements</a>\n</ul>\n\n@since JDK1.0\n"
54,package,java/rmi,"\n\nProvides the RMI package. RMI is Remote Method Invocation.  It is a\nmechanism that enables an object on one Java virtual machine to invoke\nmethods on an object in another Java virtual machine.  Any object that\ncan be invoked this way must implement the Remote interface. When such\nan object is invoked, its arguments are ``marshalled'' and sent from the\nlocal virtual machine to the remote one, where the arguments are\n``unmarshalled.''  When the method terminates, the results are\nmarshalled from the remote machine and sent to the caller's virtual\nmachine.  If the method invocation results in an exception being\nthrown, the exception is indicated to caller.\n\n<!--\n<h2>Package Specification</h2>\n\n##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT #####\n<ul>\n  <li><a href="">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since JDK1.1\n"
56,package,java/rmi/dgc,"\n\nProvides classes and interface for RMI distributed\ngarbage-collection (DGC).  When the RMI server returns an object to\nits client (caller of the remote method), it tracks the remote\nobject's usage in the client. When there are no more references to the\nremote object on the client, or if the reference's ``lease'' expires and\nnot renewed, the server garbage-collects the remote object.\n\n<!--\n<h2>Package Specification</h2>\n\n##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT #####\n<ul>\n  <li><a href="">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since JDK1.1\n"
58,package,java/rmi/registry,"\n\nProvides a class and two interfaces for the RMI registry.\nA registry is a remote object that maps names to remote objects.  A\nserver registers its remote objects with the registry so that they can\nbe looked up.  When an object wants to invoke a method on a remote\nobject, it must first lookup the remote object using its name.  The\nregistry returns to the calling object a reference to the remote\nobject, using which a remote method can be invoked.\n\n<!--\n<h2>Package Specification</h2>\n\n##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT #####\n<ul>\n  <li><a href="">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since JDK1.1\n"
59,package,java/lang,"\n\nProvides classes that are fundamental to the design of the Java\nprogramming language. The most important classes are <code>Object</code>,\nwhich is the root of the class hierarchy, and <code>Class</code>, instances of\nwhich represent classes at run time.\n<p>\nFrequently it is necessary to represent a value of primitive type as\nif it were an object. The wrapper classes <code>Boolean</code>,\n<code>Character</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, and\n<code>Double</code> serve this purpose. An object of type <code>Double</code>,\nfor example, contains a field whose type is double, representing that\nvalue in such a way that a reference to it can be stored in a variable\nof reference type. These classes also provide a number of methods for\nconverting among primitive values, as well as supporting such\nstandard methods as equals and hashCode.  The <code>Void</code> class is a\nnon-instantiable class that holds a reference to a <code>Class</code> object\nrepresening the primitive type void.\n<p>\nThe class <code>Math</code> provides commonly used mathematical functions such\nas sine, cosine, and square root. The classes <code>String</code> and\n<code>StringBuffer</code> similarly provide commonly used operations on\ncharacter strings.\n<p>\nClasses <code>ClassLoader</code>, <code>Process</code>, <code>Runtime</code>,\n<code>SecurityManager</code>, and <code>System</code> provide "system operations"\nthat manage the dynamic loading of classes, creation of external processes,\nhost environment inquiries such as the time of day, and enforcement of\nsecurity policies.\n<p>\nClass <code>Throwable</code> encompasses objects that may be thrown by the\nthrow statement (&sect;14.16). Subclasses of <code>Throwable</code> represent errors\nand exceptions.\n<p>\n<h2>Package Specification</h2>\n\n\n<a name="charenc"></a>\n<h3>Character Encodings</h3>\n\nThe specification of the {@link java.nio.charset.Charset\njava.nio.charset.Charset} class describes the naming conventions for character\nencodings as well as the set of standard encodings that must be supported by\nevery implementation of the Java platform.\n\n\n<!--\n<ul>\n  <li><a href="">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since JDK1.0\n"
60,package,java/lang/ref,"\n\n\nProvides reference-object classes, which support a limited degree of\ninteraction with the garbage collector.  A program may use a reference object\nto maintain a reference to some other object in such a way that the latter\nobject may still be reclaimed by the collector.  A program may also arrange to\nbe notified some time after the collector has determined that the reachability\nof a given object has changed.\n\n\n<h2>Package Specification</h2>\n\nA <em>reference object</em> encapsulates a reference to some other object so\nthat the reference itself may be examined and manipulated like any other\nobject.  Three types of reference objects are provided, each weaker than the\nlast: <em>soft</em>, <em>weak</em>, and <em>phantom</em>.  Each type\ncorresponds to a different level of reachability, as defined below.  Soft\nreferences are for implementing memory-sensitive caches, weak references are\nfor implementing canonicalizing mappings that do not prevent their keys (or\nvalues) from being reclaimed, and phantom references are for scheduling\npre-mortem cleanup actions in a more flexible way than is possible with the\nJava finalization mechanism.\n\n<p> Each reference-object type is implemented by a subclass of the abstract\nbase <code>{@link java.lang.ref.Reference}</code> class.  An instance of one of\nthese subclasses encapsulates a single reference to a particular object, called\nthe <em>referent</em>.  Every reference object provides methods for getting and\nclearing the reference.  Aside from the clearing operation reference objects\nare otherwise immutable, so no <code>set</code> operation is provided.  A\nprogram may further subclass these subclasses, adding whatever fields and\nmethods are required for its purposes, or it may use these subclasses without\nchange.\n\n\n<h3>Notification</h3>\n\nA program may request to be notified of changes in an object's reachability by\n<em>registering</em> an appropriate reference object with a <em>reference\nqueue</em> at the time the reference object is created.  Some time after the\ngarbage collector determines that the reachability of the referent has changed\nto the value corresponding to the type of the reference, it will add the\nreference to the associated queue.  At this point, the reference is considered\nto be <em>enqueued</em>.  The program may remove references from a queue either\nby polling or by blocking until a reference becomes available.  Reference\nqueues are implemented by the <code>{@link java.lang.ref.ReferenceQueue}</code>\nclass.\n\n<p> The relationship between a registered reference object and its queue is\none-sided.  That is, a queue does not keep track of the references that are\nregistered with it.  If a registered reference becomes unreachable itself, then\nit will never be enqueued.  It is the responsibility of the program using\nreference objects to ensure that the objects remain reachable for as long as\nthe program is interested in their referents.\n\n<p> While some programs will choose to dedicate a thread to removing reference\nobjects from one or more queues and processing them, this is by no means\nnecessary.  A tactic that often works well is to examine a reference queue in\nthe course of performing some other fairly-frequent action.  For example, a\nhashtable that uses weak references to implement weak keys could poll its\nreference queue each time the table is accessed.  This is how the <code>{@link\njava.util.WeakHashMap}</code> class works.  Because the <code>{@link\njava.lang.ref.ReferenceQueue#poll ReferenceQueue.poll}</code> method simply\nchecks an internal data structure, this check will add little overhead to the\nhashtable access methods.\n\n\n<h3>Automatically-cleared references</h3>\n\nSoft and weak references are automatically cleared by the collector before\nbeing added to the queues with which they are registered, if any.  Therefore\nsoft and weak references need not be registered with a queue in order to be\nuseful, while phantom references do.  An object that is reachable via phantom\nreferences will remain so until all such references are cleared or themselves\nbecome unreachable.\n\n\n<a name="reachability"></a>\n<h3>Reachability</h3>\n\nGoing from strongest to weakest, the different levels of reachability reflect\nthe life cycle of an object.  They are operationally defined as follows:\n\n<ul>\n\n<li> An object is <em>strongly reachable</em> if it can be reached by some\nthread without traversing any reference objects.  A newly-created object is\nstrongly reachable by the thread that created it.\n\n<li> An object is <em>softly reachable</em> if it is not strongly reachable but\ncan be reached by traversing a soft reference.\n\n<li> An object is <em>weakly reachable</em> if it is neither strongly nor\nsoftly reachable but can be reached by traversing a weak reference.  When the\nweak references to a weakly-reachable object are cleared, the object becomes\neligible for finalization.\n\n<li> An object is <em>phantom reachable</em> if it is neither strongly, softly,\nnor weakly reachable, it has been finalized, and some phantom reference refers\nto it.\n\n<li> Finally, an object is <em>unreachable</em>, and therefore eligible for\nreclamation, when it is not reachable in any of the above ways.\n\n</ul>\n\n\n@version  1.11, 04/02/10\n@author	  Mark Reinhold\n@since	  1.2\n\n<!--\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n"
62,package,java/lang/reflect,"\n\nProvides classes and interfaces for obtaining reflective\ninformation about classes and objects.  Reflection allows\nprogrammatic access to information about the fields, methods\nand constructors of loaded classes, and the use of reflected fields,\nmethods, and constructors to operate on their underlying\ncounterparts, within security restrictions.\n<p>\n<code>AccessibleObject</code> allows supression of access checks if\nthe necessary <code>ReflectPermission</code> is available.\n<p>\n<code>Array</code> provides static methods to dynamically create and\naccess arrays.\n<p>\nClasses in this package, along with <code>java.lang.Class</code>\naccommodate applications such as debuggers, interpreters, object\ninspectors, class browsers, and services such as Object Serialization\nand JavaBeans that need access to either the public members of a\ntarget object (based on its runtime class) or the members declared by\na given class.\n\n<!--\n<h2>Package Specification</h2>\n\n##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT #####\n<ul>\n  <li><a href="">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since JDK1.1\n"
63,package,java/lang/instrument,"\n\nProvides services that allow Java programming language agents to instrument programs running on the JVM. \nThe mechanism for instrumentation is modification of the byte-codes of methods.\n\n<h2>Package Specification</h2>\n\n<P> \nAn agent is deployed as a JAR file. An attribute in the JAR file manifest specifies the\nagent class which will be loaded to start the agent. For implementations that support a command-line \ninterface, an agent is started by specifying an option on the command-line.  \nImplementations may also support a mechanism to start agents some time after the VM has\nstarted. For example, an implementation may provide a mechanism that allows a tool to \n<i>attach</i> to a running application, and initiate the loading of the tool's agent into\nthe running application. The details as to how the load is initiated, is implementation\ndependent.\n\n<h3>Command-Line Interface</h3>\n\n<P> \nOn implementations with a command-line interface, an agent is started by\nadding this option to the command-line:\n<blockquote>\n<code><b>-javaagent:</b></code><i>jarpath[</i><code><b>=</b></code><i>options]</i>\n</blockquote>\n<i>jarpath</i> is the path to the agent JAR file.\n<i>options</i> is the agent options.\nThis switch may be used multiple times on the same command-line, \nthus creating multiple agents.\nMore than one agent may use the same <i>jarpath</i>.\nAn agent JAR file must conform to the JAR file specification.\n\n<P>\nThe manifest of the agent JAR file must contain the attribute <code>Premain-Class</code>. The\nvalue of this attribute is the name of the <i>agent class</i>. The agent class must implement a \npublic static <code>premain</code> method similar in principle to the <code>main</code> application \nentry point.  After the Java Virtual Machine (JVM) has initialized, each <code>premain</code> method \nwill be called in the order the agents were specified, then the real application\n<code>main</code> method will be called. \nEach <code>premain</code> method must return in order for the startup sequence to proceed.\n\n<P>\nThe <code>premain</code> method has one of two possible signatures. The JVM first attempts to\ninvoke the following method on the agent class:\n\n<blockquote>\n<code>public static void\npremain(String agentArgs, Instrumentation inst);\n</code>\n</blockquote>\n\n<P>\nIf the agent class does not implement this method then the JVM will attempt to invoke:\n\n<blockquote>\n<code>public static void\npremain(String agentArgs);\n</code>\n</blockquote>\n\n<P>\nThe agent class may also have an <code>agentmain</code> method for use when the agent is started \nafter VM startup. When the agent is started using a command-line option, the <code>agentmain</code>\nmethod is not invoked.\n\n\n<P>\nThe agent class will be loaded by the system class loader\n(see {@link java.lang.ClassLoader#getSystemClassLoader ClassLoader.getSystemClassLoader}). This is\nthe class loader which typically loads the class containing the application <code>main</code> method.\nThe <code>premain</code> methods will be run under the same security and classloader \nrules as the application <code>main</code> method.\nThere are no modeling restrictions on what the agent <code>premain</code> method may do.\nAnything application <code>main</code> can do, including creating threads, is legal from <code>premain</code>.\n\n<P>\nEach agent is passed its agent options via the <code>agentArgs</code> parameter.\nThe agent options are passed as a single string,\nany additional parsing should be performed by the agent itself.\n\n<P>\nIf the agent cannot be resolved \n(for example, because the agent class cannot be loaded,\nor because the agent class does not have an appropriate <code>premain</code> method), the JVM will abort.\nIf a <code>premain</code> method throws an uncaught exception, the JVM will abort.\n\n\n\n<h3>Starting Agents After VM Startup</h3>\n\n<p>\nAn implementation may provide a mechanism to start agents sometime after the\nthe VM has started. The details as to how this is initiated are implementation \nspecific but typically the application has already started and its <code>\nmain</code> method has already been invoked. In cases where an implementation\nsupports the starting of agents after the VM has started the following applies:\n\n<ol>\n  <li><p>The manifest of the agent JAR must contain the attribute <code>Agent-Class</code>. \n      The value of this attribute is the name of the <i>agent class</i>. </p></li> \n      \n  <li><p>The agent class must implement a public static <code>agentmain</code> method. </p></li>\n\n  <li><p>The system class loader (\n      {@link java.lang.ClassLoader#getSystemClassLoader ClassLoader.getSystemClassLoader}) must\n      support a mechanism to add an agent JAR file to the system class path. <p></li>\n</ol>  \n\n<P>\nThe agent JAR is appended to the system class path. This is the class loader that typically loads \nthe class containing the application <code>main</code> method. The agent class is loaded and the\nJVM attempts to invoke the <code>agentmain</code> method. The JVM first attempts to invoke \nthe following method on the agent class:\n\n<blockquote>\n<code>public static void\nagentmain(String agentArgs, Instrumentation inst);\n</code>\n</blockquote>\n\n<P>\nIf the agent class does not implement this method then the JVM will attempt to invoke:\n\n<blockquote>\n<code>public static void\nagentmain(String agentArgs);\n</code>\n</blockquote>\n\n<P>\nThe agent class may also have an <code>premain</code> method for use when the agent is started\nusing a command-line option. When the agent is started after VM startup the <code>premain</code>\nmethod is not invoked.\n\n\n<P>\nThe agent is passed its agent options via the <code>agentArgs</code> parameter.\nThe agent options are passed as a single string,\nany additional parsing should be performed by the agent itself. \n\n<P>\nThe <code>agentmain</code> method should do any necessary initialization \nrequired to start the agent. When startup is complete the method should \nreturn. If the agent cannot be started\n(for example, because the agent class cannot be loaded,\nor because the agent class does not have a conformant <code>agentmain</code> method), the JVM will\nnot abort. If the <code>agentmain</code> method throws an uncaught exception it will be ignored.\n\n\n\n<h3>Manifest Attributes</h3>\nThe following manifest attributes are defined for an agent JAR file:\n<blockquote>\n<dl>\n<dt><code>Premain-Class</code></dt>\n<dd>\n                        When an agent is specified at JVM launch time this attribute\n			specifies the agent class.\n			That is, the class containing the <code>premain</code> method.\n                        When an agent is specified at JVM launch time this attribute\n			is required. If the attribute is not present the JVM will abort.\n                        Note: this is a class name, not a file name or path.							\n</dd>\n\n<dt><code>Agent-Class</code></dt>\n<dd>\n                        If an implementation supports a mechanism to start agents \n                        sometime after the VM has started then this attribute specifies\n                        the agent class.\n                        That is, the class containing the <code>agentmain</code> method.\n                        This attribute is required, if it is not present the agent\n                        will not be started.\n                        Note: this is a class name, not a file name or path.\n</dd>			\n\n<dt><code>Boot-Class-Path</code></dt>\n<dd>\n                        A list of paths to be searched by the bootstrap class\n                        loader. Paths represent directories or libraries\n                        (commonly referred to as JAR or zip libraries on\n                        many platforms). 			\n                        These paths are searched by the\n                        bootstrap class loader after the platform specific\n                        mechanisms of locating a class have failed.\n                        Paths are searched in the order listed.\n                        Paths in the list are separated by one or more spaces.\n                        A path takes the syntax of the path component of a\n                        hierarchical URI. The path is\n                        absolute if it begins with a slash character ('/'),\n                        otherwise it is relative. A relative path is resolved\n                        against the absolute path of the agent JAR file.\n                        Malformed and non-existent paths are ignored.	\n			When an agent is started sometime after the VM has\n			started then paths that do not represent a JAR file\n			are ignored.\n                        This attribute is optional.\n</dd>\n<dt><code>Can-Redefine-Classes</code></dt>\n<dd>\n                        Boolean (<code>true</code> or <code>false</code>, case irrelevant).\n                        Is the ability to redefine classes\n                        needed by this agent.\n                        Values other than <code>true</code> are considered <code>false</code>.\n                        This attribute is optional, the default is <code>false</code>.\n</dd>\n<dt><code>Can-Retransform-Classes</code></dt>\n<dd>\n                        Boolean (<code>true</code> or <code>false</code>, case irrelevant).\n                        Is the ability to retransform classes\n                        needed by this agent.\n                        Values other than <code>true</code> are considered <code>false</code>.\n                        This attribute is optional, the default is <code>false</code>.\n</dd>\n<dt><code>Can-Set-Native-Method-Prefix</code></dt>\n<dd>\n                        Boolean (<code>true</code> or <code>false</code>, case irrelevant).\n                        Is the ability to set native method prefix needed by this agent.\n                        Values other than <code>true</code> are considered <code>false</code>.\n                        This attribute is optional, the default is <code>false</code>.\n</dd>\n</dl>\n</blockquote>\n\n<p> \nAn agent JAR file may have both the <code>Premain-Class</code> and <code>Agent-Class</code>\nattributes present in the manifest. When the agent is started on the command-line using\nthe <code>-javaagent</code> option then the <code>Premain-Class</code> attribute\nspecifies the name of the agent class and the <code>Agent-Class</code> attribute is\nignored. Similarly, if the agent is started sometime after the VM has started, then\nthe <code>Agent-Class</code> attribute specifies the name of the agent class\n(the value of <code>Premain-Class</code> attribute is ignored).\n\n<h2>Related Documentation</h2>\n\nFor tool documentation, please see:\n<ul>\n  <li><a href="{@docRoot}/../technotes/tools/index.html">JDK Tools and Utilities</a>\n</ul>\n\n@since JDK1.5\n@revised 1.6\n\n"
64,package,java/lang/management,"\n\nProvides the management interface for monitoring and management of the \nJava virtual machine as well as the operating system on which the \nJava virtual machine is running.  It allows both local and remote \nmonitoring and management of the running Java virtual machine.  \n\n<h4>Platform MXBeans</h4>\n\nThis package defines the management interface of the following\ncomponents:\n\n<blockquote>\n<table cellspacing=1 summary="Description of the MBeans">\n<tr>\n<th><p align="left">Management Interface</p></th>\n<th><p align="left">Description</p></th>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.ClassLoadingMXBean}</tt> </td>\n<td> Class loading system of the Java virtual machine.</td>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.CompilationMXBean}</tt> </td>\n<td> Compilation system of the Java virtual machine.</td>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.MemoryMXBean}</tt> </td>\n<td> Memory system of the Java virtual machine.</td>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.ThreadMXBean}</tt> </td>\n<td> Threads system of the Java virtual machine.</td>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.RuntimeMXBean}</tt> </td>\n<td> Runtime system of the Java virtual machine.</td>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.OperatingSystemMXBean}</tt> </td>\n<td> Operating system on which the Java virtual machine is running.</td>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.GarbageCollectorMXBean}</tt> </td>\n<td> Garbage collector in the Java virtual machine.</td>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.MemoryManagerMXBean}</tt> </td>\n<td> Memory manager in the Java virtual machine.</td>\n</tr>\n<tr>\n<td> <tt>{@link java.lang.management.MemoryPoolMXBean}</tt> </td>\n<td> Memory pool in the Java virtual machine.</td>\n</tr>\n</table>\n</blockquote>\n\n<p>\nA platform MXBean is a <i>managed bean</i> that defines the management\ninterface for one component for the platform and is specified in the\n<a href="ManagementFactory.html#MXBean">\nManagementFactory</a> class.\n\n<p>An application can monitor the instrumentation of the \nJava virtual machine and manage certain characteristics in\nthe following ways:\n<ul>\n<li><i>Direct access to an MXBean interface</i>\n    <ol type="a">\n    <li>Get the MXBean instance through the static factory method\n        and access the MXBean interface locally of the running\n        virtual machine.</li>\n    <li>Construct an MXBean proxy instance that\n        forwards the method calls to a given \n        {@link javax.management.MBeanServer MBeanServer}\n        by calling\n        {@link java.lang.management.ManagementFactory#newPlatformMXBeanProxy\n         ManagementFactory.newPlatformMXBeanProxy}.\n         A proxy is typically constructed to remotely access\n         an MXBean of another running virtual machine.</li>\n    </ol></li>\n<li><i>Indirect access via {@link javax.management.MBeanServer MBeanServer} \n       interface</i>\n    <ol type="a">\n    <li>Go through the \n        {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n        platform MBeanServer} to access MXBeans locally or\n        a specific <tt>MBeanServerConnection</tt> to access\n        MXBeans remotely.\n        The attributes and operations of an MXBean use only\n        <em>JMX open types</em> which include basic data types, \n        {@link javax.management.openmbean.CompositeData CompositeData},\n        and {@link javax.management.openmbean.TabularData TabularData} \n        defined in {@link javax.management.openmbean.OpenType OpenType}.\n       </li>\n    </ol></li>\n</ul>\n\nBelow shows a few <a href="#examples">examples</a> of different\nways to access MXBeans.\n\n<h4>ManagementFactory</h4>\n\nThe {@link java.lang.management.ManagementFactory} class is the management\nfactory class for the Java platform.  This class provides a set of \nstatic factory methods to obtain the MXBeans for the Java platform\nto allow an application to access the MXBeans directly.\n\n<p>A <em>platform MBeanServer</em> can be accessed with the\n{@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n getPlatformMBeanServer} method.  On the first call to this method,\nit creates the platform MBeanServer and registers all platform MXBeans \nincluding platform MXBeans defined in other packages such as\n{@link java.util.logging.LoggingMXBean}.  \nEach platform MXBean is registered with a unique name defined in the\n{@link java.lang.management.ManagementFactory ManagementFactory} class\nfor constructing {@link javax.management.ObjectName ObjectName}. \nThis is a single MBeanServer that can be shared by different managed \ncomponents running within the same Java virtual machine.\n \n<h4>Interoperability</h4>\n\nA management application and a platform MBeanServer of a running\nvirtual machine can interoperate \nwithout requiring classes used by the platform MXBean interfaces.\nThe data types being transmitted between the JMX connector\nserver and the connector client are JMX\n{@link javax.management.openmbean.OpenType open types} and\nthis allows interoperation across versions.\n\n<p>A data type used by the MXBean interfaces are mapped to\nan open type when being accessed via MBeanServer interface.\nThe data type mapping is specified in the\n{@link java.lang.management.ManagementFactory ManagementFactory} class.\n\n<h4><a name="examples">Ways to Access MXBeans</a></h4>\n\nThere are three different ways to access the management interfaces. \n\n<p>\n<ol>\n<li>Call the methods in the MXBean directly within the same \n    Java virtual machine.\n<blockquote><pre>\n   RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();\n\n   // Get the standard attribute "VmVendor"\n   String vendor = mxbean.getVmVendor();\n\n</pre>\n</blockquote>\n</li>\n\n<li>Go through a <tt>MBeanServerConnection</tt> connecting \n    to the <tt>platform MBeanServer</tt> of a running virtual machine.</li>\n<blockquote><pre>\n   MBeanServerConnection mbs;\n\n   // Connect to a running JVM (or itself) and get MBeanServerConnection\n   // that has the JVM MXBeans registered in it\n   ...\n\n   try {\n       // Assuming the RuntimeMXBean has been registered in mbs\n       ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);\n    \n       // Get standard attribute "VmVendor"\n       String vendor = (String) mbs.getAttribute(oname, "VmVendor");\n   } catch (....) {\n       // Catch the exceptions thrown by ObjectName constructor\n       // and MBeanServer.getAttribute method\n       ...\n   }\n\n</pre></blockquote>\n\n<li>Use MXBean proxy.</li>\n<blockquote><pre>\n   MBeanServerConnection mbs;\n\n   // Connect to a running JVM (or itself) and get MBeanServerConnection\n   // that has the JVM MBeans registered in it\n   ...\n\n   // Get a MBean proxy for RuntimeMXBean interface\n   RuntimeMXBean proxy = \n       ManagementFactory.newPlatformMXBeanProxy(mbs,\n                                                ManagementFactory.RUNTIME_MXBEAN_NAME,\n                                                RuntimeMXBean.class);\n   // Get standard attribute "VmVendor" \n   String vendor = proxy.getVmVendor();\n</pre></blockquote>\n</ol>\n\n\n<h4><a name="extension">Platform Extension</a></h4>\n\nA Java virtual machine implementation may add its platform extension to\nthe management interface by defining platform-dependent\ninterfaces that extend the standard management interfaces to include\nplatform-specific metrics and management operations.  \nThe static factory methods in the <tt>ManagementFactory</tt> class will\nreturn the MBeans with the platform extension.\n\n<p>\nIt is recommended to name the platform-specific attributes with\na vendor-specific prefix such as the vendor's name to\navoid collisions of the attribute name between the future extension\nto the standard management interface and the platform extension.\nIf the future extension to the standard management interface defines\na new attribute for a management interface and the attribute name\nis happened to be same as some vendor-specific attribute's name,\nthe applications accessing that vendor-specific attribute would have\nto be modified to cope with versioning and compatibility issues.\n\n<p>Below is an example showing how to access a platform-specific\nattribute from Sun's implementation of the <tt>RuntimeMXBean</tt>.\n\n<p>\n1) Direct access to the Sun-specific MXBean interface\n<blockquote><pre>\n   com.sun.management.RuntimeMXBean mxbean = \n       (com.sun.management.RuntimeMXBean) ManagementFactory.getRuntimeMXBean();\n\n   // Get the standard attribute "VmVendor"\n   String vendor = mxbean.getVmVendor();\n\n   // Get the platform-specific attribute "Bar"\n   BarType bar = mxbean.getBar();\n\n</pre>\n</blockquote>\n\n<p>\n2) Access the Sun-specific MXBean interface via <tt>MBeanServer</tt>\n\n<blockquote><pre>\n   MBeanServerConnection mbs;\n\n   // Connect to a running JVM (or itself) and get MBeanServerConnection\n   // that has the JVM MXBeans registered in it\n   ...\n\n   try {\n       // Assuming the RuntimeMXBean has been registered in mbs\n       ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);\n    \n       // Get standard attribute "VmVendor"\n       String vendor = (String) mbs.getAttribute(oname, "VmVendor");\n\n       // Check if this MXBean contains Sun's extension\n       if (mbs.isInstanceOf(oname, "com.sun.management.RuntimeMXBean")) {\n           // Get platform-specific attribute "Bar"\n           BarType bar = (String) mbs.getAttribute(oname, "Bar");\n       }\n   } catch (....) {\n       // Catch the exceptions thrown by ObjectName constructor\n       // and MBeanServer methods\n       ...\n   }\n\n</pre></blockquote>\n\n<p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor\nor method in any class or interface in this package will cause a {@link\njava.lang.NullPointerException NullPointerException} to be thrown.\n\n<p> The java.lang.management API is thread-safe.\n\n@see <a href="../../../javax/management/package-summary.html">\n     JMX Specification.</a>\n\n@author  Mandy Chung\n@version 1.15, 04/02/10\n@since   1.5\n\n"
67,package,java/sql,"\n\nProvides the API for accessing and processing data stored in a \ndata source (usually a relational database) using the \nJava<sup><font size=-2>TM</font></sup> programming language. \nThis API includes a framework whereby different\ndrivers can be installed dynamically to access different data sources.\nAlthough the JDBC<sup><font size=-2>TM</font></sup> API is mainly geared \nto passing SQL statements to a database, it provides for reading and\nwriting data from any data source with a tabular format.\nThe reader/writer facility, available through the \n<code>javax.sql.RowSet</code> group of interfaces, can be customized to\nuse and update data from a spread sheet, flat file, or any other tabular \ndata source.\n<P>\n<h2>What the JDBC<sup><font size=-2>TM</font></sup> 4.0 API Includes</h2>\nThe JDBC<sup><font size=-2>TM</font></sup> 4.0 API includes both\nthe <code>java.sql</code> package, referred to as the JDBC core API,\nand the <code>javax.sql</code> package, referred to as the JDBC Optional\nPackage API. This complete JDBC API\nis included in the Java<sup><font size=-2>TM</font></sup>  \nStandard Edition (Java SE<sup><font size=-2>TM</font></sup>), version 6.  \nThe <code>javax.sql</code> package extends the functionality of the JDBC API \nfrom a client-side API to a server-side API, and it is an essential part\nof the Java<sup><font size=-2>TM</font></sup>  Enterprise Edition\n(Java EE<sup><font size=-2>TM</font></sup>) technology. \n<P>\n<h2>Versions</h2>\nThe JDBC 4.0 API incorporates all of the previous JDBC API versions:\n<UL>\n <LI> The JDBC 3.0 API\n <LI> The JDBC 2.1 core API\n <LI> The JDBC 2.0 Optional Package API<br>\n      (Note that the JDBC 2.1 core API and the JDBC 2.0 Optional Package\n      API together are referred to as the JDBC 2.0 API.)\n <LI> The JDBC 1.2 API\n <LI> The JDBC 1.0 API\n</UL>\n<P>\nClasses, interfaces, methods, fields, constructors, and exceptions \nhave the following "since" tags that indicate when they were introduced \ninto the Java platform. When these "since" tags are used in\nJavadoc<sup><font size=-2>TM</font></sup> comments for the JDBC API,\nthey indicate the following:\n<UL>\n <LI>Since 1.6 -- new in the JDBC 4.0 API and part of the Java SE platform, \n     version 6\n <LI>Since 1.4 -- new in the JDBC 3.0 API and part of the J2SE platform, \n     version 1.4\n <LI>Since 1.2 -- new in the JDBC 2.0 API and part of the J2SE platform, \n     version 1.2\n <LI>Since 1.1 or no "since" tag -- in the original JDBC 1.0 API and part of\n      the JDK<sup><font size=-2>TM</font></sup>, version 1.1\n</UL>\n<P>\n<b>NOTE:</b> Many of the new features are optional; consequently, there is \nsome variation in drivers and the features they support. Always \ncheck your driver's documentation to see whether it supports a feature before\nyou try to use it.\n<P>\n<b>NOTE:</b> The class <code>SQLPermission</code> was added in the\nJava<sup><font size=-2>TM</font></sup> 2 SDK, Standard Edition, \nversion 1.3 release. This class is used to prevent unauthorized\naccess to the logging stream associated with the <code>DriverManager</code>,\nwhich may contain information such as table names, column data, and so on.\n<p>\n\n<h2>What the <code>java.sql</code> Package Contains</h2>\nThe <code>java.sql</code> package contains API for the following:\n<UL>\n  <LI>Making a connection with a database via the <code>DriverManager</code> facility\n  <UL>\n	 <LI><code>DriverManager</code> class -- makes a connection with a driver\n	 <LI><code>SQLPermission</code> class -- provides permission when code\n                  running within a Security Manager, such as an applet,\n                  attempts to set up a logging stream through the\n                  <code>DriverManager</code>\n	 <LI><code>Driver</code> interface -- provides the API for registering\n             and connecting drivers based on JDBC technology ("JDBC drivers"); \n             generally used only by the <code>DriverManager</code> class\n	 <LI><code>DriverPropertyInfo</code> class -- provides properties for a\n             JDBC driver; not used by the general user\n  </UL>\n  <LI>Sending SQL statements to a database\n  <UL>\n	 <LI><code>Statement</code> --  used to send basic SQL statements\n	 <LI><code>PreparedStatement</code> --  used to send prepared statements or \n              basic SQL statements (derived from <code>Statement</code>)\n	 <LI><code>CallableStatement</code> --  used to call database stored \n              procedures (derived from <code>PreparedStatement</code>)\n	 <LI><code>Connection</code> interface --  provides methods for creating\n             statements and managing connections and their properties\n	 <LI><code>Savepoint</code> --  provides savepoints in a transaction\n\n  </UL>\n  <LI>Retrieving and updating the results of a query\n  <UL>\n	 <LI><code>ResultSet</code> interface\n  </UL>\n  <LI>Standard mappings for SQL types to classes and interfaces in the \n      Java programming language\n  <UL>\n	 <LI><code>Array</code> interface -- mapping for SQL <code>ARRAY</code> \n	 <LI><code>Blob</code> interface -- mapping for SQL <code>BLOB</code> \n	 <LI><code>Clob</code> interface -- mapping for SQL <code>CLOB</code>\n	 <LI><code>Date</code> class -- mapping for SQL <code>DATE</code> \n	  <LI><code>NClob</code> interface -- mapping for SQL <code>NCLOB</code>\n	 <LI><code>Ref</code> interface -- mapping for SQL <code>REF</code> \n	  <LI><code>RowId</code> interface -- mapping for SQL <code>ROWID</code>\n	 <LI><code>Struct</code> interface -- mapping for SQL <code>STRUCT</code> \n	  <LI><code>SQLXML</code> interface -- mapping for SQL <code>XML</code>\n	 <LI><code>Time</code> class -- mapping for SQL <code>TIME</code> \n	 <LI><code>Timestamp</code> class -- mapping for SQL <code>TIMESTAMP</code> \n	 <LI><code>Types</code> class -- provides constants for SQL types\n  </UL>\n  <LI>Custom mapping an SQL user-defined type (UDT) to a class in the\n	  Java programming language\n  <UL>\n	 <LI><code>SQLData</code> interface -- specifies the mapping of\n              a UDT to an instance of this class\n	 <LI><code>SQLInput</code> interface -- provides methods for reading\n              UDT attributes from a stream\n	 <LI><code>SQLOutput</code> interface -- provides methods for writing\n              UDT attributes back to a stream\n  </UL>\n  <LI>Metadata\n  <UL>\n	 <LI><code>DatabaseMetaData</code> interface -- provides information\n              about the database\n	 <LI><code>ResultSetMetaData</code> interface -- provides information\n              about the columns of a <code>ResultSet</code> object\n	 <LI><code>ParameterMetaData</code> interface -- provides information\n              about the parameters to <code>PreparedStatement</code> commands\n  </UL>\n  <LI>Exceptions\n	<UL>\n	  <LI><code>SQLException</code> -- thrown by most methods when there\n		 is a problem accessing data and by some methods for other reasons\n	  <LI><code>SQLWarning</code> -- thrown to indicate a warning\n	  <LI><code>DataTruncation</code> -- thrown to indicate that data may have\n     	  been truncated\n	  <LI><code>BatchUpdateException</code> -- thrown to indicate that not all\n		 commands in a batch update executed successfully\n	</UL>\n</UL>\n<P>\n<h3><code>java.sql</code> and <code>javax.sql</code> Features Introduced in the JDBC 4.0 API</h3>\n<UL>\n  <LI>auto java.sql.Driver discovery -- no longer need to load a \n<code>java.sql.Driver</code> class via <code>Class.forName</code>\n <LI>National Character Set support added\n <li>Support added for the SQL:2003 XML data type\n <lI>SQLException enhancements -- Added support for cause chaining; New SQLExceptions\n added for common SQLState class value codes\n <li>Enhanced Blob/Clob functionality -- Support provided to create and free a Blob/Clob instance\n as well as additional methods added to improve accessiblity\n <li>Support added for accessing a SQL ROWID\n <li>Support added to allow a JDBC application to access an instance of a JDBC resource\n that has been wrapped by a vendor, usually in an application server or connection \n pooling environment.\n <li>Availability to be notfied when a <code>PreparedStatement</code> that is associated\n with a <code>PooledConnection</code> has been closed or the driver determines is invalid\n \n \n</UL>\n<P>\n<P>\n<h3><code>java.sql</code> and <code>javax.sql</code> Features Introduced in the JDBC 3.0 API</h3>\n<UL>\n  <LI>Pooled statements -- reuse of statements associated with a pooled \n       connection\n  <LI>Savepoints -- allow a transaction to be rolled back to a designated\n      savepoint\n  <LI>Properties defined for <code>ConnectionPoolDataSource</code> -- specify\n      how connections are to be pooled\n  <LI>Metadata for parameters of a <code>PreparedStatement</code> object\n  <LI>Ability to retrieve values from automatically generated columns\n  <LI>Ability to have multiple <code>ResultSet</code> objects \n       returned from <code>CallableStatement</code> objects open at the\n      same time\n  <LI>Ability to identify parameters to <code>CallableStatement</code>\n      objects by name as well as by index\n  <LI><code>ResultSet</code> holdability -- ability to specify whether cursors\n      should be held open or closed at the end of a transaction\n  <LI>Ability to retrieve and update the SQL structured type instance that a\n      <code>Ref</code> object references\n  <LI>Ability to programmatically update <code>BLOB</code>,\n      <code>CLOB</code>, <code>ARRAY</code>, and <code>REF</code> values.\n  <LI>Addition of the <code>java.sql.Types.DATALINK</code> data type -- \n      allows JDBC drivers access to objects stored outside a data source\n  <LI>Addition of metadata for retrieving SQL type hierarchies\n</UL>\n<P>\n<h3><code>java.sql</code> Features Introduced in the JDBC 2.1 Core API</h3>\n<UL>\n  <LI>Scrollable result sets--using new methods in the <code>ResultSet</code>\n	  interface that allow the cursor to be moved to a particular row or to a\n	  position relative to its current position\n  <LI>Batch updates\n  <LI>Programmatic updates--using <code>ResultSet</code> updater methods\n  <LI>New data types--interfaces mapping the SQL3 data types\n  <LI>Custom mapping of user-defined types (UDTs)\n  <LI>Miscellaneous features, including performance hints, the use of character\n	  streams, full precision for <code>java.math.BigDecimal</code> values,\n	  additional security, and\n	  support for time zones in date, time, and timestamp values. \n</UL>\n<P>\n<h3><code>javax.sql</code> Features Introduced in the JDBC 2.0 Optional\nPackage API</h3>\n<UL>\n  <LI>The <code>DataSource</code> interface as a means of making a connection.  The\n      Java Naming and Directory Interface<sup><font size=-2>TM</font></sup>\n      (JNDI) is used for registering a <code>DataSource</code> object with a \n      naming service and also for  retrieving it.\n  <LI>Pooled connections -- allowing connections to be used and reused\n  <LI>Distributed transactions -- allowing a transaction to span diverse\n      DBMS servers\n  <LI><code>RowSet</code> technology -- providing a convenient means of\n       handling and passing data\n</UL>\n<P>\n<P>\n<h3>Custom Mapping of UDTs</h3>\nA user-defined type (UDT) defined in SQL can be mapped to a class in the Java\nprogramming language. An SQL structured type or an SQL <code>DISTINCT</code>\ntype are the UDTs that may be custom mapped.  The following three\nsteps set up a custom mapping:\n<ol>\n  <li>Defining the SQL structured type or <code>DISTINCT</code> type in SQL\n  <li>Defining the class in the Java programming language to which the\n	  SQL UDT will be mapped.  This class must implement the\n	  <code>SQLData</code> interface.\n  <li>Making an entry in a <code>Connection</code> object's type map\n      that contains two things:\n   <ul>\n       <li>the fully-qualified SQL name of the UDT\n       <li>the <code>Class</code> object for the class that implements the \n           <code>SQLData</code> interface\n   </ul>\n</ol>\n<p>\nWhen these are in place for a UDT, calling the methods\n<code>ResultSet.getObject</code> or <code>CallableStatement.getObject</code> \non that UDT will automatically retrieve the custom mapping for it. Also, the\n<code>PreparedStatement.setObject</code> method will automatically map the\nobject back to its SQL type to store it in the data source.\n\n<h2>Package Specification</h2>\n\n<ul>\n  <li><a href="http://java.sun.com/products/jdbc/download.html">Specification \n      of the JDBC 4.0 API</a>\n</ul>\n\n<h2>Related Documentation</h2>\n\n<ul>\n  <li><a href="../../../technotes/guides/jdbc/getstart/GettingStartedTOC.fm.html">Getting Started</a>--overviews of the major interfaces\n<P>\n  <li><a href="http://java.sun.com/docs/books/tutorial/jdbc">Chapters on the JDBC \n     API</a>--from the online version of <i>The Java Tutorial Continued</i>\n<P>\n  <li><a href="http://java.sun.com/docs/books/jdbc">\n<i>JDBC<sup><font size=-2>TM</font></sup>API Tutorial and Reference, \nThird Edition</i></a>--\na complete reference and tutorial for the JDBC 3.0 API\n</ul>\n<P>\n@since 1.1\n"
68,package,java/applet,"\n\nProvides the classes necessary to create an applet and the classes an applet\nuses to communicate with its applet context.\n<p>\nThe applet framework involves two\nentities: the <i>applet</i> and the <i>applet context</i>. An applet is an \nembeddable window (see the Panel class) with a few extra methods that the applet \ncontext can use to initialize, start, and stop the applet.\n<p>\nThe applet context is an application that is responsible for loading and running\napplets. For example, the applet context could be a Web browser or an applet\ndevelopment environment.\n<p>\n<!--\n<h2>Package Specification</h2>\n\n##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT #####\n<ul>\n  <li><a href="">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since JDK1.0\n"
71,package,java/util/logging,"\n<P>\nProvides the classes and interfaces of \nthe Java<SUP><FONT SIZE="-2">TM</FONT></SUP> 2\n platform's core logging facilities.\nThe central goal of the logging APIs is to support maintaining and servicing\nsoftware at customer sites. \n\n<P>\nThere are four main target uses of the logs:\n</P>\n\n<OL>\n   <LI> <I>Problem diagnosis by end users and system administrators</I>. \n          This consists of simple logging of common problems that can be fixed \n          or tracked locally, such as running out of resources, security failures,\n          and simple configuration errors.\n        \n   <LI> <I>Problem diagnosis by field service engineers</I>. The logging information\n           used by field service engineers may be considerably more complex and\n           verbose than that required by system administrators.  Typically such information\n           will require extra logging within particular subsystems.\n\n   <LI> <I>Problem diagnosis by the development organization</I>.\n         When a problem occurs in the field, it may be necessary to return the captured logging\n         information to the original development team for diagnosis. This logging\n         information may be extremely detailed and fairly inscrutable. Such information might include\n         detailed tracing on the internal execution of particular subsystems.           \n\n   <LI> <I>Problem diagnosis by developers</I>. The Logging APIs may also be\n           used to help debug an application under development. This may \n           include logging information generated by the target application\n           as well as logging information generated by lower-level libraries.          \n           Note however that while this use is perfectly reasonable,\n           the logging APIs are not intended to replace the normal debugging \n           and profiling tools that may already exist in the development environment. \n</OL>\n\n</P>\nThe key elements of this package include:\n<UL>\n   <LI> <I>Logger</I>: The main entity on which applications make \n                logging calls. A Logger object is used to log messages \n                for a specific system or application\n                component.\n   <LI> <I>LogRecord</I>: Used to pass logging requests between the logging\n                   framework and individual log handlers.\n   <LI> <I>Handler</I>: Exports LogRecord objects to a variety of destinations\n                 including memory, output streams, consoles, files, and sockets.\n                 A variety of Handler subclasses exist for this purpose. Additional Handlers\n                 may be developed by third parties and delivered on top of the core platform.\n   <LI> <I>Level</I>: Defines a set of standard logging levels that can be used\n                      to control logging output. Programs can be configured to output logging\n                      for some levels while ignoring output for others.\n   <LI> <I>Filter</I>: Provides fine-grained control over what gets logged,\n                       beyond the control provided by log levels. The logging APIs support a general-purpose\n                       filter mechanism that allows application code to attach arbitrary filters to \n                       control logging output. \n                       \n   <LI> <I>Formatter</I>: Provides support for formatting LogRecord objects. This \n                          package includes two formatters, SimpleFormatter and \n                          XMLFormatter, for formatting log records in plain text\n                          or XML respectively. As with Handlers, additional Formatters \n                          may be developed by third parties.\n</UL>\n<P>\nThe Logging APIs offer both static and dynamic configuration control.\nStatic control enables field service staff to set up a particular configuration and then re-launch the \napplication with the new logging settings. Dynamic control allows for updates to the \nlogging configuration within a currently running program. The APIs also allow for logging to be \nenabled or disabled for different functional areas of the system. For example, \na field service engineer might be interested in tracing all AWT events, but might have no interest in \nsocket events or memory management.\n</P>\n\n<h2>Null Pointers</h2>\n<p>\nIn general, unless otherwise noted in the javadoc, methods and\nconstructors will throw NullPointerException if passed a null argument.\nThe one broad exception to this rule is that the logging convenience\nmethods in the Logger class (the config, entering, exiting, fine, finer, finest, \nlog, logp, logrb, severe, throwing, and warning methods)  \nwill accept null values \nfor all arguments except for the initial Level argument (if any).\n<p>\n<H2>Related Documentation</H2>\n<P>\nFor an overview of control flow, \nplease refer to the \n<a href="../../../../technotes/guides/logging/overview.html">\nJava Logging Overview</a>.\n</P>\n\n<!-- Put @see and @since tags down here. -->\n\n@since 1.4\n\n\n"
73,package,java/util/concurrent,"\n\n<p> Utility classes commonly useful in concurrent programming.  This\npackage includes a few small standardized extensible frameworks, as\nwell as some classes that provide useful functionality and are\notherwise tedious or difficult to implement.  Here are brief\ndescriptions of the main components. See also the <tt>locks</tt> and\n<tt>atomic</tt> packages.\n\n<h2>Executors</h2>\n\n<b>Interfaces.</b> {@link java.util.concurrent.Executor} is a simple\nstandardized interface for defining custom thread-like subsystems,\nincluding thread pools, asynchronous IO, and lightweight task\nframeworks.  Depending on which concrete Executor class is being used,\ntasks may execute in a newly created thread, an existing\ntask-execution thread, or the thread calling <tt>execute()</tt>, and\nmay execute sequentially or concurrently.  {@link\njava.util.concurrent.ExecutorService} provides a more complete\nasynchronous task execution framework.  An ExecutorService manages\nqueuing and scheduling of tasks, and allows controlled shutdown.  The\n{@link java.util.concurrent.ScheduledExecutorService} subinterface\nand associated interfaces add support for delayed and periodic task execution.\nExecutorServices provide methods arranging asynchronous execution of\nany function expressed as {@link java.util.concurrent.Callable}, the\nresult-bearing analog of {@link java.lang.Runnable}.  A {@link\njava.util.concurrent.Future} returns the results of a function, allows\ndetermination of whether execution has completed, and provides a means to\ncancel execution.  A {@link java.util.concurrent.RunnableFuture} is\na Future that possesses a <tt>run</tt> method that upon execution,\nsets its results.\n\n<p>\n\n<b>Implementations.</b> Classes {@link\njava.util.concurrent.ThreadPoolExecutor} and {@link\njava.util.concurrent.ScheduledThreadPoolExecutor} provide tunable,\nflexible thread pools. The {@link java.util.concurrent.Executors}\nclass provides factory methods for the most common kinds and\nconfigurations of Executors, as well as a few utility methods for\nusing them. Other utilities based on Executors include the concrete\nclass {@link java.util.concurrent.FutureTask} providing a common\nextensible implementation of Futures, and {@link\njava.util.concurrent.ExecutorCompletionService}, that assists in\ncoordinating the processing of groups of asynchronous tasks.\n\n<h2>Queues</h2>\n\nThe java.util.concurrent {@link\njava.util.concurrent.ConcurrentLinkedQueue} class supplies an\nefficient scalable thread-safe non-blocking FIFO queue.  Five\nimplementations in java.util.concurrent support the extended {@link\njava.util.concurrent.BlockingQueue} interface, that defines blocking\nversions of put and take: {@link\njava.util.concurrent.LinkedBlockingQueue}, {@link\njava.util.concurrent.ArrayBlockingQueue}, {@link\njava.util.concurrent.SynchronousQueue}, {@link\njava.util.concurrent.PriorityBlockingQueue}, and {@link\njava.util.concurrent.DelayQueue}. The different classes cover the most\ncommon usage contexts for producer-consumer, messaging, parallel\ntasking, and related concurrent designs. The {@link\njava.util.concurrent.BlockingDeque} interface extends\n<tt>BlockingQueue</tt> to support both FIFO and LIFO (stack-based)\noperations. Class {@link java.util.concurrent.LinkedBlockingDeque}\nprovides an implementation.\n\n\n<h2>Timing</h2>\n\nThe {@link java.util.concurrent.TimeUnit} class provides multiple\ngranularities (including nanoseconds) for specifying and controlling\ntime-out based operations.  Most classes in the package contain\noperations based on time-outs in addition to indefinite waits.  In all\ncases that time-outs are used, the time-out specifies the minimum time\nthat the method should wait before indicating that it\ntimed-out.  Implementations make a &quot;best effort&quot; to detect\ntime-outs as soon as possible after they occur.  However, an indefinite\namount of time may elapse between a time-out being detected and a\nthread actually executing again after that time-out.  All methods\nthat accept timeout parameters treat values less than or equal to\nzero to mean not to wait at all.  To wait "forever", you can use\na value of <tt>Long.MAX_VALUE</tt>.\n\n<h2>Synchronizers</h2>\n\nFour classes aid common special-purpose synchronization idioms.\n{@link java.util.concurrent.Semaphore} is a classic concurrency tool.\n{@link java.util.concurrent.CountDownLatch} is a very simple yet very\ncommon utility for blocking until a given number of signals, events,\nor conditions hold.  A {@link java.util.concurrent.CyclicBarrier} is a\nresettable multiway synchronization point useful in some styles of\nparallel programming. An {@link java.util.concurrent.Exchanger} allows\ntwo threads to exchange objects at a rendezvous point, and is useful\nin several pipeline designs.\n\n<h2>Concurrent Collections</h2>\n\nBesides Queues, this package supplies Collection implementations\ndesigned for use in multithreaded contexts:\n{@link java.util.concurrent.ConcurrentHashMap},\n{@link java.util.concurrent.ConcurrentSkipListMap},\n{@link java.util.concurrent.ConcurrentSkipListSet},\n{@link java.util.concurrent.CopyOnWriteArrayList}, and\n{@link java.util.concurrent.CopyOnWriteArraySet}.\nWhen many threads are expected to access a given collection,\na <tt>ConcurrentHashMap</tt> is normally preferable to\na synchronized <tt>HashMap</tt>, and a\n<tt>ConcurrentSkipListMap</tt> is normally preferable\nto a synchronized <tt>TreeMap</tt>. A\n<tt>CopyOnWriteArrayList</tt> is preferable to\na synchronized <tt>ArrayList</tt> when the expected number of reads\nand traversals greatly outnumber the number of updates to a list.\n\n<p>The "Concurrent" prefix used with some classes in this package is a\nshorthand indicating several differences from similar "synchronized"\nclasses. For example <tt>java.util.Hashtable</tt> and\n<tt>Collections.synchronizedMap(new HashMap())</tt> are\nsynchronized. But {@link java.util.concurrent.ConcurrentHashMap} is\n"concurrent".  A concurrent collection is thread-safe, but not\ngoverned by a single exclusion lock. In the particular case of\nConcurrentHashMap, it safely permits any number of concurrent reads as\nwell as a tunable number of concurrent writes.  "Synchronized" classes\ncan be useful when you need to prevent all access to a collection via\na single lock, at the expense of poorer scalability. In other cases in\nwhich multiple threads are expected to access a common collection,\n"concurrent" versions are normally preferable. And unsynchronized\ncollections are preferable when either collections are unshared, or\nare accessible only when holding other locks.\n\n<p> Most concurrent Collection implementations (including most Queues)\nalso differ from the usual java.util conventions in that their Iterators\nprovide <em>weakly consistent</em> rather than fast-fail traversal. A\nweakly consistent iterator is thread-safe, but does not necessarily\nfreeze the collection while iterating, so it may (or may not) reflect\nany updates since the iterator was created.\n\n<a name="MemoryVisibility">\n<h2> Memory Consistency Properties </h2>\n\n<a href="http://java.sun.com/docs/books/jls/third_edition/html/memory.html">\nChapter 17 of the Java Language Specification</a> defines the\n<i>happens-before</i> relation on memory operations such as reads and\nwrites of shared variables.  The results of a write by one thread are\nguaranteed to be visible to a read by another thread only if the write\noperation <i>happens-before</i> the read operation.  The\n{@code synchronized} and {@code volatile} constructs, as well as the\n{@code Thread.start()} and {@code Thread.join()} methods, can form\n<i>happens-before</i> relationships. In particular:\n\n<ul>\n  <li>Each action in a thread <i>happens-before</i> every action in that\n  thread that comes later in the program's order.\n\n  <li>An unlock ({@code synchronized} block or method exit) of a\n  monitor <i>happens-before</i> every subsequent lock ({@code synchronized}\n  block or method entry) of that same monitor. And because\n  the <i>happens-before</i> relation is transitive, all actions\n  of a thread prior to unlocking <i>happen-before</i> all actions\n  subsequent to any thread locking that monitor.\n\n  <li>A write to a {@code volatile} field <i>happens-before</i> every\n  subsequent read of that same field. Writes and reads of\n  {@code volatile} fields have similar memory consistency effects\n  as entering and exiting monitors, but do <em>not</em> entail\n  mutual exclusion locking.\n\n  <li>A call to {@code start} on a thread <i>happens-before</i> any action in the\n  started thread.\n\n  <li>All actions in a thread <i>happen-before</i> any other thread\n  successfully returns from a {@code join} on that thread.\n\n</ul>\n\n\nThe methods of all classes in {@code java.util.concurrent} and its\nsubpackages extend these guarantees to higher-level\nsynchronization. In particular:\n\n<ul>\n\n  <li>Actions in a thread prior to placing an object into any concurrent\n  collection <i>happen-before</i> actions subsequent to the access or\n  removal of that element from the collection in another thread.\n\n  <li>Actions in a thread prior to the submission of a {@code Runnable}\n  to an {@code Executor} <i>happen-before</i> its execution begins.\n  Similarly for {@code Callables} submitted to an {@code ExecutorService}.\n\n  <li>Actions taken by the asynchronous computation represented by a\n  {@code Future} <i>happen-before</i> actions subsequent to the\n  retrieval of the result via {@code Future.get()} in another thread.\n\n  <li>Actions prior to "releasing" synchronizer methods such as\n  {@code Lock.unlock}, {@code Semaphore.release}, and\n  {@code CountDownLatch.countDown} <i>happen-before</i> actions\n  subsequent to a successful "acquiring" method such as\n  {@code Lock.lock}, {@code Semaphore.acquire},\n  {@code Condition.await}, and {@code CountDownLatch.await} on the\n  same synchronizer object in another thread.\n\n  <li>For each pair of threads that successfully exchange objects via\n  an {@code Exchanger}, actions prior to the {@code exchange()}\n  in each thread <i>happen-before</i> those subsequent to the\n  corresponding {@code exchange()} in another thread.\n\n  <li>Actions prior to calling {@code CyclicBarrier.await}\n  <i>happen-before</i> actions performed by the barrier action, and\n  actions performed by the barrier action <i>happen-before</i> actions\n  subsequent to a successful return from the corresponding {@code await}\n  in other threads.\n\n</ul>\n\n@since 1.5\n\n"
75,package,java/util/concurrent/locks,"\n\nInterfaces and classes providing a framework for locking and waiting\nfor conditions that is distinct from built-in synchronization and\nmonitors. The framework permits much greater flexibility in the use of\nlocks and conditions, at the expense of more awkward syntax.\n\n<p> The {@link java.util.concurrent.locks.Lock} interface supports\nlocking disciplines that differ in semantics (reentrant, fair, etc),\nand that can be used in non-block-structured contexts including\nhand-over-hand and lock reordering algorithms. The main implementation\nis {@link java.util.concurrent.locks.ReentrantLock}.\n\n<p> The {@link java.util.concurrent.locks.ReadWriteLock} interface\nsimilarly defines locks that may be shared among readers but are\nexclusive to writers.  Only a single implementation, {@link\njava.util.concurrent.locks.ReentrantReadWriteLock}, is provided, since\nit covers most standard usage contexts. But programmers may create\ntheir own implementations to cover nonstandard requirements.\n\n<p> The {@link java.util.concurrent.locks.Condition} interface\ndescribes condition variables that may be associated with Locks.\nThese are similar in usage to the implicit monitors accessed using\n<tt>Object.wait</tt>, but offer extended capabilities.  In particular,\nmultiple <tt>Condition</tt> objects may be associated with a single\n<tt>Lock</tt>.  To avoid compatibility issues, the names of\n<tt>Condition</tt> methods are different than the corresponding\n<tt>Object</tt> versions.\n\n<p> The {@link java.util.concurrent.locks.AbstractQueuedSynchronizer}\nclass serves as a useful superclass for defining locks and other\nsynchronizers that rely on queuing blocked threads.  The {@link\njava.util.concurrent.locks.AbstractQueuedLongSynchronizer} class\nprovides the same functionality but extends support to 64 bits of\nsynchronization state. Both extend class {@link\njava.util.concurrent.locks.AbstractOwnableSynchronizer}, a simple\nclass that helps record the thread currently holding exclusive\nsynchronization.  The {@link java.util.concurrent.locks.LockSupport}\nclass provides lower-level blocking and unblocking support that is\nuseful for those developers implementing their own customized lock\nclasses.\n\n@since 1.5\n\n"
77,package,java/util/regex,"\n\nClasses for matching character sequences against patterns specified by regular\nexpressions.\n\n<p> An instance of the {@link java.util.regex.Pattern} class represents a\nregular expression that is specified in string form in a syntax similar to\nthat used by Perl.\n\n<p> Instances of the {@link java.util.regex.Matcher} class are used to match\ncharacter sequences against a given pattern.  Input is provided to matchers via\nthe {@link java.lang.CharSequence} interface in order to support matching\nagainst characters from a wide variety of input sources. </p>\n\n<p> Unless otherwise noted, passing a <tt>null</tt> argument to a method\nin any class or interface in this package will cause a\n{@link java.lang.NullPointerException NullPointerException} to be thrown.\n\n<h2>Related Documentation</h2>\n\n<p> An excellent tutorial and overview of regular expressions is <a\nhref="http://www.oreilly.com/catalog/regex/"><i>Mastering Regular\nExpressions</i>, Jeffrey E. F. Friedl, O'Reilly and Associates, 1997.</a> </p>\n\n<!--\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since 1.4\n@version 1.9, 10/04/02\n@author Mike McCloskey\n@author Mark Reinhold\n\n"
78,package,java/util/jar,"\n\nProvides classes for reading and writing the JAR (Java ARchive) file\nformat, which is based on the standard ZIP file format with an\noptional manifest file.  The manifest stores meta-information about the\nJAR file contents and is also used for signing JAR files.\n\n\n<h2>Package Specification</h2>\n\nThe <code>java.util.jar</code> package is based on the following specifications:\n<ul>\n  <li><b>Info-ZIP file format</b> - The JAR format is based on the Info-ZIP \n      file format. See \n      <a href="../zip/package-summary.html#package_description">java.util.zip\n      package description.</a> <p>\n      In JAR files, all file names must be encoded in the UTF-8 encoding. \n<p>\n  <li><a href="../../../../technotes/guides/jar/jar.html">\n      Manifest and Signature Specification</a> - The manifest format specification.\n</ul>\n\n<!--\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since 1.2\n"
79,package,java/util/zip,"\n\nProvides classes for reading and writing the standard ZIP and GZIP\nfile formats.  Also includes classes for compressing and decompressing\ndata using the DEFLATE compression algorithm, which is used by the\nZIP and GZIP file formats. Additionally, there are utility classes\nfor computing the CRC-32 and Adler-32 checksums of arbitrary\ninput streams.\n\n\n<h2>Package Specification</h2>\n\n</a>\n<ul>\n  <li><a href="ftp://ftp.uu.net/pub/archiving/zip/doc/appnote-970311-iz.zip">\n      Info-ZIP Application Note 970311\n      </a> - a detailed description of the Info-ZIP format upon which\n      the <code>java.util.zip</code> classes are based.\n<p>\n  <li><a href="http://www.isi.edu/in-notes/rfc1950.txt">\n      ZLIB Compressed Data Format Specification version 3.3</a>\n      &nbsp;\n      <a href="http://www.isi.edu/in-notes/rfc1950.ps">\n      (PostScript)</a>\n      (RFC 1950)\n<p>\n  <li><a href="http://www.isi.edu/in-notes/rfc1951.txt">\n      DEFLATE Compressed Data Format Specification version 1.3</a>\n      &nbsp;\n      <a href="http://www.isi.edu/in-notes/rfc1951.ps">\n      (PostScript)</a>\n      (RFC 1951)\n<p>\n  <li><a href="http://www.isi.edu/in-notes/rfc1952.txt">\n      GZIP file format specification version 4.3</a>\n      &nbsp;\n      <a href="http://www.isi.edu/in-notes/rfc1952.ps">\n      (PostScript)</a>\n      (RFC 1952)\n<p>\n  <li>CRC-32 checksum is described in RFC 1952 (above)\n<p>\n  <li>Adler-32 checksum is described in RFC 1950 (above)\n\n</ul>\n\n\n<!--\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since JDK1.1\n"
80,package,java/math,"\n\nProvides classes for performing arbitrary-precision integer arithmetic\n(BigInteger) and arbitrary-precision decimal arithmetic (BigDecimal).\nBigInteger is analogous to Java's primitive integer types except that it\nprovides arbitrary precision, hence operations on BigIntegers do not overflow\nor lose precision.  In addition to standard arithmetic operations, BigInteger\nprovides modular arithmetic, GCD calculation, primality testing, prime\ngeneration, bit manipulation, and a few other miscellaneous operations.\n\nBigDecimal provides arbitrary-precision signed decimal numbers suitable for\ncurrency calculations and the like.   BigDecimal gives the user complete\ncontrol over rounding behavior, allowing the user to choose from a\ncomprehensive set of eight rounding modes.\n\n<!--\n<h2>Related Documentation</h2>\n\nFor overviews, tutorials, examples, guides, and tool documentation, please see:\n<ul>\n  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>\n</ul>\n-->\n\n@since JDK1.1\n"
81,package,java/security,"\n\nProvides the classes and interfaces for the security framework.\nThis includes classes that implement an easily configurable,\nfine-grained access control security architecture.\nThis package also supports\nthe generation and storage of cryptographic public key pairs,\nas well as a number of exportable cryptographic operations\nincluding those for message digest and signature generation.  Finally,\nthis package provides classes that support signed/guarded objects\nand secure random number generation.\n\nMany of the classes provided in this package (the cryptographic\nand secure random number generator classes in particular) are\nprovider-based.  The class itself defines a programming interface\nto which applications may write.  The implementations themselves may\nthen be written by independent third-party vendors and plugged\nin seamlessly as needed.  Therefore application developers may\ntake advantage of any number of provider-based implementations\nwithout having to add or rewrite code.\n\n<h2>Package Specification</h2>\n\n<ul>\n  <li><a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html"><b>\n    Cryptography Architecture</b></a></li>\n\n  <li>PKCS8: Private-Key Information Standard, Version 1.2, November 1993</li>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor further documentation, please see:\n<ul>\n  <li><a href=\n    "{@docRoot}/../technotes/guides/security/spec/security-spec.doc.html"><b>\n    Security Architecture</b></a></li>\n\n  <li><a href=\n    "{@docRoot}/../technotes/guides/security/crypto/HowToImplAProvider.html"><b>\n    How to Implement a Provider for the Java Cryptography Architecture\n    </b></a></li>\n  <li><a href=\n    "{@docRoot}/../technotes/guides/security/PolicyFiles.html"><b>\n    Default Policy Implementation and Policy File Syntax\n    </b></a></li>\n\n  <li><a href=\n    "{@docRoot}/../technotes/guides/security/permissions.html"><b>\n    Policy Permissions\n    </b></a></li>\n\n  <li><a href=\n    "{@docRoot}/../technotes/guides/security/SecurityToolsSummary.html"><b>\n    Security Tools Summary\n    </b></a></li>\n\n  <li><b>keytool</b>\n    (<a href="{@docRoot}/../technotes/tools/solaris/keytool.html">\n      for Solaris/Linux</a>)\n    (<a href="{@docRoot}/../technotes/tools/windows/keytool.html">\n      for Windows</a>)\n    </li>\n\n  <li><b>jarsigner</b>\n    (<a href="{@docRoot}/../technotes/tools/solaris/jarsigner.html">\n      for Solaris/Linux</a>)\n    (<a href="{@docRoot}/../technotes/tools/windows/jarsigner.html">\n      for Windows</a>)\n    </li>\n\n</ul>\n\n@since JDK1.1\n"
82,package,java/security/interfaces,"\n\nProvides interfaces for generating RSA (Rivest, Shamir and\nAdleman AsymmetricCipher algorithm)\nkeys as defined in the RSA Laboratory Technical Note\nPKCS#1, and DSA (Digital Signature\nAlgorithm) keys as defined in NIST's FIPS-186.\n<P>\nNote that these interfaces are intended only for key\nimplementations whose key material is accessible and \navailable. These interfaces are not intended for key \nimplementations whose key material resides in \ninaccessible, protected storage (such as in a \nhardware device). \n<P>\nFor more developer information on how to use these \ninterfaces, including information on how to design \n<code>Key</code> classes for hardware devices, please refer\nto these cryptographic provider developer guides:\n<ul>\n  <li><a href=\n    "{@docRoot}/../technotes/guides/security/crypto/HowToImplAProvider.html">\n    <b>How to Implement a Provider for the\n    Java<FONT SIZE=-2><SUP>TM</SUP></FONT> Cryptography Architecture\n    </b></a></li>\n</ul>\n\n<h2>Package Specification</h2>\n\n<ul>\n  <li>PKCS #1: RSA Encryption Standard, Version 1.5, November 1993 </li>\n  <li>Federal Information Processing Standards Publication (FIPS PUB) 186:\n    Digital Signature Standard (DSS) </li>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor further documentation, please see:\n<ul>\n  <li>\n    <a href=\n      "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html">\n      <b>Java<FONT SIZE=-2><SUP>TM</SUP></FONT>\n      Cryptography Architecture API Specification and Reference\n      </b></a></li>\n</ul>\n\n@since JDK1.1\n"
83,package,java/security/spec,"\n\nProvides classes and interfaces for key specifications and algorithm\nparameter specifications.\n\n<p>A key specification is a transparent representation of the key material\nthat constitutes a key. A key may be specified in an algorithm-specific\nway, or in an algorithm-independent encoding format (such as ASN.1).\nThis package contains key specifications for DSA public and private keys,\nRSA public and private keys, PKCS #8 private keys in DER-encoded format,\nand X.509 public and private keys in DER-encoded format.\n\n<p>An algorithm parameter specification is a transparent representation\nof the sets of parameters used with an algorithm. This package contains\nan algorithm parameter specification for parameters used with the\nDSA algorithm.\n\n<h2>Package Specification</h2>\n\n<ul>\n  <li>PKCS #1: RSA Encryption Standard, Version 1.5, November 1993</li>\n  <li>PKCS #8: Private-Key Information Syntax Standard, \n    Version 1.2, November 1993</li>\n  <li>Federal Information Processing Standards Publication (FIPS PUB) 186:\n    Digital Signature Standard (DSS)</li>\n</ul>\n\n<h2>Related Documentation</h2>\n\nFor documentation that includes information about algorithm parameter\nand key specifications, please see:\n<ul>\n  <li>\n    <a href=\n      "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html">\n      <b>Java<FONT SIZE=-2><SUP>TM</SUP></FONT>\n      Cryptography Architecture API Specification and Reference\n      </b></a></li>\n  <li>\n    <a href=\n      "{@docRoot}/../technotes/guides/security/crypto/HowToImplAProvider.html">\n      <b>How to Implement a Provider for the\n      Java<FONT SIZE=-2><SUP>TM</SUP></FONT> Cryptography Architecture\n      </b></a></li>\n</ul>\n\n@since 1.2\n"
91,method,org/eclipse/jface/dialogs/TrayDialog/isHelpAvailable/," Returns whether or not context help is available for this dialog. This\n can affect whether or not the dialog will display additional help\n mechanisms such as a help control in the button bar.\n \n @return whether or not context help is available for this dialog\n"
92,method,org/eclipse/jface/dialogs/TrayDialog/getLayout/," The tray dialog's default layout is a modified version of the default\n <code>Window</code> layout that can accomodate a tray, however it still\n conforms to the description of the <code>Window</code> default layout.\n <p>\n Note: Trays may not be supported with all custom layouts on the dialog's\n Shell. To avoid problems, use a single outer <code>Composite</code> for\n your dialog area, and set your custom layout on that <code>Composite</code>.\n </p>\n \n @see org.eclipse.jface.window.Window#getLayout()\n @return a newly created layout or <code>null</code> for no layout\n"
95,method,org/eclipse/jface/dialogs/TrayDialog/setHelpAvailable/boolean," Sets whether or not context help is available for this dialog. This\n can affect whether or not the dialog will display additional help\n mechanisms such as a help control in the button bar.\n \n @param helpAvailable whether or not context help is available for the dialog\n"
96,method,org/eclipse/jface/dialogs/TrayDialog/isDialogHelpAvailable/," Tests if dialogs that have help control should show it\n all the time or only when explicitly requested for\n each dialog instance.\n \n @return <code>true</code> if dialogs that support help\n control should show it by default, <code>false</code> otherwise.\n @since 3.2\n"
97,method,org/eclipse/jface/dialogs/TrayDialog/setDialogHelpAvailable/boolean," Sets whether JFace dialogs that support help control should\n show the control by default. If set to <code>false</code>, \n help control can still be shown on a per-dialog basis.\n \n @param helpAvailable <code>true</code> to show the help\n control, <code>false</code> otherwise.\n @since 3.2\n"
123,field,org/eclipse/jface/dialogs/IDialogConstants/CLIENT_ID," Starting button id reserved for use by clients of JFace (value 1024).\n Clients of JFace should make ids by adding to this number.\n"
157,class,org/eclipse/jface/dialogs/ControlAnimator," ControlAnimator provides a simple implementation to display or hide a control\n at the bottom of the parent composite. Other animations will be written as\n subclasses of this class. <p>\n Instances of this class can be created using an AnimatorFactory.\n \n @since 3.2\n"
167,method,org/eclipse/jface/dialogs/ProgressIndicator/showError/," Show the receiver as showing an error.\n @since 3.4\n"
174,method,org/eclipse/jface/dialogs/IMessageProvider/getMessageType/," Returns a value indicating if the message is a an information message, a\n warning message, or an error message.\n <p>\n Returns one of <code>NONE</code>,<code>INFORMATION</code>,\n <code>WARNING</code>, or <code>ERROR</code>.\n </p>\n \n @return the message type\n"
175,field,org/eclipse/jface/dialogs/IMessageProvider/NONE," Constant for a regular message (value 0).\n <p>\n Typically this indicates that the message should be shown without an\n icon.\n </p>\n"
177,field,org/eclipse/jface/dialogs/IMessageProvider/WARNING," Constant for a warning message (value 2).\n"
178,field,org/eclipse/jface/dialogs/IMessageProvider/ERROR," Constant for an error message (value 3).\n"
185,method,org/eclipse/jface/dialogs/ProgressMonitorDialog/close/," The <code>ProgressMonitorDialog</code> implementation of this method\n only closes the dialog if there are no currently running runnables.\n"
194,method,org/eclipse/jface/dialogs/ProgressMonitorDialog/getOpenOnRun/," Returns whether the dialog should be opened before the operation is run.\n Defaults to <code>true</code>\n \n @return <code>true</code> to open the dialog before run,\n         <code>false</code> to only create the dialog, but not open it\n @since 3.0\n"
195,method,org/eclipse/jface/dialogs/ProgressMonitorDialog/setOpenOnRun/boolean," Sets whether the dialog should be opened before the operation is run.\n NOTE: Setting this to false and not forking a process may starve any\n asyncExec that tries to open the dialog later.\n \n @param openOnRun\n            <code>true</code> to open the dialog before run,\n            <code>false</code> to only create the dialog, but not open\n            it\n @since 3.0\n"
199,method,org/eclipse/jface/dialogs/ProgressMonitorDialog/aboutToRun/," Called just before the operation is run. Default behaviour is to open or\n create the dialog, based on the setting of <code>getOpenOnRun</code>,\n and increment the nesting depth.\n \n @since 3.0\n"
200,method,org/eclipse/jface/dialogs/ProgressMonitorDialog/finishedRun/," Called just after the operation is run. Default behaviour is to decrement\n the nesting depth, and close the dialog.\n \n @since 3.0\n"
213,class,org/eclipse/jface/dialogs/ErrorDialog," A dialog to display one or more errors to the user, as contained in an\n <code>IStatus</code> object. If an error contains additional detailed\n information then a Details button is automatically supplied, which shows or\n hides an error details viewer when pressed by the user.\n \n <p>\n This dialog should be considered being a "local" way of error handling. It\n cannot be changed or replaced by "global" error handling facility (\n <code>org.eclipse.ui.statushandler.StatusManager</code>). If product defines\n its own way of handling errors, this error dialog may cause UI inconsistency,\n so until it is absolutely necessary, <code>StatusManager</code> should be\n used.\n </p>\n \n @see org.eclipse.core.runtime.IStatus\n"
217,method,org/eclipse/jface/dialogs/ErrorDialog/createDetailsButton/Composite," Create the details button if it should be included.\n \n @param parent\n            the parent composite\n @since 3.2\n"
222,method,org/eclipse/jface/dialogs/ErrorDialog/open/," Extends <code>Window.open()</code>. Opens an error dialog to display\n the error. If you specified a mask to filter the displaying of these\n children, the error dialog will only be displayed if there is at least\n one child status matching the mask.\n"
223,method,org/eclipse/jface/dialogs/ErrorDialog/openError/Shell;String;String;IStatus," Opens an error dialog to display the given error. Use this method if the\n error object being displayed does not contain child items, or if you wish\n to display all such items without filtering.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param dialogTitle\n            the title to use for this dialog, or <code>null</code> to\n            indicate that the default title should be used\n @param message\n            the message to show in this dialog, or <code>null</code> to\n            indicate that the error's message should be shown as the\n            primary message\n @param status\n            the error to show to the user\n @return the code of the button that was pressed that resulted in this\n         dialog closing. This will be <code>Dialog.OK</code> if the OK\n         button was pressed, or <code>Dialog.CANCEL</code> if this\n         dialog's close window decoration or the ESC key was used.\n"
224,method,org/eclipse/jface/dialogs/ErrorDialog/openError/Shell;String;String;IStatus;int," Opens an error dialog to display the given error. Use this method if the\n error object being displayed contains child items <it>and </it> you wish\n to specify a mask which will be used to filter the displaying of these\n children. The error dialog will only be displayed if there is at least\n one child status matching the mask.\n \n @param parentShell\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the title to use for this dialog, or <code>null</code> to\n            indicate that the default title should be used\n @param message\n            the message to show in this dialog, or <code>null</code> to\n            indicate that the error's message should be shown as the\n            primary message\n @param status\n            the error to show to the user\n @param displayMask\n            the mask to use to filter the displaying of child items, as\n            per <code>IStatus.matches</code>\n @return the code of the button that was pressed that resulted in this\n         dialog closing. This will be <code>Dialog.OK</code> if the OK\n         button was pressed, or <code>Dialog.CANCEL</code> if this\n         dialog's close window decoration or the ESC key was used.\n @see org.eclipse.core.runtime.IStatus#matches(int)\n"
225,method,org/eclipse/jface/dialogs/ErrorDialog/shouldDisplay/IStatus;int," Returns whether the given status object should be displayed.\n \n @param status\n            a status object\n @param mask\n            a mask as per <code>IStatus.matches</code>\n @return <code>true</code> if the given status should be displayed, and\n         <code>false</code> otherwise\n @see org.eclipse.core.runtime.IStatus#matches(int)\n"
228,method,org/eclipse/jface/dialogs/ErrorDialog/shouldShowDetailsButton/," Return whether the Details button should be included. This method is\n invoked once when the dialog is built. Default implementation is tight to\n default implementation of {@link #createDropDownList(Composite)} and \n displays details button if there is anything on the display list.\n \n @return whether the Details button should be included\n @since 3.1\n @see #createDropDownList(Composite)\n"
232,field,org/eclipse/jface/dialogs/ErrorDialog/AUTOMATED_MODE," Static to prevent opening of error dialogs for automated testing.\n"
236,method,org/eclipse/jface/dialogs/IDialogPage/getControl/," Returns the top level control for this dialog page.\n <p>\n May return <code>null</code> if the control\n has not been created yet.\n </p>\n\n @return the top level control or <code>null</code>\n"
238,method,org/eclipse/jface/dialogs/IDialogPage/getErrorMessage/," Returns the current error message for this dialog page.\n May be <code>null</code> to indicate no error message.\n <p>\n An error message should describe some error state,\n as opposed to a message which may simply provide instruction\n or information to the user.\n </p>\n \n @return the error message, or <code>null</code> if none\n"
247,class,org/eclipse/jface/dialogs/StatusDialog," An abstract base class for dialogs with a status bar and OK/CANCEL buttons.\n The status message is specified in an IStatus which can be of severity ERROR,\n WARNING, INFO or OK. The OK button is enabled or disabled depending on the\n status.\n \n @since 3.1\n"
249,method,org/eclipse/jface/dialogs/StatusDialog/updateStatus/IStatus," Update the dialog's status line to reflect the given status. It is safe\n to call this method before the dialog has been opened.\n \n @param status\n            the status to set\n"
295,method,org/eclipse/jface/dialogs/TitleAreaDialog/setErrorMessage/String," Display the given error message. The currently displayed message is saved\n and will be redisplayed when the error message is set to\n <code>null</code>.\n \n @param newErrorMessage\n            the newErrorMessage to display or <code>null</code>\n"
297,method,org/eclipse/jface/dialogs/TitleAreaDialog/setMessage/String;int," Sets the message for this dialog with an indication of what type of\n message it is.\n <p>\n The valid message types are one of <code>NONE</code>,\n <code>INFORMATION</code>,<code>WARNING</code>, or\n <code>ERROR</code>.\n </p>\n <p>\n Note that for backward compatibility, a message of type\n <code>ERROR</code> is different than an error message (set using\n <code>setErrorMessage</code>). An error message overrides the current\n message until the error message is cleared. This method replaces the\n current message and does not affect the error message.\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n @param newType\n            the message type\n @since 2.0\n"
302,field,org/eclipse/jface/dialogs/TitleAreaDialog/DLG_IMG_TITLE_ERROR," Image registry key for error message image.\n"
305,field,org/eclipse/jface/dialogs/TitleAreaDialog/WARNING_MESSAGE," Message type constant used to display a warning icon with the message.\n \n @since 2.0\n @deprecated\n"
313,method,org/eclipse/jface/dialogs/IconAndMessageDialog/getErrorImage/," Return the <code>Image</code> to be used when displaying an error.\n \n @return image the error image\n"
314,method,org/eclipse/jface/dialogs/IconAndMessageDialog/getWarningImage/," Return the <code>Image</code> to be used when displaying a warning.\n \n @return image the warning image\n"
324,method,org/eclipse/jface/dialogs/ImageAndMessageArea/setImage/Image," Adds an image to decorated field to be shown in the message area.\n \n @param image\n            desired image to be shown in the ImageAndMessageArea\n"
361,method,org/eclipse/jface/dialogs/PopupDialog/PopupDialog/Shell;int;boolean;boolean;boolean;boolean;String;String," Constructs a new instance of <code>PopupDialog</code>.\n \n @param parent\n            The parent shell.\n @param shellStyle\n            The shell style.\n @param takeFocusOnOpen\n            A boolean indicating whether focus should be taken by this\n            popup when it opens.\n @param persistBounds\n            A boolean indicating whether the bounds (size and location) of\n            the dialog should be persisted upon close of the dialog. The\n            bounds can only be persisted if the dialog settings for\n            persisting the bounds are also specified. If a menu action\n            will be provided that allows the user to control this feature,\n            then the last known value of the user's setting will be used\n            instead of this flag.\n @param showDialogMenu\n            A boolean indicating whether a menu for moving and resizing\n            the popup should be provided.\n @param showPersistActions\n            A boolean indicating whether actions allowing the user to\n            control the persisting of the dialog size and location should\n            be shown in the dialog menu. This parameter has no effect if\n            <code>showDialogMenu</code> is <code>false</code>.\n @param titleText\n            Text to be shown in an upper title area, or <code>null</code>\n            if there is no title.\n @param infoText\n            Text to be shown in a lower info area, or <code>null</code>\n            if there is no info area.\n \n @see PopupDialog#getDialogSettings()\n @deprecated As of 3.4, replaced by\n             {@link #PopupDialog(Shell, int, boolean, boolean, boolean, boolean, boolean, String, String)}\n"
362,method,org/eclipse/jface/dialogs/PopupDialog/PopupDialog/Shell;int;boolean;boolean;boolean;boolean;boolean;String;String," Constructs a new instance of <code>PopupDialog</code>.\n \n @param parent\n            The parent shell.\n @param shellStyle\n            The shell style.\n @param takeFocusOnOpen\n            A boolean indicating whether focus should be taken by this\n            popup when it opens.\n @param persistSize\n            A boolean indicating whether the size should be persisted upon\n            close of the dialog. The size can only be persisted if the\n            dialog settings for persisting the bounds are also specified.\n            If a menu action will be provided that allows the user to\n            control this feature and the user hasn't changed that setting,\n            then this flag is used as initial default for the menu.\n @param persistLocation\n            A boolean indicating whether the location should be persisted\n            upon close of the dialog. The location can only be persisted\n            if the dialog settings for persisting the bounds are also\n            specified. If a menu action will be provided that allows the\n            user to control this feature and the user hasn't changed that\n            setting, then this flag is used as initial default for the\n            menu. default for the menu until the user changed it.\n @param showDialogMenu\n            A boolean indicating whether a menu for moving and resizing\n            the popup should be provided.\n @param showPersistActions\n            A boolean indicating whether actions allowing the user to\n            control the persisting of the dialog bounds and location\n            should be shown in the dialog menu. This parameter has no\n            effect if <code>showDialogMenu</code> is <code>false</code>.\n @param titleText\n            Text to be shown in an upper title area, or <code>null</code>\n            if there is no title.\n @param infoText\n            Text to be shown in a lower info area, or <code>null</code>\n            if there is no info area.\n \n @see PopupDialog#getDialogSettings()\n \n @since 3.4\n"
368,field,org/eclipse/jface/dialogs/PopupDialog/POPUP_VERTICALSPACING," Vertical spacing (in pixels) between cells in the layouts inside popup\n dialogs (value is 1).\n"
369,field,org/eclipse/jface/dialogs/PopupDialog/POPUP_HORIZONTALSPACING," Vertical spacing (in pixels) between cells in the layouts inside popup\n dialogs (value is 1).\n"
372,class,org/eclipse/jface/dialogs/DialogPage," Abstract base implementation of a dialog page. All dialog pages are\n subclasses of this one.\n"
395,method,org/eclipse/jface/dialogs/DialogPage/setErrorMessage/String," Sets or clears the error message for this page.\n \n @param newMessage\n            the message, or <code>null</code> to clear the error message\n"
398,method,org/eclipse/jface/dialogs/DialogPage/setMessage/String;int," Sets the message for this page with an indication of what type of message\n it is.\n <p>\n The valid message types are one of <code>NONE</code>,\n <code>INFORMATION</code>,<code>WARNING</code>, or\n <code>ERROR</code>.\n </p>\n <p>\n Note that for backward compatibility, a message of type\n <code>ERROR</code> is different than an error message (set using\n <code>setErrorMessage</code>). An error message overrides the current\n message until the error message is cleared. This method replaces the\n current message and does not affect the error message.\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n @param newType\n            the message type\n @since 2.0\n"
404,class,org/eclipse/jface/dialogs/Dialog," A dialog is a specialized window used for narrow-focused communication with\n the user.\n <p>\n Dialogs are usually modal. Consequently, it is generally bad practice to open\n a dialog without a parent. A modal dialog without a parent is not prevented\n from disappearing behind the application's other windows, making it very\n confusing for the user.\n </p>\n <p>\n If there is more than one modal dialog is open the second one should be\n parented off of the shell of the first one otherwise it is possible that the\n OS will give focus to the first dialog potentially blocking the UI.\n </p>\n"
409,method,org/eclipse/jface/dialogs/Dialog/shortenText/String;Control," Shortens the given text <code>textValue</code> so that its width in\n pixels does not exceed the width of the given control. Overrides\n characters in the center of the original string with an ellipsis ("...")\n if necessary. If a <code>null</code> value is given, <code>null</code>\n is returned.\n \n @param textValue\n            the original string or <code>null</code>\n @param control\n            the control the string will be displayed on\n @return the string to display, or <code>null</code> if null was passed\n         in\n \n @since 3.0\n"
424,method,org/eclipse/jface/dialogs/Dialog/getCancelButton/," Returns the button created when <code>createButton</code> is called\n with an ID of <code>IDialogConstants.CANCEL_ID</code>. If\n <code>createButton</code> was never called with this parameter, or if\n <code>createButton</code> is overridden, <code>getCancelButton</code>\n will return <code>null</code>.\n \n @return the cancel button or <code>null</code>\n \n @see #createButton(Composite, int, String, boolean)\n @since 2.0\n @deprecated Use <code>getButton(IDialogConstants.CANCEL_ID)</code>\n             instead. This method will be removed soon.\n"
438,method,org/eclipse/jface/dialogs/Dialog/getDialogBoundsSettings/," Gets the dialog settings that should be used for remembering the bounds of\n of the dialog, according to the dialog bounds strategy.\n \n @return settings the dialog settings used to store the dialog's location\n         and/or size, or <code>null</code> if the dialog's bounds should\n         never be stored.\n \n @since 3.2\n @see Dialog#getDialogBoundsStrategy()\n"
440,method,org/eclipse/jface/dialogs/Dialog/getInitialSize/," Returns the initial size to use for the shell. Overridden\n to check whether a size has been stored in dialog settings.\n If a size has been stored, it is returned.\n \n @return the initial size of the shell\n \n @since 3.2\n @see #getDialogBoundsSettings()\n @see #getDialogBoundsStrategy()\n"
441,method,org/eclipse/jface/dialogs/Dialog/getInitialLocation/Point," Returns the initial location to use for the shell. Overridden\n to check whether the bounds of the dialog have been stored in\n dialog settings.  If a location has been stored, it is returned.\n \n @param initialSize\n            the initial size of the shell, as returned by\n            <code>getInitialSize</code>.\n @return the initial location of the shell\n \n @since 3.2\n @see #getDialogBoundsSettings()\n @see #getDialogBoundsStrategy()\n"
442,method,org/eclipse/jface/dialogs/Dialog/isResizable/," Returns a boolean indicating whether the dialog should be\n considered resizable when the shell style is initially\n set.  \n \n This method is used to ensure that all style \n bits appropriate for resizable dialogs are added to the \n shell style.  Individual dialogs may always set the shell \n style to ensure that a dialog is resizable, but using this\n method ensures that resizable dialogs will be created with\n the same set of style bits.\n \n Style bits will never be removed based on the return value \n of this method.  For example, if a dialog returns \n <code>false</code>, but also sets a style bit for a \n SWT.RESIZE border, the style bit will be honored.\n \n @return a boolean indicating whether the dialog is \n resizable and should have the default style bits for\n resizable dialogs\n \n @since 3.4\n"
443,method,org/eclipse/jface/dialogs/Dialog/Dialog/Shell," Creates a dialog instance. Note that the window will have no visual\n representation (no widgets) until it is told to open. By default,\n <code>open</code> blocks for dialogs.\n \n @param parentShell\n            the parent shell, or <code>null</code> to create a top-level\n            shell\n"
444,field,org/eclipse/jface/dialogs/Dialog/DLG_IMG_ERROR," Image registry key for error image (value\n <code>"dialog_error_image"</code>).\n \n @deprecated use\n             org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_ERROR)\n"
447,field,org/eclipse/jface/dialogs/Dialog/DLG_IMG_WARNING," Image registry key for warning image (value\n <code>"dialog_warning_image"</code>).\n \n @deprecated use\n             org.eclipse.swt.widgets.Display.getSystemImage(SWT.ICON_WARNING)\n"
453,field,org/eclipse/jface/dialogs/Dialog/DIALOG_DEFAULT_BOUNDS," A value that can be used for stored dialog width or height that\n indicates that the default bounds should be used.\n \n @since 3.2\n"
465,class,org/eclipse/jface/dialogs/ErrorSupportProvider," A ErrorSupportProvider defines the area to be shown in an error dialog for extra support information.\n @since 3.3\n\n"
468,class,org/eclipse/jface/dialogs/DialogTray," <p>\n This class is the abstract superclass of all dialog trays. A tray can be opened\n in any <code>TrayDialog</code>.\n </p>\n \n @see org.eclipse.jface.dialogs.TrayDialog\n @since 3.2\n"
471,class,org/eclipse/jface/dialogs/DialogMessageArea," The DialogMessageArea is a resusable component for adding an accessible\n message area to a dialog.\n \n When the message is normal a CLabel is used but an errors replaces the\n message area with a non editable text that can take focus for use by screen\n readers.\n \n @since 3.0\n"
477,method,org/eclipse/jface/dialogs/DialogMessageArea/updateText/String;int," Show the new message in the message text and update the image. Base the\n background color on whether or not there are errors.\n \n @param newMessage\n            The new value for the message\n @param newType\n            One of the IMessageProvider constants. If newType is\n            IMessageProvider.NONE show the title.\n @see IMessageProvider\n"
478,method,org/eclipse/jface/dialogs/DialogMessageArea/clearErrorMessage/," Clear the error message. Restore the previously displayed message if\n there is one, if not restore the title label.\n  \n"
480,interface,org/eclipse/jface/dialogs/IPageChangeProvider," Minimal interface to a page change provider. Used for dialogs which can\n switch between multiple pages.\n \n @since 3.1\n"
481,method,org/eclipse/jface/dialogs/IPageChangeProvider/getSelectedPage/," Returns the currently selected page in the dialog.\n \n @return the selected page in the dialog or <code>null</code> if none is\n         selected. The type may be domain specific. In \n         the JFace provided dialogs this will be an instance of \n         <code>IDialogPage</code>. \n"
484,interface,org/eclipse/jface/dialogs/IDialogSettings," An interface to a storage mechanism for making dialog settings persistent.\n The store manages a collection of key/value pairs. The keys must be strings\n and the values can be either, strings or array of strings. Convenience API to\n convert primitive types to strings is provided.\n"
516,interface,org/eclipse/jface/dialogs/IPageChangingListener," A listener which is notified when the current page of a multi-page dialog is\n changing. Use this listener to perform long-running work that should only be\n executed once, when the page is in the process of changing, rather then\n during validation of page controls.\n \n @see PageChangingEvent\n @since 3.3\n"
520,method,org/eclipse/jface/dialogs/IDialogBlockedHandler/showBlocked/Shell;IProgressMonitor;IStatus;String," A blockage has occured. Show the blockage and \n forward any actions to blockingMonitor. \n <b>NOTE:</b> This will open any blocked notification immediately\n even if there is a modal shell open.\n \n @param parentShell The shell this is being sent from. If the parent\n shell is <code>null</code> the behavior will be the same as\n IDialogBlockedHandler#showBlocked(IProgressMonitor, IStatus, String)\n \n @param blocking The monitor to forward to. This is most\n important for calls to <code>cancel()</code>.\n @param blockingStatus The status that describes the blockage\n @param blockedName The name of the locked operation.\n @see IDialogBlockedHandler#showBlocked(IProgressMonitor, IStatus, String)\n"
521,method,org/eclipse/jface/dialogs/IDialogBlockedHandler/showBlocked/IProgressMonitor;IStatus;String," A blockage has occured. Show the blockage when there is \n no longer any modal shells in the UI and forward any actions \n to blockingMonitor. \n \n <b>NOTE:</b> As no shell has been specified this method will\n not open any blocked notification until all other modal shells\n have been closed.\n \n @param blocking The monitor to forward to. This is most\n important for calls to <code>cancel()</code>.\n @param blockingStatus The status that describes the blockage\n @param blockedName The name of the locked operation.\n"
534,method,org/eclipse/jface/dialogs/MessageDialog/openError/Shell;String;String," Convenience method to open a standard error dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n"
537,method,org/eclipse/jface/dialogs/MessageDialog/openWarning/Shell;String;String," Convenience method to open a standard warning dialog.\n \n @param parent\n            the parent shell of the dialog, or <code>null</code> if none\n @param title\n            the dialog's title, or <code>null</code> if none\n @param message\n            the message\n"
539,method,org/eclipse/jface/dialogs/MessageDialog/customShouldTakeFocus/," Return whether or not we should apply the workaround where we take focus\n for the default button or if that should be determined by the dialog. By\n default only return true if the custom area is a label or CLabel that\n cannot take focus.\n \n @return boolean\n"
541,method,org/eclipse/jface/dialogs/MessageDialog/getButtonLabels/," An accessor for the labels to use on the buttons.\n \n @return The button labels to used; never <code>null</code>.\n"
543,method,org/eclipse/jface/dialogs/MessageDialog/setButtons/Button[]," A mutator for the array of buttons in the button bar.\n \n @param buttons\n            The buttons in the button bar; must not be <code>null</code>.\n"
544,method,org/eclipse/jface/dialogs/MessageDialog/setButtonLabels/String[]," A mutator for the button labels.\n \n @param buttonLabels\n            The button labels to use; must not be <code>null</code>.\n"
547,field,org/eclipse/jface/dialogs/MessageDialog/ERROR," Constant for the error image, or a simple dialog with the error image and a single OK button (value 1).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
550,field,org/eclipse/jface/dialogs/MessageDialog/WARNING," Constant for the warning image, or a simple dialog with the warning image and a single OK button (value 4).\n \n @see #MessageDialog(Shell, String, Image, String, int, String[], int)\n @see #open(int, Shell, String, String, int)\n"
566,method,org/eclipse/jface/dialogs/MessageDialogWithToggle/getPrefStore/," An accessor for the current preference store for this dialog.\n \n @return The preference store; this value may be <code>null</code> if no\n         preference is being used.\n"
567,method,org/eclipse/jface/dialogs/MessageDialogWithToggle/getPrefKey/," An accessor for the current key of the toggle preference.\n \n @return The preference key; this value may be <code>null</code> if no\n         preference is being used.\n"
571,method,org/eclipse/jface/dialogs/MessageDialogWithToggle/setToggleButton/Button," A mutator for the button providing the toggle option. If the button\n exists, then it will automatically get the text set to the current toggle\n message, and its selection state set to the current selection state.\n \n @param button\n            The button to use; must not be <code>null</code>.\n"
573,method,org/eclipse/jface/dialogs/MessageDialogWithToggle/setToggleState/boolean," A mutator for the state of the toggle button. This method will update the\n button, if it exists.\n \n @param toggleState\n            The desired state of the toggle button (<code>true</code>\n            means the toggle should be selected).\n"
574,method,org/eclipse/jface/dialogs/MessageDialogWithToggle/MessageDialogWithToggle/Shell;String;Image;String;int;String[];int;String;boolean," Creates a message dialog with a toggle. See the superclass constructor\n for info on the other parameters.\n \n @param parentShell\n            the parent shell\n @param dialogTitle\n            the dialog title, or <code>null</code> if none\n @param image\n            the dialog title image, or <code>null</code> if none\n @param message\n            the dialog message\n @param dialogImageType\n            one of the following values:\n            <ul>\n            <li><code>MessageDialog.NONE</code> for a dialog with no\n            image</li>\n            <li><code>MessageDialog.ERROR</code> for a dialog with an\n            error image</li>\n            <li><code>MessageDialog.INFORMATION</code> for a dialog\n            with an information image</li>\n            <li><code>MessageDialog.QUESTION </code> for a dialog with a\n            question image</li>\n            <li><code>MessageDialog.WARNING</code> for a dialog with a\n            warning image</li>\n            </ul>\n @param dialogButtonLabels\n            an array of labels for the buttons in the button bar\n @param defaultIndex\n            the index in the button label array of the default button\n @param toggleMessage\n            the message for the toggle control, or <code>null</code> for\n            the default message\n @param toggleState\n            the initial state for the toggle\n  \n"
585,method,org/eclipse/jface/dialogs/InputDialog/getErrorMessageLabel/," Returns the error message label.\n \n @return the error message label\n @deprecated use setErrorMessage(String) instead\n"
590,method,org/eclipse/jface/dialogs/InputDialog/validateInput/," Validates the input.\n <p>\n The default implementation of this framework method delegates the request\n to the supplied input validator object; if it finds the input invalid,\n the error message is displayed in the dialog's message line. This hook\n method is called whenever the text changes in the input field.\n </p>\n"
591,method,org/eclipse/jface/dialogs/InputDialog/setErrorMessage/String," Sets or clears the error message.\n If not <code>null</code>, the OK button is disabled.\n \n @param errorMessage\n            the error message, or <code>null</code> to clear\n @since 3.0\n"
594,class,org/eclipse/jface/layout/TableColumnLayout," The TableColumnLayout is the {@link Layout} used to maintain\n {@link TableColumn} sizes in a {@link Table}.\n \n <p>\n <b>You can only add the {@link Layout} to a container whose <i>only</i> child\n is the {@link Table} control you want the {@link Layout} applied to. Don't\n assign the layout directly the {@link Table}</b>\n </p>\n \n @since 3.3\n"
595,method,org/eclipse/jface/layout/TableColumnLayout/getColumnCount/Scrollable," {@inheritDoc}\n \n @since 3.5\n"
596,method,org/eclipse/jface/layout/TableColumnLayout/setColumnWidths/Scrollable;int[]," {@inheritDoc}\n \n @since 3.5\n"
597,method,org/eclipse/jface/layout/TableColumnLayout/getLayoutData/Scrollable;int," {@inheritDoc}\n \n @since 3.5\n"
603,method,org/eclipse/jface/layout/RowLayoutFactory/swtDefaults/," Creates a RowLayoutFactory that creates RowLayouts with the default SWT\n values.\n \n <p>\n Initial values are:\n </p>\n \n <ul>\n <li>margins(0,0)</li>\n <li>extendedMargins(3,3,3,3)</li>\n <li>wrap(true)</li>\n <li>pack(true)</li>\n <li>fill(false)</li>\n <li>justify(false)</li>\n <li>spacing(3)</li>\n </ul>\n \n @return a RowLayoutFactory that creates RowLayouts as though created with\n         their default constructor\n @see #fillDefaults\n"
604,method,org/eclipse/jface/layout/RowLayoutFactory/fillDefaults/," Creates a RowLayoutFactory that creates RowLayouts with no margins, fill\n behavior, and default dialog spacing.\n \n <p>\n Initial values are:\n </p>\n \n <ul>\n <li>margins(0,0)</li>\n <li>extendedMargins(0,0,0,0)</li>\n <li>wrap(true)</li>\n <li>pack(true)</li>\n <li>fill(false)</li>\n <li>justify(false)</li>\n <li>spacing(LayoutConstants.getSpacing().x</li>\n </ul>\n \n @return a RowLayoutFactory that creates RowLayouts with no margins\n @see #swtDefaults\n"
605,method,org/eclipse/jface/layout/RowLayoutFactory/spacing/int," Sets the spacing for layouts created with this factory. The spacing is\n the distance between items within the layout.\n \n @param spacing\n            spacing (pixels)\n @return this\n @see #margins(Point)\n @see #margins(int, int)\n"
606,method,org/eclipse/jface/layout/RowLayoutFactory/margins/Point," Sets the margins for layouts created with this factory. The margins are\n the distance between the outer cells and the edge of the layout.\n \n @param margins\n            margin size (pixels)\n @return this\n @see #spacing(int)\n"
607,method,org/eclipse/jface/layout/RowLayoutFactory/margins/int;int," Sets the margins for layouts created with this factory. The margins\n specify the number of pixels of horizontal and vertical margin that will\n be placed along the left/right and top/bottom edges of the layout. Note\n that these margins will be added to the ones specified by\n {@link #extendedMargins(int, int, int, int)}.\n \n @param width\n            margin width (pixels)\n @param height\n            margin height (pixels)\n @return this\n @see #spacing(int)\n"
608,method,org/eclipse/jface/layout/RowLayoutFactory/extendedMargins/int;int;int;int," Sets the margins for layouts created with this factory. The margins\n specify the number of pixels of horizontal and vertical margin that will\n be placed along the left, right, top, and bottom edges of the layout.\n Note that these margins will be added to the ones specified by\n {@link #margins(int, int)}.\n \n @param left\n            left margin size (pixels)\n @param right\n            right margin size (pixels)\n @param top\n            top margin size (pixels)\n @param bottom\n            bottom margin size (pixels)\n @return this\n @see #spacing(int)\n \n @since 3.3\n"
609,method,org/eclipse/jface/layout/RowLayoutFactory/fill/boolean," Fill specifies whether the controls in a row should be all the same\n height for horizontal layouts, or the same width for vertical layouts.\n \n @param fill\n            the fill status\n @return this\n"
610,method,org/eclipse/jface/layout/RowLayoutFactory/justify/boolean," Justify specifies whether the controls in a row should be fully\n justified, with any extra space placed between the controls.\n \n @param justify\n            the justify status\n @return this\n"
611,method,org/eclipse/jface/layout/RowLayoutFactory/pack/boolean," Pack specifies whether all controls in the layout take their preferred\n size. If pack is false, all controls will have the same size which is the\n size required to accommodate the largest preferred height and the largest\n preferred width of all the controls in the layout.\n \n @param pack\n            the pack status\n @return this\n"
617,class,org/eclipse/jface/layout/AbstractColumnLayout," The AbstractColumnLayout is a {@link Layout} used to set the size of a table\n in a consistent way even during a resize unlike a {@link TableLayout} which\n only sets initial sizes.\n \n <p>\n <b>You can only add the layout to a container whose only child is the\n table/tree control you want the layouts applied to.</b>\n </p>\n \n @since 3.4\n"
632,method,org/eclipse/jface/layout/GridDataFactory/defaultsFor/Control," Returns a GridDataFactory initialized with heuristicly generated defaults for the given control.\n To be precise, this method picks the default values that GridLayoutFactory.generateLayout\n would have assigned to the control. Does not attach GridData to the control. Callers must\n additionally call applyTo(theControl) if they wish to use the generated values.\n \n <p>\n This method is intended for situations where generateLayout is generating layout data\n for a particular control that is not quite right for the desired layout.\n This allows callers to start with the generated values and tweak one or two settings\n before applying the GridData to the control.\n </p> \n \n @see GridLayoutFactory#generateLayout(org.eclipse.swt.widgets.Composite)\n @param theControl \n @return a GridLayoutFactory initialized with defaults that GridLayoutFactory would have \n @since 3.3\n"
637,method,org/eclipse/jface/layout/GridDataFactory/hint/int;int," Sets the width and height hints. The width and height hints override\n the control's preferred size. If either hint is set to SWT.DEFAULT,\n the control's preferred size is used. \n \n @param xHint horizontal hint (pixels), or SWT.DEFAULT to use the control's preferred size\n @param yHint vertical hint (pixels), or SWT.DEFAULT to use the control's preferred size\n @return this\n"
638,method,org/eclipse/jface/layout/GridDataFactory/hint/Point," Sets the width and height hints. The width and height hints override\n the control's preferred size. If either hint is set to SWT.DEFAULT,\n the control's preferred size is used.\n \n @param hint size (pixels) to be used instead of the control's preferred size. If\n the x or y values are set to SWT.DEFAULT, the control's computeSize() method will\n be used to obtain that dimension of the preferred size.\n @return this\n"
642,method,org/eclipse/jface/layout/GridDataFactory/grab/boolean;boolean," Determines whether extra horizontal or vertical space should be allocated to\n this control's column when the layout resizes. If any control in the column\n is set to grab horizontal then the whole column will grab horizontal space.\n If any control in the row is set to grab vertical then the whole row will grab\n vertical space.\n \n @param horizontal true if the control's column should grow horizontally\n @param vertical true if the control's row should grow vertically\n @return this\n"
643,method,org/eclipse/jface/layout/GridDataFactory/minSize/int;int," Sets the minimum size for the control. The control will not be permitted\n to shrink below this size. Note: GridLayout treats a minimum size of 0\n as an undocumented special value, so the smallest possible minimum size \n is a size of 1. A minimum size of SWT.DEFAULT indicates that the result\n of computeSize(int, int, boolean) should be used as the control's minimum\n size.\n \n \n @param minX minimum a value of 1 or more is a horizontal size of the control (pixels). \n        SWT.DEFAULT indicates that the control's preferred size should be used. A size\n        of 0 has special semantics defined by GridLayout. \n @param minY minimum a value of 1 or more is a vertical size of the control (pixels). SWT.DEFAULT\n        indicates that the control's preferred size should be used. A size\n        of 0 has special semantics defined by GridLayout.\n @return this\n"
644,method,org/eclipse/jface/layout/GridDataFactory/minSize/Point," Sets the minimum size for the control. The control will not be permitted\n to shrink below this size. Note: GridLayout treats a minimum size of 0\n as an undocumented special value, so the smallest possible minimum size \n is a size of 1. A minimum size of SWT.DEFAULT indicates that the result\n of computeSize(int, int, boolean) should be used as the control's minimum\n size.\n \n @param min minimum size of the control\n @return this\n"
645,method,org/eclipse/jface/layout/GridDataFactory/exclude/boolean," Instructs the GridLayout to ignore this control when performing layouts. \n \n @param shouldExclude true iff the control should be excluded from layouts\n @return this\n"
649,method,org/eclipse/jface/layout/GridDataFactory/applyTo/Control," Sets the layout data on the given control. Creates a new GridData instance and\n assigns it to the control by calling control.setLayoutData.\n  \n @param control control whose layout data will be initialized\n"
650,class,org/eclipse/jface/layout/PixelConverter," PixelConverter performs various conversions from device-independent units\n (such as DLUs or characters) to pixels. It can be associated with a control or\n a font. In the case of a control, the font used by the control at the time\n the PixelConverter is created is used for the pixel calculations. In the case\n of a specific font, the supplied font is used for the calculations.\n \n The control and/or font must not be disposed at the time the PixelConverter\n is created.\n \n @since 3.5\n"
656,method,org/eclipse/jface/layout/PixelConverter/PixelConverter/Font," Create a PixelConverter which will convert device-independent units to\n pixels using the specified font.\n \n @param font\n            the font that should be used for pixel conversions.\n"
657,class,org/eclipse/jface/layout/TreeColumnLayout," The TreeColumnLayout is the {@link Layout} used to maintain {@link TreeColumn} sizes in a \n {@link Tree}.\n \n <p>\n <b>You can only add the {@link Layout} to a container whose <i>only</i>\n child is the {@link Tree} control you want the {@link Layout} applied to.\n Don't assign the layout directly the {@link Tree}</b>\n </p>\n \n @since 3.3\n"
659,method,org/eclipse/jface/layout/TreeColumnLayout/getColumnCount/Scrollable," {@inheritDoc}\n \n @since 3.5\n"
660,method,org/eclipse/jface/layout/TreeColumnLayout/setColumnWidths/Scrollable;int[]," {@inheritDoc}\n \n @since 3.5\n"
661,method,org/eclipse/jface/layout/TreeColumnLayout/getLayoutData/Scrollable;int," {@inheritDoc}\n \n @since 3.5\n"
662,method,org/eclipse/jface/layout/TreeColumnLayout/updateColumnData/Widget," {@inheritDoc}\n \n @since 3.5\n"
664,class,org/eclipse/jface/layout/GridLayoutFactory," GridLayoutFactory creates and initializes grid layouts. There are two ways to use GridLayoutFactory.\n Normally, it is used as a shorthand for writing "new GridLayout()" and initializing a bunch \n of fields. In this case the main benefit is a more concise syntax and the ability to create more\n than one identical GridLayout from the same factory. Changing a property of the factory will affect\n future layouts created by the factory, but has no effect on layouts that have already been created.\n \n <p>\n GridLayoutFactory can also generate grid data for all the controls in a layout. This is done with\n the generateLayout method. To use this feature:\n </p>\n \n <ol>\n <li>Create the composite</li>\n <li>Create all the controls in the composite</li>\n <li>Call generateLayout</li>\n </ol>\n \n <p>\n The order here is important. generateLayout must be called after all the child controls have\n been created. generateLayout will not change any layout data that has already been attached\n to a child control and it will not recurse into nested composites. \n </p>\n\n @since 3.2\n"
667,method,org/eclipse/jface/layout/GridLayoutFactory/swtDefaults/," Creates a GridLayoutFactory that creates GridLayouts with the default SWT\n values.\n \n <p>\n Initial values are:\n </p>\n \n <ul>\n <li>numColumns(1)</li>\n <li>margins(5,5)</li>\n <li>extendedMargins(0,0,0,0)</li>\n <li>spacing(5,5)</li>\n <li>equalWidth(false)</li>\n </ul>\n \n @return a GridLayoutFactory that creates GridLayouts as though created with\n their default constructor\n @see #fillDefaults\n"
668,method,org/eclipse/jface/layout/GridLayoutFactory/fillDefaults/," Creates a GridLayoutFactory that creates GridLayouts with no margins and \n default dialog spacing.\n \n <p>\n Initial values are:\n </p>\n \n <ul>\n <li>numColumns(1)</li>\n <li>margins(0,0)</li>\n <li>extendedMargins(0,0,0,0)</li>\n <li>spacing(LayoutConstants.getSpacing())</li>\n <li>equalWidth(false)</li>\n </ul>\n \n @return a GridLayoutFactory that creates GridLayouts as though created with\n their default constructor\n @see #swtDefaults\n"
669,method,org/eclipse/jface/layout/GridLayoutFactory/equalWidth/boolean," Sets whether the columns should be forced to be equal width\n \n @param equal true iff the columns should be forced to be equal width\n @return this\n"
670,method,org/eclipse/jface/layout/GridLayoutFactory/spacing/int;int," Sets the spacing for layouts created with this factory. The spacing\n is the distance between cells within the layout. \n \n @param hSpacing horizontal spacing (pixels)\n @param vSpacing vertical spacing (pixels)\n @return this\n @see #margins(Point)\n @see #margins(int, int)\n"
671,method,org/eclipse/jface/layout/GridLayoutFactory/spacing/Point," Sets the spacing for layouts created with this factory. The spacing\n is the distance between cells within the layout. \n \n @param spacing space between controls in the layout (pixels)\n @return this\n @see #margins(Point)\n @see #margins(int, int)\n"
672,method,org/eclipse/jface/layout/GridLayoutFactory/margins/Point," Sets the margins for layouts created with this factory. The margins\n are the distance between the outer cells and the edge of the layout.\n \n @param margins margin size (pixels)\n @return this\n @see #spacing(Point)\n @see #spacing(int, int)\n"
673,method,org/eclipse/jface/layout/GridLayoutFactory/margins/int;int," Sets the margins for layouts created with this factory. The margins\n specify the number of pixels of horizontal and vertical margin that will\n be placed along the left/right and top/bottom edges of the layout. Note\n that thes margins will be added to the ones specified by\n {@link #extendedMargins(int, int, int, int)}.\n \n @param width\n            margin width (pixels)\n @param height\n            margin height (pixels)\n @return this\n @see #spacing(Point)\n * @see #spacing(int, int)\n"
675,method,org/eclipse/jface/layout/GridLayoutFactory/extendedMargins/Rectangle," Sets the margins for layouts created with this factory. The margins\n specify the number of pixels of horizontal and vertical margin that will\n be placed along the left, right, top, and bottom edges of the layout.\n Note that thes margins will be added to the ones specified by\n {@link #margins(int, int)}.\n \n <code><pre>\n     // Construct a GridLayout whose left, right, top, and bottom \n     // margin sizes are 10, 5, 0, and 15 respectively\n      \n     Rectangle margins = Geometry.createDiffRectangle(10,5,0,15);\n     GridLayoutFactory.fillDefaults().extendedMargins(margins).applyTo(composite1);\n </pre></code>\n \n @param differenceRect rectangle which, when added to the client area of the\n        layout, returns the outer area of the layout. The x and y values of\n        the rectangle correspond to the position of the bounds of the \n        layout with respect to the client area. They should be negative. \n        The width and height correspond to the relative size of the bounds\n        of the layout with respect to the client area, and should be positive. \n @return this\n @see #spacing(Point)\n @see #spacing(int, int)\n \n @since 3.3\n"
690,method,org/eclipse/jface/layout/RowDataFactory/exclude/boolean," Instructs the GridLayout to ignore this control when performing layouts.\n \n @param shouldExclude\n            true iff the control should be excluded from layouts\n @return this\n"
693,method,org/eclipse/jface/layout/RowDataFactory/applyTo/Control," Sets the layout data on the given control. Creates a new RowData instance\n and assigns it to the control by calling control.setLayoutData.\n \n @param control\n            control whose layout data will be initialised\n"
694,method,org/eclipse/jface/layout/RowDataFactory/hint/int;int," Sets the width and height hints. The width and height hints override the\n control's preferred size. If either hint is set to SWT.DEFAULT, the\n control's preferred size is used.\n \n @param xHint\n            horizontal hint (pixels), or SWT.DEFAULT to use the control's\n            preferred size\n @param yHint\n            vertical hint (pixels), or SWT.DEFAULT to use the control's\n            preferred size\n @return this\n"
695,method,org/eclipse/jface/layout/RowDataFactory/hint/Point," Sets the width and height hints. The width and height hints override the\n control's preferred size. If either hint is set to SWT.DEFAULT, the\n control's preferred size is used.\n \n @param hint\n            size (pixels) to be used instead of the control's preferred\n            size. If the x or y values are set to SWT.DEFAULT, the\n            control's computeSize() method will be used to obtain that\n            dimension of the preferred size.\n @return this\n"
699,method,org/eclipse/jface/resource/JFaceColors/getErrorBackground/Display," @param display the display the color is from\n @return the background Color for widgets that display errors.\n @see SWT#COLOR_WIDGET_BACKGROUND\n @see Display#getSystemColor(int)\n"
700,method,org/eclipse/jface/resource/JFaceColors/getErrorBorder/Display," @param display the display the color is from\n @return the border Color for widgets that display errors.\n @see SWT#COLOR_WIDGET_DARK_SHADOW\n @see Display#getSystemColor(int)\n"
701,method,org/eclipse/jface/resource/JFaceColors/getErrorText/Display," @param display the display the color is from\n @return the default color to use for displaying errors.\n @see ColorRegistry#get(String)\n @see JFacePreferences#ERROR_COLOR\n"
704,method,org/eclipse/jface/resource/JFaceColors/clearColor/String," Clear out the cached color for name. This is generally\n done when the color preferences changed and any cached colors\n may be disposed. Users of the colors in this class should add a IPropertyChangeListener\n to detect when any of these colors change.\n @param colorName name of the color\n \n @deprecated JFaceColors no longer maintains a cache of colors.  This job \n is now handled by the ColorRegistry.\n"
705,method,org/eclipse/jface/resource/JFaceColors/disposeColors/," Dispose of all allocated colors. Called on workbench\n shutdown.\n \n @deprecated JFaceColors no longer maintains a cache of colors.  This job \n is now handled by the ColorRegistry.\n"
706,method,org/eclipse/jface/resource/JFaceColors/setColors/Control;Color;Color," Set the foreground and background colors of the\n control to the specified values. If the values are\n null than ignore them. \n @param control the control the foreground and/or background color should be set\n \n @param foreground Color the foreground color (maybe <code>null</code>)\n @param background Color the background color (maybe <code>null</code>)\n"
711,method,org/eclipse/jface/resource/ImageDescriptor/createFromImage/Image," Creates and returns a new image descriptor for the given image. Note \n that disposing the original Image will cause the descriptor to become invalid.\n \n @since 3.1 \n\n @param img image to create\n @return a newly created image descriptor\n"
721,method,org/eclipse/jface/resource/ImageDescriptor/getImageData/," Creates and returns a new SWT <code>ImageData</code> object\n for this image descriptor.\n Note that each call returns a new SWT image data object.\n <p>\n This framework method is declared public so that it is\n possible to request an image descriptor's image data without\n creating an SWT image object.\n </p>\n <p>\n Returns <code>null</code> if the image data could not be created.\n </p>\n\n @return a new image data or <code>null</code>\n"
724,field,org/eclipse/jface/resource/ImageDescriptor/DEFAULT_IMAGE_DATA,"\n A small red square used to warn that an image cannot be created.\n <p>\n"
729,method,org/eclipse/jface/resource/ColorRegistry/getColorDescriptor/String," Returns the color descriptor associated with the given symbolic color\n name. As of 3.4 if this color is not defined then an unspecified color\n is returned. Users that wish to ensure a reasonable default value should\n use {@link #getColorDescriptor(String, ColorDescriptor)} instead.\n \n @since 3.1\n \n @param symbolicName\n @return the color descriptor associated with the given symbolic color\n         name or an unspecified sentinel.\n"
736,method,org/eclipse/jface/resource/ColorRegistry/ColorRegistry/Display;boolean," Create a new instance of the receiver.\n \n @param display the <code>Display</code> to hook into\n @param cleanOnDisplayDisposal\n            whether all fonts allocated by this <code>ColorRegistry</code>\n            should be disposed when the display is disposed\n @since 3.1\n"
739,class,org/eclipse/jface/resource/ColorDescriptor," Lightweight descriptor for an SWT color. Each ColorDescriptor will create a particular SWT \n Color on demand. This object will be compared so hashCode(...) and equals(...) must \n return meaningful values.\n \n @since 3.1\n"
740,method,org/eclipse/jface/resource/ColorDescriptor/createFrom/Color;Device," Creates a ColorDescriptor from an existing Color, given the Device associated\n with the original Color. This is the usual way to convert a Color into\n a ColorDescriptor. Note that the returned ColorDescriptor depends on the\n original Color, and disposing the Color will invalidate the ColorDescriptor.\n \n @deprecated use {@link ColorDescriptor#createFrom(Color)}\n \n @since 3.1\n\n @param toCreate Color to convert into a ColorDescriptor.\n @param originalDevice this must be the same Device that was passed into the\n original Color's constructor.\n @return a newly created ColorDescriptor that describes the given Color.\n"
741,method,org/eclipse/jface/resource/ColorDescriptor/createFrom/Color," Creates a ColorDescriptor from an existing color. \n \n The returned ColorDescriptor depends on the original Color. Disposing\n the original colour while the color descriptor is still in use may cause \n SWT to throw a graphic disposed exception.\n \n @since 3.1\n\n @param toCreate Color to generate a ColorDescriptor from\n @return a newly created ColorDescriptor\n"
743,method,org/eclipse/jface/resource/ColorDescriptor/createColor/Device," Returns the Color described by this descriptor.\n \n @param device SWT device on which to allocate the Color\n @return a newly allocated SWT Color object (never null)\n @throws DeviceResourceException if unable to allocate the Color\n"
757,method,org/eclipse/jface/resource/ImageRegistry/ImageRegistry/Display," Creates an empty image registry.\n \n @param display this <code>Display</code> must not be \n        <code>null</code> and must not be disposed in order\n        to use this registry\n"
758,class,org/eclipse/jface/resource/LocalResourceManager," A local registry that shares its resources with some global registry.\n LocalResourceManager is typically used to safeguard against leaks. Clients\n can use a nested registry to allocate and deallocate resources in the\n global registry. Calling dispose() on the nested registry will deallocate\n everything allocated for the nested registry without affecting the rest\n of the global registry.\n <p>\n A nested registry can be used to manage the resources for, say, a dialog\n box.\n </p>\n @since 3.1\n"
764,method,org/eclipse/jface/resource/LocalResourceManager/LocalResourceManager/ResourceManager;Control," Creates a local registry that wraps the given global registry. Anything\n allocated by this registry will be automatically cleaned up with the given\n control is disposed. Note that registries created in this way should not\n be used to allocate any resource that must outlive the given control.\n \n @param parentRegistry global registry that handles resource allocation\n @param owner control whose disposal will trigger cleanup of everything \n in the registry.\n"
765,class,org/eclipse/jface/resource/DeviceResourceManager," Manages SWT resources for a particular device.\n  \n <p>\n IMPORTANT: in most cases clients should use a <code>LocalResourceManager</code> instead of a\n <code>DeviceResourceManager</code>. To create a resource manager on a particular display, \n use <code>new LocalResourceManager(JFaceResources.getResources(myDisplay))</code>.\n <code>DeviceResourceManager</code> should only be used directly when managing\n resources for a device other than a Display (such as a printer).  \n </p>\n \n @see LocalResourceManager\n \n @since 3.1\n"
774,method,org/eclipse/jface/resource/DeviceResourceException/DeviceResourceException/DeviceResourceDescriptor;Throwable," Creates a DeviceResourceException indicating an error attempting to\n create a resource and an embedded low-level exception describing the cause \n \n @param missingResource\n @param cause cause of the exception (or null if none)\n"
775,method,org/eclipse/jface/resource/DeviceResourceException/DeviceResourceException/DeviceResourceDescriptor," Creates a DeviceResourceException indicating an error attempting to\n create a resource \n \n @param missingResource\n"
778,method,org/eclipse/jface/resource/DeviceResourceDescriptor/destroyResource/Object," Undoes everything that was done by a previous call to create(...), given\n the object that was returned by create(...).\n \n @since 3.1 \n\n @param previouslyCreatedObject an object that was returned by an equal \n descriptor in a previous call to createResource(...).\n"
780,class,org/eclipse/jface/resource/FontDescriptor," Lightweight descriptor for a font. Creates the described font on demand.\n Subclasses can implement different ways of describing a font. These objects\n will be compared, so hashCode(...) and equals(...) must return something \n meaningful.\n \n @since 3.1\n"
782,method,org/eclipse/jface/resource/FontDescriptor/createFrom/Font," Creates a FontDescriptor that describes an existing font. The resulting\n descriptor depends on the original Font, and disposing the original Font\n while the descriptor is still in use may cause SWT to throw a graphic\n disposed exception.\n \n @since 3.1\n\n @param font font to create\n @return a newly created FontDescriptor that describes the given font\n"
790,method,org/eclipse/jface/resource/FontDescriptor/withStyle/int," <p>Returns a FontDescriptor that is equivalent to the reciever, but\n has the given style bits, in addition to any styles the reciever already has.</p>\n \n <p>Does not modify the reciever.</p>\n \n @param style a bitwise combination of SWT.NORMAL, SWT.ITALIC and SWT.BOLD\n @return a new FontDescriptor with the given additional style bits\n @since 3.3\n"
801,class,org/eclipse/jface/resource/ResourceManager," This class manages SWT resources. It manages reference-counted instances of resources\n such as Fonts, Images, and Colors, and allows them to be accessed using descriptors.\n Everything allocated through the registry should also be disposed through the registry.\n Since the resources are shared and reference counted, they should never be disposed\n directly.\n <p>\n ResourceManager handles correct allocation and disposal of resources. It differs from \n the various JFace *Registry classes, which also map symbolic IDs onto resources. In \n general, you should use a *Registry class to map IDs onto descriptors, and use a \n ResourceManager to convert the descriptors into real Images/Fonts/etc.\n </p>\n \n @since 3.1\n"
804,method,org/eclipse/jface/resource/ResourceManager/destroy/DeviceResourceDescriptor," Deallocates a resource previously allocated by {@link #create(DeviceResourceDescriptor)}. \n Descriptors are compared by equality, not identity. If the same resource was \n created multiple times, this may decrement a reference count rather than \n disposing the actual resource.  \n \n @since 3.1 \n\n @param descriptor identifier for the resource\n"
805,method,org/eclipse/jface/resource/ResourceManager/get/DeviceResourceDescriptor," <p>Returns a previously-allocated resource or allocates a new one if none\n exists yet. The resource will remain allocated for at least the lifetime\n of this resource manager. If necessary, the resource will be deallocated \n automatically when the resource manager is disposed.</p>\n \n <p>The resources returned from this method are reference counted and may be shared \n internally with other resource managers. They should never be disposed outside of the \n ResourceManager framework, or it will cause exceptions in other code that shares\n them. For example, never call {@link org.eclipse.swt.graphics.Resource#dispose()} \n on anything returned from this method.</p>\n \n <p>\n Callers may safely downcast the result to the resource type associated with \n the descriptor. For example, when given an ImageDescriptor, the return\n value of this method may be downcast to Image.\n </p>\n \n <p>\n This method should only be used for resources that should remain\n allocated for the lifetime of the resource manager. To allocate shorter-lived\n resources, manage them with <code>create</code>, and <code>destroy</code>\n rather than this method.\n </p>\n \n <p>\n This method should never be called on the global resource manager,\n since all resources will remain allocated for the lifetime of the app and\n will be effectively leaked.\n </p>\n \n @param descriptor identifier for the requested resource\n @return the requested resource. Never null.\n @throws DeviceResourceException if the resource does not exist yet and cannot\n be created for any reason.\n \n @since 3.3\n"
812,method,org/eclipse/jface/resource/ResourceManager/destroyColor/RGB," Undoes everything that was done by a call to {@link #createColor(RGB)}.\n \n @since 3.1 \n\n @param descriptor RGB value of the color to dispose\n"
814,method,org/eclipse/jface/resource/ResourceManager/destroyFont/FontDescriptor," Undoes everything that was done by a previous call to {@link #createFont(FontDescriptor)}.\n \n @since 3.1 \n\n @param descriptor description of the font to destroy\n"
817,method,org/eclipse/jface/resource/ResourceManager/disposeExec/Runnable," Causes the <code>run()</code> method of the runnable to\n be invoked just before the receiver is disposed. The runnable\n can be subsequently canceled by a call to <code>cancelDisposeExec</code>.\n \n @param r runnable to execute.\n"
823,method,org/eclipse/jface/resource/ResourceRegistry/getKeySet/,"\n @return the set of keys this manager knows about.  This collection \n should be immutable.\n"
832,method,org/eclipse/jface/resource/CompositeImageDescriptor/getTransparentPixel/," Return the transparent pixel for the receiver.\n <strong>NOTE</strong> This value is not currently in use in the \n default implementation.\n @return int\n @since 3.3\n"
877,method,org/eclipse/jface/resource/JFaceResources/getBundle/," Returns the resource bundle for JFace itself. The resouble bundle is\n obtained from\n <code>ResourceBundle.getBundle("org.eclipse.jface.jface_nls")</code>.\n <p>\n Note that several static convenience methods are also provided on this\n class for directly accessing resources in this bundle.\n </p>\n \n @return the resource bundle\n"
885,method,org/eclipse/jface/resource/JFaceResources/getFont/String," Returns the font in JFace's font registry with the given symbolic font\n name. Convenience method equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().get(symbolicName)\n </pre>\n \n If an error occurs, return the default font.\n \n @param symbolicName\n            the symbolic font name\n @return the font\n"
887,method,org/eclipse/jface/resource/JFaceResources/getFontRegistry/," Returns the font registry for JFace itself. If the value has not been\n established by an earlier call to <code>setFontRegistry</code>, is it\n initialized to\n <code>new FontRegistry("org.eclipse.jface.resource.jfacefonts")</code>.\n <p>\n Note that several static convenience methods are also provided on this\n class for directly accessing JFace's standard fonts.\n </p>\n \n @return the JFace font registry\n"
895,method,org/eclipse/jface/resource/JFaceResources/getTextFontDescriptor/," Returns the descriptor for JFace's text font. Convenience method\n equivalent to\n \n <pre>\n JFaceResources.getFontRegistry().getDescriptor(JFaceResources.TEXT_FONT)\n </pre>\n \n @return the font descriptor (never null)\n @since 3.3\n"
910,method,org/eclipse/jface/resource/FontRegistry/getDescriptor/String," Returns the font descriptor for the font with the given symbolic\n font name. Returns the default font if there is no special value\n associated with that name\n \n @param symbolicName symbolic font name\n @return the font descriptor (never null)\n \n @since 3.3\n"
912,method,org/eclipse/jface/resource/FontRegistry/get/String," Returns the font associated with the given symbolic font name.\n Returns the default font if there is no special value associated\n with that name.\n <p>\n This method should only be called from the UI thread. If you are not on the UI\n thread then wrap the call with a\n <code>PlatformUI.getWorkbench().getDisplay().synchExec()</code> in order to\n guarantee the correct result. Failure to do this may result in an {@link\n SWTException} being thrown.\n </p>\n @param symbolicName symbolic font name\n @return the font\n"
922,method,org/eclipse/jface/resource/FontRegistry/FontRegistry/String," Load the FontRegistry using the ClassLoader from the PlatformUI\n plug-in\n <p>\n This method should only be called from the UI thread. If you are not on the UI\n thread then wrap the call with a\n <code>PlatformUI.getWorkbench().getDisplay().synchExec()</code> in order to\n guarantee the correct result. Failure to do this may result in an {@link\n SWTException} being thrown.\n </p>\n @param location the location to read the resource bundle from\n @throws MissingResourceException Thrown if a resource is missing\n"
924,method,org/eclipse/jface/resource/FontRegistry/FontRegistry/Display;boolean," Creates an empty font registry.\n \n @param display\n            the <code>Display</code>\n @param cleanOnDisplayDisposal\n            whether all fonts allocated by this <code>FontRegistry</code>\n            should be disposed when the display is disposed\n @since 3.1\n"
926,interface,org/eclipse/jface/operation/IRunnableContext," Interface for UI components which can execute a long-running operation\n in the form of an <code>IRunnableWithProgress</code>.\n The context is responsible for displaying a progress indicator and Cancel\n button to the end user while the operation is in progress; the context\n supplies a progress monitor to be used from code running inside the operation.\n Note that an <code>IRunnableContext</code> is not a runnable itself.\n <p>\n For examples of UI components which implement this interface,\n see <code>ApplicationWindow</code>, <code>ProgressMonitorDialog</code>,\n and <code>WizardDialog</code>.\n </p>\n\n @see IRunnableWithProgress\n @see org.eclipse.jface.window.ApplicationWindow\n @see org.eclipse.jface.dialogs.ProgressMonitorDialog\n @see org.eclipse.jface.wizard.WizardDialog\n"
928,interface,org/eclipse/jface/operation/IRunnableWithProgress," The <code>IRunnableWithProgress</code> interface should be implemented by any\n class whose instances are intended to be executed as a long-running operation.\n Long-running operations are typically presented at the UI via a modal dialog\n showing a progress indicator and a Cancel button.\n The class must define a <code>run</code> method that takes a progress monitor.\n The <code>run</code> method is usually not invoked directly, but rather by\n passing the <code>IRunnableWithProgress</code> to the <code>run</code> method of\n an <code>IRunnableContext</code>, which provides the UI for the progress monitor\n and Cancel button.\n\n @see IRunnableContext\n"
929,method,org/eclipse/jface/operation/IRunnableWithProgress/run/IProgressMonitor," Runs this operation.  Progress should be reported to the given progress monitor.\n This method is usually invoked by an <code>IRunnableContext</code>'s <code>run</code> method,\n which supplies the progress monitor.\n A request to cancel the operation should be honored and acknowledged \n by throwing <code>InterruptedException</code>.\n\n @param monitor the progress monitor to use to display progress and receive\n   requests for cancelation\n @exception InvocationTargetException if the run method must propagate a checked exception,\n 	it should wrap it inside an <code>InvocationTargetException</code>; runtime exceptions are automatically\n  wrapped in an <code>InvocationTargetException</code> by the calling context\n @exception InterruptedException if the operation detects a request to cancel, \n  using <code>IProgressMonitor.isCanceled()</code>, it should exit by throwing \n  <code>InterruptedException</code>\n\n @see IRunnableContext#run\n"
930,interface,org/eclipse/jface/operation/IThreadListener," A thread listener is an object that is interested in receiving notifications\n of thread changes.  For example, a thread listener can be used to notify a \n runnable of the thread that will execute it, allowing the runnable to transfer\n thread-local state from the calling thread before control passes to the new thread.\n \n @since 3.1\n"
931,method,org/eclipse/jface/operation/IThreadListener/threadChange/Thread," Notification that a thread change is occurring.\n \n @param thread The new thread\n"
934,method,org/eclipse/jface/operation/ModalContext/checkCanceled/IProgressMonitor," Checks with the given progress monitor and throws\n <code>InterruptedException</code> if it has been canceled.\n <p>\n Code in a long-running operation should call this method regularly so\n that a request to cancel will be honored.\n </p>\n <p>\n Convenience for:\n \n <pre>\n if (monitor.isCanceled())\n 	throw new InterruptedException();\n </pre>\n \n </p>\n \n @param monitor\n            the progress monitor\n @exception InterruptedException\n                if cancelling the operation has been requested\n @see IProgressMonitor#isCanceled()\n"
935,method,org/eclipse/jface/operation/ModalContext/getModalLevel/," Returns the modal nesting level.\n <p>\n The modal nesting level increases by one each time the\n <code>ModalContext.run</code> method is called within the dynamic scope\n of another call to <code>ModalContext.run</code>.\n </p>\n \n @return the modal nesting level, or <code>0</code> if this method is\n         called outside the dynamic scope of any invocation of\n         <code>ModalContext.run</code>\n"
936,method,org/eclipse/jface/operation/ModalContext/isModalContextThread/Thread," Returns whether the given thread is running a modal context.\n \n @param thread\n            The thread to be checked\n @return <code>true</code> if the given thread is running a modal\n         context, <code>false</code> if not\n"
938,method,org/eclipse/jface/operation/ModalContext/setDebugMode/boolean," Sets whether ModalContext is running in debug mode.\n \n @param debugMode\n            <code>true</code> for debug mode, and <code>false</code>\n            for normal mode (the default)\n"
939,method,org/eclipse/jface/operation/ModalContext/setAllowReadAndDispatch/boolean," Sets whether ModalContext may process events (by calling\n <code>Display.readAndDispatch()</code>) while running operations. By\n default, ModalContext will process events while running operations. Use\n this method to disallow event processing temporarily.\n \n @param allowReadAndDispatch\n            <code>true</code> (the default) if events may be processed\n            while running an operation, <code>false</code> if\n            Display.readAndDispatch() should not be called from\n            ModalContext.\n @since 3.2\n"
942,method,org/eclipse/jface/contentassist/ISubjectControlContentAssistProcessor/computeCompletionProposals/IContentAssistSubjectControl;int," Returns a list of completion proposals based on the specified location\n within the document that corresponds to the current cursor position\n within the text viewer.\n\n @param contentAssistSubjectControl the content assist subject control whose\n           document is used to compute the proposals\n @param documentOffset an offset within the document for which\n           completions should be computed\n @return an array of completion proposals or <code>null</code> if no\n         proposals are possible\n"
943,method,org/eclipse/jface/contentassist/ISubjectControlContentAssistProcessor/computeContextInformation/IContentAssistSubjectControl;int," Returns information about possible contexts based on the specified\n location within the document that corresponds to the current cursor\n position within the content assist subject control.\n\n @param contentAssistSubjectControl the content assist subject control whose\n           document is used to compute the possible contexts\n @param documentOffset an offset within the document for which context\n           information should be computed\n @return an array of context information objects or <code>null</code>\n         if no context could be found\n"
944,interface,org/eclipse/jface/contentassist/ISubjectControlContentAssistant," Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} to\n allow to install a content assistant on the given\n {@linkplain org.eclipse.jface.contentassist.IContentAssistSubjectControl content assist subject control}.\n\n @since 3.0\n @deprecated As of 3.2, replaced by Platform UI's field assist support\n"
977,interface,org/eclipse/jface/contentassist/ISubjectControlContextInformationValidator," Extends {@link org.eclipse.jface.text.contentassist.IContextInformationValidator} to\n allow to install a content assistant on the given\n {@linkplain org.eclipse.jface.contentassist.IContentAssistSubjectControl content assist subject control}.\n\n @since 3.0\n @deprecated As of 3.2, replaced by Platform UI's field assist support\n"
978,method,org/eclipse/jface/contentassist/ISubjectControlContextInformationValidator/install/IContextInformation;IContentAssistSubjectControl;int," Installs this validator for the given context information.\n\n @param info the context information which this validator should check\n @param contentAssistSubjectControl the content assist subject control\n @param offset the document offset for which the information\n           has been computed\n"
989,method,org/eclipse/jface/contentassist/AbstractControlContentAssistSubjectAdapter/setContentAssistCueProvider/ILabelProvider," Sets the visual feedback provider for content assist.\n The given {@link ILabelProvider} methods are called with\n {@link #getControl()} as argument.\n\n <ul>\n   <li><code>getImage(Object)</code> provides the visual cue image.\n     The image can maximally be 5 pixels wide and 8 pixels high.\n     If <code>getImage(Object)</code> returns <code>null</code>, a default image is used.\n   </li>\n   <li><code>getText(Object)</code> provides the hover info text.\n     It is shown when hovering over the cue image or the adapted {@link Control}.\n     No info text is shown if <code>getText(Object)</code> returns <code>null</code>.\n   </li>\n </ul>\n <p>\n The given {@link ILabelProvider} becomes owned by the {@link AbstractControlContentAssistSubjectAdapter},\n i.e. it gets disposed when the adapted {@link Control} is disposed\n or when another {@link ILabelProvider} is set.\n </p>\n\n @param labelProvider a {@link ILabelProvider}, or <code>null</code>\n 	if no visual feedback should be shown\n"
1004,method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/prependVerifyKeyListener/VerifyKeyListener," If supported, inserts the verify key listener at the beginning of this content assist\n subject's list of verify key listeners. If the listener is already\n registered with the viewer this call moves the listener to the beginning\n of the list.\n <p>\n Note: This content assist subject control may not support prepending a verify\n listener, in which case <code>false</code> will be returned. However,\n {@link #appendVerifyKeyListener(VerifyKeyListener)} might work.\n </p>\n\n @param verifyKeyListener the listener to be inserted\n @return <code>true</code> if the listener was added\n"
1005,method,org/eclipse/jface/contentassist/IContentAssistSubjectControl/removeVerifyKeyListener/VerifyKeyListener," Removes the verify key listener from this content assist subject control's\n list of verify key listeners. If the listener is not registered, this\n call has no effect.\n\n @param verifyKeyListener the listener to be removed\n"
1012,class,org/eclipse/jface/contentassist/SubjectControlContentAssistant," The standard implementation of the {@link org.eclipse.jface.contentassist.ISubjectControlContentAssistant} interface.\n Usually, clients instantiate this class and configure it before using it.\n\n @since 3.0\n @deprecated As of 3.2, replaced by Platform UI's field assist support *\n"
1015,interface,org/eclipse/jface/contentassist/ISubjectControlContextInformationPresenter," Extends {@link org.eclipse.jface.text.contentassist.IContextInformationPresenter} to\n allow to install a content assistant on the given\n {@linkplain org.eclipse.jface.contentassist.IContentAssistSubjectControl content assist subject control}.\n\n @since 3.0\n @deprecated As of 3.2, replaced by Platform UI's field assist support\n"
1016,method,org/eclipse/jface/contentassist/ISubjectControlContextInformationPresenter/install/IContextInformation;IContentAssistSubjectControl;int," Installs this presenter for the given context information.\n\n @param info the context information which this presenter should style\n @param contentAssistSubjectControl the content assist subject control\n @param offset the document offset for which the information has been computed\n"
1040,method,org/eclipse/jface/preference/ScaleFieldEditor/valueChanged/," Informs this field editor's listener, if it has one, about a change to\n the value (<code>VALUE</code> property) provided that the old and new\n values are different.\n <p>\n This hook is <em>not</em> called when the scale is initialized (or\n reset to the default value) from the preference store.\n </p>\n"
1044,class,org/eclipse/jface/preference/FieldEditor," Abstract base class for all field editors.\n <p>\n A field editor presents the value of a preference to the end \n user. The value is loaded from a preference store; if\n modified by the end user, the value is validated and eventually\n stored back to the preference store. A field editor reports\n an event when the value, or the validity of the value, changes.\n </p>\n <p>\n Field editors should be used in conjunction with a field \n editor preference page (<code>FieldEditorPreferencePage</code>)\n which coordinates everything and provides the message line\n which display messages emanating from the editor.\n </p>\n <p>\n This package contains ready-to-use field editors for various\n types of preferences:\n <ul>\n   <li><code>BooleanFieldEditor</code> - booleans</li>\n   <li><code>IntegerFieldEditor</code> - integers</li>\n   <li><code>StringFieldEditor</code> - text strings</li>\n   <li><code>RadioGroupFieldEditor</code> - enumerations</li>\n   <li><code>ColorFieldEditor</code> - RGB colors</li>\n   <li><code>FontFieldEditor</code> - fonts</li>\n   <li><code>DirectoryFieldEditor</code> - directories</li>\n   <li><code>FileFieldEditor</code> - files</li>\n   <li><code>PathEditor</code> - paths</li>\n </ul>\n </p>\n"
1048,method,org/eclipse/jface/preference/FieldEditor/clearErrorMessage/," Clears the error message from the message line.\n"
1058,method,org/eclipse/jface/preference/FieldEditor/fillIntoGrid/Composite;int," Fills this field editor's basic controls into the given parent. \n\n @param parent the composite used as a parent for the basic controls;\n	the parent's layout must be a <code>GridLayout</code>\n @param numColumns the number of columns\n"
1083,method,org/eclipse/jface/preference/FieldEditor/setPropertyChangeListener/IPropertyChangeListener," Sets or removes the property change listener for this field editor.\n <p>\n Note that field editors can support only a single listener.\n </p>\n\n @param listener a property change listener, or <code>null</code>\n  to remove\n"
1084,method,org/eclipse/jface/preference/FieldEditor/showErrorMessage/String," Shows the given error message in the page for this\n field editor if it has one.\n\n @param msg the error message\n"
1088,method,org/eclipse/jface/preference/FieldEditor/setEnabled/boolean;Composite," Set whether or not the controls in the field editor\n are enabled.\n @param enabled The enabled state.\n @param parent The parent of the controls in the group.\n  Used to create the controls if required.\n"
1093,field,org/eclipse/jface/preference/FieldEditor/HORIZONTAL_GAP,"\n Gap between label and control.\n"
1111,class,org/eclipse/jface/preference/PreferenceConverter," A utility class for dealing with preferences whose values are\n common SWT objects (color, points, rectangles, and font data).\n The static methods on this class handle the conversion between\n the SWT objects and their string representations.\n <p>\n Usage:\n <pre>\n IPreferenceStore store = ...;\n PreferenceConverter.setValue(store, "bg", new RGB(127,127,127));\n ...\n RBG bgColor = PreferenceConverter.getValue(store, "bg");\n </pre>\n </p>\n <p>\n This class contains static methods and fields only and cannot \n be instantiated.\n </p>\n Note: touching this class has the side effect of creating a display (static initializer).\n @noinstantiate This class is not intended to be instantiated by clients.\n"
1124,method,org/eclipse/jface/preference/PreferenceConverter/setDefault/IPreferenceStore;String;FontData," Sets the default value of the preference with the given name\n in the given preference store. As FontDatas are stored as \n arrays this method is only provided for backwards compatibility.\n Use <code>setDefault(IPreferenceStore, String, FontData[])</code>\n instead.\n\n @param store the preference store\n @param name the name of the preference\n @param value the new default value of the preference\n"
1130,method,org/eclipse/jface/preference/PreferenceConverter/setValue/IPreferenceStore;String;FontData[]," Sets the current value of the preference with the given name\n in the given preference store. This method also sets the corresponding\n key in the JFace font registry to the value and fires a \n property change event to listeners on the preference store.\n \n <p>\n Note that this API does not update any other settings that may\n be dependant upon it. Only the value in the preference store \n and in the font registry is updated.\n </p> \n @param store the preference store\n @param name the name of the preference\n @param value the new current value of the preference\n \n @see #putValue(IPreferenceStore, String, FontData[])\n"
1132,method,org/eclipse/jface/preference/PreferenceConverter/getStoredRepresentation/FontData[]," Returns the stored representation of the given array of FontData objects.\n The stored representation has the form FontData;FontData;\n Only includes the non-null entries.\n \n @param fontData the array of FontData objects\n @return the stored representation of the FontData objects\n @since 3.0\n"
1144,field,org/eclipse/jface/preference/JFacePreferences/ERROR_COLOR," Identifier for the Error Color\n"
1154,method,org/eclipse/jface/preference/IPreferencePageContainer/updateButtons/," Adjusts the enable state of the OK \n button to reflect the state of the currently active \n page in this container.\n <p>\n This method is called by the container itself\n when its preference page changes and may be called\n by the page at other times to force a button state\n update.\n </p>\n"
1155,method,org/eclipse/jface/preference/IPreferencePageContainer/updateMessage/," Updates the message (or error message) shown in the message line to \n reflect the state of the currently active page in this container.\n <p>\n This method is called by the container itself\n when its preference page changes and may be called\n by the page at other times to force a message \n update.\n </p>\n"
1156,method,org/eclipse/jface/preference/IPreferencePageContainer/updateTitle/," Updates the title to reflect the state of the \n currently active page in this container.\n <p>\n This method is called by the container itself\n when its page changes and may be called\n by the page at other times to force a title  \n update.\n </p>\n"
1158,method,org/eclipse/jface/preference/ColorSelector/addListener/IPropertyChangeListener," Adds a property change listener to this <code>ColorSelector</code>.\n Events are fired when the color in the control changes via the user\n clicking an selecting a new one in the color dialog. No event is fired in\n the case where <code>setColorValue(RGB)</code> is invoked.\n \n @param listener\n            a property change listener\n @since 3.0\n"
1171,method,org/eclipse/jface/preference/BooleanFieldEditor/getDescriptionControl/Composite," Returns the control responsible for displaying this field editor's label.\n This method can be used to set a tooltip for a\n <code>BooleanFieldEditor</code>. Note that the normal pattern of\n <code>getLabelControl(parent).setToolTipText(tooltipText)</code> does not\n work for boolean field editors, as it can lead to duplicate text (see bug\n 259952).\n \n @param parent\n            the parent composite\n @return the control responsible for displaying the label\n \n @since 3.5\n"
1235,method,org/eclipse/jface/preference/ColorFieldEditor/computeImageSize/Control," Computes the size of the color image displayed on the button.\n <p>\n This is an internal method and should not be called by clients.\n </p>\n \n @param window\n            the window to create a GC on for calculation.\n @return Point The image size\n  \n"
1241,method,org/eclipse/jface/preference/ColorFieldEditor/getChangeControl/Composite," Returns the change button for this field editor.\n \n @param parent\n            The control to create the button in if required.\n @return the change button\n"
1257,method,org/eclipse/jface/preference/ComboFieldEditor/ComboFieldEditor/String;String;String[][];Composite," Create the combo box field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param entryNamesAndValues the names (labels) and underlying values to populate the combo widget.  These should be\n arranged as: { {name1, value1}, {name2, value2}, ...}\n @param parent the parent composite\n"
1258,class,org/eclipse/jface/preference/StringButtonFieldEditor," An abstract field editor for a string type preference that presents\n a string input field with a change button to its right to edit the\n input field's content. When the user presses the change button, the\n abstract framework method <code>changePressed()</code> gets called\n to compute a new string.\n"
1262,method,org/eclipse/jface/preference/StringButtonFieldEditor/getChangeControl/Composite," Get the change control. Create it in parent if required.\n @param parent\n @return Button\n"
1273,method,org/eclipse/jface/preference/FieldEditorPreferencePage/checkState/," Recomputes the page's error state by calling <code>isValid</code> for\n every field editor.\n"
1277,method,org/eclipse/jface/preference/FieldEditorPreferencePage/getFieldEditorParent/," Returns a parent composite for a field editor.\n <p>\n This value must not be cached since a new parent\n may be created each time this method called. Thus\n this method must be called each time a field editor\n is constructed.\n </p>\n\n @return a parent\n"
1280,method,org/eclipse/jface/preference/FieldEditorPreferencePage/performOk/,"\n The field editor preference page implementation of this \n <code>PreferencePage</code> method saves all field editors by\n calling <code>FieldEditor.store</code>. Note that this method\n does not save the preference store itself; it just stores the\n values back into the preference store.\n\n @see FieldEditor#store()\n"
1281,method,org/eclipse/jface/preference/FieldEditorPreferencePage/propertyChange/PropertyChangeEvent," The field editor preference page implementation of this <code>IPreferencePage</code>\n (and <code>IPropertyChangeListener</code>) method intercepts <code>IS_VALID</code> \n events but passes other events on to its superclass.\n"
1317,method,org/eclipse/jface/preference/PreferenceDialog/helpPressed/," Notifies of the pressing of the Help button.\n <p>\n The default implementation of this framework method calls\n <code>performHelp</code> on the currently active page.\n </p>\n"
1320,method,org/eclipse/jface/preference/PreferenceDialog/okPressed/," The preference dialog implementation of this <code>Dialog</code>\n framework method sends <code>performOk</code> to all pages of the\n preference dialog, then calls <code>handleSave</code> on this dialog to\n save any state, and then calls <code>close</code> to close this dialog.\n"
1322,method,org/eclipse/jface/preference/PreferenceDialog/setErrorMessage/String," Display the given error message. The currently displayed message is saved\n and will be redisplayed when the error message is set to\n <code>null</code>.\n \n @param newErrorMessage\n            the errorMessage to display or <code>null</code>\n"
1323,method,org/eclipse/jface/preference/PreferenceDialog/setMessage/String," Set the message text. If the message line currently displays an error,\n the message is stored and will be shown after a call to clearErrorMessage\n <p>\n Shortcut for <code>setMessage(newMessage, NONE)</code>\n </p>\n \n @param newMessage\n            the message, or <code>null</code> to clear the message\n"
1347,method,org/eclipse/jface/preference/PreferenceDialog/firePageChanged/PageChangedEvent," Notifies any selection changed listeners that the selected page\n has changed.\n Only listeners registered at the time this method is called are notified.\n\n @param event a selection changed event\n\n @see IPageChangedListener#pageChanged\n \n @since 3.1\n"
1350,field,org/eclipse/jface/preference/PreferenceDialog/PREF_DLG_IMG_TITLE_ERROR," Indentifier for the error image\n"
1360,method,org/eclipse/jface/preference/FontFieldEditor/getChangeControl/Composite," Returns the change button for this field editor.\n\n @param parent The Composite to create the button in if required.\n @return the change button\n"
1364,method,org/eclipse/jface/preference/FontFieldEditor/getValueControl/Composite," Returns the value control for this field editor. The value control\n displays the currently selected font name.\n @param parent The Composite to create the viewer in if required\n @return the value control\n"
1382,method,org/eclipse/jface/preference/IPreferenceNode/disposeResources/," Release the page managed by this node, and any SWT resources\n held onto by this node (Images, Fonts, etc).  \n\n Note that nodes are reused so this is not a call to dispose the\n node itself.\n"
1392,method,org/eclipse/jface/preference/PreferencePage/computeSize/," Computes the size for this page's UI control.\n <p>\n The default implementation of this <code>IPreferencePage</code>\n method returns the size set by <code>setSize</code>; if no size\n has been set, but the page has a UI control, the framework\n method <code>doComputeSize</code> is called to compute the size.\n </p>\n\n @return the size of the preference page encoded as\n   <code>new Point(width,height)</code>, or \n   <code>(0,0)</code> if the page doesn't currently have any UI component\n"
1402,method,org/eclipse/jface/preference/PreferencePage/isValid/,"\n The preference page implementation of an <code>IPreferencePage</code>\n method returns whether this preference page is valid. Preference\n pages are considered valid by default; call <code>setValid(false)</code>\n to make a page invalid.\n @see IPreferencePage#isValid()\n"
1405,method,org/eclipse/jface/preference/PreferencePage/performApply/," Performs special processing when this page's Apply button has been pressed.\n <p>\n This is a framework hook method for sublcasses to do special things when\n the Apply button has been pressed.\n The default implementation of this framework method simply calls\n <code>performOk</code> to simulate the pressing of the page's OK button.\n </p>\n \n @see #performOk\n"
1416,method,org/eclipse/jface/preference/PreferencePage/createNoteComposite/Font;Composite;String;String," Creates a composite with a highlighted Note entry and a message text.\n This is designed to take up the full width of the page.\n \n @param font the font to use\n @param composite the parent composite\n @param title the title of the note\n @param message the message for the note\n @return the composite for the note\n"
1444,method,org/eclipse/jface/preference/StringFieldEditor/getErrorMessage/," Returns the error message that will be displayed when and if \n an error occurs.\n\n @return the error message, or <code>null</code> if none\n"
1453,method,org/eclipse/jface/preference/StringFieldEditor/setErrorMessage/String," Sets the error message that will be displayed when and if \n an error occurs.\n\n @param message the error message\n"
1458,method,org/eclipse/jface/preference/StringFieldEditor/showErrorMessage/," Shows the error message set via <code>setErrorMessage</code>.\n"
1459,method,org/eclipse/jface/preference/StringFieldEditor/valueChanged/," Informs this field editor's listener, if it has one, about a change\n to the value (<code>VALUE</code> property) provided that the old and\n new values are different.\n <p>\n This hook is <em>not</em> called when the text is initialized \n (or reset to the default value) from the preference store.\n </p>\n"
1462,method,org/eclipse/jface/preference/StringFieldEditor/StringFieldEditor/String;String;int;int;Composite," Creates a string field editor.\n Use the method <code>setTextLimit</code> to limit the text.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param width the width of the text input field in characters,\n  or <code>UNLIMITED</code> for no limit\n @param strategy either <code>VALIDATE_ON_KEY_STROKE</code> to perform\n  on the fly checking (the default), or <code>VALIDATE_ON_FOCUS_LOST</code> to\n  perform validation only after the text has been typed in\n @param parent the parent of the field editor's control\n @since 2.0\n"
1465,field,org/eclipse/jface/preference/StringFieldEditor/VALIDATE_ON_KEY_STROKE," Validation strategy constant (value <code>0</code>) indicating that\n the editor should perform validation after every key stroke.\n\n @see #setValidateStrategy\n"
1466,field,org/eclipse/jface/preference/StringFieldEditor/VALIDATE_ON_FOCUS_LOST," Validation strategy constant (value <code>1</code>) indicating that\n the editor should perform validation only when the text widget \n loses focus.\n\n @see #setValidateStrategy\n"
1477,method,org/eclipse/jface/preference/FileFieldEditor/FileFieldEditor/String;String;boolean;Composite," Creates a file field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param enforceAbsolute <code>true</code> if the file path\n  must be absolute, and <code>false</code> otherwise\n @param parent the parent of the field editor's control\n"
1478,method,org/eclipse/jface/preference/FileFieldEditor/FileFieldEditor/String;String;boolean;int;Composite," Creates a file field editor.\n \n @param name the name of the preference this field editor works on\n @param labelText the label text of the field editor\n @param enforceAbsolute <code>true</code> if the file path\n  must be absolute, and <code>false</code> otherwise\n @param validationStrategy either {@link StringButtonFieldEditor#VALIDATE_ON_KEY_STROKE}\n  to perform on the fly checking, or {@link StringButtonFieldEditor#VALIDATE_ON_FOCUS_LOST}\n  (the default) to perform validation only after the text has been typed in\n @param parent the parent of the field editor's control.\n @since 3.4\n @see StringButtonFieldEditor#VALIDATE_ON_KEY_STROKE\n @see StringButtonFieldEditor#VALIDATE_ON_FOCUS_LOST\n"
1479,interface,org/eclipse/jface/preference/IPreferenceStore," The <code>IPreferenceStore</code> interface represents a table mapping\n named preferences to values. If there is no value for a given name, \n then that preferences's default value is returned; and if there is no\n default value for that preference, then a default-default value is returned.\n The default-default values for the primitive types are as follows:\n <ul>\n 	<li><code>boolean</code> = <code>false</code></li>\n 	<li><code>double</code> = <code>0.0</code></li>\n 	<li><code>float</code> = <code>0.0f</code></li>\n 	<li><code>int</code> = <code>0</code></li>\n  <li><code>long</code> = <code>0</code></li>\n 	<li><code>String</code> = <code>""</code> (the empty string)</li>\n </ul>\n <p>\n Thus a preference store maintains two values for each of a set of\n names: a current value and a default value.\n The typical usage is to establish the defaults for all known preferences\n and then restore previously stored values for preferences whose values \n were different from their defaults. After the current values of\n the preferences have been modified, it is a simple matter to write\n out only those preferences whose values are different from their defaults.\n This two-tiered approach to saving and restoring preference setting\n minimized the number of preferences that need to be persisted; indeed,\n the normal starting state does not require storing any preferences\n at all.\n </p>\n <p>\n A property change event is reported whenever a preferences current\n value actually changes (whether through <code>setValue</code>,\n <code>setToDefault</code>, or other unspecified means). Note, however,\n that manipulating default values (with <code>setDefault</code>)\n does not cause such events to be reported.\n </p>\n <p>\n Clients who need a preference store may implement this interface or \n instantiate the standard implementation <code>PreferenceStore</code>.\n </p>\n\n @see PreferenceStore\n"
1482,method,org/eclipse/jface/preference/IPreferenceStore/firePropertyChangeEvent/String;Object;Object," Fires a property change event corresponding to a change to the\n current value of the preference with the given name.\n <p>\n This method is provided on this interface to simplify the implementation \n of decorators. There is normally no need to call this method since\n <code>setValue</code> and <code>setToDefault</code> report such\n events in due course. Implementations should funnel all preference\n changes through this method.\n </p>\n\n @param name the name of the preference, to be used as the property\n  in the event object\n @param oldValue the old value\n @param newValue the new value\n"
1496,method,org/eclipse/jface/preference/IPreferenceStore/needsSaving/," Returns whether the current values in this property store\n require saving.\n\n @return <code>true</code> if at least one of values of \n  the preferences known to this store has changed and \n  requires saving, and <code>false</code> otherwise.\n"
1497,method,org/eclipse/jface/preference/IPreferenceStore/putValue/String;String," Sets the current value of the preference with the given name to\n the given string value without sending a property change.\n <p>\n This method does not fire a property change event and \n should only be used for setting internal preferences \n that are not meant to be processed by listeners.\n Normal clients should instead call #setValue.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
1499,method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;double," Sets the default value for the double-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
1500,method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;float," Sets the default value for the float-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
1501,method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;int," Sets the default value for the integer-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
1502,method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;long," Sets the default value for the long-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
1503,method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;String," Sets the default value for the string-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param defaultObject the new default value for the preference\n"
1504,method,org/eclipse/jface/preference/IPreferenceStore/setDefault/String;boolean," Sets the default value for the boolean-valued preference with the\n given name. \n <p>\n Note that the current value of the preference is affected if\n the preference's current value was its old default value, in which\n case it changes to the new default value. If the preference's current\n is different from its old default value, its current value is\n unaffected. No property change events are reported by changing default\n values.\n </p>\n\n @param name the name of the preference\n @param value the new default value for the preference\n"
1505,method,org/eclipse/jface/preference/IPreferenceStore/setToDefault/String," Sets the current value of the preference with the given name back\n to its default value.\n <p>\n Note that the preferred way of re-initializing a preference to the\n appropriate default value is to call <code>setToDefault</code>.\n This is implemented by removing the named value from the store, \n thereby exposing the default value.\n </p>\n\n @param name the name of the preference\n"
1506,method,org/eclipse/jface/preference/IPreferenceStore/setValue/String;double," Sets the current value of the double-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
1507,method,org/eclipse/jface/preference/IPreferenceStore/setValue/String;float," Sets the current value of the float-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
1510,method,org/eclipse/jface/preference/IPreferenceStore/setValue/String;String," Sets the current value of the string-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
1511,method,org/eclipse/jface/preference/IPreferenceStore/setValue/String;boolean," Sets the current value of the boolean-valued preference with the\n given name.\n <p>\n A property change event is reported if the current value of the \n preference actually changes from its previous value. In the event\n object, the property name is the name of the preference, and the\n old and new values are wrapped as objects.\n </p>\n <p>\n Note that the preferred way of re-initializing a preference to its\n default value is to call <code>setToDefault</code>.\n </p>\n\n @param name the name of the preference\n @param value the new current value of the preference\n"
1564,method,org/eclipse/jface/preference/PreferenceLabelProvider/getText/Object," @param element must be an instance of <code>IPreferenceNode</code>.\n @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)\n"
1565,method,org/eclipse/jface/preference/PreferenceLabelProvider/getImage/Object," @param element must be an instance of <code>IPreferenceNode</code>.\n @see org.eclipse.jface.viewers.ILabelProvider#getImage(java.lang.Object)\n"
1579,method,org/eclipse/jface/preference/PreferenceManager/getRoot/," Returns the root node.\n Note that the root node is a special internal node\n that is used to collect together all the nodes that\n have no parent; it is not given out to clients.\n\n @return the root node\n"
1590,method,org/eclipse/jface/wizard/IWizard/addPages/," Adds any last-minute pages to this wizard.\n <p>\n This method is called just before the wizard becomes visible, to give the \n wizard the opportunity to add any lazily created pages.\n </p>\n"
1592,method,org/eclipse/jface/wizard/IWizard/createPageControls/Composite," Creates this wizard's controls in the given parent control.\n <p>\n The wizard container calls this method to create the controls\n for the wizard's pages before the wizard is opened. This allows\n the wizard to size correctly; otherwise a resize may occur when\n moving to a new page.\n </p>\n\n @param pageContainer the parent control\n"
1596,method,org/eclipse/jface/wizard/IWizard/getDialogSettings/," Returns the dialog settings for this wizard.\n <p>\n The dialog store is used to record state between\n wizard invocations (for example, radio button selections,\n last directory, etc.).\n </p>\n\n @return the dialog settings, or <code>null</code> if none\n"
1597,method,org/eclipse/jface/wizard/IWizard/getNextPage/IWizardPage," Returns the successor of the given page.\n <p>\n This method is typically called by a wizard page\n </p>\n\n @param page the page\n @return the next page, or <code>null</code> if none\n"
1601,method,org/eclipse/jface/wizard/IWizard/getPreviousPage/IWizardPage," Returns the predecessor of the given page.\n <p>\n This method is typically called by a wizard page\n </p>\n\n @param page the page\n @return the previous page, or <code>null</code> if none\n"
1606,method,org/eclipse/jface/wizard/IWizard/needsPreviousAndNextButtons/," Returns whether this wizard needs Previous and Next buttons.\n <p>\n The result of this method is typically used by the container.\n </p>\n\n @return <code>true</code> if Previous and Next buttons are required,\n   and <code>false</code> if none are needed\n"
1607,method,org/eclipse/jface/wizard/IWizard/needsProgressMonitor/," Returns whether this wizard needs a progress monitor.\n <p>\n The result of this method is typically used by the container.\n </p>\n\n @return <code>true</code> if a progress monitor is required,\n   and <code>false</code> if none is needed\n"
1609,method,org/eclipse/jface/wizard/IWizard/performFinish/," Performs any actions appropriate in response to the user \n having pressed the Finish button, or refuse if finishing\n now is not permitted.\n\n Normally this method is only called on the container's\n current wizard. However if the current wizard is a nested wizard\n this method will also be called on all wizards in its parent chain.\n Such parents may use this notification to save state etc. However,\n the value the parents return from this method is ignored.\n\n @return <code>true</code> to indicate the finish request\n   was accepted, and <code>false</code> to indicate\n   that the finish request was refused\n"
1612,method,org/eclipse/jface/wizard/IWizardContainer2/updateSize/," Updates the window size to reflect the state of the current wizard.\n <p>\n This method is called by the container itself\n when its wizard changes and may be called\n by the wizard at other times to force a window \n size change.\n </p>\n"
1613,interface,org/eclipse/jface/wizard/IWizardContainer," Interface for containers that can host a wizard. It displays\n wizard pages, at most one of which is considered\n the current page. <code>getCurrentPage</code> returns the\n current page; <code>showPage</code> programmatically changes the\n the current page. Note that the pages need not all belong\n to the same wizard.\n <p>\n The class <code>WizardDialog</code> provides a fully functional \n implementation of this interface which will meet the needs of\n most clients. However, clients are also free to implement this \n interface if <code>WizardDialog</code> does not suit their needs.\n </p>\n <p>\n Implementors are responsible for disposing of their wizards.\n </p>\n \n @see org.eclipse.jface.wizard.IWizardContainer2\n"
1616,method,org/eclipse/jface/wizard/IWizardContainer/showPage/IWizardPage," Makes the given page visible.\n <p>\n This method should not be use for normal page\n sequencing (back, next) which is handled by the \n container itself. It may, however, be used to\n move to another page in response to some custom\n action such as double clicking in a list.\n </p>\n\n @param page the page to show\n @see #getCurrentPage\n"
1617,method,org/eclipse/jface/wizard/IWizardContainer/updateButtons/," Adjusts the enable state of the Back, Next, and Finish \n buttons to reflect the state of the currently active \n page in this container.\n <p>\n This method is called by the container itself\n when its wizard page changes and may be called\n by the page at other times to force a button state\n update.\n </p>\n"
1618,method,org/eclipse/jface/wizard/IWizardContainer/updateMessage/," Updates the message (or error message) shown in the message line to \n reflect the state of the currently active page in this container.\n <p>\n This method is called by the container itself\n when its wizard page changes and may be called\n by the page at other times to force a message \n update.\n </p>\n"
1619,method,org/eclipse/jface/wizard/IWizardContainer/updateTitleBar/," Updates the title bar (title, description, and image) to \n reflect the state of the currently active page in this container.\n <p>\n This method is called by the container itself\n when its wizard page changes and may be called\n by the page at other times to force a title bar \n update.\n </p>\n"
1620,method,org/eclipse/jface/wizard/IWizardContainer/updateWindowTitle/," Updates the window title to reflect the state of the current wizard.\n <p>\n This method is called by the container itself\n when its wizard changes and may be called\n by the wizard at other times to force a window \n title change.\n </p>\n"
1627,method,org/eclipse/jface/wizard/WizardDialog/createButtonsForButtonBar/Composite," Creates the buttons for this dialog's button bar.\n <p>\n The <code>WizardDialog</code> implementation of this framework method\n prevents the parent composite's columns from being made equal width in\n order to remove the margin between the Back and Next buttons.\n </p>\n \n @param parent\n            the parent composite to contain the buttons\n"
1630,method,org/eclipse/jface/wizard/WizardDialog/createContents/Composite," The <code>WizardDialog</code> implementation of this\n <code>Window</code> method calls call <code>IWizard.addPages</code>\n to allow the current wizard to add extra pages, then\n <code>super.createContents</code> to create the controls. It then calls\n <code>IWizard.createPageControls</code> to allow the wizard to\n pre-create their page controls prior to opening, so that the wizard opens\n to the correct size. And finally it shows the first page.\n"
1656,method,org/eclipse/jface/wizard/WizardDialog/firePageChanged/PageChangedEvent," Notifies any selection changed listeners that the selected page has\n changed. Only listeners registered at the time this method is called are\n notified.\n \n @param event\n            a selection changed event\n \n @see IPageChangedListener#pageChanged\n \n @since 3.1\n"
1659,method,org/eclipse/jface/wizard/WizardDialog/firePageChanging/PageChangingEvent," Notifies any page changing listeners that the currently selected dialog\n page is changing. Only listeners registered at the time this method is\n called are notified.\n \n @param event\n            a selection changing event\n \n @see IPageChangingListener#handlePageChanging(PageChangingEvent)\n @since 3.3\n"
1661,field,org/eclipse/jface/wizard/WizardDialog/WIZ_IMG_ERROR," Image registry key for error message image (value\n <code>"dialog_title_error_image"</code>).\n"
1662,class,org/eclipse/jface/wizard/WizardDialog/PageContainerFillLayout," A layout for a container which includes several pages, like a notebook,\n wizard, or preference dialog. The size computed by this layout is the\n maximum width and height of all pages currently inserted into the\n container.\n"
1674,method,org/eclipse/jface/wizard/IWizardNode/dispose/," Disposes the wizard managed by this node. Does nothing\n if the wizard has not been created.\n <p>\n This is the last message that should ever be sent to this node.\n </p>\n"
1675,method,org/eclipse/jface/wizard/IWizardNode/getExtent/," Returns the extent of the wizard for this node.\n <p>\n If the content has not yet been created, calling this method\n does not trigger the creation of the wizard. This allows\n this node to suggest an extent in advance of actually creating \n the wizard.\n </p>\n\n @return the extent, or <code>(-1, -1)</code> extent is not known\n"
1676,method,org/eclipse/jface/wizard/IWizardNode/getWizard/," Returns the wizard this node stands for.\n <p>\n If the content has not been created beforehand, calling this\n method triggers the creation of the wizard and caches it so that\n the identical wizard object is returned on subsequent calls.\n </p>\n\n @return the wizard\n"
1678,class,org/eclipse/jface/wizard/WizardSelectionPage," An abstract implementation of a wizard page that manages a\n set of embedded wizards.\n <p>\n A wizard selection page should present a list of wizard nodes \n corresponding to other wizards. When the end user selects one of\n them from the list, the first page of the selected wizard becomes\n the next page. The only new methods introduced by this class are \n <code>getSelectedNode</code> and <code>setSelectedNode</code>. \n Otherwise, the subclass contract is the same as <code>WizardPage</code>.\n </p>\n"
1685,class,org/eclipse/jface/wizard/ProgressMonitorPart," A standard implementation of an IProgressMonitor. It consists\n of a label displaying the task and subtask name, and a\n progress indicator to show progress. In contrast to\n <code>ProgressMonitorDialog</code> this class only implements\n <code>IProgressMonitor</code>.\n"
1719,method,org/eclipse/jface/wizard/IWizardPage/setPreviousPage/IWizardPage," Sets the wizard page that would typically be shown \n if the user was to press the Back button.\n <p>\n This method is called by the container.\n </p>\n\n @param page the previous wizard page\n"
1745,method,org/eclipse/jface/wizard/Wizard/setDefaultPageImageDescriptor/ImageDescriptor," Sets the default page image descriptor for this wizard.\n <p>\n This image descriptor will be used to generate an image for a page with\n no image of its own; the image will be computed once and cached.\n </p>\n \n @param imageDescriptor\n            the default page image descriptor\n"
1746,method,org/eclipse/jface/wizard/Wizard/setDialogSettings/IDialogSettings," Sets the dialog settings for this wizard.\n <p>\n The dialog settings is used to record state between wizard invocations\n (for example, radio button selection, last import directory, etc.)\n </p>\n \n @param settings\n            the dialog settings, or <code>null</code> if none\n @see #getDialogSettings\n  \n"
1747,method,org/eclipse/jface/wizard/Wizard/setForcePreviousAndNextButtons/boolean," Controls whether the wizard needs Previous and Next buttons even if it\n currently contains only one page.\n <p>\n This flag should be set on wizards where the first wizard page adds\n follow-on wizard pages based on user input.\n </p>\n \n @param b\n            <code>true</code> to always show Next and Previous buttons,\n            and <code>false</code> to suppress Next and Previous buttons\n            for single page wizards\n"
1749,method,org/eclipse/jface/wizard/Wizard/setNeedsProgressMonitor/boolean," Sets whether this wizard needs a progress monitor.\n \n @param b\n            <code>true</code> if a progress monitor is required, and\n            <code>false</code> if none is needed\n @see #needsProgressMonitor()\n"
1762,method,org/eclipse/jface/wizard/WizardPage/getShell/," The <code>WizardPage</code> implementation of this method declared on\n <code>DialogPage</code> returns the shell of the container.\n The advantage of this implementation is that the shell is accessable\n once the container is created even though this page's control may not \n yet be created.\n"
1782,method,org/eclipse/jface/internal/text/SelectionProcessor/isEmpty/ISelection," Returns <code>true</code> if the text covered by <code>selection</code> does not contain any\n characters. Note the difference to {@link ITextSelection#isEmpty()}, which returns\n <code>true</code> only for invalid selections.\n \n @param selection the selection\n @return <code>true</code> if <code>selection</code> does not contain any text,\n         <code>false</code> otherwise\n @throws BadLocationException if accessing the document failed\n"
1783,method,org/eclipse/jface/internal/text/SelectionProcessor/isMultiline/ISelection," Returns <code>true</code> if <code>selection</code> extends to two or more lines,\n <code>false</code> otherwise.\n \n @param selection the selection\n @return <code>true</code> if <code>selection</code> extends to two or more lines,\n         <code>false</code> otherwise\n @throws BadLocationException if <code>selection</code> is not valid regarding the target\n             document\n"
1788,method,org/eclipse/jface/internal/text/SelectionProcessor/getCoveredLines/ISelection," Returns the number of lines touched by <code>selection</code>. Note that for linear\n selections, this is the number of contained delimiters plus 1.\n \n @param selection the selection\n @return the number of lines touched by <code>selection</code>\n @throws BadLocationException if accessing the document failed\n"
1792,method,org/eclipse/jface/internal/text/ResizableShellSupport/makeResizable/Shell," Makes the given shell resizable on all platforms. The shell must have a {@link GridLayout}.\n If the shell is not resizable, this method enlarges the {@link GridLayout#marginWidth\n marginWidth} and {@link GridLayout#marginHeight marginHeight} and expects that the added area\n is not being shrunken or used in any way by other parties.\n \n @param shell the shell\n"
1794,class,org/eclipse/jface/internal/text/NonDeletingPositionUpdater," A position updater that never deletes a position. If the region containing\n the position is deleted, the position is moved to the beginning/end (falling\n together) of the change. If the region containing the position is replaced,\n the position is placed at the same location inside the replacement text, but\n always inside the replacement text.\n\n @since 3.1\n"
1804,method,org/eclipse/jface/internal/text/DelayedInputChangeListener/DelayedInputChangeListener/IDelayedInputChangeProvider;InformationControlReplacer," Creates a new listener.\n\n @param changeProvider the information control with delayed input changes\n @param informationControlReplacer the information control replacer, whose information control should get the new input\n"
1805,class,org/eclipse/jface/internal/text/InformationControlReplacer," An information control replacer can replace an {@link AbstractInformationControlManager}'s\n control.\n <p>\n The {@link AbstractInformationControlManager} can be configured with such a replacer by calling\n <code>setInformationControlReplacer</code>.\n </p>\n\n @since 3.4\n"
1806,method,org/eclipse/jface/internal/text/InformationControlReplacer/replaceInformationControl/IInformationControlCreator;Rectangle;Object;Rectangle;boolean," Replace the information control.\n\n @param informationPresenterControlCreator the information presenter control creator\n @param contentBounds the bounds of the content area of the information control\n @param information the information to show\n @param subjectArea the subject area\n @param takeFocus <code>true</code> iff the replacing information control should take focus\n"
1818,class,org/eclipse/jface/internal/text/StickyHoverManager," Implements a sticky hover control, i.e. a control that replaces a hover\n with an enriched and focusable control.\n <p>\n The information control is made visible on request by calling\n {@link #showInformationControl(Rectangle)}.\n </p>\n <p>\n Clients usually instantiate and configure this class before using it. The configuration\n must be consistent: This means the used {@link org.eclipse.jface.text.IInformationControlCreator}\n must create an information control expecting information in the same format the configured\n {@link org.eclipse.jface.text.information.IInformationProvider}s use to encode the information they provide.\n </p>\n\n @since 3.4\n"
1826,class,org/eclipse/jface/internal/text/InternalAccessor," An internal class that gives access to internal methods of {@link\n AbstractInformationControlManager} and subclasses.\n\n @since 3.4\n"
1828,method,org/eclipse/jface/internal/text/InternalAccessor/setInformationControlReplacer/InformationControlReplacer," Sets the information control replacer for this manager and disposes the\n old one if set.\n\n @param replacer the information control replacer for this manager, or\n            <code>null</code> if no information control replacing should\n            take place\n"
1833,method,org/eclipse/jface/internal/text/InternalAccessor/setHoverEnrichMode/EnrichMode," Sets the hover enrich mode. Only applicable when an information\n control replacer has been set with\n {@link #setInformationControlReplacer(InformationControlReplacer)} .\n\n @param mode the enrich mode\n @see ITextViewerExtension8#setHoverEnrichMode(org.eclipse.jface.text.ITextViewerExtension8.EnrichMode)\n"
1835,method,org/eclipse/jface/internal/text/InternalAccessor/replaceInformationControl/boolean," Replaces this manager's information control as defined by\n the information control replacer.\n <strong>Must only be called when the information control is instanceof {@link IInformationControlExtension3}!</strong>\n\n @param takeFocus <code>true</code> iff the replacing information control should take focus\n"
1837,class,org/eclipse/jface/internal/text/revisions/ChangeRegion," A change region describes a contiguous range of lines that was changed in the same revision of a\n document. Once it is adjusted to diff information, the originally contiguous range may be split\n into several ranges or even be empty.\n\n @since 3.2\n"
1839,method,org/eclipse/jface/internal/text/revisions/ChangeRegion/getOriginalRange/," Returns the original (before applying diff information) line range of this change region.\n\n @return the original (before applying diff information) line range of this change region\n"
1846,class,org/eclipse/jface/internal/text/revisions/RevisionSelectionProvider," A selection provider for annotate revisions. Selections of a revision can currently happen in\n following ways - note that this list may be changed in the future:\n <ul>\n <li>when the user clicks the revision ruler with the mouse</li>\n <li>when the caret is moved to a revision's line (only on post-selection)</li>\n </ul>\n <p>\n Calling {@link #setSelection(ISelection)} will set the current sticky revision on the ruler.\n </p>\n\n @since 3.2\n"
1861,method,org/eclipse/jface/internal/text/revisions/RevisionPainter/setParentRuler/CompositeRuler," Sets the parent ruler - the delegating column must call this method as soon as it creates its\n control.\n\n @param parentRuler the parent ruler\n"
1862,method,org/eclipse/jface/internal/text/revisions/RevisionPainter/paint/GC;ILineRange," Delegates the painting of the quick diff colors to this painter. The painter will draw the\n color boxes onto the passed {@link GC} for all model (document) lines in\n <code>visibleModelLines</code>.\n\n @param gc the {@link GC} to draw onto\n @param visibleLines the lines (in document offsets) that are currently (perhaps only\n        partially) visible\n"
1869,method,org/eclipse/jface/internal/text/revisions/RevisionPainter/getRequiredWidth/," Returns the width in chars required to display information.\n\n @return the width in chars required to display information\n @since 3.3\n"
1878,method,org/eclipse/jface/internal/text/revisions/Range/createRelative/int;int," Creates a new range with the given start offset and length.\n\n @param start the first line of the new range, must be &gt;= 0\n @param length the number of lines included in the new range, must be &gt; 0\n @return a <code>Range</code> with the given start and length\n @throws LineIndexOutOfBoundsException if the parameters violate the invariant of\n         {@link Range}\n"
1879,method,org/eclipse/jface/internal/text/revisions/Range/createAbsolute/int;int," Creates a new range with the given start and end offsets.\n\n @param start the first line of the new range, must be &gt;= 0\n @param end the first line not in the range any more (exclusive), must be &gt; <code>start</code>\n @return a <code>Range</code> with the given start and end offsets\n @throws LineIndexOutOfBoundsException if the parameters violate the invariant of\n         {@link Range}\n"
1884,method,org/eclipse/jface/internal/text/revisions/Range/end/," Returns the first line after this range. Equivalent to {@linkplain #start() start} + {@linkplain #length() length}.\n\n @return the first line after this range\n"
1885,method,org/eclipse/jface/internal/text/revisions/Range/moveTo/int," Moves the receiver to <code>start</code>, keeping {@link #length()} constant.\n\n @param start the new start, must be &gt;= 0\n @throws LineIndexOutOfBoundsException if <code>start</code> &lt; 0\n"
1887,method,org/eclipse/jface/internal/text/revisions/Range/moveBy/int," Moves the range by <code>delta</code> lines, keeping {@link #length()} constant. The\n resulting start line must be &gt;= 0.\n\n @param delta the number of lines to shift the range\n @throws LineIndexOutOfBoundsException if <code>-delta</code> &gt; {@link #start()}\n"
1888,method,org/eclipse/jface/internal/text/revisions/Range/setStart/int," Moves the start offset to <code>start</code>, keeping {@link #end()} constant.\n\n @param start the new start, must be &gt;= 0 and &lt; {@link #end()}\n @throws LineIndexOutOfBoundsException if <code>start</code> &lt; 0 or &gt;= {@link #end()}\n"
1889,method,org/eclipse/jface/internal/text/revisions/Range/setEnd/int," Sets the end of this range, keeping {@link #start()} constant.\n\n @param end the new end, must be &gt; {@link #start()}\n @throws LineIndexOutOfBoundsException if <code>end</code> &lt;= {@link #start()}\n"
1891,method,org/eclipse/jface/internal/text/revisions/Range/setLengthAndMove/int," Sets the length of this range, keeping {@link #end()} constant.\n\n @param length the new length, must be &gt; 0 and &lt;= {@link #end()}\n @throws LineIndexOutOfBoundsException if <code>length</code> &lt;= 0\n"
1894,method,org/eclipse/jface/internal/text/revisions/Range/split/int," Splits a range off the end of the receiver. The receiver is shortened to only include\n <code>remaining</code> lines after the split.\n\n @param remaining the number of lines to remain in the receiver, must be in [1, {@link #length() length})\n @return the split off range\n @throws LineIndexOutOfBoundsException if <code>remaining</code>&gt;= {@link #length()} or <code>remaining</code>&ltt;= 0\n"
1898,method,org/eclipse/jface/internal/text/revisions/Colors/brightness/RGB," Returns the human-perceived brightness of a color as float in [0.0, 1.0]. The used RGB\n weights come from http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC9.\n\n @param rgb the color\n @return the gray-scale value\n"
1899,method,org/eclipse/jface/internal/text/revisions/Colors/adjustBrightness/RGB;float," Normalizes a color in its perceived brightness. Yellows are darkened, while blues and reds\n are lightened. Depending on the hue, the brightness range within the RGB gamut may be\n different, outside values are clipped. Note that this is an approximation; the returned RGB\n is not guaranteed to have the requested {@link #brightness(RGB) brightness}.\n\n @param color the color to normalize\n @param brightness the requested brightness, in [0,&nbsp;1]\n @return a normalized version of <code>color</code>\n @see #brightness(RGB)\n"
1900,method,org/eclipse/jface/internal/text/revisions/Colors/blend/RGB;RGB;float," Returns an RGB that lies between the given foreground and background\n colors using the given mixing factor. A <code>factor</code> of 1.0 will produce a\n color equal to <code>fg</code>, while a <code>factor</code> of 0.0 will produce one\n equal to <code>bg</code>.\n @param bg the background color\n @param fg the foreground color\n @param factor the mixing factor, must be in [0,&nbsp;1]\n\n @return the interpolated color\n"
1902,method,org/eclipse/jface/internal/text/revisions/Colors/rainbow/int," Returns an array of colors with hues evenly distributed on the hue wheel defined by the <a\n href="http://en.wikipedia.org/wiki/HSV_color_space">HSB color space</a>. The returned array\n has size <code>steps</code>. The distance <var>d</var> between two successive colors is\n in [120&#176;,&nbsp;180&#176;].\n <p>\n The color at a given <code>index</code> has the hue returned by\n {@linkplain #computeHue(int) computeHue(index)}; i.e. the computed hues are not equidistant,\n but adaptively distributed on the color wheel.\n </p>\n <p>\n The first six colors returned correspond to the following {@link SWT} color constants:\n {@link SWT#COLOR_RED red}, {@link SWT#COLOR_GREEN green}, {@link SWT#COLOR_BLUE blue},\n {@link SWT#COLOR_YELLOW yellow}, {@link SWT#COLOR_CYAN cyan},\n {@link SWT#COLOR_MAGENTA magenta}.\n </p>\n\n @param steps the requested size, must be &gt;= 2\n @return an array of <code>steps</code> colors evenly distributed on the color wheel\n"
1908,method,org/eclipse/jface/internal/text/revisions/Hunk/Hunk/int;int;int," Creates a new hunk.\n\n @param line the line at which the hunk starts, must be &gt;= 0\n @param delta the difference in lines compared to the original\n @param changed the number of changed lines in this hunk, must be &gt;= 0\n"
1911,field,org/eclipse/jface/internal/text/revisions/Hunk/changed,"The number of changed lines in this hunk, must be &gt;= 0. "
1914,method,org/eclipse/jface/internal/text/link/contentassist/LineBreakingReader/readLine/," Reads the next line. The lengths of the line will not exceed the given maximum width.\n\n @return the next line\n @throws IOException if an I/O error occurs\n"
1924,method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/enableAutoInsert/boolean," Enables the content assistant's auto insertion mode. If enabled,\n the content assistant inserts a proposal automatically if it is\n the only proposal. In the case of ambiguities, the user must\n make the choice.\n\n @param enabled indicates whether auto insertion is enabled or not\n @since 2.0\n"
1925,method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/setAutoActivationDelay/int," Sets the delay after which the content assistant is automatically invoked\n if the cursor is behind an auto activation character.\n\n @param delay the auto activation delay\n"
1926,method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/setProposalPopupOrientation/int," Sets the proposal pop-ups' orientation.\n The following values may be used:\n <ul>\n   <li>PROPOSAL_OVERLAY<p>\n     proposal popup windows should overlay each other\n   </li>\n   <li>PROPOSAL_REMOVE<p>\n     any currently shown proposal popup should be closed\n   </li>\n   <li>PROPOSAL_STACKED<p>\n     proposal popup windows should be vertical stacked, with no overlap,\n     beneath the line containing the current cursor location\n   </li>\n </ul>\n\n @param orientation the popup's orientation\n"
1927,method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/setContextInformationPopupOrientation/int," Sets the context information popup's orientation.\n The following values may be used:\n <ul>\n   <li>CONTEXT_ABOVE<p>\n     context information popup should always appear above the line containing\n     the current cursor location\n   </li>\n   <li>CONTEXT_BELOW<p>\n     context information popup should always appear below the line containing\n     the current cursor location\n   </li>\n </ul>\n\n @param orientation the popup's orientation\n"
1932,method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/setInformationControlCreator/IInformationControlCreator," Sets the information control creator for the additional information control.\n\n @param creator the information control creator for the additional information control\n @since 2.0\n"
1938,method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/possibleCompletionsClosed/," Callback to signal this content assistant that the presentation of the possible completions has been stopped.\n @since 2.1\n"
1940,method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/contextInformationClosed/," Callback to signal this content assistant that the presentation of the context information has been stopped.\n @since 2.1\n"
1954,method,org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/ContentAssistant2/," Creates a new content assistant. The content assistant is not automatically activated,\n overlays the completion proposals with context information list if necessary, and\n shows the context information above the location at which it was activated. If auto\n activation will be enabled, without further configuration steps, this content assistant\n is activated after a 500 ms delay. It uses the default partitioning.\n"
1987,method,org/eclipse/jface/internal/text/html/BrowserInformationControl/setInformation/String," {@inheritDoc}\n @deprecated use {@link #setInput(Object)}\n"
1988,method,org/eclipse/jface/internal/text/html/BrowserInformationControl/setInput/Object," {@inheritDoc} This control can handle {@link String} and\n {@link BrowserInformationControlInput}.\n"
2006,method,org/eclipse/jface/internal/text/html/BrowserInformationControl/BrowserInformationControl/Shell;String;boolean," Creates a browser information control with the given shell as parent.\n\n @param parent the parent shell\n @param symbolicFontName the symbolic name of the font used for size computations\n @param resizable <code>true</code> if the control should be resizable\n @since 3.4\n"
2007,method,org/eclipse/jface/internal/text/html/BrowserInformationControl/BrowserInformationControl/Shell;String;String," Creates a browser information control with the given shell as parent.\n\n @param parent the parent shell\n @param symbolicFontName the symbolic name of the font used for size computations\n @param statusFieldText the text to be used in the optional status field\n            or <code>null</code> if the status field should be hidden\n @since 3.4\n"
2015,class,org/eclipse/jface/internal/text/html/SubstitutionTextReader," Reads the text contents from a reader and computes for each character\n a potential substitution. The substitution may eat more characters than\n only the one passed into the computation routine.\n <p>\n Moved into this package from <code>org.eclipse.jface.internal.text.revisions</code>.</p>\n"
2016,method,org/eclipse/jface/internal/text/html/SubstitutionTextReader/computeSubstitution/int," Computes the substitution for the given character and if necessary\n subsequent characters. Implementation should use <code>nextChar</code>\n to read subsequent characters.\n\n @param c the character to be substituted\n @return the substitution for <code>c</code>\n @throws IOException in case computing the substitution fails\n"
2040,method,org/eclipse/jface/internal/text/html/HTMLTextPresenter/updatePresentation/Display;String;TextPresentation;int;int," {@inheritDoc}\n\n @see org.eclipse.jface.text.DefaultInformationControl.IInformationPresenter#updatePresentation(org.eclipse.swt.widgets.Display,\n      java.lang.String, org.eclipse.jface.text.TextPresentation, int, int)\n @deprecated Use {@link #updatePresentation(Drawable, String, TextPresentation, int, int)}\n             instead\n"
2044,class,org/eclipse/jface/internal/text/source/DiffPainter," A strategy for painting the quick diff colors onto the vertical ruler column. It also manages the\n quick diff hover.\n\n @since 3.2\n"
2045,method,org/eclipse/jface/internal/text/source/DiffPainter/setParentRuler/CompositeRuler," Sets the parent ruler - the delegating column must call this method as soon as it creates its\n control.\n\n @param parentRuler the parent ruler\n"
2046,method,org/eclipse/jface/internal/text/source/DiffPainter/setHover/IAnnotationHover," Sets the quick diff hover later returned by {@link #getHover()}.\n\n @param hover the hover\n"
2047,method,org/eclipse/jface/internal/text/source/DiffPainter/getHover/," Returns the quick diff hover set by {@link #setHover(IAnnotationHover)}.\n\n @return the quick diff hover set by {@link #setHover(IAnnotationHover)}\n"
2049,method,org/eclipse/jface/internal/text/source/DiffPainter/paint/GC;ILineRange," Delegates the painting of the quick diff colors to this painter. The painter will draw the\n color boxes onto the passed {@link GC} for all model (document) lines in\n <code>visibleModelLines</code>.\n\n @param gc the {@link GC} to draw onto\n @param visibleModelLines the lines (in document offsets) that are currently (perhaps only\n        partially) visible\n"
2057,method,org/eclipse/jface/internal/text/source/DiffPainter/DiffPainter/IVerticalRulerColumn;ISharedTextColors," Creates a new diff painter for a vertical ruler column.\n\n @param column the column that will delegate{@link #paint(GC, ILineRange) painting} to the\n        newly created painter.\n @param sharedColors a shared colors object to store shaded colors in, may be\n        <code>null</code>\n"
2064,method,org/eclipse/jface/bindings/BindingManagerEvent/isActiveBindingsChangedFor/ParameterizedCommand," Computes whether the active bindings have changed for a given command\n identifier.\n \n @param parameterizedCommand\n            The fully-parameterized command whose bindings might have\n            changed; must not be <code>null</code>.\n @return <code>true</code> if the active bindings have changed for the\n         given command identifier; <code>false</code> otherwise.\n"
2070,method,org/eclipse/jface/bindings/BindingManagerEvent/BindingManagerEvent/BindingManager;boolean;Map;boolean;Scheme;boolean;boolean;boolean," Creates a new instance of this class.\n \n @param manager\n            the instance of the binding manager that changed; must not be\n            <code>null</code>.\n @param activeBindingsChanged\n            Whether the active bindings have changed.\n @param previousTriggersByParameterizedCommand\n            The map of triggers (<code>TriggerSequence</code>) by\n            fully-parameterized command (<code>ParameterizedCommand</code>)\n            before the change occured. This map may be <code>null</code>\n            or empty.\n @param activeSchemeChanged\n            true, iff the active scheme changed.\n @param scheme\n            The scheme that became defined or undefined; <code>null</code>\n            if no scheme changed state.\n @param schemeDefined\n            <code>true</code> if the given scheme became defined;\n            <code>false</code> otherwise.\n @param localeChanged\n            <code>true</code> iff the active locale changed\n @param platformChanged\n            <code>true</code> iff the active platform changed\n"
2071,class,org/eclipse/jface/bindings/TriggerSequence," <p>\n A sequence of one or more triggers. None of these triggers may be\n <code>null</code>.\n </p>\n \n @since 3.1\n"
2072,method,org/eclipse/jface/bindings/TriggerSequence/endsWith/TriggerSequence;boolean," Returns whether or not this key sequence ends with the given key\n sequence.\n \n @param triggerSequence\n            a trigger sequence. Must not be <code>null</code>.\n @param equals\n            whether or not an identical trigger sequence should be\n            considered as a possible match.\n @return <code>true</code>, iff the given trigger sequence ends with\n         this trigger sequence.\n"
2074,method,org/eclipse/jface/bindings/TriggerSequence/format/," Formats this trigger sequence into the current default look.\n \n @return A string representation for this trigger sequence using the\n         default look; never <code>null</code>.\n"
2075,method,org/eclipse/jface/bindings/TriggerSequence/getPrefixes/," <p>\n Returns a list of prefixes for the current sequence. A prefix is any\n leading subsequence in a <code>TriggerSequence</code>. A prefix is\n also an instance of <code>TriggerSequence</code>.\n </p>\n <p>\n For example, consider a trigger sequence that consists of four triggers:\n A, B, C and D. The prefixes would be "", "A", "A B", and "A B C". The\n list of prefixes must always be the same as the size of the trigger list.\n </p>\n \n @return The array of possible prefixes for this sequence. This array must\n         not be <code>null</code>, but may be empty. It must only\n         contains instances of <code>TriggerSequence</code>.\n"
2076,method,org/eclipse/jface/bindings/TriggerSequence/getTriggers/," Returns the list of triggers.\n \n @return The triggers; never <code>null</code> and guaranteed to only\n         contain instances of <code>Trigger</code>.\n"
2080,method,org/eclipse/jface/bindings/TriggerSequence/TriggerSequence/Trigger[]," Constructs a new instance of <code>TriggerSequence</code>.\n \n @param triggers\n            The triggers contained within this sequence; must not be\n            <code>null</code> or contain <code>null</code> elements.\n            May be empty.\n"
2082,field,org/eclipse/jface/bindings/TriggerSequence/triggers," The list of trigger in this sequence. This value is never\n <code>null</code>, and never contains <code>null</code> elements.\n"
2086,method,org/eclipse/jface/bindings/SchemeEvent/SchemeEvent/Scheme;boolean;boolean;boolean;boolean," Creates a new instance of this class.\n \n @param scheme\n            the instance of the interface that changed; must not be\n            <code>null</code>.\n @param definedChanged\n            true, iff the defined property changed.\n @param nameChanged\n            true, iff the name property changed.\n @param descriptionChanged\n            <code>true</code> if the description property changed;\n            <code>false</code> otherwise.\n @param parentIdChanged\n            true, iff the parentId property changed.\n"
2090,method,org/eclipse/jface/bindings/Scheme/define/String;String;String," <p>\n Defines this scheme by giving it a name, and possibly a description and a\n parent identifier as well. The defined property for the scheme automatically \n becomes <code>true</code>.\n </p>\n <p>\n Notification is sent to all listeners that something has changed.\n </p>\n \n @param name\n            The name of this scheme; must not be <code>null</code>.\n @param description\n            The description for this scheme; may be <code>null</code>.\n @param parentId\n            The parent identifier for this scheme; may be\n            <code>null</code>.\n"
2091,method,org/eclipse/jface/bindings/Scheme/getParentId/," <p>\n Returns the identifier of the parent of the scheme represented by this\n handle.\n </p>\n <p>\n Notification is sent to all registered listeners if this attribute\n changes.\n </p>\n \n @return the identifier of the parent of the scheme represented by this\n         handle. May be <code>null</code>.\n @throws NotDefinedException\n             if the scheme represented by this handle is not defined.\n"
2092,method,org/eclipse/jface/bindings/Scheme/removeSchemeListener/ISchemeListener," Unregisters an instance of <code>ISchemeListener</code> listening for\n changes to attributes of this instance.\n \n @param schemeListener\n            the instance of <code>ISchemeListener</code> to unregister.\n            Must not be <code>null</code>. If an attempt is made to\n            unregister an instance of <code>ISchemeListener</code> which\n            is not already registered with this instance, no operation is\n            performed.\n"
2095,class,org/eclipse/jface/bindings/Trigger," <p>\n The abstract class for any object that can be used as a trigger for a binding. \n This ensures that trigger conform to certain minimum requirements. Namely, triggers \n need to be hashable.\n </p>\n \n @since 3.1\n"
2096,method,org/eclipse/jface/bindings/Trigger/equals/Object," Tests whether this object is equal to another object. A handle object is\n only equal to another trigger with the same properties.\n \n @param object\n            The object with which to compare; may be <code>null</code>.\n @return <code>true</code> if the objects are equal; <code>false</code>\n         otherwise.\n"
2099,class,org/eclipse/jface/bindings/BindingManager," <p>\n A central repository for bindings -- both in the defined and undefined\n states. Schemes and bindings can be created and retrieved using this manager.\n It is possible to listen to changes in the collection of schemes and bindings\n by adding a listener to the manager.\n </p>\n <p>\n The binding manager is very sensitive to performance. Misusing the manager\n can render an application unenjoyable to use. As such, each of the public\n methods states the current run-time performance. In future releases, it is\n guaranteed that the method will run in at least the stated time constraint --\n though it might get faster. Where possible, we have also tried to be memory\n efficient.\n </p>\n \n @since 3.1\n"
2100,method,org/eclipse/jface/bindings/BindingManager/addBinding/Binding," <p>\n Adds a single new binding to the existing array of bindings. If the array\n is currently <code>null</code>, then a new array is created and this\n binding is added to it. This method does not detect duplicates.\n </p>\n <p>\n This method completes in amortized <code>O(1)</code>.\n </p>\n \n @param binding\n            The binding to be added; must not be <code>null</code>.\n"
2101,method,org/eclipse/jface/bindings/BindingManager/addBindingManagerListener/IBindingManagerListener," <p>\n Adds a listener to this binding manager. The listener will be notified\n when the set of defined schemes or bindings changes. This can be used to\n track the global appearance and disappearance of bindings.\n </p>\n <p>\n This method completes in amortized constant time (<code>O(1)</code>).\n </p>\n \n @param listener\n            The listener to attach; must not be <code>null</code>.\n"
2102,method,org/eclipse/jface/bindings/BindingManager/contextManagerChanged/ContextManagerEvent," <p>\n Notifies this manager that the context manager has changed. This method\n is intended for internal use only.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n"
2103,method,org/eclipse/jface/bindings/BindingManager/getActiveBindingsDisregardingContext/," <p>\n Computes the bindings for the current state of the application, but\n disregarding the current contexts. This can be useful when trying to\n display all the possible bindings.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the number of bindings.\n </p>\n \n @return A map of trigger (<code>TriggerSequence</code>) to bindings (\n         <code>Collection</code> containing <code>Binding</code>).\n         This map may be empty, but it is never <code>null</code>.\n"
2105,method,org/eclipse/jface/bindings/BindingManager/getActiveBindingsDisregardingContextFor/ParameterizedCommand," <p>\n Returns the active bindings for a particular command identifier, but\n discounting the current contexts. This method operates in O(n) time over\n the number of bindings.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the active bindings are\n not yet computed, then this completes in <code>O(nn)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param parameterizedCommand\n            The fully-parameterized command whose bindings are requested.\n            This argument may be <code>null</code>.\n @return The array of active triggers (<code>TriggerSequence</code>)\n         for a particular command identifier. This value is guaranteed to\n         never be <code>null</code>, but it may be empty.\n @since 3.2\n"
2107,method,org/eclipse/jface/bindings/BindingManager/getActiveScheme/," <p>\n Gets the currently active scheme.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The active scheme; may be <code>null</code> if there is no\n         active scheme. If a scheme is returned, it is guaranteed to be\n         defined.\n"
2108,method,org/eclipse/jface/bindings/BindingManager/getBestActiveBindingFor/String," Gets the best active binding for a command. The best binding is the one\n that would be most appropriate to show in a menu. Bindings which belong\n to a child scheme are given preference over those in a parent scheme.\n Bindings which belong to a particular locale or platform are given\n preference over those that do not. The rest of the calculaton is based\n most on various concepts of "length", as well as giving some modifier\n keys preference (e.g., <code>Alt</code> is less likely to appear than\n <code>Ctrl</code>).\n \n @param commandId\n            The identifier of the command for which the best active\n            binding should be retrieved; must not be <code>null</code>.\n @return The trigger sequence for the best binding; may be\n         <code>null</code> if no bindings are active for the given\n         command.\n @since 3.2\n"
2110,method,org/eclipse/jface/bindings/BindingManager/getBestActiveBindingFormattedFor/String," Gets the formatted string representing the best active binding for a\n command. The best binding is the one that would be most appropriate to\n show in a menu. Bindings which belong to a child scheme are given\n preference over those in a parent scheme. The rest of the calculaton is\n based most on various concepts of "length", as well as giving some\n modifier keys preference (e.g., <code>Alt</code> is less likely to\n appear than <code>Ctrl</code>).\n \n @param commandId\n            The identifier of the command for which the best active\n            binding should be retrieved; must not be <code>null</code>.\n @return The formatted string for the best binding; may be\n         <code>null</code> if no bindings are active for the given\n         command.\n @since 3.2\n"
2111,method,org/eclipse/jface/bindings/BindingManager/getBindings/," <p>\n Returns the set of all bindings managed by this class.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The array of all bindings. This value may be <code>null</code>\n         and it may be empty.\n"
2112,method,org/eclipse/jface/bindings/BindingManager/getDefinedSchemes/," <p>\n Returns the array of schemes that are defined.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The array of defined schemes; this value may be empty or\n         <code>null</code>.\n"
2115,method,org/eclipse/jface/bindings/BindingManager/getPerfectMatch/TriggerSequence," <p>\n Returns the command identifier for the active binding matching this\n trigger, if any.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the bindings aren't\n currently computed, then this completes in <code>O(n)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param trigger\n            The trigger to match; may be <code>null</code>.\n @return The binding that matches, if any; <code>null</code> otherwise.\n"
2116,method,org/eclipse/jface/bindings/BindingManager/getPlatform/," <p>\n Returns the active platform for this binding manager. The platform is in\n the same format as <code>SWT.getPlatform()</code>.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @return The active platform; never <code>null</code>.\n"
2117,method,org/eclipse/jface/bindings/BindingManager/getScheme/String," <p>\n Gets the scheme with the given identifier. If the scheme does not already\n exist, then a new (undefined) scheme is created with that identifier.\n This guarantees that schemes will remain unique.\n </p>\n <p>\n This method completes in amortized <code>O(1)</code>.\n </p>\n \n @param schemeId\n            The identifier for the scheme to retrieve; must not be\n            <code>null</code>.\n @return A scheme with the given identifier.\n"
2118,method,org/eclipse/jface/bindings/BindingManager/isPartialMatch/TriggerSequence," <p>\n Returns whether the given trigger sequence is a partial match for the\n given sequence.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the bindings aren't\n currently computed, then this completes in <code>O(n)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param trigger\n            The sequence which should be the prefix for some binding;\n            should not be <code>null</code>.\n @return <code>true</code> if the trigger can be found in the active\n         bindings; <code>false</code> otherwise.\n"
2119,method,org/eclipse/jface/bindings/BindingManager/isPerfectMatch/TriggerSequence," <p>\n Returns whether the given trigger sequence is a perfect match for the\n given sequence.\n </p>\n <p>\n This method completes in <code>O(1)</code>. If the bindings aren't\n currently computed, then this completes in <code>O(n)</code>, where\n <code>n</code> is the number of bindings.\n </p>\n \n @param trigger\n            The sequence which should match exactly; should not be\n            <code>null</code>.\n @return <code>true</code> if the trigger can be found in the active\n         bindings; <code>false</code> otherwise.\n"
2120,method,org/eclipse/jface/bindings/BindingManager/removeBinding/Binding," <p>\n Remove the specific binding by identity. Does nothing if the binding is\n not in the manager.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the number of bindings.\n </p>\n \n @param binding\n            The binding to be removed; must not be <code>null</code>.\n @since 3.2\n"
2122,method,org/eclipse/jface/bindings/BindingManager/removeBindings/TriggerSequence;String;String;String;String;String;int," <p>\n Removes any binding that matches the given values -- regardless of\n command identifier.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the number of bindings.\n </p>\n \n @param sequence\n            The sequence to match; may be <code>null</code>.\n @param schemeId\n            The scheme id to match; may be <code>null</code>.\n @param contextId\n            The context id to match; may be <code>null</code>.\n @param locale\n            The locale to match; may be <code>null</code>.\n @param platform\n            The platform to match; may be <code>null</code>.\n @param windowManager\n            The window manager to match; may be <code>null</code>. TODO\n            Currently ignored.\n @param type\n            The type to look for.\n \n"
2123,method,org/eclipse/jface/bindings/BindingManager/schemeChanged/SchemeEvent," <p>\n Notifies this manager that a scheme has changed. This method is intended\n for internal use only.\n </p>\n <p>\n This method calls out to listeners, and so the time it takes to complete\n is dependent on third-party code.\n </p>\n \n @param schemeEvent\n            An event describing the change in the scheme.\n"
2125,method,org/eclipse/jface/bindings/BindingManager/getConflictsFor/TriggerSequence," Provides the current conflicts in the keybindings for the given \n TriggerSequence as a {@link Collection} of {@link Binding}\n \n @param sequence The sequence for which conflict info is required\n \n @return Collection of KeyBinding. If no conflicts,\n         then returns a <code>null</code>\n @since 3.5\n"
2126,method,org/eclipse/jface/bindings/BindingManager/setActiveScheme/Scheme," <p>\n Selects one of the schemes as the active scheme. This scheme must be\n defined.\n </p>\n <p>\n This method completes in <code>O(n)</code>, where <code>n</code> is\n the height of the context tree.\n </p>\n \n @param scheme\n            The scheme to become active; must not be <code>null</code>.\n @throws NotDefinedException\n             If the given scheme is currently undefined.\n"
2128,method,org/eclipse/jface/bindings/BindingManager/setLocale/String," <p>\n Changes the locale for this binding manager. The locale can be used to\n provide locale-specific bindings. If the locale is different than the\n current locale, this will force a recomputation of the bindings. The\n locale is in the same format as\n <code>Locale.getDefault().toString()</code>.\n </p>\n <p>\n This method completes in <code>O(1)</code>.\n </p>\n \n @param locale\n            The new locale; must not be <code>null</code>.\n @see Locale#getDefault()\n"
2130,method,org/eclipse/jface/bindings/BindingManager/BindingManager/ContextManager;CommandManager," <p>\n Constructs a new instance of <code>BindingManager</code>.\n </p>\n <p>\n This method completes in amortized constant time (O(1)).\n </p>\n \n @param contextManager\n            The context manager that will support this binding manager.\n            This value must not be <code>null</code>.\n @param commandManager\n            The command manager that will support this binding manager.\n            This value must not be <code>null</code>.\n"
2131,field,org/eclipse/jface/bindings/BindingManager/DEBUG," This flag can be set to <code>true</code> if the binding manager should\n print information to <code>System.out</code> when certain boundary\n conditions occur.\n"
2134,class,org/eclipse/jface/bindings/Binding," <p>\n A binding is a link between user input and the triggering of a particular\n command. The most common example of a binding is a keyboard shortcut, but\n there are also mouse and gesture bindings.\n </p>\n <p>\n Bindings are linked to particular conditions within the application. Some of\n these conditions change infrequently (e.g., locale, scheme), while some will\n tend to change quite frequently (e.g., context). This allows the bindings to\n be tailored to particular situations. For example, a set of bindings may be\n appropriate only inside a text editor.  Or, perhaps, a set of bindings might\n be appropriate only for a given locale, such as bindings that coexist with\n the Input Method Editor (IME) on Chinese locales.\n </p>\n <p>\n It is also possible to remove a particular binding. This is typically done as\n part of user configuration (e.g., user changing keyboard shortcuts). However,\n it can also be helpful when trying to change a binding on a particular locale\n or platform. An "unbinding" is really just a binding with no command\n identifier. For it to unbind a particular binding, it must match that binding\n in its context identifier and scheme identifier. Subclasses (e.g.,\n <code>KeyBinding</code>) may require other properties to match (e.g.,\n <code>keySequence</code>). If these properties match, then this is an\n unbinding. Note: the locale and platform can be different.\n </p>\n <p>\n For example, imagine you have a key binding that looks like this:\n </p>\n <code><pre>\n KeyBinding(command, scheme, context, &quot;Ctrl+Shift+F&quot;)\n </pre></code>\n <p>\n On GTK+, the "Ctrl+Shift+F" interferes with some native behaviour. To change\n the binding, we first unbind the "Ctrl+Shift+F" key sequence by \n assigning it a null command on the gtk platform.  We then create a new binding\n that maps the command to the "Esc Ctrl+F" key sequence.\n </p>\n <code><pre>\n     KeyBinding("Ctrl+Shift+F",null,scheme,context,null,gtk,null,SYSTEM)\n     KeyBinding("Esc Ctrl+F",parameterizedCommand,scheme,context,null,gtk,SYSTEM)\n </pre></code>\n <p>\n Bindings are intended to be immutable objects.\n </p>\n \n @since 3.1\n"
2135,method,org/eclipse/jface/bindings/Binding/equals/Object," Tests whether this binding is equal to another object. Bindings are only\n equal to other bindings with equivalent values.\n \n @param object\n            The object with which to compare; may be <code>null</code>.\n @return <code>true</code> if the object is a binding with equivalent\n         values for all of its properties; <code>false</code> otherwise.\n"
2136,method,org/eclipse/jface/bindings/Binding/getParameterizedCommand/," Returns the parameterized command to which this binding applies. If the\n identifier is <code>null</code>, then this binding is "unbinding" an\n existing binding.\n \n @return The fully-parameterized command; may be <code>null</code>.\n"
2138,method,org/eclipse/jface/bindings/Binding/getLocale/," Returns the locale in which this binding applies. If the locale is\n <code>null</code>, then this binding applies to all locales. This\n string is the same format as returned by\n <code>Locale.getDefault().toString()</code>.\n \n @return The locale; may be <code>null</code>.\n"
2139,method,org/eclipse/jface/bindings/Binding/getPlatform/," Returns the platform on which this binding applies. If the platform is\n <code>null</code>, then this binding applies to all platforms. This\n string is the same format as returned by <code>SWT.getPlatform()</code>.\n \n @return The platform; may be <code>null</code>.\n"
2145,method,org/eclipse/jface/bindings/Binding/Binding/ParameterizedCommand;String;String;String;String;String;int," Constructs a new instance of <code>Binding</code>.\n \n @param command\n            The parameterized command to which this binding applies; this\n            value may be <code>null</code> if the binding is meant to\n            "unbind" a previously defined binding.\n @param schemeId\n            The scheme to which this binding belongs; this value must not\n            be <code>null</code>.\n @param contextId\n            The context to which this binding applies; this value must not\n            be <code>null</code>.\n @param locale\n            The locale to which this binding applies; this value may be\n            <code>null</code> if it applies to all locales.\n @param platform\n            The platform to which this binding applies; this value may be\n            <code>null</code> if it applies to all platforms.\n @param windowManager\n            The window manager to which this binding applies; this value\n            may be <code>null</code> if it applies to all window\n            managers. This value is currently ignored.\n @param type\n            The type of binding. This should be either <code>SYSTEM</code>\n            or <code>USER</code>.\n"
2149,class,org/eclipse/jface/bindings/keys/KeySequenceText," <p>\n A wrapper around the SWT text widget that traps literal key presses and\n converts them into key sequences for display. There are two types of key\n strokes that are displayed: complete and incomplete. A complete key stroke is\n one with a natural key, while an incomplete one has no natural key.\n Incomplete key strokes are only displayed until they are made complete or\n their component key presses are released.\n </p>\n \n @since 3.1\n"
2150,method,org/eclipse/jface/bindings/keys/KeySequenceText/addPropertyChangeListener/IPropertyChangeListener," Adds a property change listener to this key sequence widget. It will be\n notified when the key sequence changes.\n \n @param listener\n            The listener to be notified when changes occur; must not be\n            <code>null</code>.\n @since 3.2\n"
2152,method,org/eclipse/jface/bindings/keys/KeySequenceText/firePropertyChangeEvent/KeySequence," Fires a property change event to all of the listeners.\n \n @param oldKeySequence\n            The old key sequence; must not be <code>null</code>.\n @since 3.2\n"
2154,method,org/eclipse/jface/bindings/keys/KeySequenceText/insert/KeyStroke," Inserts the key stroke at the current insertion point. This does a\n regular delete and insert, as if the key had been pressed.\n \n @param stroke\n            The key stroke to insert; must not be <code>null</code>.\n"
2155,method,org/eclipse/jface/bindings/keys/KeySequenceText/removePropertyChangeListener/IPropertyChangeListener," Removes the given listener from this key sequence widget.\n \n @param listener\n            The listener to be removed; must not be <code>null</code>.\n @since 3.2\n"
2156,method,org/eclipse/jface/bindings/keys/KeySequenceText/setKeySequence/KeySequence," <p>\n A mutator for the key sequence stored within this widget. The text and\n caret position are updated.\n </p>\n <p>\n All sequences are limited to maxStrokes number of strokes in length. If\n there are already that number of strokes, then it does not show\n incomplete strokes, and does not keep track of them.\n </p>\n \n @param newKeySequence\n            The new key sequence for this widget; may be <code>null</code>\n            if none.\n"
2158,method,org/eclipse/jface/bindings/keys/KeySequenceText/setKeyStrokeLimit/int," A mutator for the maximum number of strokes that are permitted in this\n widget at one time.\n \n @param keyStrokeLimit\n            The maximum number of strokes; must be a positive integer or\n            <code>INFINITE</code>.\n"
2159,method,org/eclipse/jface/bindings/keys/KeySequenceText/KeySequenceText/Text," Constructs an instance of <code>KeySequenceTextField</code> with the\n text field to use. If the platform is carbon (MacOS X), then the font is\n set to be the same font used to display accelerators in the menus.\n \n @param wrappedText\n            The text widget to wrap; must not be <code>null</code>.\n"
2160,field,org/eclipse/jface/bindings/keys/KeySequenceText/INFINITE," The special integer value for the maximum number of strokes indicating\n that an infinite number should be allowed.\n"
2178,method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertAcceleratorToKeyStroke/int," Given an SWT accelerator value, provide the corresponding key stroke.\n \n @param accelerator\n            The accelerator to convert; should be a valid SWT accelerator\n            value.\n @return The equivalent key stroke; never <code>null</code>.\n"
2179,method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertEventToModifiedAccelerator/Event," <p>\n Converts the given event into an SWT accelerator value -- considering the\n modified character with the shift modifier. This is the third accelerator\n value that should be checked when processing incoming key events.\n </p>\n <p>\n For example, on a standard US keyboard, "Ctrl+Shift+5" would be viewed as\n "Ctrl+Shift+%".\n </p>\n \n @param event\n            The event to be converted; must not be <code>null</code>.\n @return The combination of the state mask and the unmodified character.\n"
2180,method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertEventToUnmodifiedAccelerator/Event," <p>\n Converts the given event into an SWT accelerator value -- considering the\n unmodified character with all modifier keys. This is the first\n accelerator value that should be checked when processing incoming key\n events. However, all alphabetic characters are considered as their\n uppercase equivalents.\n </p>\n <p>\n For example, on a standard US keyboard, "Ctrl+Shift+5" would be viewed as\n "Ctrl+Shift+5".\n </p>\n \n @param event\n            The event to be converted; must not be <code>null</code>.\n @return The combination of the state mask and the unmodified character.\n"
2181,method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertEventToUnmodifiedAccelerator/KeyEvent," <p>\n Converts the given event into an SWT accelerator value -- considering the\n unmodified character with all modifier keys. This is the first\n accelerator value that should be checked. However, all alphabetic\n characters are considered as their uppercase equivalents.\n </p>\n <p>\n For example, on a standard US keyboard, "Ctrl+Shift+5" would be viewed as\n "Ctrl+%".\n </p>\n \n @param event\n            The event to be converted; must not be <code>null</code>.\n @return The combination of the state mask and the unmodified character.\n"
2182,method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertEventToUnshiftedModifiedAccelerator/Event," Converts the given event into an SWT accelerator value -- considering the\n modified character without the shift modifier. This is the second\n accelerator value that should be checked when processing incoming key\n events. Key strokes with alphabetic natural keys are run through\n <code>convertEventToUnmodifiedAccelerator</code>.\n \n @param event\n            The event to be converted; must not be <code>null</code>.\n @return The combination of the state mask without shift, and the modified\n         character.\n"
2183,method,org/eclipse/jface/bindings/keys/SWTKeySupport/convertKeyStrokeToAccelerator/KeyStroke," Given a key stroke, this method provides the equivalent SWT accelerator\n value. The functional inverse of\n <code>convertAcceleratorToKeyStroke</code>.\n \n @param keyStroke\n            The key stroke to convert; must not be <code>null</code>.\n @return The SWT accelerator value\n"
2185,method,org/eclipse/jface/bindings/keys/SWTKeySupport/SWTKeySupport/," This class should never be instantiated.\n"
2187,method,org/eclipse/jface/bindings/keys/IKeyLookup/formalKeyLookup/String," Looks up a single natural key by its formal name, and returns the integer\n representation for this natural key\n \n @param name\n            The formal name of the natural key to look-up; must not be\n            <code>null</code>.\n @return The integer representation of this key. If the natural key cannot\n         be found, then this method returns <code>0</code>.\n"
2188,method,org/eclipse/jface/bindings/keys/IKeyLookup/formalKeyLookupInteger/String," Looks up a single natural key by its formal name, and returns the integer\n representation for this natural key\n \n @param name\n            The formal name of the natural key to look-up; must not be\n            <code>null</code>.\n @return The integer representation of this key. If the natural key cannot\n         be found, then this method returns <code>0</code>.\n"
2189,method,org/eclipse/jface/bindings/keys/IKeyLookup/formalModifierLookup/String," Looks up a single modifier key by its formal name, and returns the integer\n representation for this modifier key\n \n @param name\n            The formal name of the modifier key to look-up; must not be\n            <code>null</code>.\n @return The integer representation of this key. If the modifier key\n         cannot be found, then this method returns <code>0</code>.\n"
2204,field,org/eclipse/jface/bindings/keys/IKeyLookup/CAPS_LOCK_NAME," The formal name for the 'Caps Lock' key.\n"
2209,field,org/eclipse/jface/bindings/keys/IKeyLookup/DELETE_NAME," An alternative name for the delete key.\n"
2211,field,org/eclipse/jface/bindings/keys/IKeyLookup/ENTER_NAME," An alternative name for the enter key.\n"
2213,field,org/eclipse/jface/bindings/keys/IKeyLookup/ESCAPE_NAME," An alternative name for the escape key.\n"
2265,field,org/eclipse/jface/bindings/keys/IKeyLookup/RETURN_NAME," An alternative name for the enter key.\n"
2266,field,org/eclipse/jface/bindings/keys/IKeyLookup/SCROLL_LOCK_NAME," The formal name for the 'Scroll Lock' key.\n"
2275,method,org/eclipse/jface/bindings/keys/KeySequence/getInstance/KeySequence;KeyStroke," Creates an instance of <code>KeySequence</code> given a key sequence\n and a key stroke.\n \n @param keySequence\n            a key sequence. Must not be <code>null</code>.\n @param keyStroke\n            a key stroke. Must not be <code>null</code>.\n @return a key sequence that is equal to the given key sequence with the\n         given key stroke appended to the end. Guaranteed not to be\n         <code>null</code>.\n"
2277,method,org/eclipse/jface/bindings/keys/KeySequence/getInstance/KeyStroke[]," Creates an instance of <code>KeySequence</code> given an array of key\n strokes.\n \n @param keyStrokes\n            the array of key strokes. This array may be empty, but it must\n            not be <code>null</code>. This array must not contain\n            <code>null</code> elements.\n @return a key sequence. Guaranteed not to be <code>null</code>.\n"
2278,method,org/eclipse/jface/bindings/keys/KeySequence/getInstance/List," Creates an instance of <code>KeySequence</code> given a list of key\n strokes.\n \n @param keyStrokes\n            the list of key strokes. This list may be empty, but it must\n            not be <code>null</code>. If this list is not empty, it\n            must only contain instances of <code>KeyStroke</code>.\n @return a key sequence. Guaranteed not to be <code>null</code>.\n"
2281,method,org/eclipse/jface/bindings/keys/KeySequence/format/," Formats this key sequence into the current default look.\n \n @return A string representation for this key sequence using the default\n         look; never <code>null</code>.\n"
2282,method,org/eclipse/jface/bindings/keys/KeySequence/getKeyStrokes/," Returns the list of key strokes for this key sequence.\n \n @return the list of key strokes keys. This list may be empty, but is\n         guaranteed not to be <code>null</code>. If this list is not\n         empty, it is guaranteed to only contain instances of\n         <code>KeyStroke</code>.\n"
2286,method,org/eclipse/jface/bindings/keys/KeySequence/KeySequence/KeyStroke[]," Constructs an instance of <code>KeySequence</code> given a list of key\n strokes.\n \n @param keyStrokes\n            the list of key strokes. This list may be empty, but it must\n            not be <code>null</code>. If this list is not empty, it\n            must only contain instances of <code>KeyStroke</code>.\n"
2287,field,org/eclipse/jface/bindings/keys/KeySequence/KEY_STROKE_DELIMITER," The delimiter between multiple key strokes in a single key sequence --\n expressed in the formal key stroke grammar. This is not to be displayed\n to the user. It is only intended as an internal representation.\n"
2289,class,org/eclipse/jface/bindings/keys/KeyBinding," <p>\n A keyboard shortcut. This is a binding between some keyboard input and the\n triggering of a command. This object is immutable.\n </p>\n \n @since 3.1\n"
2292,method,org/eclipse/jface/bindings/keys/KeyBinding/KeyBinding/KeySequence;ParameterizedCommand;String;String;String;String;String;int," Constructs a new instance of <code>KeyBinding</code>.\n \n @param keySequence\n            The key sequence which should trigger this binding. This value\n            must not be <code>null</code>. It also must be a complete,\n            non-empty key sequence.\n @param command\n            The parameterized command to which this binding applies; this\n            value may be <code>null</code> if the binding is meant to\n            "unbind" a previously defined binding.\n @param schemeId\n            The scheme to which this binding belongs; this value must not\n            be <code>null</code>.\n @param contextId\n            The context to which this binding applies; this value must not\n            be <code>null</code>.\n @param locale\n            The locale to which this binding applies; this value may be\n            <code>null</code> if it applies to all locales.\n @param platform\n            The platform to which this binding applies; this value may be\n            <code>null</code> if it applies to all platforms.\n @param windowManager\n            The window manager to which this binding applies; this value\n            may be <code>null</code> if it applies to all window\n            managers. This value is currently ignored.\n @param type\n            The type of binding. This should be either <code>SYSTEM</code>\n            or <code>USER</code>.\n"
2299,method,org/eclipse/jface/bindings/keys/KeyStroke/format/," Formats this key stroke into the current default look.\n \n @return A string representation for this key stroke using the default\n         look; never <code>null</code>.\n"
2305,field,org/eclipse/jface/bindings/keys/KeyStroke/KEY_DELIMITER," The delimiter between multiple keys in a single key strokes -- expressed\n in the formal key stroke grammar. This is not to be displayed to the\n user. It is only intended as an internal representation.\n"
2315,method,org/eclipse/jface/bindings/keys/formatting/IKeyFormatter/format/int," Formats an individual key into a human readable format. This uses an\n internationalization resource bundle to look up the key. This does not do\n any platform-specific formatting (e.g., Carbon's command character).\n \n @param key\n            The key to format.\n @return The key formatted as a string; should not be <code>null</code>.\n"
2317,method,org/eclipse/jface/bindings/keys/formatting/IKeyFormatter/format/KeyStroke," Format the given key strokes into a string. The manner of the conversion\n is dependent on the formatter. It is required that unequal key strokes\n return unequal strings.\n \n @param keyStroke\n            The key stroke to convert; must not be <Code>null</code>.\n @return A string representation of the key stroke; must not be <code>\n         null</code>\n"
2321,method,org/eclipse/jface/bindings/keys/formatting/KeyFormatterFactory/getFormalKeyFormatter/," Provides an instance of <code>FormalKeyFormatter</code>.\n \n @return The formal formatter; never <code>null</code>.\n"
2324,method,org/eclipse/jface/bindings/keys/formatting/EmacsKeyFormatter/format/int," Formats an individual key into a human readable format. This converts the\n key into a format similar to Xemacs.\n \n @param key\n            The key to format; must not be <code>null</code>.\n @return The key formatted as a string; should not be <code>null</code>.\n"
2333,method,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/getKeyDelimiter/," An accessor for the delimiter you wish to use between keys. This is used\n by the default format implementations to determine the key delimiter.\n \n @return The delimiter to use between keys; should not be\n         <code>null</code>.\n"
2334,method,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/getKeyStrokeDelimiter/," An accessor for the delimiter you wish to use between key strokes. This\n used by the default format implementations to determine the key stroke\n delimiter.\n \n @return The delimiter to use between key strokes; should not be\n         <code>null</code>.\n"
2335,method,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/sortModifierKeys/int," Separates the modifier keys from each other, and then places them in an\n array in some sorted order. The sort order is dependent on the type of\n formatter.\n \n @param modifierKeys\n            The modifier keys from the key stroke.\n @return An array of modifier key values -- separated and sorted in some\n         order. Any values in this array that are\n         <code>KeyStroke.NO_KEY</code> should be ignored.\n"
2337,field,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/KEY_DELIMITER_KEY," The key for the delimiter between keys. This is used in the\n internationalization bundles.\n"
2338,field,org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter/KEY_STROKE_DELIMITER_KEY," The key for the delimiter between key strokes. This is used in the\n internationalization bundles.\n"
2341,method,org/eclipse/jface/bindings/keys/formatting/NativeKeyFormatter/format/int," Formats an individual key into a human readable format. This uses an\n internationalization resource bundle to look up the key. This does the\n platform-specific formatting for Carbon.\n \n @param key\n            The key to format.\n @return The key formatted as a string; should not be <code>null</code>.\n"
2346,interface,org/eclipse/jface/viewers/ILazyTreePathContentProvider," The ILazyTreePathContentProvider is a tree path-based content provider for\n tree viewers created using the SWT.VIRTUAL flag that only wish to return\n their contents as they are queried.\n \n @since 3.3\n"
2347,method,org/eclipse/jface/viewers/ILazyTreePathContentProvider/updateElement/TreePath;int," Called when a previously-blank item becomes visible in the TreeViewer. If\n the content provider knows the child element for the given parent at this\n index, it should respond by calling\n {@link TreeViewer#replace(Object, int, Object)}. The content provider\n should also update the child count for any replaced element by calling\n {@link TreeViewer#setChildCount(Object, int)}. If the given current child\n count is already correct, setChildCount does not have to be called since\n a call to replace will not change the child count.\n \n <strong>NOTE</strong> #updateElement(int index) can be used to determine\n selection values. If TableViewer#replace(Object, int) is not called\n before returning from this method, selections may have missing or stale\n elements. In this situation it is suggested that the selection is asked\n for again after replace() has been called.\n \n @param parentPath\n            The tree path of parent of the element, or if the\n            element to update is a root element, an empty tree path\n @param index\n            The index of the element to update in the tree\n"
2348,method,org/eclipse/jface/viewers/ILazyTreePathContentProvider/updateChildCount/TreePath;int," Called when the TreeViewer needs an up-to-date child count for the given\n tree path, for example from {@link TreeViewer#refresh()} and\n {@link TreeViewer#setInput(Object)}. If the content provider knows the\n element at the given tree path, it should respond by calling\n {@link TreeViewer#setChildCount(Object, int)}. If the given current\n child count is already correct, no action has to be taken by this content\n provider.\n \n @param treePath\n            The tree path for which an up-to-date child count is needed, or\n            if the number of root elements is requested, the empty tree path \n @param currentChildCount \n 			  The current child count for the element that needs updating\n"
2349,method,org/eclipse/jface/viewers/ILazyTreePathContentProvider/updateHasChildren/TreePath," Called when the TreeViewer needs up-to-date information whether the node\n at the given tree path can be expanded. If the content provider knows the\n element at the given tree path, it should respond by calling\n {@link TreeViewer#setHasChildren(Object, boolean)}. The content provider\n may also choose to call {@link TreeViewer#setChildCount(Object, int)}\n instead if it knows the number of children.\n \n <p>\n Intended as an optimization for when the viewer does not need the actual\n children. Clients may be able to implement this more efficiently than\n <code>updateChildCount</code>.\n </p>\n \n @param path\n            The tree path for which up-to-date information about children\n            is needed\n"
2350,method,org/eclipse/jface/viewers/ILazyTreePathContentProvider/getParents/Object," Return the possible parent paths for the given element. An empty array\n can be returned if the paths cannot be computed. In this case the\n tree-structured viewer can't expand a given node correctly if requested.\n If the element is a potential child of the input of the viewer, an empty\n tree path should be an entry in the returned array.\n \n @param element\n            the element\n @return the possible parent paths for the given element\n"
2369,method,org/eclipse/jface/viewers/ColumnViewer/setLabelProvider/IBaseLabelProvider," The column viewer implementation of this <code>Viewer</code> framework\n method ensures that the given label provider is an instance of\n <code>ITableLabelProvider</code>, <code>ILabelProvider</code>, or\n <code>CellLabelProvider</code>.\n <p>\n If the label provider is an {@link ITableLabelProvider} , then it\n provides a separate label text and image for each column. Implementers of\n <code>ITableLabelProvider</code> may also implement {@link\n ITableColorProvider} and/or {@link ITableFontProvider} to provide colors\n and/or fonts.\n </p>\n <p>\n If the label provider is an <code>ILabelProvider</code> , then it\n provides only the label text and image for the first column, and any\n remaining columns are blank. Implementers of <code>ILabelProvider</code>\n may also implement {@link IColorProvider} and/or {@link IFontProvider} to\n provide colors and/or fonts.\n </p>\n \n"
2370,method,org/eclipse/jface/viewers/ColumnViewer/cancelEditing/," Cancels a currently active cell editor if one is active. All changes\n already done in the cell editor are lost.\n \n @since 3.1 (in subclasses, added in 3.3 to abstract class)\n"
2372,method,org/eclipse/jface/viewers/ColumnViewer/editElement/Object;int," Starts editing the given element at the given column index.\n \n @param element\n 		the model element\n @param column\n 		the column index\n @since 3.1 (in subclasses, added in 3.3 to abstract class)\n"
2374,method,org/eclipse/jface/viewers/ColumnViewer/getCellModifier/," Returns the cell modifier of this viewer, or <code>null</code> if none\n has been set.\n \n <p>\n Since 3.3, an alternative API is available, see {@link\n ViewerColumn#setEditingSupport(EditingSupport)} for a more flexible way\n of editing values in a column viewer.\n </p>\n \n @return the cell modifier, or <code>null</code>\n @since 3.1 (in subclasses, added in 3.3 to abstract class)\n @see ViewerColumn#setEditingSupport(EditingSupport)\n @see EditingSupport\n"
2383,method,org/eclipse/jface/viewers/ColumnViewer/doGetColumnCount/," Returns the number of columns contained in the receiver. If no columns\n were created by the programmer, this value is zero, despite the fact that\n visually, one column of items may be visible. This occurs when the\n programmer uses the column viewer like a list, adding elements but never\n creating a column.\n \n @return the number of columns\n \n @since 3.3\n"
2385,method,org/eclipse/jface/viewers/ColumnViewer/triggerEditorActivationEvent/ColumnViewerEditorActivationEvent," Invoking this method fires an editor activation event which tries to\n enable the editor but before this event is passed to {@link\n ColumnViewerEditorActivationStrategy} to see if this event should really\n trigger editor activation\n \n @param event\n 		the activation event\n"
2433,method,org/eclipse/jface/viewers/ViewerCell/getNeighbor/int;boolean," Returns the specified neighbor of this cell, or <code>null</code> if no\n neighbor exists in the given direction. Direction constants can be\n combined by bitwise OR; for example, this method will return the cell to\n the upper-left of the current cell by passing {@link #ABOVE} |\n {@link #LEFT}. If <code>sameLevel</code> is <code>true</code>, only cells\n in sibling rows (under the same parent) will be considered.\n \n @param directionMask\n            the direction mask used to identify the requested neighbor\n            cell\n @param sameLevel\n            if <code>true</code>, only consider cells from sibling rows\n @return the requested neighbor cell, or <code>null</code> if not found\n"
2435,method,org/eclipse/jface/viewers/ViewerCell/getTextBounds/," The location and bounds of the area where the text is drawn depends on\n various things (image displayed, control with SWT.CHECK)\n \n @return The bounds of the of the text area. May return <code>null</code>\n         if the underlying widget implementation doesn't provide this\n         information\n @since 3.4\n"
2436,method,org/eclipse/jface/viewers/ViewerCell/getImageBounds/," Returns the location and bounds of the area where the image is drawn\n \n @return The bounds of the of the image area. May return <code>null</code>\n         if the underlying widget implementation doesn't provide this\n         information\n @since 3.4\n"
2450,method,org/eclipse/jface/viewers/AbstractListViewer/listGetSelectionIndices/," Returns the zero-relative indices of the items which are currently\n selected in the underlying widget.  The array is empty if no items are selected.\n <p>\n Note: This is not the actual structure used by the receiver\n to maintain its selection, so modifying the array will\n not affect the receiver. \n </p>\n @return the array of indices of the selected items\n"
2455,method,org/eclipse/jface/viewers/AbstractListViewer/listSetSelection/int[]," Selects the items at the given zero-relative indices in the underlying widget.\n The current selection is cleared before the new items are selected.\n <p>\n Indices that are out of range and duplicate indices are ignored.\n If the receiver is single-select and multiple indices are specified,\n then all indices are ignored.\n\n @param ixs the indices of the items to select\n"
2458,method,org/eclipse/jface/viewers/AbstractListViewer/add/Object[]," Adds the given elements to this list viewer.\n If this viewer does not have a sorter, the elements are added at the end\n in the order given; otherwise the elements are inserted at appropriate positions.\n <p>\n This method should be called (by the content provider) when elements \n have been added to the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param elements the elements to add\n"
2459,method,org/eclipse/jface/viewers/AbstractListViewer/insert/Object;int," Inserts the given element into this list viewer at the given position.\n If this viewer has a sorter, the position is ignored and the element is\n inserted at the correct position in the sort order.\n <p>\n This method should be called (by the content provider) when elements have\n been added to the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n \n @param element\n            the element\n @param position\n            a 0-based position relative to the model, or -1 to indicate\n            the last position\n @since 3.3\n"
2467,method,org/eclipse/jface/viewers/AbstractListViewer/indexForElement/Object," @param element the element to insert\n @return the index where the item should be inserted.\n"
2472,method,org/eclipse/jface/viewers/AbstractListViewer/remove/Object[]," Removes the given elements from this list viewer.\n The selection is updated if required.\n <p>\n This method should be called (by the content provider) when elements \n have been removed from the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param elements the elements to remove\n"
2477,interface,org/eclipse/jface/viewers/ILabelProvider," Extends <code>IBaseLabelProvider</code> with the methods\n to provide the text and/or image for the label of a given element. \n Used by most structured viewers, except table viewers.\n"
2478,method,org/eclipse/jface/viewers/ILabelProvider/getImage/Object," Returns the image for the label of the given element.  The image\n is owned by the label provider and must not be disposed directly.\n Instead, dispose the label provider when no longer needed.\n\n @param element the element for which to provide the label image\n @return the image used to label the element, or <code>null</code>\n   if there is no image for the given object\n"
2481,method,org/eclipse/jface/viewers/CheckboxTableViewer/newCheckList/Composite;int," Creates a table viewer on a newly-created table control under the given parent.\n The table control is created using the given SWT style bits, plus the \n <code>SWT.CHECK</code> style bit.\n The table shows its contents in a single column, with no header.\n The viewer has no input, no content provider, a default label provider, \n no sorter, and no filters.\n <p>\n No <code>TableColumn</code> is added. SWT does not require a \n <code>TableColumn</code> if showing only a single column with no header.\n SWT correctly handles the initial sizing and subsequent resizes in this case.\n\n @param parent the parent control\n @param style SWT style bits\n \n @since 2.0\n @return CheckboxTableViewer\n"
2483,method,org/eclipse/jface/viewers/CheckboxTableViewer/setCheckStateProvider/ICheckStateProvider," Sets the {@link ICheckStateProvider} for this {@link CheckboxTreeViewer}.\n The check state provider will supply the logic for deciding whether the\n check box associated with each item should be checked, grayed or \n unchecked. \n @param checkStateProvider	The provider.\n @since 3.5\n"
2493,method,org/eclipse/jface/viewers/CheckboxTableViewer/setAllChecked/boolean," Sets to the given value the checked state for all elements in this viewer.\n Does not fire events to check state listeners.\n\n @param state <code>true</code> if the element should be checked,\n  and <code>false</code> if it should be unchecked\n"
2494,method,org/eclipse/jface/viewers/CheckboxTableViewer/setAllGrayed/boolean," Sets to the given value the grayed state for all elements in this viewer.\n\n @param state <code>true</code> if the element should be grayed,\n  and <code>false</code> if it should be ungrayed\n"
2496,method,org/eclipse/jface/viewers/CheckboxTableViewer/setCheckedElements/Object[]," Sets which nodes are checked in this viewer.\n The given list contains the elements that are to be checked;\n all other nodes are to be unchecked.\n Does not fire events to check state listeners.\n <p>\n This method is typically used when restoring the interesting\n state of a viewer captured by an earlier call to <code>getCheckedElements</code>.\n </p>\n\n @param elements the list of checked elements (element type: <code>Object</code>)\n @see #getCheckedElements\n"
2497,method,org/eclipse/jface/viewers/CheckboxTableViewer/setGrayed/Object;boolean," Sets the grayed state for the given element in this viewer.\n\n @param element the element\n @param state <code>true</code> if the item should be grayed,\n  and <code>false</code> if it should be ungrayed\n @return <code>true</code> if the element is visible and the gray\n  state could be set, and <code>false</code> otherwise\n"
2498,method,org/eclipse/jface/viewers/CheckboxTableViewer/setGrayedElements/Object[]," Sets which nodes are grayed in this viewer.\n The given list contains the elements that are to be grayed;\n all other nodes are to be ungrayed.\n <p>\n This method is typically used when restoring the interesting\n state of a viewer captured by an earlier call to <code>getGrayedElements</code>.\n </p>\n\n @param elements the array of grayed elements\n\n @see #getGrayedElements\n"
2499,method,org/eclipse/jface/viewers/CheckboxTableViewer/CheckboxTableViewer/Composite," Creates a table viewer on a newly-created table control under the given parent.\n The table control is created using the SWT style bits: \n <code>SWT.CHECK</code> and <code>SWT.BORDER</code>.\n The table has one column.\n The viewer has no input, no content provider, a default label provider, \n no sorter, and no filters.\n <p>\n This is equivalent to calling <code>new CheckboxTableViewer(parent, SWT.BORDER)</code>.\n See that constructor for more details.\n </p>\n\n @param parent the parent control\n \n @deprecated use newCheckList(Composite, int) or new CheckboxTableViewer(Table)\n   instead (see below for details)\n"
2501,method,org/eclipse/jface/viewers/CheckboxTableViewer/CheckboxTableViewer/Table," Creates a table viewer on the given table control.\n The <code>SWT.CHECK</code> style bit must be set on the given table control.\n The viewer has no input, no content provider, a default label provider, \n no sorter, and no filters.\n\n @param table the table control\n"
2511,method,org/eclipse/jface/viewers/DecoratingLabelProvider/setLabelDecorator/ILabelDecorator," Sets the label decorator.\n Removes all known listeners from the old decorator, and adds all known listeners to the new decorator.\n The old decorator is not disposed.\n Fires a label provider changed event indicating that all labels should be updated.\n Has no effect if the given decorator is identical to the current one.\n\n @param decorator the label decorator, or <code>null</code> if no decorations are to be applied\n"
2538,method,org/eclipse/jface/viewers/TableTreeViewer/getLabelProvider/," The table tree viewer implementation of this <code>Viewer</code>\n framework method returns the label provider, which in the case of table\n tree viewers will be an instance of either\n <code>ITableLabelProvider</code> or <code>ILabelProvider</code>. If\n it is an <code>ITableLabelProvider</code>, then it provides a separate\n label text and image for each column. If it is an\n <code>ILabelProvider</code>, then it provides only the label text and\n image for the first column, and any remaining columns are blank.\n"
2548,method,org/eclipse/jface/viewers/TableTreeViewer/setColumnProperties/String[]," Sets the column properties of this table viewer. The properties must\n correspond with the columns of the table control. They are used to\n identify the column in a cell modifier.\n \n @param columnProperties\n            the list of column properties\n"
2559,method,org/eclipse/jface/viewers/ColumnViewerEditorActivationStrategy/isEditorActivationEvent/ColumnViewerEditorActivationEvent," @param event\n            the event triggering the action\n @return <code>true</code> if this event should open the editor\n"
2572,method,org/eclipse/jface/viewers/StyledString/append/char;Styler," Appends the string representation of the given character\n with a style to the {@link StyledString}. The\n appended character will have the given style associated.\n \n @param ch\n            the character to append\n @param styler\n            the styler to use for styling the character to append or\n            <code>null</code> if no styler should be associated with the\n            appended character\n @return returns a reference to this object\n"
2573,method,org/eclipse/jface/viewers/StyledString/append/String;Styler," Appends a string with a style to the {@link StyledString}. The\n appended string will be styled using the given styler.\n \n @param string\n            the string to append\n @param styler\n            the styler to use for styling the string to append or\n            <code>null</code> if no styler should be associated with the\n            appended string.\n @return returns a reference to this object\n"
2574,method,org/eclipse/jface/viewers/StyledString/append/char[];Styler," Appends the string representation of the given character array\n with a style to the {@link StyledString}. The\n appended character array will be styled using the given styler.\n \n @param chars\n            the character array to append\n @param styler\n            the styler to use for styling the character array to append or\n            <code>null</code> if no styler should be associated with the\n            appended character array\n @return returns a reference to this object\n"
2576,method,org/eclipse/jface/viewers/StyledString/setStyle/int;int;Styler," Sets a styler to use for the given source range. The range must be\n subrange of actual string of this {@link StyledString}. Stylers\n previously set for that range will be overwritten.\n \n @param offset\n            the start offset of the range\n @param length\n            the length of the range\n @param styler\n            the styler to set\n \n @throws StringIndexOutOfBoundsException\n             if <code>start</code> is less than zero, or if offset plus\n             length is greater than the length of this object.\n"
2595,method,org/eclipse/jface/viewers/ViewerFilter/filter/Viewer;Object;Object[]," Filters the given elements for the given viewer.\n The input array is not modified.\n <p>\n The default implementation of this method calls \n <code>select</code> on each element in the array, \n and returns only those elements for which <code>select</code>\n returns <code>true</code>.\n </p>\n @param viewer the viewer\n @param parent the parent element\n @param elements the elements to filter\n @return the filtered elements\n"
2605,method,org/eclipse/jface/viewers/IStructuredSelection/toList/," Returns the elements in this selection as a <code>List</code>.\n <strong>Note</strong> In the default implementation of {@link #toList()} in\n {@link StructuredSelection} the returned list is not a copy of the elements of the \n receiver and modifying it will modify the contents of the selection.\n\n @return the selected elements as a list\n"
2624,class,org/eclipse/jface/viewers/OpenEvent," Event object describing an open which may be generated from a \n selection or default selection event. The source of these\n events is a viewer.\n\n @see IOpenListener\n"
2630,method,org/eclipse/jface/viewers/ViewerDropAdapter/clearState/," Clears internal state of this drop adapter. This method can be called\n when no DnD operation is underway, to clear internal state from previous\n drop operations.\n \n @since 3.5\n"
2631,method,org/eclipse/jface/viewers/ViewerDropAdapter/determineLocation/DropTargetEvent," Returns the position of the given event's coordinates relative to its target.\n The position is determined to be before, after, or on the item, based on\n some threshold value.\n\n @param event the event\n @return one of the <code>LOCATION_* </code>constants defined in this class\n"
2632,method,org/eclipse/jface/viewers/ViewerDropAdapter/determineTarget/DropTargetEvent," Returns the target item of the given drop event.\n\n @param event the event\n @return The target of the drop, may be <code>null</code>.\n"
2639,method,org/eclipse/jface/viewers/ViewerDropAdapter/getCurrentLocation/," Returns a constant describing the position of the mouse relative to the\n target (before, on, or after the target.  \n\n @return one of the <code>LOCATION_* </code> constants defined in this type\n"
2642,method,org/eclipse/jface/viewers/ViewerDropAdapter/getCurrentEvent/," Returns the current {@link DropTargetEvent}.\n \n This may be called only inside of the {@link #validateDrop(Object, int, TransferData)} \n or {@link #performDrop(Object)} methods.\n @return the DropTargetEvent\n @since 3.5\n"
2643,method,org/eclipse/jface/viewers/ViewerDropAdapter/getFeedbackEnabled/," Returns whether visible insertion feedback should be presented to the user.\n <p>\n Typical insertion feedback is the horizontal insertion bars that appear \n between adjacent items while dragging.\n </p>\n\n @return <code>true</code> if visual feedback is desired, and <code>false</code> if not\n"
2648,method,org/eclipse/jface/viewers/ViewerDropAdapter/overrideOperation/int," Overrides the current operation for a drop that happens immediately\n after the current validateDrop.\n \n This maybe called only from within a\n {@link #validateDrop(Object, int, TransferData)} method\n \n \n @param operation\n            the operation to be used for the drop.\n \n @see DND#DROP_COPY\n @see DND#DROP_MOVE\n @see DND#DROP_LINK\n @see DND#DROP_NONE\n \n @since 3.5\n"
2649,method,org/eclipse/jface/viewers/ViewerDropAdapter/setFeedbackEnabled/boolean," Sets whether visible insertion feedback should be presented to the user.\n <p>\n Typical insertion feedback is the horizontal insertion bars that appear\n between adjacent items while dragging.\n </p>\n \n @param value\n            <code>true</code> if visual feedback is desired, and\n            <code>false</code> if not\n"
2650,method,org/eclipse/jface/viewers/ViewerDropAdapter/setSelectionFeedbackEnabled/boolean," Sets whether selection feedback should be provided during dragging.\n\n @param value <code>true</code> if selection feedback is desired, and\n   <code>false</code> if not\n   \n @since 3.2\n"
2651,method,org/eclipse/jface/viewers/ViewerDropAdapter/setScrollExpandEnabled/boolean," Sets whether auto scrolling and expanding should be provided during dragging.\n\n @param value <code>true</code> if scrolling and expanding is desired, and\n   <code>false</code> if not\n @since 2.0\n"
2652,method,org/eclipse/jface/viewers/ViewerDropAdapter/setExpandEnabled/boolean," Sets whether auto expanding should be provided during dragging.\n\n @param value <code>true</code> if expanding is desired, and\n   <code>false</code> if not\n @since 3.4\n"
2653,method,org/eclipse/jface/viewers/ViewerDropAdapter/setScrollEnabled/boolean," Sets whether auto scrolling should be provided during dragging.\n\n @param value <code>true</code> if scrolling is desired, and\n   <code>false</code> if not\n @since 3.4\n"
2656,field,org/eclipse/jface/viewers/ViewerDropAdapter/LOCATION_BEFORE," Constant describing the position of the cursor relative \n to the target object.  This means the mouse is positioned\n slightly before the target.\n @see #getCurrentLocation()\n"
2657,field,org/eclipse/jface/viewers/ViewerDropAdapter/LOCATION_AFTER," Constant describing the position of the cursor relative \n to the target object.  This means the mouse is positioned\n slightly after the target.\n @see #getCurrentLocation()\n"
2665,class,org/eclipse/jface/viewers/TableLayout," A layout for a table. Call <code>addColumnData</code> to add columns.\n The TableLayout {@link ColumnLayoutData} is only valid until the table\n is resized. To keep the proportions constant when the table is resized \n see {@link TableColumnLayout}\n"
2717,class,org/eclipse/jface/viewers/ContentViewer," A content viewer is a model-based adapter on a widget which accesses its\n model by means of a content provider and a label provider.\n <p>\n A viewer's model consists of elements, represented by objects.\n A viewer defines and implements generic infrastructure for handling model \n input, updates, and selections in terms of elements.\n Input is obtained by querying an <code>IContentProvider</code> which returns\n elements. The elements themselves are not displayed directly.  They are\n mapped to labels, containing text and/or an image, using the viewer's \n <code>ILabelProvider</code>.\n </p>\n <p>\n Implementing a concrete content viewer typically involves the following steps:\n <ul>\n <li>\n create SWT controls for viewer (in constructor) (optional)\n </li>\n <li>\n initialize SWT controls from input (inputChanged)\n </li>\n <li>\n define viewer-specific update methods\n </li>\n <li>\n support selections (<code>setSelection</code>, <code>getSelection</code>)\n </ul>\n </p>\n"
2731,class,org/eclipse/jface/viewers/CellNavigationStrategy," This class implementation the strategy how the table is navigated using the\n keyboard.\n \n <p>\n <b>Subclasses can implement their custom navigation algorithms</b>\n </p>\n \n @since 3.3\n \n"
2742,method,org/eclipse/jface/viewers/ArrayContentProvider/getInstance/," Returns an instance of ArrayContentProvider. Since instances of this\n class do not maintain any state, they can be shared between multiple\n clients.\n \n @return an instance of ArrayContentProvider\n \n @since 3.5\n"
2743,method,org/eclipse/jface/viewers/ArrayContentProvider/getElements/Object," Returns the elements in the input, which must be either an array or a\n <code>Collection</code>. \n"
2750,class,org/eclipse/jface/viewers/DecorationOverlayIcon," A <code>DecorationOverlayIcon</code> is an image descriptor that can be used\n to overlay decoration images on to the 4 corner quadrants of a base image.\n The four quadrants are {@link IDecoration#TOP_LEFT}, {@link IDecoration#TOP_RIGHT},\n {@link IDecoration#BOTTOM_LEFT} and {@link IDecoration#BOTTOM_RIGHT}. Additionally,\n the overlay can be used to provide an underlay corresponding to {@link IDecoration#UNDERLAY}. \n \n @since 3.3\n @see IDecoration\n"
2773,field,org/eclipse/jface/viewers/IDecoration/REPLACE," Constant for replacing the original image. Note that for this to have an\n effect on the resulting decorated image, {@link #ENABLE_REPLACE} has to\n be set to {@link Boolean#TRUE} in the {@link IDecorationContext} (opt-in\n model). If replacement behavior is enabled, the resulting decorated image\n will be constructed by first painting the underlay, then the replacement\n image, and then the regular quadrant images.\n \n @since 3.4\n"
2782,interface,org/eclipse/jface/viewers/IViewerLabelProvider," Extends <code>IBaseLabelProvider</code> with the methods\n to update the label for a given element.  The label is represented by a \n <code>ViewerLabel</code>.\n Unlike <code>ILabelProvider</code>, this allows the text and image to be\n set in the same request, rather than via separate requests.  \n <p>\n It also allows the current values for the text and image to be considered by \n the label provider, allowing for potential optimizations.\n For example, decorating label providers that run in the background can hold off\n applying an update to a previously populated label until the decoration is ready,\n thereby reducing flicker.\n </p>\n \n @see IDelayedLabelDecorator\n @since 3.0\n"
2789,method,org/eclipse/jface/viewers/BaseLabelProvider/fireLabelProviderChanged/LabelProviderChangedEvent," Fires a label provider changed event to all registered listeners Only\n listeners registered at the time this method is called are notified.\n \n @param event\n            a label provider changed event\n \n @see ILabelProviderListener#labelProviderChanged\n"
2804,method,org/eclipse/jface/viewers/IBaseLabelProvider/dispose/," Disposes of this label provider.  When a label provider is\n attached to a viewer, the viewer will automatically call\n this method when the viewer is being closed.  When label providers\n are used outside of the context of a viewer, it is the client's\n responsibility to ensure that this method is called when the\n provider is no longer needed.\n"
2809,interface,org/eclipse/jface/viewers/ITableLabelProvider," Extends <code>IBaseLabelProvider</code> with the methods\n to provide the text and/or image for each column of a given element.  \n Used by table viewers.\n\n @see TableViewer\n"
2838,class,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener," Parties interested in activation and deactivation of editors extend this\n class and implement any or all of the methods\n \n @since 3.3\n \n"
2839,method,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener/beforeEditorActivated/ColumnViewerEditorActivationEvent," Called before an editor is activated\n \n @param event\n            the event\n"
2840,method,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener/afterEditorActivated/ColumnViewerEditorActivationEvent," Called after an editor has been activated\n \n @param event the event\n"
2841,method,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener/beforeEditorDeactivated/ColumnViewerEditorDeactivationEvent," Called before an editor is deactivated\n \n @param event\n            the event\n"
2842,method,org/eclipse/jface/viewers/ColumnViewerEditorActivationListener/afterEditorDeactivated/ColumnViewerEditorDeactivationEvent," Called after an editor is deactivated\n \n @param event the event\n"
2850,method,org/eclipse/jface/viewers/ICellModifier/modify/Object;String;Object," Modifies the value for the given property of the given element.\n Has no effect if the element does not have the given property,\n or if the property cannot be modified.\n <p>\n Note that it is possible for an SWT Item to be passed instead of \n the model element. To handle this case in a safe way, use: \n <pre>\n     if (element instanceof Item) {\n         element = ((Item) element).getData();\n     }\n     // modify the element's property here\n </pre>\n </p>\n \n @param element the model element or SWT Item (see above)\n @param property the property\n @param value the new property value\n \n @see org.eclipse.swt.widgets.Item\n"
2872,method,org/eclipse/jface/viewers/DecoratingStyledCellLabelProvider/setLabelDecorator/ILabelDecorator," Sets the label decorator. Removes all known listeners from the old\n decorator, and adds all known listeners to the new decorator. The old\n decorator is not disposed. Fires a label provider changed event\n indicating that all labels should be updated. Has no effect if the given\n decorator is identical to the current one.\n \n @param newDecorator\n            the label decorator, or <code>null</code> if no decorations\n            are to be applied\n"
2877,method,org/eclipse/jface/viewers/DecoratingStyledCellLabelProvider/DecoratingStyledCellLabelProvider/IStyledLabelProvider;ILabelDecorator;IDecorationContext," Creates a {@link DecoratingStyledCellLabelProvider} that delegates the\n requests for styled labels and for images to a\n {@link DelegatingStyledCellLabelProvider.IStyledLabelProvider}.\n \n @param labelProvider\n            the styled label provider\n @param decorator\n            a label decorator or <code>null</code> to not decorate the\n            label\n @param decorationContext\n            a decoration context or <code>null</code> if the no\n            decorator is configured or the default decorator should be\n            used\n"
2889,method,org/eclipse/jface/viewers/TreePath/hashCode/IElementComparer," Returns a hash code computed from the hash codes of the segments, using\n the given comparer to compute the hash codes of the segments.\n \n @param comparer\n            comparer to use or <code>null</code> if the segments' hash\n            codes should be computed by calling their hashCode() methods.\n @return the computed hash code\n"
2890,method,org/eclipse/jface/viewers/TreePath/equals/TreePath;IElementComparer," Returns whether this path is equivalent to the given path using the\n specified comparer to compare individual elements.\n \n @param otherPath\n            tree path to compare to\n @param comparer\n            comparator to use or <code>null</code> if segments should be\n            compared using equals()\n @return whether the paths are equal\n"
2891,method,org/eclipse/jface/viewers/TreePath/startsWith/TreePath;IElementComparer," Returns whether this path starts with the same segments as the given\n path, using the given comparer to compare segments.\n \n @param treePath\n            path to compare to\n @param comparer\n            the comparer to use, or <code>null</code> if equals() should\n            be used to compare segments\n @return whether the given path is a prefix of this path, or the same as\n         this path\n"
2907,method,org/eclipse/jface/viewers/ViewerLabel/setBackground/Color," Set the background Color.\n \n @param background\n            Color. This value should not be <code>null</code>.\n \n @since 3.1\n"
2909,method,org/eclipse/jface/viewers/ViewerLabel/setFont/Font," Set the font.\n \n @param font\n            Font This value should not be <code>null</code>.\n \n @since 3.1\n"
2911,method,org/eclipse/jface/viewers/ViewerLabel/setForeground/Color," Set the foreground Color.\n \n @param foreground\n            Color This value should not be <code>null</code>.\n \n @since 3.1\n"
2913,method,org/eclipse/jface/viewers/ViewerLabel/setTooltipText/String," Set the tool tip text.\n \n @param tooltipText\n            The tooltipText {@link String} to set. This value should not\n            be <code>null</code>.\n \n @since 3.3\n"
2916,method,org/eclipse/jface/viewers/ViewerLabel/setTooltipBackgroundColor/Color," Set the background {@link Color} for tool tip.\n \n @param tooltipBackgroundColor\n            The {@link Color} to set. This value should not be\n            <code>null</code>.\n \n @since 3.3\n"
2927,class,org/eclipse/jface/viewers/LabelDecorator," The LabelDecorator is an abstract superclass of ILabelDecorators\n that support IDecorationContext.\n @see IDecorationContext\n @since 3.2\n\n"
2928,method,org/eclipse/jface/viewers/LabelDecorator/decorateImage/Image;Object;IDecorationContext," Returns an image that is based on the given image,\n but decorated with additional information relating to the state\n of the provided element taking into account the provided context.\n \n Text and image decoration updates can occur as a result of other updates\n within the workbench including deferred decoration by background processes.\n Clients should handle labelProviderChangedEvents for the given element to get\n the complete decoration.\n @see LabelProviderChangedEvent\n @see IBaseLabelProvider#addListener\n\n @param image the input image to decorate, or <code>null</code> if the element has no image\n @param element the element whose image is being decorated\n @param context additional context information about the element being decorated\n @return the decorated image, or <code>null</code> if no decoration is to be applied\n\n @see org.eclipse.jface.resource.CompositeImageDescriptor\n"
2929,method,org/eclipse/jface/viewers/LabelDecorator/decorateText/String;Object;IDecorationContext," Returns a text label that is based on the given text label,\n but decorated with additional information relating to the state\n of the provided element taking into account the provided context.\n \n Text and image decoration updates can occur as a result of other updates\n within the workbench including deferred decoration by background processes.\n Clients should handle labelProviderChangedEvents for the given element to get\n the complete decoration.\n @see LabelProviderChangedEvent\n @see IBaseLabelProvider#addListener\n\n @param text the input text label to decorate\n @param element the element whose image is being decorated\n @param context additional context information about the element being decorated\n @return the decorated text label, or <code>null</code> if no decoration is to be applied\n"
2941,method,org/eclipse/jface/viewers/FocusCellOwnerDrawHighlighter/onlyTextHighlighting/ViewerCell," Controls whether the whole cell or only the text-area is highlighted\n \n @param cell\n            the cell which is highlighted\n @return <code>true</code> if only the text area should be highlighted\n @since 3.4\n"
2947,method,org/eclipse/jface/viewers/LabelProviderChangedEvent/LabelProviderChangedEvent/IBaseLabelProvider," Creates a new event for the given source, indicating that all labels\n provided by the source are no longer valid and should be updated.\n\n @param source the label provider\n"
2948,method,org/eclipse/jface/viewers/LabelProviderChangedEvent/LabelProviderChangedEvent/IBaseLabelProvider;Object[]," Creates a new event for the given source, indicating that the label\n provided by the source for the given elements is no longer valid and should be updated.\n\n @param source the label provider\n @param elements the element whose labels have changed\n"
2949,method,org/eclipse/jface/viewers/LabelProviderChangedEvent/LabelProviderChangedEvent/IBaseLabelProvider;Object," Creates a new event for the given source, indicating that the label\n provided by the source for the given element is no longer valid and should be updated.\n\n @param source the label provider\n @param element the element whose label needs to be updated\n"
2957,method,org/eclipse/jface/viewers/CellLabelProvider/useNativeToolTip/Object," Return whether or not to use the native tool tip. If you switch to native\n tool tips only the value from {@link #getToolTipText(Object)} is used all\n other features from custom tool tips are not supported.\n \n <p>\n To reset the control to native behavior you should return\n <code>true</code> from this method and <code>null</code> from\n {@link #getToolTipText(Object)} or <code>null</code> from\n {@link #getToolTipText(Object)} and {@link #getToolTipImage(Object)} at\n the same time\n </p>\n \n @param object\n            the {@link Object} for which the tool tip is shown\n @return <code>true</code> if native tool tips should be used\n"
2983,method,org/eclipse/jface/viewers/ViewerRow/getNeighbor/int;boolean," Returns a neighboring row, or <code>null</code> if no neighbor exists in\n the given direction. If <code>sameLevel</code> is <code>true</code>, only\n sibling rows (under the same parent) will be considered.\n \n @param direction\n            the direction {@link #BELOW} or {@link #ABOVE}\n \n @param sameLevel\n            if <code>true</code>, search only within sibling rows\n @return the row above/below, or <code>null</code> if not found\n"
2991,method,org/eclipse/jface/viewers/ViewerRow/getTextBounds/int," The location and bounds of the area where the text is drawn depends on\n various things (image displayed, control with SWT.CHECK)\n \n @param index\n            the column index\n @return the bounds of the of the text area. May return <code>null</code>\n         if the underlying widget implementation doesn't provide this\n         information\n @since 3.4\n"
2992,method,org/eclipse/jface/viewers/ViewerRow/getImageBounds/int," Returns the location and bounds of the area where the image is drawn.\n \n @param index\n            the column index\n @return the bounds of the of the image area. May return <code>null</code>\n         if the underlying widget implementation doesn't provide this\n         information\n @since 3.4\n"
3003,method,org/eclipse/jface/viewers/ColumnViewerToolTipSupport/enableFor/ColumnViewer," Enable ToolTip support for the viewer by creating an instance from this\n class. To get all necessary informations this support class consults the\n {@link CellLabelProvider}.\n\n @param viewer\n            the viewer the support is attached to\n"
3004,method,org/eclipse/jface/viewers/ColumnViewerToolTipSupport/enableFor/ColumnViewer;int," Enable ToolTip support for the viewer by creating an instance from this\n class. To get all necessary informations this support class consults the\n {@link CellLabelProvider}.\n\n @param viewer\n            the viewer the support is attached to\n @param style\n            style passed to control tool tip behavior\n\n @see ToolTip#RECREATE\n @see ToolTip#NO_RECREATE\n"
3010,method,org/eclipse/jface/viewers/ColumnViewerToolTipSupport/ColumnViewerToolTipSupport/ColumnViewer;int;boolean," Enable ToolTip support for the viewer by creating an instance from this\n class. To get all necessary informations this support class consults the\n {@link CellLabelProvider}.\n\n @param viewer\n            the viewer the support is attached to\n @param style\n            style passed to control tool tip behavior\n\n @param manualActivation\n            <code>true</code> if the activation is done manually using\n            {@link #show(Point)}\n"
3031,method,org/eclipse/jface/viewers/StructuredSelection/StructuredSelection/Object," Creates a structured selection containing a single object.\n The object must not be <code>null</code>.\n\n @param element the element\n"
3033,method,org/eclipse/jface/viewers/StructuredSelection/StructuredSelection/List;IElementComparer," Creates a structured selection from the given <code>List</code> and\n element comparer. If an element comparer is provided, it will be used to\n determine equality between structured selection objects provided that\n they both are based on the same (identical) comparer. See bug \n \n @param elements\n            list of selected elements\n @param comparer\n            the comparer, or null\n @since 3.4\n"
3034,field,org/eclipse/jface/viewers/StructuredSelection/EMPTY," The canonical empty selection. This selection should be used instead of\n <code>null</code>.\n"
3039,method,org/eclipse/jface/viewers/ICheckable/setChecked/Object;boolean," Sets the checked state for the given element in this viewer.\n Does not fire events to check state listeners.\n\n @param element the element\n @param state <code>true</code> if the item should be checked,\n  and <code>false</code> if it should be unchecked\n @return <code>true</code> if the checked state could be set, \n  and <code>false</code> otherwise\n"
3043,method,org/eclipse/jface/viewers/TreeNode/getParent/," Returns the parent node.\n \n @return The parent node; may be <code>null</code> if there are no\n         parent nodes.\n"
3044,method,org/eclipse/jface/viewers/TreeNode/getValue/," Returns the value held by this node.\n \n @return The value; may be anything.\n"
3047,method,org/eclipse/jface/viewers/TreeNode/setChildren/TreeNode[]," Sets the children for this node.\n \n @param children\n            The child nodes; may be <code>null</code> or empty. There\n            should be no <code>null</code> children in the array.\n"
3048,method,org/eclipse/jface/viewers/TreeNode/setParent/TreeNode," Sets the parent for this node.\n \n @param parent\n            The parent node; may be <code>null</code>.\n"
3049,method,org/eclipse/jface/viewers/TreeNode/TreeNode/Object," Constructs a new instance of <code>TreeNode</code>.\n \n @param value\n            The value held by this node; may be anything.\n"
3050,field,org/eclipse/jface/viewers/TreeNode/value," The value contained in this node. This value may be anything.\n"
3084,field,org/eclipse/jface/viewers/ColumnViewerEditorActivationEvent/keyCode," <b>Only set for {@link #KEY_PRESSED}</b>\n"
3085,field,org/eclipse/jface/viewers/ColumnViewerEditorActivationEvent/character," <b>Only set for {@link #KEY_PRESSED}</b>\n"
3093,method,org/eclipse/jface/viewers/ICellEditorListener/applyEditorValue/," Notifies that the end user has requested applying a value.\n All cell editors send this notification.\n <p>\n The normal reaction is to update the model with the current cell editor value.\n However, if the value is not valid, it should not be applied. \n A typical text-based cell editor would send this message\n when the end user hits Return, whereas other editors would\n send it whenever their value changes.\n </p>\n"
3094,method,org/eclipse/jface/viewers/ICellEditorListener/cancelEditor/," Notifies that the end user has canceled editing.\n All cell editors send this notification.\n A listener should <b>not</b> update the model based on this\n notification; see <code>applyEditorValue</code>.\n"
3095,method,org/eclipse/jface/viewers/ICellEditorListener/editorValueChanged/boolean;boolean," Notifies that the end user is changing the value in the cell editor. This\n notification is normally sent only by text-based editors in response to a\n keystroke, so that the listener may show an error message reflecting the\n current valid state. This notification is sent while the value is being\n actively edited, before the value is applied or canceled.  A listener should\n <b>not</b> update the model based on this notification; see\n <code>applyEditorValue</code>.\n <p>\n If the <code>newValidState</code> parameter is <code>true</code>,\n the new value may be retrieved by calling <code>ICellEditor.getValue</code>\n on the appropriate cell editor.\n </p>\n \n @param oldValidState the valid state before the end user changed the value\n @param newValidState the current valid state\n"
3112,interface,org/eclipse/jface/viewers/IContentProvider,"\n A content provider mediates between the viewer's model\n and the viewer itself.\n \n @see org.eclipse.jface.viewers.ContentViewer#setContentProvider(IContentProvider)\n"
3113,method,org/eclipse/jface/viewers/IContentProvider/dispose/," Disposes of this content provider.  \n This is called by the viewer when it is disposed.\n <p>\n The viewer should not be updated during this call, as it is in the process\n of being disposed.\n </p>\n"
3114,method,org/eclipse/jface/viewers/IContentProvider/inputChanged/Viewer;Object;Object," Notifies this content provider that the given viewer's input\n has been switched to a different element.\n <p>\n A typical use for this method is registering the content provider as a listener\n to changes on the new input (using model-specific means), and deregistering the viewer \n from the old input. In response to these change notifications, the content provider\n should update the viewer (see the add, remove, update and refresh methods on the viewers).\n </p>\n <p>\n The viewer should not be updated during this call, as it might be in the process\n of being disposed.\n </p>\n\n @param viewer the viewer\n @param oldInput the old input element, or <code>null</code> if the viewer\n   did not previously have an input\n @param newInput the new input element, or <code>null</code> if the viewer\n   does not have an input\n"
3115,class,org/eclipse/jface/viewers/StructuredViewer," Abstract base implementation for structure-oriented viewers (trees, lists,\n tables). Supports custom sorting, filtering, and rendering.\n <p>\n Any number of viewer filters can be added to this viewer (using\n <code>addFilter</code>). When the viewer receives an update, it asks each\n of its filters if it is out of date, and refilters elements as required.\n </p>\n \n @see ViewerFilter\n @see ViewerComparator\n"
3119,method,org/eclipse/jface/viewers/StructuredViewer/addDragSupport/int;Transfer[];DragSourceListener," Adds support for dragging items out of this viewer via a user\n drag-and-drop operation.\n \n @param operations\n            a bitwise OR of the supported drag and drop operation types (\n            <code>DROP_COPY</code>,<code>DROP_LINK</code>, and\n            <code>DROP_MOVE</code>)\n @param transferTypes\n            the transfer types that are supported by the drag operation\n @param listener\n            the callback that will be invoked to set the drag data and to\n            cleanup after the drag and drop operation finishes\n @see org.eclipse.swt.dnd.DND\n"
3120,method,org/eclipse/jface/viewers/StructuredViewer/addDropSupport/int;Transfer[];DropTargetListener," Adds support for dropping items into this viewer via a user drag-and-drop\n operation.\n \n @param operations\n            a bitwise OR of the supported drag and drop operation types (\n            <code>DROP_COPY</code>,<code>DROP_LINK</code>, and\n            <code>DROP_MOVE</code>)\n @param transferTypes\n            the transfer types that are supported by the drop operation\n @param listener\n            the callback that will be invoked after the drag and drop\n            operation finishes\n @see org.eclipse.swt.dnd.DND\n"
3129,method,org/eclipse/jface/viewers/StructuredViewer/filter/Object[]," Returns the result of running the given elements through the filters.\n \n @param elements\n            the elements to filter\n @return only the elements which all filters accept\n"
3131,method,org/eclipse/jface/viewers/StructuredViewer/findItems/Object," Finds the widgets which represent the given element. The returned array\n must not be changed by clients; it might change upon calling other\n methods on this viewer.\n <p>\n This method was introduced to support multiple equal elements in a viewer\n (@see {@link AbstractTreeViewer}). Multiple equal elements are only\n supported if the element map is enabled by calling\n {@link #setUseHashlookup(boolean)} and passing <code>true</code>.\n </p>\n <p>\n The default implementation of this method tries first to find the widget\n for the given element assuming that it is the viewer's input; this is\n done by calling <code>doFindInputItem</code>. If it is not found\n there, the widgets are looked up in the internal element map provided\n that this feature has been enabled. If the element map is disabled, the\n widget is found via <code>doFindInputItem</code>.\n </p>\n \n @param element\n            the element\n @return the corresponding widgets\n \n @since 3.2\n"
3132,method,org/eclipse/jface/viewers/StructuredViewer/fireDoubleClick/DoubleClickEvent," Notifies any double-click listeners that a double-click has been\n received. Only listeners registered at the time this method is called are\n notified.\n \n @param event\n            a double-click event\n \n @see IDoubleClickListener#doubleClick\n"
3133,method,org/eclipse/jface/viewers/StructuredViewer/fireOpen/OpenEvent," Notifies any open event listeners that a open event has been received.\n Only listeners registered at the time this method is called are notified.\n \n @param event\n            a double-click event\n \n @see IOpenListener#open(OpenEvent)\n"
3134,method,org/eclipse/jface/viewers/StructuredViewer/firePostSelectionChanged/SelectionChangedEvent," Notifies any post selection listeners that a post selection event has\n been received. Only listeners registered at the time this method is\n called are notified.\n \n @param event\n            a selection changed event\n \n @see #addPostSelectionChangedListener(ISelectionChangedListener)\n"
3136,method,org/eclipse/jface/viewers/StructuredViewer/getFilteredChildren/Object," Returns the filtered array of children of the given element. The\n resulting array must not be modified, as it may come directly from the\n model's internal state.\n \n @param parent\n            the parent element\n @return a filtered array of child elements\n"
3139,method,org/eclipse/jface/viewers/StructuredViewer/getRawChildren/Object," Returns the children of the given parent without sorting and filtering\n them. The resulting array must not be modified, as it may come directly\n from the model's internal state.\n <p>\n Returns an empty array if the given parent is <code>null</code>.\n </p>\n \n @param parent\n            the parent element\n @return the child elements\n"
3143,method,org/eclipse/jface/viewers/StructuredViewer/getSortedChildren/Object," Returns the sorted and filtered set of children of the given element. The\n resulting array must not be modified, as it may come directly from the\n model's internal state.\n \n @param parent\n            the parent element\n @return a sorted and filtered array of child elements\n"
3145,method,org/eclipse/jface/viewers/StructuredViewer/getComparator/," Return this viewer's comparator used to sort elements.\n This method should be used instead of <code>getSorter()</code>.\n \n @return a viewer comparator, or <code>null</code> if none\n\n @since 3.2\n"
3158,method,org/eclipse/jface/viewers/StructuredViewer/preservingSelection/Runnable," Attempts to preserves the current selection across a run of the given\n code. This method should not preserve the selection if\n {link #getPreserveSelection()} returns false.\n <p>\n The default implementation of this method:\n <ul>\n <li>discovers the old selection (via <code>getSelection</code>)</li>\n <li>runs the given runnable</li>\n <li>attempts to restore the old selection (using\n <code>setSelectionToWidget</code></li>\n <li>rediscovers the resulting selection (via <code>getSelection</code>)</li>\n <li>calls <code>handleInvalidSelection</code> if the resulting selection\n is different from the old selection</li>\n </ul>\n </p>\n \n @param updateCode\n            the code to run\n \n see #getPreserveSelection()\n"
3160,method,org/eclipse/jface/viewers/StructuredViewer/refresh/boolean," Refreshes this viewer with information freshly obtained from this\n viewer's model. If <code>updateLabels</code> is <code>true</code>\n then labels for otherwise unaffected elements are updated as well.\n Otherwise, it assumes labels for existing elements are unchanged, and\n labels are only obtained as needed (for example, for new elements).\n <p>\n Calling <code>refresh(true)</code> has the same effect as\n <code>refresh()</code>.\n <p>\n Note that the implementation may still obtain labels for existing\n elements even if <code>updateLabels</code> is false. The intent is\n simply to allow optimization where possible.\n \n @param updateLabels\n            <code>true</code> to update labels for existing elements,\n            <code>false</code> to only update labels as needed, assuming\n            that labels for existing elements are unchanged.\n \n @since 2.0\n"
3161,method,org/eclipse/jface/viewers/StructuredViewer/refresh/Object," Refreshes this viewer starting with the given element.\n <p>\n Unlike the <code>update</code> methods, this handles structural changes\n to the given element (e.g. addition or removal of children). If only the\n given element needs updating, it is more efficient to use the\n <code>update</code> methods.\n </p>\n \n @param element\n            the element\n"
3167,method,org/eclipse/jface/viewers/StructuredViewer/removeFilter/ViewerFilter," Removes the given filter from this viewer, and triggers refiltering and\n resorting of the elements if required. Has no effect if the identical\n filter is not registered. If you want to remove more than one filter\n consider using {@link StructuredViewer#setFilters(ViewerFilter[])}.\n \n @param filter\n            a viewer filter\n @see StructuredViewer#setFilters(ViewerFilter[])\n"
3170,method,org/eclipse/jface/viewers/StructuredViewer/reveal/Object," Ensures that the given element is visible, scrolling the viewer if\n necessary. The selection is unchanged.\n \n @param element\n            the element to reveal\n"
3178,method,org/eclipse/jface/viewers/StructuredViewer/setComparator/ViewerComparator," Sets this viewer's comparator to be used for sorting elements, and triggers refiltering and \n resorting of this viewer's element.  <code>null</code> turns sorting off.\n To get the viewer's comparator, call <code>getComparator()</code>.\n <p>\n IMPORTANT: This method was introduced in 3.2. If a reference to this viewer object \n is passed to clients who call <code>getSorter()<code>, null may be returned from\n from that method even though the viewer is sorting its elements using the\n viewer's comparator.\n </p>\n \n @param comparator a viewer comparator, or <code>null</code> if none\n\n @since 3.2\n"
3179,method,org/eclipse/jface/viewers/StructuredViewer/setUseHashlookup/boolean," Configures whether this structured viewer uses an internal hash table to\n speeds up the mapping between elements and SWT items. This must be called\n before the viewer is given an input (via <code>setInput</code>).\n \n @param enable\n            <code>true</code> to enable hash lookup, and\n            <code>false</code> to disable it\n"
3191,method,org/eclipse/jface/viewers/StructuredViewer/usingElementMap/," Returns whether this structured viewer is configured to use an internal\n map to speed up the mapping between elements and SWT items.\n <p>\n The default implementation of this framework method checks whether the\n internal map has been initialized.\n </p>\n \n @return <code>true</code> if the element map is enabled, and\n         <code>false</code> if disabled\n"
3199,method,org/eclipse/jface/viewers/StructuredViewer/ColorAndFontCollectorWithProviders/applyFontsAndColors/TableItem," Apply the fonts and colors to the control if\n required.\n @param control\n"
3207,method,org/eclipse/jface/viewers/StructuredViewer/ColorAndFontCollector/applyFontsAndColors/TableItem," Apply the fonts and colors to the control if\n required.\n @param control\n"
3208,method,org/eclipse/jface/viewers/StructuredViewer/ColorAndFontCollector/applyFontsAndColors/TreeItem," Apply the fonts and colors to the control if\n required.\n @param control\n"
3209,method,org/eclipse/jface/viewers/StructuredViewer/ColorAndFontCollector/applyFontsAndColors/TableTreeItem," Apply the fonts and colors to the control if\n required.\n @param control\n"
3220,method,org/eclipse/jface/viewers/ITreeContentProvider/getChildren/Object," Returns the child elements of the given parent element.\n <p>\n The difference between this method and <code>IStructuredContentProvider.getElements</code> \n is that <code>getElements</code> is called to obtain the \n tree viewer's root elements, whereas <code>getChildren</code> is used\n to obtain the children of a given parent element in the tree (including a root).\n </p>\n The result is not modified by the viewer.\n\n @param parentElement the parent element\n @return an array of child elements\n"
3222,method,org/eclipse/jface/viewers/ITreeContentProvider/hasChildren/Object," Returns whether the given element has children.\n <p>\n Intended as an optimization for when the viewer does not\n need the actual children.  Clients may be able to implement\n this more efficiently than <code>getChildren</code>.\n </p>\n\n @param element the element\n @return <code>true</code> if the given element has children,\n  and <code>false</code> if it has no children\n"
3223,interface,org/eclipse/jface/viewers/ILazyTreeContentProvider," The ILazyTreeContentProvider is the content provider for tree viewers created\n using the SWT.VIRTUAL flag that only wish to return their contents as they\n are queried.\n \n @since 3.2\n"
3224,method,org/eclipse/jface/viewers/ILazyTreeContentProvider/updateElement/Object;int," Called when a previously-blank item becomes visible in the TreeViewer. If\n the content provider knows the child element for the given parent at this\n index, it should respond by calling\n {@link TreeViewer#replace(Object, int, Object)}. The content provider\n should also update the child count for any replaced element by calling\n {@link TreeViewer#setChildCount(Object, int)}. If the given current child\n count is already correct, setChildCount does not have to be called since\n a call to replace will not change the child count.\n \n <strong>NOTE</strong> #updateElement(int index) can be used to determine\n selection values. If TableViewer#replace(Object, int) is not called\n before returning from this method, selections may have missing or stale\n elements. In this situation it is suggested that the selection is asked\n for again after replace() has been called.\n \n @param parent\n            The parent of the element, or the viewer's input if the\n            element to update is a root element\n @param index\n            The index of the element to update in the tree\n"
3225,method,org/eclipse/jface/viewers/ILazyTreeContentProvider/updateChildCount/Object;int," Called when the TreeViewer needs an up-to-date child count for the given\n element, for example from {@link TreeViewer#refresh()} and\n {@link TreeViewer#setInput(Object)}. If the content provider knows the\n given element, it should respond by calling\n {@link TreeViewer#setChildCount(Object, int)}. If the given current\n child count is already correct, no action has to be taken by this content\n provider.\n \n @param element\n            The element for which an up-to-date child count is needed, or\n            the viewer's input if the number of root elements is requested \n @param currentChildCount \n 			  The current child count for the element that needs updating\n"
3235,method,org/eclipse/jface/viewers/AbstractTableViewer/add/Object[]," Adds the given elements to this table viewer. If this viewer does not\n have a sorter, the elements are added at the end in the order given;\n otherwise the elements are inserted at appropriate positions.\n <p>\n This method should be called (by the content provider) when elements have\n been added to the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param elements\n            the elements to add\n"
3236,method,org/eclipse/jface/viewers/AbstractTableViewer/internalCreateNewRowPart/int;int," Create a new row.  Callers can only use the returned object locally and before\n making the next call on the viewer since it may be re-used for subsequent method\n calls.\n\n @param style\n            the style for the new row\n @param rowIndex\n            the index of the row or -1 if the row is appended at the end\n @return the newly created row\n"
3243,method,org/eclipse/jface/viewers/AbstractTableViewer/getLabelProvider/," The table viewer implementation of this <code>Viewer</code> framework\n method returns the label provider, which in the case of table viewers\n will be an instance of either <code>ITableLabelProvider</code> or\n <code>ILabelProvider</code>. If it is an\n <code>ITableLabelProvider</code>, then it provides a separate label\n text and image for each column. If it is an <code>ILabelProvider</code>,\n then it provides only the label text and image for the first column, and\n any remaining columns are blank.\n"
3245,method,org/eclipse/jface/viewers/AbstractTableViewer/indexForElement/Object," @param element\n            the element to insert\n @return the index where the item should be inserted.\n"
3247,method,org/eclipse/jface/viewers/AbstractTableViewer/insert/Object;int," Inserts the given element into this table viewer at the given position.\n If this viewer has a sorter, the position is ignored and the element is\n inserted at the correct position in the sort order.\n <p>\n This method should be called (by the content provider) when elements have\n been added to the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param element\n            the element\n @param position\n            a 0-based position relative to the model, or -1 to indicate\n            the last position\n"
3250,method,org/eclipse/jface/viewers/AbstractTableViewer/remove/Object[]," Removes the given elements from this table viewer. The selection is\n updated if required.\n <p>\n This method should be called (by the content provider) when elements have\n been removed from the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param elements\n            the elements to remove\n"
3255,method,org/eclipse/jface/viewers/AbstractTableViewer/replace/Object;int," Replace the element at the given index with the given element. This\n method will not call the content provider to verify. <strong>Note that\n this method will materialize a TableItem the given index.</strong>.\n \n @param element\n @param index\n @see ILazyContentProvider\n \n @since 3.1\n"
3269,method,org/eclipse/jface/viewers/AbstractTableViewer/doRemove/int;int," Removes the items from the receiver which are between the given\n zero-relative start and end indices (inclusive).\n\n @param start\n            the start of the range\n @param end\n            the end of the range\n\n @exception IllegalArgumentException -\n                if either the start or end are not between 0 and the\n                number of elements in the list minus 1 (inclusive)\n\n @since 3.3\n"
3274,method,org/eclipse/jface/viewers/AbstractTableViewer/doSetSelection/Item[]," Sets the receiver's selection to be the given array of items. The current\n selection is cleared before the new items are selected.\n <p>\n Items that are not in the receiver are ignored. If the receiver is\n single-select and multiple items are specified, then all items are\n ignored.\n </p>\n\n @param items\n            the array of items\n\n @exception IllegalArgumentException -\n                if the array of items is null\n\n @since 3.3\n"
3276,method,org/eclipse/jface/viewers/AbstractTableViewer/doClear/int," Clears the item at the given zero-relative index in the receiver. The\n text, icon and other attributes of the item are set to the default value.\n If the table was created with the <code>SWT.VIRTUAL</code> style, these\n attributes are requested again as needed.\n\n @param index\n            the index of the item to clear\n\n @exception IllegalArgumentException -\n                if the index is not between 0 and the number of elements\n                in the list minus 1 (inclusive)\n\n @see SWT#VIRTUAL\n @see SWT#SetData\n\n @since 3.3\n"
3277,method,org/eclipse/jface/viewers/AbstractTableViewer/doSelect/int[]," Selects the items at the given zero-relative indices in the receiver.\n The current selection is not cleared before the new items are selected.\n <p>\n If the item at a given index is not selected, it is selected.\n If the item at a given index was already selected, it remains selected.\n Indices that are out of range and duplicate indices are ignored.\n If the receiver is single-select and multiple indices are specified,\n then all indices are ignored.\n </p>\n\n @param indices the array of indices for the items to select\n\n @exception IllegalArgumentException - if the array of indices is null\n\n"
3280,method,org/eclipse/jface/viewers/AbstractTreeViewer/add/Object;Object[]," Adds the given child elements to this viewer as children of the given\n parent element. If this viewer does not have a sorter, the elements are\n added at the end of the parent's list of children in the order given;\n otherwise, the elements are inserted at the appropriate positions.\n <p>\n This method should be called (by the content provider) when elements have\n been added to the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param parentElementOrTreePath\n            the parent element\n @param childElements\n            the child elements to add\n"
3282,method,org/eclipse/jface/viewers/AbstractTreeViewer/internalAdd/Widget;Object;Object[]," Adds the given child elements to this viewer as children of the given\n parent element.\n <p>\n EXPERIMENTAL. Not to be used except by JDT. This method was added to\n support JDT's explorations into grouping by working sets. This method\n cannot be removed without breaking binary backwards compatibility, but\n should not be called by clients.\n </p>\n\n @param widget\n            the widget for the parent element\n @param parentElementOrTreePath\n            the parent element\n @param childElements\n            the child elements to add\n @since 3.1\n"
3283,method,org/eclipse/jface/viewers/AbstractTreeViewer/indexForElement/Widget;Object," Returns the index where the item should be inserted.\n\n @param parent\n            The parent widget the element will be inserted into.\n @param element\n            The element to insert.\n @return the index of the element\n"
3294,method,org/eclipse/jface/viewers/AbstractTreeViewer/createTreeItem/Widget;Object;int," Creates a single item for the given parent and synchronizes it with the\n given element.\n\n @param parent\n            the parent widget\n @param element\n            the element\n @param index\n            if non-negative, indicates the position to insert the item\n            into its parent\n"
3304,method,org/eclipse/jface/viewers/AbstractTreeViewer/fireTreeCollapsed/TreeExpansionEvent," Fires a tree collapsed event. Only listeners registered at the time this\n method is called are notified.\n\n @param event\n            the tree expansion event\n @see ITreeViewerListener#treeCollapsed\n"
3305,method,org/eclipse/jface/viewers/AbstractTreeViewer/fireTreeExpanded/TreeExpansionEvent," Fires a tree expanded event. Only listeners registered at the time this\n method is called are notified.\n\n @param event\n            the tree expansion event\n @see ITreeViewerListener#treeExpanded\n"
3315,method,org/eclipse/jface/viewers/AbstractTreeViewer/getNextItem/Item;boolean," Returns the item after the given item in the tree, or <code>null</code>\n if there is no next item.\n\n @param item\n            the item\n @param includeChildren\n            <code>true</code> if the children are considered in\n            determining which item is next, and <code>false</code> if\n            subtrees are ignored\n @return the next item, or <code>null</code> if none\n"
3317,method,org/eclipse/jface/viewers/AbstractTreeViewer/getPreviousItem/Item," Returns the item before the given item in the tree, or <code>null</code>\n if there is no previous item.\n\n @param item\n            the item\n @return the previous item, or <code>null</code> if none\n"
3326,method,org/eclipse/jface/viewers/AbstractTreeViewer/internalInitializeTree/Control," Initializes the tree with root items, expanding to the appropriate\n level if necessary.\n\n @param tree the tree control\n @since 3.3\n"
3327,method,org/eclipse/jface/viewers/AbstractTreeViewer/internalCollapseToLevel/Widget;int," Recursively collapses the subtree rooted at the given widget to the given\n level.\n <p>\n </p>\n Note that the default implementation of this method does not call\n <code>setRedraw</code>.\n\n @param widget\n            the widget\n @param level\n            non-negative level, or <code>ALL_LEVELS</code> to collapse\n            all levels of the tree\n"
3328,method,org/eclipse/jface/viewers/AbstractTreeViewer/internalExpand/Object;boolean," Tries to create a path of tree items for the given element or tree path.\n This method recursively walks up towards the root of the tree and in the\n case of an element (rather than a tree path) assumes that\n <code>getParent</code> returns the correct parent of an element.\n\n @param elementOrPath\n            the element\n @param expand\n            <code>true</code> if all nodes on the path should be\n            expanded, and <code>false</code> otherwise\n @return Widget\n"
3334,method,org/eclipse/jface/viewers/AbstractTreeViewer/internalRefresh/Widget;Object;boolean;boolean," Refreshes the tree starting at the given widget.\n <p>\n EXPERIMENTAL. Not to be used except by JDT. This method was added to\n support JDT's explorations into grouping by working sets. This method\n cannot be removed without breaking binary backwards compatibility, but\n should not be called by clients.\n </p>\n\n @param widget\n            the widget\n @param element\n            the element\n @param doStruct\n            <code>true</code> if structural changes are to be picked up,\n            and <code>false</code> if only label provider changes are of\n            interest\n @param updateLabels\n            <code>true</code> to update labels for existing elements,\n            <code>false</code> to only update labels as needed, assuming\n            that labels for existing elements are unchanged.\n @since 3.1\n"
3335,method,org/eclipse/jface/viewers/AbstractTreeViewer/internalRemove/Object[]," Removes the given elements from this viewer.\n <p>\n EXPERIMENTAL. Not to be used except by JDT. This method was added to\n support JDT's explorations into grouping by working sets. This method\n cannot be removed without breaking binary backwards compatibility, but\n should not be called by clients.\n </p>\n\n @param elementsOrPaths\n            the elements or element paths to remove\n @since 3.1\n"
3340,method,org/eclipse/jface/viewers/AbstractTreeViewer/remove/Object[]," Removes the given elements from this viewer. The selection is updated if\n required.\n <p>\n This method should be called (by the content provider) when elements have\n been removed from the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param elementsOrTreePaths\n            the elements to remove\n"
3341,method,org/eclipse/jface/viewers/AbstractTreeViewer/remove/Object;Object[]," Removes the given elements from this viewer whenever they appear as\n children of the given parent element. If the given elements also appear\n as children of some other parent, the other parent will remain unchanged.\n The selection is updated if required.\n <p>\n This method should be called (by the content provider) when elements have\n been removed from the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param parent\n            the parent of the elements to remove\n @param elements\n            the elements to remove\n\n @since 3.2\n"
3348,method,org/eclipse/jface/viewers/AbstractTreeViewer/setAutoExpandLevel/int," Sets the auto-expand level to be used when the input of the viewer is set\n using {@link #setInput(Object)}. The value 0 means that there is no\n auto-expand; 1 means that the invisible root element is expanded (since\n most concrete subclasses do not show the root element, there is usually\n no practical difference between using the values 0 and 1); 2 means that\n top-level elements are expanded, but not their children; 3 means that\n top-level elements are expanded, and their children, but not\n grandchildren; and so on.\n <p>\n The value <code>ALL_LEVELS</code> means that all subtrees should be\n expanded.\n </p>\n <p>\n Note that in previous releases, the Javadoc for this method had an off-by\n one error. See bug 177669 for details.\n </p>\n \n @param level\n            non-negative level, or <code>ALL_LEVELS</code> to expand all\n            levels of the tree\n"
3352,method,org/eclipse/jface/viewers/AbstractTreeViewer/setExpandedElements/Object[]," Sets which nodes are expanded in this viewer's tree. The given list\n contains the elements that are to be expanded; all other nodes are to be\n collapsed.\n <p>\n This method is typically used when restoring the interesting state of a\n viewer captured by an earlier call to <code>getExpandedElements</code>.\n </p>\n\n @param elements\n            the array of expanded elements\n @see #getExpandedElements\n"
3353,method,org/eclipse/jface/viewers/AbstractTreeViewer/setExpandedTreePaths/TreePath[]," Sets which nodes are expanded in this viewer's tree. The given list\n contains the tree paths that are to be expanded; all other nodes are to\n be collapsed.\n <p>\n This method is typically used when restoring the interesting state of a\n viewer captured by an earlier call to <code>getExpandedTreePaths</code>.\n </p>\n\n @param treePaths\n            the array of expanded tree paths\n @see #getExpandedTreePaths()\n\n @since 3.2\n"
3358,method,org/eclipse/jface/viewers/AbstractTreeViewer/updateChildren/Widget;Object;Object[]," Updates the tree items to correspond to the child elements of the given\n parent element. If null is passed for the children, this method obtains\n them (only if needed).\n\n @param widget\n            the widget\n @param parent\n            the parent element\n @param elementChildren\n            the child elements, or null\n @deprecated this is no longer called by the framework\n"
3359,method,org/eclipse/jface/viewers/AbstractTreeViewer/getChildren/Widget;Object[]," Not to be called by clients. Return the items to be refreshed as part of\n an update. elementChildren are the new elements.\n \n @param widget\n @param elementChildren\n @since 3.4\n @return Item[]\n \n @deprecated This method was inadvertently released as API but is not\n             intended to be called by clients.\n"
3360,method,org/eclipse/jface/viewers/AbstractTreeViewer/updatePlus/Item;Object," Updates the "+"/"-" icon of the tree node from the given element. It\n calls <code>isExpandable</code> to determine whether an element is\n expandable.\n\n @param item\n            the item\n @param element\n            the element\n"
3361,method,org/eclipse/jface/viewers/AbstractTreeViewer/getVisibleExpandedElements/," Gets the expanded elements that are visible to the user. An expanded\n element is only visible if the parent is expanded.\n\n @return the visible expanded elements\n @since 2.0\n"
3366,method,org/eclipse/jface/viewers/AbstractTreeViewer/insert/Object;Object;int," Inserts the given element as a new child element of the given parent\n element at the given position. If this viewer has a sorter, the position\n is ignored and the element is inserted at the correct position in the\n sort order.\n <p>\n This method should be called (by the content provider) when elements have\n been added to the model, in order to cause the viewer to accurately\n reflect the model. This method only affects the viewer, not the model.\n </p>\n\n @param parentElementOrTreePath\n            the parent element, or the tree path to the parent\n @param element\n            the element\n @param position\n            a 0-based position relative to the model, or -1 to indicate\n            the last position\n\n @since 3.2\n"
3371,method,org/eclipse/jface/viewers/AbstractTreeViewer/buildLabel/ViewerLabel;Object," This implementation of buildLabel handles tree paths as well as elements.\n\n @param updateLabel\n            the ViewerLabel to collect the result in\n @param elementOrPath\n            the element or tree path for which a label should be built\n\n @see org.eclipse.jface.viewers.StructuredViewer#buildLabel(org.eclipse.jface.viewers.ViewerLabel,\n      java.lang.Object)\n"
3375,field,org/eclipse/jface/viewers/AbstractTreeViewer/ALL_LEVELS," Constant indicating that all levels of the tree should be expanded or\n collapsed.\n\n @see #expandToLevel(int)\n @see #collapseToLevel(Object, int)\n"
3386,interface,org/eclipse/jface/viewers/ICheckStateProvider," Interface to provide checked and grayed state information about data in trees\n or tables. The following chart determines the checkbox state:\n <table border="1">\n 	<tr align="center">\n 		<td/>\n 		<td/>\n 		<td colspan="2"><strong><code>isGrayed()</code></strong></td>\n 	</tr>\n 	<tr align="center">\n 		<td/>\n 		<td/>\n 		<td><code>false</code></td>\n 		<td><code>true</code></td>\n 	</tr>\n 	<tr align="center">\n 		<td rowspan="2"><strong><code>isChecked()</code></strong></td>\n 		<td><code>false</code></td>\n 		<td colspan="2">unchecked</td>\n 	</tr>\n 	<tr align="center">\n 		<td><code>true</code></td>\n 		<td>checked</td>\n 		<td>grayed</td>\n 	</tr>\n </table>\n @since 3.5\n"
3387,method,org/eclipse/jface/viewers/ICheckStateProvider/isChecked/Object," Indicates if an element's representation should appear as checked or \n gray instead of unchecked. If this method returns <code>true</code>\n the {@link ICheckStateProvider#isGrayed(Object)} method will determine\n whether the check box displays a check mark ("checked") or a box \n ("grayed").\n @param element \n @return true if the element should be checked or grayed, false if it \n 		should be unchecked\n"
3388,method,org/eclipse/jface/viewers/ICheckStateProvider/isGrayed/Object," Indicates whether the check box associated with an element, when checked\n as indicated by the {@link ICheckStateProvider#isChecked(Object)} method,\n should display the gray (boxed) state instead of the check mark.  \n @param element\n @return true if the element should be gray\n"
3418,method,org/eclipse/jface/viewers/TableViewer/refresh/boolean;boolean," Refreshes this viewer with information freshly obtained from this\n viewer's model. If <code>updateLabels</code> is <code>true</code> then\n labels for otherwise unaffected elements are updated as well. Otherwise,\n it assumes labels for existing elements are unchanged, and labels are\n only obtained as needed (for example, for new elements).\n <p>\n Calling <code>refresh(true)</code> has the same effect as\n <code>refresh()</code>.\n <p>\n Note that the implementation may still obtain labels for existing\n elements even if <code>updateLabels</code> is false. The intent is simply\n to allow optimization where possible.\n \n @param updateLabels\n 		<code>true</code> to update labels for existing elements,\n 		<code>false</code> to only update labels as needed, assuming that labels\n 		for existing elements are unchanged.\n @param reveal\n 		<code>true</code> to make the preserved selection visible afterwards\n \n @since 3.3\n"
3437,method,org/eclipse/jface/viewers/CheckboxTreeViewer/setCheckStateProvider/ICheckStateProvider," Sets the {@link ICheckStateProvider} for this {@link CheckboxTreeViewer}.\n The check state provider will supply the logic for deciding whether the\n check box associated with each item should be checked, grayed or \n unchecked. \n @param checkStateProvider	The provider.\n @since 3.5\n"
3439,method,org/eclipse/jface/viewers/CheckboxTreeViewer/fireCheckStateChanged/CheckStateChangedEvent," Notifies any check state listeners that the check state of an element has changed.\n Only listeners registered at the time this method is called are notified.\n\n @param event a check state changed event\n\n @see ICheckStateListener#checkStateChanged\n"
3449,method,org/eclipse/jface/viewers/CheckboxTreeViewer/setCheckedElements/Object[]," Sets which elements are checked in this viewer's tree.\n The given list contains the elements that are to be checked;\n all other elements are to be unchecked.\n Does not fire events to check state listeners.\n <p>\n This method is typically used when restoring the interesting\n state of a viewer captured by an earlier call to <code>getCheckedElements</code>.\n </p>\n\n @param elements the array of checked elements\n @see #getCheckedElements\n"
3450,method,org/eclipse/jface/viewers/CheckboxTreeViewer/setGrayed/Object;boolean," Sets the grayed state for the given element in this viewer.\n\n @param element the element\n @param state <code>true</code> if the item should be grayed,\n  and <code>false</code> if it should be ungrayed\n @return <code>true</code> if the gray state could be set, \n  and <code>false</code> otherwise\n"
3451,method,org/eclipse/jface/viewers/CheckboxTreeViewer/setGrayChecked/Object;boolean," Check and gray the selection rather than calling both\n setGrayed and setChecked as an optimization.\n Does not fire events to check state listeners.\n @param element the item being checked\n @param state a boolean indicating selection or deselection\n @return boolean indicating success or failure.\n"
3452,method,org/eclipse/jface/viewers/CheckboxTreeViewer/setGrayedElements/Object[]," Sets which elements are grayed in this viewer's tree.\n The given list contains the elements that are to be grayed;\n all other elements are to be ungrayed.\n <p>\n This method is typically used when restoring the interesting\n state of a viewer captured by an earlier call to <code>getGrayedElements</code>.\n </p>\n\n @param elements the array of grayed elements\n\n @see #getGrayedElements\n"
3453,method,org/eclipse/jface/viewers/CheckboxTreeViewer/setParentsGrayed/Object;boolean," Sets the grayed state for the given element and its parents\n in this viewer.\n\n @param element the element\n @param state <code>true</code> if the item should be grayed,\n  and <code>false</code> if it should be ungrayed\n @return <code>true</code> if the element is visible and the gray\n  state could be set, and <code>false</code> otherwise\n @see #setGrayed\n"
3458,method,org/eclipse/jface/viewers/CheckboxTreeViewer/CheckboxTreeViewer/Tree," Creates a tree viewer on the given tree control.\n The <code>SWT.CHECK</code> style bit must be set on the given tree control.\n The viewer has no input, no content provider, a default label provider, \n no sorter, and no filters.\n\n @param tree the tree control\n"
3460,method,org/eclipse/jface/viewers/ITreePathContentProvider/getChildren/TreePath," Returns the child elements of the last element in the given path.\n Implementors may want to use the additional context of the complete path\n of a parent element in order to decide which children to return.\n <p>\n The provided path is relative to the input. The root elements must\n be obtained by calling\n {@link IStructuredContentProvider#getElements(Object)}.\n </p>\n The result is not modified by the viewer.\n \n @param parentPath\n            the path of the parent element\n @return an array of child elements\n"
3461,method,org/eclipse/jface/viewers/ITreePathContentProvider/hasChildren/TreePath," Returns whether the last element of the given path has children.\n <p>\n Intended as an optimization for when the viewer does not need the actual\n children. Clients may be able to implement this more efficiently than\n <code>getChildren</code>.\n </p>\n \n @param path\n            the path\n @return <code>true</code> if the lat element of the path has children,\n         and <code>false</code> if it has no children\n"
3462,method,org/eclipse/jface/viewers/ITreePathContentProvider/getParents/Object," Return the possible parent paths for the given element. An empty array\n can be returned if the paths cannot be computed. If the element is \n a potential child of the input of the viewer, an empty tree path\n should be an entry in the returned array.\n \n @param element\n            the element\n @return the possible parent paths for the given element\n"
3465,class,org/eclipse/jface/viewers/CellEditor," Abstract base class for cell editors. Implements property change listener\n handling, and SWT window management.\n <p>\n Subclasses implement particular kinds of cell editors. This package contains\n various specialized cell editors:\n <ul>\n <li><code>TextCellEditor</code> - for simple text strings</li>\n <li><code>ColorCellEditor</code> - for colors</li>\n <li><code>ComboBoxCellEditor</code> - value selected from drop-down combo\n box</li>\n <li><code>CheckboxCellEditor</code> - boolean valued checkbox</li>\n <li><code>DialogCellEditor</code> - value from arbitrary dialog</li>\n </ul>\n </p>\n"
3476,method,org/eclipse/jface/viewers/CellEditor/fireApplyEditorValue/," Notifies all registered cell editor listeners of an apply event. Only\n listeners registered at the time this method is called are notified.\n\n @see ICellEditorListener#applyEditorValue\n"
3478,method,org/eclipse/jface/viewers/CellEditor/fireEditorValueChanged/boolean;boolean," Notifies all registered cell editor listeners of a value change.\n\n @param oldValidState\n            the valid state before the end user changed the value\n @param newValidState\n            the current valid state\n @see ICellEditorListener#editorValueChanged\n"
3483,method,org/eclipse/jface/viewers/CellEditor/getErrorMessage/," Returns the current error message for this cell editor.\n\n @return the error message if the cell editor is in an invalid state, and\n         <code>null</code> if the cell editor is valid\n"
3492,method,org/eclipse/jface/viewers/CellEditor/isDirty/," Returns whether the value of this cell editor has changed since the last\n call to <code>setValue</code>.\n\n @return <code>true</code> if the value has changed, and\n         <code>false</code> if unchanged\n"
3512,method,org/eclipse/jface/viewers/CellEditor/setErrorMessage/String," Sets or clears the current error message for this cell editor.\n <p>\n No formatting is done here, the message to be set is expected to be fully\n formatted before being passed in.\n </p>\n\n @param message\n            the error message, or <code>null</code> to clear\n"
3517,method,org/eclipse/jface/viewers/CellEditor/valueChanged/boolean;boolean," The value has changed. Updates the valid state flag, marks this cell\n editor as dirty, and notifies all registered cell editor listeners of a\n value change.\n\n @param oldValidState\n            the valid state before the end user changed the value\n @param newValidState\n            the current valid state\n @see ICellEditorListener#editorValueChanged\n"
3518,method,org/eclipse/jface/viewers/CellEditor/activate/ColumnViewerEditorActivationEvent," Activate the editor but also inform the editor which event triggered its\n activation. <b>The default implementation simply calls\n {@link #activate()}</b>\n\n @param activationEvent\n            the editor activation event\n @since 3.3\n"
3536,field,org/eclipse/jface/viewers/CellEditor/LayoutData/grabHorizontal," Indicates control grabs additional space; <code>true</code> by\n default.\n"
3542,interface,org/eclipse/jface/viewers/IDelayedLabelDecorator," A delayed label decorator is a label decorator that may not have a\n decoration available immediately. This interface defines the methods for\n requesting the preparation of a decorator for an object and for querying\n if the decorator is ready. Interested parties should register an\n ILabelProviderListener with a delayed label decorator in order to be informed\n when the decoration is ready.\n @since 3.0\n"
3544,class,org/eclipse/jface/viewers/Viewer," A viewer is a model-based adapter on a widget.\n <p>\n A viewer can be created as an adapter on a pre-existing control (e.g., \n creating a <code>ListViewer</code> on an existing <code>List</code> control).\n All viewers also provide a convenience constructor for creating the control.\n </p>\n <p>\n Implementing a concrete viewer typically involves the following steps:\n <ul>\n <li>\n create SWT controls for viewer (in constructor) (optional)\n </li>\n <li>\n initialize SWT controls from input (inputChanged)\n </li>\n <li>\n define viewer-specific update methods\n </li>\n <li>\n support selections (<code>setSelection</code>, <code>getSelection</code>)\n </li>\n </ul>\n </p>\n"
3547,method,org/eclipse/jface/viewers/Viewer/fireHelpRequested/HelpEvent," Notifies any help listeners that help has been requested.\n Only listeners registered at the time this method is called are notified.\n\n @param event a help event\n\n @see HelpListener#helpRequested(org.eclipse.swt.events.HelpEvent)\n"
3548,method,org/eclipse/jface/viewers/Viewer/fireSelectionChanged/SelectionChangedEvent," Notifies any selection changed listeners that the viewer's selection has changed.\n Only listeners registered at the time this method is called are notified.\n\n @param event a selection changed event\n\n @see ISelectionChangedListener#selectionChanged\n"
3562,method,org/eclipse/jface/viewers/Viewer/setSelection/ISelection," The viewer implementation of this <code>ISelectionProvider</code>\n method make the new selection for this viewer without making it visible.\n <p>\n This method is equivalent to <code>setSelection(selection,false)</code>.\n </p>\n <p>\n Note that some implementations may not be able to set the selection\n without also revealing it, for example (as of 3.3) TreeViewer.\n </p>\n"
3568,method,org/eclipse/jface/viewers/ILabelDecorator/decorateText/String;Object," Returns a text label that is based on the given text label,\n but decorated with additional information relating to the state\n of the provided element.\n \n Text and image decoration updates can occur as a result of other updates\n within the workbench including deferred decoration by background processes.\n Clients should handle labelProviderChangedEvents for the given element to get\n the complete decoration.\n @see LabelProviderChangedEvent\n @see IBaseLabelProvider#addListener\n\n @param text the input text label to decorate\n @param element the element whose image is being decorated\n @return the decorated text label, or <code>null</code> if no decoration is to be applied\n"
3570,method,org/eclipse/jface/viewers/NamedHandleObjectLabelProvider/getText/Object," The text of the element is simply the name of the element if its a\n defined instance of <code>NamedHandleObject</code>. Otherwise, this\n method just returns <code>null</code>.\n \n @param element\n            The element for which the text should be retrieved; may be\n            <code>null</code>.\n @return the name of the handle object; <code>null</code> if there is no\n         name or if the element is not a named handle object.\n"
3574,method,org/eclipse/jface/viewers/StyledCellLabelProvider/setOwnerDrawEnabled/boolean," Specifies whether owner draw rendering is enabled for this label\n provider. By default owner draw rendering is enabled. If owner draw\n rendering is disabled, rendering is done by the viewer and no styled\n ranges (see {@link ViewerCell#getStyleRanges()}) are drawn.\n It is the caller's responsibility to also call\n {@link StructuredViewer#refresh()} or similar methods to update the\n underlying widget.\n \n @param enabled\n            specifies if owner draw rendering is enabled\n"
3594,method,org/eclipse/jface/viewers/StructuredViewerInternals/AssociateListener/associate/Object;Item," Call when an element is associated with an Item\n \n @param element\n @param item\n"
3595,method,org/eclipse/jface/viewers/StructuredViewerInternals/AssociateListener/disassociate/Item," Called when an Item is no longer associated\n \n @param item\n"
3600,interface,org/eclipse/jface/viewers/IIndexableLazyContentProvider," Adds efficient element indexing support to ILazyContentProvider.\n \n @since 3.5\n"
3601,method,org/eclipse/jface/viewers/IIndexableLazyContentProvider/findElement/Object," Find the row index of the parameter element in the set of contents provided\n by this object.  Under normal usage, this method will only be used to \n implement <code>StructuredViewer#setSelection(ISelection)</code> more\n efficiently.\n\n @param element the element to find within the contents served here\n @return the zero-based index of the element, or -1 if the element is not found\n"
3620,class,org/eclipse/jface/viewers/EditingSupport," EditingSupport is the abstract superclass of the support for cell editing.\n\n @since 3.3\n\n"
3670,method,org/eclipse/jface/viewers/DelegatingStyledCellLabelProvider/IStyledLabelProvider/getImage/Object," Returns the image for the label of the given element. The image is\n owned by the label provider and must not be disposed directly.\n Instead, dispose the label provider when no longer needed.\n \n @param element\n            the element for which to provide the label image\n @return the image used to label the element, or <code>null</code>\n         if there is no image for the given object\n"
3681,method,org/eclipse/jface/viewers/TreeViewer/getLabelProvider/," The tree viewer implementation of this <code>Viewer</code> framework\n method ensures that the given label provider is an instance of either\n <code>ITableLabelProvider</code> or <code>ILabelProvider</code>. If\n it is an <code>ITableLabelProvider</code>, then it provides a separate\n label text and image for each column. If it is an\n <code>ILabelProvider</code>, then it provides only the label text and\n image for the first column, and any remaining columns are blank.\n"
3706,method,org/eclipse/jface/viewers/TreeViewer/remove/Object;int," Removes the element at the specified index of the parent.  The selection is updated if required.\n\n @param parentOrTreePath the parent element, the input element, or a tree path to the parent element\n @param index child index\n @since 3.3\n"
3710,method,org/eclipse/jface/viewers/TreeViewer/setHasChildren/Object;boolean," For a TreeViewer with a tree with the VIRTUAL style bit set, inform the\n viewer about whether the given element or tree path has children. Avoid\n calling this method if the number of children has already been set.\n\n @param elementOrTreePath\n            the element, or tree path\n @param hasChildren\n\n @since 3.3\n"
3713,method,org/eclipse/jface/viewers/TreeViewer/setSelection/ISelection;boolean," Sets a new selection for this viewer and optionally makes it visible.\n <p>\n <b>Currently the <code>reveal</code> parameter is not honored because\n {@link Tree} does not provide an API to only select an item without\n scrolling it into view</b>\n </p>\n\n @param selection\n            the new selection\n @param reveal\n            <code>true</code> if the selection is to be made visible,\n            and <code>false</code> otherwise\n"
3782,field,org/eclipse/jface/viewers/ColumnViewerEditor/TABBING_MOVE_TO_ROW_NEIGHBOR," Should if the end of the row is reach started from the start/end of the\n row below/above\n"
3783,field,org/eclipse/jface/viewers/ColumnViewerEditor/TABBING_CYCLE_IN_ROW," Should if the end of the row is reach started from the beginning in the\n same row\n"
3785,field,org/eclipse/jface/viewers/ColumnViewerEditor/TABBING_HORIZONTAL," Should tabbing from column to column with in one row be supported\n"
3822,method,org/eclipse/jface/viewers/deferred/DeferredContentProvider/setFilter/IFilter," Sets the filter for this content provider. This filter takes priority over\n anything that was supplied to the <code>TableViewer</code>. The filter\n must be capable of being used in a background thread.\n \n @param toSet filter to set\n"
3823,method,org/eclipse/jface/viewers/deferred/DeferredContentProvider/setLimit/int," Sets the maximum number of rows in the table. If the model contains more\n than this number of elements, only the top elements will be shown based on\n the current sort order. \n \n @param limit maximum number of rows to show or -1 if unbounded\n"
3827,class,org/eclipse/jface/viewers/deferred/LazySortedCollection," This object maintains a collection of elements, sorted by a comparator\n given in the constructor. The collection is lazily sorted, allowing \n more efficient runtimes for most methods. There are several methods on this\n object that allow objects to be queried by their position in the sorted\n collection.\n \n <p>\n This is a modified binary search tree. Each subtree has a value, a left and right subtree, \n a count of the number of children, and a set of unsorted children. \n Insertion happens lazily. When a new node N is inserted into a subtree T, it is initially \n added to the set of unsorted children for T without actually comparing it with the value for T. \n </p>\n <p>\n The unsorted children will remain in the unsorted set until some subsequent operation requires\n us to know the exact set of elements in one of the subtrees. At that time, we partition\n T by comparing all of its unsorted children with T's value and moving them into the left \n or right subtrees.\n </p>\n \n @since 3.1\n"
3828,method,org/eclipse/jface/viewers/deferred/LazySortedCollection/testInvariants/," Tests if this object's internal state is valid. Throws a runtime\n exception if the state is invalid, indicating a programming error\n in this class. This method is intended for use in test\n suites and should not be called by clients.\n"
3837,method,org/eclipse/jface/viewers/deferred/LazySortedCollection/retainFirst/int," Retains the n smallest items in the collection, removing the rest. When\n this method returns, the size of the collection will be n. Note that\n this is a no-op if n > the current size of the collection.\n \n @param n number of items to retain\n"
3841,method,org/eclipse/jface/viewers/deferred/LazySortedCollection/getFirst/Object[];boolean," Fills in an array of size n with the n smallest elements from the collection.\n Can compute the result in sorted or unsorted order. \n \n @param result array to be filled\n @param sorted if true, the result array will be sorted. If false, the result array\n may be unsorted. This does not affect which elements appear in the result. It only\n affects their order. Computing an unsorted result is asymptotically faster.\n @return the number of items inserted into the result array. This will be equal to the minimum\n of result.length and container.size()\n"
3842,method,org/eclipse/jface/viewers/deferred/LazySortedCollection/getRange/Object[];int;boolean," Computes the n through n+k items in this collection.\n Computing the result in unsorted order is more efficient. Sorting the result will\n not change which elements actually show up in the result. That is, even if the result is\n unsorted, it will still contain the same elements as would have been at that range in\n a fully sorted collection. \n \n @param result array containing the result\n @param rangeStart index of the first element to be inserted into the result array\n @param sorted true iff the result will be computed in sorted order\n @return the number of items actually inserted into the result array (will be the minimum\n of result.length and this.size())\n"
3844,method,org/eclipse/jface/viewers/deferred/LazySortedCollection/getItems/boolean," Returns the contents of this collection as a sorted or unsorted\n array. Computing an unsorted array is more efficient.\n \n @param sorted if true, the result will be in sorted order. If false,\n the result may be in unsorted order.\n @return the contents of this collection as an array.\n"
3849,method,org/eclipse/jface/viewers/deferred/IConcurrentModel/requestUpdate/IConcurrentModelListener," Requests that the receiver to call the given listener's setContents(...) \n method at its earliest convenience. The receiver is allowed to compute the \n elements asynchronously. That is, it can compute the result in a background \n thread and call setContents(...) once the result is ready. If the result is\n too large to return in one batch, it can call setContents with an empty array\n followed by a sequence of adds.\n <p>\n Has no effect if an update is already queued for an identical listener.\n </p>\n \n @param listener listener whose setContents method should be called. The\n listener must have been previously registered with addListener.\n"
3850,method,org/eclipse/jface/viewers/deferred/IConcurrentModel/addListener/IConcurrentModelListener," Adds a listener to this model. The listener should be given the model's\n current contents (either through setContents or a sequence of adds) at the\n receiver's earliest convenience. The receiver will notify the listener\n about any changes in state until the listener is removed.\n \n <p>\n Has no effect if an identical listener is already registered.\n </p>\n \n @param listener listener to add\n"
3851,method,org/eclipse/jface/viewers/deferred/IConcurrentModel/removeListener/IConcurrentModelListener," Removes a listener from this model. The receiver will stop sending\n notifications to the given listener as soon as possible (although\n some additional notifications may still if arrive if the receiver\n was in the process of sending notifications in another thread).\n Any pending updates for this listener will be cancelled.\n <p>\n Has no effect if the given listener is not known to this model.\n </p>\n \n @param listener listener to remove\n"
3860,class,org/eclipse/jface/viewers/deferred/SetModel," Trivial implementation of an <code>IConcurrentModel</code>. Implements \n an unordered set of elements that fires off change notifications whenever\n elements are added or removed from the set. All notifications are sent\n synchronously.\n \n @since 3.1\n"
3871,method,org/eclipse/jface/viewers/deferred/IConcurrentModelListener/add/Object[]," Called when elements are added to the model \n \n @param added elements added to the model\n"
3872,method,org/eclipse/jface/viewers/deferred/IConcurrentModelListener/remove/Object[]," Called when elements are removed from the model\n \n @param removed elements removed from the model\n"
3873,method,org/eclipse/jface/viewers/deferred/IConcurrentModelListener/update/Object[]," Called when elements in the model have changed\n \n @param changed elements that have changed\n"
3874,method,org/eclipse/jface/viewers/deferred/IConcurrentModelListener/setContents/Object[]," Notifies the receiver about the complete set\n of elements in the model. Most models will\n not call this method unless the listener explicitly\n requests it by calling \n <code>IConcurrentModel.requestUpdate</code>\n  \n @param newContents contents of the model\n"
3875,interface,org/eclipse/jface/window/IShellProvider," Interface for objects that can return a shell. This is normally used for \n opening child windows. An object that wants to open child shells can take \n an IShellProvider in its constructor, and the object that implements IShellProvider\n can dynamically choose where child shells should be opened.  \n \n @since 3.1\n"
3876,method,org/eclipse/jface/window/IShellProvider/getShell/," Returns the current shell (or null if none). This return value may\n change over time, and should not be cached.\n \n @return the current shell or null if none\n"
3877,class,org/eclipse/jface/window/WindowManager," A manager for a group of windows. Window managers are an optional JFace \n feature used in applications which create many different windows (dialogs,\n wizards, etc.) in addition to a main window. A window manager can be used to\n remember all the windows that an application has created (independent of \n whether they are presently open or closed). There can be several window\n managers, and they can be arranged into a tree. This kind of organization \n makes it simple to close whole subgroupings of windows.\n <p>\n Creating a window manager is as simple as creating an instance of \n <code>WindowManager</code>. Associating a window with a window manager is \n done with <code>WindowManager.add(Window)</code>. A window is automatically\n removed from its window manager as a side effect of closing the window.\n </p>\n\n @see Window\n"
3891,method,org/eclipse/jface/window/Window/create/," Creates this window's widgetry in a new top-level shell.\n <p>\n The default implementation of this framework method creates this window's\n shell (by calling <code>createShell</code>), and its controls (by\n calling <code>createContents</code>), then initializes this window's\n shell bounds (by calling <code>initializeBounds</code>).\n </p>\n"
3909,method,org/eclipse/jface/window/Window/setBlockOnOpen/boolean," Sets whether the <code>open</code> method should block until the window\n closes.\n \n @param shouldBlock\n            <code>true</code> if the <code>open</code> method should\n            not return until the window closes, and <code>false</code>\n            if the <code>open</code> method should return immediately\n"
3915,method,org/eclipse/jface/window/Window/setShellStyle/int," Sets the shell style bits. This method has no effect after the shell is\n created.\n <p>\n The shell style bits are used by the framework method\n <code>createShell</code> when creating this window's shell.\n </p>\n \n @param newShellStyle\n            the new shell style bits\n"
3916,method,org/eclipse/jface/window/Window/setWindowManager/WindowManager," Sets the window manager of this window.\n <p>\n Note that this method is used by <code>WindowManager</code> to maintain\n a backpointer. Clients must not call the method directly.\n </p>\n \n @param manager\n            the window manager, or <code>null</code> if none\n"
3917,method,org/eclipse/jface/window/Window/setExceptionHandler/IExceptionHandler," Sets the exception handler for this application.\n <p>\n Note that the handler may only be set once.  Subsequent calls to this method will be\n ignored.\n <p>\n \n @param handler\n            the exception handler for the application.\n"
3921,method,org/eclipse/jface/window/Window/Window/Shell," Creates a window instance, whose shell will be created under the given\n parent shell. Note that the window will have no visual representation\n until it is told to open. By default, <code>open</code> does not block.\n \n @param parentShell\n            the parent shell, or <code>null</code> to create a top-level\n            shell. Try passing "(Shell)null" to this method instead of "null"\n            if your compiler complains about an ambiguity error.\n @see #setBlockOnOpen\n @see #getDefaultOrientation()\n"
3924,interface,org/eclipse/jface/window/Window/IExceptionHandler," This interface defines a Exception Handler which can be set as a global\n handler and will be called if an exception happens in the event loop.\n"
3926,class,org/eclipse/jface/window/ApplicationWindow," An application window is a high-level "main window", with built-in\n support for an optional menu bar with standard menus, an optional toolbar,\n and an optional status line.\n <p>\n Creating an application window involves the following steps:\n <ul>\n   <li>creating an instance of <code>ApplicationWindow</code>\n   </li>\n   <li>assigning the window to a window manager (optional)\n   </li>\n   <li>opening the window by calling <code>open</code>\n   </li>\n </ul>\n Only on the last step, when the window is told to open, are\n the window's shell and widget tree created. When the window is\n closed, the shell and widget tree are disposed of and are no longer\n referenced, and the window is automatically removed from its window\n manager. Like all windows, an application window may be reopened.\n </p>\n <p>\n An application window is also a suitable context in which to perform \n long-running operations (that is, it implements <code>IRunnableContext</code>).\n </p>\n"
3928,method,org/eclipse/jface/window/ApplicationWindow/addMenuBar/," Configures this window to have a menu bar.\n Does nothing if it already has one.\n This method must be called before this window's shell is created.\n"
3931,method,org/eclipse/jface/window/ApplicationWindow/addCoolBar/int," Configures this window to have a cool bar.\n Does nothing if it already has one.\n This method must be called before this window's shell is created.\n \n @param style the cool bar style\n @since 3.0\n"
3934,method,org/eclipse/jface/window/ApplicationWindow/configureShell/Shell," Extends the super implementation by creating the trim widgets using <code>createTrimWidgets</code>. \n"
3937,method,org/eclipse/jface/window/ApplicationWindow/showTopSeperator/," Returns whether to show a top separator line between the menu bar\n and the rest of the window contents.  On some platforms such as the Mac,\n the menu is separated from the main window already, so a separator line\n is not desired. \n \n @return <code>true</code> to show the top separator, <code>false</code>\n   to not show it\n @since 3.0\n"
3938,method,org/eclipse/jface/window/ApplicationWindow/createStatusLine/Shell," Create the status line if required.\n @param shell\n"
3961,method,org/eclipse/jface/window/ApplicationWindow/ApplicationWindow/Shell," Create an application window instance, whose shell will be created under the\n given parent shell.\n Note that the window will have no visual representation (no widgets)\n until it is told to open. By default, <code>open</code> does not block.\n\n @param parentShell the parent shell, or <code>null</code> to create a top-level shell\n"
3962,field,org/eclipse/jface/window/ApplicationWindow/seperator1," The seperator between the menu bar and the rest of the window.\n"
3970,method,org/eclipse/jface/window/ToolTip/setRespectDisplayBounds/boolean," Set to <code>false</code> if display bounds should not be respected or\n to <code>true</code> if the tooltip is should repositioned to not\n overlap the display bounds.\n <p>\n Default is <code>true</code>\n </p>\n \n @param respectDisplayBounds\n"
3972,method,org/eclipse/jface/window/ToolTip/setRespectMonitorBounds/boolean," Set to <code>false</code> if monitor bounds should not be respected or\n to <code>true</code> if the tooltip is should repositioned to not\n overlap the monitors bounds. The monitor the tooltip belongs to is the\n same is control's monitor the tooltip is shown for.\n <p>\n Default is <code>true</code>\n </p>\n \n @param respectMonitorBounds\n"
3974,method,org/eclipse/jface/window/ToolTip/getToolTipArea/Event," This method is called to check for which area the tooltip is\n created/hidden for. In case of {@link #NO_RECREATE} this is used to\n decide if the tooltip is hidden recreated.\n \n <code>By the default it is the widget the tooltip is created for but could be any object. To decide if\n the area changed the {@link Object#equals(Object)} method is used.</code>\n \n @param event\n            the event\n @return the area responsible for the tooltip creation or\n         <code>null</code> this could be any object describing the area\n         (e.g. the {@link Control} onto which the tooltip is bound to, a\n         part of this area e.g. for {@link ColumnViewer} this could be a\n         {@link ViewerCell})\n"
3979,method,org/eclipse/jface/window/ToolTip/setHideDelay/int," Set the hide delay.\n \n @param hideDelay\n            the delay before the tooltip is hidden. If <code>0</code>\n            the tooltip is shown until user moves to other item\n"
3980,method,org/eclipse/jface/window/ToolTip/setPopupDelay/int," Set the popup delay.\n \n @param popupDelay\n            the delay before the tooltip is shown to the user. If\n            <code>0</code> the tooltip is shown immediately\n"
3982,method,org/eclipse/jface/window/ToolTip/setHideOnMouseDown/boolean," If you don't want the tool tip to be hidden when the user clicks inside\n the tool tip set this to <code>false</code>. You maybe also need to\n hide the tool tip yourself depending on what you do after clicking in the\n tooltip (e.g. if you open a new {@link Shell})\n \n @param hideOnMouseDown\n            flag to indicate of tooltip is hidden automatically on mouse\n            down inside the tool tip\n"
3988,class,org/eclipse/jface/window/DefaultToolTip," Default implementation of ToolTip that provides an iconofied label with font\n and color controls by subclass.\n \n @since 3.3\n"
3991,method,org/eclipse/jface/window/DefaultToolTip/getImage/Event," The {@link Image} displayed in the {@link CLabel} in the default\n implementation implementation\n \n @param event\n            the event triggered the popup of the tooltip\n @return the {@link Image} or <code>null</code> if no image should be\n         displayed\n"
3992,method,org/eclipse/jface/window/DefaultToolTip/getForegroundColor/Event," The foreground {@link Color} used by {@link CLabel} in the default\n implementation\n \n @param event\n            the event triggered the popup of the tooltip\n @return the {@link Color} or <code>null</code> if default foreground\n         color should be used\n"
3993,method,org/eclipse/jface/window/DefaultToolTip/getBackgroundColor/Event," The background {@link Color} used by {@link CLabel} in the default\n implementation\n \n @param event\n            the event triggered the popup of the tooltip\n @return the {@link Color} or <code>null</code> if default background\n         color should be used\n"
3994,method,org/eclipse/jface/window/DefaultToolTip/getBackgroundImage/Event," The background {@link Image} used by {@link CLabel} in the default\n implementation\n \n @param event\n            the event triggered the popup of the tooltip\n @return the {@link Image} or <code>null</code> if no image should be\n         displayed in the background\n"
3995,method,org/eclipse/jface/window/DefaultToolTip/getFont/Event," The {@link Font} used by {@link CLabel} in the default implementation\n \n @param event\n            the event triggered the popup of the tooltip\n @return the {@link Font} or <code>null</code> if the default font\n         should be used\n"
3997,method,org/eclipse/jface/window/DefaultToolTip/setBackgroundColor/Color," The background {@link Image} used by {@link CLabel} in the default\n implementation\n \n @param backgroundColor\n            the {@link Color} or <code>null</code> if default background\n            color ({@link SWT#COLOR_INFO_BACKGROUND}) should be used\n"
3998,method,org/eclipse/jface/window/DefaultToolTip/setBackgroundImage/Image," The background {@link Image} used by {@link CLabel} in the default\n implementation\n \n @param backgroundImage\n            the {@link Image} or <code>null</code> if no image should be\n            displayed in the background\n"
3999,method,org/eclipse/jface/window/DefaultToolTip/setFont/Font," The {@link Font} used by {@link CLabel} in the default implementation\n \n @param font\n            the {@link Font} or <code>null</code> if the default font\n            should be used\n"
4000,method,org/eclipse/jface/window/DefaultToolTip/setForegroundColor/Color," The foreground {@link Color} used by {@link CLabel} in the default\n implementation\n \n @param foregroundColor\n            the {@link Color} or <code>null</code> if default foreground\n            color should be used\n"
4001,method,org/eclipse/jface/window/DefaultToolTip/setImage/Image," The {@link Image} displayed in the {@link CLabel} in the default\n implementation implementation\n \n @param image\n            the {@link Image} or <code>null</code> if no image should be\n            displayed\n"
4008,method,org/eclipse/jface/window/SameShellProvider/SameShellProvider/Control," Returns a shell provider that always returns the current\n shell for the given control.\n \n @param targetControl control whose shell will be tracked, or null if getShell() should always\n return null\n"
4010,method,org/eclipse/jface/menus/AbstractTrimWidget/fill/Composite;int;int," This method is called to initially construct the widget and is also\n called whenever the widget's composite has been moved to a trim area on a\n different side of the workbench. It is the client's responsibility to\n control the life-cycle of the Control it manages.\n <p>\n For example: If the implementation is constructing a {@link ToolBar} and\n the orientation were to change from horizontal to vertical it would have\n to <code>dispose</code> its old ToolBar and create a new one with the\n correct orientation.\n </p>\n <p>\n The sides can be one of:\n <ul>\n <li>{@link SWT#TOP}</li>\n <li>{@link SWT#BOTTOM}</li>\n <li>{@link SWT#LEFT}</li>\n <li>{@link SWT#RIGHT}</li>\n </ul>\n </p>\n <p>\n \n @param parent\n            The parent to (re)create the widget under\n \n @param oldSide\n            The previous side ({@link SWT#DEFAULT} on the initial fill)\n @param newSide\n            The current side\n"
4018,method,org/eclipse/jface/menus/IWidget/dispose/," Disposes of the underlying widgets. This can be called when the widget is\n becoming hidden.\n"
4024,field,org/eclipse/jface/menus/IMenuStateIds/STYLE," The state id used for indicating the widget style of a command presented\n in the menus and tool bars. This state must be an instance of\n {@link ToggleState} or {@link RadioState}.\n"
4046,method,org/eclipse/jface/text/IPainter/deactivate/boolean," Deactivates this painter. If the painter is inactive, this call does not\n have any effect. <code>redraw</code> indicates whether the painter\n should remove any decoration it previously applied. A deactivated painter\n can be reactivated by calling <code>paint</code>.\n\n @param redraw <code>true</code> if any previously applied decoration\n            should be removed\n @see #paint(int)\n"
4056,method,org/eclipse/jface/text/ITextOperationTarget/doOperation/int," Performs the operation specified by the operation code on the target.\n <code>doOperation</code> must only be called if <code>canDoOperation</code>\n returns <code>true</code>.\n\n @param operation the operation code\n"
4074,interface,org/eclipse/jface/text/IRewriteTarget," A target publishing the required functions to modify a document that is displayed\n in a text viewer. It provides access to the document and control\n over the redraw behavior and the grouping of document changes into undo commands.\n\n @see org.eclipse.jface.text.ITextViewer\n @see org.eclipse.jface.text.IDocument\n @see org.eclipse.jface.text.IUndoManager\n @since 2.0\n"
4076,method,org/eclipse/jface/text/IRewriteTarget/setRedraw/boolean," Disables/enables redrawing while modifying the target's document.\n\n @param redraw <code>true</code> if the document's visible presentation\n            should be updated, <code>false</code> otherwise\n"
4077,method,org/eclipse/jface/text/IRewriteTarget/beginCompoundChange/," If an undo manager is connected to the document's visible presentation,\n this method tells the undo manager to fold all subsequent changes into\n one single undo command until <code>endCompoundChange</code> is called.\n"
4078,method,org/eclipse/jface/text/IRewriteTarget/endCompoundChange/," If an undo manager is connected to the document's visible presentation,\n this method tells the undo manager to stop the folding of changes into a\n single undo command. After this call, all subsequent changes are\n considered to be individually undo-able.\n"
4082,method,org/eclipse/jface/text/IMarkSelection/getOffset/," Returns the mark position. The offset may be <code>-1</code> if there's no marked region.\n\n @return the mark position or <code>-1</code> if there is no marked region\n"
4083,method,org/eclipse/jface/text/IMarkSelection/getLength/," Returns the length of the mark selection. The length may be negative, if the caret\n is before the mark position. The length has no meaning if <code>getOffset()</code>\n returns <code>-1</code>.\n\n @return the length of the mark selection. Result is undefined for <code>getOffset == -1</code>\n"
4084,interface,org/eclipse/jface/text/ITextViewerExtension8," Extension interface for {@link org.eclipse.jface.text.ITextViewer}. Adds the\n ability to print and set how hovers should be enriched when the mouse is moved into them.\n\n @since 3.4\n"
4086,method,org/eclipse/jface/text/ITextViewerExtension8/setHoverEnrichMode/EnrichMode," Sets the hover enrich mode.\n A non-<code>null</code> <code>mode</code> defines when hovers\n should be enriched once the mouse is moved into them.\n If <code>mode</code> is <code>null</code>, hovers are automatically closed\n when the mouse is moved out of the {@link ITextHover#getHoverRegion(ITextViewer, int) hover region}.\n <p>\n Note that a hover can only be enriched if its {@link IInformationControlExtension5#getInformationPresenterControlCreator()}\n is not <code>null</code>.\n </p>\n\n @param mode the enrich mode, or <code>null</code>\n"
4089,field,org/eclipse/jface/text/ITextViewerExtension8/EnrichMode/AFTER_DELAY," Enrich the hover shortly after the mouse has been moved into it and\n stopped moving.\n\n @see ITextViewerExtension8#setHoverEnrichMode(org.eclipse.jface.text.ITextViewerExtension8.EnrichMode)\n"
4095,method,org/eclipse/jface/text/AbstractHoverInformationControlManager/setEnabled/boolean," {@inheritDoc}\n @deprecated visibility will be changed to protected\n"
4103,method,org/eclipse/jface/text/IInputChangedListener/inputChanged/Object," Called when a the input has changed.\n\n @param newInput the new input, or <code>null</code> iff the listener should not show any new input\n"
4118,method,org/eclipse/jface/text/IPaintPositionManager/managePosition/Position," Starts managing the given position until <code>unmanagePosition</code> is called.\n\n @param position the position to manage\n @see #unmanagePosition(Position)\n"
4119,method,org/eclipse/jface/text/IPaintPositionManager/unmanagePosition/Position," Stops managing the given position. If the position is not managed\n by this managed, this call has no effect.\n\n @param position the position that should no longer be managed\n"
4122,interface,org/eclipse/jface/text/IInformationControlExtension3," Extension interface for {@link org.eclipse.jface.text.IInformationControl}.\n Adds API which allows to get this information control's bounds and introduces\n the concept of persistent size and location by introducing predicates for\n whether the information control supports restoring of size and location.\n <p>\n Note: An information control which implements this interface can ignore calls\n to\n {@link org.eclipse.jface.text.IInformationControl#setSizeConstraints(int, int)}\n or use it as hint for its very first appearance.\n </p>\n\n @see org.eclipse.jface.text.IInformationControl\n @since 3.0\n"
4123,method,org/eclipse/jface/text/IInformationControlExtension3/getBounds/," Returns a rectangle describing the receiver's size and location\n relative to its parent (or its display if its parent is null).\n <p>\n Note: If the receiver is already disposed then this methods must\n return the last valid location and size.\n </p>\n\n @return the receiver's bounding rectangle\n"
4125,method,org/eclipse/jface/text/IInformationControlExtension3/restoresSize/," Tells whether this control allows to restore the previously\n used size.\n <p>\n Note: This is not a static property - it can change during the\n lifetime of this control.</p>\n\n @return <code>true</code> if restoring size is supported\n"
4126,method,org/eclipse/jface/text/IInformationControlExtension3/restoresLocation/," Tells whether this control allows to restore the previously\n used location.\n <p>\n Note: This is not a static property - it can change during the\n lifetime of this control.</p>\n\n @return <code>true</code> if restoring location is supported\n"
4128,method,org/eclipse/jface/text/ITextInputListener/inputDocumentAboutToBeChanged/IDocument;IDocument," Called before the input document is replaced.\n\n @param oldInput the text viewer's previous input document\n @param newInput the text viewer's new input document\n"
4129,method,org/eclipse/jface/text/ITextInputListener/inputDocumentChanged/IDocument;IDocument," Called after the input document has been replaced.\n\n @param oldInput the text viewer's previous input document\n @param newInput the text viewer's new input document\n"
4133,class,org/eclipse/jface/text/DefaultInformationControl," Default implementation of {@link org.eclipse.jface.text.IInformationControl}.\n <p>\n Displays textual information in a {@link org.eclipse.swt.custom.StyledText}\n widget. Before displaying, the information set to this information control is\n processed by an <code>IInformationPresenter</code>.\n\n @since 2.0\n"
4142,method,org/eclipse/jface/text/DefaultInformationControl/widgetDisposed/DisposeEvent," @see org.eclipse.swt.events.DisposeListener#widgetDisposed(org.eclipse.swt.events.DisposeEvent)\n @since 3.0\n @deprecated As of 3.2, no longer used and called\n"
4144,method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;boolean," Creates a default information control with the given shell as parent. An information\n presenter that can handle simple HTML is used to process the information to be displayed.\n\n @param parent the parent shell\n @param isResizeable <code>true</code> if the control should be resizable\n @since 3.4\n"
4146,method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;String;IInformationPresenter," Creates a default information control with the given shell as parent. The\n given information presenter is used to process the information to be\n displayed.\n\n @param parent the parent shell\n @param statusFieldText the text to be used in the status field or <code>null</code> to hide the status field\n @param presenter the presenter to be used, or <code>null</code> if no presenter should be used\n @since 3.4\n"
4147,method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;ToolBarManager," Creates a resizable default information control with the given shell as parent. An\n information presenter that can handle simple HTML is used to process the information to be\n displayed.\n\n @param parent the parent shell\n @param toolBarManager the manager or <code>null</code> if toolbar is not desired\n @since 3.4\n"
4151,method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;int;int;IInformationPresenter," Creates a default information control with the given shell as parent. The\n given information presenter is used to process the information to be\n displayed. The given styles are applied to the created styled text\n widget.\n\n @param parent the parent shell\n @param shellStyle the additional styles for the shell\n @param style the additional styles for the styled text widget\n @param presenter the presenter to be used\n @deprecated As of 3.4, replaced by simpler constructors\n"
4152,method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;int;int;IInformationPresenter;String," Creates a default information control with the given shell as parent. The\n given information presenter is used to process the information to be\n displayed. The given styles are applied to the created styled text\n widget.\n\n @param parentShell the parent shell\n @param shellStyle the additional styles for the shell\n @param style the additional styles for the styled text widget\n @param presenter the presenter to be used\n @param statusFieldText the text to be used in the status field or <code>null</code> to hide the status field\n @since 3.0\n @deprecated As of 3.4, replaced by simpler constructors\n"
4153,method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;int;IInformationPresenter," Creates a default information control with the given shell as parent. The\n given information presenter is used to process the information to be\n displayed.\n\n @param parent the parent shell\n @param textStyles the additional styles for the styled text widget\n @param presenter the presenter to be used\n @deprecated As of 3.4, replaced by {@link #DefaultInformationControl(Shell, DefaultInformationControl.IInformationPresenter)}\n"
4154,method,org/eclipse/jface/text/DefaultInformationControl/DefaultInformationControl/Shell;int;IInformationPresenter;String," Creates a default information control with the given shell as parent. The\n given information presenter is used to process the information to be\n displayed.\n\n @param parent the parent shell\n @param textStyles the additional styles for the styled text widget\n @param presenter the presenter to be used\n @param statusFieldText the text to be used in the status field or <code>null</code> to hide the status field\n @since 3.0\n @deprecated As of 3.4, replaced by {@link #DefaultInformationControl(Shell, String, DefaultInformationControl.IInformationPresenter)}\n"
4156,method,org/eclipse/jface/text/DefaultInformationControl/IInformationPresenter/updatePresentation/Display;String;TextPresentation;int;int," Updates the given presentation of the given information and\n thereby may manipulate the information to be displayed. The manipulation\n could be the extraction of textual encoded style information etc. Returns the\n manipulated information.\n <p>\n <strong>Note:</strong> The given display must only be used for measuring.</p>\n\n @param display the display of the information control\n @param hoverInfo the information to be presented\n @param presentation the presentation to be updated\n @param maxWidth the maximal width in pixels\n @param maxHeight the maximal height in pixels\n\n @return the manipulated information\n @deprecated As of 3.2, replaced by {@link DefaultInformationControl.IInformationPresenterExtension#updatePresentation(Drawable, String, TextPresentation, int, int)}\n"
4160,method,org/eclipse/jface/text/IViewportListener/viewportChanged/int," Informs that the view port changed. The given vertical position is the new vertical scrolling\n offset measured in pixels.\n <p>\n <strong>Note:</strong> This event will not be sent when the viewer is resized.\n </p>\n \n @param verticalOffset the vertical offset measured in pixels\n"
4163,method,org/eclipse/jface/text/IUndoManager/disconnect/," Disconnects this undo manager from its text viewer.\n If this undo manager hasn't been connected before this\n operation has no effect.\n"
4164,method,org/eclipse/jface/text/IUndoManager/beginCompoundChange/," Signals the undo manager that all subsequent changes until\n <code>endCompoundChange</code> is called are to be undone in one piece.\n"
4166,method,org/eclipse/jface/text/IUndoManager/reset/," Resets the history of the undo manager. After that call,\n there aren't any undo-able or redo-able text changes.\n"
4169,method,org/eclipse/jface/text/IUndoManager/redoable/," Returns whether at least one text change can be repeated. A text change\n can be repeated only if it was executed and rolled back.\n\n @return <code>true</code> if at least on text change can be repeated\n"
4175,interface,org/eclipse/jface/text/IFindReplaceTargetExtension3," Extension interface for {@link org.eclipse.jface.text.IFindReplaceTarget}.\n <p>\n Extends the find replace target's <code>findAndSelect</code> and\n <code>replaceSelection</code> methods to allow and be aware of regular\n expression find/replace.\n\n @since 3.0\n"
4176,method,org/eclipse/jface/text/IFindReplaceTargetExtension3/findAndSelect/int;String;boolean;boolean;boolean;boolean," Searches for a string starting at the given offset and using the specified search\n directives. If a string has been found it is selected and its start offset is\n returned. If regExSearch is <code>true</code> the findString is\n interpreted as a regular expression.\n\n @param offset the offset at which searching starts\n @param findString the specification of what should be found\n @param searchForward <code>true</code> searches forward, <code>false</code> backwards\n @param caseSensitive <code>true</code> performs a case sensitive search, <code>false</code> an insensitive search\n @param wholeWord if <code>true</code> only occurrences are reported in which the findString stands as a word by itself.\n 				Must not be used in combination with <code>regExSearch</code>.\n @param regExSearch if <code>true</code> findString represents a regular expression\n 				Must not be used in combination with <code>wholeWord</code>.\n @return the position of the specified string, or -1 if the string has not been found\n @throws java.util.regex.PatternSyntaxException if regExSearch is <code>true</code> and findString is an invalid regular expression\n"
4177,method,org/eclipse/jface/text/IFindReplaceTargetExtension3/replaceSelection/String;boolean," Replaces the currently selected range of characters with the given text.\n If regExReplace is <code>true</code> the text is interpreted as a\n regular expression that is used to process the selected text in order to\n produce the actual replacement of the selected text.\n <p>\n This target must be editable. Otherwise nothing happens.\n\n @param text the specification of the substitution text\n @param regExReplace if <code>true</code> text represents a regular\n            expression\n @throws IllegalStateException in case of regular expressions, this call\n             is not preceded by a call to <code>findAndSelect</code>\n @throws java.util.regex.PatternSyntaxException if regExReplace is\n             <code>true</code> and text is an invalid regular expression\n"
4187,method,org/eclipse/jface/text/TextViewer/handleDispose/," Frees all resources allocated by this viewer. Internally called when the viewer's\n control has been disposed.\n"
4189,method,org/eclipse/jface/text/TextViewer/getEmptySelectionChangedEventDelay/," The delay in milliseconds before an empty selection\n changed event is sent by the cursor listener.\n <p>\n Note: The return value is used to initialize the cursor\n listener. To return a non-constant value has no effect.</p>\n <p>\n The same value (<code>500</code>) is used in <code>OpenStrategy.TIME</code>.</p>\n\n @return delay in milliseconds\n @see org.eclipse.jface.util.OpenStrategy\n @since 3.0\n"
4190,method,org/eclipse/jface/text/TextViewer/setAutoIndentStrategy/IAutoIndentStrategy;String," {@inheritDoc}\n @deprecated since 3.1, use\n             {@link ITextViewerExtension2#prependAutoEditStrategy(IAutoEditStrategy, String)} and\n             {@link ITextViewerExtension2#removeAutoEditStrategy(IAutoEditStrategy, String)} instead\n"
4191,method,org/eclipse/jface/text/TextViewer/setAutoEditStrategies/IAutoEditStrategy[];String," Sets the given edit strategy as the only strategy for the given content type.\n\n @param strategies the auto edit strategies\n @param contentType the content type\n @since 3.1\n"
4209,method,org/eclipse/jface/text/TextViewer/setHoverEnrichMode/EnrichMode," {@inheritDoc}\n\n @since 3.4\n"
4224,method,org/eclipse/jface/text/TextViewer/markChanged/int;int," Sends out a mark selection changed event to all registered listeners.\n\n @param offset the offset of the mark selection in the visible document, the offset is <code>-1</code> if the mark was cleared\n @param length the length of the mark selection, may be negative if the caret is before the mark.\n @since 2.0\n"
4242,method,org/eclipse/jface/text/TextViewer/updateViewportListeners/int," Checks whether the view port changed and if so informs all registered\n listeners about the change.\n\n @param origin describes under which circumstances this method has been called.\n\n @see IViewportListener\n"
4245,method,org/eclipse/jface/text/TextViewer/getVisibleLinesInViewport/," Returns the number of lines that can fully fit into the viewport. This is computed by\n dividing the widget's client area height by the widget's line height. The result is only\n accurate if the widget does not use variable line heights - for that reason, clients should\n not use this method any longer and use the client area height of the text widget to find out\n how much content fits into it.\n\n @return the view port height in lines\n @deprecated as of 3.2\n"
4264,method,org/eclipse/jface/text/TextViewer/initializeDocumentInformationMapping/IDocument," Initializes the document information mapping between the given slave document and\n its master document.\n\n @param visibleDocument the slave document\n @since 2.1\n"
4273,method,org/eclipse/jface/text/TextViewer/customizeDocumentCommand/DocumentCommand," Hook called on receipt of a <code>VerifyEvent</code>. The event has\n been translated into a <code>DocumentCommand</code> which can now be\n manipulated by interested parties. By default, the hook forwards the command\n to the installed instances of <code>IAutoEditStrategy</code>.\n\n @param command the document command representing the verify event\n"
4277,method,org/eclipse/jface/text/TextViewer/ignoreAutoEditStrategies/boolean," Tells this viewer whether the registered auto edit strategies should be ignored.\n\n @param ignore <code>true</code> if the strategies should be ignored.\n @since 2.1\n"
4280,method,org/eclipse/jface/text/TextViewer/copyMarkedRegion/boolean," Copies/cuts the marked region.\n\n @param delete <code>true</code> if the region should be deleted rather than copied.\n @since 2.0\n"
4284,method,org/eclipse/jface/text/TextViewer/shift/boolean;boolean," Shifts a text block to the right or left using the specified set of prefix characters.\n The prefixes must start at the beginning of the line.\n\n @param useDefaultPrefixes says whether the configured default or indent prefixes should be used\n @param right says whether to shift to the right or the left\n\n @deprecated use shift(boolean, boolean, boolean) instead\n"
4285,method,org/eclipse/jface/text/TextViewer/shift/boolean;boolean;boolean," Shifts a text block to the right or left using the specified set of prefix characters.\n If white space should be ignored the prefix characters must not be at the beginning of\n the line when shifting to the left. There may be whitespace in front of the prefixes.\n\n @param useDefaultPrefixes says whether the configured default or indent prefixes should be used\n @param right says whether to shift to the right or the left\n @param ignoreWhitespace says whether whitespace in front of prefixes is allowed\n @since 2.0\n"
4287,method,org/eclipse/jface/text/TextViewer/print/StyledTextPrintOptions," {@inheritDoc}\n\n @since 3.4\n"
4288,method,org/eclipse/jface/text/TextViewer/print/," Brings up a print dialog and calls <code>printContents(Printer)</code>\n which performs the actual print.\n"
4290,method,org/eclipse/jface/text/TextViewer/findAndSelect/int;String;boolean;boolean;boolean," Adheres to the contract of {@link IFindReplaceTarget#findAndSelect(int, String, boolean, boolean, boolean)}.\n\n @param startPosition the start position\n @param findString the find string specification\n @param forwardSearch the search direction\n @param caseSensitive <code>true</code> if case sensitive, <code>false</code> otherwise\n @param wholeWord <code>true</code> if match must be whole words, <code>false</code> otherwise\n @return the model offset of the first match\n @deprecated as of 3.0 use {@link #findAndSelect(int, String, boolean, boolean, boolean, boolean)}\n"
4291,method,org/eclipse/jface/text/TextViewer/findAndSelect/int;String;boolean;boolean;boolean;boolean," Adheres to the contract of\n {@link org.eclipse.jface.text.IFindReplaceTargetExtension3#findAndSelect(int, String, boolean, boolean, boolean, boolean)}.\n\n @param startPosition the start position\n @param findString the find string specification\n @param forwardSearch the search direction\n @param caseSensitive <code>true</code> if case sensitive, <code>false</code> otherwise\n @param wholeWord <code>true</code> if matches must be whole words, <code>false</code> otherwise\n @param regExSearch <code>true</code> if <code>findString</code> is a regular expression, <code>false</code> otherwise\n @return the model offset of the first match\n\n"
4292,method,org/eclipse/jface/text/TextViewer/findAndSelectInRange/int;String;boolean;boolean;boolean;int;int;boolean," Adheres to the contract of {@link org.eclipse.jface.text.IFindReplaceTargetExtension3#findAndSelect(int, String, boolean, boolean, boolean, boolean)}.\n\n @param startPosition the start position\n @param findString the find string specification\n @param forwardSearch the search direction\n @param caseSensitive <code>true</code> if case sensitive, <code>false</code> otherwise\n @param wholeWord <code>true</code> if matches must be whole words, <code>false</code> otherwise\n @param rangeOffset the search scope offset\n @param rangeLength the search scope length\n @param regExSearch <code>true</code> if <code>findString</code> is a regular expression, <code>false</code> otherwise\n @return the model offset of the first match\n @since 3.0\n"
4310,method,org/eclipse/jface/text/TextViewer/setRedraw/boolean;int," Basically same functionality as <code>ITextViewerExtension.setRedraw(boolean)</code>. Adds a\n way for subclasses to pass in a desired top index that should be used when\n <code>redraw</code> is <code>true</code>. If <code>topIndex</code> is -1, this method is\n identical to <code>ITextViewerExtension.setRedraw(boolean)</code>.\n\n @see ITextViewerExtension#setRedraw(boolean)\n\n @param redraw <code>true</code> if redraw is enabled\n @param topIndex the top index\n @since 3.0\n"
4329,method,org/eclipse/jface/text/TextViewer/getClosestWidgetLineForModelLine/int," Returns the line of the widget whose corresponding line in the viewer's document\n is closest to the given line in the viewer's document or <code>-1</code>.\n\n @param modelLine the line in the viewer's document\n @return the line in the widget that corresponds best to the given line in the viewer's document or <code>-1</code>\n @since 2.1\n"
4345,method,org/eclipse/jface/text/TextViewer/setHyperlinkPresenter/IHyperlinkPresenter," Sets the hyperlink presenter.\n <p>\n This is only valid as long as the hyperlink manager hasn't\n been created yet.\n </p>\n\n @param hyperlinkPresenter the hyperlink presenter\n @throws IllegalStateException if the hyperlink manager has already been created\n @since 3.1\n"
4347,method,org/eclipse/jface/text/TextViewer/TextViewer/," Internal use only\n"
4349,field,org/eclipse/jface/text/TextViewer/TRACE_ERRORS,"Internal flag to indicate the debug state. "
4358,field,org/eclipse/jface/text/TextViewer/fIgnoreAutoIndent,"Should the auto indent strategies ignore the next edit operation "
4370,field,org/eclipse/jface/text/TextViewer/fReplaceTextPresentation,"Indicates whether the viewer's text presentation should be replaced are modified. "
4372,field,org/eclipse/jface/text/TextViewer/fInformationMapping," The mapping between model and visible document.\n @since 2.1\n"
4381,class,org/eclipse/jface/text/TextViewer/WidgetCommand," Represents a replace command that brings the text viewer's text widget\n back in synchronization with text viewer's document after the document\n has been changed.\n"
4389,class,org/eclipse/jface/text/TextViewer/TextHoverKey," Value object used as key in the text hover configuration table. It is\n modifiable only inside this compilation unit to allow the reuse of created\n objects for efficiency reasons\n\n @since 2.1\n"
4416,method,org/eclipse/jface/text/AbstractInformationControl/restoresLocation/," {@inheritDoc}\n <p>\n The default implementation always returns <code>false</code>.\n </p>\n @see org.eclipse.jface.text.IInformationControlExtension3#restoresLocation()\n"
4417,method,org/eclipse/jface/text/AbstractInformationControl/restoresSize/," {@inheritDoc}\n <p>\n The default implementation always returns <code>false</code>.\n </p>\n @see org.eclipse.jface.text.IInformationControlExtension3#restoresSize()\n"
4426,method,org/eclipse/jface/text/AbstractInformationControl/setStatusText/String," Sets the text of the status field.\n <p>\n The default implementation currently only updates the status field when\n the popup shell is not visible. The status field can currently only be\n shown if the information control has been created with a non-null status\n field text.\n </p>\n\n @param statusFieldText the text to be used in the optional status field\n        or <code>null</code> if the status field should be hidden\n\n @see org.eclipse.jface.text.IInformationControlExtension4#setStatusText(java.lang.String)\n"
4437,method,org/eclipse/jface/text/ITextViewerExtension2/removeTextHovers/String," Removes all text hovers for the given content type independent from their state mask.\n <p>\n Note: To remove a hover for a given content type and state mask\n use {@link #setTextHover(ITextHover, String, int)} with <code>null</code>\n as parameter for the text hover.\n </p>\n @param contentType the type for which all text hovers are to be unregistered\n"
4440,method,org/eclipse/jface/text/ITextViewerExtension2/prependAutoEditStrategy/IAutoEditStrategy;String," Prepends the given auto edit strategy to the existing list of strategies\n for the specified content type. The strategies are called in the order in\n which they appear in the list of strategies.\n\n @param strategy the auto edit strategy\n @param contentType the content type\n"
4443,method,org/eclipse/jface/text/ITextViewerExtension2/removePainter/IPainter," Removes the given painter from this viewer. If the painter has not been\n added to this viewer, this call is without effect.\n\n @param painter the painter to be removed\n"
4447,interface,org/eclipse/jface/text/IInformationControlExtension," Extension interface {@link org.eclipse.jface.text.IInformationControl}.\n <p>\n As it is the responsibility of the implementer of\n {@link org.eclipse.jface.text.IInformationControl} and\n {@link org.eclipse.jface.text.IInformationControlExtension2} to specify the\n concrete nature of the information control's input, only the implementer can\n know whether it has something to show or not.\n\n @since 2.0\n"
4452,method,org/eclipse/jface/text/IFindReplaceTargetExtension/beginSession/," Indicates that a session with the target begins.\n All calls except <code>beginSession()</code> and <code>endSession()</code> to\n <code>IFindReplaceTarget</code> and\n <code>IFindReplaceTargetExtension</code> must be embedded within calls to\n <code>beginSession()</code> and <code>endSession()</code>.\n\n @see #endSession()\n"
4454,method,org/eclipse/jface/text/IFindReplaceTargetExtension/getScope/," Returns the find scope of the target, <code>null</code> for global scope.\n\n @return returns the find scope of the target, may be <code>null</code>\n"
4455,method,org/eclipse/jface/text/IFindReplaceTargetExtension/setScope/IRegion," Sets the find scope of the target to operate on. <code>null</code>\n indicates that the global scope should be used.\n\n @param scope the find scope of the target, may be <code>null</code>\n"
4459,method,org/eclipse/jface/text/IFindReplaceTargetExtension/setReplaceAllMode/boolean," Sets the target's replace-all mode.\n\n @param replaceAll <code>true</code> if this target should switch into replace-all mode,\n 	<code>false</code> if it should leave the replace-all state\n"
4461,method,org/eclipse/jface/text/IInformationControlExtension4/setStatusText/String," Sets the text of the status field.\n <p>\n The implementor can specify whether the new text affects an\n already visible information control.\n </p>\n\n @param statusFieldText the text to be used in the optional status field\n                         or <code>null</code> if the status field should be hidden\n @since 3.2\n"
4462,class,org/eclipse/jface/text/TextEvent," This event is sent to implementers of\n {@link org.eclipse.jface.text.ITextListener}. It represents a change applied\n to text viewer. The change is specified as a replace command using offset,\n length, inserted text, and replaced text. The text viewer issues a text event\n after the viewer has been changed either in response to a change of the\n viewer's document or when the viewer's visual content has been changed. In\n the first case, the text event also carries the original document event.\n Depending on the viewer's presentation mode, the text event coordinates are\n different from the document event's coordinates.\n <p>\n An empty text event usually indicates a change of the viewer's redraw state.</p>\n <p>\n Clients other than text viewer's don't create instances of this class.</p>\n\n @see org.eclipse.jface.text.ITextListener\n @see org.eclipse.jface.text.ITextViewer\n @see org.eclipse.jface.text.DocumentEvent\n"
4467,method,org/eclipse/jface/text/TextEvent/getDocumentEvent/," Returns the corresponding document event that caused the viewer change\n\n @return the corresponding document event, <code>null</code> if a visual change only\n"
4470,interface,org/eclipse/jface/text/ITextSelection," This interface represents a textual selection. A text selection is a range of\n characters. Although a text selection is a snapshot taken at a particular\n point in time, it must not copy the line information and the selected text\n from the selection provider.\n <p>\n If, for example, the selection provider is a text viewer (\n {@link org.eclipse.jface.text.ITextViewer}), and a text selection is created\n for the range [5, 10], the line formation for the 5th character must not be\n determined and remembered at the point of creation. It can rather be\n determined at the point, when <code>getStartLine</code> is called. If the\n source viewer range [0, 15] has been changed in the meantime between the\n creation of the text selection object and the invocation of\n <code>getStartLine</code>, the returned line number may differ from the\n line number of the 5th character at the point of creation of the text\n selection object.\n <p>\n The contract of this interface is that weak in order to allow for efficient\n implementations.</p>\n <p>\n Clients may implement this interface or use the default implementation\n provided by {@link org.eclipse.jface.text.TextSelection}.</p>\n\n @see org.eclipse.jface.text.TextSelection\n"
4473,method,org/eclipse/jface/text/ITextSelection/getStartLine/," Returns number of the line containing the offset of the selected text.\n If the underlying text has been changed between the creation of this\n selection object and the call of this method, the value returned might\n differ from what it would have been at the point of creation.\n\n @return the start line of this selection or -1 if there is no valid line information\n"
4474,method,org/eclipse/jface/text/ITextSelection/getEndLine/," Returns the number of the line containing the last character of the selected text.\n If the underlying text has been changed between the creation of this\n selection object and the call of this method, the value returned might\n differ from what it would have been at the point of creation.\n\n @return the end line of this selection or -1 if there is no valid line information\n"
4475,method,org/eclipse/jface/text/ITextSelection/getText/," Returns the selected text.\n If the underlying text has been changed between the creation of this\n selection object and the call of this method, the value returned might\n differ from what it would have been at the point of creation.\n\n @return the selected text or <code>null</code> if there is no valid text information\n"
4484,method,org/eclipse/jface/text/WhitespaceCharacterPainter/WhitespaceCharacterPainter/ITextViewer," Creates a new painter for the given text viewer.\n\n @param textViewer  the text viewer the painter should be attached to\n"
4485,class,org/eclipse/jface/text/TextPresentation," Describes the presentation styles for a section of an indexed text such as a\n document or string. A text presentation defines a default style for the whole\n section and in addition style differences for individual subsections. Text\n presentations can be narrowed down to a particular result window. All methods\n are result window aware, i.e. ranges outside the result window are always\n ignored.\n <p>\n All iterators provided by a text presentation assume that they enumerate non\n overlapping, consecutive ranges inside the default range. Thus, all these\n iterators do not include the default range. The default style range must be\n explicitly asked for using <code>getDefaultStyleRange</code>.\n"
4487,method,org/eclipse/jface/text/TextPresentation/setResultWindow/IRegion," Sets the result window for this presentation. When dealing with\n this presentation all ranges which are outside the result window\n are ignored. For example, the size of the presentation is 0\n when there is no range inside the window even if there are ranges\n outside the window. All methods are aware of the result window.\n\n @param resultWindow the result window\n"
4490,method,org/eclipse/jface/text/TextPresentation/addStyleRange/StyleRange," Add the given range to the presentation. The range must be a\n subrange of the presentation's default range.\n\n @param range the range to be added\n"
4494,method,org/eclipse/jface/text/TextPresentation/mergeStyleRanges/StyleRange[]," Merges the given ranges into this presentation. Each range must be a\n subrange of the presentation's default range. The ranges must be ordered\n by increasing offset and must not overlap (but may be adjacent).\n\n @param ranges the ranges to be added\n @since 3.0\n"
4507,interface,org/eclipse/jface/text/ITextViewerExtension," Extension interface for {@link org.eclipse.jface.text.ITextViewer}.\n <p>\n This extension interface replaces the event consumer mechanism (\n {@link org.eclipse.jface.text.ITextViewer#setEventConsumer(IEventConsumer)})\n with a set of methods that allow to manage a sequence of\n {@link org.eclipse.swt.custom.VerifyKeyListener}objects. It also adds\n <ul>\n <li>access to the control of this viewer</li>\n <li>marked region support as in emacs</li>\n <li>control of the viewer's redraw behavior by introducing\n     <code>setRedraw(boolean)</code>\n <li>access to the viewer's rewrite target.\n </ul>\n\n A rewrite target ({@link org.eclipse.jface.text.IRewriteTarget}) represents\n an facade offering the necessary methods to manipulate a document that is the\n input document of a text viewer.\n\n @since 2.0\n"
4508,method,org/eclipse/jface/text/ITextViewerExtension/prependVerifyKeyListener/VerifyKeyListener," Inserts the verify key listener at the beginning of the viewer's list of\n verify key listeners. If the listener is already registered with the\n viewer this call moves the listener to the beginning of the list.\n\n @param listener the listener to be inserted\n"
4509,method,org/eclipse/jface/text/ITextViewerExtension/appendVerifyKeyListener/VerifyKeyListener," Appends a verify key listener to the viewer's list of verify key\n listeners. If the listener is already registered with the viewer this\n call moves the listener to the end of the list.\n\n @param listener the listener to be added\n"
4510,method,org/eclipse/jface/text/ITextViewerExtension/removeVerifyKeyListener/VerifyKeyListener," Removes the verify key listener from the viewer's list of verify key listeners.\n If the listener is not registered with this viewer, this call has no effect.\n\n @param listener the listener to be removed\n"
4514,method,org/eclipse/jface/text/ITextViewerExtension/setRedraw/boolean," Enables/disables the redrawing of this text viewer. This temporarily\n disconnects the viewer from its underlying\n {@link org.eclipse.swt.custom.StyledText}widget. While being\n disconnected only the viewer's selection may be changed using\n <code>setSelectedRange</code>. Any direct manipulation of the widget\n as well as calls to methods that change the viewer's presentation state\n (such as enabling the segmented view) are not allowed. When redrawing is\n disabled the viewer does not send out any selection or view port change\n notification. When redrawing is enabled again, a selection change\n notification is sent out for the selected range and this range is\n revealed causing a view port changed notification.\n\n @param redraw <code>true</code> to enable redrawing, <code>false</code>\n            otherwise\n"
4517,method,org/eclipse/jface/text/IWidgetTokenKeeperExtension/requestWidgetToken/IWidgetTokenOwner;int," The given widget token owner requests the widget token  from\n this token keeper. Returns  <code>true</code> if the token is released\n by this token keeper. Note, the keeper must not call\n <code>releaseWidgetToken(IWidgetTokenKeeper)</code> explicitly.\n\n <p>The general contract is that the receiver should release the token\n if <code>priority</code> exceeds the receiver's priority.</p>\n\n @param owner the token owner\n @param priority the priority of the request\n @return <code>true</code> if token has been released <code>false</code> otherwise\n"
4518,method,org/eclipse/jface/text/IWidgetTokenKeeperExtension/setFocus/IWidgetTokenOwner," Requests the receiver to give focus to its popup shell, hover, or similar. There is\n no assumption made whether the receiver actually succeeded in taking the focus. The return\n value gives a hint whether the receiver tried to take focus.\n\n @param owner the token owner\n @return <code>true</code> if the receiver tried to take focus, <code>false</code> if it did not.\n"
4529,method,org/eclipse/jface/text/ITextViewerExtension5/exposeModelRange/IRegion," Exposes the given model range. Returns whether this call caused a change\n of the set of exposed model ranges.\n\n @param modelRange the model range to be exposed\n @return <code>true</code> if the set of exposed model ranges changed,\n         <code>false</code> otherwise\n"
4530,interface,org/eclipse/jface/text/IDocumentAdapterExtension," Extension interface for {@link org.eclipse.jface.text.IDocumentAdapter}.\n <p>\n Introduces the concepts of batching a series of document changes into a\n single styled text content change notification. Batching start when a client\n calls <code>stopForwardingDocumentChanges</code>. After that call this\n document adapter does not send out styled text content change notifications\n until <code>resumeForwardingDocumentChanges</code> is called. On\n <code>resumeForwardingDocumentChanges</code>, it sends out one styled text\n content change notification that covers all changes that have been applied to\n the document since calling <code>stopForwardingDocumentChanges</code>.\n\n @since 2.0\n"
4532,method,org/eclipse/jface/text/IDocumentAdapterExtension/resumeForwardingDocumentChanges/," Resumes forwarding document changes to the styled text.\n Also forces the styled text to catch up with all the changes\n that have been applied since <code>stopForwardingDocumentChanges</code>\n has been called.\n"
4533,class,org/eclipse/jface/text/TextSelection," Standard implementation of {@link org.eclipse.jface.text.ITextSelection}.\n <p>\n Takes advantage of the weak contract of correctness of its interface. If\n generated from a selection provider, it only remembers its offset and length\n and computes the remaining information on request.</p>\n"
4544,method,org/eclipse/jface/text/TextSelection/TextSelection/int;int," Creates a text selection for the given range. This\n selection object describes generically a text range and\n is intended to be an argument for the <code>setSelection</code>\n method of selection providers.\n\n @param offset the offset of the range, must not be negative\n @param length the length of the range, must not be negative\n"
4545,method,org/eclipse/jface/text/TextSelection/TextSelection/IDocument;int;int," Creates a text selection for the given range of the given document.\n This selection object is created by selection providers in responds\n <code>getSelection</code>.\n\n @param document the document whose text range is selected in a viewer\n @param offset the offset of the selected range, must not be negative\n @param length the length of the selected range, must not be negative\n"
4546,class,org/eclipse/jface/text/AbstractInformationControlManager," Manages the life cycle, visibility, layout, and contents of an\n {@link org.eclipse.jface.text.IInformationControl}. This manager can be\n installed on and removed from a control, referred to as the subject control,\n i.e. the one from which the subject of the information to be shown is\n retrieved. Also a manager can be enabled or disabled. An installed and\n enabled manager can be forced to show information in its information control\n using <code>showInformation</code>. An information control manager uses an\n <code>IInformationControlCloser</code> to define the behavior when a\n presented information control must be closed. The disposal of the subject and\n the information control are internally handled by the information control\n manager and are not the responsibility of the information control closer.\n\n @see org.eclipse.jface.text.IInformationControl\n @since 2.0\n"
4548,method,org/eclipse/jface/text/AbstractInformationControlManager/setInformation/String;Rectangle," Sets the parameters of the information to be displayed. These are the information itself and\n the area for which the given information is valid. This so called subject area is a graphical\n region of the information control's subject control. This method calls <code>presentInformation()</code>\n to trigger the presentation of the computed information.\n\n @param information the information, or <code>null</code> if none is available\n @param subjectArea the subject area, or <code>null</code> if none is available\n"
4549,method,org/eclipse/jface/text/AbstractInformationControlManager/setInformation/Object;Rectangle," Sets the parameters of the information to be displayed. These are the information itself and\n the area for which the given information is valid. This so called subject area is a graphical\n region of the information control's subject control. This method calls <code>presentInformation()</code>\n to trigger the presentation of the computed information.\n\n @param information the information, or <code>null</code> if none is available\n @param subjectArea the subject area, or <code>null</code> if none is available\n @since  2.1\n"
4555,method,org/eclipse/jface/text/AbstractInformationControlManager/setFallbackAnchors/Anchor[]," Sets the anchors fallback sequence used to layout the information control if the original\n anchor can not be used because the information control would not fit in the display client\n area.\n <p>\n The fallback anchor for a given anchor is the one that comes directly after the given anchor or\n is the first one in the sequence if the given anchor is the last one in the sequence.\n <p>\n </p>\n Note: This sequence is ignored if the original anchor is not contained in this list.\n </p>\n\n @param fallbackAnchors the array with the anchor fallback sequence\n @see #setAnchor(AbstractInformationControlManager.Anchor)\n"
4556,method,org/eclipse/jface/text/AbstractInformationControlManager/setCustomInformationControlCreator/IInformationControlCreator," Sets the temporary custom control creator, overriding this manager's default information control creator.\n\n @param informationControlCreator the creator, possibly <code>null</code>\n @since 3.0\n"
4557,method,org/eclipse/jface/text/AbstractInformationControlManager/takesFocusWhenVisible/boolean," Tells the manager whether it should set the focus to the information control when made visible.\n\n @param takesFocus <code>true</code> if information control should take focus when made visible\n"
4570,method,org/eclipse/jface/text/AbstractInformationControlManager/updateLocation/Point;Point;Rectangle;Anchor," Checks whether a control of the given size at the given location would be completely visible\n in the given display area when laid out by using the given anchor. If not, this method tries\n to shift the control orthogonal to the direction given by the anchor to make it visible. If possible\n it updates the location.<p>\n This method returns <code>true</code> if the potentially updated position results in a\n completely visible control, or <code>false</code> otherwise.\n\n\n @param location the location of the control\n @param size the size of the control\n @param displayArea the display area in which the control should be visible\n @param anchor anchor for lying out the control\n @return <code>true</code>if the updated location is useful\n"
4573,method,org/eclipse/jface/text/AbstractInformationControlManager/showInformation/," Computes information to be displayed as well as the subject area\n and initiates that this information is presented in the information control.\n This happens only if this controller is enabled.\n"
4577,method,org/eclipse/jface/text/AbstractInformationControlManager/showInformationControl/Rectangle," Shows the information control and starts the information control closer.\n This method may not be called by clients.\n\n @param subjectArea the information area\n"
4579,method,org/eclipse/jface/text/AbstractInformationControlManager/dispose/," Disposes this manager and if necessary all dependent parts such as\n the information control. For symmetry it first disables this manager.\n"
4615,method,org/eclipse/jface/text/MarkSelection/MarkSelection/IDocument;int;int," Creates a MarkSelection.\n\n @param document the marked document\n @param offset the offset of the mark\n @param length the length of the mark, may be negative if caret before offset\n"
4616,interface,org/eclipse/jface/text/IBlockTextSelection," A rectangular selection in a text document. A column selection spans the visually identical range\n of columns on a contiguous range of lines. The character count of the same visually perceived\n column may not be equal for two different lines, therefore computing the set of disjunct\n character ranges covered by a column selection is influenced by the used font and tabulator\n width. Using column selections with proportional fonts may render unexpected results.\n <h5><a name="virtual">Virtual Spaces</a></h5>\n The {@linkplain #getStartColumn() start column} and {@linkplain #getEndColumn() end column} may\n refer to &quot;virtual offsets&quot; in the white space beyond the end of the line. Such an\n offset can be realized by inserting a space for each missing character.\n <p>\n The {@linkplain ITextSelection#getOffset() offset} and\n {@linkplain ITextSelection#getLength() length} of an {@link IBlockTextSelection} refer to the\n smallest non-virtual range that comprises the entire rectangular selection.\n </p>\n <p>\n Clients may implement this interface or use the default implementation provided by\n {@link org.eclipse.jface.text.BlockTextSelection}.\n </p>\n \n @see org.eclipse.jface.text.BlockTextSelection\n @since 3.5\n"
4617,method,org/eclipse/jface/text/IBlockTextSelection/getStartColumn/," Returns the column on the {@linkplain ITextSelection#getStartLine() start line} at which the\n selection starts. The returned column is a character count measured from the start of the\n line. It may be larger than the length of the line, in which case it is a <a\n href="#virtual">virtual</a> offset.\n \n @return the start column measured from the line start\n"
4618,method,org/eclipse/jface/text/IBlockTextSelection/getEndColumn/," Returns the exclusive column on the {@linkplain ITextSelection#getEndLine() end line} at which the\n selection ends. The returned column is a character count measured from the start of the\n line. It may be larger than the length of the line, in which case it is a <a\n href="#virtual">virtual</a> offset.\n \n @return the end column measured from the line start\n"
4619,method,org/eclipse/jface/text/IBlockTextSelection/getText/," {@inheritDoc}\n <p>\n The returned text does not necessarily correspond to the total\n {@linkplain ITextSelection#getOffset() offset} and {@link ITextSelection#getLength() length},\n as only the text within the selected columns is returned.\n <p>\n Any <a href="#virtual">virtual</a> spaces beyond the end of the selected lines are\n materialized and returned as text.\n </p>\n \n @see org.eclipse.jface.text.ITextSelection#getText()\n"
4631,method,org/eclipse/jface/text/DefaultTextDoubleClickStrategy/findExtendedDoubleClickSelection/IDocument;int," Tries to find a suitable double click selection for the given offset.\n <p>\n <strong>Note:</> This method must return <code>null</code> if it simply selects the word at\n the given offset.\n </p>\n \n @param document the document\n @param offset the offset\n @return the selection or <code>null</code> if none to indicate simple word selection\n @since 3.5\n"
4644,interface,org/eclipse/jface/text/ITextDoubleClickStrategy," A text double click strategy defines the reaction of a text viewer to mouse\n double click events. The strategy must be installed on an\n {@link org.eclipse.jface.text.ITextViewer}.\n <p>\n Clients may implement this interface or use the standard implementation\n <code>DefaultTextDoubleClickStrategy</code>.</p>\n\n @see org.eclipse.jface.text.ITextViewer\n @see org.eclipse.swt.events.MouseListener#mouseDoubleClick(org.eclipse.swt.events.MouseEvent)\n"
4649,method,org/eclipse/jface/text/DefaultTextHover/getHoverInfo/ITextViewer;IRegion," {@inheritDoc}\n\n @deprecated As of 3.4, replaced by {@link ITextHoverExtension2#getHoverInfo2(ITextViewer, IRegion)}\n"
4651,method,org/eclipse/jface/text/DefaultTextHover/isIncluded/Annotation," Tells whether the annotation should be included in\n the computation.\n\n @param annotation the annotation to test\n @return <code>true</code> if the annotation is included in the computation\n"
4653,class,org/eclipse/jface/text/PropagatingFontFieldEditor," This font field editor implements chaining between a source preference\n store and a target preference store. Any time the source preference\n store changes, the change is propagated to the target store. Propagation\n means that the actual value stored in the source store is set as default\n value in the target store. If the target store does not contain a value\n other than the default value, the new default value is immediately\n effective.\n\n @see FontFieldEditor\n @since 2.0\n @deprecated since 3.0 not longer in use, no longer supported\n"
4657,method,org/eclipse/jface/text/PropagatingFontFieldEditor/PropagatingFontFieldEditor/String;String;Composite;String," Creates a new font field editor with the given parameters.\n\n @param name the editor's name\n @param labelText the text shown as editor description\n @param parent the editor's parent widget\n @param defaultFontLabel the label shown in the editor value field when the default value should be taken\n"
4662,method,org/eclipse/jface/text/JFaceTextUtil/getBottomIndex/StyledText," Returns the last fully visible line of the widget. The exact semantics of "last fully visible\n line" are:\n <ul>\n <li>the last line of which the last pixel is visible, if any\n <li>otherwise, the only line that is partially visible\n </ul>\n\n @param widget the widget\n @return the last fully visible line\n"
4663,method,org/eclipse/jface/text/JFaceTextUtil/getPartialTopIndex/StyledText," Returns the index of the first (possibly only partially) visible line of the widget\n\n @param widget the widget\n @return the index of the first line of which a pixel is visible\n"
4664,method,org/eclipse/jface/text/JFaceTextUtil/getPartialBottomIndex/StyledText," Returns the index of the last (possibly only partially) visible line of the widget\n\n @param widget the text widget\n @return the index of the last line of which a pixel is visible\n"
4672,method,org/eclipse/jface/text/JFaceTextUtil/computeArea/IRegion;ITextViewer," Determines the graphical area covered by the given text region in\n the given viewer.\n\n @param region the region whose graphical extend must be computed\n @param textViewer the text viewer containing the region\n @return the graphical extend of the given region in the given viewer\n\n @since 3.4\n"
4674,method,org/eclipse/jface/text/JFaceTextUtil/isEmpty/ITextViewer;ITextSelection," Returns <code>true</code> if the text covered by <code>selection</code> does not contain any\n characters in the given viewer. Note the difference to {@link ITextSelection#isEmpty()},\n which returns <code>true</code> only for invalid selections.\n \n @param viewer the viewer\n @param selection the selection\n @return <code>true</code> if <code>selection</code> does not contain any text,\n         <code>false</code> otherwise\n @throws BadLocationException if accessing the document failed\n @since 3.5\n"
4677,interface,org/eclipse/jface/text/ITextViewerExtension4," Extension interface for {@link org.eclipse.jface.text.ITextViewer}.\n Introduces the concept of text presentation listeners and improves focus\n handling among widget token keepers.\n <p>\n A {@link org.eclipse.jface.text.ITextPresentationListener}is a listener that\n is informed by the viewer that a text presentation is about to be applied.\n During this callback the listener is allowed to modify the presentation. Text\n presentation listeners are thus a mean to participate in the process of text\n presentation creation.\n\n @since 3.0\n"
4679,method,org/eclipse/jface/text/ITextViewerExtension4/addTextPresentationListener/ITextPresentationListener," Adds the given text presentation listener to this text viewer.\n This call has no effect if the listener is already registered\n with this text viewer.\n\n @param listener the text presentation listener\n"
4680,method,org/eclipse/jface/text/ITextViewerExtension4/removeTextPresentationListener/ITextPresentationListener," Removes the given text presentation listener from this text viewer.\n This call has no effect if the listener is not registered with this\n text viewer.\n\n @param listener the text presentation listener\n"
4685,method,org/eclipse/jface/text/MarginPainter/setMarginRulerColumn/int," Sets the column after which to draw the margin line.\n\n @param width the column\n"
4689,method,org/eclipse/jface/text/MarginPainter/initialize/," Initializes this painter, by flushing and recomputing all caches and causing\n the widget to be redrawn. Must be called explicitly when font of text widget changes.\n"
4700,method,org/eclipse/jface/text/IInformationControl/setSizeConstraints/int;int," Sets the information control's size constraints. A constraint value of\n {@link SWT#DEFAULT} indicates no constraint. This method must be called before\n {@link #computeSizeHint()} is called.\n <p>\n Note: An information control which implements {@link IInformationControlExtension3}\n may ignore this method or use it as hint for its very first appearance.\n </p>\n @param maxWidth the maximal width of the control  to present the information, or {@link SWT#DEFAULT} for not constraint\n @param maxHeight the maximal height of the control to present the information, or {@link SWT#DEFAULT} for not constraint\n"
4702,method,org/eclipse/jface/text/IInformationControl/setVisible/boolean," Controls the visibility of this information control.\n <p>\n <strong>Note:</strong> The information control must not grab focus when\n made visible.\n </p>\n\n @param visible <code>true</code> if the control should be visible\n"
4707,method,org/eclipse/jface/text/IInformationControl/removeDisposeListener/DisposeListener," Removes the given listeners from the list of dispose listeners.\n If the listener is not registered this call has no effect.\n\n @param listener the listener to be removed\n"
4713,method,org/eclipse/jface/text/IInformationControl/removeFocusListener/FocusListener," Removes the given listeners from the list of focus listeners.\n If the listener is not registered this call has no affect.\n\n @param listener the listener to be removed\n"
4716,method,org/eclipse/jface/text/IFindReplaceTarget/findAndSelect/int;String;boolean;boolean;boolean," Searches for a string starting at the given widget offset and using the specified search\n directives. If a string has been found it is selected and its start offset is\n returned.\n <p>\n Replaced by {@link IFindReplaceTargetExtension3#findAndSelect(int, String, boolean, boolean, boolean, boolean)}.\n\n @param widgetOffset the widget offset at which searching starts\n @param findString the string which should be found\n @param searchForward <code>true</code> searches forward, <code>false</code> backwards\n @param caseSensitive <code>true</code> performs a case sensitive search, <code>false</code> an insensitive search\n @param wholeWord if <code>true</code> only occurrences are reported in which the findString stands as a word by itself\n @return the position of the specified string, or -1 if the string has not been found\n"
4726,method,org/eclipse/jface/text/ITextViewerExtension7/setTabsToSpacesConverter/IAutoEditStrategy," Sets an auto edit strategy can converts tabs to spaces.\n\n @param converter the converter or <code>null</code> if none should be used\n"
4739,method,org/eclipse/jface/text/PaintManager/dispose/," Disposes this paint manager. The paint manager uninstalls itself\n and clears all registered painters. This method is also called when the\n last painter is removed from the list of managed painters.\n"
4756,method,org/eclipse/jface/text/DocumentCommand/addCommand/int;int;String;IDocumentListener," Adds an additional replace command. The added replace command must not overlap\n with existing ones. If the document command owner is not <code>null</code>, it will not\n get document change notifications for the particular command.\n\n @param commandOffset the offset of the region to replace\n @param commandLength the length of the region to replace\n @param commandText the text to replace with, may be <code>null</code>\n @param commandOwner the command owner, may be <code>null</code>\n @throws BadLocationException if the added command intersects with an existing one\n @since 2.1\n"
4760,field,org/eclipse/jface/text/DocumentCommand/doit,"Must the command be updated "
4765,field,org/eclipse/jface/text/DocumentCommand/caretOffset," The caret offset with respect to the document before the document command is executed.\n @since 2.1\n"
4766,field,org/eclipse/jface/text/DocumentCommand/shiftsCaret," Indicates whether the caret should be shifted by this command.\n @since 3.0\n"
4768,method,org/eclipse/jface/text/ITextHover/getHoverInfo/ITextViewer;IRegion," Returns the information which should be presented when a hover popup is shown\n for the specified hover region. The hover region has the same semantics\n as the region returned by <code>getHoverRegion</code>. If the returned\n information is <code>null</code> or empty no hover popup will be shown.\n\n @param textViewer the viewer on which the hover popup should be shown\n @param hoverRegion the text range in the viewer which is used to determine\n 		the hover display information\n @return the hover popup display information, or <code>null</code> if none available\n @deprecated As of 3.4, replaced by {@link ITextHoverExtension2#getHoverInfo2(ITextViewer, IRegion)}\n"
4769,method,org/eclipse/jface/text/ITextHover/getHoverRegion/ITextViewer;int," Returns the text region which should serve as the source of information\n to compute the hover popup display information. The popup has been requested\n for the given offset.<p>\n For example, if hover information can be provided on a per method basis in a\n source viewer, the offset should be used to find the enclosing method and the\n source range of the method should be returned.\n\n @param textViewer the viewer on which the hover popup should be shown\n @param offset the offset for which the hover request has been issued\n @return the hover region used to compute the hover display information\n"
4785,method,org/eclipse/jface/text/IEditingSupport/isOriginator/DocumentEvent;IRegion," Returns <code>true</code> if the receiver is the originator of a\n <code>DocumentEvent</code> and if that <code>event</code> is related\n to <code>subjectRegion</code>.\n <p>\n The relationship between <code>event</code> and\n <code>subjectRegion</code> is not always obvious. Often, the main\n editing area being monitored by the caller will be at\n <code>subjectRegion</code>, when the receiver modifies the underlying\n document at a different location without wanting to interrupt the normal\n typing flow of the user.\n </p>\n <p>\n An example would be an editor that automatically increments the section\n number of the next section when the user typed in a new section title. In\n this example, the subject region is the current typing location, while\n the increment results in a document change further down in the text.\n </p>\n\n @param event the <code>DocumentEvent</code> in question\n @param subjectRegion the region that the caller is interested in\n @return <code>true</code> if <code>event</code> was triggered by the\n         receiver and relates to <code>subjectRegion</code>\n"
4788,method,org/eclipse/jface/text/ITextPresentationListener/applyTextPresentation/TextPresentation," This method is called when a text presentation is about to be applied to\n the text viewer. The receiver is allowed to change the text presentation\n during that call.\n\n @param textPresentation the current text presentation\n"
4790,method,org/eclipse/jface/text/ITextViewer/getTextWidget/," Returns this viewer's SWT control, <code>null</code> if the control is disposed.\n <p>\n <em>Calling API directly on the widget can interfere with features provided\n by a text viewer. Clients who call API directly on the widget are responsible\n to resolve such conflicts on their side.</em>\n </p>\n\n @return the SWT control or <code>null</code>\n"
4795,method,org/eclipse/jface/text/ITextViewer/activatePlugins/," Activates the installed plug-ins. If the plug-ins are already activated\n this call has no effect.\n"
4797,method,org/eclipse/jface/text/ITextViewer/addViewportListener/IViewportListener," Adds the given view port listener to this viewer. If the listener is already registered with\n this viewer, this call has no effect.\n \n @param listener the listener to be added\n"
4798,method,org/eclipse/jface/text/ITextViewer/removeViewportListener/IViewportListener," Removes the given listener from this viewer's set of view port listeners.\n If the listener is not registered with this viewer, this call has\n no effect.\n\n @param listener the listener to be removed\n"
4799,method,org/eclipse/jface/text/ITextViewer/addTextListener/ITextListener," Adds a text listener to this viewer. If the listener is already registered\n with this viewer, this call has no effect.\n\n @param listener the listener to be added\n"
4800,method,org/eclipse/jface/text/ITextViewer/removeTextListener/ITextListener," Removes the given listener from this viewer's set of text listeners.\n If the listener is not registered with this viewer, this call has\n no effect.\n\n @param listener the listener to be removed\n"
4801,method,org/eclipse/jface/text/ITextViewer/addTextInputListener/ITextInputListener," Adds a text input listener to this viewer. If the listener is already registered\n with this viewer, this call has no effect.\n\n @param listener the listener to be added\n"
4802,method,org/eclipse/jface/text/ITextViewer/removeTextInputListener/ITextInputListener," Removes the given listener from this viewer's set of text input listeners.\n If the listener is not registered with this viewer, this call has\n no effect.\n\n @param listener the listener to be removed\n"
4811,method,org/eclipse/jface/text/ITextViewer/getVisibleRegion/," Returns the current visible region of this viewer's document. The result\n may differ from the argument passed to <code>setVisibleRegion</code> if\n the document has been modified since then. The visible region is supposed\n to be a consecutive region in viewer's input document and every character\n inside that region is supposed to visible in the viewer's widget.\n <p>\n Viewers implementing {@link ITextViewerExtension5} may be forced to\n change the fractions of the input document that are shown, in order to\n fulfill this contract.\n\n @return this viewer's current visible region\n"
4812,method,org/eclipse/jface/text/ITextViewer/overlapsWithVisibleRegion/int;int," Returns whether a given range overlaps with the visible region of this\n viewer's document.\n <p>\n Viewers implementing {@link ITextViewerExtension5}may be forced to\n change the fractions of the input document that are shown in order to\n fulfill this request. This is because the overlap is supposed to be\n without gaps.\n\n @param offset the offset\n @param length the length\n @return <code>true</code> if the specified range overlaps with the\n         visible region\n"
4813,method,org/eclipse/jface/text/ITextViewer/changeTextPresentation/TextPresentation;boolean," Applies the color information encoded in the given text presentation.\n <code>controlRedraw</code> tells this viewer whether it should take care of\n redraw management or not. If, e.g., this call is one in a sequence of multiple\n presentation calls, it is more appropriate to explicitly control redrawing at the\n beginning and the end of the sequence.\n\n @param presentation the presentation to be applied to this viewer\n @param controlRedraw indicates whether this viewer should manage redraws\n"
4816,method,org/eclipse/jface/text/ITextViewer/setTextColor/Color;int;int;boolean," Applies the given color as text foreground color to the specified section\n of this viewer. <code>controlRedraw</code> tells this viewer whether it\n should take care of redraw management or not.\n\n @param color the color to be applied\n @param offset the offset of the range to be changed\n @param length the length of the range to be changed\n @param controlRedraw indicates whether this viewer should manage redraws\n"
4823,method,org/eclipse/jface/text/ITextViewer/getSelectionProvider/," Returns a selection provider dedicated to this viewer. Subsequent\n calls to this method return always the same selection provider.\n\n @return this viewer's selection provider\n"
4825,method,org/eclipse/jface/text/ITextViewer/setTopIndex/int," Scrolls the widget so that the given index is the line\n with the smallest line number of all visible lines.\n\n @param index the line which should become the top most line\n"
4850,method,org/eclipse/jface/text/IEventConsumer/processEvent/VerifyEvent," Processes the given event and marks it as done if it should\n be ignored by subsequent receivers.\n\n @param event the verify event which will be investigated\n"
4856,method,org/eclipse/jface/text/revisions/Revision/addRange/ILineRange," Adds a line range to this revision. The range must be non-empty and have a legal start line\n (not -1).\n\n @param range a line range that was changed with this revision\n @throws IndexOutOfBoundsException if the line range is empty or has a negative start line\n"
4857,method,org/eclipse/jface/text/revisions/Revision/getRegions/," Returns the contained {@link RevisionRange}s adapted to the current diff state. The returned\n information is only valid at the moment it is returned, and may change as the annotated\n document is modified.\n\n @return an unmodifiable view of the contained ranges (element type: {@link RevisionRange})\n"
4859,method,org/eclipse/jface/text/revisions/Revision/getColor/," Returns the author color for this revision. This color can be used to visually distinguish\n one revision from another, for example as background color.\n <p>\n Revisions from the same author must return the same color and revisions from different authors\n must return distinct colors.</p>\n\n @return the RGB color for this revision's author\n"
4860,method,org/eclipse/jface/text/revisions/Revision/getId/," Returns the unique (within the document) id of this revision. This may be the version string\n or a different identifier.\n\n @return the id of this revision\n"
4882,class,org/eclipse/jface/text/revisions/RevisionInformation," Encapsulates revision information for one line-based document.\n <p>\n Clients may instantiate.\n </p>\n\n @since 3.2\n @see Revision\n"
4885,method,org/eclipse/jface/text/revisions/RevisionInformation/getRanges/," Returns the line ranges of this revision information. The returned information is only valid\n at the moment it is returned, and may change as the annotated document is modified. See\n {@link IRevisionListener} for a way to be informed when the revision information changes. The\n returned list is sorted by document offset.\n\n @return an unmodifiable view of the line ranges (element type: {@link RevisionRange})\n @see IRevisionListener\n @since 3.3\n"
4888,method,org/eclipse/jface/text/revisions/RevisionInformation/getInformationPresenterControlCreator/," {@inheritDoc}\n @return the information control creator or <code>null</code>\n @since 3.3\n"
4889,method,org/eclipse/jface/text/revisions/RevisionInformation/setHoverControlCreator/IInformationControlCreator," Sets the hover control creator.\n <p>\n <strong>Note:</strong> The created information control must be able to display the object\n returned by the concrete implementation of {@link Revision#getHoverInfo()}.\n </p>\n\n @param creator the control creator\n @since 3.3\n"
4892,class,org/eclipse/jface/text/revisions/RevisionEvent," Informs about a change of revision information.\n <p>\n Clients may use but not instantiate this class.\n </p>\n\n @since 3.3\n @noinstantiate This class is not intended to be instantiated by clients.\n"
4896,class,org/eclipse/jface/text/reconciler/MonoReconciler," Standard implementation of {@link org.eclipse.jface.text.reconciler.IReconciler}.\n The reconciler is configured with a single {@linkplain org.eclipse.jface.text.reconciler.IReconcilingStrategy reconciling strategy}\n that is used independently from where a dirty region is located in the reconciler's\n document.\n <p>\n Usually, clients instantiate this class and configure it before using it.\n </p>\n\n @see org.eclipse.jface.text.IDocumentListener\n @see org.eclipse.jface.text.ITextInputListener\n @see org.eclipse.jface.text.reconciler.DirtyRegion\n @since 2.0\n"
4904,method,org/eclipse/jface/text/reconciler/IReconciler/install/ITextViewer," Installs the reconciler on the given text viewer. After this method has been\n finished, the reconciler is operational, i.e., it works without requesting\n further client actions until <code>uninstall</code> is called.\n\n @param textViewer the viewer on which the reconciler is installed\n"
4907,class,org/eclipse/jface/text/reconciler/Reconciler," Standard implementation of {@link org.eclipse.jface.text.reconciler.IReconciler}.\n The reconciler is configured with a set of {@linkplain org.eclipse.jface.text.reconciler.IReconcilingStrategy reconciling strategies}\n each of which is responsible for a particular content type.\n <p>\n Usually, clients instantiate this class and configure it before using it.\n </p>\n\n @see org.eclipse.jface.text.IDocumentListener\n @see org.eclipse.jface.text.ITextInputListener\n @see org.eclipse.jface.text.reconciler.DirtyRegion\n"
4917,interface,org/eclipse/jface/text/reconciler/IReconcilingStrategyExtension," Extends {@link org.eclipse.jface.text.reconciler.IReconcilingStrategy}\n with the following functions:\n <ul>\n 	<li>usage of a progress monitor</li>\n 	<li>initial reconciling step: if a reconciler runs as periodic activity in the background, this\n 		methods offers the reconciler a chance for initializing its strategies and achieving a\n 		reconciled state before the periodic activity starts.</li>\n </ul>\n\n @since 2.0\n"
4918,method,org/eclipse/jface/text/reconciler/IReconcilingStrategyExtension/setProgressMonitor/IProgressMonitor," Tells this reconciling strategy with which progress monitor\n it will work. This method will be called before any other\n method and can be called multiple times.\n\n @param monitor the progress monitor with which this strategy will work\n"
4919,method,org/eclipse/jface/text/reconciler/IReconcilingStrategyExtension/initialReconcile/," Called only once in the life time of this reconciling strategy.\n"
4923,method,org/eclipse/jface/text/reconciler/IReconcilingStrategy/reconcile/DirtyRegion;IRegion," Activates incremental reconciling of the specified dirty region.\n As a dirty region might span multiple content types, the segment of the\n dirty region which should be investigated is also provided to this\n reconciling strategy. The given regions refer to the document passed into\n the most recent call of {@link #setDocument(IDocument)}.\n\n @param dirtyRegion the document region which has been changed\n @param subRegion the sub region in the dirty region which should be reconciled\n"
4924,method,org/eclipse/jface/text/reconciler/IReconcilingStrategy/reconcile/IRegion," Activates non-incremental reconciling. The reconciling strategy is just told\n that there are changes and that it should reconcile the given partition of the\n document most recently passed into {@link #setDocument(IDocument)}.\n\n @param partition the document partition to be reconciled\n"
4928,method,org/eclipse/jface/text/reconciler/AbstractReconciler/setDelay/int," Tells the reconciler how long it should wait for further text changes before\n activating the appropriate reconciling strategies.\n\n @param delay the duration in milliseconds of a change collection period.\n"
4930,method,org/eclipse/jface/text/reconciler/AbstractReconciler/setIsAllowedToModifyDocument/boolean," Tells the reconciler whether it is allowed to change the document\n inside its reconciler thread.\n <p>\n If this is set to <code>false</code> an {@link UnsupportedOperationException}\n will be thrown when this restriction will be violated.\n </p>\n\n @param isAllowedToModify indicates whether this reconciler is allowed to modify the document\n @since 3.2\n"
4942,method,org/eclipse/jface/text/reconciler/AbstractReconciler/reconcilerReset/," Hook that is called after the reconciler thread has been reset.\n"
4943,method,org/eclipse/jface/text/reconciler/AbstractReconciler/isRunningInReconcilerThread/," Tells whether the code is running in this reconciler's\n background thread.\n\n @return <code>true</code> if running in this reconciler's background thread\n @since 3.4\n"
4945,interface,org/eclipse/jface/text/reconciler/IReconcilerExtension," Extends {@link org.eclipse.jface.text.reconciler.IReconciler} with\n the ability to be aware of documents with multiple partitionings.\n\n @since 3.0\n"
4959,method,org/eclipse/jface/text/reconciler/IReconcileStep/reconcile/DirtyRegion;IRegion," Activates incremental reconciling of the specified dirty region.\n As a dirty region might span multiple content types, the segment of the\n dirty region which should be investigated is also provided to this\n reconciling strategy. The given regions refer to the document passed into\n the most recent call of {@link IReconcilingStrategy#setDocument(org.eclipse.jface.text.IDocument)}.\n\n @param dirtyRegion the document region which has been changed\n @param subRegion the sub region in the dirty region which should be reconciled\n @return an array with reconcile results\n"
4960,method,org/eclipse/jface/text/reconciler/IReconcileStep/reconcile/IRegion," Activates non-incremental reconciling. The reconciling strategy is just told\n that there are changes and that it should reconcile the given partition of the\n document most recently passed into {@link IReconcilingStrategy#setDocument(org.eclipse.jface.text.IDocument)}.\n\n @param partition the document partition to be reconciled\n @return an array with reconcile results\n"
4971,method,org/eclipse/jface/text/reconciler/AbstractReconcileStep/reconcileModel/DirtyRegion;IRegion," Reconciles the model of this reconcile step. The\n result is based on the input model.\n\n @param dirtyRegion the document region which has been changed\n @param subRegion the sub region in the dirty region which should be reconciled\n @return an array with reconcile results\n"
4983,method,org/eclipse/jface/text/link/ProposalPosition/getChoices/," Returns the proposals attached to this position. The returned array is owned by\n this <code>ProposalPosition</code> and may not be modified by clients.\n\n @return an array of choices, including the initial one. Callers must not\n         modify it.\n"
4990,method,org/eclipse/jface/text/link/LinkedModeUI/setExitPosition/LinkedModeUITarget;int;int;int," Sets the exit position to move the caret to when linked mode mode is\n exited.\n\n @param target the target where the exit position is located\n @param offset the offset of the exit position\n @param length the length of the exit position (in case there should be a\n        selection)\n @param sequence set to the tab stop position of the exit position, or\n        <code>LinkedPositionGroup.NO_STOP</code> if there should be no\n        tab stop.\n @throws BadLocationException if the position is not valid in the viewer's\n         document\n"
4991,method,org/eclipse/jface/text/link/LinkedModeUI/setExitPosition/ITextViewer;int;int;int," Sets the exit position to move the caret to when linked mode is exited.\n\n @param viewer the viewer where the exit position is located\n @param offset the offset of the exit position\n @param length the length of the exit position (in case there should be a\n        selection)\n @param sequence set to the tab stop position of the exit position, or\n 		  <code>LinkedPositionGroup.NO_STOP</code> if there should be no tab stop.\n @throws BadLocationException if the position is not valid in the\n         viewer's document\n"
4994,method,org/eclipse/jface/text/link/LinkedModeUI/setDoContextInfo/boolean," Sets the context info property. If set to <code>true</code>, context\n info will be invoked on the current target's viewer whenever a position\n is switched.\n\n @param doContextInfo <code>true</code> if context information should be\n        displayed\n"
4995,method,org/eclipse/jface/text/link/LinkedModeUI/setPositionListener/ILinkedModeUIFocusListener," Sets the focus callback which will get informed when the focus of the\n linked mode UI changes.\n <p>\n If there is a listener installed already, it will be replaced.\n </p>\n\n @param listener the new listener, never <code>null</code>.\n"
4996,method,org/eclipse/jface/text/link/LinkedModeUI/setSimpleMode/boolean," Sets the "simple" mode of the receiver. A linked mode UI in simple mode\n merely draws the exit position, but not the target, focus, and slave\n positions. Default is <code>false</code>. This method must be called\n before it is entered.\n\n @param simple <code>true</code> if the UI should be in simple mode.\n"
4998,method,org/eclipse/jface/text/link/LinkedModeUI/LinkedModeUI/LinkedModeModel;LinkedModeUITarget[]," Creates a new UI on the given model and the set of viewers. The model\n must provide a tab stop sequence with a non-empty list of tab stops.\n\n @param model the linked mode model\n @param targets the non-empty list of targets upon which the linked mode\n        UI should act\n"
4999,method,org/eclipse/jface/text/link/LinkedModeUI/LinkedModeUI/LinkedModeModel;ITextViewer," Convenience constructor for just one viewer.\n\n @param model the linked mode model\n @param viewer the viewer upon which the linked mode UI should act\n"
5000,method,org/eclipse/jface/text/link/LinkedModeUI/LinkedModeUI/LinkedModeModel;ITextViewer[]," Convenience constructor for multiple viewers.\n\n @param model the linked mode model\n @param viewers the non-empty list of viewers upon which the linked mode\n        UI should act\n"
5001,method,org/eclipse/jface/text/link/LinkedModeUI/LinkedModeUI/LinkedModeModel;LinkedModeUITarget," Convenience constructor for one target.\n\n @param model the linked mode model\n @param target the target upon which the linked mode UI should act\n"
5002,field,org/eclipse/jface/text/link/LinkedModeUI/CYCLE_NEVER," Constant indicating that this UI should never cycle from the last\n position to the first and vice versa.\n"
5003,field,org/eclipse/jface/text/link/LinkedModeUI/CYCLE_ALWAYS," Constant indicating that this UI should always cycle from the last\n position to the first and vice versa.\n"
5004,field,org/eclipse/jface/text/link/LinkedModeUI/CYCLE_WHEN_NO_PARENT," Constant indicating that this UI should cycle from the last position to\n the first and vice versa if its model is not nested.\n"
5006,method,org/eclipse/jface/text/link/LinkedModeUI/ILinkedModeUIFocusListener/linkingFocusLost/LinkedPosition;LinkedModeUITarget," Called when the UI for the linked mode leaves a linked position.\n\n @param position the position being left\n @param target the target where <code>position</code> resides in\n"
5007,method,org/eclipse/jface/text/link/LinkedModeUI/ILinkedModeUIFocusListener/linkingFocusGained/LinkedPosition;LinkedModeUITarget," Called when the UI for the linked mode gives focus to a linked position.\n\n @param position the position being entered\n @param target the target where <code>position</code> resides in\n"
5011,class,org/eclipse/jface/text/link/LinkedModeUI/ExitFlags," Exit flags returned if a custom exit policy wants to exit linked mode.\n <p>\n Clients may instantiate this class.\n </p>\n"
5016,method,org/eclipse/jface/text/link/LinkedModeUI/IExitPolicy/doExit/LinkedModeModel;VerifyEvent;int;int," Checks whether the linked mode should be left after receiving the\n given <code>VerifyEvent</code> and selection. Note that the event\n carries widget coordinates as opposed to <code>offset</code> and\n <code>length</code> which are document coordinates.\n\n @param model the linked mode model\n @param event the verify event\n @param offset the offset of the current selection\n @param length the length of the current selection\n @return valid exit flags or <code>null</code> if no special action\n         should be taken\n"
5017,class,org/eclipse/jface/text/contentassist/ContentAssistEvent," Describes the state that the content assistant is in when completing proposals.\n <p>\n Clients may use this class.\n </p>\n\n @since 3.2\n @see ICompletionListener\n @noinstantiate This class is not intended to be instantiated by clients.\n"
5022,method,org/eclipse/jface/text/contentassist/ICompletionListenerExtension/assistSessionRestarted/ContentAssistEvent," Called when code assist is invoked when there is already a current code assist session.\n\n @param event the content assist event\n"
5023,interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension," Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal}\n with the following functions:\n <ul>\n 	<li>handling of trigger characters other than ENTER</li>\n 	<li>completion proposal validation for a given offset</li>\n 	<li>context information can be freely positioned</li>\n </ul>\n\n @since 2.0\n"
5028,interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension3," Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal}\n with the following functions:\n <ul>\n	<li>provision of a custom information control creator</li>\n	<li>provide a custom completion text and offset for prefix completion</li>\n </ul>\n\n @since 3.0\n"
5030,method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension3/getPrefixCompletionText/IDocument;int," Returns the string that would be inserted at the position returned from\n {@link #getPrefixCompletionStart(IDocument, int)} if this proposal was\n applied. If the replacement string cannot be determined,\n <code>null</code> may be returned.\n\n @param document the document that the receiver applies to\n @param completionOffset the offset into <code>document</code> where the\n        completion takes place\n @return the replacement string or <code>null</code> if it cannot be\n         determined\n"
5032,interface,org/eclipse/jface/text/contentassist/IContextInformationExtension," Extends {@link org.eclipse.jface.text.contentassist.IContextInformation} with\n the ability to freely position the context information.\n\n @since 2.0\n"
5034,class,org/eclipse/jface/text/contentassist/ContentAssistant," The standard implementation of the <code>IContentAssistant</code> interface. Usually, clients\n instantiate this class and configure it before using it.\n"
5040,method,org/eclipse/jface/text/contentassist/ContentAssistant/enableAutoInsert/boolean," Enables the content assistant's auto insertion mode. If enabled, the content assistant\n inserts a proposal automatically if it is the only proposal. In the case of ambiguities, the\n user must make the choice.\n\n @param enabled indicates whether auto insertion is enabled or not\n @since 2.0\n"
5041,method,org/eclipse/jface/text/contentassist/ContentAssistant/createAutoAssistListener/," This method allows subclasses to provide their own {@link AutoAssistListener}.\n\n @return a new auto assist listener\n @since 3.4\n"
5043,method,org/eclipse/jface/text/contentassist/ContentAssistant/getAutoActivationDelay/," Gets the delay after which the content assistant is automatically invoked if the cursor is\n behind an auto activation character.\n \n @return the auto activation delay (will not be negative)\n @since 3.4\n"
5044,method,org/eclipse/jface/text/contentassist/ContentAssistant/setProposalPopupOrientation/int," Sets the proposal pop-ups' orientation. The following values may be used:\n <ul>\n   <li>PROPOSAL_OVERLAY<p>\n     proposal popup windows should overlay each other\n   </li>\n   <li>PROPOSAL_REMOVE<p>\n     any currently shown proposal popup should be closed\n   </li>\n   <li>PROPOSAL_STACKED<p>\n     proposal popup windows should be vertical stacked, with no overlap,\n     beneath the line containing the current cursor location\n   </li>\n </ul>\n\n @param orientation the popup's orientation\n"
5045,method,org/eclipse/jface/text/contentassist/ContentAssistant/setContextInformationPopupOrientation/int," Sets the context information popup's orientation.\n The following values may be used:\n <ul>\n   <li>CONTEXT_ABOVE<p>\n     context information popup should always appear above the line containing\n     the current cursor location\n   </li>\n   <li>CONTEXT_BELOW<p>\n     context information popup should always appear below the line containing\n     the current cursor location\n   </li>\n </ul>\n\n @param orientation the popup's orientation\n"
5052,method,org/eclipse/jface/text/contentassist/ContentAssistant/setInformationControlCreator/IInformationControlCreator," Sets the information control creator for the additional information control.\n\n @param creator the information control creator for the additional information control\n @since 2.0\n"
5059,method,org/eclipse/jface/text/contentassist/ContentAssistant/possibleCompletionsClosed/," Callback to signal this content assistant that the presentation of the possible completions\n has been stopped.\n\n @since 2.1\n"
5061,method,org/eclipse/jface/text/contentassist/ContentAssistant/contextInformationClosed/," Callback to signal this content assistant that the presentation of the context information\n has been stopped.\n\n @since 2.1\n"
5081,method,org/eclipse/jface/text/contentassist/ContentAssistant/getHandler/String," {@inheritDoc}\n\n @since 3.4\n"
5084,method,org/eclipse/jface/text/contentassist/ContentAssistant/ContentAssistant/," Creates a new content assistant. The content assistant is not automatically activated,\n overlays the completion proposals with context information list if necessary, and shows the\n context information above the location at which it was activated. If auto activation will be\n enabled, without further configuration steps, this content assistant is activated after a 500\n milliseconds delay. It uses the default partitioning.\n"
5090,class,org/eclipse/jface/text/contentassist/ContentAssistant/AutoAssistListener," An implementation of <code>IContentAssistListener</code>, this class is used to monitor\n key events in support of automatic activation of the content assistant. If enabled, the\n implementation utilizes a thread to watch for input characters matching the activation\n characters specified by the content assist processor, and if detected, will wait the\n indicated delay interval before activating the content assistant.\n\n @since 3.4 protected, was added in 2.1 as private class\n"
5099,interface,org/eclipse/jface/text/contentassist/IContentAssistantExtension2," Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} with the following\n functions:\n <ul>\n <li>completion listeners</li>\n <li>repeated invocation mode</li>\n <li>a local status line for the completion popup</li>\n <li>control over the behavior when no proposals are available</li>\n </ul>\n\n @since 3.2\n"
5100,method,org/eclipse/jface/text/contentassist/IContentAssistantExtension2/addCompletionListener/ICompletionListener," Adds a completion listener that will be informed before proposals are computed.\n\n @param listener the listener\n"
5102,method,org/eclipse/jface/text/contentassist/IContentAssistantExtension2/setRepeatedInvocationMode/boolean," Enables repeated invocation mode, which will trigger re-computation of the proposals when\n code assist is executed repeatedly. The default is no <code>false</code>.\n\n @param cycling <code>true</code> to enable repetition mode, <code>false</code> to disable\n"
5104,method,org/eclipse/jface/text/contentassist/IContentAssistantExtension2/setStatusLineVisible/boolean," Enables displaying a status line below the proposal popup. The default is not to show the\n status line. The contents of the status line may be set via {@link #setStatusMessage(String)}.\n\n @param show <code>true</code> to show a message line, <code>false</code> to not show one.\n"
5107,interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2," Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal}\n with the following functions:\n <ul>\n	<li>handling of trigger characters with modifiers</li>\n	<li>visual indication for selection of a proposal</li>\n </ul>\n\n @since 2.1\n"
5108,method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2/apply/ITextViewer;char;int;int," Applies the proposed completion to the given document. The insertion\n has been triggered by entering the given character with a modifier at the given offset.\n This method assumes that {@link #validate(IDocument, int, DocumentEvent)}\n returns <code>true</code> if called for <code>offset</code>.\n\n @param viewer the text viewer into which to insert the proposed completion\n @param trigger the trigger to apply the completion\n @param stateMask the state mask of the modifiers\n @param offset the offset at which the trigger has been activated\n"
5109,method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2/selected/ITextViewer;boolean," Called when the proposal is selected.\n\n @param viewer the text viewer.\n @param smartToggle the smart toggle key was pressed\n"
5110,method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2/unselected/ITextViewer," Called when the proposal is unselected.\n\n @param viewer the text viewer.\n"
5111,method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension2/validate/IDocument;int;DocumentEvent," Requests the proposal to be validated with respect to the document event.\n If the proposal cannot be validated, the methods returns <code>false</code>.\n If the document event was <code>null</code>, only the caret offset was changed, but not the document.\n\n This method replaces {@link ICompletionProposalExtension#isValidFor(IDocument, int)}\n\n @param document the document\n @param offset the caret offset\n @param event the document event, may be <code>null</code>\n @return boolean\n"
5112,interface,org/eclipse/jface/text/contentassist/IContentAssistantExtension3," Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} with the following\n function:\n <ul>\n <li>a key-sequence to listen for in repeated invocation mode</li>\n </ul>\n\n @since 3.2\n"
5113,method,org/eclipse/jface/text/contentassist/IContentAssistantExtension3/setRepeatedInvocationTrigger/KeySequence," Sets the key sequence to listen for in repeated invocation mode. If the key sequence is\n encountered, a step in the repetition iteration is triggered.\n\n @param sequence the key sequence used for the repeated invocation mode or <code>null</code> if none\n"
5114,interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension6," Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with the following\n function:\n <ul>\n 	<li>Allow styled ranges in the display string.</li>\n </ul>\n\n @since 3.4\n"
5118,method,org/eclipse/jface/text/contentassist/ICompletionProposal/getSelection/IDocument," Returns the new selection after the proposal has been applied to\n the given document in absolute document coordinates. If it returns\n <code>null</code>, no new selection is set.\n\n A document change can trigger other document changes, which have\n to be taken into account when calculating the new selection. Typically,\n this would be done by installing a document listener or by using a\n document position during {@link #apply(IDocument)}.\n\n @param document the document into which the proposed completion has been inserted\n @return the new selection in absolute document coordinates\n"
5125,method,org/eclipse/jface/text/contentassist/IContextInformation/getImage/," Returns the image for this context information.\n The image will be shown to the left of the display string.\n\n @return the image to be shown or <code>null</code> if no image is desired\n"
5129,method,org/eclipse/jface/text/contentassist/ICompletionListener/assistSessionStarted/ContentAssistEvent," Called when code assist is invoked when there is no current code assist session.\n\n @param event the content assist event\n"
5130,method,org/eclipse/jface/text/contentassist/ICompletionListener/assistSessionEnded/ContentAssistEvent," Called when a code assist session ends (for example, the proposal popup is closed).\n\n @param event the content assist event\n"
5131,method,org/eclipse/jface/text/contentassist/ICompletionListener/selectionChanged/ICompletionProposal;boolean," Called when the selection in the proposal popup is changed or if the insert-mode changed.\n\n @param proposal the newly selected proposal, possibly <code>null</code>\n @param smartToggle <code>true</code> if the insert-mode toggle is being pressed,\n        <code>false</code> otherwise\n"
5133,method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/computeCompletionProposals/ITextViewer;int," Returns a list of completion proposals based on the\n specified location within the document that corresponds\n to the current cursor position within the text viewer.\n\n @param viewer the viewer whose document is used to compute the proposals\n @param offset an offset within the document for which completions should be computed\n @return an array of completion proposals or <code>null</code> if no proposals are possible\n"
5134,method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/computeContextInformation/ITextViewer;int," Returns information about possible contexts based on the\n specified location within the document that corresponds\n to the current cursor position within the text viewer.\n\n @param viewer the viewer whose document is used to compute the possible contexts\n @param offset an offset within the document for which context information should be computed\n @return an array of context information objects or <code>null</code> if no context could be found\n"
5135,method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/getCompletionProposalAutoActivationCharacters/," Returns the characters which when entered by the user should\n automatically trigger the presentation of possible completions.\n\n @return the auto activation characters for completion proposal or <code>null</code>\n		if no auto activation is desired\n"
5136,method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/getContextInformationAutoActivationCharacters/," Returns the characters which when entered by the user should\n automatically trigger the presentation of context information.\n\n @return the auto activation characters for presenting context information\n		or <code>null</code> if no auto activation is desired\n"
5137,method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/getErrorMessage/," Returns the reason why this content assist processor\n was unable to produce any completion proposals or context information.\n\n @return an error message or <code>null</code> if no error occurred\n"
5138,method,org/eclipse/jface/text/contentassist/IContentAssistProcessor/getContextInformationValidator/," Returns a validator used to determine when displayed context information\n should be dismissed. May only return <code>null</code> if the processor is\n incapable of computing context information. <p>\n\n @return a context information validator, or <code>null</code> if the processor\n 			is incapable of computing context information\n"
5139,interface,org/eclipse/jface/text/contentassist/IContentAssistantExtension4," Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant} with\n the following function:\n <ul>\n <li>allows to get a handler for the given command identifier</li>\n </ul>\n\n @since 3.4\n"
5140,method,org/eclipse/jface/text/contentassist/IContentAssistantExtension4/getHandler/String," Returns the handler for the given command identifier.\n <p>\n The same handler instance will be returned when called a more than once\n with the same command identifier.\n </p>\n\n @param commandId the command identifier\n @return the handler for the given command identifier\n @throws IllegalArgumentException if the command is not supported by this\n             content assistant\n @throws IllegalStateException if called when this content assistant is\n             uninstalled\n"
5142,method,org/eclipse/jface/text/contentassist/IContextInformationValidator/install/IContextInformation;ITextViewer;int," Installs this validator for the given context information.\n\n @param info the context information which this validator should check\n @param viewer the text viewer on which the information is presented\n @param offset the document offset for which the information has been computed\n"
5144,interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension4," Extends\n {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with\n the following functions:\n <ul>\n   <li>specify whether a proposal is automatically insertable</li>\n </ul>\n\n @since 3.1\n"
5145,method,org/eclipse/jface/text/contentassist/ICompletionProposalExtension4/isAutoInsertable/," Returns <code>true</code> if the proposal may be automatically\n inserted, <code>false</code> otherwise. Automatic insertion can\n happen if the proposal is the only one being proposed, in which\n case the content assistant may decide to not prompt the user with\n a list of proposals, but simply insert the single proposal. A\n proposal may veto this behavior by returning <code>false</code>\n to a call to this method.\n\n @return <code>true</code> if the proposal may be inserted\n         automatically, <code>false</code> if not\n"
5151,method,org/eclipse/jface/text/contentassist/IContextInformationPresenter/install/IContextInformation;ITextViewer;int," Installs this presenter for the given context information.\n\n @param info the context information which this presenter should style\n @param viewer the text viewer on which the information is presented\n @param offset the document offset for which the information has been computed\n"
5160,method,org/eclipse/jface/text/contentassist/ContextInformation/ContextInformation/Image;String;String," Creates a new context information with an image.\n\n @param image the image to display when presenting the context information\n @param contextDisplayString the string to be used when presenting the context\n @param informationDisplayString the string to be displayed when presenting the context information,\n		may not be <code>null</code>\n"
5164,method,org/eclipse/jface/text/contentassist/IContentAssistant/showPossibleCompletions/," Shows all possible completions of the content at the viewer's cursor position.\n\n @return an optional error message if no proposals can be computed\n"
5165,method,org/eclipse/jface/text/contentassist/IContentAssistant/showContextInformation/," Shows context information for the content at the viewer's cursor position.\n\n @return an optional error message if no context information can be computed\n"
5168,field,org/eclipse/jface/text/contentassist/IContentAssistant/PROPOSAL_REMOVE,"The completion proposal list will be removed before the context info list will be shown. "
5172,interface,org/eclipse/jface/text/contentassist/IContentAssistantExtension," Extends {@link org.eclipse.jface.text.contentassist.IContentAssistant}\n with the following functions:\n <ul>\n 	<li>handle documents with multiple partitions</li>\n 	<li>insertion of common completion prefixes</li>\n </ul>\n\n @since 3.0\n"
5174,method,org/eclipse/jface/text/contentassist/IContentAssistantExtension/completePrefix/," Inserts the common prefix of the available completions. If no common\n prefix can be computed it is identical to\n {@link IContentAssistant#showPossibleCompletions()}.\n\n @return an optional error message if no proposals can be computed\n"
5175,interface,org/eclipse/jface/text/contentassist/ICompletionProposalExtension5," Extends {@link org.eclipse.jface.text.contentassist.ICompletionProposal} with the following\n function:\n <ul>\n <li>Allow background computation of the additional info.</li>\n </ul>\n\n @since 3.2\n"
5185,method,org/eclipse/jface/text/contentassist/CompletionProposal/CompletionProposal/String;int;int;int;Image;String;IContextInformation;String," Creates a new completion proposal. All fields are initialized based on the provided information.\n\n @param replacementString the actual string to be inserted into the document\n @param replacementOffset the offset of the text to be replaced\n @param replacementLength the length of the text to be replaced\n @param cursorPosition the position of the cursor following the insert relative to replacementOffset\n @param image the image to display for this proposal\n @param displayString the string to be displayed for the proposal\n @param contextInformation the context information associated with this proposal\n @param additionalProposalInfo the additional information associated with this proposal\n"
5191,method,org/eclipse/jface/text/templates/TemplateProposal/apply/ITextViewer;char;int;int," Inserts the template offered by this proposal into the viewer's document\n and sets up a <code>LinkedModeUI</code> on the viewer to edit any of\n the template's unresolved variables.\n\n @param viewer {@inheritDoc}\n @param trigger {@inheritDoc}\n @param stateMask {@inheritDoc}\n @param offset {@inheritDoc}\n"
5222,method,org/eclipse/jface/text/templates/TemplateCompletionProcessor/createContext/ITextViewer;IRegion," Creates a concrete template context for the given region in the document. This involves finding out which\n context type is valid at the given location, and then creating a context of this type. The default implementation\n returns a <code>DocumentTemplateContext</code> for the context type at the given location.\n\n @param viewer the viewer for which the context is created\n @param region the region into <code>document</code> for which the context is created\n @return a template context that can handle template insertion at the given location, or <code>null</code>\n"
5224,method,org/eclipse/jface/text/templates/TemplateCompletionProcessor/getRelevance/Template;String," Returns the relevance of a template given a prefix. The default\n implementation returns a number greater than zero if the template name\n starts with the prefix, and zero otherwise.\n\n @param template the template to compute the relevance for\n @param prefix the prefix after which content assist was requested\n @return the relevance of <code>template</code>\n @see #extractPrefix(ITextViewer, int)\n"
5226,method,org/eclipse/jface/text/templates/TemplateCompletionProcessor/getImage/Template," Returns the image to be used for the proposal for <code>template</code>.\n\n @param template the template for which an image should be returned\n @return the image for <code>template</code>\n"
5234,method,org/eclipse/jface/text/templates/persistence/TemplateReaderWriter/read/Reader," Reads templates from a reader and returns them. The reader must present\n a serialized form as produced by the <code>save</code> method.\n\n @param reader the reader to read templates from\n @return the read templates, encapsulated in instances of <code>TemplatePersistenceData</code>\n @throws IOException if reading from the stream fails\n"
5236,method,org/eclipse/jface/text/templates/persistence/TemplateReaderWriter/read/Reader;ResourceBundle," Reads templates from a stream and adds them to the templates.\n\n @param reader the reader to read templates from\n @param bundle a resource bundle to use for translating the read templates, or <code>null</code> if no translation should occur\n @return the read templates, encapsulated in instances of <code>TemplatePersistenceData</code>\n @throws IOException if reading from the stream fails\n"
5237,method,org/eclipse/jface/text/templates/persistence/TemplateReaderWriter/read/InputStream;ResourceBundle," Reads templates from a stream and adds them to the templates.\n\n @param stream the byte stream to read templates from\n @param bundle a resource bundle to use for translating the read templates, or <code>null</code> if no translation should occur\n @return the read templates, encapsulated in instances of <code>TemplatePersistenceData</code>\n @throws IOException if reading from the stream fails\n"
5243,method,org/eclipse/jface/text/templates/persistence/TemplatePersistenceData/isDeleted/," Returns the deletion state of the stored template. This is only relevant\n of contributed templates.\n\n @return the deletion state of the stored template\n"
5254,method,org/eclipse/jface/text/templates/persistence/TemplatePersistenceData/TemplatePersistenceData/Template;boolean;String," Creates a new instance. If <code>id</code> is not <code>null</code>,\n the instance is represents a template that is contributed and can be\n identified via its id.\n\n @param template the template which is stored by the new instance\n @param enabled whether the template is enabled\n @param id the id of the template, or <code>null</code> if a user-added\n        instance should be created\n"
5257,method,org/eclipse/jface/text/templates/persistence/TemplateStore/startListeningForPreferenceChanges/," Starts listening for property changes on the preference store. If the configured preference\n key changes, the template store is {@link #load() reloaded}. Call\n {@link #stopListeningForPreferenceChanges()} to remove any listener and stop the\n auto-updating behavior.\n\n @since 3.2\n"
5258,method,org/eclipse/jface/text/templates/persistence/TemplateStore/stopListeningForPreferenceChanges/," Stops the auto-updating behavior started by calling\n {@link #startListeningForPreferenceChanges()}.\n\n @since 3.2\n"
5260,method,org/eclipse/jface/text/templates/persistence/TemplateStore/loadContributedTemplates/," Hook method to load contributed templates. Contributed templates are superseded\n by customized versions of user added templates stored in the preferences.\n <p>\n The default implementation does nothing.</p>\n\n @throws IOException if loading fails\n"
5261,method,org/eclipse/jface/text/templates/persistence/TemplateStore/internalAdd/TemplatePersistenceData," Adds a template to the internal store. The added templates must have\n a unique id.\n\n @param data the template data to add\n"
5266,method,org/eclipse/jface/text/templates/persistence/TemplateStore/restoreDefaults/boolean," Deletes all user-added templates and reverts all contributed templates.\n\n @param doSave <code>true</code> if the store should be saved after restoring\n @since 3.5\n"
5267,method,org/eclipse/jface/text/templates/persistence/TemplateStore/restoreDefaults/," Deletes all user-added templates and reverts all contributed templates.\n <p>\n <strong>Note:</strong> the store will be saved after restoring.\n </p>\n"
5269,method,org/eclipse/jface/text/templates/persistence/TemplateStore/getTemplates/String," Returns all enabled templates for the given context type.\n\n @param contextTypeId the id of the context type of the requested templates, or <code>null</code> if all templates should be returned\n @return all enabled templates for the given context type\n"
5277,method,org/eclipse/jface/text/templates/persistence/TemplateStore/TemplateStore/ContextTypeRegistry;IPreferenceStore;String," Creates a new template store with a context type registry. Only templates\n that specify a context type contained in the registry will be loaded by\n this store if the registry is not <code>null</code>.\n\n @param registry a context type registry, or <code>null</code> if all\n        templates should be loaded\n @param store the preference store in which to store custom templates\n        under <code>key</code>\n @param key the key into <code>store</code> where to store custom\n        templates\n"
5278,interface,org/eclipse/jface/text/information/IInformationPresenterExtension," Extends {@link org.eclipse.jface.text.information.IInformationPresenter} with\n the ability to handle documents with multiple partitions.\n\n @see org.eclipse.jface.text.information.IInformationPresenter\n\n @since 3.0\n"
5281,method,org/eclipse/jface/text/information/IInformationProvider/getSubject/ITextViewer;int," Returns the region of the text viewer's document close to the given\n offset that contains a subject about which information can be provided.<p>\n For example, if information can be provided on a per code block basis,\n the offset should be used to find the enclosing code block and the source\n range of the block should be returned.\n\n @param textViewer the text viewer in which information has been requested\n @param offset the offset at which information has been requested\n @return the region of the text viewer's document containing the information subject\n"
5282,method,org/eclipse/jface/text/information/IInformationProvider/getInformation/ITextViewer;IRegion," Returns the information about the given subject or <code>null</code> if\n no information is available. It depends on the concrete configuration in which\n format the information is to be provided. For example, information presented\n in an information control displaying HTML, should be provided in HTML.\n\n @param textViewer the viewer in whose document the subject is contained\n @param subject the text region constituting the information subject\n @return the information about the subject\n @see IInformationPresenter\n @deprecated As of 2.1, replaced by {@link IInformationProviderExtension#getInformation2(ITextViewer, IRegion)}\n"
5288,method,org/eclipse/jface/text/information/InformationPresenter/setOffset/int," Sets a offset to override the selection. Setting the value to <code>-1</code> will disable\n overriding.\n\n @param offset the offset to override selection or <code>-1</code>\n"
5300,interface,org/eclipse/jface/text/information/IInformationProviderExtension2," Extends {@link org.eclipse.jface.text.information.IInformationProvider} with\n the ability to provide its own information presenter control creator.\n\n @see org.eclipse.jface.text.IInformationControlCreator\n @see org.eclipse.jface.text.information.IInformationProvider\n @since 3.0\n"
5302,interface,org/eclipse/jface/text/information/IInformationProviderExtension," Extends {@link org.eclipse.jface.text.information.IInformationProvider} with\n the ability to provide the element for a given subject.\n\n @see org.eclipse.jface.text.information.IInformationProvider\n @since 2.1\n"
5305,method,org/eclipse/jface/text/information/IInformationPresenter/install/ITextViewer," Installs the information presenter on the given text viewer. After this method has been\n finished, the presenter is operational, i.e. the method {@link #showInformation()}\n can be called until {@link #uninstall()} is called.\n\n @param textViewer the viewer on which the presenter is installed\n"
5309,class,org/eclipse/jface/text/rules/EndOfLineRule," A specific configuration of a single line rule\n whereby the pattern begins with a specific sequence but\n is only ended by a line delimiter.\n"
5312,method,org/eclipse/jface/text/rules/EndOfLineRule/EndOfLineRule/String;IToken;char;boolean," Creates a rule for the given starting sequence\n which, if detected, will return the specified token.\n Any character which follows the given escape character\n will be ignored. In addition, an escape character\n immediately before an end of line can be set to continue\n the line.\n\n @param startSequence the pattern's start sequence\n @param token the token to be returned on success\n @param escapeCharacter the escape character\n @param escapeContinuesLine indicates whether the specified escape\n        character is used for line continuation, so that an end of\n        line immediately after the escape character does not\n        terminate the line, even if <code>breakOnEOL</code> is true\n @since 3.0\n"
5313,class,org/eclipse/jface/text/rules/RuleBasedScanner," A generic scanner which can be "programmed" with a sequence of rules.\n The scanner is used to get the next token by evaluating its rule in sequence until\n one is successful. If a rule returns a token which is undefined, the scanner will proceed to\n the next rule. Otherwise the token provided by the rule will be returned by\n the scanner. If no rule returned a defined token, this scanner returns a token\n which returns <code>true</code> when calling <code>isOther</code>, unless the end\n of the file is reached. In this case the token returns <code>true</code> when calling\n <code>isEOF</code>.\n\n @see IRule\n"
5342,method,org/eclipse/jface/text/rules/NumberRule/setColumnConstraint/int," Sets a column constraint for this rule. If set, the rule's token\n will only be returned if the pattern is detected starting at the\n specified column. If the column is smaller then 0, the column\n constraint is considered removed.\n\n @param column the column in which the pattern starts\n"
5355,method,org/eclipse/jface/text/rules/RuleBasedDamagerRepairer/RuleBasedDamagerRepairer/RuleBasedScanner;TextAttribute," Creates a damager/repairer that uses the given scanner and returns the given default\n text attribute if the current token does not carry a text attribute.\n\n @param scanner the rule based scanner to be used\n @param defaultTextAttribute the text attribute to be returned if none is specified by the current token,\n 			may not be <code>null</code>\n\n @deprecated use RuleBasedDamagerRepairer(RuleBasedScanner) instead\n"
5356,method,org/eclipse/jface/text/rules/RuleBasedDamagerRepairer/RuleBasedDamagerRepairer/RuleBasedScanner," Creates a damager/repairer that uses the given scanner. The scanner may not be <code>null</code>\n and is assumed to return only token that carry text attributes.\n\n @param scanner the rule based scanner to be used, may not be <code>null</code>\n @since 2.0\n"
5358,method,org/eclipse/jface/text/rules/ITokenScanner/setRange/IDocument;int;int," Configures the scanner by providing access to the document range that should\n be scanned.\n\n @param document the document to scan\n @param offset the offset of the document range to scan\n @param length the length of the document range to scan\n"
5363,method,org/eclipse/jface/text/rules/WhitespaceRule/evaluate/ICharacterScanner," {@inheritDoc}\n \n @return {@link #fWhitespaceToken} if whitespace got detected, {@link Token#UNDEFINED}\n         otherwise\n"
5368,class,org/eclipse/jface/text/rules/PatternRule," Standard implementation of <code>IPredicateRule</code>.\n Is is capable of detecting a pattern which begins with a given start\n sequence and ends with a given end sequence. If the end sequence is\n not specified, it can be either end of line, end or file, or both. Additionally,\n the pattern can be constrained to begin in a certain column. The rule can also\n be used to check whether the text to scan covers half of the pattern, i.e. contains\n the end sequence required by the rule.\n"
5369,method,org/eclipse/jface/text/rules/PatternRule/setColumnConstraint/int," Sets a column constraint for this rule. If set, the rule's token\n will only be returned if the pattern is detected starting at the\n specified column. If the column is smaller then 0, the column\n constraint is considered removed.\n\n @param column the column in which the pattern starts\n"
5371,method,org/eclipse/jface/text/rules/PatternRule/doEvaluate/ICharacterScanner;boolean," Evaluates this rules without considering any column constraints. Resumes\n detection, i.e. look sonly for the end sequence required by this rule if the\n <code>resume</code> flag is set.\n\n @param scanner the character scanner to be used\n @param resume <code>true</code> if detection should be resumed, <code>false</code> otherwise\n @return the token resulting from this evaluation\n @since 2.0\n"
5377,method,org/eclipse/jface/text/rules/PatternRule/PatternRule/String;String;IToken;char;boolean," Creates a rule for the given starting and ending sequence.\n When these sequences are detected the rule will return the specified token.\n Alternatively, the sequence can also be ended by the end of the line.\n Any character which follows the given escapeCharacter will be ignored.\n\n @param startSequence the pattern's start sequence\n @param endSequence the pattern's end sequence, <code>null</code> is a legal value\n @param token the token which will be returned on success\n @param escapeCharacter any character following this one will be ignored\n @param breaksOnEOL indicates whether the end of the line also terminates the pattern\n"
5378,method,org/eclipse/jface/text/rules/PatternRule/PatternRule/String;String;IToken;char;boolean;boolean," Creates a rule for the given starting and ending sequence.\n When these sequences are detected the rule will return the specified token.\n Alternatively, the sequence can also be ended by the end of the line or the end of the file.\n Any character which follows the given escapeCharacter will be ignored.\n\n @param startSequence the pattern's start sequence\n @param endSequence the pattern's end sequence, <code>null</code> is a legal value\n @param token the token which will be returned on success\n @param escapeCharacter any character following this one will be ignored\n @param breaksOnEOL indicates whether the end of the line also terminates the pattern\n @param breaksOnEOF indicates whether the end of the file also terminates the pattern\n @since 2.1\n"
5379,method,org/eclipse/jface/text/rules/PatternRule/PatternRule/String;String;IToken;char;boolean;boolean;boolean," Creates a rule for the given starting and ending sequence.\n When these sequences are detected the rule will return the specified token.\n Alternatively, the sequence can also be ended by the end of the line or the end of the file.\n Any character which follows the given escapeCharacter will be ignored. An end of line\n immediately after the given <code>lineContinuationCharacter</code> will not cause the\n pattern to terminate even if <code>breakOnEOL</code> is set to true.\n\n @param startSequence the pattern's start sequence\n @param endSequence the pattern's end sequence, <code>null</code> is a legal value\n @param token the token which will be returned on success\n @param escapeCharacter any character following this one will be ignored\n @param breaksOnEOL indicates whether the end of the line also terminates the pattern\n @param breaksOnEOF indicates whether the end of the file also terminates the pattern\n @param escapeContinuesLine indicates whether the specified escape character is used for line\n        continuation, so that an end of line immediately after the escape character does not\n        terminate the pattern, even if <code>breakOnEOL</code> is set\n @since 3.0\n"
5389,interface,org/eclipse/jface/text/rules/IPredicateRule," Defines the interface for a rule used in the scanning of text for the purpose of\n document partitioning or text styling. A predicate rule can only return one single\n token after having successfully detected content. This token is called success token.\n Also, it also returns a token indicating that this rule has not been successful.\n\n @see ICharacterScanner\n @since 2.0\n"
5410,method,org/eclipse/jface/text/rules/FastPartitioner/checkInitialization/," Calls {@link #initialize()} if the receiver is not yet initialized.\n"
5430,method,org/eclipse/jface/text/rules/FastPartitioner/clearPositionCache/," Clears the position cache. Needs to be called whenever the positions have\n been updated.\n"
5432,method,org/eclipse/jface/text/rules/FastPartitioner/FastPartitioner/IPartitionTokenScanner;String[]," Creates a new partitioner that uses the given scanner and may return\n partitions of the given legal content types.\n\n @param scanner the scanner this partitioner is supposed to use\n @param legalContentTypes the legal content types of this partitioner\n"
5436,field,org/eclipse/jface/text/rules/FastPartitioner/fPreviousDocumentLength,"The document length before a document change occurred "
5441,class,org/eclipse/jface/text/rules/WordRule," An implementation of {@link IRule} capable of detecting words. A word rule also allows to\n associate a token to a word. That is, not only can the rule be used to provide tokens for exact\n matches, but also for the generalized notion of a word in the context in which it is used. A word\n rule uses a word detector to determine what a word is.\n\n @see IWordDetector\n"
5442,method,org/eclipse/jface/text/rules/WordRule/addWord/String;IToken," Adds a word and the token to be returned if it is detected.\n\n @param word the word this rule will search for, may not be <code>null</code>\n @param token the token to be returned if the word has been found, may not be <code>null</code>\n"
5443,method,org/eclipse/jface/text/rules/WordRule/setColumnConstraint/int," Sets a column constraint for this rule. If set, the rule's token\n will only be returned if the pattern is detected starting at the\n specified column. If the column is smaller then 0, the column\n constraint is considered removed.\n\n @param column the column in which the pattern starts\n"
5446,method,org/eclipse/jface/text/rules/WordRule/WordRule/IWordDetector," Creates a rule which, with the help of an word detector, will return the token\n associated with the detected word. If no token has been associated, the scanner\n will be rolled back and an undefined token will be returned in order to allow\n any subsequent rules to analyze the characters.\n\n @param detector the word detector to be used by this rule, may not be <code>null</code>\n @see #addWord(String, IToken)\n"
5447,method,org/eclipse/jface/text/rules/WordRule/WordRule/IWordDetector;IToken," Creates a rule which, with the help of a word detector, will return the token\n associated with the detected word. If no token has been associated, the\n specified default token will be returned.\n\n @param detector the word detector to be used by this rule, may not be <code>null</code>\n @param defaultToken the default token to be returned on success\n			if nothing else is specified, may not be <code>null</code>\n @see #addWord(String, IToken)\n"
5448,method,org/eclipse/jface/text/rules/WordRule/WordRule/IWordDetector;IToken;boolean," Creates a rule which, with the help of a word detector, will return the token\n associated with the detected word. If no token has been associated, the\n specified default token will be returned.\n\n @param detector the word detector to be used by this rule, may not be <code>null</code>\n @param defaultToken the default token to be returned on success\n			if nothing else is specified, may not be <code>null</code>\n @param ignoreCase the case sensitivity associated with this rule\n @see #addWord(String, IToken)\n @since 3.3\n"
5474,method,org/eclipse/jface/text/rules/RuleBasedPartitioner/RuleBasedPartitioner/RuleBasedScanner;String[]," Creates a new partitioner that uses the given scanner and may return\n partitions of the given legal content types.\n\n @param scanner the scanner this partitioner is supposed to use\n @param legalContentTypes the legal content types of this partitioner\n"
5479,field,org/eclipse/jface/text/rules/RuleBasedPartitioner/fPreviousDocumentLength,"The document length before a document change occurred "
5486,method,org/eclipse/jface/text/rules/WordPatternRule/unreadBuffer/ICharacterScanner," Returns the characters in the buffer to the scanner.\n Note that the rule must also return the characters\n read in as part of the start sequence expect the first one.\n\n @param scanner the scanner to be used\n"
5490,class,org/eclipse/jface/text/rules/MultiLineRule," A rule for detecting patterns which begin with a given\n sequence and may end with a given sequence thereby spanning\n multiple lines.\n"
5510,method,org/eclipse/jface/text/rules/DefaultPartitioner/getTokenContentType/IToken," Returns a content type encoded in the given token. If the token's\n data is not <code>null</code> and a string it is assumed that\n it is the encoded content type.\n\n @param token the token whose content type is to be determined\n @return the token's content type\n"
5518,method,org/eclipse/jface/text/rules/DefaultPartitioner/DefaultPartitioner/IPartitionTokenScanner;String[]," Creates a new partitioner that uses the given scanner and may return\n partitions of the given legal content types.\n\n @param scanner the scanner this partitioner is supposed to use\n @param legalContentTypes the legal content types of this partitioner\n"
5523,field,org/eclipse/jface/text/rules/DefaultPartitioner/fPreviousDocumentLength,"The document length before a document change occurred "
5528,interface,org/eclipse/jface/text/rules/ICharacterScanner," Defines the interface of a character scanner used by rules.\n Rules may request the next character or ask the character\n scanner to unread the last read character.\n"
5529,method,org/eclipse/jface/text/rules/ICharacterScanner/getLegalLineDelimiters/," Provides rules access to the legal line delimiters. The returned\n object may not be modified by clients.\n\n @return the legal line delimiters\n"
5532,method,org/eclipse/jface/text/rules/ICharacterScanner/unread/," Rewinds the scanner before the last read character.\n"
5534,class,org/eclipse/jface/text/rules/SingleLineRule," A specific configuration of pattern rule whereby\n the pattern begins with a specific sequence and may\n end with a specific sequence, but will not span more\n than a single line.\n"
5537,method,org/eclipse/jface/text/rules/SingleLineRule/SingleLineRule/String;String;IToken;char;boolean," Creates a rule for the given starting and ending sequence\n which, if detected, will return the specified token. Alternatively, the\n line can also be ended with the end of the file.\n Any character which follows the given escape character\n will be ignored.\n\n @param startSequence the pattern's start sequence\n @param endSequence the pattern's end sequence\n @param token the token to be returned on success\n @param escapeCharacter the escape character\n @param breaksOnEOF indicates whether the end of the file successfully terminates this rule\n @since 2.1\n"
5538,method,org/eclipse/jface/text/rules/SingleLineRule/SingleLineRule/String;String;IToken;char;boolean;boolean," Creates a rule for the given starting and ending sequence\n which, if detected, will return the specified token. Alternatively, the\n line can also be ended with the end of the file.\n Any character which follows the given escape character\n will be ignored. In addition, an escape character immediately before an\n end of line can be set to continue the line.\n\n @param startSequence the pattern's start sequence\n @param endSequence the pattern's end sequence\n @param token the token to be returned on success\n @param escapeCharacter the escape character\n @param breaksOnEOF indicates whether the end of the file successfully terminates this rule\n @param escapeContinuesLine indicates whether the specified escape character is used for line\n        continuation, so that an end of line immediately after the escape character does not\n        terminate the line, even if <code>breakOnEOL</code> is true\n @since 3.0\n"
5542,method,org/eclipse/jface/text/rules/Token/setData/Object," Re-initializes the data of this token. The token may not represent\n undefined, whitespace, or EOF.\n\n @param data to be attached to the token\n @since 2.0\n"
5555,method,org/eclipse/jface/text/rules/DefaultDamagerRepairer/endOfLineOf/int," Returns the end offset of the line that contains the specified offset or\n if the offset is inside a line delimiter, the end offset of the next line.\n\n @param offset the offset whose line end offset must be computed\n @return the line end offset for the given offset\n @exception BadLocationException if offset is invalid in the current document\n"
5559,method,org/eclipse/jface/text/rules/DefaultDamagerRepairer/addRange/TextPresentation;int;int;TextAttribute," Adds style information to the given text presentation.\n\n @param presentation the text presentation to be extended\n @param offset the offset of the range to be styled\n @param length the length of the range to be styled\n @param attr the attribute describing the style of the range to be styled\n"
5560,method,org/eclipse/jface/text/rules/DefaultDamagerRepairer/DefaultDamagerRepairer/ITokenScanner;TextAttribute," Creates a damager/repairer that uses the given scanner and returns the given default\n text attribute if the current token does not carry a text attribute.\n\n @param scanner the token scanner to be used\n @param defaultTextAttribute the text attribute to be returned if non is specified by the current token,\n 			may not be <code>null</code>\n\n @deprecated use DefaultDamagerRepairer(ITokenScanner) instead\n"
5566,method,org/eclipse/jface/text/formatter/IContentFormatter/format/IDocument;IRegion," Formats the given region of the specified document.The formatter may safely\n assume that it is the only subject that modifies the document at this point in time.\n\n @param document the document to be formatted\n @param region the region within the document to be formatted\n"
5570,method,org/eclipse/jface/text/formatter/IFormattingStrategy/format/String;boolean;String;int[]," Formats the given string. During the formatting process this strategy must update\n the given character positions according to the changes applied to the given string.\n\n @param content the initial string to be formatted\n @param isLineStart indicates whether the beginning of content is a line start in its document\n @param indentation the indentation string to be used\n @param positions the character positions to be updated\n @return the formatted string\n"
5575,method,org/eclipse/jface/text/formatter/IFormattingContext/dispose/," Dispose of the formatting context.\n <p>\n Must be called after the formatting context has been used in a formatting process.\n"
5584,method,org/eclipse/jface/text/formatter/IFormattingContext/mapToStore/Map;IPreferenceStore," Stores the preferences from a map to a preference store.\n <p>\n Note that the preference keys returned by {@link #getPreferenceKeys()} must not be used in\n the preference store. Otherwise the preferences are overwritten.\n </p>\n\n @param map Map to retrieve the preferences from\n @param store Preference store to store the preferences in\n"
5585,method,org/eclipse/jface/text/formatter/IFormattingContext/setProperty/Object;Object," Stores the property <code>key</code> in the formatting context.\n\n @param key Key of the property to store in the context\n @param property Property to store in the context. If already present, the new property\n            overwrites the present one.\n"
5586,method,org/eclipse/jface/text/formatter/IFormattingContext/storeToMap/IPreferenceStore;Map;boolean," Retrieves the preferences from a preference store in a map.\n <p>\n Note that the preference keys returned by {@link #getPreferenceKeys()} must not be used in\n the map. Otherwise the preferences are overwritten.\n </p>\n\n @param store Preference store to retrieve the preferences from\n @param map Map to store the preferences in\n @param useDefault <code>true</code> if the default preferences should be used,\n            <code>false</code> otherwise\n"
5593,class,org/eclipse/jface/text/formatter/MultiPassContentFormatter," Content formatter for edit-based formatting strategies.\n <p>\n Two kinds of formatting strategies can be registered with this formatter:\n <ul>\n <li>one master formatting strategy for the default content type</li>\n <li>one formatting strategy for each non-default content type</li>\n </ul>\n The master formatting strategy always formats the whole region to be\n formatted in the first pass. In a second pass, all partitions of the region\n to be formatted that are not of master content type are formatted using the\n slave formatting strategy registered for the underlying content type. All\n formatting strategies must implement {@link IFormattingStrategyExtension}.\n <p>\n Regions to be formatted with the master formatting strategy always have\n an offset aligned to the line start. Regions to be formatted with slave formatting\n strategies are aligned on partition boundaries.\n\n @see IFormattingStrategyExtension\n @since 3.0\n"
5597,method,org/eclipse/jface/text/formatter/MultiPassContentFormatter/formatSlave/IFormattingContext;IDocument;int;int;String," Formats the document specified in the formatting context with the\n formatting strategy registered for the content type.\n <p>\n For this formatting type only slave strategies are used. The region to be\n formatted is aligned on partition boundaries of the underlying content\n type. The exact formatting strategy is determined by the underlying\n content type of the document partitioning.\n\n @param context The formatting context to use\n @param document The document to operate on\n @param offset The offset of the region to format\n @param length The length of the region to format\n @param type The content type of the region to format\n"
5607,method,org/eclipse/jface/text/formatter/ContentFormatter/setFormattingStrategy/IFormattingStrategy;String," Registers a strategy for a particular content type. If there is already a strategy\n registered for this type, the new strategy is registered instead of the old one.\n If the given content type is <code>null</code> the given strategy is registered for\n all content types as is called only once per formatting session.\n\n @param strategy the formatting strategy to register, or <code>null</code> to remove an existing one\n @param contentType the content type under which to register\n"
5608,method,org/eclipse/jface/text/formatter/ContentFormatter/setPartitionManagingPositionCategories/String[]," Informs this content formatter about the names of those position categories\n which are used to manage the document's partitioning information and thus should\n be ignored when this formatter updates positions.\n\n @param categories the categories to be ignored\n @deprecated incompatible with an open set of document partitionings. The provided information is only used\n 		if this formatter can not compute the partition managing position categories.\n"
5610,method,org/eclipse/jface/text/formatter/ContentFormatter/enablePartitionAwareFormatting/boolean," Sets the formatter's operation mode.\n\n @param enable indicates whether the formatting process should be partition ware\n"
5613,method,org/eclipse/jface/text/formatter/ContentFormatter/updateAffectedPositions/IDocument;int[];int," Updates all the overlapping positions. Note, all other positions are\n automatically updated by their document position updaters.\n\n @param document the document to has been formatted\n @param positions the adapted character positions to be used to update the document positions\n @param offset the offset of the document region that has been formatted\n"
5614,method,org/eclipse/jface/text/formatter/ContentFormatter/positionAboutToBeAdded/IDocument;String;Position," The given position is about to be added to the given position category of the given document. <p>\n This default implementation return <code>true</code>.\n\n @param document the document\n @param category the position category\n @param position the position that will be added\n @return <code>true</code> if the position can be added, <code>false</code> if it should be ignored\n"
5615,method,org/eclipse/jface/text/formatter/ContentFormatter/ContentFormatter/," Creates a new content formatter. The content formatter operates by default\n in the partition-aware mode. There are no preconfigured formatting strategies.\n Will use the default document partitioning if not further configured.\n"
5634,class,org/eclipse/jface/text/formatter/ContextBasedFormattingStrategy," Formatting strategy for context based content formatting. Retrieves the preferences\n set on the formatting context's {@link FormattingContextProperties#CONTEXT_PREFERENCES}\n property and makes them available to subclasses.\n <p>\n\n @since 3.0\n"
5644,method,org/eclipse/jface/text/hyperlink/IHyperlink/getTypeLabel/," Optional label for this type of hyperlink.\n <p>\n This type label can be used by {@link IHyperlinkPresenter}s\n which show several hyperlinks at once.\n </p>\n\n @return the type label or <code>null</code> if none\n"
5648,method,org/eclipse/jface/text/hyperlink/IHyperlinkDetector/detectHyperlinks/ITextViewer;IRegion;boolean," Tries to detect hyperlinks for the given region in\n the given text viewer and returns them.\n <p>\n In most of the cases only one hyperlink should be returned.\n </p>\n @param textViewer the text viewer on which the hover popup should be shown\n @param region the text range in the text viewer which is used to detect the hyperlinks\n @param canShowMultipleHyperlinks tells whether the caller is able to show multiple links\n 						to the user.\n 						If <code>true</code> {@link IHyperlink#open()} should directly open\n 							the link and not show any additional UI to select from a list.\n 						If <code>false</code> this method should only return one hyperlink\n 							which upon {@link IHyperlink#open()} may allow to select from a list.\n @return the hyperlinks or <code>null</code> if no hyperlink was detected\n"
5657,method,org/eclipse/jface/text/hyperlink/MultipleHyperlinkPresenter/MultipleHyperlinkPresenter/RGB," Creates a new multiple hyperlink presenter.\n\n @param color the hyperlink color, to be disposed by the caller\n"
5670,method,org/eclipse/jface/text/hyperlink/HyperlinkManager/setHyperlinkStateMask/int," Sets the SWT event state mask which in combination\n with the left mouse button triggers the hyperlink mode.\n <p>\n It is allowed to call this method after this\n hyperlink manger has been installed.\n </p>\n\n @param eventStateMask the SWT event state mask to activate hyperlink mode\n"
5686,method,org/eclipse/jface/text/hyperlink/HyperlinkManager/mouseExit/MouseEvent," {@inheritDoc}\n\n @since 3.4\n"
5687,method,org/eclipse/jface/text/hyperlink/HyperlinkManager/mouseEnter/MouseEvent," {@inheritDoc}\n\n @since 3.4\n"
5688,method,org/eclipse/jface/text/hyperlink/HyperlinkManager/mouseHover/MouseEvent," {@inheritDoc}\n\n @since 3.4\n"
5691,field,org/eclipse/jface/text/hyperlink/HyperlinkManager/ALL," All detected hyperlinks from all detectors are collected\n and passed to the hyperlink presenter.\n <p>\n This strategy is only allowed if {@link IHyperlinkPresenter#canShowMultipleHyperlinks()}\n returns <code>true</code>.\n </p>\n"
5692,field,org/eclipse/jface/text/hyperlink/HyperlinkManager/LONGEST_REGION_ALL," All detected hyperlinks from all detectors are collected\n and all those with the longest region are passed to the\n hyperlink presenter.\n <p>\n This strategy is only allowed if {@link IHyperlinkPresenter#canShowMultipleHyperlinks()}\n returns <code>true</code>.\n </p>\n"
5693,field,org/eclipse/jface/text/hyperlink/HyperlinkManager/LONGEST_REGION_FIRST," All detected hyperlinks from all detectors are collected\n and form all those with the longest region only the first\n one is passed to the hyperlink presenter.\n"
5699,method,org/eclipse/jface/text/hyperlink/AbstractHyperlinkDetector/getAdapter/Class," Returns an object which is an instance of the given class\n and provides additional context for this hyperlink detector.\n\n @param adapterClass the adapter class to look up\n @return an instance that can be cast to the given class,\n			or <code>null</code> if this object does not\n			have an adapter for the given class\n"
5701,interface,org/eclipse/jface/text/hyperlink/IHyperlinkPresenter," A hyperlink presenter shows hyperlinks on the installed text viewer\n and allows to pick one on of the hyperlinks.\n <p>\n In order to provide backward compatibility for clients of <code>IHyperlinkDetector</code>, extension\n interfaces are used to provide a means of evolution. The following extension interfaces exist:\n <ul>\n <li>{@link IHyperlinkPresenterExtension} since version 3.4,\n 		adds the ability to query  whether the currently shown hyperlinks\n		can be hidden.\n </li>\n </ul></p>\n <p>\n Clients may implement this interface. A default implementation is provided\n through {@link org.eclipse.jface.text.hyperlink.DefaultHyperlinkPresenter}.\n </p>\n\n @see IHyperlinkPresenterExtension\n @since 3.1\n"
5707,class,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter," The default hyperlink presenter underlines the\n link and colors the line and the text with\n the given color.\n <p>\n It can only be used together with the {@link HyperlinkManager#FIRST}\n or the {@link HyperlinkManager#LONGEST_REGION_FIRST} hyperlink strategy.\n </p>\n\n @since 3.1\n"
5710,method,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter/canHideHyperlinks/," {@inheritDoc}\n\n @since 3.4\n"
5714,method,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter/setColor/Color," Sets the hyperlink foreground color.\n \n @param color the hyperlink foreground color or <code>null</code> if the existing text color\n            should be preserved\n"
5722,method,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter/DefaultHyperlinkPresenter/Color," Creates a new default hyperlink presenter.\n \n @param color the hyperlink color or <code>null</code> if the existing text color should be\n            preserved; to be disposed by the caller\n"
5723,method,org/eclipse/jface/text/hyperlink/DefaultHyperlinkPresenter/DefaultHyperlinkPresenter/RGB," Creates a new default hyperlink presenter.\n \n @param color the hyperlink color or <code>null</code> if the existing text color should be\n            preserved\n"
5734,interface,org/eclipse/jface/text/presentation/IPresentationDamager," A presentation damager is a strategy used by a presentation reconciler to\n determine the region of the document's presentation which must be rebuilt\n because of a document change. A presentation damager is assumed to be\n specific for a particular document content type. A presentation damager is\n expected to return a damage region which is a valid input for a presentation\n repairer. I.e. having access to the damage region only the repairer must be\n able to derive all the information needed to successfully repair this region.\n <p>\n This interface must either be implemented by clients or clients use the\n rule-based default implementation\n {@link org.eclipse.jface.text.rules.DefaultDamagerRepairer}. Implementers\n should be registered with a presentation reconciler in order get involved in\n the reconciling process.</p>\n\n @see IPresentationReconciler\n @see IDocument\n @see DocumentEvent\n @see IPresentationRepairer\n"
5736,method,org/eclipse/jface/text/presentation/IPresentationDamager/getDamageRegion/ITypedRegion;DocumentEvent;boolean," Returns the damage in the document's presentation caused by the given document change.\n The damage is restricted to the specified partition for which the presentation damager is\n responsible. The damage may also depend on whether the document change also caused changes\n of the document's partitioning.\n\n @param partition the partition inside which the damage must be determined\n @param event the event describing the change whose damage must be determined\n @param documentPartitioningChanged indicates whether the given change changed the document's partitioning\n @return the computed damage\n"
5742,class,org/eclipse/jface/text/presentation/PresentationReconciler," Standard implementation of <code>IPresentationReconciler</code>. This\n implementation assumes that the tasks performed by its presentation damagers\n and repairers are lightweight and of low cost. This presentation reconciler\n runs in the UI thread and always repairs the complete damage caused by a\n document change rather than just the portion overlapping with the viewer's\n viewport.\n <p>\n Usually, clients instantiate this class and configure it before using it.\n </p>\n"
5753,method,org/eclipse/jface/text/presentation/PresentationReconciler/createPresentation/IRegion;IDocument," Constructs a "repair description" for the given damage and returns this\n description as a text presentation. For this, it queries the partitioning\n of the damage region and asks the appropriate presentation repairer for\n each partition to construct the "repair description" for this partition.\n\n @param damage the damage to be repaired\n @param document the document whose presentation must be repaired\n @return the presentation repair description as text presentation or\n         <code>null</code> if the partitioning could not be computed\n"
5756,interface,org/eclipse/jface/text/presentation/IPresentationReconcilerExtension," Extension interface for {@link IPresentationReconciler}. Adds awareness of\n documents with multiple partitions.\n\n @since 3.0\n"
5772,method,org/eclipse/jface/text/source/AnnotationBarHoverManager/AnnotationBarHoverManager/ISourceViewer;IVerticalRuler;IAnnotationHover;IInformationControlCreator," Creates an annotation hover manager with the given parameters. In addition,\n the hovers anchor is RIGHT and the margin is 5 points to the right.\n\n @param sourceViewer the source viewer this manager connects to\n @param ruler the vertical ruler this manager connects to\n @param annotationHover the annotation hover providing the information to be displayed\n @param creator the information control creator\n @deprecated As of 2.1, replaced by {@link AnnotationBarHoverManager#AnnotationBarHoverManager(IVerticalRulerInfo, ISourceViewer, IAnnotationHover, IInformationControlCreator)}\n"
5773,method,org/eclipse/jface/text/source/AnnotationBarHoverManager/AnnotationBarHoverManager/IVerticalRulerInfo;ISourceViewer;IAnnotationHover;IInformationControlCreator," Creates an annotation hover manager with the given parameters. In addition,\n the hovers anchor is RIGHT and the margin is 5 points to the right.\n\n @param rulerInfo the vertical ruler this manager connects to\n @param sourceViewer the source viewer this manager connects to\n @param annotationHover the annotation hover providing the information to be displayed or <code>null</code> if none\n @param creator the information control creator\n @since 2.1\n"
5775,class,org/eclipse/jface/text/source/AnnotationBarHoverManager/Closer," The information control closer for the hover information. Closes the information control as soon as the mouse pointer leaves the subject area, a mouse button is pressed, the user presses a key, or the subject control is resized or moved.\n\n @since 3.0\n @deprecated As of 3.4, no longer used as closer from super class is used\n"
5780,method,org/eclipse/jface/text/source/AnnotationBarHoverManager/Closer/stop/boolean," Stops the information control and if <code>delayRestart</code> is set allows restart only after a certain delay.\n\n @param delayRestart <code>true</code> if restart should be delayed\n @deprecated As of 3.4, replaced by {@link #stop()}. Note that <code>delayRestart</code> was never honored.\n"
5804,method,org/eclipse/jface/text/source/ICharacterPairMatcher/clear/," Clears this pair matcher. I.e. the matcher throws away all state it might\n remember and prepares itself for a new call of the <code>match</code>\n method.\n"
5815,interface,org/eclipse/jface/text/source/IAnnotationAccessExtension2," Extension interface for {@link org.eclipse.jface.text.source.IAnnotationAccess}.<p>\n This interface allows clients to set a quick assist assistant.\n\n @see org.eclipse.jface.text.source.IAnnotationAccess\n @since 3.2\n"
5816,method,org/eclipse/jface/text/source/IAnnotationAccessExtension2/setQuickAssistAssistant/IQuickAssistAssistant," Provides this annotation access with a quick assist assistant that\n is used to decide whether the quick fix image should be shown.\n\n @param assistant the quick assist assistant\n"
5818,method,org/eclipse/jface/text/source/ILineDiffInfo/getRemovedLinesBelow/," Returns the number of deleted lines after this line.\n\n @return the number of lines after this line.\n"
5819,method,org/eclipse/jface/text/source/ILineDiffInfo/getRemovedLinesAbove/," Returns the number of deleted lines before this line.\n\n @return the number of lines before this line.\n"
5821,method,org/eclipse/jface/text/source/ILineDiffInfo/hasChanges/," Returns whether this line has any changes (to itself, or any deletions before or after it).\n\n @return <code>true</code>, if the line's state (as returned by <code>getType</code>) is\n either <code>CHANGED</code> or <code>ADDED</code> or either of <code>getRemovedLinesBelow</code>\n and <code>getRemovedLinesAbove</code> would return a number &gt; 0\n"
5822,method,org/eclipse/jface/text/source/ILineDiffInfo/getOriginalText/," Returns the original text of this changed region\n\n @return the original text of this changed region, including any deleted lines. The returned\n value and its elements may not be <code>null/code>, it may however be of zero length\n"
5826,interface,org/eclipse/jface/text/source/ISourceViewerExtension," Extension interface {@link org.eclipse.jface.text.source.ISourceViewer}.\n <p>\n Extends the source viewer with the concept of an annotation overview. The\n annotation overview differs from the annotation presentation in that it is\n independent from the viewer's view port, i.e. the annotations of the whole\n document are visible. There are no assumptions about the area in which the\n annotation overview is shown.\n <p>\n As the visibility of annotation overview can dynamically be changed, it is\n assumed that the presentation area can dynamically be hidden if it is\n different from the text widget.\n\n @see org.eclipse.jface.text.source.ISourceViewer\n @since 2.1\n"
5827,method,org/eclipse/jface/text/source/ISourceViewerExtension/showAnnotationsOverview/boolean," Shows/hides an overview representation of the annotations of the whole document of this viewer.\n\n @param show <code>true</code> if annotation overview should be visible, <code>false</code> otherwise\n"
5828,interface,org/eclipse/jface/text/source/IChangeRulerColumn," An <code>IChangeRulerColumn</code> can display quick diff information.\n\n @since 3.0\n"
5830,method,org/eclipse/jface/text/source/IChangeRulerColumn/setBackground/Color," Sets the background color for normal lines. The color has to be disposed of by the caller when\n the receiver is no longer used.\n\n @param backgroundColor the new color to be used as standard line background\n"
5831,method,org/eclipse/jface/text/source/IChangeRulerColumn/setAddedColor/Color," Sets the background color for added lines. The color has to be disposed of by the caller when\n the receiver is no longer used.\n\n @param addedColor the new color to be used for the added lines background\n"
5832,method,org/eclipse/jface/text/source/IChangeRulerColumn/setChangedColor/Color," Sets the background color for changed lines. The color has to be disposed of by the caller when\n the receiver is no longer used.\n\n @param changedColor the new color to be used for the changed lines background\n"
5833,method,org/eclipse/jface/text/source/IChangeRulerColumn/setDeletedColor/Color," Sets the color for the deleted lines indicator. The color has to be disposed of by the caller when\n the receiver is no longer used.\n\n @param deletedColor the new color to be used for the deleted lines indicator.\n"
5834,field,org/eclipse/jface/text/source/IChangeRulerColumn/QUICK_DIFF_MODEL_ID,"The ID under which the quick diff model is registered with a document's annotation model. "
5835,class,org/eclipse/jface/text/source/DefaultCharacterPairMatcher," A character pair matcher that matches a specified set of character\n pairs against each other.  Only characters that occur in the same\n partitioning are matched.\n\n @since 3.3\n"
5840,method,org/eclipse/jface/text/source/DefaultCharacterPairMatcher/DefaultCharacterPairMatcher/char[];String," Creates a new character pair matcher that matches the specified\n characters within the specified partitioning.  The specified\n list of characters must have the form\n <blockquote>{ <i>start</i>, <i>end</i>, <i>start</i>, <i>end</i>, ..., <i>start</i>, <i>end</i> }</blockquote>\n For instance:\n <pre>\n char[] chars = new char[] {'(', ')', '{', '}', '[', ']'};\n new SimpleCharacterPairMatcher(chars, ...);\n </pre>\n\n @param chars a list of characters\n @param partitioning the partitioning to match within\n"
5841,method,org/eclipse/jface/text/source/DefaultCharacterPairMatcher/DefaultCharacterPairMatcher/char[]," Creates a new character pair matcher that matches characters\n within the default partitioning.  The specified list of\n characters must have the form\n <blockquote>{ <i>start</i>, <i>end</i>, <i>start</i>, <i>end</i>, ..., <i>start</i>, <i>end</i> }</blockquote>\n For instance:\n <pre>\n char[] chars = new char[] {'(', ')', '{', '}', '[', ']'};\n new SimpleCharacterPairMatcher(chars);\n </pre>\n\n @param chars a list of characters\n"
5842,interface,org/eclipse/jface/text/source/IOverviewRuler," This interface defines a visual component which may serve\n text viewers as an overview annotation presentation area.  This means,\n presentation of annotations is independent from the actual view port of\n the text viewer. The annotations of the viewer's whole document are\n visible in the overview ruler.\n <p>\n This interfaces embodies three contracts:\n <ul>\n <li>	The overview ruler retrieves the annotations it presents from an annotation model.\n <li>	The ruler is a visual component which must be integrated in a hierarchy of SWT controls.\n <li> The ruler provides interested clients with mapping and\n 		interaction information. This covers the mapping between\n 		coordinates of the ruler's control and line numbers based\n 		on the connected text viewer's document (<code>IVerticalRulerInfo</code>).\n </ul></p>\n <p>\n Clients may implement this interface or use the default implementation provided\n by <code>OverviewlRuler</code>.</p>\n\n @see org.eclipse.jface.text.ITextViewer\n @since 2.1\n"
5847,method,org/eclipse/jface/text/source/IOverviewRuler/addAnnotationType/Object," Adds the given annotation type to this overview ruler. Starting with this\n call, annotations of the given type are shown in the overview ruler.\n\n @param annotationType the annotation type\n"
5849,method,org/eclipse/jface/text/source/IOverviewRuler/addHeaderAnnotationType/Object," Adds the given annotation type to the header of this ruler. Starting with\n this call, the presence of annotations is tracked and the header is drawn\n in the configured color.\n\n @param annotationType the annotation type to be tracked\n"
5851,method,org/eclipse/jface/text/source/IOverviewRuler/getHeaderControl/," Returns this rulers header control. This is the little area between the\n top of the text widget and the top of this overview ruler.\n\n @return the header control of this overview ruler.\n"
5856,method,org/eclipse/jface/text/source/LineChangeHover/decorateText/List;int," Takes a list of <code>ILineDiffInfo</code>s and computes a hover of at most <code>maxLines</code>.\n Added lines are prefixed with a <code>'+'</code>, changed lines with <code>'>'</code> and\n deleted lines with <code>'-'</code>.\n <p>Deleted and added lines can even each other out, so that a number of deleted lines get\n displayed where - in the current document - the added lines are.\n\n @param diffInfos a <code>List</code> of <code>ILineDiffInfo</code>\n @param maxLines the maximum number of lines. Note that adding up all annotations might give\n more than that due to deleted lines.\n @return a <code>String</code> suitable for hover display\n"
5868,method,org/eclipse/jface/text/source/ISourceViewer/setDocument/IDocument;IAnnotationModel;int;int," Sets the given document as this viewer's text model and the\n given annotation model as the model for this viewer's visual\n annotations. The presentation is accordingly updated whereby\n only the specified region is exposed. An appropriate\n <code>TextEvent</code> is issued. The text event does not carry a\n related document event. This method is a convenience method for\n <code>setDocument(document, annotationModel);setVisibleRegion(offset, length)</code>.\n\n @param document the new input document\n @param annotationModel the model of the viewer's visual annotations\n @param modelRangeOffset the offset of the model range\n @param modelRangeLength the length of the model range\n\n @see ITextViewer#setDocument(IDocument, int, int)\n"
5871,method,org/eclipse/jface/text/source/ISourceViewer/setRangeIndication/int;int;boolean," Sets the viewers's range indication to the specified range. Its is indicated\n whether the cursor should also be moved to the beginning of the specified range.\n\n @param offset the offset of the range\n @param length the length of the range\n @param moveCursor indicates whether the cursor should be moved to the given offset\n"
5873,method,org/eclipse/jface/text/source/ISourceViewer/removeRangeIndication/," Removes the viewer's range indication. There is no visible range indication\n after this method completed.\n"
5879,field,org/eclipse/jface/text/source/ISourceViewer/QUICK_ASSIST," Text operation code for requesting quick assist. This will normally\n show quick assist and quick fix proposals for the current position.\n @since 3.2\n"
5880,class,org/eclipse/jface/text/source/VerticalRuler," A vertical ruler which is connected to a text viewer. Single column standard\n implementation of {@link org.eclipse.jface.text.source.IVerticalRuler}.\n <p>\n The same can be achieved by using <code>CompositeRuler</code> configured\n with an <code>AnnotationRulerColumn</code>. Clients may use this class as\n is.\n\n @see org.eclipse.jface.text.ITextViewer\n"
5900,interface,org/eclipse/jface/text/source/ILineRange," Describes a range of lines.\n <p>\n Note that the number of lines is 1-based, e.g. <code>getStartLine() + getNumberOfLines()</code>\n computes the first line <em>after</em> the range, and a range with\n <code>getNumberOfLines() == 0</code> is empty.\n </p>\n\n @since 3.0\n"
5916,method,org/eclipse/jface/text/source/AnnotationPainter/setAnnotationTypeColor/Object;Color," Sets the color in which the squiggly for the given annotation type should be drawn.\n\n @param annotationType the annotation type\n @param color the color\n"
5917,method,org/eclipse/jface/text/source/AnnotationPainter/addAnnotationType/Object," Adds the given annotation type to the list of annotation types whose\n annotations should be painted by this painter using squiggly drawing. If the annotation  type\n is already in this list, this method is without effect.\n\n @param annotationType the annotation type\n"
5918,method,org/eclipse/jface/text/source/AnnotationPainter/addAnnotationType/Object;Object," Adds the given annotation type to the list of annotation types whose\n annotations should be painted by this painter using the given drawing strategy.\n If the annotation type is already in this list, the old drawing strategy gets replaced.\n\n @param annotationType the annotation type\n @param drawingStrategyID the id of the drawing strategy that should be used for this annotation type\n @since 3.0\n"
5921,method,org/eclipse/jface/text/source/AnnotationPainter/addHighlightAnnotationType/Object," Adds the given annotation type to the list of annotation types whose\n annotations should be highlighted this painter. If the annotation  type\n is already in this list, this method is without effect.\n\n @param annotationType the annotation type\n @since 3.0\n"
5928,method,org/eclipse/jface/text/source/AnnotationPainter/skip/Annotation," Should the given annotation be skipped when handling draw requests?\n\n @param annotation the annotation\n @return <code>true</code> iff the given annotation should be\n         skipped when handling draw requests\n @since 3.0\n"
5936,method,org/eclipse/jface/text/source/AnnotationPainter/IDrawingStrategy/draw/Annotation;GC;StyledText;int;int;Color," Draws a decoration for an annotation onto the specified GC at the given text range. There\n are two different invocation modes of the <code>draw</code> method:\n <ul>\n <li><strong>drawing mode:</strong> the passed GC is the graphics context of a paint\n event occurring on the text widget. The strategy should draw the decoration onto the\n graphics context, such that the decoration appears at the given range in the text\n widget.</li>\n <li><strong>clearing mode:</strong> the passed GC is <code>null</code>. In this case\n the strategy must invalidate enough of the text widget's client area to cover any\n decoration drawn in drawing mode. This can usually be accomplished by calling\n {@linkplain StyledText#redrawRange(int, int, boolean) textWidget.redrawRange(offset, length, true)}.</li>\n </ul>\n\n @param annotation the annotation to be drawn\n @param gc the graphics context, <code>null</code> when in clearing mode\n @param textWidget the text widget to draw on\n @param offset the offset of the line\n @param length the length of the line\n @param color the color of the line\n"
5960,method,org/eclipse/jface/text/source/AbstractRulerColumn/getParentRuler/," Returns the parent ruler, <code>null</code> before\n {@link #createControl(CompositeRuler, Composite)} has been called.\n\n @return the parent ruler or <code>null</code>\n"
5968,method,org/eclipse/jface/text/source/AbstractRulerColumn/getDefaultBackground/," Returns the background color. May return <code>null</code> if the system is shutting down.\n\n @return the background color\n"
5990,method,org/eclipse/jface/text/source/DefaultAnnotationHover/isIncluded/Annotation," Tells whether the annotation should be included in\n the computation.\n\n @param annotation the annotation to test\n @return <code>true</code> if the annotation is included in the computation\n"
5994,method,org/eclipse/jface/text/source/DefaultAnnotationHover/DefaultAnnotationHover/boolean," Creates a new default annotation hover.\n\n @param showLineNumber <code>true</code> if the line number should be shown when no annotation is found\n @since 3.4\n"
5998,class,org/eclipse/jface/text/source/LineNumberChangeRulerColumn," A vertical ruler column displaying line numbers and serving as a UI for quick diff.\n Clients usually instantiate and configure object of this class.\n\n @since 3.0\n"
6018,method,org/eclipse/jface/text/source/LineNumberChangeRulerColumn/showLineNumbers/boolean," Sets the line number display mode.\n\n @param showNumbers <code>true</code> to show numbers, <code>false</code> to only show\n        diff / revision info.\n @since 3.3\n"
6029,interface,org/eclipse/jface/text/source/ISourceViewerExtension3," Extension interface for {@link org.eclipse.jface.text.source.ISourceViewer}.<p>\n It introduces the concept of a quick assist assistant and provides access\n to the quick assist invocation context. It also gives access to any currently\n showing annotation hover.</p>\n\n @see IQuickAssistAssistant\n @see IQuickAssistInvocationContext\n @since 3.2\n"
6031,method,org/eclipse/jface/text/source/ISourceViewerExtension3/getQuickAssistInvocationContext/," Returns this viewer's quick assist invocation context.\n\n @return the quick assist invocation context or <code>null</code> if none is available\n"
6033,class,org/eclipse/jface/text/source/ChangeRulerColumn," A vertical ruler column displaying line numbers and serving as a UI for quick diff.\n Clients instantiate and configure object of this class.\n\n @since 3.0\n"
6052,method,org/eclipse/jface/text/source/ChangeRulerColumn/postRedraw/," Triggers a redraw in the display thread.\n"
6069,method,org/eclipse/jface/text/source/MatchingCharacterPainter/MatchingCharacterPainter/ISourceViewer;ICharacterPairMatcher," Creates a new MatchingCharacterPainter for the given source viewer using the given character\n pair matcher. The character matcher is not adopted by this painter. Thus, it is not disposed.\n However, this painter requires exclusive access to the given pair matcher.\n\n @param sourceViewer the source viewer\n @param matcher the character pair matcher\n"
6089,method,org/eclipse/jface/text/source/AnnotationRulerColumn/mouseClicked/int," Hook method for a mouse click event on the given ruler line.\n <p>\n <strong>Note:</strong> The event is sent on mouse up.\n </p>\n \n @param rulerLine the ruler line\n @since 3.0\n"
6099,method,org/eclipse/jface/text/source/AnnotationRulerColumn/addAnnotationType/Object," Adds the given annotation type to this annotation ruler column. Starting\n with this call, annotations of the given type are shown in this annotation\n ruler column.\n\n @param annotationType the annotation type\n @since 3.0\n"
6113,method,org/eclipse/jface/text/source/IAnnotationAccess/isMultiLine/Annotation," Returns whether the given annotation spans multiple lines.\n\n @param annotation the annotation\n @return <code>true</code> if the annotation spans multiple lines,\n 	<code>false</code> otherwise\n\n @deprecated assumed to always return <code>true</code>\n"
6115,interface,org/eclipse/jface/text/source/ILineDifferExtension," Extension interface for {@link ILineDiffer}.\n <p>\n Introduces the concept of suspending a differ. A <code>ILineDiffer</code> may\n be suspended into a dormant state, and resumed to normal operation.\n </p>\n\n @since 3.1\n"
6117,method,org/eclipse/jface/text/source/ILineDifferExtension/resume/," Resumes the receiver. Must only be called after suspend.\n"
6125,method,org/eclipse/jface/text/source/SourceViewer/ensureAnnotationHoverManagerInstalled/," After this method has been executed the caller knows that any installed annotation hover has been installed.\n"
6126,method,org/eclipse/jface/text/source/SourceViewer/ensureOverviewHoverManagerInstalled/," After this method has been executed the caller knows that any installed overview hover has been installed.\n"
6137,method,org/eclipse/jface/text/source/SourceViewer/getContentAssistantFacade/," {@inheritDoc}\n\n @since 3.4\n"
6144,method,org/eclipse/jface/text/source/SourceViewer/rememberSelection/," Remembers and returns the current selection. The saved selection can be restored\n by calling <code>restoreSelection()</code>.\n\n @return the current selection\n @see org.eclipse.jface.text.ITextViewer#getSelectedRange()\n @since 3.0\n"
6159,method,org/eclipse/jface/text/source/SourceViewer/SourceViewer/Composite;IVerticalRuler;IOverviewRuler;boolean;int," Constructs a new source viewer. The vertical ruler is initially visible.\n The overview ruler visibility is controlled by the value of <code>showAnnotationsOverview</code>.\n The viewer has not yet been initialized with a source viewer configuration.\n\n @param parent the parent of the viewer's control\n @param verticalRuler the vertical ruler used by this source viewer\n @param overviewRuler the overview ruler\n @param showAnnotationsOverview <code>true</code> if the overview ruler should be visible, <code>false</code> otherwise\n @param styles the SWT style bits for the viewer's control,\n 			<em>if <code>SWT.WRAP</code> is set then a custom document adapter needs to be provided, see {@link #createDocumentAdapter()}\n @since 2.1\n"
6160,field,org/eclipse/jface/text/source/SourceViewer/GAP_SIZE," The size of the gap between the vertical ruler and the text widget\n (value <code>2</code>).\n <p>\n Note: As of 3.2, the text editor framework is no longer using 2 as\n gap but 1, see {{@link #GAP_SIZE_1 }.\n </p>\n"
6161,field,org/eclipse/jface/text/source/SourceViewer/GAP_SIZE_1," The size of the gap between the vertical ruler and the text widget\n (value <code>1</code>).\n @since 3.2\n"
6166,field,org/eclipse/jface/text/source/SourceViewer/fQuickAssistAssistant," This viewer's quick assist assistant.\n @since 3.2\n"
6167,field,org/eclipse/jface/text/source/SourceViewer/fQuickAssistAssistantInstalled," Flag indicating whether this viewer's quick assist assistant is installed.\n @since 3.2\n"
6180,method,org/eclipse/jface/text/source/SourceViewer/RulerLayout/SourceViewer/RulerLayout/int," Creates a new ruler layout with the given gap between text viewer and vertical ruler.\n\n @param gap the gap between text viewer and vertical ruler\n"
6181,field,org/eclipse/jface/text/source/SourceViewer/RulerLayout/fGap,"The gap between the text viewer and the vertical ruler. "
6189,method,org/eclipse/jface/text/source/LineNumberRulerColumn/updateNumberOfDigits/," Computes the number of digits to be displayed. Returns\n <code>true</code> if the number of digits changed compared\n to the previous call of this method. If the method is called\n for the first time, the return value is also <code>true</code>.\n\n @return whether the number of digits has been changed\n @since 3.0\n"
6198,method,org/eclipse/jface/text/source/LineNumberRulerColumn/paintLine/int;int;int;GC;Display," Paints the line. After this method is called the line numbers are painted on top\n of the result of this method.\n\n @param line the line of the document which the ruler is painted for\n @param y the y-coordinate of the box being painted for <code>line</code>, relative to <code>gc</code>\n @param lineheight the height of one line (and therefore of the box being painted)\n @param gc the drawing context the client may choose to draw on.\n @param display the display the drawing occurs on\n @since 3.0\n"
6199,method,org/eclipse/jface/text/source/LineNumberRulerColumn/postRedraw/," Triggers a redraw in the display thread.\n\n @since 3.0\n"
6223,method,org/eclipse/jface/text/source/OverviewRuler/OverviewRuler/IAnnotationAccess;int;ISharedTextColors," Constructs a overview ruler of the given width using the given annotation access and the given\n color manager.\n <p><strong>Note:</strong> As of 3.4, temporary annotations are no longer discolored.\n Use {@link #OverviewRuler(IAnnotationAccess, int, ISharedTextColors, boolean)} if you\n want to keep the old behavior.</p>\n\n @param annotationAccess the annotation access\n @param width the width of the vertical ruler\n @param sharedColors the color manager\n"
6224,method,org/eclipse/jface/text/source/OverviewRuler/OverviewRuler/IAnnotationAccess;int;ISharedTextColors;boolean," Constructs a overview ruler of the given width using the given annotation\n access and the given color manager.\n\n @param annotationAccess the annotation access\n @param width the width of the vertical ruler\n @param sharedColors the color manager\n @param discolorTemporaryAnnotation <code>true</code> if temporary annotations should be discolored\n @since 3.4\n"
6227,method,org/eclipse/jface/text/source/IAnnotationHoverExtension/canHandleMouseCursor/," Returns whether the provided information control can interact with the mouse cursor. I.e. the\n hover must implement custom information control management.\n\n @return <code>true</code> if the mouse cursor can be handled\n"
6228,method,org/eclipse/jface/text/source/IAnnotationHoverExtension/getHoverInfo/ISourceViewer;ILineRange;int," Returns the object which should be presented in the a\n hover popup window. The information is requested based on\n the specified line range.\n\n @param sourceViewer the source viewer this hover is registered with\n @param lineRange the line range for which information is requested\n @param visibleNumberOfLines the number of visible lines\n @return the requested information or <code>null</code> if no such information exists\n"
6235,method,org/eclipse/jface/text/source/ILineDiffer/restoreAfterLine/int," Restores the deleted lines after <code>line</code>.\n\n @param line the deleted lines following this line number are restored.\n @return the number of restored lines.\n @throws BadLocationException if <code>line</code> is out of bounds.\n"
6237,method,org/eclipse/jface/text/source/IVerticalRulerListener/annotationSelected/VerticalRulerEvent," Called when an annotation is selected in the vertical ruler.\n\n @param event the annotation event that occurred\n"
6238,method,org/eclipse/jface/text/source/IVerticalRulerListener/annotationDefaultSelected/VerticalRulerEvent," Called when a default selection occurs on an\n annotation in the vertical ruler.\n\n @param event the annotation event that occurred\n"
6239,method,org/eclipse/jface/text/source/IVerticalRulerListener/annotationContextMenuAboutToShow/VerticalRulerEvent;Menu," Called when the context menu is opened on an annotation in the\n vertical ruler.\n\n @param event the annotation event that occurred\n @param menu the menu that is about to be shown\n"
6266,method,org/eclipse/jface/text/source/CompositeRuler/CompositeRuler/int," Constructs a new composite ruler with the given gap between its columns.\n\n @param gap the gap\n"
6271,method,org/eclipse/jface/text/source/IVerticalRulerInfoExtension/removeVerticalRulerListener/IVerticalRulerListener," Removes a previously registered listener. If <code>listener</code> is not registered\n with the receiver, calling this method has no effect.\n\n @param listener the listener to be removed\n"
6273,method,org/eclipse/jface/text/source/IVerticalRuler/setModel/IAnnotationModel," Associates an annotation model with this ruler.\n A value <code>null</code> is acceptable and clears the ruler.\n\n @param model the new annotation model, may be <code>null</code>\n"
6275,method,org/eclipse/jface/text/source/IVerticalRuler/update/," Forces the vertical ruler to synchronize itself with its\n annotation model and its viewer's view port.\n"
6278,method,org/eclipse/jface/text/source/IVerticalRulerColumn/setModel/IAnnotationModel," Associates an annotation model with this ruler column.\n A value <code>null</code> is acceptable and clears the ruler.\n\n @param model the new annotation model, may be <code>null</code>\n"
6286,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getUndoManager/ISourceViewer," Returns the undo manager for the given source viewer. This implementation\n always returns a new instance of <code>DefaultUndoManager</code> whose\n history length is set to 25.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return an undo manager or <code>null</code> if no undo/redo should not be supported\n"
6287,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getReconciler/ISourceViewer," Returns the reconciler ready to be used with the given source viewer.\n This implementation always returns <code>null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return a reconciler or <code>null</code> if reconciling should not be supported\n"
6288,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getPresentationReconciler/ISourceViewer," Returns the presentation reconciler ready to be used with the given source viewer.\n\n @param sourceViewer the source viewer\n @return the presentation reconciler or <code>null</code> if presentation reconciling should not be supported\n"
6289,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getContentFormatter/ISourceViewer," Returns the content formatter ready to be used with the given source viewer.\n This implementation always returns <code>null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return a content formatter or <code>null</code> if formatting should not be supported\n"
6290,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getContentAssistant/ISourceViewer," Returns the content assistant ready to be used with the given source viewer.\n This implementation always returns <code>null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return a content assistant or <code>null</code> if content assist should not be supported\n"
6291,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getQuickAssistAssistant/ISourceViewer," Returns the quick assist assistant ready to be used with the given\n source viewer.\n This implementation always returns <code>null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return a quick assist assistant or <code>null</code> if quick assist should not be supported\n @since 3.2\n"
6294,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getDefaultPrefixes/ISourceViewer;String," Returns the default prefixes to be used by the line-prefix operation\n in the given source viewer for text of the given content type. This implementation always\n returns <code>null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @param contentType the content type for which the prefix is applicable\n @return the default prefixes or <code>null</code> if the prefix operation should not be supported\n @since 2.0\n"
6295,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getDoubleClickStrategy/ISourceViewer;String," Returns the double-click strategy ready to be used in this viewer when double clicking\n onto text of the given content type. This implementation always returns a new instance of\n <code>DefaultTextDoubleClickStrategy</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @param contentType the content type for which the strategy is applicable\n @return a double-click strategy or <code>null</code> if double clicking should not be supported\n"
6298,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getAnnotationHover/ISourceViewer," Returns the annotation hover which will provide the information to be\n shown in a hover popup window when requested for the given\n source viewer. This implementation always returns <code>null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return an annotation hover or <code>null</code> if no hover support should be installed\n"
6299,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getOverviewRulerAnnotationHover/ISourceViewer," Returns the annotation hover which will provide the information to be\n shown in a hover popup window when requested for the overview ruler\n of the given source viewer.This implementation always returns the general\n annotation hover returned by <code>getAnnotationHover</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return an annotation hover or <code>null</code> if no hover support should be installed\n @since 3.0\n"
6301,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getTextHover/ISourceViewer;String;int," Returns the text hover which will provide the information to be shown\n in a text hover popup window when requested for the given source viewer and\n the given content type. This implementation always returns <code>\n null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @param contentType the content type\n @param stateMask the SWT event state mask\n @return a text hover or <code>null</code> if no hover support should be installed\n @since 2.1\n"
6302,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getTextHover/ISourceViewer;String," Returns the text hover which will provide the information to be shown\n in a text hover popup window when requested for the given source viewer and\n the given content type. This implementation always returns <code>\n null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @param contentType the content type\n @return a text hover or <code>null</code> if no hover support should be installed\n"
6303,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getInformationControlCreator/ISourceViewer," Returns the information control creator. The creator is a factory creating information\n controls for the given source viewer. This implementation always returns a creator for\n <code>DefaultInformationControl</code> instances.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return the information control creator or <code>null</code> if no information support should be installed\n @since 2.0\n"
6304,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getInformationPresenter/ISourceViewer," Returns the information presenter which will determine and shown\n information requested for the current cursor position. This implementation\n always returns <code>null</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return an information presenter <code>null</code> if  no information presenter should be installed\n @since 2.0\n"
6305,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getConfiguredContentTypes/ISourceViewer," Returns all configured content types for the given source viewer. This list\n tells the caller which content types must be configured for the given source\n viewer, i.e. for which content types the given source viewer's functionalities\n must be specified. This implementation always returns <code>\n new String[] { IDocument.DEFAULT_CONTENT_TYPE }</code>.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return the configured content types for the given viewer\n"
6307,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getHyperlinkDetectors/ISourceViewer," Returns the hyperlink detectors which be used to detect hyperlinks\n in the given source viewer. This\n implementation always returns an array with an URL hyperlink detector.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return an array with hyperlink detectors or <code>null</code> if no hyperlink support should be installed\n @since 3.1\n"
6308,method,org/eclipse/jface/text/source/SourceViewerConfiguration/getHyperlinkPresenter/ISourceViewer," Returns the hyperlink presenter for the given source viewer.\n This implementation always returns the {@link DefaultHyperlinkPresenter}.\n\n @param sourceViewer the source viewer to be configured by this configuration\n @return the hyperlink presenter or <code>null</code> if no hyperlink support should be installed\n @since 3.1\n"
6314,method,org/eclipse/jface/text/source/IAnnotationAccessExtension/paint/Annotation;GC;Canvas;Rectangle," Draws a graphical representation of the given annotation within the given bounds.\n <p>\n <em>Note that this method is not used when drawing annotations on the editor's\n text widget. This is handled trough a {@link org.eclipse.jface.text.source.AnnotationPainter.IDrawingStrategy}.</em>\n </p>\n @param annotation the given annotation\n @param gc the drawing GC\n @param canvas the canvas to draw on\n @param bounds the bounds inside the canvas to draw on\n"
6316,method,org/eclipse/jface/text/source/IAnnotationAccessExtension/isSubtype/Object;Object," Returns <code>true</code> if the given annotation is of the given type\n or <code>false</code> otherwise.\n\n @param annotationType the annotation type\n @param potentialSupertype the potential super annotation type\n @return <code>true</code> if annotation type is a sub-type of the potential annotation super type\n"
6317,method,org/eclipse/jface/text/source/IAnnotationAccessExtension/getSupertypes/Object," Returns the list of super types for the given annotation type. This does not include the type\n itself. The index in the array of super types indicates the length of the path in the hierarchy\n graph to the given annotation type.\n\n @param annotationType the annotation type to check\n @return the super types for the given annotation type\n"
6320,method,org/eclipse/jface/text/source/ContentAssistantFacade/getHandler/String," Returns the handler for the given command identifier.\n <p>\n The same handler instance will be returned when called a more than once\n with the same command identifier.\n </p>\n\n @param commandId the command identifier\n @return the handler for the given command identifier\n @throws IllegalArgumentException if the command is not supported by this\n             content assistant\n @throws IllegalStateException if called when the content assistant is\n             uninstalled\n"
6321,method,org/eclipse/jface/text/source/ContentAssistantFacade/addCompletionListener/ICompletionListener," Adds a completion listener that will be informed before proposals are\n computed.\n\n @param listener the listener\n @throws IllegalStateException if called when the content assistant is\n             uninstalled\n"
6322,method,org/eclipse/jface/text/source/ContentAssistantFacade/removeCompletionListener/ICompletionListener," Removes a completion listener.\n\n @param listener the listener to remove\n @throws IllegalStateException if called when the content assistant is\n             uninstalled\n"
6325,method,org/eclipse/jface/text/source/IAnnotationHover/getHoverInfo/ISourceViewer;int," Returns the text which should be presented in the a\n hover popup window. This information is requested based on\n the specified line number.\n\n @param sourceViewer the source viewer this hover is registered with\n @param lineNumber the line number for which information is requested\n @return the requested information or <code>null</code> if no such information exists\n"
6328,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/setInformationControlCreator/IInformationControlCreator," Sets the information control creator for the additional information control.\n\n @param creator the information control creator for the additional information control\n"
6329,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/uninstall/," Uninstalls quick assist support from the source viewer it has\n previously be installed on.\n"
6330,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/showPossibleQuickAssists/," Shows all possible quick fixes and quick assists at the viewer's cursor position.\n\n @return an optional error message if no proposals can be computed\n"
6331,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/setQuickAssistProcessor/IQuickAssistProcessor," Registers a given quick assist processor for a particular content type. If there is already\n a processor registered, the new processor is registered instead of the old one.\n\n @param processor the quick assist processor to register, or <code>null</code> to remove\n        an existing one\n"
6332,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/getQuickAssistProcessor/," Returns the quick assist processor to be used for the given content type.\n\n @return the quick assist processor or <code>null</code> if none exists\n"
6334,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/canAssist/IQuickAssistInvocationContext," Tells whether this assistant has assists for the given invocation context.\n\n @param invocationContext the invocation context\n @return <code>true</code> if the assistant has a fix for the given annotation\n"
6337,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/addCompletionListener/ICompletionListener," Adds a completion listener that will be informed before proposals are computed.\n\n @param listener the listener\n"
6339,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistant/setStatusLineVisible/boolean," Enables displaying a status line below the proposal popup. The default is not to show the\n status line. The contents of the status line may be set via {@link #setStatusMessage(String)}.\n\n @param show <code>true</code> to show a message line, <code>false</code> to not show one.\n"
6342,method,org/eclipse/jface/text/quickassist/IQuickFixableAnnotation/setQuickFixable/boolean," Sets whether there are quick fixes available for\n this annotation.\n\n @param state <code>true</code> if there are quick fixes available, false otherwise\n"
6344,method,org/eclipse/jface/text/quickassist/IQuickFixableAnnotation/isQuickFixable/," Tells whether there are quick fixes for this annotation.\n <p>\n <strong>Note:</strong> This method must only be called\n if {@link #isQuickFixableStateSet()} returns <code>true</code>.</p>\n\n @return <code>true</code> if this annotation offers quick fixes\n @throws AssertionFailedException if called when {@link #isQuickFixableStateSet()} is <code>false</code>\n"
6346,method,org/eclipse/jface/text/quickassist/IQuickAssistProcessor/getErrorMessage/," Returns the reason why this quick assist processor\n was unable to produce any completion proposals.\n\n @return an error message or <code>null</code> if no error occurred\n"
6348,method,org/eclipse/jface/text/quickassist/IQuickAssistProcessor/canAssist/IQuickAssistInvocationContext," Tells whether this assistant has assists for the given invocation context.\n\n @param invocationContext the invocation context\n @return <code>true</code> if the assistant has a fix for the given annotation\n"
6349,method,org/eclipse/jface/text/quickassist/IQuickAssistProcessor/computeQuickAssistProposals/IQuickAssistInvocationContext," Returns a list of quick assist and quick fix proposals for the\n given invocation context.\n\n @param invocationContext the invocation context\n @return an array of completion proposals or <code>null</code> if no proposals are available\n"
6350,interface,org/eclipse/jface/text/quickassist/IQuickAssistAssistantExtension," Extends {@link IQuickAssistAssistant} with the following function:\n <ul>\n 	<li>allows to get a handler for the given command identifier</li>\n 	<li>allows to enable support for colored labels in the proposal popup</li>\n </ul>\n\n @since 3.4\n"
6351,method,org/eclipse/jface/text/quickassist/IQuickAssistAssistantExtension/getHandler/String," Returns the handler for the given command identifier.\n <p>\n The same handler instance will be returned when called a more than once\n with the same command identifier.\n </p>\n\n @param commandId the command identifier\n @return the handler for the given command identifier\n @throws IllegalArgumentException if the command is not supported by this\n             content assistant\n @throws IllegalStateException if called when this content assistant is\n             uninstalled\n"
6364,method,org/eclipse/jface/text/quickassist/QuickAssistAssistant/possibleCompletionsClosed/," Callback to signal this quick assist assistant that the presentation of the\n possible completions has been stopped.\n"
6369,method,org/eclipse/jface/text/quickassist/QuickAssistAssistant/getHandler/String," {@inheritDoc}\n\n @since 3.4\n"
6371,method,org/eclipse/jface/text/quickassist/QuickAssistAssistant/enableColoredLabels/boolean," {@inheritDoc}\n\n @since 3.4\n"
6374,method,org/eclipse/jface/text/quickassist/IQuickAssistInvocationContext/getOffset/," Returns the offset where quick assist was invoked.\n\n @return the invocation offset or <code>-1</code> if unknown\n"
6375,method,org/eclipse/jface/text/quickassist/IQuickAssistInvocationContext/getLength/," Returns the length of the selection at the invocation offset.\n\n @return the length of the current selection or <code>-1</code> if none or unknown\n"
6380,method,org/eclipse/jface/commands/PersistentState/setShouldPersist/boolean," Sets whether this state should be persisted.\n \n @param persisted\n            Whether this state should be persisted.\n"
6400,method,org/eclipse/jface/commands/RadioState/setRadioGroupIdentifier/String," Sets the identifier of the radio group for this piece of state. If the\n identifier is cleared, then the state is unregistered.\n \n @param identifier\n            The identifier of the radio group for this state; may be\n            <code>null</code> if the identifier is being cleared.\n \n"
6401,method,org/eclipse/jface/commands/RadioState/setValue/Object," Sets the value for this object. This notifies the radio state manager of\n the change.\n \n @param value\n            The new value; should be a <code>Boolean</code>.\n"
6403,class,org/eclipse/jface/action/SubStatusLineManager," A <code>SubStatusLineManager</code> is used to define a set of contribution\n items within a parent manager.  Once defined, the visibility of the entire set can \n be changed as a unit.\n"
6424,method,org/eclipse/jface/action/IContributionItem/isDynamic/," Returns whether this contribution item is dynamic. A dynamic contribution\n item contributes items conditionally, dependent on some internal state.\n\n @return <code>true</code> if this item is dynamic, and\n  <code>false</code> for normal items\n"
6428,method,org/eclipse/jface/action/IContributionItem/saveWidgetState/," Saves any state information of the control(s) owned by this contribution item.\n The contribution manager calls this method before disposing of the controls.\n \n @since 3.0\n"
6430,method,org/eclipse/jface/action/IContributionItem/setVisible/boolean," Sets whether this contribution item is visibile within its manager.\n\n @param visible <code>true</code> if this item should be visible, and\n  <code>false</code> otherwise\n"
6431,method,org/eclipse/jface/action/IContributionItem/update/," Updates any SWT controls cached by this contribution item with any\n changes which have been made to this contribution item since the last update.\n Called by contribution manager update methods.\n"
6439,method,org/eclipse/jface/action/ICoolBarManager/setLockLayout/boolean," Locks or unlocks the layout of the underlying cool bar widget. Once the\n cool bar is locked, cool items cannot be repositioned by the user.\n <p>\n Note that items can be added or removed programmatically even while the\n cool bar is locked.\n </p>\n \n @param value\n            <code>true</code> to lock the cool bar, <code>false</code>\n            to unlock\n"
6447,method,org/eclipse/jface/action/MenuManager/createContextMenu/Control," Creates and returns an SWT context menu control for this menu,\n and installs all registered contributions.\n Does not create a new control if one already exists.\n <p>\n Note that the menu is not expected to be dynamic.\n </p>\n\n @param parent the parent control\n @return the menu control\n"
6449,method,org/eclipse/jface/action/MenuManager/createMenuBar/Shell," Creates and returns an SWT menu bar control for this menu, for use in the\n given <code>Shell</code>, and installs all registered contributions. Does not\n create a new control if one already exists. This implementation simply calls\n the <code>createMenuBar(Decorations)</code> method\n\n @param parent the parent decorations\n @return the menu control\n @deprecated use <code>createMenuBar(Decorations)</code> instead.\n"
6474,method,org/eclipse/jface/action/MenuManager/setOverrides/IContributionManagerOverrides," Sets the overrides for this contribution manager\n \n @param newOverrides the overrides for the items of this manager\n @since 2.0\n"
6478,method,org/eclipse/jface/action/MenuManager/setActionDefinitionId/String," Sets the action definition id of this action. This simply allows the menu\n item text to include a short cut if available.  It can be used to\n notify a user of a key combination that will open a quick menu.\n \n @param definitionId\n            the command definition id\n @since 3.4\n"
6484,method,org/eclipse/jface/action/MenuManager/doItemFill/IContributionItem;int," Call an <code>IContributionItem</code>'s fill method with the\n implementation's widget. The default is to use the <code>Menu</code>\n widget.<br>\n <code>fill(Menu menu, int index)</code>\n \n @param ci\n            An <code>IContributionItem</code> whose <code>fill()</code>\n            method should be called.\n @param index\n            The position the <code>fill()</code> method should start\n            inserting at.\n @since 3.4\n"
6533,interface,org/eclipse/jface/action/IToolBarManager," The <code>IToolBarManager</code> interface provides protocol for managing\n contributions to a tool bar. It extends <code>IContributionManager</code>\n but does not declare any new members; it exists only to increase the\n readability of code using tool bars.\n <p>\n This package also provides a concrete tool bar manager implementation,\n {@link ToolBarManager <code>ToolBarManager</code>}.\n </p>\n"
6538,method,org/eclipse/jface/action/LegacyActionTools/extractMnemonic/String," Extracts the mnemonic text from the given string.\n \n @param text\n            The text from which the mnemonic should be extracted; may be\n            <code>null</code>\n @return The text of the mnemonic; will be {@link #MNEMONIC_NONE} if there\n         is no mnemonic;\n"
6539,method,org/eclipse/jface/action/LegacyActionTools/findKeyCode/String," Maps a standard keyboard key name to an SWT key code. Key names are\n converted to upper case before comparison. If the key name is a single\n letter, for example "S", its character code is returned.\n <p>\n The following key names are known (case is ignored):\n <ul>\n <li><code>"BACKSPACE"</code></li>\n <li><code>"TAB"</code></li>\n <li><code>"RETURN"</code></li>\n <li><code>"ENTER"</code></li>\n <li><code>"ESC"</code></li>\n <li><code>"ESCAPE"</code></li>\n <li><code>"DELETE"</code></li>\n <li><code>"SPACE"</code></li>\n <li><code>"ARROW_UP"</code>, <code>"ARROW_DOWN"</code>,\n <code>"ARROW_LEFT"</code>, and <code>"ARROW_RIGHT"</code></li>\n <li><code>"PAGE_UP"</code> and <code>"PAGE_DOWN"</code></li>\n <li><code>"HOME"</code></li>\n <li><code>"END"</code></li>\n <li><code>"INSERT"</code></li>\n <li><code>"F1"</code>, <code>"F2"</code> through <code>"F12"</code></li>\n </ul>\n </p>\n \n @param token\n            the key name\n @return the SWT key code, <code>-1</code> if no match was found\n @see SWT\n"
6541,method,org/eclipse/jface/action/LegacyActionTools/findModifier/String," Maps standard keyboard modifier key names to the corresponding SWT\n modifier bit. The following modifier key names are recognized (case is\n ignored): <code>"CTRL"</code>, <code>"SHIFT"</code>,\n <code>"ALT"</code>, and <code>"COMMAND"</code>. The given modifier\n key name is converted to upper case before comparison.\n \n @param token\n            the modifier key name\n @return the SWT modifier bit, or <code>0</code> if no match was found\n @see SWT\n"
6549,method,org/eclipse/jface/action/ToolBarManager/getControl/," Returns the tool bar control for this manager.\n \n @return the tool bar control, or <code>null</code> if none (before\n         creating or after disposal)\n"
6556,method,org/eclipse/jface/action/ToolBarManager/ToolBarManager/ToolBar," Creates a tool bar manager for an existing tool bar control. This manager\n becomes responsible for the control, and will dispose of it when the\n manager is disposed.\n <strong>NOTE</strong> When creating a ToolBarManager from an existing\n {@link ToolBar} you will not get the accessible listener provided by\n JFace.\n @see #ToolBarManager()\n @see #ToolBarManager(int)\n \n @param toolbar\n            the tool bar control\n"
6558,method,org/eclipse/jface/action/IMenuCreator/dispose/," Disposes the menu returned by <code>getMenu</code>. Does nothing\n if there is no menu.  This method will be executed only when the\n parent of the menu is disposed.  \n"
6561,class,org/eclipse/jface/action/SubToolBarManager," A <code>SubToolBarManager</code> monitors the additional and removal of \n items from a parent manager so that visibility of the entire set can be changed as a\n unit.\n"
6565,interface,org/eclipse/jface/action/IContributionManager," A contribution manager organizes contributions to such UI components\n as menus, toolbars and status lines.\n <p>\n A contribution manager keeps track of a list of contribution\n items. Each contribution item may has an optional identifier, which can be used\n to retrieve items from a manager, and for positioning items relative to\n each other. The list of contribution items can be subdivided into named groups \n using special contribution items that serve as group markers.\n </p>\n <p>\n The <code>IContributionManager</code> interface provides general\n protocol for adding, removing, and retrieving contribution items.\n It also provides convenience methods that make it convenient\n to contribute actions. This interface should be implemented\n by all objects that wish to manage contributions.\n </p>\n <p>\n There are several implementions of this interface in this package,\n including ones for menus ({@link MenuManager <code>MenuManager</code>}),\n tool bars ({@link ToolBarManager <code>ToolBarManager</code>}),\n and status lines ({@link StatusLineManager <code>StatusLineManager</code>}).\n </p>\n"
6572,method,org/eclipse/jface/action/IContributionManager/getOverrides/," Returns the overrides for the items of this manager.\n \n @return the overrides for the items of this manager\n @since 2.0 \n"
6573,method,org/eclipse/jface/action/IContributionManager/insertAfter/String;IAction," Inserts a contribution item for the given action after the item \n with the given id.\n Equivalent to\n <code>insertAfter(id,new ActionContributionItem(action))</code>.\n\n @param id the contribution item id\n @param action the action to insert\n @exception IllegalArgumentException if there is no item with\n   the given id\n"
6574,method,org/eclipse/jface/action/IContributionManager/insertAfter/String;IContributionItem," Inserts a contribution item after the item with the given id.\n\n @param id the contribution item id\n @param item the contribution item to insert\n @exception IllegalArgumentException if there is no item with\n   the given id\n"
6576,method,org/eclipse/jface/action/IContributionManager/insertBefore/String;IContributionItem," Inserts a contribution item before the item with the given id.\n\n @param id the contribution item id\n @param item the contribution item to insert\n @exception IllegalArgumentException if there is no item with\n   the given id\n"
6591,method,org/eclipse/jface/action/Separator/Separator/String," Creates a new separator which also defines a new group having the given group name.\n The group name must not be <code>null</code> or the empty string.\n The group name is also used as the item id.\n \n @param groupName the group name of the separator\n"
6597,method,org/eclipse/jface/action/ContributionManager/allowItem/IContributionItem," This method allows subclasses of <code>ContributionManager</code> to\n prevent certain items in the contributions list.\n <code>ContributionManager</code> will either block or allow an addition\n based on the result of this method call. This can be used to prevent\n duplication, for example.\n \n @param itemToAdd\n            The contribution item to be added; may be <code>null</code>.\n @return <code>true</code> if the addition should be allowed;\n         <code>false</code> otherwise. The default implementation allows\n         all items.\n @since 3.0\n"
6602,method,org/eclipse/jface/action/ContributionManager/getOverrides/," The <code>ContributionManager</code> implementation of this method\n declared on <code>IContributionManager</code> returns the current\n overrides. If there is no overrides it lazily creates one which overrides\n no item state.\n \n @since 2.0\n"
6603,method,org/eclipse/jface/action/ContributionManager/hasDynamicItems/," Returns whether this contribution manager contains dynamic items. A\n dynamic contribution item contributes items conditionally, dependent on\n some internal state.\n \n @return <code>true</code> if this manager contains dynamic items, and\n         <code>false</code> otherwise\n"
6605,method,org/eclipse/jface/action/ContributionManager/indexOf/IContributionItem," Returns the index of the object in the internal structure. This is\n different from <code>indexOf(String id)</code> since some contribution\n items may not have an id.\n \n @param item\n            The contribution item\n @return the index, or -1 if the item is not found\n @since 3.0\n"
6621,method,org/eclipse/jface/action/ContributionManager/replaceItem/String;IContributionItem," Replaces the item of the given identifier with another contribution item.\n This can be used, for example, to replace large contribution items with\n placeholders to avoid memory leaks. If the identifier cannot be found in\n the current list of items, then this does nothing. If multiple\n occurrences are found, then the replacement items is put in the first\n position and the other positions are removed.\n \n @param identifier\n            The identifier to look for in the list of contributions;\n            should not be <code>null</code>.\n @param replacementItem\n            The contribution item to replace the old item; must not be\n            <code>null</code>. Use\n            {@link org.eclipse.jface.action.ContributionManager#remove(java.lang.String) remove}\n            if that is what you want to do.\n @return <code>true</code> if the given identifier can be; <code>\n @since 3.0\n"
6623,method,org/eclipse/jface/action/ContributionManager/setOverrides/IContributionManagerOverrides," Sets the overrides for this contribution manager\n \n @param newOverrides\n            the overrides for the items of this manager\n @since 2.0\n"
6626,interface,org/eclipse/jface/action/IMenuManager," The <code>IMenuManager</code> interface provides protocol for managing\n contributions to a menu bar and its sub menus.\n An <code>IMenuManager</code> is also an <code>IContributionItem</code>,\n allowing sub-menus to be nested in parent menus.\n <p>\n This interface is internal to the framework; it should not be implemented outside\n the framework.\n </p>\n <p>\n This package provides a concrete menu manager implementation,\n {@link MenuManager <code>MenuManager</code>}.\n </p>\n @noimplement This interface is not intended to be implemented by clients.\n"
6630,method,org/eclipse/jface/action/IMenuManager/getRemoveAllWhenShown/," Returns whether all items should be removed when the menu is about to\n show, but before notifying menu listeners. The default is\n <code>false</code>.\n \n @return <code>true</code> if all items should be removed when shown,\n         <code>false</code> if not\n"
6631,method,org/eclipse/jface/action/IMenuManager/isEnabled/," Returns whether this menu should be enabled or not.\n\n @return <code>true</code> if enabled, and\n   <code>false</code> if disabled\n"
6633,method,org/eclipse/jface/action/IMenuManager/setRemoveAllWhenShown/boolean," Sets whether all items should be removed when the menu is about to show,\n but before notifying menu listeners.\n \n @param removeAll\n            <code>true</code> if all items should be removed when shown,\n            <code>false</code> if not\n"
6648,method,org/eclipse/jface/action/IAction/getDescription/," Returns the action's description if it has one.\n Otherwise it returns <code>getToolTipText()</code>.\n \n @return a description for the action; may be <code>null</code> \n"
6658,method,org/eclipse/jface/action/IAction/isChecked/," Returns the checked status of this action. Applicable only if the style is\n <code>AS_CHECK_BOX</code> or <code>AS_RADIO_BUTTON</code>.\n <p>\n This method is associated with the <code>CHECKED</code> property;\n property change events are reported when its value changes.\n </p>\n\n @return the checked status\n @see #CHECKED\n"
6660,method,org/eclipse/jface/action/IAction/isHandled/," Returns whether this action is handled. In the default case, this is\n always <code>true</code>. However, if the action delegates some of its\n behaviour to some other object, then this method should answer whether\n such an object is currently available.\n \n @return <code>true</code> if all of the action's behaviour is\n         available; <code>false</code> otherwise.\n @since 3.1\n"
6662,method,org/eclipse/jface/action/IAction/run/," Runs this action.\n Each action implementation must define the steps needed to carry out this action.\n The default implementation of this method in <code>Action</code>\n does nothing.\n"
6663,method,org/eclipse/jface/action/IAction/runWithEvent/Event," Runs this action, passing the triggering SWT event.\n As of 2.0, <code>ActionContributionItem</code> calls this method\n instead of <code>run()</code>.  \n The default implementation of this method in <code>Action</code>\n simply calls <code>run()</code> for backwards compatibility.\n \n @param event the SWT event which triggered this action being run \n @since 2.0\n"
6667,method,org/eclipse/jface/action/IAction/setDisabledImageDescriptor/ImageDescriptor," Sets the disabled image for this action, as an image descriptor.\n <p>\n Disabled images will be used on platforms that support changing the image\n when the item is disabled.Fires a property change event for \n the <code>IMAGE</code> property\n if the image actually changes as a consequence.\n </p>\n\n @param newImage the image, or <code>null</code> if this \n   action should not have an image\n @see #IMAGE\n"
6670,method,org/eclipse/jface/action/IAction/setHoverImageDescriptor/ImageDescriptor," Sets the hover image for this action, as an image descriptor.\n <p>\n Hover images will be used on platforms that support changing the image\n when the user hovers over the item.Fires a property change event for \n the <code>IMAGE</code> property\n if the image actually changes as a consequence.\n </p>\n\n @param newImage the image, or <code>null</code> if this \n   action should not have an image\n @see #IMAGE\n"
6672,method,org/eclipse/jface/action/IAction/setImageDescriptor/ImageDescriptor," Sets the image for this action, as an image descriptor.\n <p>\n Fires a property change event for the <code>IMAGE</code> property if the\n image actually changes as a consequence.\n </p>\n <p>\n Note: This operation is a hint and is not supported in all contexts on\n platforms that do not have this concept (for example, Windows NT).\n Furthermore, some platforms (such as GTK), cannot display both a check\n box and an image at the same time. Instead, they hide the image and\n display the check box.\n </p>\n \n @param newImage\n            the image, or <code>null</code> if this action should not have\n            an image\n @see #IMAGE\n"
6674,method,org/eclipse/jface/action/IAction/setText/String," Sets the text for this action.\n <p>\n An accelerator specification may follow the actual text, separated from it by\n an '@' or a '\t' character.  An accelerator specification consists of zero or more \n modifier tokens followed by a key code token.  The tokens are separated by a '+' character.\n </p>\n <p>\n Fires a property change event for the <code>TEXT</code> property\n if the text actually changes as a consequence.\n </p>\n\n @param text the text, or <code>null</code> if none\n @see #TEXT\n @see Action#findModifier\n @see Action#findKeyCode\n"
6677,field,org/eclipse/jface/action/IAction/AS_UNSPECIFIED," Action style constant (value <code>0</code>) indicating action style \n is not specified yet. By default, the action will assume a push button\n style. If <code>setChecked</code> is called, then the style will change\n to a check box, or if <code>setMenuCreator</code> is called, then the\n style will change to a drop down menu.\n \n @since 2.1\n"
6689,field,org/eclipse/jface/action/IAction/HANDLED," Property name of an action's handler. Some actions delegate some or all\n of their behaviour or state to another object. In this case, if the\n object to which behaviour has been delegated changes, then a property\n change event should be sent with this name.\n \n This is used to support backward compatibility of actions within the\n commands framework.\n \n @since 3.1\n"
6690,class,org/eclipse/jface/action/SubCoolBarManager," A <code>SubCoolBarManager</code> monitors the additional and removal of \n items from a parent manager so that visibility of the entire set can be changed as a\n unit.\n \n @since 3.0\n"
6703,method,org/eclipse/jface/action/Action/findKeyCode/String," Maps a standard keyboard key name to an SWT key code. Key names are\n converted to upper case before comparison. If the key name is a single\n letter, for example "S", its character code is returned.\n <p>\n The following key names are known (case is ignored):\n <ul>\n <li><code>"BACKSPACE"</code></li>\n <li><code>"TAB"</code></li>\n <li><code>"RETURN"</code></li>\n <li><code>"ENTER"</code></li>\n <li><code>"ESC"</code></li>\n <li><code>"ESCAPE"</code></li>\n <li><code>"DELETE"</code></li>\n <li><code>"SPACE"</code></li>\n <li><code>"ARROW_UP"</code>, <code>"ARROW_DOWN"</code>,\n <code>"ARROW_LEFT"</code>, and <code>"ARROW_RIGHT"</code></li>\n <li><code>"PAGE_UP"</code> and <code>"PAGE_DOWN"</code></li>\n <li><code>"HOME"</code></li>\n <li><code>"END"</code></li>\n <li><code>"INSERT"</code></li>\n <li><code>"F1"</code>, <code>"F2"</code> through <code>"F12"</code></li>\n </ul>\n </p>\n \n @param token\n            the key name\n @return the SWT key code, <code>-1</code> if no match was found\n @see org.eclipse.swt.SWT\n"
6705,method,org/eclipse/jface/action/Action/findModifier/String," Maps standard keyboard modifier key names to the corresponding SWT\n modifier bit. The following modifier key names are recognized (case is\n ignored): <code>"CTRL"</code>, <code>"SHIFT"</code>,\n <code>"ALT"</code>, and <code>"COMMAND"</code>. The given modifier\n key name is converted to upper case before comparison.\n \n @param token\n            the modifier key name\n @return the SWT modifier bit, or <code>0</code> if no match was found\n @see org.eclipse.swt.SWT\n"
6737,method,org/eclipse/jface/action/Action/setMenuCreator/IMenuCreator," Sets the menu creator for this action.\n <p>\n Note that if this method is called, it overrides the check status.\n </p>\n \n @param creator\n            the menu creator, or <code>null</code> if none\n"
6738,method,org/eclipse/jface/action/Action/setText/String," Sets the text for this action.\n <p>\n Fires a property change event for the <code>TEXT</code> property if the\n text actually changes as a consequence.\n </p>\n <p>\n The accelerator is identified by the last index of a tab character. If\n there are no tab characters, then it is identified by the last index of a\n '@' character. If neither, then there is no accelerator text. Note that\n if you want to insert a '@' character into the text (but no accelerator,\n you can simply insert a '@' or a tab at the end of the text.\n </p>\n \n @param text\n            the text, or <code>null</code> if none\n"
6741,method,org/eclipse/jface/action/Action/Action/String," Creates a new action with the given text and no image. Calls the zero-arg\n constructor, then <code>setText</code>.\n \n @param text\n            the string used as the text for the action, or\n            <code>null</code> if there is no text\n @see #setText\n"
6742,method,org/eclipse/jface/action/Action/Action/String;ImageDescriptor," Creates a new action with the given text and image. Calls the zero-arg\n constructor, then <code>setText</code> and\n <code>setImageDescriptor</code>.\n \n @param text\n            the action's text, or <code>null</code> if there is no text\n @param image\n            the action's image, or <code>null</code> if there is no\n            image\n @see #setText\n @see #setImageDescriptor\n"
6747,method,org/eclipse/jface/action/ExternalActionManager/setCallback/ICallback," A mutator for the current call back\n \n @param callbackToUse\n            The new callback mechanism to use; this value may be\n            <code>null</code> if the default is acceptable (i.e., no\n            extra information will provided to actions).\n"
6753,method,org/eclipse/jface/action/ExternalActionManager/CommandCallback/getActiveBindingsFor/String," Returns the active bindings for a particular command identifier.\n \n @param commandId\n            The identifier of the command whose bindings are\n            requested. This argument may be <code>null</code>. It\n            is assumed that the command has no parameters.\n @return The array of active triggers (<code>TriggerSequence</code>)\n         for a particular command identifier. This value is guaranteed\n         not to be <code>null</code>, but it may be empty.\n @since 3.2\n"
6755,method,org/eclipse/jface/action/ExternalActionManager/CommandCallback/isActive/String," {@inheritDoc}\n \n Calling this method with an undefined command id will generate a log\n message.\n"
6765,interface,org/eclipse/jface/action/ExternalActionManager/IActiveChecker," Defines a callback mechanism for developer who wish to further control\n the visibility of legacy action-based contribution items.\n \n @since 3.1\n"
6766,method,org/eclipse/jface/action/ExternalActionManager/IActiveChecker/isActive/String," Checks whether the command with the given identifier should be\n considered active. This can be used in systems using some kind of\n user interface filtering (e.g., activities in the Eclipse workbench).\n \n @param commandId\n            The identifier for the command; must not be\n            <code>null</code>\n @return <code>true</code> if the command is active;\n         <code>false</code> otherwise.\n"
6768,method,org/eclipse/jface/action/ExternalActionManager/IBindingManagerCallback/getActiveBindingsFor/String," <p>\n Returns the active bindings for a particular command identifier.\n </p>\n \n @param commandId\n            The identifier of the command whose bindings are\n            requested. This argument may be <code>null</code>. It\n            is assumed that the command has no parameters.\n @return The array of active triggers (<code>TriggerSequence</code>)\n         for a particular command identifier. This value is guaranteed\n         not to be <code>null</code>, but it may be empty.\n"
6769,interface,org/eclipse/jface/action/ExternalActionManager/IExecuteApplicable," An overridable mechanism to filter certain IActions from the execution\n bridge.\n \n @since 3.4\n"
6770,method,org/eclipse/jface/action/ExternalActionManager/IExecuteApplicable/isApplicable/IAction," Allow the callback to filter out actions that should not fire\n execution events.\n \n @param action\n            The action with an actionDefinitionId\n @return true if this action should be considered.\n"
6773,method,org/eclipse/jface/action/ExternalActionManager/IExecuteCallback/notDefined/IAction;NotDefinedException," Fires a <code>NotDefinedException</code> because the action was not\n defined.\n \n @param action\n 			The action contribution that caused the exception,\n 			never <code>null</code>.\n @param exception\n 			The <code>NotDefinedException</code>, never <code>null</code>.\n"
6774,method,org/eclipse/jface/action/ExternalActionManager/IExecuteCallback/preExecute/IAction;Event," Fires an execution event before an action is run.\n \n @param action\n            The action contribution that requires an\n            execution event to be fired. Cannot be <code>null</code>.\n @param e\n            The SWT Event, may be <code>null</code>.\n \n"
6777,interface,org/eclipse/jface/action/ExternalActionManager/ICallback," A callback mechanism for some external tool to communicate extra\n information to actions and action contribution items.\n \n @since 3.0\n"
6779,method,org/eclipse/jface/action/ExternalActionManager/ICallback/getAccelerator/String," An accessor for the accelerator associated with the item indicated by\n the identifier. This identifier is specific to mechanism being used.\n In the case of the Eclipse workbench, this is the command identifier.\n \n @param identifier\n            The identifier of the item from which the accelerator\n            should be obtained ; must not be <code>null</code>.\n @return An integer representation of the accelerator. This is the\n         same accelerator format used by SWT.\n"
6782,method,org/eclipse/jface/action/ExternalActionManager/ICallback/isActive/String," Checks whether the item matching this identifier is active. This is\n used to decide whether a contribution item with this identifier\n should be made visible. An inactive item is not visible.\n \n @param identifier\n            The identifier of the item from which the active state\n            should be retrieved; must not be <code>null</code>.\n @return <code>true</code> if the item is active; <code>false</code>\n         otherwise.\n"
6783,method,org/eclipse/jface/action/ExternalActionManager/ICallback/removePropertyChangeListener/String;IPropertyChangeListener," Removes a listener from the object referenced by\n <code>identifier</code>. This identifier is specific to mechanism\n being used. In the case of the Eclipse workbench, this is the command\n identifier.\n \n @param identifier\n            The identifier of the item to from the listener should be\n            removed; must not be <code>null</code>.\n @param listener\n            The listener to be removed; must not be <code>null</code>.\n"
6798,method,org/eclipse/jface/action/ContributionItem/isVisible/," The default implementation of this <code>IContributionItem</code>\n method returns the value recorded in an internal state variable,\n which is <code>true</code> by default. <code>setVisible</code>\n should be used to change this setting.\n"
6805,method,org/eclipse/jface/action/ContributionItem/ContributionItem/," Creates a contribution item with a <code>null</code> id.\n Calls <code>this(String)</code> with <code>null</code>.\n"
6816,method,org/eclipse/jface/action/AbstractGroupMarker/AbstractGroupMarker/String," Create a new group marker with the given name.\n The group name must not be <code>null</code> or the empty string.\n The group name is also used as the item id.\n \n @param groupName the name of the group\n"
6818,method,org/eclipse/jface/action/IContributionManagerOverrides/getEnabled/IContributionItem," Find out the enablement of the item\n @param item the contribution item for which the enable override value is \n determined\n @return <ul>\n 				<li><code>Boolean.TRUE</code> if the given contribution item should be enabled</li>\n 				<li><code>Boolean.FALSE</code> if the item should be disabled</li>\n 				<li><code>null</code> if the item may determine its own enablement</li>\n 			</ul>\n @since 2.0 \n"
6822,method,org/eclipse/jface/action/IContributionManagerOverrides/getVisible/IContributionItem," Visiblity override.\n \n @param item the contribution item in question\n @return  <ul>\n 				<li><code>Boolean.TRUE</code> if the given contribution item should be visible</li>\n 				<li><code>Boolean.FALSE</code> if the item should not be visible</li>\n 				<li><code>null</code> if the item may determine its own visibility</li>\n 			</ul>\n @since 3.5\n"
6830,class,org/eclipse/jface/action/SubMenuManager," A <code>SubMenuManager</code> is used to define a set of contribution\n items within a parent manager.  Once defined, the visibility of the entire set can \n be changed as a unit.\n <p>\n A client may ask for and make additions to a submenu.  The visibility of these items\n is also controlled by the visibility of the <code>SubMenuManager</code>.\n </p>\n"
6839,method,org/eclipse/jface/action/SubMenuManager/findMenuUsingPath/String," <p>\n The menu returned is wrapped within a <code>SubMenuManager</code> to\n monitor additions and removals.  If the visibility of this menu is modified\n the visibility of the submenus is also modified.\n </p>\n"
6844,method,org/eclipse/jface/action/SubMenuManager/getWrapper/IMenuManager," Returns the menu wrapper for a menu manager.\n <p>\n The sub menus within this menu are wrapped within a <code>SubMenuManager</code> to\n monitor additions and removals.  If the visibility of this menu is modified\n the visibility of the sub menus is also modified.\n <p>\n @param mgr the menu manager to be wrapped\n\n @return the menu wrapper\n"
6861,interface,org/eclipse/jface/action/IStatusLineManager," The <code>IStatusLineManager</code> interface provides protocol\n for displaying messages on a status line, for monitoring progress,\n and for managing contributions to the status line.\n <p>\n <b>Note:</b> An error message overrides the current message until\n the error message is cleared.\n </p><p>\n This package also provides a concrete status line manager implementation,\n {@link StatusLineManager <code>StatusLineManager</code>}.\n </p>\n"
6862,method,org/eclipse/jface/action/IStatusLineManager/getProgressMonitor/," Returns a progress monitor which reports progress in the status line.\n Note that the returned progress monitor may only be accessed from the UI\n thread.\n \n @return the progress monitor\n \n         Note: There is a delay after a beginTask message before the\n         monitor is shown. This may not be appropriate for all apps.\n"
6865,method,org/eclipse/jface/action/IStatusLineManager/setErrorMessage/String," Sets the error message text to be displayed on the status line.\n The image on the status line is cleared.\n <p>\n An error message overrides the current message until the error \n message is cleared (set to <code>null</code>).\n </p>\n\n @param message the error message, or <code>null</code> to clear\n 		the current error message.\n"
6866,method,org/eclipse/jface/action/IStatusLineManager/setErrorMessage/Image;String," Sets the image and error message to be displayed on the status line.\n <p>\n An error message overrides the current message until the error \n message is cleared (set to <code>null</code>).\n </p>\n\n @param image the image to use, or <code>null</code> for no image\n @param message the error message, or <code>null</code> to clear\n 		the current error message.\n"
6867,method,org/eclipse/jface/action/IStatusLineManager/setMessage/String," Sets the message text to be displayed on the status line.\n The image on the status line is cleared.\n <p>\n This method replaces the current message but does not affect the \n error message. That is, the error message, if set, will continue\n to be displayed until it is cleared (set to <code>null</code>).\n </p>\n\n @param message the message, or <code>null</code> for no message\n"
6868,method,org/eclipse/jface/action/IStatusLineManager/setMessage/Image;String," Sets the image and message to be displayed on the status line.\n <p>\n This method replaces the current message but does not affect the \n error message. That is, the error message, if set, will continue\n to be displayed until it is cleared (set to <code>null</code>).\n </p>\n\n @param image the image to use, or <code>null</code> for no image\n @param message the message, or <code>null</code> for no message\n"
6870,method,org/eclipse/jface/action/StatusLineManager/createControl/Composite," Creates and returns this manager's status line control. \n Does not create a new control if one already exists.\n <p>\n Note: Since 3.0 the return type is <code>Control</code>.  Before 3.0, the return type was \n   the package-private class <code>StatusLine</code>.\n </p>\n\n @param parent the parent control\n @return the status line control\n"
6905,field,org/eclipse/jface/action/ToolBarContributionItem/SHOW_ALL_ITEMS," A constant used by <code>setMinimumItemsToShow</code> and <code>getMinimumItemsToShow</code>\n to indicate that all tool items should be shown in the cool item.\n"
6907,method,org/eclipse/jface/action/ActionContributionItem/getUseColorIconsInToolbars/," Returns whether color icons should be used in toolbars.\n \n @return <code>true</code> if color icons should be used in toolbars,\n         <code>false</code> otherwise\n"
6908,method,org/eclipse/jface/action/ActionContributionItem/setUseColorIconsInToolbars/boolean," Sets whether color icons should be used in toolbars.\n \n @param useColorIcons\n            <code>true</code> if color icons should be used in toolbars,\n            <code>false</code> otherwise\n"
6914,method,org/eclipse/jface/action/ActionContributionItem/getMode/," Returns the presentation mode, which is the bitwise-or of the\n <code>MODE_*</code> constants. The default mode setting is 0, meaning\n that for menu items, both text and image are shown (if present), but for\n tool items, the text is shown only if there is no image.\n \n @return the presentation mode settings\n \n @since 3.0\n"
6919,method,org/eclipse/jface/action/ActionContributionItem/isVisible/," The <code>ActionContributionItem</code> implementation of this\n <code>ContributionItem</code> method extends the super implementation\n by also checking whether the command corresponding to this action is\n active.\n"
6921,method,org/eclipse/jface/action/ActionContributionItem/update/," The action item implementation of this <code>IContributionItem</code>\n method calls <code>update(null)</code>.\n"
6922,method,org/eclipse/jface/action/ActionContributionItem/update/String," Synchronizes the UI with the given property.\n \n @param propertyName\n            the name of the property, or <code>null</code> meaning all\n            applicable properties\n"
6925,method,org/eclipse/jface/action/ActionContributionItem/getWidget/," Return the widget associated with this contribution item. It should not\n be cached, as it can be disposed and re-created by its containing\n ContributionManager, which controls all of the widgets lifecycle methods.\n <p>\n This can be used to set layout data on the widget if appropriate. The\n actual type of the widget can be any valid control for this\n ContributionItem's current ContributionManager.\n </p>\n \n @return the widget, or <code>null</code> depending on the lifecycle.\n @since 3.4\n"
6927,field,org/eclipse/jface/action/ActionContributionItem/MODE_FORCE_TEXT," Mode bit: Show text on tool items or buttons, even if an image is\n present. If this mode bit is not set, text is only shown on tool items if\n there is no image present.\n \n @since 3.0\n"
6928,class,org/eclipse/jface/action/SubContributionManager," A <code>SubContributionManager</code> is used to define a set of contribution\n items within a parent manager.  Once defined, the visibility of the entire set can \n be changed as a unit.\n"
6956,method,org/eclipse/jface/action/SubContributionManager/unwrap/IContributionItem," Unwraps a nested contribution item. If the contribution item is an\n instance of <code>SubContributionItem</code>, then its inner item is\n returned. Otherwise, the item itself is returned.\n \n @param item\n            The item to unwrap; may be <code>null</code>.\n @return The inner item of <code>item</code>, if <code>item</code> is\n         a <code>SubContributionItem</code>;<code>item</code>\n         otherwise.\n"
6969,class,org/eclipse/jface/util/DelegatingDragAdapter," A <code>DelegatingDragAdapter</code> is a <code>DragSourceListener</code> that  \n maintains and delegates to a set of {@link TransferDragSourceListener}s. Each \n TransferDragSourceListener can then be implemented as if it were the \n <code>DragSource's</code> only DragSourceListener.\n <p>\n When a drag is started, a subset of all <code>TransferDragSourceListeners</code>\n is generated and stored in a list of <i>active</i> listeners. This subset is\n calculated by forwarding {@link DragSourceListener#dragStart(DragSourceEvent)} to \n every listener, and checking if the {@link DragSourceEvent#doit doit} field is left \n set to <code>true</code>.\n </p> \n The <code>DragSource</code>'s set of supported Transfer types ({@link\n DragSource#setTransfer(Transfer[])}) is updated to reflect the Transfer types\n corresponding to the active listener subset.\n <p>\n If and when {@link #dragSetData(DragSourceEvent)} is called, a single\n <code>TransferDragSourceListener</code> is chosen, and only it is allowed to set the\n drag data. The chosen listener is the first listener in the subset of active listeners\n whose Transfer supports ({@link Transfer#isSupportedType(TransferData)}) the \n <code>dataType</code> in the <code>DragSourceEvent</code>.\n </p>\n <p>\n The following example snippet shows a <code>DelegatingDragAdapter</code> with two\n <code>TransferDragSourceListeners</code>. One implements drag of text strings, \n the other supports file transfer and demonstrates how a listener can be disabled using\n the dragStart method. \n </p>\n <code><pre>\n		final TreeViewer viewer = new TreeViewer(shell, SWT.NONE);\n		\n		DelegatingDragAdapter dragAdapter = new DelegatingDragAdapter();		\n		dragAdapter.addDragSourceListener(new TransferDragSourceListener() {\n			public Transfer getTransfer() {\n				return TextTransfer.getInstance();\n			}\n			public void dragStart(DragSourceEvent event) {\n				// always enabled, can control enablement based on selection etc.\n			}\n			public void dragSetData(DragSourceEvent event) {\n				event.data = "Transfer data";\n			}\n			public void dragFinished(DragSourceEvent event) {\n				// no clean-up required\n			}\n		});\n		dragAdapter.addDragSourceListener(new TransferDragSourceListener() {\n			public Transfer getTransfer() {\n				return FileTransfer.getInstance();\n			}\n			public void dragStart(DragSourceEvent event) {\n				// enable drag listener if there is a viewer selection\n				event.doit = !viewer.getSelection().isEmpty();\n			}\n			public void dragSetData(DragSourceEvent event) {\n				File file1 = new File("C:/temp/file1");\n				File file2 = new File("C:/temp/file2");\n				event.data = new String[] {file1.getAbsolutePath(), file2.getAbsolutePath()};\n			}\n			public void dragFinished(DragSourceEvent event) {\n				// no clean-up required\n			}\n		});\n		viewer.addDragSupport(DND.DROP_COPY | DND.DROP_MOVE, dragAdapter.getTransfers(), dragAdapter);\n </pre></code>\n @since 3.0\n"
6976,method,org/eclipse/jface/util/DelegatingDragAdapter/removeDragSourceListener/TransferDragSourceListener," Removes the given <code>TransferDragSourceListener</code>.\n Listeners should not be removed while a drag and drop operation is in progress.\n  \n @param listener the <code>TransferDragSourceListener</code> to remove\n"
6978,interface,org/eclipse/jface/util/TransferDragSourceListener," A <code>TransferDragSourceListener</code> is a <code>DragSourceListener</code> \n that can handle one type of SWT {@link Transfer}. \n The purpose of a <code>TransferDragSourceListener</code> is to:\n <ul>\n   <li>Determine enablement for a drag operation. A <code>TransferDragSourceListener</code>\n 	will not be used in a drag operation if the <code>DragSourceEvent#doit</code> field \n 	is set to false in <code>DragSourceListener#dragStart(DragSourceEvent)</code>.\n   <li>Set data for a single type of drag and <code>Transfer</code> type.\n </ul>\n <p>\n A <code>DelegatingDragAdapter</code> allows these functions to be implemented \n separately for unrelated types of drags. <code>DelegatingDragAdapter</code> then \n combines the function of each <code>TransferDragSourceListener</code>, while \n allowing them to be implemented as if they were the only <code>DragSourceListener</code>.\n </p>\n @since 3.0\n"
6985,method,org/eclipse/jface/util/LocalSelectionTransfer/javaToNative/Object;TransferData," Overrides org.eclipse.swt.dnd.ByteArrayTransfer#javaToNative(Object,\n TransferData).\n Only encode the transfer type name since the selection is read and\n written in the same process.\n \n @see org.eclipse.swt.dnd.ByteArrayTransfer#javaToNative(java.lang.Object, org.eclipse.swt.dnd.TransferData)\n"
6986,method,org/eclipse/jface/util/LocalSelectionTransfer/nativeToJava/TransferData," Overrides org.eclipse.swt.dnd.ByteArrayTransfer#nativeToJava(TransferData).\n Test if the native drop data matches this transfer type.\n \n @see org.eclipse.swt.dnd.ByteArrayTransfer#nativeToJava(TransferData)\n"
6990,method,org/eclipse/jface/util/LocalSelectionTransfer/LocalSelectionTransfer/," Only the singleton instance of this class may be used. \n"
6991,class,org/eclipse/jface/util/Assert," <code>Assert</code> is useful for for embedding runtime sanity checks\n in code. The static predicate methods all test a condition and throw some\n type of unchecked exception if the condition does not hold.\n <p>\n Assertion failure exceptions, like most runtime exceptions, are\n thrown when something is misbehaving. Assertion failures are invariably\n unspecified behavior; consequently, clients should never rely on\n these being thrown (or not thrown). <b>If you find yourself in the\n position where you need to catch an assertion failure, you have most\n certainly written your program incorrectly.</b>\n </p>\n <p>\n Note that an <code>assert</code> statement is slated to be added to the\n Java language in JDK 1.4, rending this class obsolete.\n \n @deprecated As of 3.3, replaced by {@link org.eclipse.core.runtime.Assert}\n </p>\n"
6993,method,org/eclipse/jface/util/Assert/isLegal/boolean;String," Asserts that an argument is legal. If the given boolean is\n not <code>true</code>, an <code>IllegalArgumentException</code>\n is thrown.\n The given message is included in that exception, to aid debugging.\n\n @param expression the outcome of the check\n @param message the message to include in the exception\n @return <code>true</code> if the check passes (does not return\n    if the check fails)\n @exception IllegalArgumentException if the legality test failed\n"
6997,method,org/eclipse/jface/util/Assert/isTrue/boolean;String," Asserts that the given boolean is <code>true</code>. If this\n is not the case, some kind of unchecked exception is thrown.\n The given message is included in that exception, to aid debugging.\n\n @param expression the outcome of the check\n @param message the message to include in the exception\n @return <code>true</code> if the check passes (does not return\n    if the check fails)\n"
6999,method,org/eclipse/jface/util/Geometry/distanceSquared/Point;Point," Returns the square of the distance between two points. \n <p>This is preferred over the real distance when searching\n for the closest point, since it avoids square roots.</p>\n \n @param p1 first endpoint\n @param p2 second endpoint\n @return the square of the distance between the two points\n \n @since 3.0\n"
7010,method,org/eclipse/jface/util/Geometry/subtract/Rectangle;Rectangle," <p>Returns a new difference Rectangle whose x, y, width, and height are equal to the difference of the corresponding\n attributes from the given rectangles</p>\n \n <p></p>\n <b>Example: Compute the margins for a given Composite, and apply those same margins to a new GridLayout</b>\n \n <code><pre>      \n      // Compute the client area, in the coordinate system of the input composite's parent  \n      Rectangle clientArea = Display.getCurrent().map(inputComposite, \n      	inputComposite.getParent(), inputComposite.getClientArea());\n      \n      // Compute the margins for a given Composite by subtracting the client area from the composite's bounds\n      Rectangle margins = Geometry.subtract(inputComposite.getBounds(), clientArea);\n      \n      // Now apply these margins to a new GridLayout\n      GridLayout layout = GridLayoutFactory.fillDefaults().margins(margins).create();\n </pre></code>\n \n @param rect1 first rectangle\n @param rect2 rectangle to subtract\n @return the difference between the two rectangles (computed as rect1 - rect2)\n @since 3.3\n"
7024,method,org/eclipse/jface/util/Geometry/getExtrudedEdge/Rectangle;int;int," Extrudes the given edge inward by the given distance. That is, if one side of the rectangle\n was sliced off with a given thickness, this returns the rectangle that forms the slice. Note\n that the returned rectangle will be inside the given rectangle if size > 0.\n \n @param toExtrude the rectangle to extrude. The resulting rectangle will share three sides\n with this rectangle.\n @param size distance to extrude. A negative size will extrude outwards (that is, the resulting\n rectangle will overlap the original iff this is positive). \n @param orientation the side to extrude.  One of SWT.LEFT, SWT.RIGHT, SWT.TOP, or SWT.BOTTOM. The \n resulting rectangle will always share this side with the original rectangle.\n @return a rectangle formed by extruding the given side of the rectangle by the given distance.\n @since 3.0\n"
7032,method,org/eclipse/jface/util/Geometry/normalize/Rectangle," Normalizes the given rectangle. That is, any rectangle with\n negative width or height becomes a rectangle with positive\n width or height that extends to the upper-left of the original\n rectangle. \n \n @param rect rectangle to modify\n @since 3.0\n"
7036,method,org/eclipse/jface/util/Geometry/getDistanceFrom/Rectangle;Point," Returns the distance from the point to the nearest edge of the given\n rectangle. Returns negative values if the point lies outside the rectangle.\n \n @param boundary rectangle to test\n @param toTest point to test\n @return the distance between the given point and the nearest edge of the rectangle.\n Returns positive values for points inside the rectangle and negative values for points\n outside the rectangle.\n @since 3.1\n"
7044,method,org/eclipse/jface/util/Geometry/moveInside/Rectangle;Rectangle," Repositions the 'inner' rectangle to lie completely within the bounds of the 'outer'\n rectangle if possible. One use for this is to ensure that, when setting a control's bounds,\n that they will always lie within its parent's client area (to avoid clipping).\n \n @param inner The 'inner' rectangle to be repositioned (should be smaller than the 'outer' rectangle)\n @param outer The 'outer' rectangle\n"
7046,method,org/eclipse/jface/util/IPropertyChangeListener/propertyChange/PropertyChangeEvent," Notification that a property has changed.\n <p>\n This method gets called when the observed object fires a property\n change event.\n </p>\n\n @param event the property change event object describing which property\n changed and how\n"
7048,method,org/eclipse/jface/util/IOpenEventListener/handleOpen/SelectionEvent," Called when a selection or default selection occurs \n depending on the user preference. \n @param e the selection event\n"
7052,method,org/eclipse/jface/util/PropertyChangeEvent/getProperty/," Returns the name of the property that changed.\n <p>\n Warning: there is no guarantee that the property name returned\n is a constant string.  Callers must compare property names using\n equals, not ==.\n </p>\n\n @return the name of the property that changed\n"
7053,method,org/eclipse/jface/util/PropertyChangeEvent/PropertyChangeEvent/Object;String;Object;Object," Creates a new property change event.\n\n @param source the object whose property has changed\n @param property the property that has changed (must not be <code>null</code>)\n @param oldValue the old value of the property, or <code>null</code> if none\n @param newValue the new value of the property, or <code>null</code> if none\n"
7063,method,org/eclipse/jface/util/OpenStrategy/activateOnOpen/," @return true if editors should be activated when opened. \n"
7070,field,org/eclipse/jface/util/OpenStrategy/FILE_EXPLORER,"A single click will generate an open\n event and key arrows will generate an open event after a\n small time.\n \n @deprecated\n"
7072,class,org/eclipse/jface/util/Policy," The Policy class handles settings for behaviour, debug flags and logging\n within JFace.\n \n @since 3.0\n"
7073,method,org/eclipse/jface/util/Policy/setLog/ILogger," Sets the logger used by JFace to log errors.\n \n @param logger\n            the logger to use, or <code>null</code> to use the default\n            logger\n @since 3.1\n"
7074,method,org/eclipse/jface/util/Policy/getLog/," Returns the logger used by JFace to log errors.\n <p>\n The default logger prints the status to <code>System.err</code>.\n </p>\n \n @return the logger\n @since 3.1\n"
7081,method,org/eclipse/jface/util/Policy/setErrorSupportProvider/ErrorSupportProvider," Set the error support provider for error dialogs.\n \n @param provider\n @since 3.3\n"
7082,method,org/eclipse/jface/util/Policy/getErrorSupportProvider/," Return the ErrorSupportProvider for the receiver.\n \n @return ErrorSupportProvider or <code>null</code> if this has not been\n         set\n @since 3.3\n"
7085,field,org/eclipse/jface/util/Policy/DEFAULT," Constant for the the default setting for debug options.\n"
7087,field,org/eclipse/jface/util/Policy/DEBUG_DIALOG_NO_PARENT," A flag to indicate whether unparented dialogs should be checked.\n"
7090,interface,org/eclipse/jface/util/TransferDropTargetListener," A <code>TransferDropTargetListener</code> is a <code>DropTragetListener</code> \n that handles one type of SWT {@link Transfer}. \n The purpose of a <code>TransferDropTargetListener</code> is to:\n <ul>\n   <li>Determine enablement for a drop operation. A <code>TransferDropTargetListener</code>\n 		will not be used if <code>isEnabled</code> returns false. \n   <li>When enabled, optionally show feedback on the <code>DropTarget</code>.\n   <li>Perform the actual drop\n </ul>\n A <code>DelegatingDropAdapter</code> allows these functions to be implemented \n separately for unrelated types of drags. <code>DelegatingDropAdapter</code> then \n combines the function of each <code>TransferDropTargetListener</code>, while \n allowing them to be implemented as if they were the only <code>DragSourceListener</code>.\n @since 3.0\n"
7092,method,org/eclipse/jface/util/TransferDropTargetListener/isEnabled/DropTargetEvent," Returns <code>true</code> if this listener can handle the drop\n based on the given <code>DropTargetEvent</code>.\n <p>\n This method is called by the <code>DelegatingDropAdapter</code> only\n if the <code>DropTargetEvent</code> contains a transfer data type\n supported by this listener. The <code>Transfer</code> returned by the \n <code>#getTransfer()</code> method is used for this purpose.\n </p>\n \n @param event the drop target event\n @return <code>true</code> if the listener is enabled for the given\n 	drop target event.\n"
7099,method,org/eclipse/jface/util/SafeRunnable/getIgnoreErrors/boolean," Flag to avoid interactive error dialogs during automated testing.\n \n @param flag\n @return true if errors should be ignored\n @deprecated use getIgnoreErrors()\n"
7100,method,org/eclipse/jface/util/SafeRunnable/getIgnoreErrors/," Flag to avoid interactive error dialogs during automated testing.\n \n @return true if errors should be ignored\n \n @since 3.0\n"
7101,method,org/eclipse/jface/util/SafeRunnable/setIgnoreErrors/boolean," Flag to avoid interactive error dialogs during automated testing.\n \n @param flag\n            set to true if errors should be ignored\n"
7105,method,org/eclipse/jface/util/SafeRunnable/SafeRunnable/," Creates a new instance of SafeRunnable with a default error message.\n"
7106,method,org/eclipse/jface/util/SafeRunnable/SafeRunnable/String," Creates a new instance of SafeRunnable with the given error message.\n \n @param message\n            the error message to use\n"
7107,class,org/eclipse/jface/util/StatusHandler," A mechanism to handle statuses throughout JFace.\n <p>\n Clients may provide their own implementation to change how statuses are\n handled from within JFace.\n </p>\n \n @see org.eclipse.jface.util.Policy#getStatusHandler()\n @see org.eclipse.jface.util.Policy#setStatusHandler(StatusHandler)\n \n @since 3.4\n"
7110,interface,org/eclipse/jface/util/ILogger," A mechanism to log errors throughout JFace.\n <p>\n Clients may provide their own implementation to change\n how errors are logged from within JFace.\n </p>\n \n @see org.eclipse.jface.util.Policy#getLog()\n @see org.eclipse.jface.util.Policy#setLog(ILogger)\n @since 3.1\n"
7112,interface,org/eclipse/jface/util/ISafeRunnableRunner," Runs a safe runnables.\n <p>\n Clients may provide their own implementation to change\n how safe runnables are run from within JFace.\n </p>\n \n @see SafeRunnable#getRunner()\n @see SafeRunnable#setRunner(ISafeRunnableRunner)\n @see SafeRunnable#run(ISafeRunnable)\n @since 3.1\n"
7116,method,org/eclipse/jface/util/ListenerList/ListenerList/int," Creates a listener list with the given initial capacity.\n \n @param capacity\n            the number of listeners which this list can initially accept\n            without growing its internal representation; must be at least\n            1\n"
7118,method,org/eclipse/jface/util/Util/assertInstance/Object;Class," Verifies that the given object is an instance of the given class.\n \n @param object\n            The object to check; may be <code>null</code>.\n @param c\n            The class which the object should be; must not be\n            <code>null</code>.\n"
7121,method,org/eclipse/jface/util/Util/compare/Comparable;Comparable," Compares to comparable objects -- defending against <code>null</code>.\n \n @param left\n            The left object to compare; may be <code>null</code>.\n @param right\n            The right object to compare; may be <code>null</code>.\n @return The result of the comparison. <code>null</code> is considered\n         to be the least possible value.\n"
7122,method,org/eclipse/jface/util/Util/compare/Comparable[];Comparable[]," Compares two arrays of comparable objects -- accounting for\n <code>null</code>.\n \n @param left\n            The left array to be compared; may be <code>null</code>.\n @param right\n            The right array to be compared; may be <code>null</code>.\n @return The result of the comparison. <code>null</code> is considered\n         to be the least possible value. A shorter array is considered\n         less than a longer array.\n"
7123,method,org/eclipse/jface/util/Util/compare/List;List," Compares two lists -- account for <code>null</code>. The lists must\n contain comparable objects.\n \n @param left\n            The left list to compare; may be <code>null</code>. This\n            list must only contain instances of <code>Comparable</code>.\n @param right\n            The right list to compare; may be <code>null</code>. This\n            list must only contain instances of <code>Comparable</code>.\n @return The result of the comparison. <code>null</code> is considered\n         to be the least possible value. A shorter list is considered less\n         than a longer list.\n"
7124,method,org/eclipse/jface/util/Util/endsWith/Object[];Object[];boolean," Tests whether the first array ends with the second array.\n \n @param left\n            The array to check (larger); may be <code>null</code>.\n @param right\n            The array that should be a subsequence (smaller); may be\n            <code>null</code>.\n @param equals\n            Whether the two array are allowed to be equal.\n @return <code>true</code> if the second array is a subsequence of the\n         array list, and they share end elements.\n"
7125,method,org/eclipse/jface/util/Util/equals/Object;Object," Checks whether the two objects are <code>null</code> -- allowing for\n <code>null</code>.\n \n @param left\n            The left object to compare; may be <code>null</code>.\n @param right\n            The right object to compare; may be <code>null</code>.\n @return <code>true</code> if the two objects are equivalent;\n         <code>false</code> otherwise.\n"
7126,method,org/eclipse/jface/util/Util/equals/Object[];Object[]," Tests whether two arrays of objects are equal to each other. The arrays\n must not be <code>null</code>, but their elements may be\n <code>null</code>.\n \n @param leftArray\n            The left array to compare; may be <code>null</code>, and\n            may be empty and may contain <code>null</code> elements.\n @param rightArray\n            The right array to compare; may be <code>null</code>, and\n            may be empty and may contain <code>null</code> elements.\n @return <code>true</code> if the arrays are equal length and the\n         elements at the same position are equal; <code>false</code>\n         otherwise.\n"
7128,method,org/eclipse/jface/util/Util/hashCode/Object," Provides a hash code for the object -- defending against\n <code>null</code>.\n \n @param object\n            The object for which a hash code is required.\n @return <code>object.hashCode</code> or <code>0</code> if\n         <code>object</code> if <code>null</code>.\n"
7129,method,org/eclipse/jface/util/Util/hashCode/Object[]," Computes the hash code for an array of objects, but with defense against\n <code>null</code>.\n \n @param objects\n            The array of objects for which a hash code is needed; may be\n            <code>null</code>.\n @return The hash code for <code>objects</code>; or <code>0</code> if\n         <code>objects</code> is <code>null</code>.\n"
7130,method,org/eclipse/jface/util/Util/startsWith/Object[];Object[];boolean," Checks whether the second array is a subsequence of the first array, and\n that they share common starting elements.\n \n @param left\n            The first array to compare (large); may be <code>null</code>.\n @param right\n            The second array to compare (small); may be <code>null</code>.\n @param equals\n            Whether it is allowed for the two arrays to be equivalent.\n @return <code>true</code> if the first arrays starts with the second\n         list; <code>false</code> otherwise.\n"
7132,method,org/eclipse/jface/util/Util/translateString/ResourceBundle;String;String," Provides a translation of a particular key from the resource bundle.\n \n @param resourceBundle\n            The key to look up in the resource bundle; should not be\n            <code>null</code>.\n @param key\n            The key to look up in the resource bundle; should not be\n            <code>null</code>.\n @param defaultString\n            The value to return if the resource cannot be found; may be\n            <code>null</code>.\n @return The value of the translated resource at <code>key</code>. If\n         the key cannot be found, then it is simply the\n         <code>defaultString</code>.\n"
7145,field,org/eclipse/jface/util/Util/EMPTY_SORTED_SET," An unmodifiable, empty, sorted set. This value is guaranteed to never\n change and never be <code>null</code>.\n"
7155,class,org/eclipse/jface/util/DelegatingDropAdapter," A <code>DelegatingDropAdapter</code> is a <code>DropTargetListener</code> that \n maintains and delegates to a set of {@link TransferDropTargetListener}s. Each \n <code>TransferDropTargetListener</code> can then be implemented as if it were \n the DropTarget's only <code>DropTargetListener</code>.\n <p>\n On <code>dragEnter</code>, <code>dragOperationChanged</code>, <code>dragOver</code>\n and <code>drop</code>, a <i>current</i> listener is obtained from the set of all \n <code>TransferDropTargetListeners</code>. The current listener is the first listener \n to return <code>true</code> for \n {@link TransferDropTargetListener#isEnabled(DropTargetEvent)}.\n The current listener is forwarded all <code>DropTargetEvents</code> until some other\n listener becomes the current listener, or the drop terminates.\n </p>\n <p>\n After adding all <code>TransferDropTargetListeners</code> to the \n <code>DelegatingDropAdapter</code> the combined set of <code>Transfers</code> should \n be set in the SWT <code>DropTarget</code>. <code>#getTransfers()</code> provides the \n set of <code>Transfer</code> types of all <code>TransferDropTargetListeners</code>. \n </p>\n <p>\n The following example snippet shows a <code>DelegatingDropAdapter</code> with two\n <code>TransferDropTargetListeners</code>. One supports dropping resources and \n demonstrates how a listener can be disabled in the isEnabled method. \n The other listener supports text transfer. \n </p>\n <code><pre>\n		final TreeViewer viewer = new TreeViewer(shell, SWT.NONE);\n 		DelegatingDropAdapter dropAdapter = new DelegatingDropAdapter();\n		dropAdapter.addDropTargetListener(new TransferDropTargetListener() {\n			public Transfer getTransfer() {\n				return ResourceTransfer.getInstance();\n			}\n			public boolean isEnabled(DropTargetEvent event) {\n				// disable drop listener if there is no viewer selection\n				if (viewer.getSelection().isEmpty())\n					return false;\n				return true;\n			}\n			public void dragEnter(DropTargetEvent event) {}\n			public void dragLeave(DropTargetEvent event) {}\n			public void dragOperationChanged(DropTargetEvent event) {}\n			public void dragOver(DropTargetEvent event) {}\n			public void drop(DropTargetEvent event) {\n				if (event.data == null)\n					return;\n				IResource[] resources = (IResource[]) event.data;\n				if (event.detail == DND.DROP_COPY) {\n					// copy resources\n				} else {\n					// move resources\n				}\n					\n			}\n			public void dropAccept(DropTargetEvent event) {}\n		});\n		dropAdapter.addDropTargetListener(new TransferDropTargetListener() {\n			public Transfer getTransfer() {\n				return TextTransfer.getInstance();\n			}\n			public boolean isEnabled(DropTargetEvent event) {\n				return true;\n			}\n			public void dragEnter(DropTargetEvent event) {}\n			public void dragLeave(DropTargetEvent event) {}\n			public void dragOperationChanged(DropTargetEvent event) {}\n			public void dragOver(DropTargetEvent event) {}\n			public void drop(DropTargetEvent event) {\n				if (event.data == null)\n					return;\n				System.out.println(event.data);\n			}\n			public void dropAccept(DropTargetEvent event) {}\n		});		\n		viewer.addDropSupport(DND.DROP_COPY | DND.DROP_MOVE, dropAdapter.getTransfers(), dropAdapter);\n </pre></code>\n @since 3.0\n"
7168,method,org/eclipse/jface/fieldassist/SimpleContentProposalProvider/getProposals/String;int," Return an array of Objects representing the valid content proposals for a\n field. \n \n @param contents\n            the current contents of the field (only consulted if filtering\n            is set to <code>true</code>)\n @param position\n            the current cursor position within the field (ignored)\n @return the array of Objects that represent valid proposals for the field\n         given its current content.\n"
7170,method,org/eclipse/jface/fieldassist/SimpleContentProposalProvider/setFiltering/boolean," Set the boolean that controls whether proposals are filtered according to\n the current field content.\n \n @param filterProposals\n            <code>true</code> if the proposals should be filtered to\n            show only those that match the current contents of the field,\n            and <code>false</code> if the proposals should remain the\n            same, ignoring the field content.\n @since 3.3\n"
7172,class,org/eclipse/jface/fieldassist/FieldDecoration," FieldDecoration is a simple data structure class for specifying a decoration\n for a field. A decoration may be rendered in different ways depending on the\n type of field it is used with.\n \n @see FieldDecorationRegistry\n \n @since 3.2\n"
7174,method,org/eclipse/jface/fieldassist/FieldDecoration/setImage/Image," Set the image shown in the decoration, or <code>null</code> if no image\n is specified. It is up to the caller to update any decorated fields that\n are showing the description in order to display the new image.\n \n @param image\n            the image shown in the decoration. A value of\n            <code>null</code> signifies a blank decoration.\n"
7176,method,org/eclipse/jface/fieldassist/FieldDecoration/setDescription/String," Set the description for the decoration shown when the user hovers over\n the decoration. It is up to the caller to update any decorated fields\n showing the description.\n \n @param description\n            the String description of the decoration. A value of\n            <code>null</code> indicates that no description will be\n            shown.\n"
7177,method,org/eclipse/jface/fieldassist/FieldDecoration/FieldDecoration/Image;String," Create a decoration for a field with the specified image and description\n text.\n \n @param image\n            the image shown in the decoration. A <code>null</code> image\n            will result in a blank decoration, which may be used to\n            reserve space near the field.\n @param description\n            the description shown when the user hovers over the\n            decoration. A <code>null</code> description indicates that\n            there will be no hover for the decoration.\n"
7179,method,org/eclipse/jface/fieldassist/ControlDecoration/addMenuDetectListener/MenuDetectListener," Adds the listener to the collection of listeners who will be notified\n when the platform-specific context menu trigger has occurred, by sending\n it one of the messages defined in the <code>MenuDetectListener</code>\n interface.\n <p>\n The <code>widget</code> field in the SelectionEvent will contain the\n Composite on which the decoration is rendered that received the click.\n The <code>x</code> and <code>y</code> fields will be in coordinates\n relative to the display. The <code>data</code> field will contain the\n decoration that received the event.\n </p>\n \n @param listener\n            the listener which should be notified\n \n @see org.eclipse.swt.events.MenuDetectListener\n @see org.eclipse.swt.events.MenuDetectEvent\n @see #removeMenuDetectListener\n"
7180,method,org/eclipse/jface/fieldassist/ControlDecoration/removeMenuDetectListener/MenuDetectListener," Removes the listener from the collection of listeners who will be\n notified when the platform-specific context menu trigger has occurred.\n \n @param listener\n            the listener which should no longer be notified. This message\n            has no effect if the listener was not previously added to the\n            receiver.\n \n @see org.eclipse.swt.events.MenuDetectListener\n @see #addMenuDetectListener\n"
7181,method,org/eclipse/jface/fieldassist/ControlDecoration/addSelectionListener/SelectionListener," Adds the listener to the collection of listeners who will be notified\n when the decoration is selected, by sending it one of the messages\n defined in the <code>SelectionListener</code> interface.\n <p>\n <code>widgetSelected</code> is called when the decoration is selected\n (by mouse click). <code>widgetDefaultSelected</code> is called when the\n decoration is double-clicked.\n </p>\n <p>\n The <code>widget</code> field in the SelectionEvent will contain the\n Composite on which the decoration is rendered that received the click.\n The <code>x</code> and <code>y</code> fields will be in coordinates\n relative to that widget. The <code>data</code> field will contain the\n decoration that received the event.\n </p>\n \n @param listener\n            the listener which should be notified\n \n @see org.eclipse.swt.events.SelectionListener\n @see org.eclipse.swt.events.SelectionEvent\n @see #removeSelectionListener\n"
7182,method,org/eclipse/jface/fieldassist/ControlDecoration/removeSelectionListener/SelectionListener," Removes the listener from the collection of listeners who will be\n notified when the decoration is selected.\n \n @param listener\n            the listener which should no longer be notified. This message\n            has no effect if the listener was not previously added to the\n            receiver.\n \n @see org.eclipse.swt.events.SelectionListener\n @see #addSelectionListener\n"
7184,method,org/eclipse/jface/fieldassist/ControlDecoration/getControl/," Get the control that is decorated by the receiver.\n \n @return the Control decorated by the receiver. May be <code>null</code>\n         if the control has been uninstalled.\n"
7187,method,org/eclipse/jface/fieldassist/ControlDecoration/show/," Show the control decoration. This message has no effect if the decoration\n is already showing. If {@link #setShowOnlyOnFocus(boolean)} is set to\n <code>true</code>, the decoration will only be shown if the control\n has focus.\n"
7189,method,org/eclipse/jface/fieldassist/ControlDecoration/getDescriptionText/," Get the description text that may be shown in a hover for this\n decoration.\n \n @return the text to be shown as a description for the decoration, or\n         <code>null</code> if none has been set.\n"
7192,method,org/eclipse/jface/fieldassist/ControlDecoration/setImage/Image," Set the image shown in this control decoration. Update the rendered\n decoration.\n \n @param image\n            the image to be shown adjacent to the control. Should never be\n            <code>null</code>.\n"
7193,method,org/eclipse/jface/fieldassist/ControlDecoration/getShowOnlyOnFocus/," Get the boolean that controls whether the decoration is shown only when\n the control has focus. The default value of this setting is\n <code>false</code>.\n \n @return <code>true</code> if the decoration should only be shown when\n         the control has focus, and <code>false</code> if it should\n         always be shown. Note that if the control is not capable of\n         receiving focus (<code>SWT.NO_FOCUS</code>), then the\n         decoration will never show when this value is <code>true</code>.\n"
7194,method,org/eclipse/jface/fieldassist/ControlDecoration/setShowOnlyOnFocus/boolean," Set the boolean that controls whether the decoration is shown only when\n the control has focus. The default value of this setting is\n <code>false</code>.\n \n @param showOnlyOnFocus\n            <code>true</code> if the decoration should only be shown\n            when the control has focus, and <code>false</code> if it\n            should always be shown. Note that if the control is not\n            capable of receiving focus (<code>SWT.NO_FOCUS</code>),\n            then the decoration will never show when this value is\n            <code>true</code>.\n"
7195,method,org/eclipse/jface/fieldassist/ControlDecoration/getShowHover/," Get the boolean that controls whether the decoration's description text\n should be shown in a hover when the user hovers over the decoration. The\n default value of this setting is <code>true</code>.\n \n @return <code>true</code> if a hover popup containing the decoration's\n         description text should be shown when the user hovers over the\n         decoration, and <code>false</code> if a hover should not be\n         shown.\n"
7196,method,org/eclipse/jface/fieldassist/ControlDecoration/setShowHover/boolean," Set the boolean that controls whether the decoration's description text\n should be shown in a hover when the user hovers over the decoration. The\n default value of this setting is <code>true</code>.\n \n @param showHover\n            <code>true</code> if a hover popup containing the\n            decoration's description text should be shown when the user\n            hovers over the decoration, and <code>false</code> if a\n            hover should not be shown.\n"
7197,method,org/eclipse/jface/fieldassist/ControlDecoration/getMarginWidth/," Get the margin width in pixels that should be used between the decorator\n and the horizontal edge of the control. The default value of this setting\n is <code>0</code>.\n \n @return the number of pixels that should be reserved between the\n         horizontal edge of the control and the adjacent edge of the\n         decoration.\n"
7198,method,org/eclipse/jface/fieldassist/ControlDecoration/setMarginWidth/int," Set the margin width in pixels that should be used between the decorator\n and the horizontal edge of the control. The default value of this setting\n is <code>0</code>.\n \n @param marginWidth\n            the number of pixels that should be reserved between the\n            horizontal edge of the control and the adjacent edge of the\n            decoration.\n"
7200,method,org/eclipse/jface/fieldassist/ControlDecoration/getDecorationRectangle/Control," Return the rectangle in which the decoration should be rendered, in\n coordinates relative to the specified control. If the specified control\n is null, return the rectangle in display coordinates.\n \n @param targetControl\n            the control whose coordinates should be used\n @return the rectangle in which the decoration should be rendered\n"
7201,method,org/eclipse/jface/fieldassist/ControlDecoration/ControlDecoration/Control;int," Construct a ControlDecoration for decorating the specified control at the\n specified position relative to the control. Render the decoration on top\n of any Control that happens to appear at the specified location.\n <p>\n SWT constants are used to specify the position of the decoration relative\n to the control. The position should include style bits describing both\n the vertical and horizontal orientation. <code>SWT.LEFT</code> and\n <code>SWT.RIGHT</code> describe the horizontal placement of the\n decoration relative to the control, and the constants\n <code>SWT.TOP</code>, <code>SWT.CENTER</code>, and\n <code>SWT.BOTTOM</code> describe the vertical alignment of the\n decoration relative to the control. Decorations always appear on either\n the left or right side of the control, never above or below it. For\n example, a decoration appearing on the left side of the field, at the\n top, is specified as SWT.LEFT | SWT.TOP. If no position style bits are\n specified, the control decoration will be positioned to the left and\n center of the control (<code>SWT.LEFT | SWT.CENTER</code>).\n </p>\n \n @param control\n            the control to be decorated\n @param position\n            bit-wise or of position constants (<code>SWT.TOP</code>,\n            <code>SWT.BOTTOM</code>, <code>SWT.LEFT</code>,\n            <code>SWT.RIGHT</code>, and <code>SWT.CENTER</code>).\n"
7202,method,org/eclipse/jface/fieldassist/ControlDecoration/ControlDecoration/Control;int;Composite," Construct a ControlDecoration for decorating the specified control at the\n specified position relative to the control. Render the decoration only on\n the specified Composite or its children. The decoration will be clipped\n if it does not appear within the visible bounds of the composite or its\n child composites.\n <p>\n SWT constants are used to specify the position of the decoration relative\n to the control. The position should include style bits describing both\n the vertical and horizontal orientation. <code>SWT.LEFT</code> and\n <code>SWT.RIGHT</code> describe the horizontal placement of the\n decoration relative to the control, and the constants\n <code>SWT.TOP</code>, <code>SWT.CENTER</code>, and\n <code>SWT.BOTTOM</code> describe the vertical alignment of the\n decoration relative to the control. Decorations always appear on either\n the left or right side of the control, never above or below it. For\n example, a decoration appearing on the left side of the field, at the\n top, is specified as SWT.LEFT | SWT.TOP. If no position style bits are\n specified, the control decoration will be positioned to the left and\n center of the control (<code>SWT.LEFT | SWT.CENTER</code>).\n </p>\n \n @param control\n            the control to be decorated\n @param position\n            bit-wise or of position constants (<code>SWT.TOP</code>,\n            <code>SWT.BOTTOM</code>, <code>SWT.LEFT</code>,\n            <code>SWT.RIGHT</code>, and <code>SWT.CENTER</code>).\n @param composite\n            The SWT composite within which the decoration should be\n            rendered. The decoration will be clipped to this composite,\n            but it may be rendered on a child of the composite. The\n            decoration will not be visible if the specified composite or\n            its child composites are not visible in the space relative to\n            the control, where the decoration is to be rendered. If this\n            value is <code>null</code>, then the decoration will be\n            rendered on whichever composite (or composites) are located in\n            the specified position.\n"
7205,interface,org/eclipse/jface/fieldassist/IContentProposalListener2," This interface is used to listen to additional notifications from a\n {@link ContentProposalAdapter}.\n \n @since 3.3\n"
7219,method,org/eclipse/jface/fieldassist/DecoratedField/addFieldDecoration/FieldDecoration;int;boolean," Adds an image decoration to the field.\n \n @param decoration\n            A FieldDecoration describing the image and description for the\n            decoration\n \n @param position\n            The SWT constant indicating the position of the decoration\n            relative to the field's control. The position should include\n            style bits describing both the vertical and horizontal\n            orientation. <code>SWT.LEFT</code> and\n            <code>SWT.RIGHT</code> describe the horizontal placement of\n            the decoration relative to the field, and the constants\n            <code>SWT.TOP</code> and <code>SWT.BOTTOM</code> describe\n            the vertical alignment of the decoration relative to the\n            field. Decorations always appear on either horizontal side of\n            the field, never above or below it. For example, a decoration\n            appearing on the left side of the field, at the top, is\n            specified as SWT.LEFT | SWT.TOP. If an image decoration\n            already exists in the specified position, it will be replaced\n            by the one specified.\n @param showOnFocus\n            <code>true</code> if the decoration should only be shown\n            when the associated control has focus, <code>false</code> if\n            it should always be shown.\n \n"
7221,method,org/eclipse/jface/fieldassist/DecoratedField/getLayoutControl/," Get the control that represents the decorated field. This composite\n should be used to lay out the field within its parent.\n \n @return the Control that should be layed out in the field's parent's\n         layout. This is typically not the control itself, since\n         additional controls are used to represent the decorations.\n"
7222,method,org/eclipse/jface/fieldassist/DecoratedField/showHoverText/String," Show the specified text using the same hover dialog as is used to show\n decorator descriptions. Normally, a decoration's description text will be\n shown in an info hover over the field's control whenever the mouse hovers\n over the decoration. This method can be used to show a decoration's\n description text at other times (such as when the control receives\n focus), or to show other text associated with the field.\n \n <p>\n If there is currently a hover visible, the hover's text will be replaced\n with the specified text.\n \n @param text\n            the text to be shown in the info hover, or <code>null</code>\n            if no text should be shown.\n"
7226,method,org/eclipse/jface/fieldassist/DecoratedField/updateDecoration/FieldDecoration," Update the specified decoration. This message should be used if the image\n or description in the decoration have changed. This message has no\n immediate effect if the decoration is not visible, and no effect at all\n if the decoration was not previously added to the field.\n \n @param decoration\n            the decoration to be hidden.\n"
7227,method,org/eclipse/jface/fieldassist/DecoratedField/setUseMaximumDecorationWidth/boolean," Set a boolean that indicates whether the receiver should use the\n decoration registry's maximum decoration width when allocating space for\n decorations. The default value is <code>true</code>. Using the maximum\n decoration width is useful so that decorated fields on the same dialog\n that have different decoration widths will all align. This also allows\n client dialogs to align non-decorated fields with decorated fields by\n consulting the maximum decoration width.\n </p>\n <p>\n Clients may wish to set this value to <code>false</code> in cases where\n space usage is more important than alignment of fields. This value must\n be set before the decorations are added in order to ensure proper\n alignment.\n </p>\n \n @param useMaximumWidth\n            <code>true</code> if the maximum decoration width should be\n            used as the size for all decorations, <code>false</code> if\n            only the decoration size should be used.\n \n @see FieldDecorationRegistry#getMaximumDecorationWidth()\n"
7228,method,org/eclipse/jface/fieldassist/DecoratedField/DecoratedField/Composite;int;IControlCreator," Construct a decorated field which is parented by the specified composite\n and has the given style bits. Use the controlCreator to create the\n specific kind of control that is decorated inside the field.\n \n @param parent\n            the parent of the decorated field.\n @param style\n            the desired style bits for the field.\n @param controlCreator\n            the IControlCreator used to specify the specific kind of\n            control that is to be decorated.\n \n @see IControlCreator\n"
7233,method,org/eclipse/jface/fieldassist/AutoCompleteField/AutoCompleteField/Control;IControlContentAdapter;String[]," Construct an AutoComplete field on the specified control, whose\n completions are characterized by the specified array of Strings.\n \n @param control\n            the control for which autocomplete is desired. May not be\n            <code>null</code>.\n @param controlContentAdapter\n            the <code>IControlContentAdapter</code> used to obtain and\n            update the control's contents. May not be <code>null</code>.\n @param proposals\n            the array of Strings representing valid content proposals for\n            the field.\n"
7235,method,org/eclipse/jface/fieldassist/IControlContentAdapter/setControlContents/Control;String;int," Set the contents of the specified control to the specified text. Must not\n be <code>null</code>.\n \n @param control\n            the control whose contents are to be set (replaced).\n @param contents\n            the String specifying the new control content.\n @param cursorPosition\n            the zero-based index representing the desired cursor position\n            in the control's contents after the contents are set.\n"
7239,method,org/eclipse/jface/fieldassist/IControlContentAdapter/getInsertionBounds/Control," Get the bounds (in pixels) of the insertion point for the control\n content. This is a rectangle, in coordinates relative to the control,\n where the insertion point is displayed. If the implementer does not have\n an insertion point, or cannot determine the location of the insertion\n point, it is appropriate to return the bounds of the entire control. This\n value may be used to position a content proposal popup.\n \n @param control\n            the control whose offset is to be retrieved.\n @return the pixel width representing the distance between the edge of the\n         control and the insertion point.\n"
7246,method,org/eclipse/jface/fieldassist/FieldAssistColors/getRequiredFieldBackgroundColor/Control," Return the color that should be used for the background of a control to\n indicate that the control is a required field and does not have content.\n <p>\n This color is managed by FieldAssistResources and should never be\n disposed by clients.\n \n @param control\n            the control on which the background color will be used.\n @return the color used to indicate that a field is required.\n"
7250,method,org/eclipse/jface/fieldassist/IContentProposal/getCursorPosition/," Return the integer position within the contents that the cursor should be\n placed after the proposal is accepted.\n \n @return the zero-based index position within the contents where the\n         cursor should be placed after the proposal is accepted.\n"
7253,class,org/eclipse/jface/fieldassist/FieldDecorationRegistry," FieldDecorationRegistry is a common registry used to define shared field\n decorations within an application. Unlike resource registries, the\n FieldDecorationRegistry does not perform any lifecycle management of the\n decorations.\n </p>\n <p>\n Clients may specify images for the decorations in several different ways.\n Images may be described by their image id in a specified\n {@link ImageRegistry}. In this case, the life cycle of the image is managed\n by the image registry, and the decoration registry will not attempt to obtain\n an image from the image registry until the decoration is actually requested.\n In cases where the client has access to an already-created image, the image\n itself can be specified when registering the decoration. In this case, the\n life cycle should be managed by the specifying client.\n </p>\n \n @see FieldDecoration\n @see ImageRegistry\n \n @since 3.2\n"
7258,method,org/eclipse/jface/fieldassist/FieldDecorationRegistry/registerFieldDecoration/String;String;Image," Registers a field decoration using the specified id. The lifecyle of the\n supplied image should be managed by the client. That is, it will never be\n disposed by this registry and the decoration should be removed from the\n registry if the image is ever disposed elsewhere.\n \n @param id\n            the String id used to identify and access the decoration.\n @param description\n            the String description to be used in the decoration, or\n            <code>null</code> if the decoration has no description.\n @param image\n            the image to be used in the decoration\n"
7260,method,org/eclipse/jface/fieldassist/FieldDecorationRegistry/unregisterFieldDecoration/String," Unregisters the field decoration with the specified id. No lifecycle\n management is performed on the decoration's image. This message has no\n effect if no field decoration with the specified id was previously\n registered.\n </p>\n <p>\n This method need not be called if the registered decoration's image is\n managed in an image registry. In that case, leaving the decoration in the\n registry will do no harm since the image will remain valid and will be\n properly disposed when the application is shut down. This method should\n be used in cases where the caller intends to dispose of the image\n referred to by the decoration, or otherwise determines that the\n decoration should no longer be used.\n \n @param id\n            the String id of the decoration to be unregistered.\n"
7263,field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_CONTENT_PROPOSAL," Decoration id for the decoration that should be used to cue the user that\n content proposals are available.\n"
7264,field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_REQUIRED," Decoration id for the decoration that should be used to cue the user that\n a field is required.\n"
7265,field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_ERROR," Decoration id for the decoration that should be used to cue the user that\n a field has an error.\n"
7266,field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_WARNING," Decoration id for the decoration that should be used to cue the user that\n a field has a warning.\n"
7267,field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_INFORMATION," Decoration id for the decoration that should be used to cue the user that\n a field has additional information.\n \n @since 3.3\n"
7268,field,org/eclipse/jface/fieldassist/FieldDecorationRegistry/DEC_ERROR_QUICKFIX," Decoration id for the decoration that should be used to cue the user that\n a field has an error with quick fix available.\n \n @since 3.3\n"
7273,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setLabelProvider/ILabelProvider," Set the label provider that is used to show proposals. The lifecycle of\n the specified label provider is not managed by this adapter. Clients must\n dispose the label provider when it is no longer needed.\n \n @param labelProvider\n            the (@link ILabelProvider} used to show proposals.\n"
7274,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getContentProposalProvider/," Return the proposal provider that provides content proposals given the\n current content of the field. A value of <code>null</code> indicates\n that there are no content proposals available for the field.\n \n @return the {@link IContentProposalProvider} used to show proposals. May\n         be <code>null</code>.\n"
7276,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getAutoActivationCharacters/," Return the array of characters on which the popup is autoactivated.\n \n @return An array of characters that trigger auto-activation of content\n         proposal. If specified, these characters will trigger\n         auto-activation of the proposal popup, regardless of whether an\n         explicit invocation keyStroke was specified. If this parameter is\n         <code>null</code>, then only a specified keyStroke will invoke\n         content proposal. If this value is <code>null</code> and the\n         keyStroke value is <code>null</code>, then all alphanumeric\n         characters will auto-activate content proposal.\n"
7278,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getAutoActivationDelay/," Set the delay, in milliseconds, used before any autoactivation is\n triggered.\n \n @return the time in milliseconds that will pass before a popup is\n         automatically opened\n"
7279,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setAutoActivationDelay/int," Set the delay, in milliseconds, used before autoactivation is triggered.\n \n @param delay\n            the time in milliseconds that will pass before a popup is\n            automatically opened\n"
7280,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getProposalAcceptanceStyle/," Get the integer style that indicates how an accepted proposal affects the\n control's content.\n \n @return a constant indicating how an accepted proposal should affect the\n         control's content. Should be one of <code>PROPOSAL_INSERT</code>,\n         <code>PROPOSAL_REPLACE</code>, or <code>PROPOSAL_IGNORE</code>.\n         (Default is <code>PROPOSAL_INSERT</code>).\n"
7281,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setProposalAcceptanceStyle/int," Set the integer style that indicates how an accepted proposal affects the\n control's content.\n \n @param acceptance\n            a constant indicating how an accepted proposal should affect\n            the control's content. Should be one of\n            <code>PROPOSAL_INSERT</code>, <code>PROPOSAL_REPLACE</code>,\n            or <code>PROPOSAL_IGNORE</code>\n"
7285,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setPopupSize/Point," Set the size, in pixels, of the content proposal popup. This size will be\n used the next time the content proposal popup is opened.\n \n @param size\n            a Point specifying the desired width and height, in pixels, of\n            the content proposal popup.\n"
7286,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/getPropagateKeys/," Get the boolean that indicates whether key events (including\n auto-activation characters) received by the content proposal popup should\n also be propagated to the adapted control when the proposal popup is\n open.\n \n @return a boolean that indicates whether key events (including\n         auto-activation characters) should be propagated to the adapted\n         control when the proposal popup is open. Default value is\n         <code>true</code>.\n"
7287,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/setPropagateKeys/boolean," Set the boolean that indicates whether key events (including\n auto-activation characters) received by the content proposal popup should\n also be propagated to the adapted control when the proposal popup is\n open.\n \n @param propagateKeys\n            a boolean that indicates whether key events (including\n            auto-activation characters) should be propagated to the\n            adapted control when the proposal popup is open.\n"
7290,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/addContentProposalListener/IContentProposalListener," Add the specified listener to the list of content proposal listeners that\n are notified when content proposals are chosen.\n </p>\n \n @param listener\n            the IContentProposalListener to be added as a listener. Must\n            not be <code>null</code>. If an attempt is made to register\n            an instance which is already registered with this instance,\n            this method has no effect.\n \n @see org.eclipse.jface.fieldassist.IContentProposalListener\n"
7291,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/removeContentProposalListener/IContentProposalListener," Removes the specified listener from the list of content proposal\n listeners that are notified when content proposals are chosen.\n </p>\n \n @param listener\n            the IContentProposalListener to be removed as a listener. Must\n            not be <code>null</code>. If the listener has not already\n            been registered, this method has no effect.\n \n @since 3.3\n @see org.eclipse.jface.fieldassist.IContentProposalListener\n"
7292,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/addContentProposalListener/IContentProposalListener2," Add the specified listener to the list of content proposal listeners that\n are notified when a content proposal popup is opened or closed.\n </p>\n \n @param listener\n            the IContentProposalListener2 to be added as a listener. Must\n            not be <code>null</code>. If an attempt is made to register\n            an instance which is already registered with this instance,\n            this method has no effect.\n \n @since 3.3\n @see org.eclipse.jface.fieldassist.IContentProposalListener2\n"
7293,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/removeContentProposalListener/IContentProposalListener2," Remove the specified listener from the list of content proposal listeners\n that are notified when a content proposal popup is opened or closed.\n </p>\n \n @param listener\n            the IContentProposalListener2 to be removed as a listener.\n            Must not be <code>null</code>. If the listener has not\n            already been registered, this method has no effect.\n \n @since 3.3\n @see org.eclipse.jface.fieldassist.IContentProposalListener2\n"
7294,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/openProposalPopup/," Open the proposal popup and display the proposals provided by the\n proposal provider. This method returns immediately. That is, it does not\n wait for a proposal to be selected. This method is used by subclasses to\n explicitly invoke the opening of the popup. If there are no proposals to\n show, the popup will not open and a beep will be sounded.\n"
7296,method,org/eclipse/jface/fieldassist/ContentProposalAdapter/hasProposalPopupFocus/," Returns whether the content proposal popup has the focus. This includes\n both the primary popup and any secondary info popup that may have focus.\n \n @return <code>true</code> if the proposal popup or its secondary info\n         popup has the focus\n @since 3.4\n"
7298,field,org/eclipse/jface/fieldassist/ContentProposalAdapter/DEBUG," Flag that controls the printing of debug info.\n"
7299,field,org/eclipse/jface/fieldassist/ContentProposalAdapter/PROPOSAL_INSERT," Indicates that a chosen proposal should be inserted into the field.\n"
7300,field,org/eclipse/jface/fieldassist/ContentProposalAdapter/PROPOSAL_REPLACE," Indicates that a chosen proposal should replace the entire contents of\n the field.\n"
7301,field,org/eclipse/jface/fieldassist/ContentProposalAdapter/PROPOSAL_IGNORE," Indicates that the contents of the control should not be modified when a\n proposal is chosen. This is typically used when a client needs more\n specialized behavior when a proposal is chosen. In this case, clients\n typically register an IContentProposalListener so that they are notified\n when a proposal is chosen.\n"
7302,field,org/eclipse/jface/fieldassist/ContentProposalAdapter/FILTER_NONE," Indicates that there should be no filter applied as keys are typed in the\n popup.\n"
7304,field,org/eclipse/jface/fieldassist/ContentProposalAdapter/FILTER_CUMULATIVE," Indicates that a cumulative filter applies as keys are typed in the\n popup. That is, each character typed will be added to the filter.\n \n @deprecated As of 3.4, filtering that is sensitive to changes in the\n             control content should be performed by the supplied\n             {@link IContentProposalProvider}, such as that performed by\n             {@link SimpleContentProposalProvider}\n"
7317,class,org/eclipse/jface/fieldassist/TextControlCreator," An {@link IControlCreator} for SWT Text controls. This is a convenience class\n for creating text controls to be supplied to a decorated field.\n \n @since 3.2\n @deprecated As of 3.3, clients should use {@link ControlDecoration} instead\n             of {@link DecoratedField}.\n \n"
7324,interface,org/apache/commons/collections/Transformer," Defines a functor interface implemented by classes that transform one\n object into another.\n <p>\n A <code>Transformer</code> converts the input object to the output object.\n The input object should be left unchanged.\n Transformers are typically used for type conversions, or extracting data\n from an object.\n <p>\n Standard implementations of common transformers are provided by\n {@link TransformerUtils}. These include method invokation, returning a constant,\n cloning and returning the string value.\n\n @param <I> the input type to the transformer\n @param <O> the output type from the transformer\n\n @since Commons Collections 1.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author James Strachan\n @author Stephen Colebourne\n"
7326,class,org/apache/commons/collections/ClosureUtils," <code>ClosureUtils</code> provides reference implementations and utilities\n for the Closure functor interface. The supplied closures are:\n <ul>\n <li>Invoker - invokes a method on the input object\n <li>For - repeatedly calls a closure for a fixed number of times\n <li>While - repeatedly calls a closure while a predicate is true\n <li>DoWhile - repeatedly calls a closure while a predicate is true\n <li>Chained - chains two or more closures together\n <li>Switch - calls one closure based on one or more predicates\n <li>SwitchMap - calls one closure looked up from a Map\n <li>Transformer - wraps a Transformer as a Closure\n <li>NOP - does nothing\n <li>Exception - always throws an exception\n </ul>\n All the supplied closures are Serializable.\n\n @since Commons Collections 3.0\n @version $Revision: 815034 $ $Date: 2009-09-15 07:54:39 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n @author Matt Benson\n"
7330,method,org/apache/commons/collections/ClosureUtils/forClosure/int;Closure," Creates a Closure that will call the closure <code>count</code> times.\n <p>\n A null closure or zero count returns the <code>NOPClosure</code>.\n\n @see org.apache.commons.collections.functors.ForClosure\n \n @param count  the number of times to loop\n @param closure  the closure to call repeatedly\n @return the <code>for</code> closure\n"
7331,method,org/apache/commons/collections/ClosureUtils/whileClosure/Predicate;Closure," Creates a Closure that will call the closure repeatedly until the \n predicate returns false.\n\n @see org.apache.commons.collections.functors.WhileClosure\n \n @param predicate  the predicate to use as an end of loop test, not null\n @param closure  the closure to call repeatedly, not null\n @return the <code>while</code> closure\n @throws IllegalArgumentException if either argument is null\n"
7333,method,org/apache/commons/collections/ClosureUtils/invokerClosure/String," Creates a Closure that will invoke a specific method on the closure's\n input object by reflection.\n\n @see org.apache.commons.collections.functors.InvokerTransformer\n @see org.apache.commons.collections.functors.TransformerClosure\n \n @param methodName  the name of the method\n @return the <code>invoker</code> closure\n @throws IllegalArgumentException if the method name is null\n"
7334,method,org/apache/commons/collections/ClosureUtils/invokerClosure/String;Class[];Object[]," Creates a Closure that will invoke a specific method on the closure's\n input object by reflection.\n\n @see org.apache.commons.collections.functors.InvokerTransformer\n @see org.apache.commons.collections.functors.TransformerClosure\n \n @param methodName  the name of the method\n @param paramTypes  the parameter types\n @param args  the arguments\n @return the <code>invoker</code> closure\n @throws IllegalArgumentException if the method name is null\n @throws IllegalArgumentException if the paramTypes and args don't match\n"
7335,method,org/apache/commons/collections/ClosureUtils/chainedClosure/Closure;Closure," Create a new Closure that calls two Closures, passing the result of\n the first into the second.\n \n @see org.apache.commons.collections.functors.ChainedClosure\n \n @param closure1  the first closure\n @param closure2  the second closure\n @return the <code>chained</code> closure\n @throws IllegalArgumentException if either closure is null\n"
7336,method,org/apache/commons/collections/ClosureUtils/chainedClosure/Closure[]," Create a new Closure that calls each closure in turn, passing the \n result into the next closure.\n \n @see org.apache.commons.collections.functors.ChainedClosure\n \n @param closures  an array of closures to chain\n @return the <code>chained</code> closure\n @throws IllegalArgumentException if the closures array is null\n @throws IllegalArgumentException if any closure in the array is null\n"
7337,method,org/apache/commons/collections/ClosureUtils/chainedClosure/Collection," Create a new Closure that calls each closure in turn, passing the \n result into the next closure. The ordering is that of the iterator()\n method on the collection.\n \n @see org.apache.commons.collections.functors.ChainedClosure\n \n @param closures  a collection of closures to chain\n @return the <code>chained</code> closure\n @throws IllegalArgumentException if the closures collection is null\n @throws IllegalArgumentException if the closures collection is empty\n @throws IllegalArgumentException if any closure in the collection is null\n"
7338,method,org/apache/commons/collections/ClosureUtils/ifClosure/Predicate;Closure," Create a new Closure that calls another closure based on the\n result of the specified predicate.\n \n @see org.apache.commons.collections.functors.IfClosure\n \n @param predicate  the validating predicate\n @param trueClosure  the closure called if the predicate is true\n @return the <code>if</code> closure\n @throws IllegalArgumentException if the predicate is null\n @throws IllegalArgumentException if the closure is null\n @since Commons Collections 3.2\n"
7339,method,org/apache/commons/collections/ClosureUtils/ifClosure/Predicate;Closure;Closure," Create a new Closure that calls one of two closures depending \n on the specified predicate.\n \n @see org.apache.commons.collections.functors.IfClosure\n \n @param predicate  the predicate to switch on\n @param trueClosure  the closure called if the predicate is true\n @param falseClosure  the closure called if the predicate is false\n @return the <code>switch</code> closure\n @throws IllegalArgumentException if the predicate is null\n @throws IllegalArgumentException if either closure is null\n"
7340,method,org/apache/commons/collections/ClosureUtils/switchClosure/Predicate[];Closure[]," Create a new Closure that calls one of the closures depending \n on the predicates.\n <p>\n The closure at array location 0 is called if the predicate at array \n location 0 returned true. Each predicate is evaluated\n until one returns true.\n \n @see org.apache.commons.collections.functors.SwitchClosure\n \n @param predicates  an array of predicates to check, not null\n @param closures  an array of closures to call, not null\n @return the <code>switch</code> closure\n @throws IllegalArgumentException if the either array is null\n @throws IllegalArgumentException if any element in the arrays is null\n @throws IllegalArgumentException if the arrays are different sizes\n"
7341,method,org/apache/commons/collections/ClosureUtils/switchClosure/Predicate[];Closure[];Closure," Create a new Closure that calls one of the closures depending \n on the predicates.\n <p>\n The closure at array location 0 is called if the predicate at array\n location 0 returned true. Each predicate is evaluated\n until one returns true. If no predicates evaluate to true, the default\n closure is called.\n \n @see org.apache.commons.collections.functors.SwitchClosure\n \n @param predicates  an array of predicates to check, not null\n @param closures  an array of closures to call, not null\n @param defaultClosure  the default to call if no predicate matches\n @return the <code>switch</code> closure\n @throws IllegalArgumentException if the either array is null\n @throws IllegalArgumentException if any element in the arrays is null\n @throws IllegalArgumentException if the arrays are different sizes\n"
7342,method,org/apache/commons/collections/ClosureUtils/switchClosure/Map," Create a new Closure that calls one of the closures depending \n on the predicates. \n <p>\n The Map consists of Predicate keys and Closure values. A closure \n is called if its matching predicate returns true. Each predicate is evaluated\n until one returns true. If no predicates evaluate to true, the default\n closure is called. The default closure is set in the map with a \n null key. The ordering is that of the iterator() method on the entryset \n collection of the map.\n \n @see org.apache.commons.collections.functors.SwitchClosure\n \n @param predicatesAndClosures  a map of predicates to closures\n @return the <code>switch</code> closure\n @throws IllegalArgumentException if the map is null\n @throws IllegalArgumentException if the map is empty\n @throws IllegalArgumentException if any closure in the map is null\n @throws ClassCastException  if the map elements are of the wrong type\n"
7343,method,org/apache/commons/collections/ClosureUtils/switchMapClosure/Map," Create a new Closure that uses the input object as a key to find the\n closure to call. \n <p>\n The Map consists of object keys and Closure values. A closure \n is called if the input object equals the key. If there is no match, the\n default closure is called. The default closure is set in the map\n using a null key.\n \n @see org.apache.commons.collections.functors.SwitchClosure\n \n @param objectsAndClosures  a map of objects to closures\n @return the closure\n @throws IllegalArgumentException if the map is null\n @throws IllegalArgumentException if the map is empty\n @throws IllegalArgumentException if any closure in the map is null\n"
7347,method,org/apache/commons/collections/SortedBidiMap/valueComparator/," Get the comparator used for the values in the value-to-key map aspect.\n @return Comparator<? super V>\n"
7389,method,org/apache/commons/collections/MapUtils/toProperties/Map," Gets a new Properties object initialised with the values from a Map.\n A null input will return an empty properties object.\n\n @param map  the map to convert to a Properties object, may not be null\n @return the properties object\n"
7390,method,org/apache/commons/collections/MapUtils/toMap/ResourceBundle," Creates a new HashMap using data copied from a ResourceBundle.\n\n @param resourceBundle  the resource bundle to convert, may not be null\n @return the hashmap containing the data\n @throws NullPointerException if the bundle is null\n"
7396,method,org/apache/commons/collections/MapUtils/isEmpty/Map," Null-safe check if the specified map is empty.\n <p>\n Null returns true.\n\n @param map  the map to check, may be null\n @return true if empty or null\n @since Commons Collections 3.2\n"
7397,method,org/apache/commons/collections/MapUtils/isNotEmpty/Map," Null-safe check if the specified map is not empty.\n <p>\n Null returns false.\n\n @param map  the map to check, may be null\n @return true if non-null and non-empty\n @since Commons Collections 3.2\n"
7418,method,org/apache/commons/collections/MapUtils/iterableMap/Map," Get the specified {@link Map} as an {@link IterableMap}.\n @param <K>\n @param <V>\n @param map to wrap if necessary.\n @return IterableMap<K, V>\n @since Commons Collections 5\n @TODO fix version\n"
7419,method,org/apache/commons/collections/MapUtils/iterableSortedMap/SortedMap," Get the specified {@link SortedMap} as an {@link IterableSortedMap}.\n @param <K>\n @param <V>\n @param sortedMap to wrap if necessary\n @return {@link IterableSortedMap}<K, V>\n @since Commons Collections 5\n @TODO fix version\n"
7426,interface,org/apache/commons/collections/Factory," Defines a functor interface implemented by classes that create objects.\n <p>\n A <code>Factory</code> creates an object without using an input parameter.\n If an input parameter is required, then {@link Transformer} is more appropriate.\n <p>\n Standard implementations of common factories are provided by\n {@link FactoryUtils}. These include factories that return a constant,\n a copy of a prototype or a new instance.\n\n @param <T> the type that the factory creates\n\n @since Commons Collections 2.1\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Arron Bates\n @author Stephen Colebourne\n"
7451,method,org/apache/commons/collections/IteratorUtils/chainedIterator/Iterator;Iterator," Gets an iterator that iterates through two {@link Iterator}s\n one after another.\n\n @param iterator1  the first iterators to use, not null\n @param iterator2  the first iterators to use, not null\n @return a combination iterator over the iterators\n @throws NullPointerException if either iterator is null\n"
7452,method,org/apache/commons/collections/IteratorUtils/chainedIterator/Iterator[]," Gets an iterator that iterates through an array of {@link Iterator}s\n one after another.\n\n @param iterators  the iterators to use, not null or empty or contain nulls\n @return a combination iterator over the iterators\n @throws NullPointerException if iterators array is null or contains a null\n"
7453,method,org/apache/commons/collections/IteratorUtils/chainedIterator/Collection," Gets an iterator that iterates through a collections of {@link Iterator}s\n one after another.\n\n @param iterators  the iterators to use, not null or empty or contain nulls\n @return a combination iterator over the iterators\n @throws NullPointerException if iterators collection is null or contains a null\n @throws ClassCastException if the iterators collection contains the wrong object type\n"
7454,method,org/apache/commons/collections/IteratorUtils/collatedIterator/Comparator;Iterator;Iterator," Gets an iterator that provides an ordered iteration over the elements\n contained in a collection of ordered {@link Iterator}s.\n <p>\n Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n the {@link Iterator#next()} method will return the lesser of\n <code>A.next()</code> and <code>B.next()</code>.\n <p>\n The comparator is optional. If null is specified then natural order is used.\n\n @param comparator  the comparator to use, may be null for natural order\n @param iterator1  the first iterators to use, not null\n @param iterator2  the first iterators to use, not null\n @return a combination iterator over the iterators\n @throws NullPointerException if either iterator is null\n"
7455,method,org/apache/commons/collections/IteratorUtils/collatedIterator/Comparator;Iterator[]," Gets an iterator that provides an ordered iteration over the elements\n contained in an array of {@link Iterator}s.\n <p>\n Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n the {@link Iterator#next()} method will return the lesser of\n <code>A.next()</code> and <code>B.next()</code> and so on.\n <p>\n The comparator is optional. If null is specified then natural order is used.\n\n @param comparator  the comparator to use, may be null for natural order\n @param iterators  the iterators to use, not null or empty or contain nulls\n @return a combination iterator over the iterators\n @throws NullPointerException if iterators array is null or contains a null\n"
7456,method,org/apache/commons/collections/IteratorUtils/collatedIterator/Comparator;Collection," Gets an iterator that provides an ordered iteration over the elements\n contained in a collection of {@link Iterator}s.\n <p>\n Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n the {@link Iterator#next()} method will return the lesser of\n <code>A.next()</code> and <code>B.next()</code> and so on.\n <p>\n The comparator is optional. If null is specified then natural order is used.\n\n @param comparator  the comparator to use, may be null for natural order\n @param iterators  the iterators to use, not null or empty or contain nulls\n @return a combination iterator over the iterators\n @throws NullPointerException if iterators collection is null or contains a null\n @throws ClassCastException if the iterators collection contains the wrong object type\n"
7481,method,org/apache/commons/collections/MapIterator/getKey/," Gets the current key, which is the key returned by the last call\n to <code>next()</code>.\n\n @return the current key\n @throws IllegalStateException if <code>next()</code> has not yet been called\n"
7482,method,org/apache/commons/collections/MapIterator/getValue/," Gets the current value, which is the value associated with the last key\n returned by <code>next()</code>.\n\n @return the current value\n @throws IllegalStateException if <code>next()</code> has not yet been called\n"
7484,method,org/apache/commons/collections/MapIterator/setValue/Object," Sets the value associated with the current key (optional operation).\n\n @param value  the new value\n @return the previous value\n @throws UnsupportedOperationException if setValue is not supported by the map\n @throws IllegalStateException if <code>next()</code> has not yet been called\n @throws IllegalStateException if <code>remove()</code> has been called since the\n  last call to <code>next()</code>\n"
7489,interface,org/apache/commons/collections/BoundedMap," Defines a map that is bounded in size.\n <p>\n The size of the map can vary, but it can never exceed a preset \n maximum number of elements. This interface allows the querying of details\n associated with the maximum number of elements.\n\n @since Commons Collections 3.0\n @version $Revision: 815026 $ $Date: 2009-09-15 07:54:23 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
7492,interface,org/apache/commons/collections/KeyValue," Defines a simple key value pair.\n <p>\n A Map Entry has considerable additional semantics over and above a simple\n key-value pair. This interface defines the minimum key value, with just the\n two get methods.\n\n @param <K> the type of the key\n @param <V> the type of the value\n @since Commons Collections 3.0\n @version $Revision: 815006 $ $Date: 2009-09-15 07:44:36 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
7495,class,org/apache/commons/collections/BufferUnderflowException," The BufferUnderflowException is used when the buffer is already empty.\n <p>\n NOTE: From version 3.0, this exception extends NoSuchElementException.\n\n @since Commons Collections 2.1\n @version $Revision: 956279 $ $Date: 2010-06-19 21:47:48 +0200 (Sat, 19 Jun 2010) $\n\n @author Avalon\n @author Berin Loritsch\n @author Jeff Turner\n @author Paul Jack\n @author Stephen Colebourne\n"
7499,interface,org/apache/commons/collections/Bag," Defines a collection that counts the number of times an object appears in\n the collection.\n <p>\n Suppose you have a Bag that contains <code>{a, a, b, c}</code>.\n Calling {@link #getCount(Object)} on <code>a</code> would return 2, while\n calling {@link #uniqueSet()} would return <code>{a, b, c}</code>.\n <p>\n <i>NOTE: This interface violates the {@link Collection} contract.</i> \n The behavior specified in many of these methods is <i>not</i> the same\n as the behavior specified by <code>Collection</code>.\n The noncompliant methods are clearly marked with "(Violation)".\n Exercise caution when using a bag as a <code>Collection</code>.\n <p>\n This violation resulted from the original specification of this interface.\n In an ideal world, the interface would be changed to fix the problems, however\n it has been decided to maintain backwards compatibility instead.\n\n @param <E> the type held in the bag\n @since Commons Collections 2.0\n @version $Revision: 815019 $ $Date: 2009-09-15 07:54:10 +0200 (Tue, 15 Sep 2009) $\n\n @author Chuck Burdick\n @author Stephen Colebourne\n"
7507,method,org/apache/commons/collections/Bag/containsAll/Collection," <i>(Violation)</i>\n Returns <code>true</code> if the bag contains all elements in\n the given collection, respecting cardinality.  That is, if the\n given collection <code>coll</code> contains <code>n</code> copies\n of a given object, calling {@link #getCount(Object)} on that object must\n be <code>&gt;= n</code> for all <code>n</code> in <code>coll</code>.\n <p>\n The {@link Collection#containsAll(Collection)} method specifies\n that cardinality should <i>not</i> be respected; this method should\n return true if the bag contains at least one of every object contained\n in the given collection.\n \n @param coll  the collection to check against\n @return <code>true</code> if the Bag contains all the collection\n"
7508,method,org/apache/commons/collections/Bag/removeAll/Collection," <i>(Violation)</i>\n Remove all elements represented in the given collection,\n respecting cardinality.  That is, if the given collection\n <code>coll</code> contains <code>n</code> copies of a given object,\n the bag will have <code>n</code> fewer copies, assuming the bag\n had at least <code>n</code> copies to begin with.\n\n <P>The {@link Collection#removeAll(Collection)} method specifies\n that cardinality should <i>not</i> be respected; this method should\n remove <i>all</i> occurrences of every object contained in the \n given collection.\n\n @param coll  the collection to remove\n @return <code>true</code> if this call changed the collection\n"
7510,method,org/apache/commons/collections/Bag/iterator/," Returns an {@link Iterator} over the entire set of members,\n including copies due to cardinality. This iterator is fail-fast\n and will not tolerate concurrent modifications.\n \n @return iterator over all elements in the Bag\n"
7513,class,org/apache/commons/collections/TransformerUtils," <code>TransformerUtils</code> provides reference implementations and \n utilities for the Transformer functor interface. The supplied transformers are:\n <ul>\n <li>Invoker - returns the result of a method call on the input object\n <li>Clone - returns a clone of the input object\n <li>Constant - always returns the same object\n <li>Closure - performs a Closure and returns the input object\n <li>Predicate - returns the result of the predicate as a Boolean\n <li>Factory - returns a new object from a factory\n <li>Chained - chains two or more transformers together\n <li>Switch - calls one transformer based on one or more predicates\n <li>SwitchMap - calls one transformer looked up from a Map\n <li>Instantiate - the Class input object is instantiated\n <li>Map - returns an object from a supplied Map\n <li>Null - always returns null\n <li>NOP - returns the input object, which should be immutable\n <li>Exception - always throws an exception\n <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n </ul>\n All the supplied transformers are Serializable.\n\n @since Commons Collections 3.0\n @version $Revision: 815106 $ $Date: 2009-09-15 07:56:51 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n @author James Carman\n"
7522,method,org/apache/commons/collections/TransformerUtils/chainedTransformer/Transformer;Transformer," Create a new Transformer that calls two transformers, passing the result of\n the first into the second.\n \n @see org.apache.commons.collections.functors.ChainedTransformer\n \n @param transformer1  the first transformer\n @param transformer2  the second transformer\n @return the transformer\n @throws IllegalArgumentException if either transformer is null\n"
7523,method,org/apache/commons/collections/TransformerUtils/chainedTransformer/Transformer[]," Create a new Transformer that calls each transformer in turn, passing the \n result into the next transformer.\n \n @see org.apache.commons.collections.functors.ChainedTransformer\n \n @param transformers  an array of transformers to chain\n @return the transformer\n @throws IllegalArgumentException if the transformers array is null\n @throws IllegalArgumentException if any transformer in the array is null\n"
7524,method,org/apache/commons/collections/TransformerUtils/chainedTransformer/Collection," Create a new Transformer that calls each transformer in turn, passing the \n result into the next transformer. The ordering is that of the iterator()\n method on the collection.\n \n @see org.apache.commons.collections.functors.ChainedTransformer\n \n @param transformers  a collection of transformers to chain\n @return the transformer\n @throws IllegalArgumentException if the transformers collection is null\n @throws IllegalArgumentException if any transformer in the collection is null\n"
7525,method,org/apache/commons/collections/TransformerUtils/switchTransformer/Predicate;Transformer;Transformer," Create a new Transformer that calls one of two transformers depending \n on the specified predicate.\n \n @see org.apache.commons.collections.functors.SwitchTransformer\n \n @param predicate  the predicate to switch on\n @param trueTransformer  the transformer called if the predicate is true\n @param falseTransformer  the transformer called if the predicate is false\n @return the transformer\n @throws IllegalArgumentException if the predicate is null\n @throws IllegalArgumentException if either transformer is null\n"
7526,method,org/apache/commons/collections/TransformerUtils/switchTransformer/Predicate[];Transformer[]," Create a new Transformer that calls one of the transformers depending \n on the predicates. The transformer at array location 0 is called if the\n predicate at array location 0 returned true. Each predicate is evaluated\n until one returns true. If no predicates evaluate to true, null is returned.\n \n @see org.apache.commons.collections.functors.SwitchTransformer\n \n @param predicates  an array of predicates to check\n @param transformers  an array of transformers to call\n @return the transformer\n @throws IllegalArgumentException if the either array is null\n @throws IllegalArgumentException if the either array has 0 elements\n @throws IllegalArgumentException if any element in the arrays is null\n @throws IllegalArgumentException if the arrays are different sizes\n"
7528,method,org/apache/commons/collections/TransformerUtils/switchTransformer/Map," Create a new Transformer that calls one of the transformers depending \n on the predicates. \n <p>\n The Map consists of Predicate keys and Transformer values. A transformer \n is called if its matching predicate returns true. Each predicate is evaluated\n until one returns true. If no predicates evaluate to true, the default\n transformer is called. The default transformer is set in the map with a \n null key. If no default transformer is set, null will be returned in a default\n case. The ordering is that of the iterator() method on the entryset collection \n of the map.\n \n @see org.apache.commons.collections.functors.SwitchTransformer\n \n @param predicatesAndTransformers  a map of predicates to transformers\n @return the transformer\n @throws IllegalArgumentException if the map is null\n @throws IllegalArgumentException if the map is empty\n @throws IllegalArgumentException if any transformer in the map is null\n @throws ClassCastException  if the map elements are of the wrong type\n"
7529,method,org/apache/commons/collections/TransformerUtils/switchMapTransformer/Map," Create a new Transformer that uses the input object as a key to find the\n transformer to call. \n <p>\n The Map consists of object keys and Transformer values. A transformer \n is called if the input object equals the key. If there is no match, the\n default transformer is called. The default transformer is set in the map\n using a null key. If no default is set, null will be returned in a default case.\n \n @see org.apache.commons.collections.functors.SwitchTransformer\n \n @param objectsAndTransformers  a map of objects to transformers\n @return the transformer\n @throws IllegalArgumentException if the map is null\n @throws IllegalArgumentException if the map is empty\n @throws IllegalArgumentException if any transformer in the map is null\n"
7534,method,org/apache/commons/collections/TransformerUtils/invokerTransformer/String;Class[];Object[]," Gets a Transformer that invokes a method on the input object.\n The method parameters are specified. If the input object is null, \n null is returned.\n \n @see org.apache.commons.collections.functors.InvokerTransformer\n \n @param methodName  the name of the method\n @param paramTypes  the parameter types\n @param args  the arguments\n @return the transformer\n @throws IllegalArgumentException if the method name is null\n @throws IllegalArgumentException if the paramTypes and args don't match\n"
7540,method,org/apache/commons/collections/SetUtils/isEqualSet/Collection;Collection," Tests two sets for equality as per the <code>equals()</code> contract\n in {@link java.util.Set#equals(java.lang.Object)}.\n <p>\n This method is useful for implementing <code>Set</code> when you cannot\n extend AbstractSet. The method takes Collection instances to enable other\n collection types to use the Set implementation algorithm.\n <p>\n The relevant text (slightly paraphrased as this is a static method) is:\n <blockquote>\n <p>Two sets are considered equal if they have\n the same size, and every member of the first set is contained in\n the second. This ensures that the <tt>equals</tt> method works\n properly across different implementations of the <tt>Set</tt>\n interface.</p>\n \n <p>\n This implementation first checks if the two sets are the same object: \n if so it returns <tt>true</tt>.  Then, it checks if the two sets are\n identical in size; if not, it returns false. If so, it returns\n <tt>a.containsAll((Collection) b)</tt>.</p>\n </blockquote>\n \n @see java.util.Set\n @param set1  the first set, may be null\n @param set2  the second set, may be null\n @return whether the sets are equal by value comparison\n"
7541,method,org/apache/commons/collections/SetUtils/hashCodeForSet/Collection," Generates a hash code using the algorithm specified in \n {@link java.util.Set#hashCode()}.\n <p>\n This method is useful for implementing <code>Set</code> when you cannot\n extend AbstractSet. The method takes Collection instances to enable other\n collection types to use the Set implementation algorithm.\n \n @see java.util.Set#hashCode()\n @param set  the set to calculate the hash code for, may be null\n @return the hash code\n"
7565,method,org/apache/commons/collections/CollectionUtils/cardinality/Object;Iterable," Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n\n @param obj the object to find the cardinality of\n @param coll the {@link Iterable} to search\n @param <O> the type of object that the {@link Iterable} may contain.\n @return the the number of occurrences of obj in coll\n"
7566,method,org/apache/commons/collections/CollectionUtils/find/Collection;Predicate," Finds the first element in the given collection which matches the given predicate.\n <p>\n If the input collection or predicate is null, or no element of the collection\n matches the predicate, null is returned.\n\n @param collection  the collection to search, may be null\n @param predicate  the predicate to use, may be null\n @return the first element of the collection which matches the predicate or null if none could be found\n"
7567,method,org/apache/commons/collections/CollectionUtils/forAllDo/Collection;Closure," Executes the given closure on each element in the collection.\n <p>\n If the input collection or closure is null, there is no change made.\n\n @param collection\n            the collection to get the input from, may be null\n @param closure\n            the closure to perform, may be null\n @return closure\n"
7569,method,org/apache/commons/collections/CollectionUtils/transform/Collection;Transformer," Transform the collection by applying a Transformer to each element.\n <p>\n If the input collection or transformer is null, there is no change made.\n <p>\n This routine is best for Lists, for which set() is used to do the\n transformations "in place." For other Collections, clear() and addAll()\n are used to replace elements.\n <p>\n If the input collection controls its input, such as a Set, and the\n Transformer creates duplicates (or are otherwise invalid), the collection\n may reduce in size due to calling this method.\n\n @param collection\n            the {@link Iterable} to get the input from, may be null\n @param transformer\n            the transformer to perform, may be null\n"
7571,method,org/apache/commons/collections/CollectionUtils/exists/Iterable;Predicate," Answers true if a predicate is true for at least one element of a\n collection.\n <p>\n A <code>null</code> collection or predicate returns false.\n\n @param input\n            the {@link Iterable} to get the input from, may be null\n @param predicate\n            the predicate to use, may be null\n @return true if at least one element of the collection matches the\n         predicate\n"
7572,method,org/apache/commons/collections/CollectionUtils/select/Collection;Predicate," Selects all elements from input collection which match the given\n predicate into an output collection.\n <p>\n A <code>null</code> predicate matches no elements.\n\n @param inputCollection\n            the collection to get the input from, may not be null\n @param predicate\n            the predicate to use, may be null\n @return the elements matching the predicate (new list)\n @throws NullPointerException\n             if the input collection is null\n"
7573,method,org/apache/commons/collections/CollectionUtils/select/Collection;Predicate;Collection," Selects all elements from input collection which match the given\n predicate and adds them to outputCollection.\n <p>\n If the input collection or predicate is null, there is no change to the\n output collection.\n\n @param inputCollection\n            the collection to get the input from, may be null\n @param predicate\n            the predicate to use, may be null\n @param outputCollection\n            the collection to output into, may not be null\n @return outputCollection\n"
7574,method,org/apache/commons/collections/CollectionUtils/selectRejected/Collection;Predicate," Selects all elements from inputCollection which don't match the given\n predicate into an output collection.\n <p>\n If the input predicate is <code>null</code>, the result is an empty\n list.\n\n @param inputCollection\n            the collection to get the input from, may not be null\n @param predicate\n            the predicate to use, may be null\n @return the elements <b>not</b> matching the predicate (new list)\n @throws NullPointerException\n             if the input collection is null\n"
7575,method,org/apache/commons/collections/CollectionUtils/selectRejected/Collection;Predicate;Collection," Selects all elements from inputCollection which don't match the given\n predicate and adds them to outputCollection.\n <p>\n If the input predicate is <code>null</code>, no elements are added to\n <code>outputCollection</code>.\n\n @param inputCollection\n            the collection to get the input from, may be null\n @param predicate\n            the predicate to use, may be null\n @param outputCollection\n            the collection to output into, may not be null\n @return outputCollection\n"
7576,method,org/apache/commons/collections/CollectionUtils/collect/Iterable;Transformer," Returns a new Collection consisting of the elements of inputCollection\n transformed by the given transformer.\n <p>\n If the input transformer is null, the result is an empty list.\n\n @param inputCollection\n            the collection to get the input from, may not be null\n @param transformer\n            the transformer to use, may be null\n @param <I> the type of object in the input collection\n @param <O> the type of object in the output collection\n @return the transformed result (new list)\n @throws NullPointerException\n             if the input collection is null\n"
7577,method,org/apache/commons/collections/CollectionUtils/collect/Iterator;Transformer," Transforms all elements from the inputIterator with the given transformer\n and adds them to the outputCollection.\n <p>\n If the input iterator or transformer is null, the result is an empty\n list.\n\n @param inputIterator\n            the iterator to get the input from, may be null\n @param transformer\n            the transformer to use, may be null\n @param <I> the type of object in the input collection\n @param <O> the type of object in the output collection\n @return the transformed result (new list)\n"
7589,method,org/apache/commons/collections/CollectionUtils/size/Object," Gets the size of the collection/iterator specified.\n <p>\n This method can handles objects as follows\n <ul>\n <li>Collection - the collection size\n <li>Map - the map size\n <li>Array - the array size\n <li>Iterator - the number of elements remaining in the iterator\n <li>Enumeration - the number of elements remaining in the enumeration\n </ul>\n\n @param object  the object to get the size of, may be null\n @return the size of the specified collection or 0 if the object was null\n @throws IllegalArgumentException thrown if object is not recognised\n @since Commons Collections 3.1\n"
7590,method,org/apache/commons/collections/CollectionUtils/sizeIsEmpty/Object," Checks if the specified collection/array/iterator is empty.\n <p>\n This method can handles objects as follows\n <ul>\n <li>Collection - via collection isEmpty\n <li>Map - via map isEmpty\n <li>Array - using array size\n <li>Iterator - via hasNext\n <li>Enumeration - via hasMoreElements\n </ul>\n <p>\n Note: This method is named to avoid clashing with\n {@link #isEmpty(Collection)}.\n\n @param object  the object to get the size of, may be null\n @return true if empty or null\n @throws IllegalArgumentException thrown if object is not recognised\n @since Commons Collections 3.2\n"
7597,method,org/apache/commons/collections/CollectionUtils/removeAll/Collection;Collection," Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n method returns a collection containing all the elements in <code>c</code>\n that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n in the returned collection is the same as the cardinality of <code>e</code>\n in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n case the cardinality is zero. This method is useful if you do not wish to modify\n the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n\n @param collection  the collection from which items are removed (in the returned collection)\n @param remove  the items to be removed from the returned <code>collection</code>\n @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n any elements that also occur in <code>remove</code>.\n @throws NullPointerException if either parameter is null\n @since Commons Collections 3.3 (method existed in 3.2 but was completely broken)\n"
7604,field,org/apache/commons/collections/CollectionUtils/EMPTY_COLLECTION," An empty unmodifiable collection.\n The JDK provides empty Set and List implementations which could be used for\n this purpose. However they could be cast to Set or List which might be\n undesirable. This implementation only implements Collection.\n"
7625,interface,org/apache/commons/collections/Buffer," Defines a collection that allows objects to be removed in some well-defined order.\n <p>\n The removal order can be based on insertion order (eg, a FIFO queue or a\n LIFO stack), on access order (eg, an LRU cache), on some arbitrary comparator\n (eg, a priority queue) or on any other well-defined ordering.\n <p>\n Note that the removal order is not necessarily the same as the iteration\n order.  A <code>Buffer</code> implementation may have equivalent removal\n and iteration orders, but this is not required.\n <p>\n This interface does not specify any behavior for \n {@link Object#equals(Object)} and {@link Object#hashCode} methods.  It\n is therefore possible for a <code>Buffer</code> implementation to also\n also implement {@link java.util.List}, {@link java.util.Set} or \n {@link Bag}.\n\n @param <E> the type of the elements in the buffer\n @since Commons Collections 2.1\n @version $Revision: 815006 $ $Date: 2009-09-15 07:44:36 +0200 (Tue, 15 Sep 2009) $\n\n @author Avalon\n @author Berin Loritsch\n @author Paul Jack\n @author Stephen Colebourne\n"
7628,class,org/apache/commons/collections/FunctorException," Runtime exception thrown from functors.\n If required, a root cause error can be wrapped within this one.\n\n @since Commons Collections 3.0\n @version $Revision: 956279 $ $Date: 2010-06-19 21:47:48 +0200 (Sat, 19 Jun 2010) $\n\n @author Stephen Colebourne\n"
7630,method,org/apache/commons/collections/FunctorException/FunctorException/String," Constructs a new <code>FunctorException</code> with specified\n detail message.\n\n @param msg  the error message.\n"
7631,method,org/apache/commons/collections/FunctorException/FunctorException/Throwable," Constructs a new <code>FunctorException</code> with specified\n nested <code>Throwable</code> root cause.\n\n @param rootCause  the exception or error that caused this exception\n                   to be thrown.\n"
7632,method,org/apache/commons/collections/FunctorException/FunctorException/String;Throwable," Constructs a new <code>FunctorException</code> with specified\n detail message and nested <code>Throwable</code> root cause.\n\n @param msg        the error message.\n @param rootCause  the exception or error that caused this exception\n                   to be thrown.\n"
7644,method,org/apache/commons/collections/BagUtils/BagUtils/," Instantiation of BagUtils is not intended or required. However, some\n tools require an instance to operate.\n"
7651,class,org/apache/commons/collections/ArrayStack," An implementation of the {@link java.util.Stack} API that is based on an\n <code>ArrayList</code> instead of a <code>Vector</code>, so it is not\n synchronized to protect against multi-threaded access.  The implementation\n is therefore operates faster in environments where you do not need to\n worry about multiple thread contention.\n <p>\n The removal order of an <code>ArrayStack</code> is based on insertion \n order: The most recently added element is removed first.  The iteration\n order is <i>not</i> the same as the removal order.  The iterator returns\n elements from the bottom up, whereas the {@link #remove()} method removes\n them from the top down.\n <p>\n Unlike <code>Stack</code>, <code>ArrayStack</code> accepts null entries.\n\n @see java.util.Stack\n @since Commons Collections 1.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Craig R. McClanahan\n @author Paul Jack\n @author Stephen Colebourne\n"
7656,method,org/apache/commons/collections/ArrayStack/push/Object," Pushes a new item onto the top of this stack. The pushed item is also\n returned. This is equivalent to calling <code>add</code>.\n\n @param item  the item to be added\n @return the item just pushed\n"
7663,method,org/apache/commons/collections/OrderedMap/mapIterator/," Obtains an <code>OrderedMapIterator</code> over the map.\n <p>\n A ordered map iterator is an efficient way of iterating over maps\n in both directions.\n \n @return a map iterator\n"
7666,method,org/apache/commons/collections/OrderedMap/nextKey/Object," Gets the next key after the one specified.\n\n @param key  the key to search for next from\n @return the next key, null if no match or at end\n"
7667,method,org/apache/commons/collections/OrderedMap/previousKey/Object," Gets the previous key before the one specified.\n\n @param key  the key to search for previous from\n @return the previous key, null if no match or at start\n"
7673,interface,org/apache/commons/collections/MultiMap,"\n Defines a map that holds a collection of values against each key.\n <p>\n A <code>MultiMap</code> is a Map with slightly different semantics.\n Putting a value into the map will add the value to a Collection at that key.\n Getting a value will return a Collection, holding all the values put to that key.\n <p>\n For example:\n <pre>\n MultiMap mhm = new MultiHashMap();\n mhm.put(key, "A");\n mhm.put(key, "B");\n mhm.put(key, "C");\n Collection coll = (Collection) mhm.get(key);</pre>\n <p>\n <code>coll</code> will be a collection containing "A", "B", "C".\n <p>\n NOTE: Additional methods were added to this interface in Commons Collections 3.1.\n These were added solely for documentation purposes and do not change the interface\n as they were defined in the superinterface <code>Map</code> anyway.\n\n @since Commons Collections 2.0\n @version $Revision: 815090 $ $Date: 2009-09-15 07:56:27 +0200 (Tue, 15 Sep 2009) $\n\n @author Christopher Berry\n @author James Strachan\n @author Stephen Colebourne\n"
7675,method,org/apache/commons/collections/MultiMap/size/," Gets the number of keys in this map.\n <p>\n Implementations typically return only the count of keys in the map\n This cannot be mandated due to backwards compatability of this interface.\n\n @return the number of key-collection mappings in this map\n"
7677,method,org/apache/commons/collections/MultiMap/containsValue/Object," Checks whether the map contains the value specified.\n <p>\n Implementations typically check all collections against all keys for the value.\n This cannot be mandated due to backwards compatability of this interface.\n\n @param value  the value to search for\n @return true if the map contains the value\n @throws ClassCastException if the value is of an invalid type\n @throws NullPointerException if the value is null and null value are invalid\n"
7680,method,org/apache/commons/collections/MultiMap/values/," Gets a collection containing all the values in the map.\n <p>\n Inplementations typically return a collection containing the combination\n of values from all keys.\n This cannot be mandated due to backwards compatability of this interface.\n\n @return a collection view of the values contained in this map\n"
7683,method,org/apache/commons/collections/FactoryUtils/nullFactory/," Gets a Factory that will return null each time the factory is used.\n This could be useful during testing as a placeholder.\n\n @see org.apache.commons.collections.functors.ConstantFactory\n @param <T> the "type" of null object the factory should return.\n @return the factory\n"
7698,method,org/apache/commons/collections/ComparatorUtils/transformedComparator/Comparator;Transformer," Gets a Comparator that passes transformed objects to the given comparator.\n <p>\n Objects passed to the returned comparator will first be transformed\n by the given transformer before they are compared by the given\n comparator.\n\n @param comparator  the sort order to use\n @param transformer  the transformer to use\n @return  a comparator that transforms its input objects before comparing them\n @see  TransformingComparator\n"
7703,class,org/apache/commons/collections/PredicateUtils," <code>PredicateUtils</code> provides reference implementations and utilities\n for the Predicate functor interface. The supplied predicates are:\n <ul>\n <li>Invoker - returns the result of a method call on the input object\n <li>InstanceOf - true if the object is an instanceof a class\n <li>Equal - true if the object equals() a specified object\n <li>Identity - true if the object == a specified object\n <li>Null - true if the object is null\n <li>NotNull - true if the object is not null\n <li>Unique - true if the object has not already been evaluated\n <li>And/All - true if all of the predicates are true\n <li>Or/Any - true if any of the predicates is true\n <li>Either/One - true if only one of the predicate is true\n <li>Neither/None - true if none of the predicates are true\n <li>Not - true if the predicate is false, and vice versa\n <li>Transformer - wraps a Transformer as a Predicate\n <li>True - always return true\n <li>False - always return false\n <li>Exception - always throws an exception\n <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n <li>Transformed - transforms the input before calling the predicate\n </ul>\n All the supplied predicates are Serializable.\n\n @since Commons Collections 3.0\n @version $Revision: 815446 $ $Date: 2009-09-15 20:52:25 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n @author Ola Berg\n"
7711,method,org/apache/commons/collections/PredicateUtils/instanceofPredicate/Class," Creates a Predicate that checks if the object passed in is of\n a particular type, using instanceof. A <code>null</code> input\n object will return <code>false</code>.\n\n @see org.apache.commons.collections.functors.InstanceofPredicate\n\n @param type  the type to check for, may not be null\n @return the predicate\n @throws IllegalArgumentException if the class is null\n"
7718,method,org/apache/commons/collections/PredicateUtils/orPredicate/Predicate;Predicate," Create a new Predicate that returns true if either of the specified\n predicates are true.\n\n @see org.apache.commons.collections.functors.OrPredicate\n\n @param predicate1  the first predicate, may not be null\n @param predicate2  the second predicate, may not be null\n @return the <code>or</code> predicate\n @throws IllegalArgumentException if either predicate is null\n"
7719,method,org/apache/commons/collections/PredicateUtils/anyPredicate/Predicate[]," Create a new Predicate that returns true if any of the specified\n predicates are true.\n If the array of predicates is empty, then this predicate returns false.\n\n @see org.apache.commons.collections.functors.AnyPredicate\n\n @param predicates  an array of predicates to check, may not be null\n @return the <code>any</code> predicate\n @throws IllegalArgumentException if the predicates array is null\n @throws IllegalArgumentException if any predicate in the array is null\n"
7720,method,org/apache/commons/collections/PredicateUtils/anyPredicate/Collection," Create a new Predicate that returns true if any of the specified\n predicates are true. The predicates are checked in iterator order.\n If the collection of predicates is empty, then this predicate returns false.\n\n @see org.apache.commons.collections.functors.AnyPredicate\n\n @param predicates  a collection of predicates to check, may not be null\n @return the <code>any</code> predicate\n @throws IllegalArgumentException if the predicates collection is null\n @throws IllegalArgumentException if any predicate in the collection is null\n"
7724,method,org/apache/commons/collections/PredicateUtils/neitherPredicate/Predicate;Predicate," Create a new Predicate that returns true if neither of the specified\n predicates are true.\n\n @see org.apache.commons.collections.functors.NonePredicate\n\n @param predicate1  the first predicate, may not be null\n @param predicate2  the second predicate, may not be null\n @return the <code>neither</code> predicate\n @throws IllegalArgumentException if either predicate is null\n"
7725,method,org/apache/commons/collections/PredicateUtils/nonePredicate/Predicate[]," Create a new Predicate that returns true if none of the specified\n predicates are true.\n If the array of predicates is empty, then this predicate returns true.\n\n @see org.apache.commons.collections.functors.NonePredicate\n\n @param predicates  an array of predicates to check, may not be null\n @return the <code>none</code> predicate\n @throws IllegalArgumentException if the predicates array is null\n @throws IllegalArgumentException if any predicate in the array is null\n"
7726,method,org/apache/commons/collections/PredicateUtils/nonePredicate/Collection," Create a new Predicate that returns true if none of the specified\n predicates are true. The predicates are checked in iterator order.\n If the collection of predicates is empty, then this predicate returns true.\n\n @see org.apache.commons.collections.functors.NonePredicate\n\n @param predicates  a collection of predicates to check, may not be null\n @return the <code>none</code> predicate\n @throws IllegalArgumentException if the predicates collection is null\n @throws IllegalArgumentException if any predicate in the collection is null\n"
7729,method,org/apache/commons/collections/PredicateUtils/nullIsExceptionPredicate/Predicate," Gets a Predicate that throws an exception if the input object is null,\n otherwise it calls the specified Predicate. This allows null handling\n behaviour to be added to Predicates that don't support nulls.\n\n @see org.apache.commons.collections.functors.NullIsExceptionPredicate\n\n @param predicate  the predicate to wrap, may not be null\n @return the predicate\n @throws IllegalArgumentException if the predicate is null.\n"
7730,method,org/apache/commons/collections/PredicateUtils/nullIsFalsePredicate/Predicate," Gets a Predicate that returns false if the input object is null, otherwise\n it calls the specified Predicate. This allows null handling behaviour to\n be added to Predicates that don't support nulls.\n\n @see org.apache.commons.collections.functors.NullIsFalsePredicate\n\n @param predicate  the predicate to wrap, may not be null\n @return the predicate\n @throws IllegalArgumentException if the predicate is null.\n"
7731,method,org/apache/commons/collections/PredicateUtils/nullIsTruePredicate/Predicate," Gets a Predicate that returns true if the input object is null, otherwise\n it calls the specified Predicate. This allows null handling behaviour to\n be added to Predicates that don't support nulls.\n\n @see org.apache.commons.collections.functors.NullIsTruePredicate\n\n @param predicate  the predicate to wrap, may not be null\n @return the predicate\n @throws IllegalArgumentException if the predicate is null.\n"
7737,class,org/apache/commons/collections/IndexedCollection," An IndexedCollection is a Map-like view onto a Collection. It accepts a\n keyTransformer to define how the keys are converted from the values.\n <p>\n Modifications made to this decorator modify the index as well as the\n decorated {@link Collection}. However, modifications to the underlying\n {@link Collection} will not updated the index and it will get out of sync.\n <p>\n If modification to the decorated {@link Collection} is unavoidable, then a\n call to {@link #reindex()} will update the index to the current contents of\n the {@link Collection}.\n\n @param <K> the type of object in the index.\n @param <C> the type of object in the collection.\n @author Stephen Kestle\n"
7766,method,org/apache/commons/collections/ListUtils/hashCodeForList/Collection," Generates a hash code using the algorithm specified in \n {@link java.util.List#hashCode()}.\n <p>\n This method is useful for implementing <code>List</code> when you cannot\n extend AbstractList. The method takes Collection instances to enable other\n collection types to use the List implementation algorithm.\n \n @see java.util.List#hashCode()\n @param list  the list to generate the hashCode for, may be null\n @return the hash code\n"
7768,method,org/apache/commons/collections/ListUtils/removeAll/Collection;Collection," Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n method returns a list containing all the elements in <code>c</code>\n that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n in the returned collection is the same as the cardinality of <code>e</code>\n in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n case the cardinality is zero. This method is useful if you do not wish to modify\n <code>collection</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n \n @param collection  the collection from which items are removed (in the returned collection)\n @param remove  the items to be removed from the returned <code>collection</code>\n @return a <code>List</code> containing all the elements of <code>c</code> except\n any elements that also occur in <code>remove</code>.\n @throws NullPointerException if either parameter is null\n @since Commons Collections 3.2\n"
7775,method,org/apache/commons/collections/ListUtils/indexOf/List;Predicate," Finds the first index in the given List which matches the given predicate.\n <p>\n If the input List or predicate is null, or no element of the List\n matches the predicate, -1 is returned.\n\n @param list the List to search, may be null\n @param predicate  the predicate to use, may be null\n @return the first index of an Object in the List which matches the predicate or -1 if none could be found\n"
7778,class,org/apache/commons/collections/ExtendedProperties," This class extends normal Java properties by adding the possibility\n to use the same key many times concatenating the value strings\n instead of overwriting them.\n <p>\n <b>Please consider using the\n {@link org.apache.commons.configuration.PropertiesConfiguration} class in\n <a href="http://commons.apache.org/configuration">Commons Configuration</a>.\n It's an evolution of <code>ExtendedProperties</code> supporting more\n features like automatic reloading, advanced interpolation, more type\n conversions, changes notifications and file layout preservation.</b>\n <p>\n The Extended Properties syntax is explained here:\n\n <ul>\n  <li>\n   Each property has the syntax <code>key = value</code>\n  </li>\n  <li>\n   The <i>key</i> may use any character but the equal sign '='.\n  </li>\n  <li>\n   <i>value</i> may be separated on different lines if a backslash\n   is placed at the end of the line that continues below.\n  </li>\n  <li>\n   If <i>value</i> is a list of strings, each token is separated\n   by a comma ','.\n  </li>\n  <li>\n   Commas in each token are escaped placing a backslash right before\n   the comma.\n  </li>\n  <li>\n   Backslashes are escaped by using two consecutive backslashes i.e. \\\n  </li>\n  <li>\n   If a <i>key</i> is used more than once, the values are appended\n   as if they were on the same line separated with commas.\n  </li>\n  <li>\n   Blank lines and lines starting with character '#' are skipped.\n  </li>\n  <li>\n   If a property is named "include" (or whatever is defined by\n   setInclude() and getInclude() and the value of that property is\n   the full path to a file on disk, that file will be included into\n   the ConfigurationsRepository. You can also pull in files relative\n   to the parent configuration file. So if you have something\n   like the following:\n\n   include = additional.properties\n\n   Then "additional.properties" is expected to be in the same\n   directory as the parent configuration file.\n\n   Duplicate name values will be replaced, so be careful.\n\n  </li>\n </ul>\n\n <p>Here is an example of a valid extended properties file:\n\n <p><pre>\n      # lines starting with # are comments\n\n      # This is the simplest property\n      key = value\n\n      # A long property may be separated on multiple lines\n      longvalue = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n      # This is a property with many tokens\n      tokens_on_a_line = first token, second token\n\n      # This sequence generates exactly the same result\n      tokens_on_multiple_lines = first token\n      tokens_on_multiple_lines = second token\n\n      # commas may be escaped in tokens\n      commas.escaped = Hi\, what'up?\n </pre>\n\n <p><b>NOTE</b>: this class has <b>not</b> been written for\n performance nor low memory usage.  In fact, it's way slower than it\n could be and generates too much memory garbage.  But since\n performance is not an issue during intialization (and there is not\n much time to improve it), I wrote it this way.  If you don't like\n it, go ahead and tune it up!\n\n @since Commons Collections 1.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author <a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>\n @author <a href="mailto:jon@latchkey.com">Jon S. Stevens</a>\n @author <a href="mailto:daveb@miceda-data">Dave Bryson</a>\n @author <a href="mailto:jvanzyl@periapt.com">Jason van Zyl</a>\n @author <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>\n @author <a href="mailto:leon@opticode.co.za">Leon Messerschmidt</a>\n @author <a href="mailto:kjohnson@transparent.com">Kent Johnson</a>\n @author <a href="mailto:dlr@finemaltcoding.com">Daniel Rall</a>\n @author <a href="mailto:ipriha@surfeu.fi">Ilkka Priha</a>\n @author Janek Bogucki\n @author Mohan Kishore\n @author Stephen Colebourne\n @author Shinobu Kawai\n @author <a href="mailto:hps@intermeta.de">Henning P. Schmiedehausen</a>\n"
7788,method,org/apache/commons/collections/ExtendedProperties/setProperty/String;Object," Set a property, this will replace any previously\n set values. Set values is implicitly a call\n to clearProperty(key), addProperty(key,value).\n\n @param key  the key to set\n @param value  the value to set\n"
7790,method,org/apache/commons/collections/ExtendedProperties/combine/ExtendedProperties," Combines an existing Hashtable with this Hashtable.\n <p>\n Warning: It will overwrite previous entries without warning.\n\n @param props  the properties to combine\n"
7794,method,org/apache/commons/collections/ExtendedProperties/subset/String," Create an ExtendedProperties object that is a subset\n of this one. Take into account duplicate keys\n by using the setProperty() in ExtendedProperties.\n\n @param prefix  the prefix to get a subset for\n @return a new independent ExtendedProperties\n"
7795,method,org/apache/commons/collections/ExtendedProperties/display/," Display the configuration for debugging purposes to System.out.\n"
7802,method,org/apache/commons/collections/ExtendedProperties/getVector/String;Vector," Get a Vector of strings associated with the given configuration key.\n <p>\n The list is a copy of the internal data of this object, and as\n such you may alter it freely.\n\n @param key The configuration key.\n @param defaultValue The default value.\n @return The associated Vector.\n @throws ClassCastException is thrown if the key maps to an\n object that is not a Vector.\n"
7803,method,org/apache/commons/collections/ExtendedProperties/getList/String," Get a List of strings associated with the given configuration key.\n <p>\n The list is a copy of the internal data of this object, and as\n such you may alter it freely.\n\n @param key The configuration key.\n @return The associated List object.\n @throws ClassCastException is thrown if the key maps to an\n object that is not a List.\n @since Commons Collections 3.2\n"
7804,method,org/apache/commons/collections/ExtendedProperties/getList/String;List," Get a List of strings associated with the given configuration key.\n <p>\n The list is a copy of the internal data of this object, and as\n such you may alter it freely.\n\n @param key The configuration key.\n @param defaultValue The default value.\n @return The associated List.\n @throws ClassCastException is thrown if the key maps to an\n object that is not a List.\n @since Commons Collections 3.2\n"
7829,method,org/apache/commons/collections/ExtendedProperties/convertProperties/Properties," Convert a standard properties class into a configuration class.\n <p>\n NOTE: From Commons Collections 3.2 this method will pick up\n any default parent Properties of the specified input object.\n <p>\n As with java.util.Properties(Properties), any non-String \n values will not be passed on in the new ExtendedProperties \n object.\n\n @param props  the properties object to convert\n @return new ExtendedProperties created from props\n"
7830,method,org/apache/commons/collections/ExtendedProperties/put/Object;Object," Add a new property specified by the key to the \n ExtendedProperties.\n\n @param key specifying the property\n @param value for the property\n @return old value of the property\n"
7831,method,org/apache/commons/collections/ExtendedProperties/putAll/Map," Add a map full of key/value pairs to the ExtendedProperties. \n If the added map is an ExtendedProperties class, then the \n order of the added properties is maintained. \n\n @param map full of key/value pair data\n"
7832,method,org/apache/commons/collections/ExtendedProperties/remove/Object," Remove the property specified by the key from the \n ExtendedProperties.\n\n @param key specifying the property\n @return old value of the property\n"
7833,method,org/apache/commons/collections/ExtendedProperties/ExtendedProperties/," Creates an empty extended properties object.\n"
7837,field,org/apache/commons/collections/ExtendedProperties/basePath," Base path of the configuration file used to create\n this ExtendedProperties object.\n"
7843,interface,org/apache/commons/collections/Unmodifiable," Marker interface for collections, maps and iterators that are unmodifiable.\n <p>\n This interface enables testing such as:\n <pre>\n if (coll instanceof Unmodifiable) {\n   coll = new ArrayList(coll);\n }\n // now we know coll is modifiable\n </pre>\n Of course all this only works if you use the Unmodifiable classes defined\n in this library. If you use the JDK unmodifiable class via java util Collections\n then the interface won't be there.\n  \n @since Commons Collections 3.0\n @version $Revision: 814126 $ $Date: 2009-09-12 11:38:27 +0200 (Sat, 12 Sep 2009) $\n\n @author Stephen Colebourne\n"
7851,method,org/apache/commons/collections/comparators/BooleanComparator/sortsTrueFirst/," Returns <code>true</code> iff\n I sort <code>true</code> values before \n <code>false</code> values.  In other words,\n returns <code>true</code> iff\n {@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}\n returns a positive value.\n \n @return the trueFirst flag\n"
7852,method,org/apache/commons/collections/comparators/BooleanComparator/BooleanComparator/," Creates a <code>BooleanComparator</code> that sorts\n <code>false</code> values before <code>true</code> values.\n <p>\n Equivalent to {@link #BooleanComparator(boolean) BooleanComparator(false)}.\n <p>\n Please use the static factory instead whenever possible.\n"
7853,method,org/apache/commons/collections/comparators/BooleanComparator/BooleanComparator/boolean," Creates a <code>BooleanComparator</code> that sorts\n <code><i>trueFirst</i></code> values before \n <code>&#x21;<i>trueFirst</i></code> values.\n <p>\n Please use the static factories instead whenever possible.\n \n @param trueFirst when <code>true</code>, sort \n  <code>true</code> boolean values before <code>false</code>\n"
7867,method,org/apache/commons/collections/comparators/NullComparator/compare/Object;Object,"  Perform a comparison between two objects.  If both objects are\n  <code>null</code>, a <code>0</code> value is returned.  If one object\n  is <code>null</code> and the other is not, the result is determined on\n  whether the Comparator was constructed to have nulls as higher or lower\n  than other objects.  If neither object is <code>null</code>, an\n  underlying comparator specified in the constructor (or the default) is\n  used to compare the non-<code>null</code> objects.\n\n  @param o1  the first object to compare\n  @param o2  the object to compare it to.\n  @return <code>-1</code> if <code>o1</code> is "lower" than (less than,\n  before, etc.) <code>o2</code>; <code>1</code> if <code>o1</code> is\n  "higher" than (greater than, after, etc.) <code>o2</code>; or\n  <code>0</code> if <code>o1</code> and <code>o2</code> are equal.\n"
7872,method,org/apache/commons/collections/comparators/NullComparator/NullComparator/boolean,"  Construct an instance that sorts <code>null</code> higher or lower than\n  any non-<code>null</code> object it is compared with.  When comparing\n  two non-<code>null</code> objects, the {@link ComparableComparator} is\n  used.\n\n  @param nullsAreHigh a <code>true</code> value indicates that\n  <code>null</code> should be compared as higher than a\n  non-<code>null</code> object.  A <code>false</code> value indicates\n  that <code>null</code> should be compared as lower than a\n  non-<code>null</code> object.\n"
7873,method,org/apache/commons/collections/comparators/NullComparator/NullComparator/Comparator;boolean,"  Construct an instance that sorts <code>null</code> higher or lower than\n  any non-<code>null</code> object it is compared with.  When comparing\n  two non-<code>null</code> objects, the specified {@link Comparator} is\n  used.\n\n  @param nonNullComparator the comparator to use when comparing two\n  non-<code>null</code> objects. This argument cannot be\n  <code>null</code>\n\n  @param nullsAreHigh a <code>true</code> value indicates that\n  <code>null</code> should be compared as higher than a\n  non-<code>null</code> object.  A <code>false</code> value indicates\n  that <code>null</code> should be compared as lower than a\n  non-<code>null</code> object.\n\n  @exception NullPointerException if <code>nonNullComparator</code> is\n  <code>null</code>\n"
7874,class,org/apache/commons/collections/comparators/ComparableComparator," A {@link Comparator Comparator} that compares \n {@link Comparable Comparable} objects.\n <p />\n This Comparator is useful, for example,\n for enforcing the natural order in custom implementations\n of SortedSet and SortedMap.\n <p />\n Note: In the 2.0 and 2.1 releases of Commons Collections, \n this class would throw a {@link ClassCastException} if\n either of the arguments to {@link #compare(Object, Object) compare}\n were <code>null</code>, not {@link Comparable Comparable},\n or for which {@link Comparable#compareTo(Object) compareTo} gave\n inconsistent results.  This is no longer the case.  See\n {@link #compare(Object, Object) compare} for details.\n\n @since Commons Collections 2.0\n @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $\n\n @see java.util.Collections#reverseOrder()\n"
7914,method,org/apache/commons/collections/comparators/ComparatorChain/ComparatorChain/List;BitSet," Construct a ComparatorChain from the Comparators in the\n given List.  The sort order of each column will be\n drawn from the given BitSet.  When determining the sort\n order for Comparator at index <i>i</i> in the List,\n the ComparatorChain will call BitSet.get(<i>i</i>).\n If that method returns <i>false</i>, the forward\n sort order is used; a return value of <i>true</i>\n indicates reverse sort order.\n\n @param list   List of Comparators.  NOTE: This constructor does not perform a\n               defensive copy of the list\n @param bits   Sort order for each Comparator.  Extra bits are ignored,\n               unless extra Comparators are added by another method.\n"
7917,field,org/apache/commons/collections/comparators/ComparatorChain/isLocked,"Whether the chain has been "locked". "
7957,method,org/apache/commons/collections/list/AbstractLinkedList/addNodeAfter/Node;Object," Creates a new node with the specified object as its\n <code>value</code> and inserts it after <code>node</code>.\n <p>\n This implementation uses {@link #createNode(Object)} and\n {@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}.\n\n @param node  node to insert after\n @param value  value of the newly added node\n @throws NullPointerException if <code>node</code> is null\n"
7981,field,org/apache/commons/collections/list/AbstractLinkedList/Node/previous,"A pointer to the node before this node "
7982,field,org/apache/commons/collections/list/AbstractLinkedList/Node/next,"A pointer to the node after this node "
8001,field,org/apache/commons/collections/list/AbstractLinkedList/LinkedListIterator/expectedModCount," The modification count that the list is expected to have. If the list\n doesn't have this count, then a\n {@link java.util.ConcurrentModificationException} may be thrown by\n the operations.\n"
8029,method,org/apache/commons/collections/list/SetUniqueList/add/int;Object," Adds an element to a specific index in the list if it is not already present.\n <p>\n <i>(Violation)</i>\n The <code>List</code> interface makes the assumption that the element is\n always inserted. This may not happen with this implementation.\n\n @param index  the index to insert at\n @param object  the object to add\n"
8030,method,org/apache/commons/collections/list/SetUniqueList/addAll/Collection," Adds a collection of objects to the end of the list avoiding duplicates.\n <p>\n Only elements that are not already in this list will be added, and\n duplicates from the specified collection will be ignored.\n <p>\n <i>(Violation)</i>\n The <code>List</code> interface makes the assumption that the elements\n are always inserted. This may not happen with this implementation.\n\n @param coll  the collection to add in iterator order\n @return true if this collection changed\n"
8031,method,org/apache/commons/collections/list/SetUniqueList/addAll/int;Collection," Adds a collection of objects a specific index in the list avoiding \n duplicates.\n <p>\n Only elements that are not already in this list will be added, and\n duplicates from the specified collection will be ignored.\n <p>\n <i>(Violation)</i>\n The <code>List</code> interface makes the assumption that the elements\n are always inserted. This may not happen with this implementation.\n\n @param index  the index to insert at\n @param coll  the collection to add in iterator order\n @return true if this collection changed\n"
8047,class,org/apache/commons/collections/list/AbstractSerializableListDecorator," Serializable subclass of AbstractListDecorator.\n\n @author Stephen Colebourne\n @since Commons Collections 3.1\n"
8058,method,org/apache/commons/collections/list/TreeList/add/int;Object," Adds a new element to the list.\n\n @param index  the index to add before\n @param obj  the element to add\n"
8083,method,org/apache/commons/collections/list/GrowthList/add/int;Object," Decorate the add method to perform the growth behaviour.\n <p>\n If the requested index is greater than the current size, the list will\n grow to the new size. Indices between the old size and the requested\n size will be filled with <code>null</code>.\n <p>\n If the index is less than the current size, the value will be added to\n the underlying list directly.\n If the index is less than zero, the underlying list is called, which\n will probably throw an IndexOutOfBoundsException.\n\n @param index  the index to add at\n @param element  the object to add at the specified index\n @throws UnsupportedOperationException if the underlying list doesn't implement set\n @throws ClassCastException if the underlying list rejects the element\n @throws IllegalArgumentException if the underlying list rejects the element\n"
8084,method,org/apache/commons/collections/list/GrowthList/addAll/int;Collection," Decorate the addAll method to perform the growth behaviour.\n <p>\n If the requested index is greater than the current size, the list will\n grow to the new size. Indices between the old size and the requested\n size will be filled with <code>null</code>.\n <p>\n If the index is less than the current size, the values will be added to\n the underlying list directly.\n If the index is less than zero, the underlying list is called, which\n will probably throw an IndexOutOfBoundsException.\n\n @param index  the index to add at\n @param coll  the collection to add at the specified index\n @return true if the list changed\n @throws UnsupportedOperationException if the underlying list doesn't implement set\n @throws ClassCastException if the underlying list rejects the element\n @throws IllegalArgumentException if the underlying list rejects the element\n"
8085,method,org/apache/commons/collections/list/GrowthList/set/int;Object," Decorate the set method to perform the growth behaviour.\n <p>\n If the requested index is greater than the current size, the list will\n grow to the new size. Indices between the old size and the requested\n size will be filled with <code>null</code>.\n <p>\n If the index is less than the current size, the value will be set onto\n the underlying list directly.\n If the index is less than zero, the underlying list is called, which\n will probably throw an IndexOutOfBoundsException.\n\n @param index  the index to set\n @param element  the object to set at the specified index\n @return the object previously at that index\n @throws UnsupportedOperationException if the underlying list doesn't implement set\n @throws ClassCastException if the underlying list rejects the element\n @throws IllegalArgumentException if the underlying list rejects the element\n"
8089,class,org/apache/commons/collections/list/AbstractListDecorator," Decorates another <code>List</code> to provide additional behaviour.\n <p>\n Methods are forwarded directly to the decorated list.\n\n @param <E> the type of the elements in the list\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
8130,method,org/apache/commons/collections/list/CursorableLinkedList/Cursor/checkModCount/," Override superclass modCount check, and replace it with our valid flag.\n"
8144,method,org/apache/commons/collections/list/NodeCachingLinkedList/shrinkCacheToMaximumSize/," Reduce the size of the cache to the maximum, if necessary.\n"
8150,method,org/apache/commons/collections/list/NodeCachingLinkedList/removeAllNodes/," Removes all the nodes from the list, storing as many as required in the\n cache for reuse.\n \n"
8177,class,org/apache/commons/collections/list/SynchronizedList," Decorates another <code>List</code> to synchronize its behaviour\n for a multi-threaded environment.\n <p>\n Methods are synchronized, then forwarded to the decorated list.\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 815067 $ $Date: 2009-09-15 07:55:45 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8214,class,org/apache/commons/collections/list/PredicatedList," Decorates another <code>List</code> to validate that all additions\n match a specified predicate.\n <p>\n This list exists to provide validation for the decorated list.\n It is normally created to decorate an empty list.\n If an object cannot be added to the list, an IllegalArgumentException is thrown.\n <p>\n One usage would be to ensure that no null entries are added to the list.\n <pre>List list = PredicatedList.decorate(new ArrayList(), NotNullPredicate.INSTANCE);</pre>\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 966315 $ $Date: 2010-07-21 19:03:58 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Paul Jack\n"
8232,class,org/apache/commons/collections/list/LazyList," Decorates another <code>List</code> to create objects in the list on demand.\n <p>\n When the {@link #get(int)} method is called with an index greater than\n the size of the list, the list will automatically grow in size and return\n a new object from the specified factory. The gaps will be filled by null.\n If a get method call encounters a null, it will be replaced with a new\n object from the factory. Thus this list is unsuitable for storing null\n objects.\n <p>\n For instance:\n\n <pre>\n Factory factory = new Factory() {\n     public Object create() {\n         return new Date();\n     }\n }\n List lazy = LazyList.decorate(new ArrayList(), factory);\n Object obj = lazy.get(3);\n </pre>\n\n After the above code is executed, <code>obj</code> will contain\n a new <code>Date</code> instance.  Furthermore, that <code>Date</code>\n instance is the fourth element in the list.  The first, second, \n and third element are all set to <code>null</code>.\n <p>\n This class differs from {@link GrowthList} because here growth occurs on\n get, where <code>GrowthList</code> grows on set and add. However, they\n could easily be used together by decorating twice.\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @see GrowthList\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Arron Bates\n @author Paul Jack\n"
8234,method,org/apache/commons/collections/list/LazyList/get/int," Decorate the get method to perform the lazy behaviour.\n <p>\n If the requested index is greater than the current size, the list will \n grow to the new size and a new object will be returned from the factory.\n Indexes in-between the old size and the requested size are left with a \n placeholder that is replaced with a factory object when requested.\n \n @param index  the index to retrieve\n"
8242,class,org/apache/commons/collections/functors/FactoryTransformer," Transformer implementation that calls a Factory and returns the result.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8243,method,org/apache/commons/collections/functors/FactoryTransformer/getInstance/Factory," Factory method that performs validation.\n \n @param factory  the factory to call, not null\n @return the <code>factory</code> transformer\n @throws IllegalArgumentException if the factory is null\n"
8244,method,org/apache/commons/collections/functors/FactoryTransformer/transform/Object," Transforms the input by ignoring the input and returning the result of\n calling the decorated factory.\n \n @param input  the input object to transform\n @return the transformed result\n"
8246,method,org/apache/commons/collections/functors/FactoryTransformer/FactoryTransformer/Factory," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n \n @param factory  the factory to call, not null\n"
8252,class,org/apache/commons/collections/functors/StringValueTransformer," Transformer implementation that returns the result of calling\n <code>String.valueOf</code> on the input object.\n\n @since Commons Collections 3.0\n @version $Revision: 894507 $ $Date: 2009-12-30 00:12:18 +0100 (Wed, 30 Dec 2009) $\n\n @author Stephen Colebourne\n"
8254,method,org/apache/commons/collections/functors/StringValueTransformer/transform/Object," Transforms the input to result by calling <code>String.valueOf</code>.\n\n @param input  the input object to transform\n @return the transformed result\n"
8269,class,org/apache/commons/collections/functors/NonePredicate," Predicate implementation that returns true if none of the\n predicates return true.\n If the array of predicates is empty, then this predicate returns true.\n <p>\n NOTE: In versions prior to 3.2 an array size of zero or one\n threw an exception.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n @author Matt Benson\n"
8275,class,org/apache/commons/collections/functors/TransformerClosure," Closure implementation that calls a Transformer using the input object\n and ignore the result.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8277,method,org/apache/commons/collections/functors/TransformerClosure/execute/Object," Executes the closure by calling the decorated transformer.\n \n @param input  the input object\n"
8279,method,org/apache/commons/collections/functors/TransformerClosure/TransformerClosure/Transformer," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n \n @param transformer  the transformer to call, not null\n"
8280,class,org/apache/commons/collections/functors/SwitchClosure," Closure implementation calls the closure whose predicate returns true,\n like a switch statement.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8282,method,org/apache/commons/collections/functors/SwitchClosure/getInstance/Map," Create a new Closure that calls one of the closures depending\n on the predicates.\n <p>\n The Map consists of Predicate keys and Closure values. A closure\n is called if its matching predicate returns true. Each predicate is evaluated\n until one returns true. If no predicates evaluate to true, the default\n closure is called. The default closure is set in the map with a\n null key. The ordering is that of the iterator() method on the entryset\n collection of the map.\n\n @param predicatesAndClosures  a map of predicates to closures\n @return the <code>switch</code> closure\n @throws IllegalArgumentException if the map is null\n @throws IllegalArgumentException if any closure in the map is null\n @throws ClassCastException  if the map elements are of the wrong type\n"
8290,method,org/apache/commons/collections/functors/ChainedClosure/getInstance/Collection," Create a new Closure that calls each closure in turn, passing the \n result into the next closure. The ordering is that of the iterator()\n method on the collection.\n \n @param closures  a collection of closures to chain\n @return the <code>chained</code> closure\n @throws IllegalArgumentException if the closures collection is null\n @throws IllegalArgumentException if any closure in the collection is null\n"
8300,class,org/apache/commons/collections/functors/ClosureTransformer," Transformer implementation that calls a Closure using the input object\n and then returns the input.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8301,method,org/apache/commons/collections/functors/ClosureTransformer/getInstance/Closure," Factory method that performs validation.\n \n @param closure  the closure to call, not null\n @return the <code>closure</code> transformer\n @throws IllegalArgumentException if the closure is null\n"
8304,method,org/apache/commons/collections/functors/ClosureTransformer/ClosureTransformer/Closure," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n \n @param closure  the closure to call, not null\n"
8313,method,org/apache/commons/collections/functors/NullIsFalsePredicate/evaluate/Object," Evaluates the predicate returning the result of the decorated predicate\n once a null check is performed.\n\n @param object  the input object\n @return true if decorated predicate returns true, false if input is null\n"
8315,method,org/apache/commons/collections/functors/NullIsFalsePredicate/NullIsFalsePredicate/Predicate," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n\n @param predicate  the predicate to call after the null check\n"
8326,method,org/apache/commons/collections/functors/InvokerTransformer/getInstance/String," Gets an instance of this transformer calling a specific method with no arguments.\n \n @param methodName  the method name to call\n @return an invoker transformer\n @since Commons Collections 3.1\n"
8327,method,org/apache/commons/collections/functors/InvokerTransformer/getInstance/String;Class[];Object[]," Gets an instance of this transformer calling a specific method with specific values.\n \n @param methodName  the method name to call\n @param paramTypes  the parameter types of the method\n @param args  the arguments to pass to the method\n @return an invoker transformer\n"
8328,method,org/apache/commons/collections/functors/InvokerTransformer/transform/Object," Transforms the input to result by invoking a method on the input.\n \n @param input  the input object to transform\n @return the transformed result, null if null input\n"
8329,method,org/apache/commons/collections/functors/InvokerTransformer/InvokerTransformer/String;Class[];Object[]," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n \n @param methodName  the method to call\n @param paramTypes  the constructor parameter types, not cloned\n @param args  the constructor arguments, not cloned\n"
8335,method,org/apache/commons/collections/functors/InstanceofPredicate/getInstance/Class," Factory to create the identity predicate.\n\n @param type  the type to check for, may not be null\n @return the predicate\n @throws IllegalArgumentException if the class is null\n"
8339,class,org/apache/commons/collections/functors/TransformedPredicate," Predicate implementation that transforms the given object before invoking\n another <code>Predicate</code>.\n\n @since Commons Collections 3.1\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n @author Alban Peignier\n @author Stephen Colebourne\n"
8340,method,org/apache/commons/collections/functors/TransformedPredicate/getInstance/Transformer;Predicate," Factory to create the predicate.\n\n @param transformer  the transformer to call\n @param predicate  the predicate to call with the result of the transform\n @return the predicate\n @throws IllegalArgumentException if the transformer or the predicate is null\n"
8341,method,org/apache/commons/collections/functors/TransformedPredicate/evaluate/Object," Evaluates the predicate returning the result of the decorated predicate\n once the input has been transformed\n\n @param object  the input object which will be transformed\n @return true if decorated predicate returns true\n"
8345,class,org/apache/commons/collections/functors/AnyPredicate," Predicate implementation that returns true if any of the\n predicates return true.\n If the array of predicates is empty, then this predicate returns false.\n <p>\n NOTE: In versions prior to 3.2 an array size of zero or one\n threw an exception.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n @author Matt Benson\n"
8351,class,org/apache/commons/collections/functors/IfClosure," Closure implementation acts as an if statement calling one or other closure\n based on a predicate.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n @author Matt Benson\n"
8356,method,org/apache/commons/collections/functors/IfClosure/getTrueClosure/," Gets the closure called when true.\n \n @return the closure\n @since Commons Collections 3.1\n"
8357,method,org/apache/commons/collections/functors/IfClosure/getFalseClosure/," Gets the closure called when false.\n \n @return the closure\n @since Commons Collections 3.1\n"
8369,class,org/apache/commons/collections/functors/ForClosure," Closure implementation that calls another closure n times, like a for loop.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8379,class,org/apache/commons/collections/functors/AllPredicate," Predicate implementation that returns true if all the\n predicates return true.\n If the array of predicates is empty, then this predicate returns true.\n <p>\n NOTE: In versions prior to 3.2 an array size of zero or one\n threw an exception.\n\n @since Commons Collections 3.0\n @version $Revision: 815431 $ $Date: 2009-09-15 20:11:17 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n @author Matt Benson\n @author Stephen Kestle\n"
8387,class,org/apache/commons/collections/functors/PredicateTransformer," Transformer implementation that calls a Predicate using the input object\n and then returns the result.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8388,method,org/apache/commons/collections/functors/PredicateTransformer/getInstance/Predicate," Factory method that performs validation.\n \n @param predicate  the predicate to call, not null\n @return the <code>predicate</code> transformer\n @throws IllegalArgumentException if the predicate is null\n"
8389,method,org/apache/commons/collections/functors/PredicateTransformer/transform/Object," Transforms the input to result by calling a predicate.\n \n @param input  the input object to transform\n @return the transformed result\n"
8391,method,org/apache/commons/collections/functors/PredicateTransformer/PredicateTransformer/Predicate," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n \n @param predicate  the predicate to call, not null\n"
8401,method,org/apache/commons/collections/functors/ConstantTransformer/equals/Object," {@inheritDoc}\n"
8402,method,org/apache/commons/collections/functors/ConstantTransformer/hashCode/," {@inheritDoc}\n"
8405,class,org/apache/commons/collections/functors/SwitchTransformer," Transformer implementation calls the transformer whose predicate returns true,\n like a switch statement.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8407,method,org/apache/commons/collections/functors/SwitchTransformer/getInstance/Map," Create a new Transformer that calls one of the transformers depending \n on the predicates. \n <p>\n The Map consists of Predicate keys and Transformer values. A transformer \n is called if its matching predicate returns true. Each predicate is evaluated\n until one returns true. If no predicates evaluate to true, the default\n transformer is called. The default transformer is set in the map with a \n null key. The ordering is that of the iterator() method on the entryset \n collection of the map.\n \n @param predicatesAndTransformers  a map of predicates to transformers\n @return the <code>switch</code> transformer\n @throws IllegalArgumentException if the map is null\n @throws IllegalArgumentException if any transformer in the map is null\n @throws ClassCastException  if the map elements are of the wrong type\n"
8408,method,org/apache/commons/collections/functors/SwitchTransformer/transform/Object," Transforms the input to result by calling the transformer whose matching\n predicate returns true.\n \n @param input  the input object to transform\n @return the transformed result\n"
8419,method,org/apache/commons/collections/functors/InstantiateTransformer/getInstance/," Get a typed no-arg instance.\n @param <T>\n @return Transformer<Class<? extends T>, T>\n"
8432,method,org/apache/commons/collections/functors/NotPredicate/NotPredicate/Predicate," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n \n @param predicate  the predicate to call after the null check\n"
8433,class,org/apache/commons/collections/functors/WhileClosure," Closure implementation that executes a closure repeatedly until a condition is met,\n like a do-while or while loop.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8442,method,org/apache/commons/collections/functors/ChainedTransformer/getInstance/Collection," Create a new Transformer that calls each transformer in turn, passing the \n result into the next transformer. The ordering is that of the iterator()\n method on the collection.\n \n @param transformers  a collection of transformers to chain\n @return the <code>chained</code> transformer\n @throws IllegalArgumentException if the transformers collection is null\n @throws IllegalArgumentException if any transformer in the collection is null\n"
8447,class,org/apache/commons/collections/functors/OnePredicate," Predicate implementation that returns true if only one of the\n predicates return true.\n If the array of predicates is empty, then this predicate returns false.\n <p>\n NOTE: In versions prior to 3.2 an array size of zero or one\n threw an exception.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n @author Matt Benson\n"
8450,method,org/apache/commons/collections/functors/OnePredicate/evaluate/Object," Evaluates the predicate returning true if only one decorated predicate\n returns true.\n \n @param object  the input object\n @return true if only one decorated predicate returns true\n"
8457,interface,org/apache/commons/collections/functors/Equator," <p>\n An equation function, which determines equality between objects of type T.\n </p>\n <p>\n It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to\n {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.\n </p>\n \n @param <T> the types of object this {@link Equator} can evaluate.\n @author Stephen Kestle\n @since 4.0\n"
8459,method,org/apache/commons/collections/functors/Equator/hash/Object," Calculates the hash for the object, based on the method of equality used in the equate\n method. This is used for classes that delegate their {@link #equals(Object)} method to an\n Equator (and so must also delegate their {@link #hashCode()} method), or for implementations\n of {@link HashedMap} that use an Equator for the key objects.\n \n @param o the object to calculate the hash for.\n @return the hash of the object.\n"
8462,method,org/apache/commons/collections/functors/NullIsTruePredicate/evaluate/Object," Evaluates the predicate returning the result of the decorated predicate\n once a null check is performed.\n \n @param object  the input object\n @return true if decorated predicate returns true or input is null\n"
8464,method,org/apache/commons/collections/functors/NullIsTruePredicate/NullIsTruePredicate/Predicate," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n \n @param predicate  the predicate to call after the null check\n"
8469,method,org/apache/commons/collections/functors/NullIsExceptionPredicate/NullIsExceptionPredicate/Predicate," Constructor that performs no validation.\n Use <code>getInstance</code> if you want that.\n \n @param predicate  the predicate to call after the null check\n"
8495,class,org/apache/commons/collections/iterators/FilterListIterator,"\n Decorates another {@link ListIterator} using a predicate to filter elements.\n <p>\n This iterator decorates the underlying iterator, only allowing through\n those elements that match the specified {@link Predicate Predicate}.\n\n @since Commons Collections 2.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Rodney Waldhoff\n"
8526,method,org/apache/commons/collections/iterators/EnumerationIterator/remove/," Removes the last retrieved element if a collection is attached.\n <p>\n Functions if an associated <code>Collection</code> is known.\n If so, the first occurrence of the last returned object from this\n iterator will be removed from the collection.\n\n @exception IllegalStateException <code>next()</code> not called.\n @exception UnsupportedOperationException if no associated collection\n"
8532,class,org/apache/commons/collections/iterators/EmptyIterator,"\n Provides an implementation of an empty iterator.\n <p>\n This class provides an implementation of an empty iterator.\n This class provides for binary compatability between Commons Collections\n 2.1.1 and 3.1 due to issues with <code>IteratorUtils</code>.\n\n @since Commons Collections 2.1.1 and 3.1\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8538,class,org/apache/commons/collections/iterators/UniqueFilterIterator," A FilterIterator which only returns "unique" Objects.  Internally,\n the Iterator maintains a Set of objects it has already encountered,\n and duplicate Objects are skipped.\n\n @since Commons Collections 2.1\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Morgan Delagrange\n"
8540,class,org/apache/commons/collections/iterators/ObjectArrayIterator,"\n An {@link Iterator} over an array of objects.\n <p>\n This iterator does not support {@link #remove}, as the object array cannot be\n structurally modified.\n <p>\n The iterator implements a {@link #reset} method, allowing the reset of the iterator\n back to the start if required.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author James Strachan\n @author Mauricio S. Moura\n @author Michael A. Smith\n @author Neil O'Toole\n @author Stephen Colebourne\n @author Phil Steitz\n"
8549,method,org/apache/commons/collections/iterators/ObjectArrayIterator/ObjectArrayIterator/," Constructor for use with <code>setArray</code>.\n <p>\n Using this constructor, the iterator is equivalent to an empty iterator\n until {@link #setArray} is  called to establish the array to iterate over.\n"
8557,class,org/apache/commons/collections/iterators/ListIteratorWrapper," Converts an {@link Iterator} into a {@link ResettableListIterator}.\n For plain <code>Iterator</code>s this is accomplished by caching the returned\n elements.  This class can also be used to simply add {@link ResettableIterator}\n functionality to a given {@link ListIterator}.\n <p>\n The <code>ListIterator</code> interface has additional useful methods\n for navigation - <code>previous()</code> and the index methods.\n This class allows a regular <code>Iterator</code> to behave as a\n <code>ListIterator</code>. It achieves this by building a list internally\n of as the underlying iterator is traversed.\n <p>\n The optional operations of <code>ListIterator</code> are not supported for plain <code>Iterator</code>s.\n <p>\n This class implements ResettableListIterator from Commons Collections 3.2.\n\n @since Commons Collections 2.1\n @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $\n\n @author Morgan Delagrange\n @author Stephen Colebourne\n @author Matt Benson\n"
8565,method,org/apache/commons/collections/iterators/ListIteratorWrapper/remove/," Throws {@link UnsupportedOperationException} if {@link #previous()} has ever been called.\n\n @throws UnsupportedOperationException always\n"
8574,method,org/apache/commons/collections/iterators/ArrayListIterator/previousIndex/," Gets the index of the item to be retrieved if {@link #previous()} is called.\n \n @return the index of the item to be retrieved next\n"
8578,method,org/apache/commons/collections/iterators/ArrayListIterator/ArrayListIterator/," Constructor for use with <code>setArray</code>.\n <p>\n Using this constructor, the iterator is equivalent to an empty iterator\n until {@link #setArray(Object)} is  called to establish the array to iterate over.\n"
8584,method,org/apache/commons/collections/iterators/LoopingListIterator/hasNext/," Returns whether this iterator has any more elements.\n <p>\n Returns false only if the list originally had zero elements, or\n all elements have been {@link #remove removed}.\n\n @return <code>true</code> if there are more elements\n"
8585,method,org/apache/commons/collections/iterators/LoopingListIterator/next/," Returns the next object in the list.\n <p>\n If at the end of the list, returns the first element.\n\n @return the object after the last element returned\n @throws NoSuchElementException if there are no elements in the list\n"
8587,method,org/apache/commons/collections/iterators/LoopingListIterator/hasPrevious/," Returns whether this iterator has any more previous elements.\n <p>\n Returns false only if the list originally had zero elements, or\n all elements have been {@link #remove removed}.\n\n @return <code>true</code> if there are more elements\n"
8595,method,org/apache/commons/collections/iterators/LoopingListIterator/LoopingListIterator/List," Constructor that wraps a list.\n <p>\n There is no way to reset a ListIterator instance without\n recreating it from the original source, so the List must be\n passed in and a reference to it held.\n\n @param list the list to wrap\n @throws NullPointerException if the list it null\n"
8621,class,org/apache/commons/collections/iterators/FilterIterator,"\n Decorates another {@link Iterator} using a predicate to filter elements.\n <p>\n This iterator decorates the underlying iterator, only allowing through\n those elements that match the specified {@link Predicate Predicate}.\n\n @since Commons Collections 1.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author James Strachan\n @author Jan Sorensen\n @author Ralph Wagner\n @author Stephen Colebourne\n"
8668,class,org/apache/commons/collections/iterators/ObjectArrayListIterator," Implements a {@link ListIterator} over an array of objects.\n <p>\n This iterator does not support {@link #add} or {@link #remove}, as the object array \n cannot be structurally modified. The {@link #set} method is supported however.\n <p>\n The iterator implements a {@link #reset} method, allowing the reset of the iterator\n back to the start if required.\n\n @see org.apache.commons.collections.iterators.ObjectArrayIterator\n @see java.util.Iterator\n @see java.util.ListIterator\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Neil O'Toole\n @author Stephen Colebourne\n @author Phil Steitz\n"
8690,method,org/apache/commons/collections/iterators/ObjectGraphIterator/ObjectGraphIterator/Iterator," Constructs a ObjectGraphIterator that will handle an iterator of iterators.\n <p>\n This constructor exists for convenience to emphasise that this class can\n be used to iterate over nested iterators. That is to say that the iterator\n passed in here contains other iterators, which may in turn contain further\n iterators.\n \n @param rootIterator  the root iterator, null will result in an empty iterator\n"
8706,method,org/apache/commons/collections/iterators/ArrayIterator/checkBound/int;String," Checks whether the index is valid or not.\n \n @param bound  the index to check\n @param type  the index type (for error messages)\n @throws IndexOutOfBoundsException if the index is invalid\n"
8713,method,org/apache/commons/collections/iterators/ArrayIterator/ArrayIterator/," Constructor for use with <code>setArray</code>.\n <p>\n Using this constructor, the iterator is equivalent to an empty iterator\n until {@link #setArray(Object)} is  called to establish the array to iterate over.\n"
8727,class,org/apache/commons/collections/iterators/EmptyListIterator," Provides an implementation of an empty list iterator.\n <p>\n This class provides an implementation of an empty list iterator. This class\n provides for binary compatability between Commons Collections 2.1.1 and 3.1\n due to issues with <code>IteratorUtils</code>.\n\n @since Commons Collections 2.1.1 and 3.1\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
8752,method,org/apache/commons/collections/iterators/SingletonListIterator/nextIndex/," Returns the index of the element that would be returned by a subsequent\n call to <tt>next</tt>.\n\n @return 0 or 1 depending on current state. \n"
8758,method,org/apache/commons/collections/iterators/SingletonListIterator/set/Object," Set sets the value of the singleton.\n\n @param obj  the object to set\n @throws IllegalStateException if <tt>next</tt> has not been called \n          or the object has been removed\n"
8765,method,org/apache/commons/collections/iterators/EntrySetMapIterator/getKey/," Gets the current key, which is the key returned by the last call\n to <code>next()</code>.\n\n @return the current key\n @throws IllegalStateException if <code>next()</code> has not yet been called\n"
8766,method,org/apache/commons/collections/iterators/EntrySetMapIterator/getValue/," Gets the current value, which is the value associated with the last key\n returned by <code>next()</code>.\n\n @return the current value\n @throws IllegalStateException if <code>next()</code> has not yet been called\n"
8767,method,org/apache/commons/collections/iterators/EntrySetMapIterator/setValue/Object," Sets the value associated with the current key.\n\n @param value  the new value\n @return the previous value\n @throws UnsupportedOperationException if setValue is not supported by the map\n @throws IllegalStateException if <code>next()</code> has not yet been called\n @throws IllegalStateException if <code>remove()</code> has been called since the\n  last call to <code>next()</code>\n"
8777,method,org/apache/commons/collections/iterators/LoopingIterator/hasNext/,"\n Has the iterator any more elements.\n <p>\n Returns false only if the collection originally had zero elements, or\n all the elements have been {@link #remove removed}.\n \n @return <code>true</code> if there are more elements\n"
8782,method,org/apache/commons/collections/iterators/LoopingIterator/LoopingIterator/Collection," Constructor that wraps a collection.\n <p>\n There is no way to reset an Iterator instance without recreating it from\n the original source, so the Collection must be passed in.\n \n @param coll  the collection to wrap\n @throws NullPointerException if the collection is null\n"
8802,field,org/apache/commons/collections/iterators/IteratorChain/isLocked," ComparatorChain is "locked" after the first time compare(Object,Object)\n is called\n"
8830,class,org/apache/commons/collections/iterators/ReverseListIterator," Iterates backwards through a List, starting with the last element\n and continuing to the first. This is useful for looping around\n a list in reverse order without needing to actually reverse the list.\n <p>\n The first call to <code>next()</code> will return the last element\n from the list, and so on. The <code>hasNext()</code> method works\n in concert with the <code>next()</code> method as expected.\n However, the <code>nextIndex()</code> method returns the correct\n index in the list, thus it starts high and reduces as the iteration\n continues. The previous methods work similarly.\n\n @author Serge Knystautas\n @author Stephen Colebourne\n @since Commons Collections 3.2\n @version $Revision: $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n"
8839,method,org/apache/commons/collections/iterators/ReverseListIterator/add/Object," Adds a new element to the list between the next and previous elements.\n\n @param obj  the object to add\n @throws UnsupportedOperationException if the list is unmodifiable\n @throws IllegalStateException if the iterator is not in a valid state for set\n"
8848,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/containsKey/Object," {@inheritDoc}\n"
8849,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/containsValue/Object," {@inheritDoc}\n"
8850,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/entrySet/," {@inheritDoc}\n"
8851,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/get/Object," {@inheritDoc}\n"
8852,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/remove/Object," {@inheritDoc}\n"
8853,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/isEmpty/," {@inheritDoc}\n"
8854,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/keySet/," {@inheritDoc}\n"
8855,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/size/," {@inheritDoc}\n"
8856,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/values/," {@inheritDoc}\n"
8858,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/equals/Object," {@inheritDoc}\n"
8859,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/hashCode/," {@inheritDoc}\n"
8860,method,org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator/toString/," {@inheritDoc}\n"
8865,method,org/apache/commons/collections/splitmap/TransformedMap/transformKey/Object," Transforms a key.\n <p>\n The transformer itself may throw an exception if necessary.\n\n @param object the object to transform\n @throws the transformed object\n"
8866,method,org/apache/commons/collections/splitmap/TransformedMap/transformValue/Object," Transforms a value.\n <p>\n The transformer itself may throw an exception if necessary.\n\n @param object the object to transform\n @throws the transformed object\n"
8867,method,org/apache/commons/collections/splitmap/TransformedMap/transformMap/Map," Transforms a map.\n <p>\n The transformer itself may throw an exception if necessary.\n\n @param map the map to transform\n @throws the transformed object\n"
8869,method,org/apache/commons/collections/splitmap/TransformedMap/put/Object;Object," {@inheritDoc}\n"
8870,method,org/apache/commons/collections/splitmap/TransformedMap/putAll/Map," {@inheritDoc}\n"
8871,method,org/apache/commons/collections/splitmap/TransformedMap/clear/," {@inheritDoc}\n"
8894,method,org/apache/commons/collections/buffer/PriorityBuffer/percolateDownMinHeap/int," Percolates element down heap from the position given by the index.\n <p>\n Assumes it is a minimum heap.\n\n @param index the index for the element\n"
8895,method,org/apache/commons/collections/buffer/PriorityBuffer/percolateDownMaxHeap/int," Percolates element down heap from the position given by the index.\n <p>\n Assumes it is a maximum heap.\n\n @param index the index of the element\n"
8896,method,org/apache/commons/collections/buffer/PriorityBuffer/percolateUpMinHeap/int," Percolates element up heap from the position given by the index.\n <p>\n Assumes it is a minimum heap.\n\n @param index the index of the element to be percolated up\n"
8897,method,org/apache/commons/collections/buffer/PriorityBuffer/percolateUpMinHeap/Object," Percolates a new element up heap from the bottom.\n <p>\n Assumes it is a minimum heap.\n\n @param element the element\n"
8898,method,org/apache/commons/collections/buffer/PriorityBuffer/percolateUpMaxHeap/int," Percolates element up heap from from the position given by the index.\n <p>\n Assume it is a maximum heap.\n\n @param index the index of the element to be percolated up\n"
8899,method,org/apache/commons/collections/buffer/PriorityBuffer/percolateUpMaxHeap/Object," Percolates a new element up heap from the bottom.\n <p>\n Assume it is a maximum heap.\n\n @param element the element\n"
8901,method,org/apache/commons/collections/buffer/PriorityBuffer/grow/," Increases the size of the heap to support additional elements\n"
8945,method,org/apache/commons/collections/buffer/BoundedFifoBuffer/BoundedFifoBuffer/Collection," Constructs a new <code>BoundedFifoBuffer</code> big enough to hold all\n of the elements in the specified collection. That collection's\n elements will also be added to the buffer.\n\n @param coll  the collection whose elements to add, may not be null\n @throws NullPointerException if the collection is null\n"
8946,class,org/apache/commons/collections/buffer/SynchronizedBuffer," Decorates another <code>Buffer</code> to synchronize its behaviour\n for a multi-threaded environment.\n <p>\n Methods are synchronized, then forwarded to the decorated buffer.\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @param <E> the type of the elements in the buffer\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
8967,method,org/apache/commons/collections/buffer/CircularFifoBuffer/CircularFifoBuffer/Collection," Constructor that creates a buffer from the specified collection.\n The collection size also sets the buffer size\n\n @param coll  the collection to copy into the buffer, may not be null\n @throws NullPointerException if the collection is null\n"
8968,class,org/apache/commons/collections/buffer/AbstractBufferDecorator," Decorates another <code>Buffer</code> to provide additional behaviour.\n <p>\n Methods are forwarded directly to the decorated buffer.\n\n @param <E> the type of the elements in the buffer\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
8974,class,org/apache/commons/collections/buffer/PredicatedBuffer," Decorates another <code>Buffer</code> to validate that additions\n match a specified predicate.\n <p>\n This buffer exists to provide validation for the decorated buffer.\n It is normally created to decorate an empty buffer.\n If an object cannot be added to the buffer, an IllegalArgumentException is thrown.\n <p>\n One usage would be to ensure that no null entries are added to the buffer.\n <pre>Buffer buffer = PredicatedBuffer.decorate(new UnboundedFifoBuffer(), NotNullPredicate.INSTANCE);</pre>\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Paul Jack\n"
8980,class,org/apache/commons/collections/buffer/BlockingBuffer," Decorates another <code>Buffer</code> to make {@link #get()} and\n {@link #remove()} block when the <code>Buffer</code> is empty.\n <p>\n If either <code>get</code> or <code>remove</code> is called on an empty\n <code>Buffer</code>, the calling thread waits for notification that\n an <code>add</code> or <code>addAll</code> operation has completed.\n <p>\n When one or more entries are added to an empty <code>Buffer</code>,\n all threads blocked in <code>get</code> or <code>remove</code> are notified.\n There is no guarantee that concurrent blocked <code>get</code> or\n <code>remove</code> requests will be "unblocked" and receive data in the\n order that they arrive.\n <p>\n This class is Serializable from Commons Collections 3.1.\n This class contains an extra field in 3.2, however the serialization\n specification will handle this gracefully.\n\n @author Stephen Colebourne\n @author Janek Bogucki\n @author Phil Steitz\n @author James Carman\n @param <E> the type of the elements in the buffer\n @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $\n @since Commons Collections 3.0\n"
9005,method,org/apache/commons/collections/bidimap/DualTreeBidiMap/inverseBidiMap/," {@inheritDoc}\n"
9036,class,org/apache/commons/collections/bidimap/DualHashBidiMap," Implementation of <code>BidiMap</code> that uses two <code>HashMap</code> instances.\n <p>\n Two <code>HashMap</code> instances are used in this class.\n This provides fast lookups at the expense of storing two sets of map entries.\n Commons Collections would welcome the addition of a direct hash-based\n implementation of the <code>BidiMap</code> interface.\n <p>\n NOTE: From Commons Collections 3.1, all subclasses will use <code>HashMap</code>\n and the flawed <code>createMap</code> method is ignored.\n\n @since Commons Collections 3.0\n @version $Id: DualHashBidiMap.java 966315 2010-07-21 17:03:58Z sebb $\n\n @author Matthew Hawthorne\n @author Stephen Colebourne\n"
9069,class,org/apache/commons/collections/bidimap/TreeBidiMap," Red-Black tree-based implementation of BidiMap where all objects added\n implement the <code>Comparable</code> interface.\n <p>\n This class guarantees that the map will be in both ascending key order\n and ascending value order, sorted according to the natural order for\n the key's and value's classes.\n <p>\n This Map is intended for applications that need to be able to look\n up a key-value pairing by either key or value, and need to do so\n with equal efficiency.\n <p>\n While that goal could be accomplished by taking a pair of TreeMaps\n and redirecting requests to the appropriate TreeMap (e.g.,\n containsKey would be directed to the TreeMap that maps values to\n keys, containsValue would be directed to the TreeMap that maps keys\n to values), there are problems with that implementation.\n If the data contained in the TreeMaps is large, the cost of redundant\n storage becomes significant. The {@link DualTreeBidiMap} and\n {@link DualHashBidiMap} implementations use this approach.\n <p>\n This solution keeps minimizes the data storage by holding data only once.\n The red-black algorithm is based on java util TreeMap, but has been modified\n to simultaneously map a tree node by key and by value. This doubles the\n cost of put operations (but so does using two TreeMaps), and nearly doubles\n the cost of remove operations (there is a savings in that the lookup of the\n node to be removed only has to be performed once). And since only one node\n contains the key and value, storage is significantly less than that\n required by two TreeMaps.\n <p>\n The Map.Entry instances returned by the appropriate methods will\n not allow setValue() and will throw an\n UnsupportedOperationException on attempts to call that method.\n\n @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Marc Johnson\n @author Stephen Colebourne\n @author Matt Benson\n"
9088,method,org/apache/commons/collections/bidimap/TreeBidiMap/mapIterator/," {@inheritDoc}\n"
9096,method,org/apache/commons/collections/bidimap/AbstractDualBidiMap/createBidiMap/Map;Map;BidiMap," Creates a new instance of the subclass.\n\n @param normalMap  the normal direction map\n @param reverseMap  the reverse direction map\n @param inverseMap  this map, which is the inverse in the new map\n @return the inverse map\n"
9109,method,org/apache/commons/collections/bidimap/AbstractDualBidiMap/mapIterator/," Obtains a <code>MapIterator</code> over the map.\n The iterator implements <code>ResetableMapIterator</code>.\n This implementation relies on the entrySet iterator.\n <p>\n The setValue() methods only allow a new value to be set.\n If the value being set is already in the map, an IllegalArgumentException\n is thrown (as setValue cannot change the size of the map).\n\n @return a map iterator\n"
9117,method,org/apache/commons/collections/bidimap/AbstractDualBidiMap/entrySet/," Gets an entrySet view of the map.\n Changes made on the set are reflected in the map.\n The set supports remove and clear but not add.\n <p>\n The Map Entry setValue() method only allow a new value to be set.\n If the value being set is already in the map, an IllegalArgumentException\n is thrown (as setValue cannot change the size of the map).\n\n @return the entrySet view\n"
9121,method,org/apache/commons/collections/bidimap/AbstractDualBidiMap/AbstractDualBidiMap/Map;Map;BidiMap," Constructs a map that decorates the specified maps,\n used by the subclass <code>createBidiMap</code> implementation.\n\n @param normalMap  the normal direction map\n @param reverseMap  the reverse direction map\n @param inverseBidiMap  the inverse BidiMap\n"
9199,class,org/apache/commons/collections/bidimap/AbstractOrderedBidiMapDecorator,"\n Provides a base decorator that enables additional functionality to be added\n to an OrderedBidiMap via decoration.\n <p>\n Methods are forwarded directly to the decorated map.\n <p>\n This implementation does not perform any special processing with the map views.\n Instead it simply returns the inverse from the wrapped map. This may be\n undesirable, for example if you are trying to write a validating implementation\n it would provide a loophole around the validation.\n But, you might want that loophole, so this class is kept simple.\n\n @since Commons Collections 3.0\n @version $Revision: 966315 $ $Date: 2010-07-21 19:03:58 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9208,class,org/apache/commons/collections/bidimap/AbstractSortedBidiMapDecorator,"\n Provides a base decorator that enables additional functionality to be added\n to a SortedBidiMap via decoration.\n <p>\n Methods are forwarded directly to the decorated map.\n <p>\n This implementation does not perform any special processing with the map views.\n Instead it simply returns the inverse from the wrapped map. This may be\n undesirable, for example if you are trying to write a validating implementation\n it would provide a loophole around the validation.\n But, you might want that loophole, so this class is kept simple.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9217,class,org/apache/commons/collections/bidimap/AbstractBidiMapDecorator,"\n Provides a base decorator that enables additional functionality to be added\n to a BidiMap via decoration.\n <p>\n Methods are forwarded directly to the decorated map.\n <p>\n This implementation does not perform any special processing with the map views.\n Instead it simply returns the set/collection from the wrapped map. This may be\n undesirable, for example if you are trying to write a validating implementation\n it would provide a loophole around the validation.\n But, you might want that loophole, so this class is kept simple.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9232,class,org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator," Provides a base decorator that allows additional functionality to be\n added to a {@link java.util.Map.Entry Map.Entry}.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9248,method,org/apache/commons/collections/keyvalue/MultiKey/toString/," Gets a debugging string version of the key.\n \n @return a debugging string\n"
9255,class,org/apache/commons/collections/keyvalue/UnmodifiableMapEntry," A {@link java.util.Map.Entry Map.Entry} that throws\n UnsupportedOperationException when <code>setValue</code> is called.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9261,method,org/apache/commons/collections/keyvalue/AbstractMapEntry/setValue/Object,"\n Sets the value stored in this <code>Map.Entry</code>.\n <p>\n This <code>Map.Entry</code> is not connected to a Map, so only the\n local data is changed.\n\n @param value  the new value\n @return the previous value\n"
9264,method,org/apache/commons/collections/keyvalue/AbstractMapEntry/AbstractMapEntry/Object;Object," Constructs a new entry with the given key and given value.\n\n @param key  the key for the entry, may be null\n @param value  the value for the entry, may be null\n"
9268,method,org/apache/commons/collections/keyvalue/AbstractKeyValue/toString/," Gets a debugging String view of the pair.\n \n @return a String view of the entry\n"
9269,method,org/apache/commons/collections/keyvalue/AbstractKeyValue/AbstractKeyValue/Object;Object," Constructs a new pair with the specified key and given value.\n\n @param key  the key for the entry, may be null\n @param value  the value for the entry, may be null\n"
9282,class,org/apache/commons/collections/keyvalue/DefaultMapEntry," A restricted implementation of {@link java.util.Map.Entry} that prevents\n the <code>Map.Entry</code> contract from being broken.\n\n @since Commons Collections 3.0\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author James Strachan\n @author Michael A. Smith\n @author Neil O'Toole\n @author Stephen Colebourne\n"
9286,class,org/apache/commons/collections/bag/TreeBag," Implements <code>SortedBag</code>, using a <code>TreeMap</code> to provide\n the data storage. This is the standard implementation of a sorted bag.\n <p>\n Order will be maintained among the bag members and can be viewed through the\n iterator.\n <p>\n A <code>Bag</code> stores each object in the collection together with a count\n of occurrences. Extra methods on the interface allow multiple copies of an\n object to be added or removed at once. It is important to read the interface\n javadoc carefully as several methods violate the <code>Collection</code>\n interface specification.\n\n @since Commons Collections 3.0 (previously in main package v2.0)\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Chuck Burdick\n @author Stephen Colebourne\n"
9291,method,org/apache/commons/collections/bag/TreeBag/getMap/," {@inheritDoc}\n"
9315,class,org/apache/commons/collections/bag/PredicatedSortedBag," Decorates another <code>SortedBag</code> to validate that additions\n match a specified predicate.\n <p>\n This bag exists to provide validation for the decorated bag.\n It is normally created to decorate an empty bag.\n If an object cannot be added to the bag, an IllegalArgumentException is thrown.\n <p>\n One usage would be to ensure that no null entries are added to the bag.\n <pre>SortedBag bag = PredicatedSortedBag.decorate(new TreeBag(), NotNullPredicate.INSTANCE);</pre>\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Paul Jack\n"
9342,class,org/apache/commons/collections/bag/PredicatedBag," Decorates another <code>Bag</code> to validate that additions\n match a specified predicate.\n <p>\n This bag exists to provide validation for the decorated bag.\n It is normally created to decorate an empty bag.\n If an object cannot be added to the bag, an IllegalArgumentException is thrown.\n <p>\n One usage would be to ensure that no null entries are added to the bag.\n <pre>Bag bag = PredicatedBag.decorate(new HashBag(), NotNullPredicate.INSTANCE);</pre>\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Paul Jack\n"
9350,class,org/apache/commons/collections/bag/HashBag," Implements <code>Bag</code>, using a <code>HashMap</code> to provide the\n data storage. This is the standard implementation of a bag.\n <p>\n A <code>Bag</code> stores each object in the collection together with a\n count of occurrences. Extra methods on the interface allow multiple copies\n of an object to be added or removed at once. It is important to read the\n interface javadoc carefully as several methods violate the\n <code>Collection</code> interface specification.\n\n @since Commons Collections 3.0 (previously in main package v2.0)\n @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $\n\n @author Chuck Burdick\n @author Stephen Colebourne\n"
9353,class,org/apache/commons/collections/bag/AbstractBagDecorator," Decorates another <code>Bag</code> to provide additional behaviour.\n <p>\n Methods are forwarded directly to the decorated bag.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9361,class,org/apache/commons/collections/bag/AbstractMapBag," Abstract implementation of the {@link Bag} interface to simplify the creation\n of subclass implementations.\n <p>\n Subclasses specify a Map implementation to use as the internal storage. The\n map will be used to map bag elements to a number; the number represents the\n number of occurrences of that element in the bag.\n\n @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $\n\n @author Chuck Burdick\n @author Michael A. Smith\n @author Stephen Colebourne\n @author Janek Bogucki\n @author Steve Clark\n"
9368,method,org/apache/commons/collections/bag/AbstractMapBag/iterator/," Gets an iterator over the bag elements. Elements present in the Bag more\n than once will be returned repeatedly.\n \n @return the iterator\n"
9371,method,org/apache/commons/collections/bag/AbstractMapBag/addAll/Collection," Invokes {@link #add(Object)} for each element in the given collection.\n \n @param coll the collection to add\n @return <code>true</code> if this call changed the bag\n"
9384,method,org/apache/commons/collections/bag/AbstractMapBag/toString/," Implement a toString() method suitable for debugging.\n \n @return a debugging toString\n"
9385,method,org/apache/commons/collections/bag/AbstractMapBag/AbstractMapBag/," Constructor needed for subclass serialisation.\n \n"
9400,class,org/apache/commons/collections/bag/AbstractSortedBagDecorator," Decorates another <code>SortedBag</code> to provide additional behaviour.\n <p>\n Methods are forwarded directly to the decorated bag.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9418,method,org/apache/commons/collections/set/CompositeSet/getCollections/," {@inheritDoc}\n"
9422,method,org/apache/commons/collections/set/CompositeSet/remove/Object," If a <code>CollectionMutator</code> is defined for this CompositeSet then this\n method will be called anyway.\n\n @param obj Object to be removed\n @return true if the object is removed, false otherwise\n"
9425,method,org/apache/commons/collections/set/CompositeSet/getMutator/," {@inheritDoc}\n"
9429,interface,org/apache/commons/collections/set/CompositeSet/SetMutator," Define callbacks for mutation operations.\n <p>\n Defining remove() on implementations of SetMutator is pointless\n as they are never called by CompositeSet.\n"
9430,method,org/apache/commons/collections/set/CompositeSet/SetMutator/resolveCollision/CompositeSet;Set;Set;Collection," <p>\n Called when a Set is added to the CompositeSet and there is a\n collision between existing and added sets.\n </p>\n <p>\n If <code>added</code> and <code>existing</code> still have any intersects\n after this method returns an IllegalArgumentException will be thrown.\n </p>\n @param comp The CompositeSet being modified\n @param existing The Set already existing in the composite\n @param added the Set being added to the composite\n @param intersects the intersection of th existing and added sets\n"
9431,class,org/apache/commons/collections/set/MapBackedSet," Decorates a <code>Map</code> to obtain <code>Set</code> behaviour.\n <p>\n This class is used to create a <code>Set</code> with the same properties as\n the key set of any map. Thus, a ReferenceSet can be created by wrapping a\n <code>ReferenceMap</code> in an instance of this class.\n <p>\n Most map implementation can be used to create a set by passing in dummy values.\n Exceptions include <code>BidiMap</code> implementations, as they require unique values.\n\n @since Commons Collections 3.1\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9451,class,org/apache/commons/collections/set/AbstractSetDecorator," Decorates another <code>Set</code> to provide additional behaviour.\n <p>\n Methods are forwarded directly to the decorated set.\n\n @param <E> the type of the elements in the set\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9464,class,org/apache/commons/collections/set/AbstractSortedSetDecorator," Decorates another <code>SortedSet</code> to provide additional behaviour.\n <p>\n Methods are forwarded directly to the decorated set.\n\n @param <E> the type of the elements in the sorted set\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9474,class,org/apache/commons/collections/set/SynchronizedSet," Decorates another <code>Set</code> to synchronize its behaviour for a\n multi-threaded environment.\n <p>\n Methods are synchronized, then forwarded to the decorated set.\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 815100 $ $Date: 2009-09-15 07:56:43 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
9479,class,org/apache/commons/collections/set/PredicatedSortedSet," Decorates another <code>SortedSet</code> to validate that all additions\n match a specified predicate.\n <p>\n This set exists to provide validation for the decorated set.\n It is normally created to decorate an empty set.\n If an object cannot be added to the set, an IllegalArgumentException is thrown.\n <p>\n One usage would be to ensure that no null entries are added to the set.\n <pre>SortedSet set = PredicatedSortedSet.decorate(new TreeSet(), NotNullPredicate.INSTANCE);</pre>\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Paul Jack\n"
9489,class,org/apache/commons/collections/set/SynchronizedSortedSet," Decorates another <code>SortedSet</code> to synchronize its behaviour\n for a multi-threaded environment.\n <p>\n Methods are synchronized, then forwarded to the decorated set.\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 815101 $ $Date: 2009-09-15 07:56:44 +0200 (Tue, 15 Sep 2009) $\n\n @author Stephen Colebourne\n"
9500,class,org/apache/commons/collections/set/PredicatedSet," Decorates another <code>Set</code> to validate that all additions\n match a specified predicate.\n <p>\n This set exists to provide validation for the decorated set.\n It is normally created to decorate an empty set.\n If an object cannot be added to the set, an IllegalArgumentException is thrown.\n <p>\n One usage would be to ensure that no null entries are added to the set.\n <pre>Set set = PredicatedSet.decorate(new HashSet(), NotNullPredicate.INSTANCE);</pre>\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Paul Jack\n"
9504,class,org/apache/commons/collections/set/AbstractSerializableSetDecorator," Serializable subclass of AbstractSetDecorator.\n\n @author Stephen Colebourne\n @since Commons Collections 3.1\n"
9522,class,org/apache/commons/collections/set/ListOrderedSet," Decorates another <code>Set</code> to ensure that the order of addition\n is retained and used by the iterator.\n <p>\n If an object is added to the set for a second time, it will remain in the\n original position in the iteration.\n The order can be observed from the set via the iterator or toArray methods.\n <p>\n The ListOrderedSet also has various useful direct methods. These include many\n from <code>List</code>, such as <code>get(int)</code>, <code>remove(int)</code>\n and <code>indexOf(int)</code>. An unmodifiable <code>List</code> view of\n the set can be obtained via <code>asList()</code>.\n <p>\n This class cannot implement the <code>List</code> interface directly as\n various interface methods (notably equals/hashCode) are incompatable with a set.\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Henning P. Schmiedehausen\n"
9565,method,org/apache/commons/collections/map/CompositeMap/addComposited/Map," Add an additional Map to the composite.\n\n @param map  the Map to be added to the composite\n @throws IllegalArgumentException if there is a key collision and there is no\n         MapMutator set to handle it.\n"
9567,method,org/apache/commons/collections/map/CompositeMap/clear/," Calls <code>clear()</code> on all composited Maps.\n\n @throws UnsupportedOperationException if any of the composited Maps do not support clear()\n"
9571,method,org/apache/commons/collections/map/CompositeMap/get/Object," Returns the value to which this map maps the specified key.  Returns\n <tt>null</tt> if the map contains no mapping for this key.  A return\n value of <tt>null</tt> does not <i>necessarily</i> indicate that the\n map contains no mapping for the key; it's also possible that the map\n explicitly maps the key to <tt>null</tt>.  The <tt>containsKey</tt>\n operation may be used to distinguish these two cases.\n\n <p>More formally, if this map contains a mapping from a key\n <tt>k</tt> to a value <tt>v</tt> such that <tt>(key==null ? k==null :\n key.equals(k))</tt>, then this method returns <tt>v</tt>; otherwise\n it returns <tt>null</tt>.  (There can be at most one such mapping.)\n\n @param key key whose associated value is to be returned.\n @return the value to which this map maps the specified key, or\n         <tt>null</tt> if the map contains no mapping for this key.\n\n @throws ClassCastException if the key is of an inappropriate type for\n         this map (optional).\n @throws NullPointerException key is <tt>null</tt> and this map does not\n         not permit <tt>null</tt> keys (optional).\n\n @see #containsKey(Object)\n"
9586,interface,org/apache/commons/collections/map/CompositeMap/MapMutator," This interface allows definition for all of the indeterminate\n mutators in a CompositeMap, as well as providing a hook for\n callbacks on key collisions.\n"
9587,method,org/apache/commons/collections/map/CompositeMap/MapMutator/resolveCollision/CompositeMap;Map;Map;Collection," Called when adding a new Composited Map results in a\n key collision.\n\n @param composite  the CompositeMap with the collision\n @param existing  the Map already in the composite which contains the\n        offending key\n @param added  the Map being added\n @param intersect  the intersection of the keysets of the existing and added maps\n"
9588,method,org/apache/commons/collections/map/CompositeMap/MapMutator/put/CompositeMap;Map[];Object;Object," Called when the CompositeMap.put() method is invoked.\n\n @param map  the CompositeMap which is being modified\n @param composited  array of Maps in the CompositeMap being modified\n @param key  key with which the specified value is to be associated.\n @param value  value to be associated with the specified key.\n @return previous value associated with specified key, or <tt>null</tt>\n         if there was no mapping for key.  A <tt>null</tt> return can\n         also indicate that the map previously associated <tt>null</tt>\n         with the specified key, if the implementation supports\n         <tt>null</tt> values.\n\n @throws UnsupportedOperationException if not defined\n @throws ClassCastException if the class of the specified key or value\n            prevents it from being stored in this map.\n @throws IllegalArgumentException if some aspect of this key or value\n            prevents it from being stored in this map.\n @throws NullPointerException this map does not permit <tt>null</tt>\n            keys or values, and the specified key or value is\n            <tt>null</tt>.\n"
9589,method,org/apache/commons/collections/map/CompositeMap/MapMutator/putAll/CompositeMap;Map[];Map," Called when the CompositeMap.putAll() method is invoked.\n\n @param map  the CompositeMap which is being modified\n @param composited  array of Maps in the CompositeMap being modified\n @param mapToAdd  Mappings to be stored in this CompositeMap\n\n @throws UnsupportedOperationException if not defined\n @throws ClassCastException if the class of the specified key or value\n            prevents it from being stored in this map.\n @throws IllegalArgumentException if some aspect of this key or value\n            prevents it from being stored in this map.\n @throws NullPointerException this map does not permit <tt>null</tt>\n            keys or values, and the specified key or value is\n            <tt>null</tt>.\n"
9591,method,org/apache/commons/collections/map/CaseInsensitiveMap/convertKey/Object," Overrides convertKey() from {@link AbstractHashedMap} to convert keys to \n lower case.\n <p>\n Returns {@link AbstractHashedMap#NULL} if key is null.\n \n @param key  the key convert\n @return the converted key\n"
9665,method,org/apache/commons/collections/map/MultiKeyMap/decorated/," {@inheritDoc}\n"
9677,method,org/apache/commons/collections/map/MultiValueMap/putAll/Map," Override superclass to ensure that MultiMap instances are\n correctly handled.\n <p>\n If you call this method with a normal map, each entry is\n added using <code>put(Object,Object)</code>.\n If you call this method with a multi map, each entry is\n added using <code>putAll(Object,Collection)</code>.\n\n @param map  the map to copy (either a normal or multi map)\n"
9705,method,org/apache/commons/collections/map/AbstractIterableMap/mapIterator/," {@inheritDoc}\n"
9742,class,org/apache/commons/collections/map/AbstractSortedMapDecorator,"\n Provides a base decorator that enables additional functionality to be added\n to a Map via decoration.\n <p>\n Methods are forwarded directly to the decorated map.\n <p>\n This implementation does not perform any special processing with the map views.\n Instead it simply returns the set/collection from the wrapped map. This may be\n undesirable, for example if you are trying to write a validating implementation\n it would provide a loophole around the validation.\n But, you might want that loophole, so this class is kept simple.\n\n @param <K> the type of the keys in the map\n @param <V> the type of the values in the map\n @since Commons Collections 3.0\n @version $Revision: 966368 $ $Date: 2010-07-21 21:07:52 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9752,method,org/apache/commons/collections/map/AbstractSortedMapDecorator/mapIterator/," {@inheritDoc}\n"
9756,method,org/apache/commons/collections/map/AbstractSortedMapDecorator/SortedMapIterator/reset/," {@inheritDoc}\n"
9757,method,org/apache/commons/collections/map/AbstractSortedMapDecorator/SortedMapIterator/hasPrevious/," {@inheritDoc}\n"
9758,method,org/apache/commons/collections/map/AbstractSortedMapDecorator/SortedMapIterator/previous/," {@inheritDoc}\n"
9829,method,org/apache/commons/collections/map/ReferenceIdentityMap/hashEntry/Object;Object," Gets the hash code for a MapEntry.\n <p>\n This implementation uses the identity hash code.\n \n @param key  the key to get a hash code for, may be null\n @param value  the value to get a hash code for, may be null\n @return the hash code, as per the MapEntry specification\n"
9830,method,org/apache/commons/collections/map/ReferenceIdentityMap/isEqualKey/Object;Object," Compares two keys for equals.\n <p>\n This implementation converts the key from the entry to a real reference\n before comparison and uses <code>==</code>.\n \n @param key1  the first key to compare passed in from outside\n @param key2  the second key extracted from the entry via <code>entry.key</code>\n @return true if equal by identity\n"
9837,class,org/apache/commons/collections/map/AbstractOrderedMapDecorator,"\n Provides a base decorator that enables additional functionality to be added\n to an OrderedMap via decoration.\n <p>\n Methods are forwarded directly to the decorated map.\n <p>\n This implementation does not perform any special processing with the map views.\n Instead it simply returns the set/collection from the wrapped map. This may be\n undesirable, for example if you are trying to write a validating implementation\n it would provide a loophole around the validation.\n But, you might want that loophole, so this class is kept simple.\n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9855,method,org/apache/commons/collections/map/AbstractLinkedMap/init/," Initialise this subclass during construction.\n <p>\n NOTE: As from v3.2 this method calls\n {@link #createEntry(HashEntry, int, Object, Object)} to create\n the map entry object.\n"
9860,method,org/apache/commons/collections/map/AbstractLinkedMap/nextKey/Object," Gets the next key in sequence.\n \n @param key  the key to get after\n @return the next key\n"
9862,method,org/apache/commons/collections/map/AbstractLinkedMap/previousKey/Object," Gets the previous key in sequence.\n \n @param key  the key to get before\n @return the previous key\n"
9866,method,org/apache/commons/collections/map/AbstractLinkedMap/removeEntry/HashEntry;int;HashEntry," Removes an entry from the map and the linked list.\n <p>\n This implementation removes the entry from the linked list chain, then\n calls the superclass implementation.\n \n @param entry  the entry to remove\n @param hashIndex  the index into the data structure\n @param previous  the previous entry in the chain\n"
9869,method,org/apache/commons/collections/map/AbstractLinkedMap/mapIterator/," {@inheritDoc}\n"
9900,field,org/apache/commons/collections/map/AbstractLinkedMap/LinkEntry/before,"The entry before this one in the order "
9901,field,org/apache/commons/collections/map/AbstractLinkedMap/LinkEntry/after,"The entry after this one in the order "
9917,method,org/apache/commons/collections/map/StaticBucketMap/size/," Gets the current size of the map.\n The value is computed fresh each time the method is called.\n \n @return the current size\n"
9934,class,org/apache/commons/collections/map/AbstractMapDecorator," Provides a base decorator that enables additional functionality to be added\n to a Map via decoration.\n <p>\n Methods are forwarded directly to the decorated map.\n <p>\n This implementation does not perform any special processing with\n {@link #entrySet()}, {@link #keySet()} or {@link #values()}. Instead\n it simply returns the set/collection from the wrapped map. This may be\n undesirable, for example if you are trying to write a validating\n implementation it would provide a loophole around the validation.\n But, you might want that loophole, so this class is kept simple.\n\n @param <K> the type of the keys in the map\n @param <V> the type of the values in the map\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Daniel Rall\n @author Stephen Colebourne\n"
9965,method,org/apache/commons/collections/map/LRUMap/doWriteObject/ObjectOutputStream," Writes the data necessary for <code>put()</code> to work in deserialization.\n"
9966,method,org/apache/commons/collections/map/LRUMap/doReadObject/ObjectInputStream," Reads the data necessary for <code>put()</code> to work in the superclass.\n"
9975,class,org/apache/commons/collections/map/SingletonMap," A <code>Map</code> implementation that holds a single item and is fixed size.\n <p>\n The single key/value pair is specified at creation.\n The map is fixed size so any action that would change the size is disallowed.\n However, the <code>put</code> or <code>setValue</code> methods can <i>change</i>\n the value associated with the key.\n <p>\n If trying to remove or clear the map, an UnsupportedOperationException is thrown.\n If trying to put a new mapping into the map, an  IllegalArgumentException is thrown.\n The put method will only suceed if the key specified is the same as the \n singleton key.\n <p>\n The key and value can be obtained by:\n <ul>\n <li>normal Map methods and views\n <li>the <code>MapIterator</code>, see {@link #mapIterator()}\n <li>the <code>KeyValue</code> interface (just cast - no object creation)\n </ul>\n\n @since Commons Collections 3.1\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
9993,method,org/apache/commons/collections/map/SingletonMap/mapIterator/," {@inheritDoc}\n"
9994,method,org/apache/commons/collections/map/SingletonMap/firstKey/," Gets the first (and only) key in the map.\n \n @return the key\n"
9995,method,org/apache/commons/collections/map/SingletonMap/lastKey/," Gets the last (and only) key in the map.\n \n @return the key\n"
10010,method,org/apache/commons/collections/map/AbstractHashedMap/init/," Initialise subclasses during construction, cloning or deserialization.\n"
10025,method,org/apache/commons/collections/map/AbstractHashedMap/getEntry/Object," Gets the entry mapped to the key specified.\n <p>\n This method exists for subclasses that may need to perform a multi-step\n process accessing the entry. The public methods in this class don't use this\n method to gain a small performance boost.\n\n @param key  the key\n @return the entry, null if no match\n"
10034,method,org/apache/commons/collections/map/AbstractHashedMap/checkCapacity/," Checks the capacity of the map and enlarges it if necessary.\n <p>\n This implementation uses the threshold to check if the map needs enlarging\n"
10171,method,org/apache/commons/collections/map/AbstractReferenceMap/init/," Initialise this subclass during construction, cloning or deserialization.\n"
10180,method,org/apache/commons/collections/map/AbstractReferenceMap/mapIterator/," Gets a MapIterator over the reference map.\n The iterator only returns valid key/value pairs.\n\n @return a map iterator\n"
10181,method,org/apache/commons/collections/map/AbstractReferenceMap/entrySet/," Returns a set view of this map's entries.\n An iterator returned entry is valid until <code>next()</code> is called again.\n The <code>setValue()</code> method on the <code>toArray</code> entries has no effect.\n\n @return a set view of this map's entries\n"
10190,method,org/apache/commons/collections/map/AbstractReferenceMap/isEqualKey/Object;Object," Compares two keys, in internal converted form, to see if they are equal.\n <p>\n This implementation converts the key from the entry to a real reference\n before comparison.\n\n @param key1  the first key to compare passed in from outside\n @param key2  the second key extracted from the entry via <code>entry.key</code>\n @return true if equal\n"
10201,field,org/apache/commons/collections/map/AbstractReferenceMap/purgeValues," Should the value be automatically purged when the associated key has been collected?\n"
10212,method,org/apache/commons/collections/map/AbstractReferenceMap/ReferenceEntry/getValue/," Gets the value from the entry.\n This method dereferences weak and soft value and thus may return null.\n\n @return the value, which may be null if it was garbage collected\n"
10221,method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/getKey/," {@inheritDoc}\n"
10222,method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/getValue/," {@inheritDoc}\n"
10223,method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/setValue/Object," {@inheritDoc}\n"
10224,method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/hasNext/," {@inheritDoc}\n"
10225,method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/next/," {@inheritDoc}\n"
10226,method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/reset/," {@inheritDoc}\n"
10227,method,org/apache/commons/collections/map/EntrySetToMapIteratorAdapter/remove/," {@inheritDoc}\n"
10255,method,org/apache/commons/collections/map/ListOrderedMap/put/int;Object;Object," Puts a key-value mapping into the map at the specified index.\n <p>\n If the map already contains the key, then the original mapping\n is removed and the new mapping added at the specified index.\n The remove may change the effect of the index. The index is\n always calculated relative to the original state of the map.\n <p>\n Thus the steps are: (1) remove the existing key-value mapping,\n then (2) insert the new key-value mapping at the position it\n would have been inserted had the remove not ocurred.\n\n @param index  the index at which the mapping should be inserted\n @param key  the key\n @param value  the value\n @return the value previously mapped to the key\n @throws IndexOutOfBoundsException if the index is out of range\n @since Commons Collections 3.2\n"
10264,method,org/apache/commons/collections/map/TransformedMap/transformKey/Object," Transforms a key.\n <p>\n The transformer itself may throw an exception if necessary.\n\n @param object  the object to transform\n @throws the transformed object\n"
10265,method,org/apache/commons/collections/map/TransformedMap/transformValue/Object," Transforms a value.\n <p>\n The transformer itself may throw an exception if necessary.\n\n @param object  the object to transform\n @throws the transformed object\n"
10266,method,org/apache/commons/collections/map/TransformedMap/transformMap/Map," Transforms a map.\n <p>\n The transformer itself may throw an exception if necessary.\n\n @param map  the map to transform\n @throws the transformed object\n"
10274,class,org/apache/commons/collections/collection/AbstractCollectionDecorator," Decorates another <code>Collection</code> to provide additional behaviour.\n <p>\n Each method call made on this <code>Collection</code> is forwarded to the\n decorated <code>Collection</code>. This class is used as a framework on which\n to build to extensions such as synchronized and unmodifiable behaviour. The\n main advantage of decoration is that one decorator can wrap any implementation\n of <code>Collection</code>, whereas sub-classing requires a new class to be\n written for each implementation.\n <p>\n This implementation does not perform any special processing with\n {@link #iterator()}. Instead it simply returns the value from the \n wrapped collection. This may be undesirable, for example if you are trying\n to write an unmodifiable implementation it might provide a loophole.\n\n @param <E> the type of the elements in the collection\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Paul Jack\n"
10295,class,org/apache/commons/collections/collection/AbstractUntypedCollectionDecorator," Decorates another <code>Collection</code> to provide additional behaviour\n without guaranteeing that the provided <code>Collection</code> type is the\n same as that of the decorated <code>Collection</code>.\n <p>\n Each untyped method call made on this <code>Collection</code> is forwarded to the\n decorated <code>Collection</code>. This class is used as a framework on which\n to build to extensions such as synchronized and unmodifiable behaviour. The\n main advantage of decoration is that one decorator can wrap any\n implementation of <code>Collection</code>, whereas sub-classing requires a\n new class to be written for each implementation.\n <p>\n This implementation does not perform any special processing with\n {@link #iterator()}. Instead it simply returns the value from the wrapped\n collection. This may be undesirable, for example if you are trying to write\n an unmodifiable implementation it might provide a loophole.\n\n @param <D> the type of the elements in the decorated collection\n @param <E> the element type of the Collection implementation\n @since Commons Collections 5\n @version $Revision$ $Date$\n\n @author Stephen Colebourne\n @author Paul Jack\n @author Matt Benson\n"
10312,class,org/apache/commons/collections/collection/UnmodifiableBoundedCollection," <code>UnmodifiableBoundedCollection</code> decorates another\n <code>BoundedCollection</code> to ensure it can't be altered.\n <p>\n If a BoundedCollection is first wrapped in some other collection decorator,\n such as synchronized or predicated, the BoundedCollection methods are no\n longer accessible.\n The factory on this class will attempt to retrieve the bounded nature by\n examining the package scope variables.\n <p>\n This class is Serializable from Commons Collections 3.1.\n <p>\n Attempts to modify it will result in an UnsupportedOperationException. \n\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n"
10324,method,org/apache/commons/collections/collection/UnmodifiableBoundedCollection/decorated/," {@inheritDoc}\n"
10337,method,org/apache/commons/collections/collection/TransformedCollection/transform/Object," Transforms an object.\n <p>\n The transformer itself may throw an exception if necessary.\n \n @param object  the object to transform\n @return a transformed object\n"
10338,method,org/apache/commons/collections/collection/TransformedCollection/transform/Collection," Transforms a collection.\n <p>\n The transformer itself may throw an exception if necessary.\n \n @param coll  the collection to transform\n @return a transformed object\n"
10343,class,org/apache/commons/collections/collection/PredicatedCollection," Decorates another <code>Collection</code> to validate that additions\n match a specified predicate.\n <p>\n This collection exists to provide validation for the decorated collection.\n It is normally created to decorate an empty collection.\n If an object cannot be added to the collection, an IllegalArgumentException is thrown.\n <p>\n One usage would be to ensure that no null entries are added to the collection.\n <pre>Collection coll = PredicatedCollection.decorate(new ArrayList(), NotNullPredicate.INSTANCE);</pre>\n <p>\n This class is Serializable from Commons Collections 3.1.\n\n @param <E> the type of the elements in the collection\n @since Commons Collections 3.0\n @version $Revision: 966327 $ $Date: 2010-07-21 19:39:49 +0200 (Wed, 21 Jul 2010) $\n\n @author Stephen Colebourne\n @author Paul Jack\n"
10372,field,org/apache/commons/collections/collection/SynchronizedCollection/lock,"The object to lock on, needed for List/SortedSet views "
10374,method,org/apache/commons/collections/collection/CompositeCollection/size/," Gets the size of this composite collection.\n <p>\n This implementation calls <code>size()</code> on each collection.\n\n @return total number of elements in all contained containers\n"
10375,method,org/apache/commons/collections/collection/CompositeCollection/isEmpty/," Checks whether this composite collection is empty.\n <p>\n This implementation calls <code>isEmpty()</code> on each collection.\n\n @return true if all of the contained collections are empty\n"
10376,method,org/apache/commons/collections/collection/CompositeCollection/contains/Object," Checks whether this composite collection contains the object.\n <p>\n This implementation calls <code>contains()</code> on each collection.\n\n @param obj  the object to search for\n @return true if obj is contained in any of the contained collections\n"
10377,method,org/apache/commons/collections/collection/CompositeCollection/iterator/," Gets an iterator over all the collections in this composite.\n <p>\n This implementation uses an <code>IteratorChain</code>.\n\n @return an <code>IteratorChain</code> instance which supports\n  <code>remove()</code>. Iteration occurs over contained collections in\n  the order they were added, but this behavior should not be relied upon.\n @see IteratorChain\n"
10382,method,org/apache/commons/collections/collection/CompositeCollection/containsAll/Collection," Checks whether this composite contains all the elements in the specified collection.\n <p>\n This implementation calls <code>contains()</code> for each element in the\n specified collection.\n\n @param coll  the collection to check for\n @return true if all elements contained\n"
10384,method,org/apache/commons/collections/collection/CompositeCollection/removeAll/Collection," Removes the elements in the specified collection from this composite collection.\n <p>\n This implementation calls <code>removeAll</code> on each collection.\n\n @param coll  the collection to remove\n @return true if the collection was modified\n @throws UnsupportedOperationException if removeAll is unsupported\n"
10385,method,org/apache/commons/collections/collection/CompositeCollection/retainAll/Collection," Retains all the elements in the specified collection in this composite collection,\n removing all others.\n <p>\n This implementation calls <code>retainAll()</code> on each collection.\n\n @param coll  the collection to remove\n @return true if the collection was modified\n @throws UnsupportedOperationException if retainAll is unsupported\n"
10386,method,org/apache/commons/collections/collection/CompositeCollection/clear/," Removes all of the elements from this collection .\n <p>\n This implementation calls <code>clear()</code> on each collection.\n\n @throws UnsupportedOperationException if clear is unsupported\n"
10402,method,org/apache/commons/collections/collection/CompositeCollection/CollectionMutator/add/CompositeCollection;List;Object," Called when an object is to be added to the composite.\n\n @param composite  the CompositeCollection being changed\n @param collections  all of the Collection instances in this CompositeCollection\n @param obj  the object being added\n @return true if the collection is changed\n @throws UnsupportedOperationException if add is unsupported\n @throws ClassCastException if the object cannot be added due to its type\n @throws NullPointerException if the object cannot be added because its null\n @throws IllegalArgumentException if the object cannot be added\n"
10403,method,org/apache/commons/collections/collection/CompositeCollection/CollectionMutator/addAll/CompositeCollection;List;Collection," Called when a collection is to be added to the composite.\n\n @param composite  the CompositeCollection being changed\n @param collections  all of the Collection instances in this CompositeCollection\n @param coll  the collection being added\n @return true if the collection is changed\n @throws UnsupportedOperationException if add is unsupported\n @throws ClassCastException if the object cannot be added due to its type\n @throws NullPointerException if the object cannot be added because its null\n @throws IllegalArgumentException if the object cannot be added\n"
10404,method,org/apache/commons/collections/collection/CompositeCollection/CollectionMutator/remove/CompositeCollection;List;Object," Called when an object is to be removed to the composite.\n\n @param composite  the CompositeCollection being changed\n @param collections  all of the Collection instances in this CompositeCollection\n @param obj  the object being removed\n @return true if the collection is changed\n @throws UnsupportedOperationException if removed is unsupported\n @throws ClassCastException if the object cannot be removed due to its type\n @throws NullPointerException if the object cannot be removed because its null\n @throws IllegalArgumentException if the object cannot be removed\n"
10405,class,java/io/Writer," Abstract class for writing to character streams.  The only methods that a\n subclass must implement are write(char[], int, int), flush(), and close().\n Most subclasses, however, will override some of the methods defined here in\n order to provide higher efficiency, additional functionality, or both.\n\n @see Writer\n @see   BufferedWriter\n @see   CharArrayWriter\n @see   FilterWriter\n @see   OutputStreamWriter\n @see     FileWriter\n @see   PipedWriter\n @see   PrintWriter\n @see   StringWriter\n @see Reader\n\n @version 	1.30, 10/03/23\n @author	Mark Reinhold\n @since	JDK1.1\n"
10407,method,java/io/Writer/write/char[]," Writes an array of characters.\n\n @param  cbuf\n         Array of characters to be written\n\n @throws  IOException\n          If an I/O error occurs\n"
10408,method,java/io/Writer/write/char[];int;int," Writes a portion of an array of characters.\n\n @param  cbuf\n         Array of characters\n\n @param  off\n         Offset from which to start writing characters\n\n @param  len\n         Number of characters to write\n\n @throws  IOException\n          If an I/O error occurs\n"
10409,method,java/io/Writer/write/String," Writes a string.\n\n @param  str\n         String to be written\n\n @throws  IOException\n          If an I/O error occurs\n"
10410,method,java/io/Writer/write/String;int;int," Writes a portion of a string.\n\n @param  str\n         A String\n\n @param  off\n         Offset from which to start writing characters\n\n @param  len\n         Number of characters to write\n\n @throws  IndexOutOfBoundsException\n          If <tt>off</tt> is negative, or <tt>len</tt> is negative,\n          or <tt>off+len</tt> is negative or greater than the length\n          of the given string\n\n @throws  IOException\n          If an I/O error occurs\n"
10411,method,java/io/Writer/append/CharSequence," Appends the specified character sequence to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(csq)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.write(csq.toString()) </pre>\n\n <p> Depending on the specification of <tt>toString</tt> for the\n character sequence <tt>csq</tt>, the entire sequence may not be\n appended. For instance, invoking the <tt>toString</tt> method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n\n @param  csq\n         The character sequence to append.  If <tt>csq</tt> is\n         <tt>null</tt>, then the four characters <tt>"null"</tt> are\n         appended to this writer.\n\n @return  This writer\n\n @throws  IOException\n          If an I/O error occurs\n\n @since  1.5\n"
10412,method,java/io/Writer/append/CharSequence;int;int," Appends a subsequence of the specified character sequence to this writer.\n <tt>Appendable</tt>.\n\n <p> An invocation of this method of the form <tt>out.append(csq, start,\n end)</tt> when <tt>csq</tt> is not <tt>null</tt> behaves in exactly the\n same way as the invocation\n\n <pre>\n     out.write(csq.subSequence(start, end).toString()) </pre>\n\n @param  csq\n         The character sequence from which a subsequence will be\n         appended.  If <tt>csq</tt> is <tt>null</tt>, then characters\n         will be appended as if <tt>csq</tt> contained the four\n         characters <tt>"null"</tt>.\n\n @param  start\n         The index of the first character in the subsequence\n\n @param  end\n         The index of the character following the last character in the\n         subsequence\n\n @return  This writer\n\n @throws  IndexOutOfBoundsException\n          If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>\n          is greater than <tt>end</tt>, or <tt>end</tt> is greater than\n          <tt>csq.length()</tt>\n\n @throws  IOException\n          If an I/O error occurs\n\n @since  1.5\n"
10413,method,java/io/Writer/append/char," Appends the specified character to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(c)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.write(c) </pre>\n\n @param  c\n         The 16-bit character to append\n\n @return  This writer\n\n @throws  IOException\n          If an I/O error occurs\n\n @since 1.5\n"
10414,method,java/io/Writer/flush/," Flushes the stream.  If the stream has saved any characters from the\n various write() methods in a buffer, write them immediately to their\n intended destination.  Then, if that destination is another character or\n byte stream, flush it.  Thus one flush() invocation will flush all the\n buffers in a chain of Writers and OutputStreams.\n \n <p> If the intended destination of this stream is an abstraction provided\n by the underlying operating system, for example a file, then flushing the\n stream guarantees only that bytes previously written to the stream are\n passed to the operating system for writing; it does not guarantee that\n they are actually written to a physical device such as a disk drive.\n\n @throws  IOException\n          If an I/O error occurs\n"
10416,method,java/io/Writer/Writer/," Creates a new character-stream writer whose critical sections will\n synchronize on the writer itself.\n"
10417,method,java/io/Writer/Writer/Object," Creates a new character-stream writer whose critical sections will\n synchronize on the given object.\n\n @param  lock\n         Object to synchronize on\n"
10419,class,java/io/WriteAbortedException," Signals that one of the ObjectStreamExceptions was thrown during a\n write operation.  Thrown during a read operation when one of the\n ObjectStreamExceptions was thrown during a write operation.  The \n exception that terminated the write can be found in the detail\n field. The stream is reset to it's initial state and all references\n to objects already deserialized are discarded.\n\n <p>As of release 1.4, this exception has been retrofitted to conform to\n the general purpose exception-chaining mechanism.  The "exception causing\n the abort" that is provided at construction time and\n accessed via the public {@link #detail} field is now known as the\n <i>cause</i>, and may be accessed via the {@link Throwable#getCause()}\n method, as well as the aforementioned "legacy field."\n\n @author  unascribed\n @version 1.22, 03/23/10\n @since   JDK1.1\n"
10421,method,java/io/WriteAbortedException/getCause/," Returns the exception that terminated the operation (the <i>cause</i>).\n\n @return  the exception that terminated the operation (the <i>cause</i>),\n          which may be null.\n @since   1.4\n"
10428,method,java/io/UTFDataFormatException/UTFDataFormatException/," Constructs a <code>UTFDataFormatException</code> with\n <code>null</code> as its error detail message.\n"
10432,class,java/io/StringWriter," A character stream that collects its output in a string buffer, which can\n then be used to construct a string.\n <p>\n Closing a <tt>StringWriter</tt> has no effect. The methods in this class\n can be called after the stream has been closed without generating an\n <tt>IOException</tt>.\n\n @version 	1.27, 10/03/23\n @author	Mark Reinhold\n @since	JDK1.1\n"
10437,method,java/io/StringWriter/append/CharSequence," Appends the specified character sequence to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(csq)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.write(csq.toString()) </pre>\n\n <p> Depending on the specification of <tt>toString</tt> for the\n character sequence <tt>csq</tt>, the entire sequence may not be\n appended. For instance, invoking the <tt>toString</tt> method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n\n @param  csq\n         The character sequence to append.  If <tt>csq</tt> is\n         <tt>null</tt>, then the four characters <tt>"null"</tt> are\n         appended to this writer.\n\n @return  This writer\n\n @since  1.5\n"
10438,method,java/io/StringWriter/append/CharSequence;int;int," Appends a subsequence of the specified character sequence to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(csq, start,\n end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in\n exactly the same way as the invocation\n\n <pre>\n     out.write(csq.subSequence(start, end).toString()) </pre>\n\n @param  csq\n         The character sequence from which a subsequence will be\n         appended.  If <tt>csq</tt> is <tt>null</tt>, then characters\n         will be appended as if <tt>csq</tt> contained the four\n         characters <tt>"null"</tt>.\n\n @param  start\n         The index of the first character in the subsequence\n\n @param  end\n         The index of the character following the last character in the\n         subsequence\n\n @return  This writer\n\n @throws  IndexOutOfBoundsException\n          If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>\n          is greater than <tt>end</tt>, or <tt>end</tt> is greater than\n          <tt>csq.length()</tt>\n\n @since  1.5\n"
10439,method,java/io/StringWriter/append/char," Appends the specified character to this writer. \n\n <p> An invocation of this method of the form <tt>out.append(c)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.write(c) </pre>\n\n @param  c\n         The 16-bit character to append\n\n @return  This writer\n\n @since 1.5\n"
10443,method,java/io/StringWriter/close/," Closing a <tt>StringWriter</tt> has no effect. The methods in this\n class can be called after the stream has been closed without generating\n an <tt>IOException</tt>.\n"
10445,method,java/io/StringWriter/StringWriter/int," Create a new string writer using the specified initial string-buffer\n size.\n\n @param initialSize\n        The number of <tt>char</tt> values that will fit into this buffer\n        before it is automatically expanded\n\n @throws IllegalArgumentException\n         If <tt>initialSize</tt> is negative\n"
10447,method,java/io/StringReader/read/," Reads a single character.\n\n @return     The character read, or -1 if the end of the stream has been\n             reached\n\n @exception  IOException  If an I/O error occurs\n"
10448,method,java/io/StringReader/read/char[];int;int," Reads characters into a portion of an array.\n\n @param      cbuf  Destination buffer\n @param      off   Offset at which to start writing characters\n @param      len   Maximum number of characters to read\n\n @return     The number of characters read, or -1 if the end of the\n             stream has been reached\n\n @exception  IOException  If an I/O error occurs\n"
10449,method,java/io/StringReader/skip/long," Skips the specified number of characters in the stream. Returns\n the number of characters that were skipped.\n\n <p>The <code>ns</code> parameter may be negative, even though the\n <code>skip</code> method of the {@link Reader} superclass throws\n an exception in this case. Negative values of <code>ns</code> cause the\n stream to skip backwards. Negative return values indicate a skip\n backwards. It is not possible to skip backwards past the beginning of\n the string.\n\n <p>If the entire string has been read or skipped, then this method has\n no effect and always returns 0.\n\n @exception  IOException  If an I/O error occurs\n"
10456,class,java/io/StringBufferInputStream," This class allows an application to create an input stream in\n which the bytes read are supplied by the contents of a string.\n Applications can also read bytes from a byte array by using a\n <code>ByteArrayInputStream</code>.\n <p>\n Only the low eight bits of each character in the string are used by\n this class.\n\n @author     Arthur van Hoff\n @version    1.28, 03/23/10\n @see        java.io.ByteArrayInputStream\n @see        java.io.StringReader\n @since      JDK1.0\n @deprecated This class does not properly convert characters into bytes.  As\n             of JDK&nbsp;1.1, the preferred way to create a stream from a\n             string is via the <code>StringReader</code> class.\n"
10466,class,java/io/StreamTokenizer," The <code>StreamTokenizer</code> class takes an input stream and\n parses it into "tokens", allowing the tokens to be\n read one at a time. The parsing process is controlled by a table\n and a number of flags that can be set to various states. The\n stream tokenizer can recognize identifiers, numbers, quoted\n strings, and various comment styles.\n <p>\n Each byte read from the input stream is regarded as a character\n in the range <code>'&#92;u0000'</code> through <code>'&#92;u00FF'</code>.\n The character value is used to look up five possible attributes of\n the character: <i>white space</i>, <i>alphabetic</i>,\n <i>numeric</i>, <i>string quote</i>, and <i>comment character</i>.\n Each character can have zero or more of these attributes.\n <p>\n In addition, an instance has four flags. These flags indicate:\n <ul>\n <li>Whether line terminators are to be returned as tokens or treated\n     as white space that merely separates tokens.\n <li>Whether C-style comments are to be recognized and skipped.\n <li>Whether C++-style comments are to be recognized and skipped.\n <li>Whether the characters of identifiers are converted to lowercase.\n </ul>\n <p>\n A typical application first constructs an instance of this class,\n sets up the syntax tables, and then repeatedly loops calling the\n <code>nextToken</code> method in each iteration of the loop until\n it returns the value <code>TT_EOF</code>.\n\n @author  James Gosling\n @version 1.48, 03/23/10\n @see     java.io.StreamTokenizer#nextToken()\n @see     java.io.StreamTokenizer#TT_EOF\n @since   JDK1.0\n"
10469,method,java/io/StreamTokenizer/whitespaceChars/int;int," Specifies that all characters <i>c</i> in the range\n <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\n are white space characters. White space characters serve only to\n separate tokens in the input stream.\n\n <p>Any other attribute settings for the characters in the specified\n range are cleared.\n\n @param   low   the low end of the range.\n @param   hi    the high end of the range.\n"
10471,method,java/io/StreamTokenizer/ordinaryChar/int," Specifies that the character argument is "ordinary"\n in this tokenizer. It removes any special significance the\n character has as a comment character, word component, string\n delimiter, white space, or number character. When such a character\n is encountered by the parser, the parser treats it as a\n single-character token and sets <code>ttype</code> field to the\n character value.\n\n <p>Making a line terminator character "ordinary" may interfere\n with the ability of a <code>StreamTokenizer</code> to count\n lines. The <code>lineno</code> method may no longer reflect\n the presence of such terminator characters in its line count.\n\n @param   ch   the character.\n @see     java.io.StreamTokenizer#ttype\n"
10473,method,java/io/StreamTokenizer/quoteChar/int," Specifies that matching pairs of this character delimit string\n constants in this tokenizer.\n <p>\n When the <code>nextToken</code> method encounters a string\n constant, the <code>ttype</code> field is set to the string\n delimiter and the <code>sval</code> field is set to the body of\n the string.\n <p>\n If a string quote character is encountered, then a string is\n recognized, consisting of all characters after (but not including)\n the string quote character, up to (but not including) the next\n occurrence of that same string quote character, or a line\n terminator, or end of file. The usual escape sequences such as\n <code>"&#92;n"</code> and <code>"&#92;t"</code> are recognized and\n converted to single characters as the string is parsed.\n\n <p>Any other attribute settings for the specified character are cleared.\n\n @param   ch   the character.\n @see     java.io.StreamTokenizer#nextToken()\n @see     java.io.StreamTokenizer#sval\n @see     java.io.StreamTokenizer#ttype\n"
10474,method,java/io/StreamTokenizer/parseNumbers/," Specifies that numbers should be parsed by this tokenizer. The\n syntax table of this tokenizer is modified so that each of the twelve\n characters:\n <blockquote><pre>\n      0 1 2 3 4 5 6 7 8 9 . -\n </pre></blockquote>\n <p>\n has the "numeric" attribute.\n <p>\n When the parser encounters a word token that has the format of a\n double precision floating-point number, it treats the token as a\n number rather than a word, by setting the <code>ttype</code>\n field to the value <code>TT_NUMBER</code> and putting the numeric\n value of the token into the <code>nval</code> field.\n\n @see     java.io.StreamTokenizer#nval\n @see     java.io.StreamTokenizer#TT_NUMBER\n @see     java.io.StreamTokenizer#ttype\n"
10475,method,java/io/StreamTokenizer/eolIsSignificant/boolean," Determines whether or not ends of line are treated as tokens.\n If the flag argument is true, this tokenizer treats end of lines\n as tokens; the <code>nextToken</code> method returns\n <code>TT_EOL</code> and also sets the <code>ttype</code> field to\n this value when an end of line is read.\n <p>\n A line is a sequence of characters ending with either a\n carriage-return character (<code>'&#92;r'</code>) or a newline\n character (<code>'&#92;n'</code>). In addition, a carriage-return\n character followed immediately by a newline character is treated\n as a single end-of-line token.\n <p>\n If the <code>flag</code> is false, end-of-line characters are\n treated as white space and serve only to separate tokens.\n\n @param   flag   <code>true</code> indicates that end-of-line characters\n                 are separate tokens; <code>false</code> indicates that\n                 end-of-line characters are white space.\n @see     java.io.StreamTokenizer#nextToken()\n @see     java.io.StreamTokenizer#ttype\n @see     java.io.StreamTokenizer#TT_EOL\n"
10476,method,java/io/StreamTokenizer/slashStarComments/boolean," Determines whether or not the tokenizer recognizes C-style comments.\n If the flag argument is <code>true</code>, this stream tokenizer\n recognizes C-style comments. All text between successive\n occurrences of <code>/*</code> and <code>*&#47;</code> are discarded.\n <p>\n If the flag argument is <code>false</code>, then C-style comments\n are not treated specially.\n\n @param   flag   <code>true</code> indicates to recognize and ignore\n                 C-style comments.\n"
10477,method,java/io/StreamTokenizer/slashSlashComments/boolean," Determines whether or not the tokenizer recognizes C++-style comments.\n If the flag argument is <code>true</code>, this stream tokenizer\n recognizes C++-style comments. Any occurrence of two consecutive\n slash characters (<code>'/'</code>) is treated as the beginning of\n a comment that extends to the end of the line.\n <p>\n If the flag argument is <code>false</code>, then C++-style\n comments are not treated specially.\n\n @param   flag   <code>true</code> indicates to recognize and ignore\n                 C++-style comments.\n"
10478,method,java/io/StreamTokenizer/lowerCaseMode/boolean," Determines whether or not word token are automatically lowercased.\n If the flag argument is <code>true</code>, then the value in the\n <code>sval</code> field is lowercased whenever a word token is\n returned (the <code>ttype</code> field has the\n value <code>TT_WORD</code> by the <code>nextToken</code> method\n of this tokenizer.\n <p>\n If the flag argument is <code>false</code>, then the\n <code>sval</code> field is not modified.\n\n @param   fl   <code>true</code> indicates that all word tokens should\n               be lowercased.\n @see     java.io.StreamTokenizer#nextToken()\n @see     java.io.StreamTokenizer#ttype\n @see     java.io.StreamTokenizer#TT_WORD\n"
10479,method,java/io/StreamTokenizer/nextToken/," Parses the next token from the input stream of this tokenizer.\n The type of the next token is returned in the <code>ttype</code>\n field. Additional information about the token may be in the\n <code>nval</code> field or the <code>sval</code> field of this\n tokenizer.\n <p>\n Typical clients of this\n class first set up the syntax tables and then sit in a loop\n calling nextToken to parse successive tokens until TT_EOF\n is returned.\n\n @return     the value of the <code>ttype</code> field.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.StreamTokenizer#nval\n @see        java.io.StreamTokenizer#sval\n @see        java.io.StreamTokenizer#ttype\n"
10480,method,java/io/StreamTokenizer/pushBack/," Causes the next call to the <code>nextToken</code> method of this\n tokenizer to return the current value in the <code>ttype</code>\n field, and not to modify the value in the <code>nval</code> or\n <code>sval</code> field.\n\n @see     java.io.StreamTokenizer#nextToken()\n @see     java.io.StreamTokenizer#nval\n @see     java.io.StreamTokenizer#sval\n @see     java.io.StreamTokenizer#ttype\n"
10485,field,java/io/StreamTokenizer/ttype," After a call to the <code>nextToken</code> method, this field\n contains the type of the token just read. For a single character\n token, its value is the single character, converted to an integer.\n For a quoted string token, its value is the quote character.\n Otherwise, its value is one of the following:\n <ul>\n <li><code>TT_WORD</code> indicates that the token is a word.\n <li><code>TT_NUMBER</code> indicates that the token is a number.\n <li><code>TT_EOL</code> indicates that the end of line has been read.\n     The field can only have this value if the\n     <code>eolIsSignificant</code> method has been called with the\n     argument <code>true</code>.\n <li><code>TT_EOF</code> indicates that the end of the input stream\n     has been reached.\n </ul>\n <p>\n The initial value of this field is -4.\n\n @see     java.io.StreamTokenizer#eolIsSignificant(boolean)\n @see     java.io.StreamTokenizer#nextToken()\n @see     java.io.StreamTokenizer#quoteChar(int)\n @see     java.io.StreamTokenizer#TT_EOF\n @see     java.io.StreamTokenizer#TT_EOL\n @see     java.io.StreamTokenizer#TT_NUMBER\n @see     java.io.StreamTokenizer#TT_WORD\n"
10495,class,java/io/SerializablePermission," This class is for Serializable permissions. A SerializablePermission\n contains a name (also referred to as a "target name") but\n no actions list; you either have the named permission\n or you don't.\n\n <P>\n The target name is the name of the Serializable permission (see below).\n\n <P>\n The following table lists all the possible SerializablePermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n <P>\n\n <table border=1 cellpadding=5 summary="Permission target name, what the permission allows, and associated risks">\n <tr>\n <th>Permission Target Name</th>\n <th>What the Permission Allows</th>\n <th>Risks of Allowing this Permission</th>\n </tr>\n\n <tr>\n   <td>enableSubclassImplementation</td>\n   <td>Subclass implementation of ObjectOutputStream or ObjectInputStream\n to override the default serialization or deserialization, respectively,\n of objects</td>\n   <td>Code can use this to serialize or\n deserialize classes in a purposefully malfeasant manner. For example,\n during serialization, malicious code can use this to\n purposefully store confidential private field data in a way easily accessible\n to attackers. Or, during deserialization it could, for example, deserialize\n a class with all its private fields zeroed out.</td>\n </tr>\n\n <tr>\n   <td>enableSubstitution</td>\n   <td>Substitution of one object for another during\n serialization or deserialization</td>\n   <td>This is dangerous because malicious code\n can replace the actual object with one which has incorrect or\n malignant data.</td>\n </tr>\n\n </table>\n\n @see java.security.BasicPermission\n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n @see java.lang.SecurityManager\n\n @version 1.24, 03/23/10\n\n @author Joe Fialli\n @since 1.2\n"
10500,method,java/io/SequenceInputStream/available/," Returns an estimate of the number of bytes that can be read (or\n skipped over) from the current underlying input stream without\n blocking by the next invocation of a method for the current\n underlying input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n <p>\n This method simply calls {@code available} of the current underlying\n input stream and returns the result.\n\n @return an estimate of the number of bytes that can be read (or\n         skipped over) from the current underlying input stream\n         without blocking or {@code 0} if this input stream\n         has been closed by invoking its {@link #close()} method\n @exception  IOException  if an I/O error occurs.\n\n @since   JDK1.1\n"
10501,method,java/io/SequenceInputStream/read/," Reads the next byte of data from this input stream. The byte is\n returned as an <code>int</code> in the range <code>0</code> to\n <code>255</code>. If no byte is available because the end of the\n stream has been reached, the value <code>-1</code> is returned.\n This method blocks until input data is available, the end of the\n stream is detected, or an exception is thrown.\n <p>\n This method\n tries to read one character from the current substream. If it\n reaches the end of the stream, it calls the <code>close</code>\n method of the current substream and begins reading from the next\n substream.\n\n @return     the next byte of data, or <code>-1</code> if the end of the\n             stream is reached.\n @exception  IOException  if an I/O error occurs.\n"
10502,method,java/io/SequenceInputStream/read/byte[];int;int," Reads up to <code>len</code> bytes of data from this input stream\n into an array of bytes.  If <code>len</code> is not zero, the method\n blocks until at least 1 byte of input is available; otherwise, no\n bytes are read and <code>0</code> is returned.\n <p>\n The <code>read</code> method of <code>SequenceInputStream</code>\n tries to read the data from the current substream. If it fails to\n read any characters because the substream has reached the end of\n the stream, it calls the <code>close</code> method of the current\n substream and begins reading from the next substream.\n\n @param      b     the buffer into which the data is read.\n @param      off   the start offset in array <code>b</code>\n                   at which the data is written.\n @param      len   the maximum number of bytes read.\n @return     int   the number of bytes read.\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>b.length - off</code>\n @exception  IOException  if an I/O error occurs.\n"
10506,class,java/io/Reader," Abstract class for reading character streams.  The only methods that a\n subclass must implement are read(char[], int, int) and close().  Most\n subclasses, however, will override some of the methods defined here in order\n to provide higher efficiency, additional functionality, or both.\n\n \n @see BufferedReader\n @see   LineNumberReader\n @see CharArrayReader\n @see InputStreamReader\n @see   FileReader\n @see FilterReader\n @see   PushbackReader\n @see PipedReader\n @see StringReader\n @see Writer\n\n @version 	1.31, 10/03/23\n @author	Mark Reinhold\n @since	JDK1.1\n"
10507,method,java/io/Reader/read/CharBuffer," Attempts to read characters into the specified character buffer.\n The buffer is used as a repository of characters as-is: the only\n changes made are the results of a put operation. No flipping or\n rewinding of the buffer is performed.\n\n @param target the buffer to read characters into\n @return The number of characters added to the buffer, or \n         -1 if this source of characters is at its end\n @throws IOException if an I/O error occurs\n @throws NullPointerException if target is null\n @throws ReadOnlyBufferException if target is a read only buffer\n @since 1.5\n"
10509,method,java/io/Reader/read/char[]," Reads characters into an array.  This method will block until some input\n is available, an I/O error occurs, or the end of the stream is reached.\n\n @param       cbuf  Destination buffer\n\n @return      The number of characters read, or -1 \n              if the end of the stream\n              has been reached\n\n @exception   IOException  If an I/O error occurs\n"
10510,method,java/io/Reader/read/char[];int;int," Reads characters into a portion of an array.  This method will block\n until some input is available, an I/O error occurs, or the end of the\n stream is reached.\n\n @param      cbuf  Destination buffer\n @param      off   Offset at which to start storing characters\n @param      len   Maximum number of characters to read\n\n @return     The number of characters read, or -1 if the end of the\n             stream has been reached\n\n @exception  IOException  If an I/O error occurs\n"
10511,method,java/io/Reader/skip/long," Skips characters.  This method will block until some characters are\n available, an I/O error occurs, or the end of the stream is reached.\n\n @param  n  The number of characters to skip\n\n @return    The number of characters actually skipped\n\n @exception  IllegalArgumentException  If <code>n</code> is negative.\n @exception  IOException  If an I/O error occurs\n"
10512,method,java/io/Reader/ready/," Tells whether this stream is ready to be read.\n\n @return True if the next read() is guaranteed not to block for input,\n false otherwise.  Note that returning false does not guarantee that the\n next read will block.\n\n @exception  IOException  If an I/O error occurs\n"
10514,method,java/io/Reader/mark/int," Marks the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point.  Not all\n character-input streams support the mark() operation.\n\n @param  readAheadLimit  Limit on the number of characters that may be\n                         read while still preserving the mark.  After\n                         reading this many characters, attempting to\n                         reset the stream may fail.\n\n @exception  IOException  If the stream does not support mark(),\n                          or if some other I/O error occurs\n"
10516,method,java/io/Reader/close/," Closes the stream and releases any system resources associated with\n it.  Once the stream has been closed, further read(), ready(),\n mark(), reset(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n\n @exception  IOException  If an I/O error occurs\n"
10517,method,java/io/Reader/Reader/," Creates a new character-stream reader whose critical sections will\n synchronize on the reader itself.\n"
10518,method,java/io/Reader/Reader/Object," Creates a new character-stream reader whose critical sections will\n synchronize on the given object.\n\n @param lock  The Object to synchronize on.\n"
10521,method,java/io/RandomAccessFile/getFD/," Returns the opaque file descriptor object associated with this\n stream. </p>\n\n @return     the file descriptor object associated with this stream.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FileDescriptor\n"
10523,method,java/io/RandomAccessFile/read/," Reads a byte of data from this file. The byte is returned as an \n integer in the range 0 to 255 (<code>0x00-0x0ff</code>). This \n method blocks if no input is yet available. \n <p>\n Although <code>RandomAccessFile</code> is not a subclass of \n <code>InputStream</code>, this method behaves in exactly the same \n way as the {@link InputStream#read()} method of \n <code>InputStream</code>.\n\n @return     the next byte of data, or <code>-1</code> if the end of the\n             file has been reached.\n @exception  IOException  if an I/O error occurs. Not thrown if  \n                          end-of-file has been reached.\n"
10525,method,java/io/RandomAccessFile/read/byte[]," Reads up to <code>b.length</code> bytes of data from this file \n into an array of bytes. This method blocks until at least one byte \n of input is available. \n <p>\n Although <code>RandomAccessFile</code> is not a subclass of \n <code>InputStream</code>, this method behaves in exactly the \n same way as the {@link InputStream#read(byte[])} method of \n <code>InputStream</code>.\n\n @param      b   the buffer into which the data is read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             this file has been reached.\n @exception  IOException If the first byte cannot be read for any reason\n other than end of file, or if the random access file has been closed, or if\n some other I/O error occurs.\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n"
10526,method,java/io/RandomAccessFile/readFully/byte[]," Reads <code>b.length</code> bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown. \n\n @param      b   the buffer into which the data is read.\n @exception  EOFException  if this file reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.       \n"
10527,method,java/io/RandomAccessFile/readFully/byte[];int;int," Reads exactly <code>len</code> bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown. \n\n @param      b     the buffer into which the data is read.\n @param      off   the start offset of the data.\n @param      len   the number of bytes to read.\n @exception  EOFException  if this file reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
10528,method,java/io/RandomAccessFile/skipBytes/int," Attempts to skip over <code>n</code> bytes of input discarding the \n skipped bytes. \n <p>\n \n This method may skip over some smaller number of bytes, possibly zero. \n This may result from any of a number of conditions; reaching end of \n file before <code>n</code> bytes have been skipped is only one \n possibility. This method never throws an <code>EOFException</code>. \n The actual number of bytes skipped is returned.  If <code>n</code> \n is negative, no bytes are skipped.\n\n @param      n   the number of bytes to be skipped.\n @return     the actual number of bytes skipped.\n @exception  IOException  if an I/O error occurs.\n"
10529,method,java/io/RandomAccessFile/write/int," Writes the specified byte to this file. The write starts at \n the current file pointer.\n\n @param      b   the <code>byte</code> to be written.\n @exception  IOException  if an I/O error occurs.\n"
10530,method,java/io/RandomAccessFile/write/byte[]," Writes <code>b.length</code> bytes from the specified byte array \n to this file, starting at the current file pointer. \n\n @param      b   the data.\n @exception  IOException  if an I/O error occurs.\n"
10531,method,java/io/RandomAccessFile/write/byte[];int;int," Writes <code>len</code> bytes from the specified byte array \n starting at offset <code>off</code> to this file. \n\n @param      b     the data.\n @param      off   the start offset in the data.\n @param      len   the number of bytes to write.\n @exception  IOException  if an I/O error occurs.\n"
10532,method,java/io/RandomAccessFile/getFilePointer/," Returns the current offset in this file. \n\n @return     the offset from the beginning of the file, in bytes,\n             at which the next read or write occurs.\n @exception  IOException  if an I/O error occurs.\n"
10533,method,java/io/RandomAccessFile/seek/long," Sets the file-pointer offset, measured from the beginning of this \n file, at which the next read or write occurs.  The offset may be \n set beyond the end of the file. Setting the offset beyond the end \n of the file does not change the file length.  The file length will \n change only by writing after the offset has been set beyond the end \n of the file. \n\n @param      pos   the offset position, measured in bytes from the \n                   beginning of the file, at which to set the file \n                   pointer.\n @exception  IOException  if <code>pos</code> is less than \n                          <code>0</code> or if an I/O error occurs.\n"
10534,method,java/io/RandomAccessFile/length/," Returns the length of this file.\n\n @return     the length of this file, measured in bytes.\n @exception  IOException  if an I/O error occurs.\n"
10535,method,java/io/RandomAccessFile/setLength/long," Sets the length of this file.\n\n <p> If the present length of the file as returned by the\n <code>length</code> method is greater than the <code>newLength</code>\n argument then the file will be truncated.  In this case, if the file\n offset as returned by the <code>getFilePointer</code> method is greater\n than <code>newLength</code> then after this method returns the offset\n will be equal to <code>newLength</code>.\n\n <p> If the present length of the file as returned by the\n <code>length</code> method is smaller than the <code>newLength</code>\n argument then the file will be extended.  In this case, the contents of\n the extended portion of the file are not defined.\n\n @param      newLength    The desired length of the file\n @exception  IOException  If an I/O error occurs\n @since      1.2\n"
10536,method,java/io/RandomAccessFile/close/," Closes this random access file stream and releases any system \n resources associated with the stream. A closed random access \n file cannot perform input or output operations and cannot be \n reopened.\n\n <p> If this file has an associated channel then the channel is closed\n as well.\n\n @exception  IOException  if an I/O error occurs.\n\n @revised 1.4\n @spec JSR-51\n"
10537,method,java/io/RandomAccessFile/readBoolean/," Reads a <code>boolean</code> from this file. This method reads a \n single byte from the file, starting at the current file pointer. \n A value of <code>0</code> represents \n <code>false</code>. Any other value represents <code>true</code>. \n This method blocks until the byte is read, the end of the stream \n is detected, or an exception is thrown. \n\n @return     the <code>boolean</code> value read.\n @exception  EOFException  if this file has reached the end.\n @exception  IOException   if an I/O error occurs.\n"
10538,method,java/io/RandomAccessFile/readByte/," Reads a signed eight-bit value from this file. This method reads a \n byte from the file, starting from the current file pointer. \n If the byte read is <code>b</code>, where \n <code>0&nbsp;&lt;=&nbsp;b&nbsp;&lt;=&nbsp;255</code>, \n then the result is:\n <blockquote><pre>\n     (byte)(b)\n </pre></blockquote>\n <p>\n This method blocks until the byte is read, the end of the stream \n is detected, or an exception is thrown. \n\n @return     the next byte of this file as a signed eight-bit\n             <code>byte</code>.\n @exception  EOFException  if this file has reached the end.\n @exception  IOException   if an I/O error occurs.\n"
10539,method,java/io/RandomAccessFile/readUnsignedByte/," Reads an unsigned eight-bit number from this file. This method reads \n a byte from this file, starting at the current file pointer, \n and returns that byte. \n <p>\n This method blocks until the byte is read, the end of the stream \n is detected, or an exception is thrown. \n\n @return     the next byte of this file, interpreted as an unsigned\n             eight-bit number.\n @exception  EOFException  if this file has reached the end.\n @exception  IOException   if an I/O error occurs.\n"
10540,method,java/io/RandomAccessFile/readShort/," Reads a signed 16-bit number from this file. The method reads two \n bytes from this file, starting at the current file pointer. \n If the two bytes read, in order, are \n <code>b1</code> and <code>b2</code>, where each of the two values is \n between <code>0</code> and <code>255</code>, inclusive, then the \n result is equal to:\n <blockquote><pre>\n     (short)((b1 &lt;&lt; 8) | b2)\n </pre></blockquote>\n <p>\n This method blocks until the two bytes are read, the end of the \n stream is detected, or an exception is thrown. \n\n @return     the next two bytes of this file, interpreted as a signed\n             16-bit number.\n @exception  EOFException  if this file reaches the end before reading\n               two bytes.\n @exception  IOException   if an I/O error occurs.\n"
10541,method,java/io/RandomAccessFile/readUnsignedShort/," Reads an unsigned 16-bit number from this file. This method reads \n two bytes from the file, starting at the current file pointer. \n If the bytes read, in order, are \n <code>b1</code> and <code>b2</code>, where \n <code>0&nbsp;&lt;=&nbsp;b1, b2&nbsp;&lt;=&nbsp;255</code>, \n then the result is equal to:\n <blockquote><pre>\n     (b1 &lt;&lt; 8) | b2\n </pre></blockquote>\n <p>\n This method blocks until the two bytes are read, the end of the \n stream is detected, or an exception is thrown. \n\n @return     the next two bytes of this file, interpreted as an unsigned\n             16-bit integer.\n @exception  EOFException  if this file reaches the end before reading\n               two bytes.\n @exception  IOException   if an I/O error occurs.\n"
10542,method,java/io/RandomAccessFile/readChar/," Reads a character from this file. This method reads two\n bytes from the file, starting at the current file pointer. \n If the bytes read, in order, are \n <code>b1</code> and <code>b2</code>, where \n <code>0&nbsp;&lt;=&nbsp;b1,&nbsp;b2&nbsp;&lt;=&nbsp;255</code>, \n then the result is equal to:\n <blockquote><pre>\n     (char)((b1 &lt;&lt; 8) | b2)\n </pre></blockquote>\n <p>\n This method blocks until the two bytes are read, the end of the \n stream is detected, or an exception is thrown. \n\n @return     the next two bytes of this file, interpreted as a\n		   <code>char</code>.\n @exception  EOFException  if this file reaches the end before reading\n               two bytes.\n @exception  IOException   if an I/O error occurs.\n"
10543,method,java/io/RandomAccessFile/readInt/," Reads a signed 32-bit integer from this file. This method reads 4 \n bytes from the file, starting at the current file pointer. \n If the bytes read, in order, are <code>b1</code>,\n <code>b2</code>, <code>b3</code>, and <code>b4</code>, where \n <code>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</code>, \n then the result is equal to:\n <blockquote><pre>\n     (b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4\n </pre></blockquote>\n <p>\n This method blocks until the four bytes are read, the end of the \n stream is detected, or an exception is thrown. \n\n @return     the next four bytes of this file, interpreted as an\n             <code>int</code>.\n @exception  EOFException  if this file reaches the end before reading\n               four bytes.\n @exception  IOException   if an I/O error occurs.\n"
10544,method,java/io/RandomAccessFile/readLong/," Reads a signed 64-bit integer from this file. This method reads eight\n bytes from the file, starting at the current file pointer. \n If the bytes read, in order, are \n <code>b1</code>, <code>b2</code>, <code>b3</code>, \n <code>b4</code>, <code>b5</code>, <code>b6</code>, \n <code>b7</code>, and <code>b8,</code> where:\n <blockquote><pre>\n     0 &lt;= b1, b2, b3, b4, b5, b6, b7, b8 &lt;=255,\n </pre></blockquote>\n <p>\n then the result is equal to:\n <p><blockquote><pre>\n     ((long)b1 &lt;&lt; 56) + ((long)b2 &lt;&lt; 48)\n     + ((long)b3 &lt;&lt; 40) + ((long)b4 &lt;&lt; 32)\n     + ((long)b5 &lt;&lt; 24) + ((long)b6 &lt;&lt; 16)\n     + ((long)b7 &lt;&lt; 8) + b8\n </pre></blockquote>\n <p>\n This method blocks until the eight bytes are read, the end of the \n stream is detected, or an exception is thrown. \n\n @return     the next eight bytes of this file, interpreted as a\n             <code>long</code>.\n @exception  EOFException  if this file reaches the end before reading\n               eight bytes.\n @exception  IOException   if an I/O error occurs.\n"
10546,method,java/io/RandomAccessFile/readDouble/," Reads a <code>double</code> from this file. This method reads a \n <code>long</code> value, starting at the current file pointer, \n as if by the <code>readLong</code> method \n and then converts that <code>long</code> to a <code>double</code> \n using the <code>longBitsToDouble</code> method in \n class <code>Double</code>.\n <p>\n This method blocks until the eight bytes are read, the end of the \n stream is detected, or an exception is thrown. \n\n @return     the next eight bytes of this file, interpreted as a\n             <code>double</code>.\n @exception  EOFException  if this file reaches the end before reading\n             eight bytes.\n @exception  IOException   if an I/O error occurs.\n @see        java.io.RandomAccessFile#readLong()\n @see        java.lang.Double#longBitsToDouble(long)\n"
10547,method,java/io/RandomAccessFile/readLine/," Reads the next line of text from this file.  This method successively\n reads bytes from the file, starting at the current file pointer, \n until it reaches a line terminator or the end\n of the file.  Each byte is converted into a character by taking the\n byte's value for the lower eight bits of the character and setting the\n high eight bits of the character to zero.  This method does not,\n therefore, support the full Unicode character set.\n\n <p> A line of text is terminated by a carriage-return character\n (<code>'&#92;r'</code>), a newline character (<code>'&#92;n'</code>), a\n carriage-return character immediately followed by a newline character,\n or the end of the file.  Line-terminating characters are discarded and\n are not included as part of the string returned.\n\n <p> This method blocks until a newline character is read, a carriage\n return and the byte following it are read (to see if it is a newline),\n the end of the file is reached, or an exception is thrown.\n\n @return     the next line of text from this file, or null if end\n             of file is encountered before even one byte is read.\n @exception  IOException  if an I/O error occurs.\n"
10548,method,java/io/RandomAccessFile/readUTF/," Reads in a string from this file. The string has been encoded \n using a\n <a href="DataInput.html#modified-utf-8">modified UTF-8</a>\n format. \n <p>\n The first two bytes are read, starting from the current file \n pointer, as if by \n <code>readUnsignedShort</code>. This value gives the number of \n following bytes that are in the encoded string, not\n the length of the resulting string. The following bytes are then \n interpreted as bytes encoding characters in the modified UTF-8 format \n and are converted into characters. \n <p>\n This method blocks until all the bytes are read, the end of the \n stream is detected, or an exception is thrown. \n\n @return     a Unicode string.\n @exception  EOFException            if this file reaches the end before\n               reading all the bytes.\n @exception  IOException             if an I/O error occurs.\n @exception  UTFDataFormatException  if the bytes do not represent \n               valid modified UTF-8 encoding of a Unicode string.\n @see        java.io.RandomAccessFile#readUnsignedShort()\n"
10549,method,java/io/RandomAccessFile/writeBoolean/boolean," Writes a <code>boolean</code> to the file as a one-byte value. The \n value <code>true</code> is written out as the value \n <code>(byte)1</code>; the value <code>false</code> is written out \n as the value <code>(byte)0</code>. The write starts at \n the current position of the file pointer.\n\n @param      v   a <code>boolean</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n"
10550,method,java/io/RandomAccessFile/writeByte/int," Writes a <code>byte</code> to the file as a one-byte value. The \n write starts at the current position of the file pointer.\n\n @param      v   a <code>byte</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n"
10551,method,java/io/RandomAccessFile/writeShort/int," Writes a <code>short</code> to the file as two bytes, high byte first. \n The write starts at the current position of the file pointer.\n\n @param      v   a <code>short</code> to be written.\n @exception  IOException  if an I/O error occurs.\n"
10552,method,java/io/RandomAccessFile/writeChar/int," Writes a <code>char</code> to the file as a two-byte value, high\n byte first. The write starts at the current position of the \n file pointer.\n\n @param      v   a <code>char</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n"
10553,method,java/io/RandomAccessFile/writeInt/int," Writes an <code>int</code> to the file as four bytes, high byte first. \n The write starts at the current position of the file pointer.\n\n @param      v   an <code>int</code> to be written.\n @exception  IOException  if an I/O error occurs.\n"
10554,method,java/io/RandomAccessFile/writeLong/long," Writes a <code>long</code> to the file as eight bytes, high byte first. \n The write starts at the current position of the file pointer.\n\n @param      v   a <code>long</code> to be written.\n @exception  IOException  if an I/O error occurs.\n"
10555,method,java/io/RandomAccessFile/writeFloat/float," Converts the float argument to an <code>int</code> using the \n <code>floatToIntBits</code> method in class <code>Float</code>, \n and then writes that <code>int</code> value to the file as a \n four-byte quantity, high byte first. The write starts at the \n current position of the file pointer.\n\n @param      v   a <code>float</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.lang.Float#floatToIntBits(float)\n"
10556,method,java/io/RandomAccessFile/writeDouble/double," Converts the double argument to a <code>long</code> using the \n <code>doubleToLongBits</code> method in class <code>Double</code>, \n and then writes that <code>long</code> value to the file as an \n eight-byte quantity, high byte first. The write starts at the current \n position of the file pointer.\n\n @param      v   a <code>double</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.lang.Double#doubleToLongBits(double)\n"
10557,method,java/io/RandomAccessFile/writeBytes/String," Writes the string to the file as a sequence of bytes. Each \n character in the string is written out, in sequence, by discarding \n its high eight bits. The write starts at the current position of \n the file pointer.\n\n @param      s   a string of bytes to be written.\n @exception  IOException  if an I/O error occurs.\n"
10558,method,java/io/RandomAccessFile/writeChars/String," Writes a string to the file as a sequence of characters. Each \n character is written to the data output stream as if by the \n <code>writeChar</code> method. The write starts at the current \n position of the file pointer.\n\n @param      s   a <code>String</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.RandomAccessFile#writeChar(int)\n"
10559,method,java/io/RandomAccessFile/writeUTF/String," Writes a string to the file using\n <a href="DataInput.html#modified-utf-8">modified UTF-8</a>\n encoding in a machine-independent manner. \n <p>\n First, two bytes are written to the file, starting at the \n current file pointer, as if by the \n <code>writeShort</code> method giving the number of bytes to \n follow. This value is the number of bytes actually written out, \n not the length of the string. Following the length, each character \n of the string is output, in sequence, using the modified UTF-8 encoding \n for each character. \n\n @param      str   a string to be written.\n @exception  IOException  if an I/O error occurs.\n"
10560,method,java/io/RandomAccessFile/RandomAccessFile/String;String," Creates a random access file stream to read from, and optionally \n to write to, a file with the specified name. A new \n {@link FileDescriptor} object is created to represent the \n connection to the file.\n \n <p> The <tt>mode</tt> argument specifies the access mode with which the\n file is to be opened.  The permitted values and their meanings are as\n specified for the <a\n href="#mode"><tt>RandomAccessFile(File,String)</tt></a> constructor.\n\n <p>\n If there is a security manager, its <code>checkRead</code> method\n is called with the <code>name</code> argument\n as its argument to see if read access to the file is allowed.\n If the mode allows writing, the security manager's\n <code>checkWrite</code> method\n is also called with the <code>name</code> argument\n as its argument to see if write access to the file is allowed.\n\n @param      name   the system-dependent filename\n @param      mode   the access <a href="#mode">mode</a>\n @exception  IllegalArgumentException  if the mode argument is not equal\n               to one of <tt>"r"</tt>, <tt>"rw"</tt>, <tt>"rws"</tt>, or\n               <tt>"rwd"</tt>\n @exception FileNotFoundException\n            if the mode is <tt>"r"</tt> but the given string does not\n            denote an existing regular file, or if the mode begins with\n            <tt>"rw"</tt> but the given string does not denote an\n            existing, writable regular file and a new regular file of\n            that name cannot be created, or if some other error occurs\n            while opening or creating the file\n @exception  SecurityException         if a security manager exists and its\n               <code>checkRead</code> method denies read access to the file\n               or the mode is "rw" and the security manager's\n               <code>checkWrite</code> method denies write access to the file\n @see        java.lang.SecurityException\n @see        java.lang.SecurityManager#checkRead(java.lang.String)\n @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n @revised 1.4\n @spec JSR-51\n"
10565,method,java/io/PushbackReader/unread/int," Pushes back a single character by copying it to the front of the\n pushback buffer. After this method returns, the next character to be read\n will have the value <code>(char)c</code>.\n\n @param  c  The int value representing a character to be pushed back\n\n @exception  IOException  If the pushback buffer is full,\n                          or if some other I/O error occurs\n"
10568,method,java/io/PushbackReader/ready/," Tells whether this stream is ready to be read.\n\n @exception  IOException  If an I/O error occurs\n"
10572,method,java/io/PushbackReader/close/," Closes the stream and releases any system resources associated with\n it. Once the stream has been closed, further read(),\n unread(), ready(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n\n @exception  IOException  If an I/O error occurs\n"
10573,method,java/io/PushbackReader/skip/long," Skips characters.  This method will block until some characters are\n available, an I/O error occurs, or the end of the stream is reached.\n\n @param  n  The number of characters to skip\n\n @return    The number of characters actually skipped\n\n @exception  IllegalArgumentException  If <code>n</code> is negative.\n @exception  IOException  If an I/O error occurs\n"
10576,class,java/io/PushbackInputStream," A <code>PushbackInputStream</code> adds\n functionality to another input stream, namely\n the  ability to "push back" or "unread"\n one byte. This is useful in situations where\n it is  convenient for a fragment of code\n to read an indefinite number of data bytes\n that  are delimited by a particular byte\n value; after reading the terminating byte,\n the  code fragment can "unread" it, so that\n the next read operation on the input stream\n will reread the byte that was pushed back.\n For example, bytes representing the  characters\n constituting an identifier might be terminated\n by a byte representing an  operator character;\n a method whose job is to read just an identifier\n can read until it  sees the operator and\n then push the operator back to be re-read.\n\n @author  David Connelly\n @author  Jonathan Payne\n @version 1.44, 03/23/10\n @since   JDK1.0\n"
10577,method,java/io/PushbackInputStream/read/," Reads the next byte of data from this input stream. The value \n byte is returned as an <code>int</code> in the range \n <code>0</code> to <code>255</code>. If no byte is available \n because the end of the stream has been reached, the value \n <code>-1</code> is returned. This method blocks until input data \n is available, the end of the stream is detected, or an exception \n is thrown. \n\n <p> This method returns the most recently pushed-back byte, if there is\n one, and otherwise calls the <code>read</code> method of its underlying\n input stream and returns whatever value that method returns.\n\n @return     the next byte of data, or <code>-1</code> if the end of the\n             stream has been reached.\n @exception  IOException  if this input stream has been closed by\n		   invoking its {@link #close()} method,\n		   or an I/O error occurs. \n @see        java.io.InputStream#read()\n"
10578,method,java/io/PushbackInputStream/read/byte[];int;int," Reads up to <code>len</code> bytes of data from this input stream into\n an array of bytes.  This method first reads any pushed-back bytes; after\n that, if fewer than <code>len</code> bytes have been read then it\n reads from the underlying input stream. If <code>len</code> is not zero, the method\n blocks until at least 1 byte of input is available; otherwise, no\n bytes are read and <code>0</code> is returned.\n\n @param      b     the buffer into which the data is read.\n @param      off   the start offset in the destination array <code>b</code>\n @param      len   the maximum number of bytes read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the stream has been reached.\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>b.length - off</code>\n @exception  IOException  if this input stream has been closed by\n		   invoking its {@link #close()} method,\n		   or an I/O error occurs. \n @see        java.io.InputStream#read(byte[], int, int)\n"
10579,method,java/io/PushbackInputStream/unread/int," Pushes back a byte by copying it to the front of the pushback buffer.\n After this method returns, the next byte to be read will have the value\n <code>(byte)b</code>.\n\n @param      b   the <code>int</code> value whose low-order \n 			byte is to be pushed back.\n @exception IOException If there is not enough room in the pushback\n		  buffer for the byte, or this input stream has been closed by\n		  invoking its {@link #close()} method.\n"
10580,method,java/io/PushbackInputStream/unread/byte[];int;int," Pushes back a portion of an array of bytes by copying it to the front\n of the pushback buffer.  After this method returns, the next byte to be\n read will have the value <code>b[off]</code>, the byte after that will\n have the value <code>b[off+1]</code>, and so forth.\n\n @param b the byte array to push back.\n @param off the start offset of the data.\n @param len the number of bytes to push back.\n @exception IOException If there is not enough room in the pushback\n		  buffer for the specified number of bytes,\n		  or this input stream has been closed by\n		  invoking its {@link #close()} method.\n @since     JDK1.1\n"
10581,method,java/io/PushbackInputStream/unread/byte[]," Pushes back an array of bytes by copying it to the front of the\n pushback buffer.  After this method returns, the next byte to be read\n will have the value <code>b[0]</code>, the byte after that will have the\n value <code>b[1]</code>, and so forth.\n\n @param b the byte array to push back\n @exception IOException If there is not enough room in the pushback\n		  buffer for the specified number of bytes,\n		  or this input stream has been closed by\n		  invoking its {@link #close()} method.\n @since     JDK1.1\n"
10582,method,java/io/PushbackInputStream/available/," Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n\n <p> The method returns the sum of the number of bytes that have been\n pushed back and the value returned by {@link\n java.io.FilterInputStream#available available}.\n\n @return     the number of bytes that can be read (or skipped over) from\n             the input stream without blocking.\n @exception  IOException  if this input stream has been closed by\n 		   invoking its {@link #close()} method,\n		   or an I/O error occurs.\n @see        java.io.FilterInputStream#in\n @see        java.io.InputStream#available()\n"
10583,method,java/io/PushbackInputStream/skip/long," Skips over and discards <code>n</code> bytes of data from this \n input stream. The <code>skip</code> method may, for a variety of \n reasons, end up skipping over some smaller number of bytes, \n possibly zero.  If <code>n</code> is negative, no bytes are skipped.\n \n <p> The <code>skip</code> method of <code>PushbackInputStream</code>\n first skips over the bytes in the pushback buffer, if any.  It then\n calls the <code>skip</code> method of the underlying input stream if\n more bytes need to be skipped.  The actual number of bytes skipped\n is returned.\n\n @param	   n  {@inheritDoc} \n @return     {@inheritDoc}\n @exception  IOException  if the stream does not support seek,\n		  or the stream has been closed by\n		  invoking its {@link #close()} method,\n		  or an I/O error occurs.  \n @see        java.io.FilterInputStream#in\n @see        java.io.InputStream#skip(long n)\n @since      1.2\n"
10585,method,java/io/PushbackInputStream/mark/int," Marks the current position in this input stream.\n\n <p> The <code>mark</code> method of <code>PushbackInputStream</code>\n does nothing.\n \n @param   readlimit   the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n @see     java.io.InputStream#reset()\n"
10586,method,java/io/PushbackInputStream/reset/," Repositions this stream to the position at the time the\n <code>mark</code> method was last called on this input stream.\n\n <p> The method <code>reset</code> for class\n <code>PushbackInputStream</code> does nothing except throw an\n <code>IOException</code>.\n\n @exception  IOException  if this method is invoked.\n @see     java.io.InputStream#mark(int)\n @see     java.io.IOException\n"
10587,method,java/io/PushbackInputStream/close/," Closes this input stream and releases any system resources \n associated with the stream. \n Once the stream has been closed, further read(), unread(),\n available(), reset(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n\n @exception  IOException  if an I/O error occurs.\n"
10592,class,java/io/PrintWriter," Prints formatted representations of objects to a text-output stream.  This\n class implements all of the <tt>print</tt> methods found in {@link\n PrintStream}.  It does not contain methods for writing raw bytes, for which\n a program should use unencoded byte streams.\n\n <p> Unlike the {@link PrintStream} class, if automatic flushing is enabled\n it will be done only when one of the <tt>println</tt>, <tt>printf</tt>, or\n <tt>format</tt> methods is invoked, rather than whenever a newline character\n happens to be output.  These methods use the platform's own notion of line\n separator rather than the newline character.\n\n <p> Methods in this class never throw I/O exceptions, although some of its\n constructors may.  The client may inquire as to whether any errors have\n occurred by invoking {@link #checkError checkError()}.\n\n @version 	1.44, 03/23/10\n @author	Frank Yellin\n @author	Mark Reinhold\n @since	JDK1.1\n"
10595,method,java/io/PrintWriter/checkError/," Flushes the stream if it's not closed and checks its error state.\n\n @return <code>true</code> if the print stream has encountered an error,\n 		either on the underlying output stream or during a format\n		conversion.\n"
10596,method,java/io/PrintWriter/setError/," Indicates that an error has occurred.\n\n <p> This method will cause subsequent invocations of {@link\n #checkError()} to return <tt>true</tt> until {@link\n #clearError()} is invoked.\n"
10597,method,java/io/PrintWriter/clearError/," Clears the error state of this stream.\n\n <p> This method will cause subsequent invocations of {@link\n #checkError()} to return <tt>false</tt> until another write\n operation fails and invokes {@link #setError()}.\n\n @since 1.6\n"
10600,method,java/io/PrintWriter/write/char[]," Writes an array of characters.  This method cannot be inherited from the\n Writer class because it must suppress I/O exceptions.\n @param buf Array of characters to be written\n"
10602,method,java/io/PrintWriter/write/String," Writes a string.  This method cannot be inherited from the Writer class\n because it must suppress I/O exceptions.\n @param s String to be written\n"
10612,method,java/io/PrintWriter/println/," Terminates the current line by writing the line separator string.  The\n line separator string is defined by the system property\n <code>line.separator</code>, and is not necessarily a single newline\n character (<code>'\n'</code>).\n"
10613,method,java/io/PrintWriter/println/boolean," Prints a boolean value and then terminates the line.  This method behaves\n as though it invokes <code>{@link #print(boolean)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x the <code>boolean</code> value to be printed\n"
10614,method,java/io/PrintWriter/println/char," Prints a character and then terminates the line.  This method behaves as\n though it invokes <code>{@link #print(char)}</code> and then <code>{@link\n #println()}</code>.\n\n @param x the <code>char</code> value to be printed\n"
10615,method,java/io/PrintWriter/println/int," Prints an integer and then terminates the line.  This method behaves as\n though it invokes <code>{@link #print(int)}</code> and then <code>{@link\n #println()}</code>.\n\n @param x the <code>int</code> value to be printed\n"
10616,method,java/io/PrintWriter/println/long," Prints a long integer and then terminates the line.  This method behaves\n as though it invokes <code>{@link #print(long)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x the <code>long</code> value to be printed\n"
10617,method,java/io/PrintWriter/println/float," Prints a floating-point number and then terminates the line.  This method\n behaves as though it invokes <code>{@link #print(float)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x the <code>float</code> value to be printed\n"
10618,method,java/io/PrintWriter/println/double," Prints a double-precision floating-point number and then terminates the\n line.  This method behaves as though it invokes <code>{@link\n #print(double)}</code> and then <code>{@link #println()}</code>.\n\n @param x the <code>double</code> value to be printed\n"
10619,method,java/io/PrintWriter/println/char[]," Prints an array of characters and then terminates the line.  This method\n behaves as though it invokes <code>{@link #print(char[])}</code> and then\n <code>{@link #println()}</code>.\n\n @param x the array of <code>char</code> values to be printed\n"
10620,method,java/io/PrintWriter/println/String," Prints a String and then terminates the line.  This method behaves as\n though it invokes <code>{@link #print(String)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x the <code>String</code> value to be printed\n"
10621,method,java/io/PrintWriter/println/Object," Prints an Object and then terminates the line.  This method calls\n at first String.valueOf(x) to get the printed object's string value,\n then behaves as\n though it invokes <code>{@link #print(String)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  The <code>Object</code> to be printed.\n"
10622,method,java/io/PrintWriter/printf/String;Object[]," A convenience method to write a formatted string to this writer using\n the specified format string and arguments.  If automatic flushing is\n enabled, calls to this method will flush the output buffer.\n\n <p> An invocation of this method of the form <tt>out.printf(format,\n args)</tt> behaves in exactly the same way as the invocation\n\n <pre>\n     out.format(format, args) </pre>\n\n @param  format\n         A format string as described in <a\n         href="../util/Formatter.html#syntax">Format string syntax</a>.\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.  The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href="../util/Formatter.html#syntax">conversion</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section of the\n          formatter class specification.\n\n @throws  NullPointerException\n          If the <tt>format</tt> is <tt>null</tt>\n\n @return  This writer\n\n @since  1.5\n"
10623,method,java/io/PrintWriter/printf/Locale;String;Object[]," A convenience method to write a formatted string to this writer using\n the specified format string and arguments.  If automatic flushing is\n enabled, calls to this method will flush the output buffer.\n\n <p> An invocation of this method of the form <tt>out.printf(l, format,\n args)</tt> behaves in exactly the same way as the invocation\n\n <pre>\n     out.format(l, format, args) </pre>\n\n @param  l\n         The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.\n\n @param  format\n         A format string as described in <a\n         href="../util/Formatter.html#syntax">Format string syntax</a>.\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.  The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href="../util/Formatter.html#syntax">conversion</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section of the\n          formatter class specification.\n\n @throws  NullPointerException\n          If the <tt>format</tt> is <tt>null</tt>\n\n @return  This writer\n\n @since  1.5\n"
10626,method,java/io/PrintWriter/append/CharSequence," Appends the specified character sequence to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(csq)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.write(csq.toString()) </pre>\n\n <p> Depending on the specification of <tt>toString</tt> for the\n character sequence <tt>csq</tt>, the entire sequence may not be\n appended. For instance, invoking the <tt>toString</tt> method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n\n @param  csq\n         The character sequence to append.  If <tt>csq</tt> is\n         <tt>null</tt>, then the four characters <tt>"null"</tt> are\n         appended to this writer.\n\n @return  This writer\n\n @since  1.5\n"
10627,method,java/io/PrintWriter/append/CharSequence;int;int," Appends a subsequence of the specified character sequence to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(csq, start,\n end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in\n exactly the same way as the invocation\n\n <pre>\n     out.write(csq.subSequence(start, end).toString()) </pre>\n\n @param  csq\n         The character sequence from which a subsequence will be\n         appended.  If <tt>csq</tt> is <tt>null</tt>, then characters\n         will be appended as if <tt>csq</tt> contained the four\n         characters <tt>"null"</tt>.\n\n @param  start\n         The index of the first character in the subsequence\n\n @param  end\n         The index of the character following the last character in the\n         subsequence\n\n @return  This writer\n\n @throws  IndexOutOfBoundsException\n          If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>\n          is greater than <tt>end</tt>, or <tt>end</tt> is greater than\n          <tt>csq.length()</tt>\n\n @since  1.5\n"
10628,method,java/io/PrintWriter/append/char," Appends the specified character to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(c)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.write(c) </pre>\n\n @param  c\n         The 16-bit character to append\n\n @return  This writer\n\n @since 1.5\n"
10631,method,java/io/PrintWriter/PrintWriter/OutputStream," Creates a new PrintWriter, without automatic line flushing, from an\n existing OutputStream.  This convenience constructor creates the\n necessary intermediate OutputStreamWriter, which will convert characters\n into bytes using the default character encoding.\n\n @param  out        An output stream\n\n @see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)\n"
10632,method,java/io/PrintWriter/PrintWriter/OutputStream;boolean," Creates a new PrintWriter from an existing OutputStream.  This\n convenience constructor creates the necessary intermediate\n OutputStreamWriter, which will convert characters into bytes using the\n default character encoding.\n\n @param  out        An output stream\n @param  autoFlush  A boolean; if true, the <tt>println</tt>,\n                    <tt>printf</tt>, or <tt>format</tt> methods will\n                    flush the output buffer\n\n @see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)\n"
10633,method,java/io/PrintWriter/PrintWriter/String," Creates a new PrintWriter, without automatic line flushing, with the\n specified file name.  This convenience constructor creates the necessary\n intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},\n which will encode characters using the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n @param  fileName\n         The name of the file to use as the destination of this writer.\n         If the file exists then it will be truncated to zero size;\n         otherwise, a new file will be created.  The output will be\n         written to the file and is buffered.\n\n @throws  FileNotFoundException\n          If the given string does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(fileName)} denies write\n          access to the file\n\n @since  1.5\n"
10634,method,java/io/PrintWriter/PrintWriter/String;String," Creates a new PrintWriter, without automatic line flushing, with the\n specified file name and charset.  This convenience constructor creates\n the necessary intermediate {@link java.io.OutputStreamWriter\n OutputStreamWriter}, which will encode characters using the provided\n charset.\n\n @param  fileName\n         The name of the file to use as the destination of this writer.\n         If the file exists then it will be truncated to zero size;\n         otherwise, a new file will be created.  The output will be\n         written to the file and is buffered.\n\n @param  csn\n         The name of a supported {@linkplain java.nio.charset.Charset\n         charset}\n\n @throws  FileNotFoundException\n          If the given string does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(fileName)} denies write\n          access to the file\n\n @throws  UnsupportedEncodingException\n          If the named charset is not supported\n\n @since  1.5\n"
10635,method,java/io/PrintWriter/PrintWriter/File," Creates a new PrintWriter, without automatic line flushing, with the\n specified file.  This convenience constructor creates the necessary\n intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},\n which will encode characters using the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n @param  file\n         The file to use as the destination of this writer.  If the file\n         exists then it will be truncated to zero size; otherwise, a new\n         file will be created.  The output will be written to the file\n         and is buffered.\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(file.getPath())}\n          denies write access to the file\n\n @since  1.5\n"
10636,method,java/io/PrintWriter/PrintWriter/File;String," Creates a new PrintWriter, without automatic line flushing, with the\n specified file and charset.  This convenience constructor creates the\n necessary intermediate {@link java.io.OutputStreamWriter\n OutputStreamWriter}, which will encode characters using the provided\n charset.\n\n @param  file\n         The file to use as the destination of this writer.  If the file\n         exists then it will be truncated to zero size; otherwise, a new\n         file will be created.  The output will be written to the file\n         and is buffered.\n\n @param  csn\n         The name of a supported {@linkplain java.nio.charset.Charset\n         charset}\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(file.getPath())}\n          denies write access to the file\n\n @throws  UnsupportedEncodingException\n          If the named charset is not supported\n\n @since  1.5\n"
10641,method,java/io/PrintStream/checkError/," Flushes the stream and checks its error state. The internal error state\n is set to <code>true</code> when the underlying output stream throws an\n <code>IOException</code> other than <code>InterruptedIOException</code>,\n and when the <code>setError</code> method is invoked.  If an operation\n on the underlying output stream throws an\n <code>InterruptedIOException</code>, then the <code>PrintStream</code>\n converts the exception back into an interrupt by doing:\n <pre>\n     Thread.currentThread().interrupt();\n </pre>\n or the equivalent.\n\n @return <code>true</code> if and only if this stream has encountered an\n         <code>IOException</code> other than\n         <code>InterruptedIOException</code>, or the\n         <code>setError</code> method has been invoked\n"
10642,method,java/io/PrintStream/setError/," Sets the error state of the stream to <code>true</code>.\n\n <p> This method will cause subsequent invocations of {@link\n #checkError()} to return <tt>true</tt> until {@link\n #clearError()} is invoked.\n\n @since JDK1.1\n"
10643,method,java/io/PrintStream/clearError/," Clears the internal error state of this stream.\n\n <p> This method will cause subsequent invocations of {@link\n #checkError()} to return <tt>false</tt> until another write\n operation fails and invokes {@link #setError()}.\n\n @since 1.6\n"
10644,method,java/io/PrintStream/write/int," Writes the specified byte to this stream.  If the byte is a newline and\n automatic flushing is enabled then the <code>flush</code> method will be\n invoked.\n\n <p> Note that the byte is written as given; to write a character that\n will be translated according to the platform's default character\n encoding, use the <code>print(char)</code> or <code>println(char)</code>\n methods.\n\n @param  b  The byte to be written\n @see #print(char)\n @see #println(char)\n"
10645,method,java/io/PrintStream/write/byte[];int;int," Writes <code>len</code> bytes from the specified byte array starting at\n offset <code>off</code> to this stream.  If automatic flushing is\n enabled then the <code>flush</code> method will be invoked.\n\n <p> Note that the bytes will be written as given; to write characters\n that will be translated according to the platform's default character\n encoding, use the <code>print(char)</code> or <code>println(char)</code>\n methods.\n\n @param  buf   A byte array\n @param  off   Offset from which to start taking bytes\n @param  len   Number of bytes to write\n"
10655,method,java/io/PrintStream/println/," Terminates the current line by writing the line separator string.  The\n line separator string is defined by the system property\n <code>line.separator</code>, and is not necessarily a single newline\n character (<code>'\n'</code>).\n"
10656,method,java/io/PrintStream/println/boolean," Prints a boolean and then terminate the line.  This method behaves as\n though it invokes <code>{@link #print(boolean)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  The <code>boolean</code> to be printed\n"
10657,method,java/io/PrintStream/println/char," Prints a character and then terminate the line.  This method behaves as\n though it invokes <code>{@link #print(char)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  The <code>char</code> to be printed.\n"
10658,method,java/io/PrintStream/println/int," Prints an integer and then terminate the line.  This method behaves as\n though it invokes <code>{@link #print(int)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  The <code>int</code> to be printed.\n"
10659,method,java/io/PrintStream/println/long," Prints a long and then terminate the line.  This method behaves as\n though it invokes <code>{@link #print(long)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  a The <code>long</code> to be printed.\n"
10660,method,java/io/PrintStream/println/float," Prints a float and then terminate the line.  This method behaves as\n though it invokes <code>{@link #print(float)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  The <code>float</code> to be printed.\n"
10661,method,java/io/PrintStream/println/double," Prints a double and then terminate the line.  This method behaves as\n though it invokes <code>{@link #print(double)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  The <code>double</code> to be printed.\n"
10662,method,java/io/PrintStream/println/char[]," Prints an array of characters and then terminate the line.  This method\n behaves as though it invokes <code>{@link #print(char[])}</code> and\n then <code>{@link #println()}</code>.\n\n @param x  an array of chars to print.\n"
10663,method,java/io/PrintStream/println/String," Prints a String and then terminate the line.  This method behaves as\n though it invokes <code>{@link #print(String)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  The <code>String</code> to be printed.\n"
10664,method,java/io/PrintStream/println/Object," Prints an Object and then terminate the line.  This method calls\n at first String.valueOf(x) to get the printed object's string value,\n then behaves as\n though it invokes <code>{@link #print(String)}</code> and then\n <code>{@link #println()}</code>.\n\n @param x  The <code>Object</code> to be printed.\n"
10665,method,java/io/PrintStream/printf/String;Object[]," A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.\n\n <p> An invocation of this method of the form <tt>out.printf(format,\n args)</tt> behaves in exactly the same way as the invocation\n\n <pre>\n     out.format(format, args) </pre>\n\n @param  format\n         A format string as described in <a\n         href="../util/Formatter.html#syntax">Format string syntax</a>\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.  The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href="../util/Formatter.html#syntax">conversion</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section of the\n          formatter class specification.\n\n @throws  NullPointerException\n          If the <tt>format</tt> is <tt>null</tt>\n\n @return  This output stream\n\n @since  1.5\n"
10668,method,java/io/PrintStream/format/Locale;String;Object[]," Writes a formatted string to this output stream using the specified\n format string and arguments.\n\n @param  l\n         The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.\n\n @param  format\n         A format string as described in <a\n         href="../util/Formatter.html#syntax">Format string syntax</a>\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.  The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href="../util/Formatter.html#syntax">conversion</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section of the\n          formatter class specification.\n\n @throws  NullPointerException\n          If the <tt>format</tt> is <tt>null</tt>\n\n @return  This output stream\n\n @since  1.5\n"
10669,method,java/io/PrintStream/append/CharSequence," Appends the specified character sequence to this output stream.\n\n <p> An invocation of this method of the form <tt>out.append(csq)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.print(csq.toString()) </pre>\n\n <p> Depending on the specification of <tt>toString</tt> for the\n character sequence <tt>csq</tt>, the entire sequence may not be\n appended.  For instance, invoking then <tt>toString</tt> method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n\n @param  csq\n         The character sequence to append.  If <tt>csq</tt> is\n         <tt>null</tt>, then the four characters <tt>"null"</tt> are\n         appended to this output stream.\n\n @return  This output stream\n\n @since  1.5\n"
10670,method,java/io/PrintStream/append/CharSequence;int;int," Appends a subsequence of the specified character sequence to this output\n stream. \n \n <p> An invocation of this method of the form <tt>out.append(csq, start,\n end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in\n exactly the same way as the invocation\n\n <pre>\n     out.print(csq.subSequence(start, end).toString()) </pre>\n\n @param  csq\n         The character sequence from which a subsequence will be\n         appended.  If <tt>csq</tt> is <tt>null</tt>, then characters\n         will be appended as if <tt>csq</tt> contained the four\n         characters <tt>"null"</tt>.\n\n @param  start\n         The index of the first character in the subsequence\n\n @param  end\n         The index of the character following the last character in the\n         subsequence\n\n @return  This output stream\n\n @throws  IndexOutOfBoundsException\n          If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>\n          is greater than <tt>end</tt>, or <tt>end</tt> is greater than\n          <tt>csq.length()</tt>\n\n @since  1.5\n"
10671,method,java/io/PrintStream/append/char," Appends the specified character to this output stream.\n\n <p> An invocation of this method of the form <tt>out.append(c)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.print(c) </pre>\n\n @param  c\n         The 16-bit character to append\n\n @return  This output stream\n\n @since  1.5\n"
10673,method,java/io/PrintStream/PrintStream/OutputStream;boolean," Creates a new print stream.\n\n @param  out        The output stream to which values and objects will be\n                    printed\n @param  autoFlush  A boolean; if true, the output buffer will be flushed\n                    whenever a byte array is written, one of the\n                    <code>println</code> methods is invoked, or a newline\n                    character or byte (<code>'\n'</code>) is written\n\n @see java.io.PrintWriter#PrintWriter(java.io.OutputStream, boolean)\n"
10674,method,java/io/PrintStream/PrintStream/OutputStream;boolean;String," Creates a new print stream.\n\n @param  out        The output stream to which values and objects will be\n                    printed\n @param  autoFlush  A boolean; if true, the output buffer will be flushed\n                    whenever a byte array is written, one of the\n                    <code>println</code> methods is invoked, or a newline\n                    character or byte (<code>'\n'</code>) is written\n @param  encoding   The name of a supported\n                    <a href="../lang/package-summary.html#charenc">\n                    character encoding</a>\n\n @throws  UnsupportedEncodingException\n          If the named encoding is not supported\n\n @since  1.4\n"
10675,method,java/io/PrintStream/PrintStream/String," Creates a new print stream, without automatic line flushing, with the\n specified file name.  This convenience constructor creates\n the necessary intermediate {@link java.io.OutputStreamWriter\n OutputStreamWriter}, which will encode characters using the\n {@linkplain java.nio.charset.Charset#defaultCharset() default charset}\n for this instance of the Java virtual machine.\n\n @param  fileName\n         The name of the file to use as the destination of this print\n         stream.  If the file exists, then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered.\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(fileName)} denies write\n          access to the file\n\n @since  1.5\n"
10676,method,java/io/PrintStream/PrintStream/String;String," Creates a new print stream, without automatic line flushing, with the\n specified file name and charset.  This convenience constructor creates\n the necessary intermediate {@link java.io.OutputStreamWriter\n OutputStreamWriter}, which will encode characters using the provided\n charset.\n\n @param  fileName\n         The name of the file to use as the destination of this print\n         stream.  If the file exists, then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered.\n\n @param  csn\n         The name of a supported {@linkplain java.nio.charset.Charset\n         charset}\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(fileName)} denies write\n          access to the file\n\n @throws  UnsupportedEncodingException\n          If the named charset is not supported\n\n @since  1.5\n"
10677,method,java/io/PrintStream/PrintStream/File," Creates a new print stream, without automatic line flushing, with the\n specified file.  This convenience constructor creates the necessary\n intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},\n which will encode characters using the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n @param  file\n         The file to use as the destination of this print stream.  If the\n         file exists, then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered.\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(file.getPath())}\n          denies write access to the file\n\n @since  1.5\n"
10678,method,java/io/PrintStream/PrintStream/File;String," Creates a new print stream, without automatic line flushing, with the\n specified file and charset.  This convenience constructor creates\n the necessary intermediate {@link java.io.OutputStreamWriter\n OutputStreamWriter}, which will encode characters using the provided\n charset.\n\n @param  file\n         The file to use as the destination of this print stream.  If the\n         file exists, then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered.\n\n @param  csn\n         The name of a supported {@linkplain java.nio.charset.Charset\n         charset}\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is presentand {@link\n          SecurityManager#checkWrite checkWrite(file.getPath())}\n          denies write access to the file\n\n @throws  UnsupportedEncodingException\n          If the named charset is not supported\n\n @since  1.5\n"
10680,method,java/io/PipedWriter/connect/PipedReader," Connects this piped writer to a receiver. If this object\n is already connected to some other piped reader, an \n <code>IOException</code> is thrown.\n <p>\n If <code>snk</code> is an unconnected piped reader and \n <code>src</code> is an unconnected piped writer, they may \n be connected by either the call:\n <blockquote><pre>\n src.connect(snk)</pre></blockquote>\n or the call:\n <blockquote><pre>\n snk.connect(src)</pre></blockquote>\n The two calls have the same effect.\n\n @param      snk   the piped reader to connect to.\n @exception  IOException  if an I/O error occurs.\n"
10681,method,java/io/PipedWriter/write/int," Writes the specified <code>char</code> to the piped output stream. \n If a thread was reading data characters from the connected piped input \n stream, but the thread is no longer alive, then an \n <code>IOException</code> is thrown.\n <p>\n Implements the <code>write</code> method of <code>Writer</code>.\n\n @param      c   the <code>char</code> to be written.\n @exception  IOException  if the pipe is \n		<a href=PipedOutputStream.html#BROKEN> <code>broken</code></a>,\n		{@link #connect(java.io.PipedReader) unconnected}, closed \n		or an I/O error occurs.\n"
10682,method,java/io/PipedWriter/write/char[];int;int," Writes <code>len</code> characters from the specified character array \n starting at offset <code>off</code> to this piped output stream. \n This method blocks until all the characters are written to the output\n stream.\n If a thread was reading data characters from the connected piped input \n stream, but the thread is no longer alive, then an \n <code>IOException</code> is thrown.\n\n @param      cbuf  the data.\n @param      off   the start offset in the data.\n @param      len   the number of characters to write.\n @exception  IOException  if the pipe is \n		<a href=PipedOutputStream.html#BROKEN> <code>broken</code></a>,\n		{@link #connect(java.io.PipedReader) unconnected}, closed\n		or an I/O error occurs.\n"
10683,method,java/io/PipedWriter/flush/," Flushes this output stream and forces any buffered output characters \n to be written out. \n This will notify any readers that characters are waiting in the pipe.\n\n @exception  IOException  if the pipe is closed, or an I/O error occurs.\n"
10684,method,java/io/PipedWriter/close/," Closes this piped output stream and releases any system resources \n associated with this stream. This stream may no longer be used for \n writing characters.\n\n @exception  IOException  if an I/O error occurs.\n"
10685,method,java/io/PipedWriter/PipedWriter/PipedReader," Creates a piped writer connected to the specified piped \n reader. Data characters written to this stream will then be \n available as input from <code>snk</code>.\n\n @param      snk   The piped reader to connect to.\n @exception  IOException  if an I/O error occurs.\n"
10688,method,java/io/PipedReader/connect/PipedWriter," Causes this piped reader to be connected\n to the piped  writer <code>src</code>.\n If this object is already connected to some\n other piped writer, an <code>IOException</code>\n is thrown.\n <p>\n If <code>src</code> is an\n unconnected piped writer and <code>snk</code>\n is an unconnected piped reader, they\n may be connected by either the call:\n <p>\n <pre><code>snk.connect(src)</code> </pre> \n <p>\n or the call:\n <p>\n <pre><code>src.connect(snk)</code> </pre> \n <p>\n The two\n calls have the same effect.\n\n @param      src   The piped writer to connect to.\n @exception  IOException  if an I/O error occurs.\n"
10689,method,java/io/PipedReader/read/," Reads the next character of data from this piped stream.\n If no character is available because the end of the stream \n has been reached, the value <code>-1</code> is returned. \n This method blocks until input data is available, the end of\n the stream is detected, or an exception is thrown. \n\n @return     the next character of data, or <code>-1</code> if the end of the\n             stream is reached.\n @exception  IOException  if the pipe is\n		<a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,\n		{@link #connect(java.io.PipedWriter) unconnected}, closed,\n		or an I/O error occurs.\n"
10690,method,java/io/PipedReader/read/char[];int;int," Reads up to <code>len</code> characters of data from this piped\n stream into an array of characters. Less than <code>len</code> characters\n will be read if the end of the data stream is reached or if\n <code>len</code> exceeds the pipe's buffer size. This method \n blocks until at least one character of input is available. \n\n @param      cbuf     the buffer into which the data is read.\n @param      off   the start offset of the data.\n @param      len   the maximum number of characters read.\n @return     the total number of characters read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the stream has been reached.\n @exception  IOException  if the pipe is\n			<a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,\n          	{@link #connect(java.io.PipedWriter) unconnected}, closed,\n			or an I/O error occurs.\n"
10692,method,java/io/PipedReader/close/," Closes this piped stream and releases any system resources \n associated with the stream. \n\n @exception  IOException  if an I/O error occurs.\n"
10693,method,java/io/PipedReader/PipedReader/PipedWriter," Creates a <code>PipedReader</code> so\n that it is connected to the piped writer\n <code>src</code>. Data written to <code>src</code> \n will then be available as input from this stream.\n\n @param      src   the stream to connect to.\n @exception  IOException  if an I/O error occurs.\n"
10698,method,java/io/PipedOutputStream/connect/PipedInputStream," Connects this piped output stream to a receiver. If this object\n is already connected to some other piped input stream, an \n <code>IOException</code> is thrown.\n <p>\n If <code>snk</code> is an unconnected piped input stream and \n <code>src</code> is an unconnected piped output stream, they may \n be connected by either the call:\n <blockquote><pre>\n src.connect(snk)</pre></blockquote>\n or the call:\n <blockquote><pre>\n snk.connect(src)</pre></blockquote>\n The two calls have the same effect.\n\n @param      snk   the piped input stream to connect to.\n @exception  IOException  if an I/O error occurs.\n"
10699,method,java/io/PipedOutputStream/write/int," Writes the specified <code>byte</code> to the piped output stream. \n <p>\n Implements the <code>write</code> method of <code>OutputStream</code>.\n\n @param      b   the <code>byte</code> to be written.\n @exception IOException if the pipe is <a href=#BROKEN> broken</a>,\n		{@link #connect(java.io.PipedInputStream) unconnected},\n		closed, or if an I/O error occurs.\n"
10700,method,java/io/PipedOutputStream/write/byte[];int;int," Writes <code>len</code> bytes from the specified byte array \n starting at offset <code>off</code> to this piped output stream. \n This method blocks until all the bytes are written to the output\n stream.\n\n @param      b     the data.\n @param      off   the start offset in the data.\n @param      len   the number of bytes to write.\n @exception IOException if the pipe is <a href=#BROKEN> broken</a>,\n          {@link #connect(java.io.PipedInputStream) unconnected},\n		closed, or if an I/O error occurs.\n"
10701,method,java/io/PipedOutputStream/flush/," Flushes this output stream and forces any buffered output bytes \n to be written out. \n This will notify any readers that bytes are waiting in the pipe.\n\n @exception IOException if an I/O error occurs.\n"
10702,method,java/io/PipedOutputStream/close/," Closes this piped output stream and releases any system resources \n associated with this stream. This stream may no longer be used for \n writing bytes.\n\n @exception  IOException  if an I/O error occurs.\n"
10703,method,java/io/PipedOutputStream/PipedOutputStream/PipedInputStream," Creates a piped output stream connected to the specified piped \n input stream. Data bytes written to this stream will then be \n available as input from <code>snk</code>.\n\n @param      snk   The piped input stream to connect to.\n @exception  IOException  if an I/O error occurs.\n"
10706,method,java/io/PipedInputStream/connect/PipedOutputStream," Causes this piped input stream to be connected\n to the piped  output stream <code>src</code>.\n If this object is already connected to some\n other piped output  stream, an <code>IOException</code>\n is thrown.\n <p>\n If <code>src</code> is an\n unconnected piped output stream and <code>snk</code>\n is an unconnected piped input stream, they\n may be connected by either the call:\n <p>\n <pre><code>snk.connect(src)</code> </pre>\n <p>\n or the call:\n <p>\n <pre><code>src.connect(snk)</code> </pre>\n <p>\n The two\n calls have the same effect.\n\n @param      src   The piped output stream to connect to.\n @exception  IOException  if an I/O error occurs.\n"
10707,method,java/io/PipedInputStream/receive/int," Receives a byte of data.  This method will block if no input is\n available.\n @param b the byte being received\n @exception IOException If the pipe is <a href=#BROKEN> <code>broken</code></a>,\n		{@link #connect(java.io.PipedOutputStream) unconnected},\n		closed, or if an I/O error occurs.\n @since     JDK1.1\n"
10708,method,java/io/PipedInputStream/read/," Reads the next byte of data from this piped input stream. The\n value byte is returned as an <code>int</code> in the range\n <code>0</code> to <code>255</code>. \n This method blocks until input data is available, the end of the\n stream is detected, or an exception is thrown.\n\n @return     the next byte of data, or <code>-1</code> if the end of the\n             stream is reached.\n @exception  IOException  if the pipe is\n		 {@link #connect(java.io.PipedOutputStream) unconnected},\n		 <a href=#BROKEN> <code>broken</code></a>, closed,\n		 or if an I/O error occurs.\n"
10709,method,java/io/PipedInputStream/read/byte[];int;int," Reads up to <code>len</code> bytes of data from this piped input\n stream into an array of bytes. Less than <code>len</code> bytes\n will be read if the end of the data stream is reached or if \n <code>len</code> exceeds the pipe's buffer size.\n If <code>len </code> is zero, then no bytes are read and 0 is returned; \n otherwise, the method blocks until at least 1 byte of input is \n available, end of the stream has been detected, or an exception is\n thrown.\n\n @param      b     the buffer into which the data is read.\n @param      off   the start offset in the destination array <code>b</code>\n @param      len   the maximum number of bytes read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the stream has been reached.\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>b.length - off</code>\n @exception  IOException if the pipe is <a href=#BROKEN> <code>broken</code></a>,\n		 {@link #connect(java.io.PipedOutputStream) unconnected},\n		 closed, or if an I/O error occurs.\n"
10710,method,java/io/PipedInputStream/available/," Returns the number of bytes that can be read from this input\n stream without blocking.\n\n @return the number of bytes that can be read from this input stream\n         without blocking, or {@code 0} if this input stream has been\n         closed by invoking its {@link #close()} method, or if the pipe\n	       is {@link #connect(java.io.PipedOutputStream) unconnected}, or\n		<a href=#BROKEN> <code>broken</code></a>.\n\n @exception  IOException  if an I/O error occurs.\n @since   JDK1.0.2\n"
10712,method,java/io/PipedInputStream/PipedInputStream/PipedOutputStream," Creates a <code>PipedInputStream</code> so\n that it is connected to the piped output\n stream <code>src</code>. Data bytes written\n to <code>src</code> will then be  available\n as input from this stream.\n\n @param      src   the stream to connect to.\n @exception  IOException  if an I/O error occurs.\n"
10721,method,java/io/OutputStreamWriter/getEncoding/," Returns the name of the character encoding being used by this stream.\n\n <p> If the encoding has an historical name then that name is returned;\n otherwise the encoding's canonical name is returned.\n\n <p> If this instance was created with the {@link\n #OutputStreamWriter(OutputStream, String)} constructor then the returned\n name, being unique for the encoding, may differ from the name passed to\n the constructor.  This method may return <tt>null</tt> if the stream has\n been closed. </p>\n\n @return The historical name of this encoding, or possibly\n         <code>null</code> if the stream has been closed\n\n @see java.nio.charset.Charset\n\n @revised 1.4\n @spec JSR-51\n"
10722,method,java/io/OutputStreamWriter/write/int," Writes a single character.\n\n @exception  IOException  If an I/O error occurs\n"
10723,method,java/io/OutputStreamWriter/write/char[];int;int," Writes a portion of an array of characters.\n\n @param  cbuf  Buffer of characters\n @param  off   Offset from which to start writing characters\n @param  len   Number of characters to write\n\n @exception  IOException  If an I/O error occurs\n"
10724,method,java/io/OutputStreamWriter/write/String;int;int," Writes a portion of a string.\n\n @param  str  A String\n @param  off  Offset from which to start writing characters\n @param  len  Number of characters to write\n\n @exception  IOException  If an I/O error occurs\n"
10725,method,java/io/OutputStreamWriter/flush/," Flushes the stream.\n\n @exception  IOException  If an I/O error occurs\n"
10731,class,java/io/OutputStream," This abstract class is the superclass of all classes representing \n an output stream of bytes. An output stream accepts output bytes \n and sends them to some sink.\n <p>\n Applications that need to define a subclass of \n <code>OutputStream</code> must always provide at least a method \n that writes one byte of output.\n\n @author  Arthur van Hoff\n @version 1.31, 03/23/10\n @see     java.io.BufferedOutputStream\n @see     java.io.ByteArrayOutputStream\n @see     java.io.DataOutputStream\n @see     java.io.FilterOutputStream\n @see     java.io.InputStream\n @see     java.io.OutputStream#write(int)\n @since   JDK1.0\n"
10732,method,java/io/OutputStream/write/int," Writes the specified byte to this output stream. The general \n contract for <code>write</code> is that one byte is written \n to the output stream. The byte to be written is the eight \n low-order bits of the argument <code>b</code>. The 24 \n high-order bits of <code>b</code> are ignored.\n <p>\n Subclasses of <code>OutputStream</code> must provide an \n implementation for this method. \n\n @param      b   the <code>byte</code>.\n @exception  IOException  if an I/O error occurs. In particular, \n             an <code>IOException</code> may be thrown if the \n             output stream has been closed.\n"
10738,class,java/io/OptionalDataException," Exception indicating the failure of an object read operation due to\n unread primitive data, or the end of data belonging to a serialized\n object in the stream.  This exception may be thrown in two cases:\n\n <ul>\n   <li>An attempt was made to read an object when the next element in the\n       stream is primitive data.  In this case, the OptionalDataException's\n       length field is set to the number of bytes of primitive data\n       immediately readable from the stream, and the eof field is set to\n       false.\n\n   <li>An attempt was made to read past the end of data consumable by a\n       class-defined readObject or readExternal method.  In this case, the\n       OptionalDataException's eof field is set to true, and the length field\n       is set to 0.\n </ul>\n\n @author  unascribed\n @version 1.24, 03/23/10\n @since   JDK1.1\n"
10748,method,java/io/ObjectStreamField/isPrimitive/," Return true if this field has a primitive type.\n\n @return	true if and only if this field corresponds to a primitive type\n"
10753,method,java/io/ObjectStreamField/ObjectStreamField/String;Class;boolean," Creates an ObjectStreamField representing a serializable field with the\n given name and type.  If unshared is false, values of the represented\n field are serialized and deserialized in the default manner--if the\n field is non-primitive, object values are serialized and deserialized as\n if they had been written and read by calls to writeObject and\n readObject.  If unshared is true, values of the represented field are\n serialized and deserialized as if they had been written and read by\n calls to writeUnshared and readUnshared.\n\n @param   name field name\n @param   type field type\n @param   unshared if false, write/read field values in the same manner\n          as writeObject/readObject; if true, write/read in the same\n          manner as writeUnshared/readUnshared\n @since   1.4\n"
10754,class,java/io/ObjectStreamException," Superclass of all exceptions specific to Object Stream classes.\n\n @author  unascribed\n @version 1.17, 03/23/10\n @since   JDK1.1\n"
10784,field,java/io/ObjectStreamConstants/SUBCLASS_IMPLEMENTATION_PERMISSION," Enable overriding of readObject and writeObject.\n\n @see java.io.ObjectOutputStream#writeObjectOverride(Object)\n @see java.io.ObjectInputStream#readObjectOverride()\n @since 1.2\n"
10785,field,java/io/ObjectStreamConstants/PROTOCOL_VERSION_1," A Stream Protocol Version. <p>\n \n All externalizable data is written in JDK 1.1 external data \n format after calling this method. This version is needed to write \n streams containing Externalizable data that can be read by \n pre-JDK 1.1.6 JVMs.\n\n @see java.io.ObjectOutputStream#useProtocolVersion(int)\n @since 1.2\n"
10798,method,java/io/ObjectOutputStream/useProtocolVersion/int," Specify stream protocol version to use when writing the stream.\n\n <p>This routine provides a hook to enable the current version of\n Serialization to write in a format that is backwards compatible to a\n previous version of the stream format.\n\n <p>Every effort will be made to avoid introducing additional\n backwards incompatibilities; however, sometimes there is no\n other alternative.\n\n @param	version use ProtocolVersion from java.io.ObjectStreamConstants.\n @throws	IllegalStateException if called after any objects\n 		have been serialized.\n @throws	IllegalArgumentException if invalid version is passed in.\n @throws	IOException if I/O errors occur\n @see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1\n @see java.io.ObjectStreamConstants#PROTOCOL_VERSION_2\n @since	1.2\n"
10800,method,java/io/ObjectOutputStream/writeObjectOverride/Object," Method used by subclasses to override the default writeObject method.\n This method is called by trusted subclasses of ObjectInputStream that\n constructed ObjectInputStream using the protected no-arg constructor.\n The subclass is expected to provide an override method with the modifier\n "final".\n\n @param	obj object to be written to the underlying stream\n @throws	IOException if there are I/O errors while writing to the\n 		underlying stream\n @see #ObjectOutputStream()\n @see #writeObject(Object)\n @since 1.2\n"
10802,method,java/io/ObjectOutputStream/defaultWriteObject/," Write the non-static and non-transient fields of the current class to\n this stream.  This may only be called from the writeObject method of the\n class being serialized. It will throw the NotActiveException if it is\n called otherwise.\n\n @throws	IOException if I/O errors occur while writing to the underlying\n 		<code>OutputStream</code>\n"
10803,method,java/io/ObjectOutputStream/putFields/," Retrieve the object used to buffer persistent fields to be written to\n the stream.  The fields will be written to the stream when writeFields\n method is called.\n \n @return	an instance of the class Putfield that holds the serializable\n 		fields\n @throws	IOException if I/O errors occur\n @since 1.2\n"
10804,method,java/io/ObjectOutputStream/writeFields/," Write the buffered fields to the stream.\n\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n @throws	NotActiveException Called when a classes writeObject method was\n 		not called to write the state of the object.\n @since 1.2\n"
10805,method,java/io/ObjectOutputStream/reset/," Reset will disregard the state of any objects already written to the\n stream.  The state is reset to be the same as a new ObjectOutputStream.\n The current point in the stream is marked as reset so the corresponding\n ObjectInputStream will be reset at the same point.  Objects previously\n written to the stream will not be refered to as already being in the\n stream.  They will be written to the stream again.\n \n @throws	IOException if reset() is invoked while serializing an object.\n"
10809,method,java/io/ObjectOutputStream/enableReplaceObject/boolean," Enable the stream to do replacement of objects in the stream.  When\n enabled, the replaceObject method is called for every object being\n serialized.\n\n <p>If <code>enable</code> is true, and there is a security manager\n installed, this method first calls the security manager's\n <code>checkPermission</code> method with a\n <code>SerializablePermission("enableSubstitution")</code> permission to\n ensure it's ok to enable the stream to do replacement of objects in the\n stream.\n\n @param	enable boolean parameter to enable replacement of objects\n @return	the previous setting before this method was invoked\n @throws	SecurityException if a security manager exists and its\n 		<code>checkPermission</code> method denies enabling the stream\n 		to do replacement of objects in the stream.\n @see SecurityManager#checkPermission\n @see java.io.SerializablePermission\n"
10810,method,java/io/ObjectOutputStream/writeStreamHeader/," The writeStreamHeader method is provided so subclasses can append or\n prepend their own header to the stream.  It writes the magic number and\n version to the stream.\n\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10812,method,java/io/ObjectOutputStream/write/int," Writes a byte. This method will block until the byte is actually\n written.\n\n @param	val the byte to be written to the stream\n @throws	IOException If an I/O error has occurred.\n"
10813,method,java/io/ObjectOutputStream/write/byte[]," Writes an array of bytes. This method will block until the bytes are\n actually written.\n\n @param	buf the data to be written\n @throws	IOException If an I/O error has occurred.\n"
10814,method,java/io/ObjectOutputStream/write/byte[];int;int," Writes a sub array of bytes.\n\n @param	buf the data to be written\n @param	off the start offset in the data\n @param	len the number of bytes that are written\n @throws	IOException If an I/O error has occurred.\n"
10815,method,java/io/ObjectOutputStream/flush/," Flushes the stream. This will write any buffered output bytes and flush\n through to the underlying stream.\n\n @throws	IOException If an I/O error has occurred.\n"
10816,method,java/io/ObjectOutputStream/drain/," Drain any buffered data in ObjectOutputStream.  Similar to flush but\n does not propagate the flush to the underlying stream.\n\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10818,method,java/io/ObjectOutputStream/writeBoolean/boolean," Writes a boolean.\n\n @param	val the boolean to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10819,method,java/io/ObjectOutputStream/writeByte/int," Writes an 8 bit byte.\n\n @param	val the byte value to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10820,method,java/io/ObjectOutputStream/writeShort/int," Writes a 16 bit short.\n\n @param	val the short value to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10821,method,java/io/ObjectOutputStream/writeChar/int," Writes a 16 bit char.\n\n @param	val the char value to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10822,method,java/io/ObjectOutputStream/writeInt/int," Writes a 32 bit int.\n\n @param	val the integer value to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10823,method,java/io/ObjectOutputStream/writeLong/long," Writes a 64 bit long.\n\n @param	val the long value to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10824,method,java/io/ObjectOutputStream/writeFloat/float," Writes a 32 bit float.\n\n @param	val the float value to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10825,method,java/io/ObjectOutputStream/writeDouble/double," Writes a 64 bit double.\n\n @param	val the double value to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10826,method,java/io/ObjectOutputStream/writeBytes/String," Writes a String as a sequence of bytes.\n\n @param	str the String of bytes to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10827,method,java/io/ObjectOutputStream/writeChars/String," Writes a String as a sequence of chars.\n\n @param	str the String of chars to be written\n @throws	IOException if I/O errors occur while writing to the underlying\n 		stream\n"
10829,method,java/io/ObjectOutputStream/ObjectOutputStream/OutputStream," Creates an ObjectOutputStream that writes to the specified OutputStream.\n This constructor writes the serialization stream header to the\n underlying stream; callers may wish to flush the stream immediately to\n ensure that constructors for receiving ObjectInputStreams will not block\n when reading the header.\n\n <p>If a security manager is installed, this constructor will check for\n the "enableSubclassImplementation" SerializablePermission when invoked\n directly or indirectly by the constructor of a subclass which overrides\n the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared\n methods.\n\n @param	out output stream to write to\n @throws	IOException if an I/O error occurs while writing stream header\n @throws	SecurityException if untrusted subclass illegally overrides\n 		security-sensitive methods\n @throws	NullPointerException if <code>out</code> is <code>null</code>\n @since	1.4\n @see	ObjectOutputStream#ObjectOutputStream()\n @see	ObjectOutputStream#putFields()\n @see	ObjectInputStream#ObjectInputStream(InputStream)\n"
10830,method,java/io/ObjectOutputStream/ObjectOutputStream/," Provide a way for subclasses that are completely reimplementing\n ObjectOutputStream to not have to allocate private data just used by\n this implementation of ObjectOutputStream.\n\n <p>If there is a security manager installed, this method first calls the\n security manager's <code>checkPermission</code> method with a\n <code>SerializablePermission("enableSubclassImplementation")</code>\n permission to ensure it's ok to enable subclassing.\n\n @throws	SecurityException if a security manager exists and its\n 		<code>checkPermission</code> method denies enabling\n 		subclassing.\n @see SecurityManager#checkPermission\n @see java.io.SerializablePermission\n"
10840,method,java/io/ObjectOutputStream/PutField/put/String;Object," Put the value of the named Object field into the persistent field.\n\n @param  name the name of the serializable field\n @param  val the value to assign to the field\n         (which may be <code>null</code>)\n @throws IllegalArgumentException if <code>name</code> does not\n match the name of a serializable field for the class whose fields\n are being written, or if the type of the named field is not a\n reference type\n"
10843,interface,java/io/ObjectOutput," ObjectOutput extends the DataOutput interface to include writing of objects.\n DataOutput includes methods for output of primitive types, ObjectOutput\n extends that interface to include objects, arrays, and Strings.\n\n @author  unascribed\n @version 1.18, 03/23/10\n @see java.io.InputStream\n @see java.io.ObjectOutputStream\n @see java.io.ObjectInputStream\n @since   JDK1.1\n"
10845,method,java/io/ObjectOutput/write/int," Writes a byte. This method will block until the byte is actually\n written.\n @param b	the byte\n @exception IOException If an I/O error has occurred.\n"
10846,method,java/io/ObjectOutput/write/byte[]," Writes an array of bytes. This method will block until the bytes\n are actually written.\n @param b	the data to be written\n @exception IOException If an I/O error has occurred.\n"
10847,method,java/io/ObjectOutput/write/byte[];int;int," Writes a sub array of bytes.\n @param b	the data to be written\n @param off	the start offset in the data\n @param len	the number of bytes that are written\n @exception IOException If an I/O error has occurred.\n"
10848,method,java/io/ObjectOutput/flush/," Flushes the stream. This will write any buffered\n output bytes.\n @exception IOException If an I/O error has occurred.\n"
10850,interface,java/io/ObjectInputValidation," Callback interface to allow validation of objects within a graph.\n Allows an object to be called when a complete graph of objects has\n been deserialized.\n\n @author  unascribed\n @version 1.20, 03/23/10\n @see     ObjectInputStream\n @see     ObjectInputStream#registerValidation(java.io.ObjectInputValidation, int)\n @since   JDK1.1\n"
10854,method,java/io/ObjectInputStream/readObjectOverride/," This method is called by trusted subclasses of ObjectOutputStream that\n constructed ObjectOutputStream using the protected no-arg constructor.\n The subclass is expected to provide an override method with the modifier\n "final".\n\n @return	the Object read from the stream.\n @throws	ClassNotFoundException Class definition of a serialized object\n 		cannot be found.\n @throws	OptionalDataException Primitive data was found in the stream\n 		instead of objects.\n @throws	IOException if I/O errors occurred while reading from the\n 		underlying stream\n @see #ObjectInputStream()\n @see #readObject()\n @since 1.2\n"
10856,method,java/io/ObjectInputStream/defaultReadObject/," Read the non-static and non-transient fields of the current class from\n this stream.  This may only be called from the readObject method of the\n class being deserialized. It will throw the NotActiveException if it is\n called otherwise.\n\n @throws	ClassNotFoundException if the class of a serialized object\n 		could not be found.\n @throws	IOException if an I/O error occurs.\n @throws	NotActiveException if the stream is not currently reading\n 		objects.\n"
10857,method,java/io/ObjectInputStream/readFields/," Reads the persistent fields from the stream and makes them available by\n name.\n \n @return	the <code>GetField</code> object representing the persistent\n 		fields of the object being deserialized\n @throws	ClassNotFoundException if the class of a serialized object\n 		could not be found.\n @throws	IOException if an I/O error occurs.\n @throws	NotActiveException if the stream is not currently reading\n 		objects.\n @since 1.2\n"
10862,method,java/io/ObjectInputStream/enableResolveObject/boolean," Enable the stream to allow objects read from the stream to be replaced.\n When enabled, the resolveObject method is called for every object being\n deserialized.\n\n <p>If <i>enable</i> is true, and there is a security manager installed,\n this method first calls the security manager's\n <code>checkPermission</code> method with the\n <code>SerializablePermission("enableSubstitution")</code> permission to\n ensure it's ok to enable the stream to allow objects read from the\n stream to be replaced.\n \n @param	enable true for enabling use of <code>resolveObject</code> for\n 		every object being deserialized\n @return	the previous setting before this method was invoked\n @throws	SecurityException if a security manager exists and its\n 		<code>checkPermission</code> method denies enabling the stream\n 		to allow objects read from the stream to be replaced.\n @see SecurityManager#checkPermission\n @see java.io.SerializablePermission\n"
10863,method,java/io/ObjectInputStream/readStreamHeader/," The readStreamHeader method is provided to allow subclasses to read and\n verify their own stream headers. It reads and verifies the magic number\n and version number.\n\n @throws	IOException if there are I/O errors while reading from the\n 		underlying <code>InputStream</code> \n @throws	StreamCorruptedException if control information in the stream\n 		is inconsistent\n"
10864,method,java/io/ObjectInputStream/readClassDescriptor/," Read a class descriptor from the serialization stream.  This method is\n called when the ObjectInputStream expects a class descriptor as the next\n item in the serialization stream.  Subclasses of ObjectInputStream may\n override this method to read in class descriptors that have been written\n in non-standard formats (by subclasses of ObjectOutputStream which have\n overridden the <code>writeClassDescriptor</code> method).  By default,\n this method reads class descriptors according to the format defined in\n the Object Serialization specification.\n\n @return	the class descriptor read\n @throws	IOException If an I/O error has occurred.\n @throws	ClassNotFoundException If the Class of a serialized object used\n 		in the class descriptor representation cannot be found\n @see java.io.ObjectOutputStream#writeClassDescriptor(java.io.ObjectStreamClass)\n @since 1.3\n"
10865,method,java/io/ObjectInputStream/read/," Reads a byte of data. This method will block if no input is available.\n\n @return	the byte read, or -1 if the end of the stream is reached.\n @throws	IOException If an I/O error has occurred.\n"
10866,method,java/io/ObjectInputStream/read/byte[];int;int," Reads into an array of bytes.  This method will block until some input\n is available. Consider using java.io.DataInputStream.readFully to read\n exactly 'length' bytes.\n\n @param	buf the buffer into which the data is read\n @param	off the start offset of the data\n @param	len the maximum number of bytes read\n @return	the actual number of bytes read, -1 is returned when the end of\n 		the stream is reached.\n @throws	IOException If an I/O error has occurred.\n @see java.io.DataInputStream#readFully(byte[],int,int)\n"
10867,method,java/io/ObjectInputStream/available/," Returns the number of bytes that can be read without blocking.\n\n @return	the number of available bytes.\n @throws	IOException if there are I/O errors while reading from the\n 		underlying <code>InputStream</code>\n"
10869,method,java/io/ObjectInputStream/readBoolean/," Reads in a boolean.\n \n @return	the boolean read.\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10870,method,java/io/ObjectInputStream/readByte/," Reads an 8 bit byte.\n \n @return	the 8 bit byte read.\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10871,method,java/io/ObjectInputStream/readUnsignedByte/," Reads an unsigned 8 bit byte.\n\n @return	the 8 bit byte read.\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10872,method,java/io/ObjectInputStream/readChar/," Reads a 16 bit char.\n\n @return	the 16 bit char read. \n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10874,method,java/io/ObjectInputStream/readUnsignedShort/," Reads an unsigned 16 bit short.\n\n @return	the 16 bit short read.\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10875,method,java/io/ObjectInputStream/readInt/," Reads a 32 bit int.\n\n @return	the 32 bit integer read.\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10876,method,java/io/ObjectInputStream/readLong/," Reads a 64 bit long.\n\n @return	the read 64 bit long.\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10877,method,java/io/ObjectInputStream/readFloat/," Reads a 32 bit float.\n\n @return	the 32 bit float read.\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10878,method,java/io/ObjectInputStream/readDouble/," Reads a 64 bit double.\n\n @return	the 64 bit double read.\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10879,method,java/io/ObjectInputStream/readFully/byte[]," Reads bytes, blocking until all bytes are read.\n\n @param	buf the buffer into which the data is read\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10880,method,java/io/ObjectInputStream/readFully/byte[];int;int," Reads bytes, blocking until all bytes are read.\n\n @param	buf the buffer into which the data is read\n @param	off the start offset of the data\n @param	len the maximum number of bytes to read\n @throws	EOFException If end of file is reached.\n @throws	IOException If other I/O error has occurred.\n"
10881,method,java/io/ObjectInputStream/skipBytes/int," Skips bytes.\n\n @param	len the number of bytes to be skipped\n @return	the actual number of bytes skipped.\n @throws	IOException If an I/O error has occurred.\n"
10882,method,java/io/ObjectInputStream/readLine/," Reads in a line that has been terminated by a \n, \r, \r\n or EOF.\n\n @return	a String copy of the line.\n @throws	IOException if there are I/O errors while reading from the\n 		underlying <code>InputStream</code>\n @deprecated This method does not properly convert bytes to characters.\n 		see DataInputStream for the details and alternatives.\n"
10883,method,java/io/ObjectInputStream/readUTF/," Reads a String in\n <a href="DataInput.html#modified-utf-8">modified UTF-8</a>\n format.\n\n @return	the String.\n @throws	IOException if there are I/O errors while reading from the\n 		underlying <code>InputStream</code>\n @throws	UTFDataFormatException if read bytes do not represent a valid\n 		modified UTF-8 encoding of a string\n"
10884,method,java/io/ObjectInputStream/ObjectInputStream/InputStream," Creates an ObjectInputStream that reads from the specified InputStream.\n A serialization stream header is read from the stream and verified.\n This constructor will block until the corresponding ObjectOutputStream\n has written and flushed the header.\n\n <p>If a security manager is installed, this constructor will check for\n the "enableSubclassImplementation" SerializablePermission when invoked\n directly or indirectly by the constructor of a subclass which overrides\n the ObjectInputStream.readFields or ObjectInputStream.readUnshared\n methods.\n\n @param	in input stream to read from\n @throws	StreamCorruptedException if the stream header is incorrect\n @throws	IOException if an I/O error occurs while reading stream header\n @throws	SecurityException if untrusted subclass illegally overrides\n 		security-sensitive methods\n @throws	NullPointerException if <code>in</code> is <code>null</code>\n @see	ObjectInputStream#ObjectInputStream()\n @see	ObjectInputStream#readFields()\n @see	ObjectOutputStream#ObjectOutputStream(OutputStream)\n"
10885,method,java/io/ObjectInputStream/ObjectInputStream/," Provide a way for subclasses that are completely reimplementing\n ObjectInputStream to not have to allocate private data just used by this\n implementation of ObjectInputStream.\n\n <p>If there is a security manager installed, this method first calls the\n security manager's <code>checkPermission</code> method with the\n <code>SerializablePermission("enableSubclassImplementation")</code>\n permission to ensure it's ok to enable subclassing.\n\n @throws	SecurityException if a security manager exists and its\n 		<code>checkPermission</code> method denies enabling\n 		subclassing.\n @see SecurityManager#checkPermission\n @see java.io.SerializablePermission\n"
10888,method,java/io/ObjectInputStream/GetField/defaulted/String," Return true if the named field is defaulted and has no value in this\n stream.\n\n @param  name the name of the field\n @return true, if and only if the named field is defaulted\n @throws IOException if there are I/O errors while reading from\n 	   the underlying <code>InputStream</code>\n @throws IllegalArgumentException if <code>name</code> does not\n 	   correspond to a serializable field\n"
10889,method,java/io/ObjectInputStream/GetField/get/String;boolean," Get the value of the named boolean field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>boolean</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10890,method,java/io/ObjectInputStream/GetField/get/String;byte," Get the value of the named byte field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>byte</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10891,method,java/io/ObjectInputStream/GetField/get/String;char," Get the value of the named char field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>char</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10892,method,java/io/ObjectInputStream/GetField/get/String;short," Get the value of the named short field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>short</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10893,method,java/io/ObjectInputStream/GetField/get/String;int," Get the value of the named int field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>int</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10894,method,java/io/ObjectInputStream/GetField/get/String;long," Get the value of the named long field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>long</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10895,method,java/io/ObjectInputStream/GetField/get/String;float," Get the value of the named float field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>float</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10896,method,java/io/ObjectInputStream/GetField/get/String;double," Get the value of the named double field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>double</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10897,method,java/io/ObjectInputStream/GetField/get/String;Object," Get the value of the named Object field from the persistent field.\n\n @param  name the name of the field\n @param  val the default value to use if <code>name</code> does not\n 	   have a value\n @return the value of the named <code>Object</code> field\n @throws IOException if there are I/O errors while reading from the\n 	   underlying <code>InputStream</code>\n @throws IllegalArgumentException if type of <code>name</code> is\n 	   not serializable or if the field type is incorrect\n"
10899,interface,java/io/ObjectInput," ObjectInput extends the DataInput interface to include the reading of\n objects. DataInput includes methods for the input of primitive types,\n ObjectInput extends that interface to include objects, arrays, and Strings.\n\n @author  unascribed\n @version 1.21, 03/23/10\n @see java.io.InputStream\n @see java.io.ObjectOutputStream\n @see java.io.ObjectInputStream\n @since   JDK1.1\n"
10901,method,java/io/ObjectInput/read/," Reads a byte of data. This method will block if no input is\n available.\n @return 	the byte read, or -1 if the end of the\n		stream is reached.\n @exception IOException If an I/O error has occurred.\n"
10902,method,java/io/ObjectInput/read/byte[]," Reads into an array of bytes.  This method will\n block until some input is available.\n @param b	the buffer into which the data is read\n @return  the actual number of bytes read, -1 is\n 		returned when the end of the stream is reached.\n @exception IOException If an I/O error has occurred.\n"
10903,method,java/io/ObjectInput/read/byte[];int;int," Reads into an array of bytes.  This method will\n block until some input is available.\n @param b	the buffer into which the data is read\n @param off the start offset of the data\n @param len the maximum number of bytes read\n @return  the actual number of bytes read, -1 is\n 		returned when the end of the stream is reached.\n @exception IOException If an I/O error has occurred.\n"
10904,method,java/io/ObjectInput/skip/long," Skips n bytes of input.\n @param n the number of bytes to be skipped\n @return	the actual number of bytes skipped.\n @exception IOException If an I/O error has occurred.\n"
10905,method,java/io/ObjectInput/available/," Returns the number of bytes that can be read\n without blocking.\n @return the number of available bytes.\n @exception IOException If an I/O error has occurred.\n"
10907,class,java/io/NotSerializableException," Thrown when an instance is required to have a Serializable interface.\n The serialization runtime or the class of the instance can throw\n this exception. The argument should be the name of the class.\n\n @author  unascribed\n @version 1.18, 03/23/10\n @since   JDK1.1\n"
10913,class,java/io/LineNumberReader," A buffered character-input stream that keeps track of line numbers.  This\n class defines methods {@link #setLineNumber(int)} and {@link\n #getLineNumber()} for setting and getting the current line number\n respectively.\n \n <p> By default, line numbering begins at 0. This number increments at every\n <a href="#lt">line terminator</a> as the data is read, and can be changed\n with a call to <tt>setLineNumber(int)</tt>.  Note however, that\n <tt>setLineNumber(int)</tt> does not actually change the current position in\n the stream; it only changes the value that will be returned by\n <tt>getLineNumber()</tt>.\n \n <p> A line is considered to be <a name="lt">terminated</a> by any one of a\n line feed ('\n'), a carriage return ('\r'), or a carriage return followed\n immediately by a linefeed.\n\n @version 	1.24, 10/03/23\n @author	Mark Reinhold\n @since       JDK1.1\n"
10916,method,java/io/LineNumberReader/read/," Read a single character.  <a href="#lt">Line terminators</a> are\n compressed into single newline ('\n') characters.  Whenever a line\n terminator is read the current line number is incremented.\n\n @return  The character read, or -1 if the end of the stream has been\n          reached\n\n @throws  IOException\n          If an I/O error occurs\n"
10917,method,java/io/LineNumberReader/read/char[];int;int," Read characters into a portion of an array.  Whenever a <a\n href="#lt">line terminator</a> is read the current line number is\n incremented. \n\n @param  cbuf\n         Destination buffer\n\n @param  off\n         Offset at which to start storing characters\n\n @param  len\n         Maximum number of characters to read\n\n @return  The number of bytes read, or -1 if the end of the stream has\n          already been reached\n\n @throws  IOException\n          If an I/O error occurs\n"
10918,method,java/io/LineNumberReader/readLine/," Read a line of text.  Whenever a <a href="#lt">line terminator</a> is\n read the current line number is incremented.\n\n @return  A String containing the contents of the line, not including\n          any <a href="#lt">line termination characters</a>, or \n          <tt>null</tt> if the end of the stream has been reached\n\n @throws  IOException\n          If an I/O error occurs\n"
10919,method,java/io/LineNumberReader/skip/long," Skip characters.\n\n @param  n\n         The number of characters to skip\n\n @return  The number of characters actually skipped\n\n @throws  IOException\n          If an I/O error occurs\n\n @throws  IllegalArgumentException\n          If <tt>n</tt> is negative\n"
10920,method,java/io/LineNumberReader/mark/int," Mark the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point, and will also reset\n the line number appropriately.\n\n @param  readAheadLimit\n         Limit on the number of characters that may be read while still\n         preserving the mark.  After reading this many characters,\n         attempting to reset the stream may fail.\n\n @throws  IOException\n          If an I/O error occurs\n"
10925,method,java/io/LineNumberInputStream/read/," Reads the next byte of data from this input stream. The value \n byte is returned as an <code>int</code> in the range \n <code>0</code> to <code>255</code>. If no byte is available \n because the end of the stream has been reached, the value \n <code>-1</code> is returned. This method blocks until input data \n is available, the end of the stream is detected, or an exception \n is thrown. \n <p>\n The <code>read</code> method of \n <code>LineNumberInputStream</code> calls the <code>read</code> \n method of the underlying input stream. It checks for carriage \n returns and newline characters in the input, and modifies the \n current line number as appropriate. A carriage-return character or \n a carriage return followed by a newline character are both \n converted into a single newline character. \n\n @return     the next byte of data, or <code>-1</code> if the end of this\n             stream is reached.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterInputStream#in\n @see        java.io.LineNumberInputStream#getLineNumber()\n"
10926,method,java/io/LineNumberInputStream/read/byte[];int;int," Reads up to <code>len</code> bytes of data from this input stream \n into an array of bytes. This method blocks until some input is available.\n <p>\n The <code>read</code> method of \n <code>LineNumberInputStream</code> repeatedly calls the \n <code>read</code> method of zero arguments to fill in the byte array.\n\n @param      b     the buffer into which the data is read.\n @param      off   the start offset of the data.\n @param      len   the maximum number of bytes read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             this stream has been reached.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.LineNumberInputStream#read()\n"
10927,method,java/io/LineNumberInputStream/skip/long," Skips over and discards <code>n</code> bytes of data from this \n input stream. The <code>skip</code> method may, for a variety of \n reasons, end up skipping over some smaller number of bytes, \n possibly <code>0</code>. The actual number of bytes skipped is \n returned.  If <code>n</code> is negative, no bytes are skipped.\n <p>\n The <code>skip</code> method of <code>LineNumberInputStream</code> creates \n a byte array and then repeatedly reads into it until \n <code>n</code> bytes have been read or the end of the stream has \n been reached. \n\n @param      n   the number of bytes to be skipped.\n @return     the actual number of bytes skipped.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
10930,method,java/io/LineNumberInputStream/available/," Returns the number of bytes that can be read from this input \n stream without blocking. \n <p>\n Note that if the underlying input stream is able to supply \n <i>k</i> input characters without blocking, the \n <code>LineNumberInputStream</code> can guarantee only to provide \n <i>k</i>/2 characters without blocking, because the \n <i>k</i> characters from the underlying input stream might\n consist of <i>k</i>/2 pairs of <code>'&#92;r'</code> and \n <code>'&#92;n'</code>, which are converted to just \n <i>k</i>/2 <code>'&#92;n'</code> characters. \n\n @return     the number of bytes that can be read from this input stream\n             without blocking.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
10931,method,java/io/LineNumberInputStream/mark/int," Marks the current position in this input stream. A subsequent \n call to the <code>reset</code> method repositions this stream at \n the last marked position so that subsequent reads re-read the same bytes.\n <p>\n The <code>mark</code> method of \n <code>LineNumberInputStream</code> remembers the current line \n number in a private variable, and then calls the <code>mark</code> \n method of the underlying input stream. \n\n @param   readlimit   the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n @see     java.io.FilterInputStream#in\n @see     java.io.LineNumberInputStream#reset()\n"
10934,class,java/io/InvalidObjectException," Indicates that one or more deserialized objects failed validation\n tests.  The argument should provide the reason for the failure.\n\n @see ObjectInputValidation\n @since JDK1.1\n\n @author  unascribed\n @version 1.20, 03/23/10\n @since   JDK1.1\n"
10941,class,java/io/InterruptedIOException," Signals that an I/O operation has been interrupted. An\n <code>InterruptedIOException</code> is thrown to indicate that an\n input or output transfer has been terminated because the thread\n performing it was interrupted. The field {@link #bytesTransferred}\n indicates how many bytes were successfully transferred before\n the interruption occurred.\n\n @author  unascribed\n @version 1.21, 03/23/10\n @see     java.io.InputStream\n @see     java.io.OutputStream\n @see     java.lang.Thread#interrupt()\n @since   JDK1.0\n"
10942,method,java/io/InterruptedIOException/InterruptedIOException/," Constructs an <code>InterruptedIOException</code> with\n <code>null</code> as its error detail message.\n"
10944,field,java/io/InterruptedIOException/bytesTransferred," Reports how many bytes had been transferred as part of the I/O\n operation before it was interrupted.\n\n @serial\n"
10945,class,java/io/InputStreamReader," An InputStreamReader is a bridge from byte streams to character streams: It\n reads bytes and decodes them into characters using a specified {@link\n java.nio.charset.Charset <code>charset</code>}.  The charset that it uses\n may be specified by name or may be given explicitly, or the platform's\n default charset may be accepted.\n\n <p> Each invocation of one of an InputStreamReader's read() methods may\n cause one or more bytes to be read from the underlying byte-input stream.\n To enable the efficient conversion of bytes to characters, more bytes may\n be read ahead from the underlying stream than are necessary to satisfy the\n current read operation.\n\n <p> For top efficiency, consider wrapping an InputStreamReader within a\n BufferedReader.  For example:\n\n <pre>\n BufferedReader in\n   = new BufferedReader(new InputStreamReader(System.in));\n </pre>\n\n @see BufferedReader\n @see InputStream\n @see java.nio.charset.Charset\n\n @version     1.48, 10/03/23\n @author      Mark Reinhold\n @since       JDK1.1\n"
10946,method,java/io/InputStreamReader/getEncoding/," Returns the name of the character encoding being used by this stream.\n\n <p> If the encoding has an historical name then that name is returned;\n otherwise the encoding's canonical name is returned.\n\n <p> If this instance was created with the {@link\n #InputStreamReader(InputStream, String)} constructor then the returned\n name, being unique for the encoding, may differ from the name passed to\n the constructor. This method will return <code>null</code> if the\n stream has been closed.\n </p>\n @return The historical name of this encoding, or\n         <code>null</code> if the stream has been closed\n\n @see java.nio.charset.Charset\n\n @revised 1.4\n @spec JSR-51\n"
10947,method,java/io/InputStreamReader/read/," Reads a single character.\n\n @return The character read, or -1 if the end of the stream has been\n         reached\n\n @exception  IOException  If an I/O error occurs\n"
10948,method,java/io/InputStreamReader/read/char[];int;int," Reads characters into a portion of an array.\n\n @param      cbuf     Destination buffer\n @param      offset   Offset at which to start storing characters\n @param      length   Maximum number of characters to read\n\n @return     The number of characters read, or -1 if the end of the \n             stream has been reached\n\n @exception  IOException  If an I/O error occurs\n"
10949,method,java/io/InputStreamReader/ready/," Tells whether this stream is ready to be read.  An InputStreamReader is\n ready if its input buffer is not empty, or if bytes are available to be\n read from the underlying byte stream.\n\n @exception  IOException  If an I/O error occurs\n"
10955,class,java/io/InputStream," This abstract class is the superclass of all classes representing\n an input stream of bytes.\n\n <p> Applications that need to define a subclass of <code>InputStream</code>\n must always provide a method that returns the next byte of input.\n\n @author  Arthur van Hoff\n @version 1.53, 03/23/10\n @see     java.io.BufferedInputStream\n @see     java.io.ByteArrayInputStream\n @see     java.io.DataInputStream\n @see     java.io.FilterInputStream\n @see     java.io.InputStream#read()\n @see     java.io.OutputStream\n @see     java.io.PushbackInputStream\n @since   JDK1.0\n"
10956,method,java/io/InputStream/read/," Reads the next byte of data from the input stream. The value byte is\n returned as an <code>int</code> in the range <code>0</code> to\n <code>255</code>. If no byte is available because the end of the stream\n has been reached, the value <code>-1</code> is returned. This method\n blocks until input data is available, the end of the stream is detected,\n or an exception is thrown.\n\n <p> A subclass must provide an implementation of this method.\n\n @return     the next byte of data, or <code>-1</code> if the end of the\n             stream is reached.\n @exception  IOException  if an I/O error occurs.\n"
10957,method,java/io/InputStream/read/byte[]," Reads some number of bytes from the input stream and stores them into\n the buffer array <code>b</code>. The number of bytes actually read is\n returned as an integer.  This method blocks until input data is\n available, end of file is detected, or an exception is thrown.\n\n <p> If the length of <code>b</code> is zero, then no bytes are read and\n <code>0</code> is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at the\n end of the file, the value <code>-1</code> is returned; otherwise, at\n least one byte is read and stored into <code>b</code>.\n\n <p> The first byte read is stored into element <code>b[0]</code>, the\n next one into <code>b[1]</code>, and so on. The number of bytes read is,\n at most, equal to the length of <code>b</code>. Let <i>k</i> be the\n number of bytes actually read; these bytes will be stored in elements\n <code>b[0]</code> through <code>b[</code><i>k</i><code>-1]</code>,\n leaving elements <code>b[</code><i>k</i><code>]</code> through\n <code>b[b.length-1]</code> unaffected.\n\n <p> The <code>read(b)</code> method for class <code>InputStream</code>\n has the same effect as: <pre><code> read(b, 0, b.length) </code></pre>\n\n @param      b   the buffer into which the data is read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> is there is no more data because the end of\n             the stream has been reached.\n @exception  IOException  If the first byte cannot be read for any reason\n other than the end of the file, if the input stream has been closed, or\n if some other I/O error occurs.\n @exception  NullPointerException  if <code>b</code> is <code>null</code>.\n @see        java.io.InputStream#read(byte[], int, int)\n"
10961,method,java/io/InputStream/close/," Closes this input stream and releases any system resources associated\n with the stream.\n\n <p> The <code>close</code> method of <code>InputStream</code> does\n nothing.\n\n @exception  IOException  if an I/O error occurs.\n"
10963,method,java/io/InputStream/reset/," Repositions this stream to the position at the time the\n <code>mark</code> method was last called on this input stream.\n\n <p> The general contract of <code>reset</code> is:\n\n <p><ul>\n\n <li> If the method <code>markSupported</code> returns\n <code>true</code>, then:\n\n     <ul><li> If the method <code>mark</code> has not been called since\n     the stream was created, or the number of bytes read from the stream\n     since <code>mark</code> was last called is larger than the argument\n     to <code>mark</code> at that last call, then an\n     <code>IOException</code> might be thrown.\n\n     <li> If such an <code>IOException</code> is not thrown, then the\n     stream is reset to a state such that all the bytes read since the\n     most recent call to <code>mark</code> (or since the start of the\n     file, if <code>mark</code> has not been called) will be resupplied\n     to subsequent callers of the <code>read</code> method, followed by\n     any bytes that otherwise would have been the next input data as of\n     the time of the call to <code>reset</code>. </ul>\n\n <li> If the method <code>markSupported</code> returns\n <code>false</code>, then:\n\n     <ul><li> The call to <code>reset</code> may throw an\n     <code>IOException</code>.\n\n     <li> If an <code>IOException</code> is not thrown, then the stream\n     is reset to a fixed state that depends on the particular type of the\n     input stream and how it was created. The bytes that will be supplied\n     to subsequent callers of the <code>read</code> method depend on the\n     particular type of the input stream. </ul></ul>\n\n <p>The method <code>reset</code> for class <code>InputStream</code>\n does nothing except throw an <code>IOException</code>.\n\n @exception  IOException  if this stream has not been marked or if the\n               mark has been invalidated.\n @see     java.io.InputStream#mark(int)\n @see     java.io.IOException\n"
10967,method,java/io/IOException/IOException/," Constructs an {@code IOException} with {@code null}\n as its error detail message.\n"
10969,method,java/io/IOException/IOException/String;Throwable," Constructs an {@code IOException} with the specified detail message\n and cause.\n\n <p> Note that the detail message associated with {@code cause} is\n <i>not</i> automatically incorporated into this exception's detail\n message.\n\n @param message\n        The detail message (which is saved for later retrieval\n        by the {@link #getMessage()} method)\n\n @param cause\n        The cause (which is saved for later retrieval by the\n        {@link #getCause()} method).  (A null value is permitted,\n        and indicates that the cause is nonexistent or unknown.)\n\n @since 1.6\n"
10971,class,java/io/IOError," Thrown when a serious I/O error has occurred. \n\n @author  Xueming Shen\n @version 1.4 03/23/10\n @since   1.6\n"
10972,method,java/io/IOError/IOError/Throwable," Constructs a new instance of IOError with the specified cause. The\n IOError is created with the detail message of\n <tt>(cause==null ? null : cause.toString())</tt> (which typically\n contains the class and detail message of cause).\n\n @param  cause\n         The cause of this error, or <tt>null</tt> if the cause\n         is not known\n"
10973,interface,java/io/Flushable," A <tt>Flushable</tt> is a destination of data that can be flushed.  The\n flush method is invoked to write any buffered output to the underlying\n stream.\n\n @version 1.3 10/03/23\n @since 1.5\n"
10974,method,java/io/Flushable/flush/," Flushes this stream by writing any buffered output to the underlying\n stream.\n\n @throws IOException If an I/O error occurs\n"
10976,method,java/io/FilterWriter/write/int," Writes a single character.\n\n @exception  IOException  If an I/O error occurs\n"
10977,method,java/io/FilterWriter/write/char[];int;int," Writes a portion of an array of characters.\n\n @param  cbuf  Buffer of characters to be written\n @param  off   Offset from which to start reading characters\n @param  len   Number of characters to be written\n\n @exception  IOException  If an I/O error occurs\n"
10978,method,java/io/FilterWriter/write/String;int;int," Writes a portion of a string.\n\n @param  str  String to be written\n @param  off  Offset from which to start reading characters\n @param  len  Number of characters to be written\n\n @exception  IOException  If an I/O error occurs\n"
10984,method,java/io/FilterReader/read/," Reads a single character.\n\n @exception  IOException  If an I/O error occurs\n"
10985,method,java/io/FilterReader/read/char[];int;int," Reads characters into a portion of an array.\n\n @exception  IOException  If an I/O error occurs\n"
10986,method,java/io/FilterReader/skip/long," Skips characters.\n\n @exception  IOException  If an I/O error occurs\n"
10987,method,java/io/FilterReader/ready/," Tells whether this stream is ready to be read.\n\n @exception  IOException  If an I/O error occurs\n"
10989,method,java/io/FilterReader/mark/int," Marks the present position in the stream.\n\n @exception  IOException  If an I/O error occurs\n"
10990,method,java/io/FilterReader/reset/," Resets the stream.\n\n @exception  IOException  If an I/O error occurs\n"
10994,class,java/io/FilterOutputStream," This class is the superclass of all classes that filter output \n streams. These streams sit on top of an already existing output \n stream (the <i>underlying</i> output stream) which it uses as its \n basic sink of data, but possibly transforming the data along the \n way or providing additional functionality. \n <p>\n The class <code>FilterOutputStream</code> itself simply overrides \n all methods of <code>OutputStream</code> with versions that pass \n all requests to the underlying output stream. Subclasses of \n <code>FilterOutputStream</code> may further override some of these \n methods as well as provide additional methods and fields. \n\n @author  Jonathan Payne\n @version 1.33, 03/23/10\n @since   JDK1.0\n"
10995,method,java/io/FilterOutputStream/write/int," Writes the specified <code>byte</code> to this output stream. \n <p>\n The <code>write</code> method of <code>FilterOutputStream</code> \n calls the <code>write</code> method of its underlying output stream, \n that is, it performs <tt>out.write(b)</tt>.\n <p>\n Implements the abstract <tt>write</tt> method of <tt>OutputStream</tt>. \n\n @param      b   the <code>byte</code>.\n @exception  IOException  if an I/O error occurs.\n"
10996,method,java/io/FilterOutputStream/write/byte[]," Writes <code>b.length</code> bytes to this output stream. \n <p>\n The <code>write</code> method of <code>FilterOutputStream</code> \n calls its <code>write</code> method of three arguments with the \n arguments <code>b</code>, <code>0</code>, and \n <code>b.length</code>. \n <p>\n Note that this method does not call the one-argument \n <code>write</code> method of its underlying stream with the single \n argument <code>b</code>. \n\n @param      b   the data to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#write(byte[], int, int)\n"
10998,method,java/io/FilterOutputStream/flush/," Flushes this output stream and forces any buffered output bytes \n to be written out to the stream. \n <p>\n The <code>flush</code> method of <code>FilterOutputStream</code> \n calls the <code>flush</code> method of its underlying output stream. \n\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
10999,method,java/io/FilterOutputStream/close/," Closes this output stream and releases any system resources \n associated with the stream. \n <p>\n The <code>close</code> method of <code>FilterOutputStream</code> \n calls its <code>flush</code> method, and then calls the \n <code>close</code> method of its underlying output stream. \n\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#flush()\n @see        java.io.FilterOutputStream#out\n"
11003,method,java/io/FilterInputStream/read/," Reads the next byte of data from this input stream. The value \n byte is returned as an <code>int</code> in the range \n <code>0</code> to <code>255</code>. If no byte is available \n because the end of the stream has been reached, the value \n <code>-1</code> is returned. This method blocks until input data \n is available, the end of the stream is detected, or an exception \n is thrown. \n <p>\n This method\n simply performs <code>in.read()</code> and returns the result.\n\n @return     the next byte of data, or <code>-1</code> if the end of the\n             stream is reached.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11004,method,java/io/FilterInputStream/read/byte[]," Reads up to <code>byte.length</code> bytes of data from this \n input stream into an array of bytes. This method blocks until some \n input is available. \n <p>\n This method simply performs the call\n <code>read(b, 0, b.length)</code> and returns\n the  result. It is important that it does\n <i>not</i> do <code>in.read(b)</code> instead;\n certain subclasses of  <code>FilterInputStream</code>\n depend on the implementation strategy actually\n used.\n\n @param      b   the buffer into which the data is read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the stream has been reached.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterInputStream#read(byte[], int, int)\n"
11005,method,java/io/FilterInputStream/read/byte[];int;int," Reads up to <code>len</code> bytes of data from this input stream \n into an array of bytes. If <code>len</code> is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and <code>0</code> is returned. \n <p>\n This method simply performs <code>in.read(b, off, len)</code> \n and returns the result.\n\n @param      b     the buffer into which the data is read.\n @param      off   the start offset in the destination array <code>b</code>\n @param      len   the maximum number of bytes read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the stream has been reached.\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>b.length - off</code>\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11006,method,java/io/FilterInputStream/skip/long," {@inheritDoc} \n <p>\n This method simply performs <code>in.skip(n)</code>.\n"
11007,method,java/io/FilterInputStream/available/," Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n caller of a method for this input stream. The next caller might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n <p>\n This method returns the result of {@link #in in}.available().\n\n @return     an estimate of the number of bytes that can be read (or skipped\n             over) from this input stream without blocking.\n @exception  IOException  if an I/O error occurs.\n"
11008,method,java/io/FilterInputStream/close/," Closes this input stream and releases any system resources \n associated with the stream. \n This\n method simply performs <code>in.close()</code>.\n\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11009,method,java/io/FilterInputStream/mark/int," Marks the current position in this input stream. A subsequent \n call to the <code>reset</code> method repositions this stream at \n the last marked position so that subsequent reads re-read the same bytes.\n <p>\n The <code>readlimit</code> argument tells this input stream to \n allow that many bytes to be read before the mark position gets \n invalidated. \n <p>\n This method simply performs <code>in.mark(readlimit)</code>.\n\n @param   readlimit   the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n @see     java.io.FilterInputStream#in\n @see     java.io.FilterInputStream#reset()\n"
11010,method,java/io/FilterInputStream/reset/," Repositions this stream to the position at the time the \n <code>mark</code> method was last called on this input stream. \n <p>\n This method\n simply performs <code>in.reset()</code>.\n <p>\n Stream marks are intended to be used in\n situations where you need to read ahead a little to see what's in\n the stream. Often this is most easily done by invoking some\n general parser. If the stream is of the type handled by the\n parse, it just chugs along happily. If the stream is not of\n that type, the parser should toss an exception when it fails.\n If this happens within readlimit bytes, it allows the outer\n code to reset the stream and try another parser.\n\n @exception  IOException  if the stream has not been marked or if the\n               mark has been invalidated.\n @see        java.io.FilterInputStream#in\n @see        java.io.FilterInputStream#mark(int)\n"
11015,method,java/io/FilenameFilter/accept/File;String," Tests if a specified file should be included in a file list.\n\n @param   dir    the directory in which the file was found.\n @param   name   the name of the file.\n @return  <code>true</code> if and only if the name should be\n included in the file list; <code>false</code> otherwise.\n"
11016,class,java/io/FileWriter," Convenience class for writing character files.  The constructors of this\n class assume that the default character encoding and the default byte-buffer\n size are acceptable.  To specify these values yourself, construct an\n OutputStreamWriter on a FileOutputStream.\n\n <p>Whether or not a file is available or may be created depends upon the\n underlying platform.  Some platforms, in particular, allow a file to be\n opened for writing by only one <tt>FileWriter</tt> (or other file-writing\n object) at a time.  In such situations the constructors in this class\n will fail if the file involved is already open.\n\n <p><code>FileWriter</code> is meant for writing streams of characters.\n For writing streams of raw bytes, consider using a\n <code>FileOutputStream</code>.\n\n @see OutputStreamWriter\n @see FileOutputStream\n\n @version 	1.20, 10/03/23\n @author	Mark Reinhold\n @since	JDK1.1\n"
11026,class,java/io/FilePermission," This class represents access to a file or directory.  A FilePermission consists\n of a pathname and a set of actions valid for that pathname.\n <P>\n Pathname is the pathname of the file or directory granted the specified\n actions. A pathname that ends in "/*" (where "/" is\n the file separator character, <code>File.separatorChar</code>) indicates\n all the files and directories contained in that directory. A pathname\n that ends with "/-" indicates (recursively) all files\n and subdirectories contained in that directory. A pathname consisting of\n the special token "&lt;&lt;ALL FILES&gt;&gt;" matches <b>any</b> file.\n <P>\n Note: A pathname consisting of a single "*" indicates all the files\n in the current directory, while a pathname consisting of a single "-" \n indicates all the files in the current directory and\n (recursively) all files and subdirectories contained in the current \n directory.\n <P>\n The actions to be granted are passed to the constructor in a string containing \n a list of one or more comma-separated keywords. The possible keywords are\n "read", "write", "execute", and "delete". Their meaning is defined as follows:\n <P>\n <DL> \n    <DT> read <DD> read permission\n    <DT> write <DD> write permission\n    <DT> execute \n    <DD> execute permission. Allows <code>Runtime.exec</code> to\n         be called. Corresponds to <code>SecurityManager.checkExec</code>.\n    <DT> delete\n    <DD> delete permission. Allows <code>File.delete</code> to\n         be called. Corresponds to <code>SecurityManager.checkDelete</code>.\n </DL>\n <P>\n The actions string is converted to lowercase before processing.\n <P>\n Be careful when granting FilePermissions. Think about the implications \n of granting read and especially write access to various files and \n directories. The "&lt;&lt;ALL FILES>>" permission with write action is \n especially dangerous. This grants permission to write to the entire \n file system. One thing this effectively allows is replacement of the \n system binary, including the JVM runtime environment.\n \n <p>Please note: Code can always read a file from the same\n directory it's in (or a subdirectory of that directory); it does not\n need explicit permission to do so.\n \n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n\n @version 1.81 10/03/23\n\n @author Marianne Mueller\n @author Roland Schemers\n @since 1.2\n\n @serial exclude\n"
11030,method,java/io/FilePermission/getActions/," Returns the "canonical string representation" of the actions.\n That is, this method always returns present actions in the following order: \n read, write, execute, delete. For example, if this FilePermission object\n allows both write and read actions, a call to <code>getActions</code>\n will return the string "read,write".\n\n @return the canonical string representation of the actions.\n"
11032,method,java/io/FilePermission/FilePermission/String;String," Creates a new FilePermission object with the specified actions.\n <i>path</i> is the pathname of a file or directory, and <i>actions</i>\n contains a comma-separated list of the desired actions granted on the\n file or directory. Possible actions are\n "read", "write", "execute", and "delete". \n \n <p>A pathname that ends in "/*" (where "/" is\n the file separator character, <code>File.separatorChar</code>) \n indicates all the files and directories contained in that directory.\n A pathname that ends with "/-" indicates (recursively) all files and\n subdirectories contained in that directory. The special pathname\n "&lt;&lt;ALL FILES&gt;&gt;" matches any file.\n \n <p>A pathname consisting of a single "*" indicates all the files\n in the current directory, while a pathname consisting of a single "-" \n indicates all the files in the current directory and\n (recursively) all files and subdirectories contained in the current \n directory.\n\n <p>A pathname containing an empty string represents an empty path.\n \n @param path the pathname of the file/directory.\n @param actions the action string.\n\n @throws IllegalArgumentException\n		If actions is <code>null</code>, empty or contains an action\n		other than the specified possible actions.\n"
11033,class,java/io/FileOutputStream," A file output stream is an output stream for writing data to a \n <code>File</code> or to a <code>FileDescriptor</code>. Whether or not\n a file is available or may be created depends upon the underlying\n platform.  Some platforms, in particular, allow a file to be opened\n for writing by only one <tt>FileOutputStream</tt> (or other\n file-writing object) at a time.  In such situations the constructors in\n this class will fail if the file involved is already open.\n\n <p><code>FileOutputStream</code> is meant for writing streams of raw bytes\n such as image data. For writing streams of characters, consider using\n <code>FileWriter</code>.\n\n @author  Arthur van Hoff\n @version 1.59, 03/23/10\n @see     java.io.File\n @see     java.io.FileDescriptor\n @see     java.io.FileInputStream\n @since   JDK1.0\n"
11034,method,java/io/FileOutputStream/write/int," Writes the specified byte to this file output stream. Implements \n the <code>write</code> method of <code>OutputStream</code>.\n\n @param      b   the byte to be written.\n @exception  IOException  if an I/O error occurs.\n"
11035,method,java/io/FileOutputStream/write/byte[]," Writes <code>b.length</code> bytes from the specified byte array \n to this file output stream. \n\n @param      b   the data.\n @exception  IOException  if an I/O error occurs.\n"
11036,method,java/io/FileOutputStream/write/byte[];int;int," Writes <code>len</code> bytes from the specified byte array \n starting at offset <code>off</code> to this file output stream. \n\n @param      b     the data.\n @param      off   the start offset in the data.\n @param      len   the number of bytes to write.\n @exception  IOException  if an I/O error occurs.\n"
11037,method,java/io/FileOutputStream/close/," Closes this file output stream and releases any system resources \n associated with this stream. This file output stream may no longer \n be used for writing bytes. \n\n <p> If this stream has an associated channel then the channel is closed\n as well.\n\n @exception  IOException  if an I/O error occurs.\n\n @revised 1.4\n @spec JSR-51\n"
11038,method,java/io/FileOutputStream/getFD/," Returns the file descriptor associated with this stream.\n\n @return  the <code>FileDescriptor</code> object that represents \n          the connection to the file in the file system being used \n          by this <code>FileOutputStream</code> object. \n \n @exception  IOException  if an I/O error occurs.\n @see        java.io.FileDescriptor\n"
11040,method,java/io/FileOutputStream/finalize/," Cleans up the connection to the file, and ensures that the \n <code>close</code> method of this file output stream is\n called when there are no more references to this stream. \n\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FileInputStream#close()\n"
11041,method,java/io/FileOutputStream/FileOutputStream/String," Creates an output file stream to write to the file with the \n specified name. A new <code>FileDescriptor</code> object is \n created to represent this file connection.\n <p>\n First, if there is a security manager, its <code>checkWrite</code> \n method is called with <code>name</code> as its argument.\n <p>\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a <code>FileNotFoundException</code> is thrown.\n\n @param      name   the system-dependent filename\n @exception  FileNotFoundException  if the file exists but is a directory\n                   rather than a regular file, does not exist but cannot\n                   be created, or cannot be opened for any other reason\n @exception  SecurityException  if a security manager exists and its\n               <code>checkWrite</code> method denies write access\n               to the file.\n @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n"
11042,method,java/io/FileOutputStream/FileOutputStream/String;boolean," Creates an output file stream to write to the file with the specified\n <code>name</code>.  If the second argument is <code>true</code>, then\n bytes will be written to the end of the file rather than the beginning.\n A new <code>FileDescriptor</code> object is created to represent this\n file connection.\n <p>\n First, if there is a security manager, its <code>checkWrite</code> \n method is called with <code>name</code> as its argument.\n <p>\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a <code>FileNotFoundException</code> is thrown.\n \n @param     name        the system-dependent file name\n @param     append      if <code>true</code>, then bytes will be written\n                   to the end of the file rather than the beginning\n @exception  FileNotFoundException  if the file exists but is a directory\n                   rather than a regular file, does not exist but cannot\n                   be created, or cannot be opened for any other reason.\n @exception  SecurityException  if a security manager exists and its\n               <code>checkWrite</code> method denies write access\n               to the file.\n @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n @since     JDK1.1\n"
11043,method,java/io/FileOutputStream/FileOutputStream/File," Creates a file output stream to write to the file represented by \n the specified <code>File</code> object. A new \n <code>FileDescriptor</code> object is created to represent this \n file connection.\n <p>\n First, if there is a security manager, its <code>checkWrite</code> \n method is called with the path represented by the <code>file</code> \n argument as its argument.\n <p>\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a <code>FileNotFoundException</code> is thrown.\n\n @param      file               the file to be opened for writing.\n @exception  FileNotFoundException  if the file exists but is a directory\n                   rather than a regular file, does not exist but cannot\n                   be created, or cannot be opened for any other reason\n @exception  SecurityException  if a security manager exists and its\n               <code>checkWrite</code> method denies write access\n               to the file.\n @see        java.io.File#getPath()\n @see        java.lang.SecurityException\n @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n"
11044,method,java/io/FileOutputStream/FileOutputStream/File;boolean," Creates a file output stream to write to the file represented by \n the specified <code>File</code> object. If the second argument is\n <code>true</code>, then bytes will be written to the end of the file\n rather than the beginning. A new <code>FileDescriptor</code> object is\n created to represent this file connection.\n <p>\n First, if there is a security manager, its <code>checkWrite</code> \n method is called with the path represented by the <code>file</code> \n argument as its argument.\n <p>\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a <code>FileNotFoundException</code> is thrown.\n\n @param      file               the file to be opened for writing.\n @param     append      if <code>true</code>, then bytes will be written\n                   to the end of the file rather than the beginning\n @exception  FileNotFoundException  if the file exists but is a directory\n                   rather than a regular file, does not exist but cannot\n                   be created, or cannot be opened for any other reason\n @exception  SecurityException  if a security manager exists and its\n               <code>checkWrite</code> method denies write access\n               to the file.\n @see        java.io.File#getPath()\n @see        java.lang.SecurityException\n @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n @since 1.4\n"
11045,method,java/io/FileOutputStream/FileOutputStream/FileDescriptor," Creates an output file stream to write to the specified file \n descriptor, which represents an existing connection to an actual \n file in the file system.\n <p>\n First, if there is a security manager, its <code>checkWrite</code> \n method is called with the file descriptor <code>fdObj</code> \n argument as its argument.\n\n @param      fdObj   the file descriptor to be opened for writing\n @exception  SecurityException  if a security manager exists and its\n               <code>checkWrite</code> method denies\n               write access to the file descriptor\n @see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)\n"
11046,class,java/io/FileNotFoundException," Signals that an attempt to open the file denoted by a specified pathname\n has failed.\n\n <p> This exception will be thrown by the {@link FileInputStream}, {@link\n FileOutputStream}, and {@link RandomAccessFile} constructors when a file\n with the specified pathname does not exist.  It will also be thrown by these\n constructors if the file does exist but for some reason is inaccessible, for\n example when an attempt is made to open a read-only file for writing.\n\n @author  unascribed\n @version 1.25, 03/23/10\n @since   JDK1.0\n"
11047,method,java/io/FileNotFoundException/FileNotFoundException/," Constructs a <code>FileNotFoundException</code> with\n <code>null</code> as its error detail message.\n"
11050,method,java/io/FileInputStream/read/," Reads a byte of data from this input stream. This method blocks\n if no input is yet available.\n\n @return     the next byte of data, or <code>-1</code> if the end of the\n             file is reached.\n @exception  IOException  if an I/O error occurs.\n"
11051,method,java/io/FileInputStream/read/byte[]," Reads up to <code>b.length</code> bytes of data from this input\n stream into an array of bytes. This method blocks until some input\n is available.\n\n @param      b   the buffer into which the data is read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the file has been reached.\n @exception  IOException  if an I/O error occurs.\n"
11052,method,java/io/FileInputStream/read/byte[];int;int," Reads up to <code>len</code> bytes of data from this input stream\n into an array of bytes. If <code>len</code> is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and <code>0</code> is returned.\n\n @param      b     the buffer into which the data is read.\n @param      off   the start offset in the destination array <code>b</code>\n @param      len   the maximum number of bytes read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the file has been reached.\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>b.length - off</code>\n @exception  IOException  if an I/O error occurs.\n"
11053,method,java/io/FileInputStream/skip/long," Skips over and discards <code>n</code> bytes of data from the\n input stream.\n\n <p>The <code>skip</code> method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly <code>0</code>. If <code>n</code> is negative, an\n <code>IOException</code> is thrown, even though the <code>skip</code>\n method of the {@link InputStream} superclass does nothing in this case.\n The actual number of bytes skipped is returned.\n\n <p>This method may skip more bytes than are remaining in the backing\n file. This produces no exception and the number of bytes skipped\n may include some number of bytes that were beyond the EOF of the\n backing file. Attempting to read from the stream after skipping past\n the end will result in -1 indicating the end of the file.\n\n @param      n   the number of bytes to be skipped.\n @return     the actual number of bytes skipped.\n @exception  IOException  if n is negative, if the stream does not\n                   support seek, or if an I/O error occurs.\n"
11054,method,java/io/FileInputStream/available/," Returns an estimate of the number of remaining bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n\n <p> In some cases, a non-blocking read (or skip) may appear to be\n blocked when it is merely slow, for example when reading large\n files over slow networks.\n\n @return     an estimate of the number of remaining bytes that can be read\n             (or skipped over) from this input stream without blocking.\n @exception  IOException  if this file input stream has been closed by calling\n             {@code close} or an I/O error occurs.\n"
11055,method,java/io/FileInputStream/close/," Closes this file input stream and releases any system resources\n associated with the stream.\n\n <p> If this stream has an associated channel then the channel is closed\n as well.\n\n @exception  IOException  if an I/O error occurs.\n\n @revised 1.4\n @spec JSR-51\n"
11056,method,java/io/FileInputStream/getFD/," Returns the <code>FileDescriptor</code>\n object  that represents the connection to\n the actual file in the file system being\n used by this <code>FileInputStream</code>.\n\n @return     the file descriptor object associated with this stream.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FileDescriptor\n"
11059,method,java/io/FileInputStream/FileInputStream/String," Creates a <code>FileInputStream</code> by\n opening a connection to an actual file,\n the file named by the path name <code>name</code>\n in the file system.  A new <code>FileDescriptor</code>\n object is created to represent this file\n connection.\n <p>\n First, if there is a security\n manager, its <code>checkRead</code> method\n is called with the <code>name</code> argument\n as its argument.\n <p>\n If the named file does not exist, is a directory rather than a regular\n file, or for some other reason cannot be opened for reading then a\n <code>FileNotFoundException</code> is thrown.\n\n @param      name   the system-dependent file name.\n @exception  FileNotFoundException  if the file does not exist,\n                   is a directory rather than a regular file,\n                   or for some other reason cannot be opened for\n                   reading.\n @exception  SecurityException      if a security manager exists and its\n               <code>checkRead</code> method denies read access\n               to the file.\n @see        java.lang.SecurityManager#checkRead(java.lang.String)\n"
11060,method,java/io/FileInputStream/FileInputStream/File," Creates a <code>FileInputStream</code> by\n opening a connection to an actual file,\n the file named by the <code>File</code>\n object <code>file</code> in the file system.\n A new <code>FileDescriptor</code> object\n is created to represent this file connection.\n <p>\n First, if there is a security manager,\n its <code>checkRead</code> method  is called\n with the path represented by the <code>file</code>\n argument as its argument.\n <p>\n If the named file does not exist, is a directory rather than a regular\n file, or for some other reason cannot be opened for reading then a\n <code>FileNotFoundException</code> is thrown.\n\n @param      file   the file to be opened for reading.\n @exception  FileNotFoundException  if the file does not exist,\n                   is a directory rather than a regular file,\n                   or for some other reason cannot be opened for\n                   reading.\n @exception  SecurityException      if a security manager exists and its\n               <code>checkRead</code> method denies read access to the file.\n @see        java.io.File#getPath()\n @see        java.lang.SecurityManager#checkRead(java.lang.String)\n"
11061,method,java/io/FileInputStream/FileInputStream/FileDescriptor," Creates a <code>FileInputStream</code> by using the file descriptor\n <code>fdObj</code>, which represents an existing connection to an\n actual file in the file system.\n <p>\n If there is a security manager, its <code>checkRead</code> method is\n called with the file descriptor <code>fdObj</code> as its argument to\n see if it's ok to read the file descriptor. If read access is denied\n to the file descriptor a <code>SecurityException</code> is thrown.\n <p>\n If <code>fdObj</code> is null then a <code>NullPointerException</code>\n is thrown.\n\n @param      fdObj   the file descriptor to be opened for reading.\n @throws     SecurityException      if a security manager exists and its\n                 <code>checkRead</code> method denies read access to the\n                 file descriptor.\n @see        SecurityManager#checkRead(java.io.FileDescriptor)\n"
11062,interface,java/io/FileFilter," A filter for abstract pathnames.\n\n <p> Instances of this interface may be passed to the <code>{@link\n File#listFiles(java.io.FileFilter) listFiles(FileFilter)}</code> method\n of the <code>{@link java.io.File}</code> class.\n\n @since 1.2\n"
11063,method,java/io/FileFilter/accept/File," Tests whether or not the specified abstract pathname should be\n included in a pathname list.\n\n @param  pathname  The abstract pathname to be tested\n @return  <code>true</code> if and only if <code>pathname</code>\n          should be included\n"
11064,class,java/io/File," An abstract representation of file and directory pathnames.\n\n <p> User interfaces and operating systems use system-dependent <em>pathname\n strings</em> to name files and directories.  This class presents an\n abstract, system-independent view of hierarchical pathnames.  An\n <em>abstract pathname</em> has two components:\n\n <ol>\n <li> An optional system-dependent <em>prefix</em> string,\n      such as a disk-drive specifier, <code>"/"</code>&nbsp;for the UNIX root\n      directory, or <code>"\\\\"</code>&nbsp;for a Microsoft Windows UNC pathname, and\n <li> A sequence of zero or more string <em>names</em>.\n </ol>\n\n The first name in an abstract pathname may be a directory name or, in the\n case of Microsoft Windows UNC pathnames, a hostname.  Each subsequent name\n in an abstract pathname denotes a directory; the last name may denote\n either a directory or a file.  The <em>empty</em> abstract pathname has no\n prefix and an empty name sequence.\n\n <p> The conversion of a pathname string to or from an abstract pathname is\n inherently system-dependent.  When an abstract pathname is converted into a\n pathname string, each name is separated from the next by a single copy of\n the default <em>separator character</em>.  The default name-separator\n character is defined by the system property <code>file.separator</code>, and\n is made available in the public static fields <code>{@link\n #separator}</code> and <code>{@link #separatorChar}</code> of this class.\n When a pathname string is converted into an abstract pathname, the names\n within it may be separated by the default name-separator character or by any\n other name-separator character that is supported by the underlying system.\n\n <p> A pathname, whether abstract or in string form, may be either\n <em>absolute</em> or <em>relative</em>.  An absolute pathname is complete in\n that no other information is required in order to locate the file that it\n denotes.  A relative pathname, in contrast, must be interpreted in terms of\n information taken from some other pathname.  By default the classes in the\n <code>java.io</code> package always resolve relative pathnames against the\n current user directory.  This directory is named by the system property\n <code>user.dir</code>, and is typically the directory in which the Java\n virtual machine was invoked.\n\n <p> The <em>parent</em> of an abstract pathname may be obtained by invoking\n the {@link #getParent} method of this class and consists of the pathname's\n prefix and each name in the pathname's name sequence except for the last.\n Each directory's absolute pathname is an ancestor of any <tt>File</tt>\n object with an absolute abstract pathname which begins with the directory's\n absolute pathname.  For example, the directory denoted by the abstract\n pathname <tt>"/usr"</tt> is an ancestor of the directory denoted by the\n pathname <tt>"/usr/local/bin"</tt>.\n\n <p> The prefix concept is used to handle root directories on UNIX platforms,\n and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,\n as follows:\n\n <ul>\n\n <li> For UNIX platforms, the prefix of an absolute pathname is always\n <code>"/"</code>.  Relative pathnames have no prefix.  The abstract pathname\n denoting the root directory has the prefix <code>"/"</code> and an empty\n name sequence.\n\n <li> For Microsoft Windows platforms, the prefix of a pathname that contains a drive\n specifier consists of the drive letter followed by <code>":"</code> and\n possibly followed by <code>"\\"</code> if the pathname is absolute.  The\n prefix of a UNC pathname is <code>"\\\\"</code>; the hostname and the share\n name are the first two names in the name sequence.  A relative pathname that\n does not specify a drive has no prefix.\n\n </ul>\n\n <p> Instances of this class may or may not denote an actual file-system\n object such as a file or a directory.  If it does denote such an object\n then that object resides in a <i>partition</i>.  A partition is an\n operating system-specific portion of storage for a file system.  A single\n storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may\n contain multiple partitions.  The object, if any, will reside on the\n partition <a name="partName">named</a> by some ancestor of the absolute\n form of this pathname.\n\n <p> A file system may implement restrictions to certain operations on the\n actual file-system object, such as reading, writing, and executing.  These\n restrictions are collectively known as <i>access permissions</i>.  The file\n system may have multiple sets of access permissions on a single object.\n For example, one set may apply to the object's <i>owner</i>, and another\n may apply to all other users.  The access permissions on an object may\n cause some methods in this class to fail.\n\n <p> Instances of the <code>File</code> class are immutable; that is, once\n created, the abstract pathname represented by a <code>File</code> object\n will never change.\n\n @version 1.144, 03/23/10\n @author  unascribed\n @since   JDK1.0\n"
11076,method,java/io/File/canRead/," Tests whether the application can read the file denoted by this\n abstract pathname.\n\n @return  <code>true</code> if and only if the file specified by this\n          abstract pathname exists <em>and</em> can be read by the\n          application; <code>false</code> otherwise\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the file\n"
11077,method,java/io/File/canWrite/," Tests whether the application can modify the file denoted by this\n abstract pathname.\n\n @return  <code>true</code> if and only if the file system actually\n          contains a file denoted by this abstract pathname <em>and</em>\n          the application is allowed to write to the file;\n          <code>false</code> otherwise.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method denies write access to the file\n"
11078,method,java/io/File/exists/," Tests whether the file or directory denoted by this abstract pathname\n exists.\n\n @return  <code>true</code> if and only if the file or directory denoted\n          by this abstract pathname exists; <code>false</code> otherwise\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the file or directory\n"
11079,method,java/io/File/isDirectory/," Tests whether the file denoted by this abstract pathname is a\n directory.\n\n @return <code>true</code> if and only if the file denoted by this\n          abstract pathname exists <em>and</em> is a directory;\n          <code>false</code> otherwise\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the file\n"
11080,method,java/io/File/isFile/," Tests whether the file denoted by this abstract pathname is a normal\n file.  A file is <em>normal</em> if it is not a directory and, in\n addition, satisfies other system-dependent criteria.  Any non-directory\n file created by a Java application is guaranteed to be a normal file.\n\n @return  <code>true</code> if and only if the file denoted by this\n          abstract pathname exists <em>and</em> is a normal file;\n          <code>false</code> otherwise\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the file\n"
11081,method,java/io/File/isHidden/," Tests whether the file named by this abstract pathname is a hidden\n file.  The exact definition of <em>hidden</em> is system-dependent.  On\n UNIX systems, a file is considered to be hidden if its name begins with\n a period character (<code>'.'</code>).  On Microsoft Windows systems, a file is\n considered to be hidden if it has been marked as such in the filesystem.\n\n @return  <code>true</code> if and only if the file denoted by this\n          abstract pathname is hidden according to the conventions of the\n          underlying platform\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the file\n\n @since 1.2\n"
11082,method,java/io/File/lastModified/," Returns the time that the file denoted by this abstract pathname was\n last modified.\n\n @return  A <code>long</code> value representing the time the file was\n          last modified, measured in milliseconds since the epoch\n          (00:00:00 GMT, January 1, 1970), or <code>0L</code> if the\n          file does not exist or if an I/O error occurs\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the file\n"
11083,method,java/io/File/length/," Returns the length of the file denoted by this abstract pathname.\n The return value is unspecified if this pathname denotes a directory.\n\n @return  The length, in bytes, of the file denoted by this abstract\n          pathname, or <code>0L</code> if the file does not exist.  Some\n          operating systems may return <code>0L</code> for pathnames\n          denoting system-dependent entities such as devices or pipes.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the file\n"
11087,method,java/io/File/list/," Returns an array of strings naming the files and directories in the\n directory denoted by this abstract pathname.\n\n <p> If this abstract pathname does not denote a directory, then this\n method returns <code>null</code>.  Otherwise an array of strings is\n returned, one for each file or directory in the directory.  Names\n denoting the directory itself and the directory's parent directory are\n not included in the result.  Each string is a file name rather than a\n complete path.\n\n <p> There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\n\n @return  An array of strings naming the files and directories in the\n          directory denoted by this abstract pathname.  The array will be\n          empty if the directory is empty.  Returns <code>null</code> if\n          this abstract pathname does not denote a directory, or if an\n          I/O error occurs.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the directory\n"
11088,method,java/io/File/list/FilenameFilter," Returns an array of strings naming the files and directories in the\n directory denoted by this abstract pathname that satisfy the specified\n filter.  The behavior of this method is the same as that of the\n <code>{@link #list()}</code> method, except that the strings in the\n returned array must satisfy the filter.  If the given\n <code>filter</code> is <code>null</code> then all names are accepted.\n Otherwise, a name satisfies the filter if and only if the value\n <code>true</code> results when the <code>{@link\n FilenameFilter#accept}</code> method of the filter is invoked on this\n abstract pathname and the name of a file or directory in the directory\n that it denotes.\n\n @param  filter  A filename filter\n\n @return  An array of strings naming the files and directories in the\n          directory denoted by this abstract pathname that were accepted\n          by the given <code>filter</code>.  The array will be empty if\n          the directory is empty or if no names were accepted by the\n          filter.  Returns <code>null</code> if this abstract pathname\n          does not denote a directory, or if an I/O error occurs.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the directory\n"
11089,method,java/io/File/listFiles/," Returns an array of abstract pathnames denoting the files in the\n directory denoted by this abstract pathname.\n\n <p> If this abstract pathname does not denote a directory, then this\n method returns <code>null</code>.  Otherwise an array of\n <code>File</code> objects is returned, one for each file or directory in\n the directory.  Pathnames denoting the directory itself and the\n directory's parent directory are not included in the result.  Each\n resulting abstract pathname is constructed from this abstract pathname\n using the <code>{@link #File(java.io.File, java.lang.String)\n File(File,&nbsp;String)}</code> constructor.  Therefore if this pathname\n is absolute then each resulting pathname is absolute; if this pathname\n is relative then each resulting pathname will be relative to the same\n directory.\n\n <p> There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\n\n @return  An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract\n          pathname.  The array will be empty if the directory is\n          empty.  Returns <code>null</code> if this abstract pathname\n          does not denote a directory, or if an I/O error occurs.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the directory\n\n @since 1.2\n"
11090,method,java/io/File/listFiles/FilenameFilter," Returns an array of abstract pathnames denoting the files and\n directories in the directory denoted by this abstract pathname that\n satisfy the specified filter.  The behavior of this method is the\n same as that of the <code>{@link #listFiles()}</code> method, except\n that the pathnames in the returned array must satisfy the filter.\n If the given <code>filter</code> is <code>null</code> then all\n pathnames are accepted.  Otherwise, a pathname satisfies the filter\n if and only if the value <code>true</code> results when the\n <code>{@link FilenameFilter#accept}</code> method of the filter is\n invoked on this abstract pathname and the name of a file or\n directory in the directory that it denotes.\n\n @param  filter  A filename filter\n\n @return  An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract\n          pathname.  The array will be empty if the directory is\n          empty.  Returns <code>null</code> if this abstract pathname\n          does not denote a directory, or if an I/O error occurs.\n          \n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the directory\n\n @since 1.2\n"
11091,method,java/io/File/listFiles/FileFilter," Returns an array of abstract pathnames denoting the files and\n directories in the directory denoted by this abstract pathname that\n satisfy the specified filter.  The behavior of this method is the\n same as that of the <code>{@link #listFiles()}</code> method, except\n that the pathnames in the returned array must satisfy the filter.\n If the given <code>filter</code> is <code>null</code> then all\n pathnames are accepted.  Otherwise, a pathname satisfies the filter\n if and only if the value <code>true</code> results when the\n <code>{@link FileFilter#accept(java.io.File)}</code> method of\n the filter is invoked on the pathname.\n\n @param  filter  A file filter\n\n @return  An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract\n          pathname.  The array will be empty if the directory is\n          empty.  Returns <code>null</code> if this abstract pathname\n          does not denote a directory, or if an I/O error occurs.\n          \n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method denies read access to the directory\n\n @since 1.2\n"
11092,method,java/io/File/mkdir/," Creates the directory named by this abstract pathname.\n\n @return  <code>true</code> if and only if the directory was\n          created; <code>false</code> otherwise\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method does not permit the named directory to be created\n"
11093,method,java/io/File/mkdirs/," Creates the directory named by this abstract pathname, including any\n necessary but nonexistent parent directories.  Note that if this\n operation fails it may have succeeded in creating some of the necessary\n parent directories.\n\n @return  <code>true</code> if and only if the directory was created,\n          along with all necessary parent directories; <code>false</code>\n          otherwise\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkRead(java.lang.String)}</code>\n          method does not permit verification of the existence of the \n          named directory and all necessary parent directories; or if\n          the <code>{@link \n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method does not permit the named directory and all necessary\n          parent directories to be created\n"
11095,method,java/io/File/setLastModified/long," Sets the last-modified time of the file or directory named by this\n abstract pathname.\n\n <p> All platforms support file-modification times to the nearest second,\n but some provide more precision.  The argument will be truncated to fit\n the supported precision.  If the operation succeeds and no intervening\n operations on the file take place, then the next invocation of the\n <code>{@link #lastModified}</code> method will return the (possibly\n truncated) <code>time</code> argument that was passed to this method.\n\n @param  time  The new last-modified time, measured in milliseconds since\n               the epoch (00:00:00 GMT, January 1, 1970)\n\n @return <code>true</code> if and only if the operation succeeded;\n          <code>false</code> otherwise\n\n @throws  IllegalArgumentException  If the argument is negative\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method denies write access to the named file\n\n @since 1.2\n"
11097,method,java/io/File/setWritable/boolean;boolean," Sets the owner's or everybody's write permission for this abstract\n pathname.\n\n @param   writable\n          If <code>true</code>, sets the access permission to allow write\n          operations; if <code>false</code> to disallow write operations\n\n @param   ownerOnly\n          If <code>true</code>, the write permission applies only to the\n          owner's write permission; otherwise, it applies to everybody.  If\n          the underlying file system can not distinguish the owner's write\n          permission from that of others, then the permission will apply to\n          everybody, regardless of this value.\n\n @return  <code>true</code> if and only if the operation succeeded. The\n          operation will fail if the user does not have permission to change\n          the access permissions of this abstract pathname.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method denies write access to the named file\n\n @since 1.6\n"
11099,method,java/io/File/setReadable/boolean;boolean," Sets the owner's or everybody's read permission for this abstract\n pathname.\n\n @param   readable\n          If <code>true</code>, sets the access permission to allow read\n          operations; if <code>false</code> to disallow read operations\n\n @param   ownerOnly\n          If <code>true</code>, the read permission applies only to the\n          owner's read permission; otherwise, it applies to everybody.  If\n          the underlying file system can not distinguish the owner's read\n          permission from that of others, then the permission will apply to\n          everybody, regardless of this value.\n\n @return  <code>true</code> if and only if the operation succeeded.  The\n          operation will fail if the user does not have permission to\n          change the access permissions of this abstract pathname.  If\n          <code>readable</code> is <code>false</code> and the underlying\n          file system does not implement a read permission, then the\n          operation will fail.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method denies write access to the file\n\n @since 1.6\n"
11100,method,java/io/File/setReadable/boolean," A convenience method to set the owner's read permission for this abstract\n pathname.\n\n <p>An invocation of this method of the form <tt>file.setReadable(arg)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     file.setReadable(arg, true) </pre>\n\n @param  readable\n          If <code>true</code>, sets the access permission to allow read\n          operations; if <code>false</code> to disallow read operations\n\n @return  <code>true</code> if and only if the operation succeeded.  The\n          operation will fail if the user does not have permission to\n          change the access permissions of this abstract pathname.  If\n          <code>readable</code> is <code>false</code> and the underlying\n          file system does not implement a read permission, then the\n          operation will fail.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method denies write access to the file\n\n @since 1.6\n"
11101,method,java/io/File/setExecutable/boolean;boolean," Sets the owner's or everybody's execute permission for this abstract\n pathname.\n\n @param   executable\n          If <code>true</code>, sets the access permission to allow execute\n          operations; if <code>false</code> to disallow execute operations\n\n @param   ownerOnly\n          If <code>true</code>, the execute permission applies only to the\n          owner's execute permission; otherwise, it applies to everybody.\n          If the underlying file system can not distinguish the owner's\n          execute permission from that of others, then the permission will\n          apply to everybody, regardless of this value.\n\n @return  <code>true</code> if and only if the operation succeeded.  The\n          operation will fail if the user does not have permission to\n          change the access permissions of this abstract pathname.  If\n          <code>executable</code> is <code>false</code> and the underlying\n          file system does not implement an execute permission, then the\n          operation will fail.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method denies write access to the file\n\n @since 1.6\n"
11102,method,java/io/File/setExecutable/boolean," A convenience method to set the owner's execute permission for this abstract\n pathname.\n\n <p>An invocation of this method of the form <tt>file.setExcutable(arg)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     file.setExecutable(arg, true) </pre>\n\n @param   executable\n          If <code>true</code>, sets the access permission to allow execute\n          operations; if <code>false</code> to disallow execute operations\n\n @return   <code>true</code> if and only if the operation succeeded.  The\n           operation will fail if the user does not have permission to\n           change the access permissions of this abstract pathname.  If\n           <code>executable</code> is <code>false</code> and the underlying\n           file system does not implement an excute permission, then the\n           operation will fail.\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>\n          method denies write access to the file\n\n @since 1.6\n"
11103,method,java/io/File/canExecute/," Tests whether the application can execute the file denoted by this\n abstract pathname.\n\n @return  <code>true</code> if and only if the abstract pathname exists\n          <em>and</em> the application is allowed to execute the file\n\n @throws  SecurityException\n          If a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkExec(java.lang.String)}</code>\n          method denies execute access to the file\n\n @since 1.6\n"
11104,method,java/io/File/listRoots/," List the available filesystem roots.\n\n <p> A particular Java platform may support zero or more\n hierarchically-organized file systems.  Each file system has a\n <code>root</code> directory from which all other files in that file\n system can be reached.  Windows platforms, for example, have a root\n directory for each active drive; UNIX platforms have a single root\n directory, namely <code>"/"</code>.  The set of available filesystem\n roots is affected by various system-level operations such as the insertion\n or ejection of removable media and the disconnecting or unmounting of\n physical or virtual disk drives.\n\n <p> This method returns an array of <code>File</code> objects that\n denote the root directories of the available filesystem roots.  It is\n guaranteed that the canonical pathname of any file physically present on\n the local machine will begin with one of the roots returned by this\n method.\n\n <p> The canonical pathname of a file that resides on some other machine\n and is accessed via a remote-filesystem protocol such as SMB or NFS may\n or may not begin with one of the roots returned by this method.  If the\n pathname of a remote file is syntactically indistinguishable from the\n pathname of a local file then it will begin with one of the roots\n returned by this method.  Thus, for example, <code>File</code> objects\n denoting the root directories of the mapped network drives of a Windows\n platform will be returned by this method, while <code>File</code>\n objects containing UNC pathnames will not be returned by this method.\n\n <p> Unlike most methods in this class, this method does not throw\n security exceptions.  If a security manager exists and its <code>{@link\n java.lang.SecurityManager#checkRead(java.lang.String)}</code> method\n denies read access to a particular root directory, then that directory\n will not appear in the result.\n\n @return  An array of <code>File</code> objects denoting the available\n          filesystem roots, or <code>null</code> if the set of roots\n          could not be determined.  The array will be empty if there are\n          no filesystem roots.\n\n @since 1.2\n"
11106,method,java/io/File/getFreeSpace/," Returns the number of unallocated bytes in the partition <a\n href="#partName">named</a> by this abstract path name.\n\n <p> The returned number of unallocated bytes is a hint, but not\n a guarantee, that it is possible to use most or any of these\n bytes.  The number of unallocated bytes is most likely to be\n accurate immediately after this call.  It is likely to be made\n inaccurate by any external I/O operations including those made\n on the system outside of this virtual machine.  This method\n makes no guarantee that write operations to this file system\n will succeed.\n\n @return  The number of unallocated bytes on the partition <tt>0L</tt>\n          if the abstract pathname does not name a partition.  This\n          value will be less than or equal to the total file system size\n          returned by {@link #getTotalSpace}.\n\n @throws  SecurityException\n          If a security manager has been installed and it denies\n          {@link RuntimePermission}<tt>("getFileSystemAttributes")</tt>\n          or its {@link SecurityManager#checkRead(String)} method denies\n          read access to the file named by this abstract pathname\n\n @since  1.6\n"
11111,method,java/io/File/equals/Object," Tests this abstract pathname for equality with the given object.\n Returns <code>true</code> if and only if the argument is not\n <code>null</code> and is an abstract pathname that denotes the same file\n or directory as this abstract pathname.  Whether or not two abstract\n pathnames are equal depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not.\n\n @param   obj   The object to be compared with this abstract pathname\n\n @return  <code>true</code> if and only if the objects are the same;\n          <code>false</code> otherwise\n"
11115,method,java/io/File/File/String;String," Creates a new <code>File</code> instance from a parent pathname string\n and a child pathname string.\n\n <p> If <code>parent</code> is <code>null</code> then the new\n <code>File</code> instance is created as if by invoking the\n single-argument <code>File</code> constructor on the given\n <code>child</code> pathname string.\n\n <p> Otherwise the <code>parent</code> pathname string is taken to denote\n a directory, and the <code>child</code> pathname string is taken to\n denote either a directory or a file.  If the <code>child</code> pathname\n string is absolute then it is converted into a relative pathname in a\n system-dependent way.  If <code>parent</code> is the empty string then\n the new <code>File</code> instance is created by converting\n <code>child</code> into an abstract pathname and resolving the result\n against a system-dependent default directory.  Otherwise each pathname\n string is converted into an abstract pathname and the child abstract\n pathname is resolved against the parent.\n\n @param   parent  The parent pathname string\n @param   child   The child pathname string\n @throws  NullPointerException\n          If <code>child</code> is <code>null</code>\n"
11116,method,java/io/File/File/File;String," Creates a new <code>File</code> instance from a parent abstract\n pathname and a child pathname string.\n\n <p> If <code>parent</code> is <code>null</code> then the new\n <code>File</code> instance is created as if by invoking the\n single-argument <code>File</code> constructor on the given\n <code>child</code> pathname string.\n\n <p> Otherwise the <code>parent</code> abstract pathname is taken to\n denote a directory, and the <code>child</code> pathname string is taken\n to denote either a directory or a file.  If the <code>child</code>\n pathname string is absolute then it is converted into a relative\n pathname in a system-dependent way.  If <code>parent</code> is the empty\n abstract pathname then the new <code>File</code> instance is created by\n converting <code>child</code> into an abstract pathname and resolving\n the result against a system-dependent default directory.  Otherwise each\n pathname string is converted into an abstract pathname and the child\n abstract pathname is resolved against the parent.\n\n @param   parent  The parent abstract pathname\n @param   child   The child pathname string\n @throws  NullPointerException\n          If <code>child</code> is <code>null</code>\n"
11117,method,java/io/File/File/URI," Creates a new <tt>File</tt> instance by converting the given\n <tt>file:</tt> URI into an abstract pathname.\n\n <p> The exact form of a <tt>file:</tt> URI is system-dependent, hence\n the transformation performed by this constructor is also\n system-dependent.\n\n <p> For a given abstract pathname <i>f</i> it is guaranteed that\n\n <blockquote><tt>\n new File(</tt><i>&nbsp;f</i><tt>.{@link #toURI() toURI}()).equals(</tt><i>&nbsp;f</i><tt>.{@link #getAbsoluteFile() getAbsoluteFile}())\n </tt></blockquote>\n\n so long as the original abstract pathname, the URI, and the new abstract\n pathname are all created in (possibly different invocations of) the same\n Java virtual machine.  This relationship typically does not hold,\n however, when a <tt>file:</tt> URI that is created in a virtual machine\n on one operating system is converted into an abstract pathname in a\n virtual machine on a different operating system.\n\n @param  uri\n         An absolute, hierarchical URI with a scheme equal to\n         <tt>"file"</tt>, a non-empty path component, and undefined\n         authority, query, and fragment components\n\n @throws  NullPointerException\n          If <tt>uri</tt> is <tt>null</tt>\n\n @throws  IllegalArgumentException\n          If the preconditions on the parameter do not hold\n\n @see #toURI()\n @see java.net.URI\n @since 1.4\n"
11125,class,java/io/EOFException," Signals that an end of file or end of stream has been reached\n unexpectedly during input.\n <p>\n This exception is mainly used by data input streams to signal end of\n stream. Note that many other input operations return a special value on\n end of stream rather than throwing an exception.\n <p>\n\n @author  Frank Yellin\n @version 1.15, 03/23/10\n @see     java.io.DataInputStream\n @see     java.io.IOException\n @since   JDK1.0\n"
11126,method,java/io/EOFException/EOFException/," Constructs an <code>EOFException</code> with <code>null</code>\n as its error detail message.\n"
11127,method,java/io/EOFException/EOFException/String," Constructs an <code>EOFException</code> with the specified detail\n message. The string <code>s</code> may later be retrieved by the\n <code>{@link java.lang.Throwable#getMessage}</code> method of class\n <code>java.lang.Throwable</code>.\n\n @param   s   the detail message.\n"
11128,class,java/io/DataOutputStream," A data output stream lets an application write primitive Java data \n types to an output stream in a portable way. An application can \n then use a data input stream to read the data back in. \n\n @author  unascribed\n @version 1.45, 03/23/10\n @see     java.io.DataInputStream\n @since   JDK1.0\n"
11129,method,java/io/DataOutputStream/write/int," Writes the specified byte (the low eight bits of the argument \n <code>b</code>) to the underlying output stream. If no exception \n is thrown, the counter <code>written</code> is incremented by \n <code>1</code>.\n <p>\n Implements the <code>write</code> method of <code>OutputStream</code>.\n\n @param      b   the <code>byte</code> to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11130,method,java/io/DataOutputStream/write/byte[];int;int," Writes <code>len</code> bytes from the specified byte array \n starting at offset <code>off</code> to the underlying output stream. \n If no exception is thrown, the counter <code>written</code> is \n incremented by <code>len</code>.\n\n @param      b     the data.\n @param      off   the start offset in the data.\n @param      len   the number of bytes to write.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11131,method,java/io/DataOutputStream/flush/," Flushes this data output stream. This forces any buffered output \n bytes to be written out to the stream. \n <p>\n The <code>flush</code> method of <code>DataOutputStream</code>\n calls the <code>flush</code> method of its underlying output stream.\n\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n @see        java.io.OutputStream#flush()\n"
11132,method,java/io/DataOutputStream/writeBoolean/boolean," Writes a <code>boolean</code> to the underlying output stream as \n a 1-byte value. The value <code>true</code> is written out as the \n value <code>(byte)1</code>; the value <code>false</code> is \n written out as the value <code>(byte)0</code>. If no exception is \n thrown, the counter <code>written</code> is incremented by \n <code>1</code>.\n\n @param      v   a <code>boolean</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11133,method,java/io/DataOutputStream/writeByte/int," Writes out a <code>byte</code> to the underlying output stream as \n a 1-byte value. If no exception is thrown, the counter \n <code>written</code> is incremented by <code>1</code>.\n\n @param      v   a <code>byte</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11134,method,java/io/DataOutputStream/writeShort/int," Writes a <code>short</code> to the underlying output stream as two\n bytes, high byte first. If no exception is thrown, the counter \n <code>written</code> is incremented by <code>2</code>.\n\n @param      v   a <code>short</code> to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11135,method,java/io/DataOutputStream/writeChar/int," Writes a <code>char</code> to the underlying output stream as a \n 2-byte value, high byte first. If no exception is thrown, the \n counter <code>written</code> is incremented by <code>2</code>.\n\n @param      v   a <code>char</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11136,method,java/io/DataOutputStream/writeInt/int," Writes an <code>int</code> to the underlying output stream as four\n bytes, high byte first. If no exception is thrown, the counter \n <code>written</code> is incremented by <code>4</code>.\n\n @param      v   an <code>int</code> to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11137,method,java/io/DataOutputStream/writeLong/long," Writes a <code>long</code> to the underlying output stream as eight\n bytes, high byte first. In no exception is thrown, the counter \n <code>written</code> is incremented by <code>8</code>.\n\n @param      v   a <code>long</code> to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11138,method,java/io/DataOutputStream/writeFloat/float," Converts the float argument to an <code>int</code> using the \n <code>floatToIntBits</code> method in class <code>Float</code>, \n and then writes that <code>int</code> value to the underlying \n output stream as a 4-byte quantity, high byte first. If no \n exception is thrown, the counter <code>written</code> is \n incremented by <code>4</code>.\n\n @param      v   a <code>float</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n @see        java.lang.Float#floatToIntBits(float)\n"
11139,method,java/io/DataOutputStream/writeDouble/double," Converts the double argument to a <code>long</code> using the \n <code>doubleToLongBits</code> method in class <code>Double</code>, \n and then writes that <code>long</code> value to the underlying \n output stream as an 8-byte quantity, high byte first. If no \n exception is thrown, the counter <code>written</code> is \n incremented by <code>8</code>.\n\n @param      v   a <code>double</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n @see        java.lang.Double#doubleToLongBits(double)\n"
11140,method,java/io/DataOutputStream/writeBytes/String," Writes out the string to the underlying output stream as a \n sequence of bytes. Each character in the string is written out, in \n sequence, by discarding its high eight bits. If no exception is \n thrown, the counter <code>written</code> is incremented by the \n length of <code>s</code>.\n\n @param      s   a string of bytes to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11141,method,java/io/DataOutputStream/writeChars/String," Writes a string to the underlying output stream as a sequence of \n characters. Each character is written to the data output stream as \n if by the <code>writeChar</code> method. If no exception is \n thrown, the counter <code>written</code> is incremented by twice \n the length of <code>s</code>.\n\n @param      s   a <code>String</code> value to be written.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.DataOutputStream#writeChar(int)\n @see        java.io.FilterOutputStream#out\n"
11147,method,java/io/DataOutput/write/int," Writes to the output stream the eight\n low-order bits of the argument <code>b</code>.\n The 24 high-order  bits of <code>b</code>\n are ignored.\n\n @param      b   the byte to be written.\n @throws     IOException  if an I/O error occurs.\n"
11148,method,java/io/DataOutput/write/byte[]," Writes to the output stream all the bytes in array <code>b</code>.\n If <code>b</code> is <code>null</code>,\n a <code>NullPointerException</code> is thrown.\n If <code>b.length</code> is zero, then\n no bytes are written. Otherwise, the byte\n <code>b[0]</code> is written first, then\n <code>b[1]</code>, and so on; the last byte\n written is <code>b[b.length-1]</code>.\n\n @param      b   the data.\n @throws     IOException  if an I/O error occurs.\n"
11149,method,java/io/DataOutput/write/byte[];int;int," Writes <code>len</code> bytes from array\n <code>b</code>, in order,  to\n the output stream.  If <code>b</code>\n is <code>null</code>, a <code>NullPointerException</code>\n is thrown.  If <code>off</code> is negative,\n or <code>len</code> is negative, or <code>off+len</code>\n is greater than the length of the array\n <code>b</code>, then an <code>IndexOutOfBoundsException</code>\n is thrown.  If <code>len</code> is zero,\n then no bytes are written. Otherwise, the\n byte <code>b[off]</code> is written first,\n then <code>b[off+1]</code>, and so on; the\n last byte written is <code>b[off+len-1]</code>.\n\n @param      b     the data.\n @param      off   the start offset in the data.\n @param      len   the number of bytes to write.\n @throws     IOException  if an I/O error occurs.\n"
11150,method,java/io/DataOutput/writeBoolean/boolean," Writes a <code>boolean</code> value to this output stream.\n If the argument <code>v</code>\n is <code>true</code>, the value <code>(byte)1</code>\n is written; if <code>v</code> is <code>false</code>,\n the  value <code>(byte)0</code> is written.\n The byte written by this method may\n be read by the <code>readBoolean</code>\n method of interface <code>DataInput</code>,\n which will then return a <code>boolean</code>\n equal to <code>v</code>.\n\n @param      v   the boolean to be written.\n @throws     IOException  if an I/O error occurs.\n"
11151,method,java/io/DataOutput/writeByte/int," Writes to the output stream the eight low-\n order bits of the argument <code>v</code>.\n The 24 high-order bits of <code>v</code>\n are ignored. (This means  that <code>writeByte</code>\n does exactly the same thing as <code>write</code>\n for an integer argument.) The byte written\n by this method may be read by the <code>readByte</code>\n method of interface <code>DataInput</code>,\n which will then return a <code>byte</code>\n equal to <code>(byte)v</code>.\n\n @param      v   the byte value to be written.\n @throws     IOException  if an I/O error occurs.\n"
11152,method,java/io/DataOutput/writeShort/int," Writes two bytes to the output\n stream to represent the value of the argument.\n The byte values to be written, in the  order\n shown, are: <p>\n <pre><code>\n (byte)(0xff &amp; (v &gt;&gt; 8))\n (byte)(0xff &amp; v)\n </code> </pre> <p>\n The bytes written by this method may be\n read by the <code>readShort</code> method\n of interface <code>DataInput</code> , which\n will then return a <code>short</code> equal\n to <code>(short)v</code>.\n\n @param      v   the <code>short</code> value to be written.\n @throws     IOException  if an I/O error occurs.\n"
11153,method,java/io/DataOutput/writeChar/int," Writes a <code>char</code> value, which\n is comprised of two bytes, to the\n output stream.\n The byte values to be written, in the  order\n shown, are:\n <p><pre><code>\n (byte)(0xff &amp; (v &gt;&gt; 8))\n (byte)(0xff &amp; v)\n </code></pre><p>\n The bytes written by this method may be\n read by the <code>readChar</code> method\n of interface <code>DataInput</code> , which\n will then return a <code>char</code> equal\n to <code>(char)v</code>.\n\n @param      v   the <code>char</code> value to be written.\n @throws     IOException  if an I/O error occurs.\n"
11155,method,java/io/DataOutput/writeLong/long," Writes a <code>long</code> value, which is\n comprised of eight bytes, to the output stream.\n The byte values to be written, in the  order\n shown, are:\n <p><pre><code>\n (byte)(0xff &amp; (v &gt;&gt; 56))\n (byte)(0xff &amp; (v &gt;&gt; 48))\n (byte)(0xff &amp; (v &gt;&gt; 40))\n (byte)(0xff &amp; (v &gt;&gt; 32))\n (byte)(0xff &amp; (v &gt;&gt; 24))\n (byte)(0xff &amp; (v &gt;&gt; 16))\n (byte)(0xff &amp; (v &gt;&gt;  8))\n (byte)(0xff &amp; v)\n </code></pre><p>\n The bytes written by this method may be\n read by the <code>readLong</code> method\n of interface <code>DataInput</code> , which\n will then return a <code>long</code> equal\n to <code>v</code>.\n\n @param      v   the <code>long</code> value to be written.\n @throws     IOException  if an I/O error occurs.\n"
11156,method,java/io/DataOutput/writeFloat/float," Writes a <code>float</code> value,\n which is comprised of four bytes, to the output stream.\n It does this as if it first converts this\n <code>float</code> value to an <code>int</code>\n in exactly the manner of the <code>Float.floatToIntBits</code>\n method  and then writes the <code>int</code>\n value in exactly the manner of the  <code>writeInt</code>\n method.  The bytes written by this method\n may be read by the <code>readFloat</code>\n method of interface <code>DataInput</code>,\n which will then return a <code>float</code>\n equal to <code>v</code>.\n\n @param      v   the <code>float</code> value to be written.\n @throws     IOException  if an I/O error occurs.\n"
11157,method,java/io/DataOutput/writeDouble/double," Writes a <code>double</code> value,\n which is comprised of eight bytes, to the output stream.\n It does this as if it first converts this\n <code>double</code> value to a <code>long</code>\n in exactly the manner of the <code>Double.doubleToLongBits</code>\n method  and then writes the <code>long</code>\n value in exactly the manner of the  <code>writeLong</code>\n method. The bytes written by this method\n may be read by the <code>readDouble</code>\n method of interface <code>DataInput</code>,\n which will then return a <code>double</code>\n equal to <code>v</code>.\n\n @param      v   the <code>double</code> value to be written.\n @throws     IOException  if an I/O error occurs.\n"
11158,method,java/io/DataOutput/writeBytes/String," Writes a string to the output stream.\n For every character in the string\n <code>s</code>,  taken in order, one byte\n is written to the output stream.  If\n <code>s</code> is <code>null</code>, a <code>NullPointerException</code>\n is thrown.<p>  If <code>s.length</code>\n is zero, then no bytes are written. Otherwise,\n the character <code>s[0]</code> is written\n first, then <code>s[1]</code>, and so on;\n the last character written is <code>s[s.length-1]</code>.\n For each character, one byte is written,\n the low-order byte, in exactly the manner\n of the <code>writeByte</code> method . The\n high-order eight bits of each character\n in the string are ignored.\n\n @param      s   the string of bytes to be written.\n @throws     IOException  if an I/O error occurs.\n"
11159,method,java/io/DataOutput/writeChars/String," Writes every character in the string <code>s</code>,\n to the output stream, in order,\n two bytes per character. If <code>s</code>\n is <code>null</code>, a <code>NullPointerException</code>\n is thrown.  If <code>s.length</code>\n is zero, then no characters are written.\n Otherwise, the character <code>s[0]</code>\n is written first, then <code>s[1]</code>,\n and so on; the last character written is\n <code>s[s.length-1]</code>. For each character,\n two bytes are actually written, high-order\n byte first, in exactly the manner of the\n <code>writeChar</code> method.\n\n @param      s   the string value to be written.\n @throws     IOException  if an I/O error occurs.\n"
11160,method,java/io/DataOutput/writeUTF/String," Writes two bytes of length information\n to the output stream, followed\n by the\n <a href="DataInput.html#modified-utf-8">modified UTF-8</a>\n representation\n of  every character in the string <code>s</code>.\n If <code>s</code> is <code>null</code>,\n a <code>NullPointerException</code> is thrown.\n Each character in the string <code>s</code>\n is converted to a group of one, two, or\n three bytes, depending on the value of the\n character.<p>\n If a character <code>c</code>\n is in the range <code>&#92;u0001</code> through\n <code>&#92;u007f</code>, it is represented\n by one byte:<p>\n <pre>(byte)c </pre>  <p>\n If a character <code>c</code> is <code>&#92;u0000</code>\n or is in the range <code>&#92;u0080</code>\n through <code>&#92;u07ff</code>, then it is\n represented by two bytes, to be written\n in the order shown:<p> <pre><code>\n (byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6)))\n (byte)(0x80 | (0x3f &amp; c))\n  </code></pre>  <p> If a character\n <code>c</code> is in the range <code>&#92;u0800</code>\n through <code>uffff</code>, then it is\n represented by three bytes, to be written\n in the order shown:<p> <pre><code>\n (byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12)))\n (byte)(0x80 | (0x3f &amp; (c &gt;&gt;  6)))\n (byte)(0x80 | (0x3f &amp; c))\n  </code></pre>  <p> First,\n the total number of bytes needed to represent\n all the characters of <code>s</code> is\n calculated. If this number is larger than\n <code>65535</code>, then a <code>UTFDataFormatException</code>\n is thrown. Otherwise, this length is written\n to the output stream in exactly the manner\n of the <code>writeShort</code> method;\n after this, the one-, two-, or three-byte\n representation of each character in the\n string <code>s</code> is written.<p>  The\n bytes written by this method may be read\n by the <code>readUTF</code> method of interface\n <code>DataInput</code> , which will then\n return a <code>String</code> equal to <code>s</code>.\n\n @param      s   the string value to be written.\n @throws     IOException  if an I/O error occurs.\n"
11162,method,java/io/DataInputStream/read/byte[]," Reads some number of bytes from the contained input stream and \n stores them into the buffer array <code>b</code>. The number of \n bytes actually read is returned as an integer. This method blocks \n until input data is available, end of file is detected, or an \n exception is thrown. \n \n <p>If <code>b</code> is null, a <code>NullPointerException</code> is \n thrown. If the length of <code>b</code> is zero, then no bytes are \n read and <code>0</code> is returned; otherwise, there is an attempt \n to read at least one byte. If no byte is available because the \n stream is at end of file, the value <code>-1</code> is returned;\n otherwise, at least one byte is read and stored into <code>b</code>. \n \n <p>The first byte read is stored into element <code>b[0]</code>, the \n next one into <code>b[1]</code>, and so on. The number of bytes read \n is, at most, equal to the length of <code>b</code>. Let <code>k</code> \n be the number of bytes actually read; these bytes will be stored in \n elements <code>b[0]</code> through <code>b[k-1]</code>, leaving \n elements <code>b[k]</code> through <code>b[b.length-1]</code> \n unaffected. \n \n <p>The <code>read(b)</code> method has the same effect as: \n <blockquote><pre>\n read(b, 0, b.length) \n </pre></blockquote>\n\n @param      b   the buffer into which the data is read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end\n             of the stream has been reached.\n @exception  IOException if the first byte cannot be read for any reason\n other than end of file, the stream has been closed and the underlying\n input stream does not support reading after close, or another I/O\n error occurs.\n @see        java.io.FilterInputStream#in\n @see        java.io.InputStream#read(byte[], int, int)\n"
11163,method,java/io/DataInputStream/read/byte[];int;int," Reads up to <code>len</code> bytes of data from the contained \n input stream into an array of bytes.  An attempt is made to read \n as many as <code>len</code> bytes, but a smaller number may be read, \n possibly zero. The number of bytes actually read is returned as an \n integer.\n\n <p> This method blocks until input data is available, end of file is\n detected, or an exception is thrown.\n\n <p> If <code>len</code> is zero, then no bytes are read and\n <code>0</code> is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at end of\n file, the value <code>-1</code> is returned; otherwise, at least one\n byte is read and stored into <code>b</code>.\n\n <p> The first byte read is stored into element <code>b[off]</code>, the\n next one into <code>b[off+1]</code>, and so on. The number of bytes read\n is, at most, equal to <code>len</code>. Let <i>k</i> be the number of\n bytes actually read; these bytes will be stored in elements\n <code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,\n leaving elements <code>b[off+</code><i>k</i><code>]</code> through\n <code>b[off+len-1]</code> unaffected.\n\n <p> In every case, elements <code>b[0]</code> through\n <code>b[off]</code> and elements <code>b[off+len]</code> through\n <code>b[b.length-1]</code> are unaffected.\n\n @param      b     the buffer into which the data is read.\n @param off the start offset in the destination array <code>b</code>\n @param      len   the maximum number of bytes read.\n @return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end\n             of the stream has been reached.\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>b.length - off</code>\n @exception  IOException if the first byte cannot be read for any reason\n other than end of file, the stream has been closed and the underlying\n input stream does not support reading after close, or another I/O\n error occurs.\n @see        java.io.FilterInputStream#in\n @see        java.io.InputStream#read(byte[], int, int)\n"
11164,method,java/io/DataInputStream/readFully/byte[]," See the general contract of the <code>readFully</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @param      b   the buffer into which the data is read.\n @exception  EOFException  if this input stream reaches the end before\n             reading all the bytes.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11166,method,java/io/DataInputStream/skipBytes/int," See the general contract of the <code>skipBytes</code>\n method of <code>DataInput</code>.\n <p>\n Bytes for this operation are read from the contained\n input stream.\n\n @param      n   the number of bytes to be skipped.\n @return     the actual number of bytes skipped.\n @exception  IOException  if the contained input stream does not support\n		   seek, or the stream has been closed and\n		   the contained input stream does not support \n		   reading after close, or another I/O error occurs.\n"
11167,method,java/io/DataInputStream/readBoolean/," See the general contract of the <code>readBoolean</code>\n method of <code>DataInput</code>.\n <p>\n Bytes for this operation are read from the contained\n input stream.\n\n @return     the <code>boolean</code> value read.\n @exception  EOFException  if this input stream has reached the end.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11169,method,java/io/DataInputStream/readUnsignedByte/," See the general contract of the <code>readUnsignedByte</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @return     the next byte of this input stream, interpreted as an\n             unsigned 8-bit number.\n @exception  EOFException  if this input stream has reached the end.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see         java.io.FilterInputStream#in\n"
11170,method,java/io/DataInputStream/readShort/," See the general contract of the <code>readShort</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @return     the next two bytes of this input stream, interpreted as a\n             signed 16-bit number.\n @exception  EOFException  if this input stream reaches the end before\n               reading two bytes.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11171,method,java/io/DataInputStream/readUnsignedShort/," See the general contract of the <code>readUnsignedShort</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @return     the next two bytes of this input stream, interpreted as an\n             unsigned 16-bit integer.\n @exception  EOFException  if this input stream reaches the end before\n             reading two bytes.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11173,method,java/io/DataInputStream/readInt/," See the general contract of the <code>readInt</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @return     the next four bytes of this input stream, interpreted as an\n             <code>int</code>.\n @exception  EOFException  if this input stream reaches the end before\n               reading four bytes.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11174,method,java/io/DataInputStream/readLong/," See the general contract of the <code>readLong</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @return     the next eight bytes of this input stream, interpreted as a\n             <code>long</code>.\n @exception  EOFException  if this input stream reaches the end before\n               reading eight bytes.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see        java.io.FilterInputStream#in\n"
11175,method,java/io/DataInputStream/readFloat/," See the general contract of the <code>readFloat</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @return     the next four bytes of this input stream, interpreted as a\n             <code>float</code>.\n @exception  EOFException  if this input stream reaches the end before\n               reading four bytes.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see        java.io.DataInputStream#readInt()\n @see        java.lang.Float#intBitsToFloat(int)\n"
11176,method,java/io/DataInputStream/readDouble/," See the general contract of the <code>readDouble</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @return     the next eight bytes of this input stream, interpreted as a\n             <code>double</code>.\n @exception  EOFException  if this input stream reaches the end before\n               reading eight bytes.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @see        java.io.DataInputStream#readLong()\n @see        java.lang.Double#longBitsToDouble(long)\n"
11177,method,java/io/DataInputStream/readLine/," See the general contract of the <code>readLine</code>\n method of <code>DataInput</code>.\n <p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n @deprecated This method does not properly convert bytes to characters.\n As of JDK&nbsp;1.1, the preferred way to read lines of text is via the\n <code>BufferedReader.readLine()</code> method.  Programs that use the\n <code>DataInputStream</code> class to read lines can be converted to use\n the <code>BufferedReader</code> class by replacing code of the form:\n <blockquote><pre>\n     DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);\n </pre></blockquote>\n with:\n <blockquote><pre>\n     BufferedReader d\n          =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));\n </pre></blockquote>\n\n @return     the next line of text from this input stream.\n @exception  IOException  if an I/O error occurs.\n @see        java.io.BufferedReader#readLine()\n @see        java.io.FilterInputStream#in\n"
11179,method,java/io/DataInputStream/readUTF/DataInput," Reads from the\n stream <code>in</code> a representation\n of a Unicode  character string encoded in\n <a href="DataInput.html#modified-utf-8">modified UTF-8</a> format;\n this string of characters is then returned as a <code>String</code>.\n The details of the modified UTF-8 representation\n are  exactly the same as for the <code>readUTF</code>\n method of <code>DataInput</code>.\n\n @param      in   a data input stream.\n @return     a Unicode string.\n @exception  EOFException            if the input stream reaches the end\n               before all the bytes.\n @exception  IOException   the stream has been closed and the contained\n 		   input stream does not support reading after close, or\n 		   another I/O error occurs.\n @exception  UTFDataFormatException  if the bytes do not represent a\n               valid modified UTF-8 encoding of a Unicode string.\n @see        java.io.DataInputStream#readUnsignedShort()\n"
11181,interface,java/io/DataInput," The <code>DataInput</code> interface provides\n for reading bytes from a binary stream and\n reconstructing from them data in any of\n the Java primitive types. There is also\n a\n facility for reconstructing a <code>String</code>\n from data in\n <a href="#modified-utf-8">modified UTF-8</a>\n format.\n <p>\n It is generally true of all the reading\n routines in this interface that if end of\n file is reached before the desired number\n of bytes has been read, an <code>EOFException</code>\n (which is a kind of <code>IOException</code>)\n is thrown. If any byte cannot be read for\n any reason other than end of file, an <code>IOException</code>\n other than <code>EOFException</code> is\n thrown. In particular, an <code>IOException</code>\n may be thrown if the input stream has been\n closed.\n\n <h4><a name="modified-utf-8">Modified UTF-8</a></h4>\n <p>\n Implementations of the DataInput and DataOutput interfaces represent\n Unicode strings in a format that is a slight modification of UTF-8.\n (For information regarding the standard UTF-8 format, see section\n <i>3.9 Unicode Encoding Forms</i> of <i>The Unicode Standard, Version\n 4.0</i>).\n Note that in the following tables, the most significant bit appears in the\n far left-hand column.\n <p>\n All characters in the range <code>'&#92;u0001'</code> to\n <code>'&#92;u007F'</code> are represented by a single byte:\n\n <blockquote>\n   <table border="1" cellspacing="0" cellpadding="8" width="50%"\n          summary="Bit values and bytes">\n     <tr>\n       <td></td>\n       <th id="bit">Bit Values</th>\n     </tr>\n     <tr>\n       <th id="byte1">Byte 1</th>\n       <td>\n         <table border="1" cellspacing="0" width="100%">\n           <tr>\n             <td width="12%"><center>0</center>\n             <td colspan="7"><center>bits 6-0</center>\n           </tr>\n         </table>\n       </td>\n     </tr>\n   </table>\n </blockquote>\n\n <p>\n The null character <code>'&#92;u0000'</code> and characters in the\n range <code>'&#92;u0080'</code> to <code>'&#92;u07FF'</code> are\n represented by a pair of bytes:\n\n <blockquote>\n   <table border="1" cellspacing="0" cellpadding="8" width="50%"\n          summary="Bit values and bytes">\n     <tr>\n       <td></td>\n       <th id="bit">Bit Values</th>\n     </tr>\n     <tr>\n       <th id="byte1">Byte 1</th>\n       <td>\n         <table border="1" cellspacing="0" width="100%">\n           <tr>\n             <td width="12%"><center>1</center>\n             <td width="13%"><center>1</center>\n             <td width="12%"><center>0</center>\n             <td colspan="5"><center>bits 10-6</center>\n           </tr>\n         </table>\n       </td>\n     </tr>\n     <tr>\n       <th id="byte2">Byte 2</th>\n       <td>\n         <table border="1" cellspacing="0" width="100%">\n           <tr>\n             <td width="12%"><center>1</center>\n             <td width="13%"><center>0</center>\n             <td colspan="6"><center>bits 5-0</center>\n           </tr>\n         </table>\n       </td>\n     </tr>\n   </table>\n  </blockquote>\n\n <br>\n <code>char</code> values in the range <code>'&#92;u0800'</code> to\n <code>'&#92;uFFFF'</code> are represented by three bytes:\n\n <blockquote>\n   <table border="1" cellspacing="0" cellpadding="8" width="50%"\n          summary="Bit values and bytes">\n     <tr>\n       <td></td>\n       <th id="bit">Bit Values</th>\n     </tr>\n     <tr>\n       <th id="byte1">Byte 1</th>\n       <td>\n         <table border="1" cellspacing="0" width="100%">\n           <tr>\n             <td width="12%"><center>1</center>\n             <td width="13%"><center>1</center>\n             <td width="12%"><center>1</center>\n             <td width="13%"><center>0</center>\n             <td colspan="4"><center>bits 15-12</center>\n           </tr>\n         </table>\n       </td>\n     </tr>\n     <tr>\n       <th id="byte2">Byte 2</th>\n       <td>\n         <table border="1" cellspacing="0" width="100%">\n           <tr>\n             <td width="12%"><center>1</center>\n             <td width="13%"><center>0</center>\n             <td colspan="6"><center>bits 11-6</center>\n           </tr>\n         </table>\n       </td>\n     </tr>\n     <tr>\n       <th id="byte3">Byte 3</th>\n       <td>\n         <table border="1" cellspacing="0" width="100%">\n           <tr>\n             <td width="12%"><center>1</center>\n             <td width="13%"><center>0</center>\n             <td colspan="6"><center>bits 5-0</center>\n           </tr>\n         </table>\n       </td>\n     </tr>\n   </table>\n  </blockquote>\n\n <p>\n The differences between this format and the\n standard UTF-8 format are the following:\n <ul>\n <li>The null byte <code>'&#92;u0000'</code> is encoded in 2-byte format\n     rather than 1-byte, so that the encoded strings never have\n     embedded nulls.\n <li>Only the 1-byte, 2-byte, and 3-byte formats are used.\n <li><a href="../lang/Character.html#unicode">Supplementary characters</a>\n     are represented in the form of surrogate pairs.\n </ul>\n @author  Frank Yellin\n @version 1.26, 03/23/10\n @see     java.io.DataInputStream\n @see     java.io.DataOutput\n @since   JDK1.0\n"
11182,method,java/io/DataInput/readFully/byte[]," Reads some bytes from an input\n stream and stores them into the buffer\n array <code>b</code>. The number of bytes\n read is equal\n to the length of <code>b</code>.\n <p>\n This method blocks until one of the\n following conditions occurs:<p>\n <ul>\n <li><code>b.length</code>\n bytes of input data are available, in which\n case a normal return is made.\n\n <li>End of\n file is detected, in which case an <code>EOFException</code>\n is thrown.\n\n <li>An I/O error occurs, in\n which case an <code>IOException</code> other\n than <code>EOFException</code> is thrown.\n </ul>\n <p>\n If <code>b</code> is <code>null</code>,\n a <code>NullPointerException</code> is thrown.\n If <code>b.length</code> is zero, then\n no bytes are read. Otherwise, the first\n byte read is stored into element <code>b[0]</code>,\n the next one into <code>b[1]</code>, and\n so on.\n If an exception is thrown from\n this method, then it may be that some but\n not all bytes of <code>b</code> have been\n updated with data from the input stream.\n\n @param     b   the buffer into which the data is read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11183,method,java/io/DataInput/readFully/byte[];int;int,"\n Reads <code>len</code>\n bytes from\n an input stream.\n <p>\n This method\n blocks until one of the following conditions\n occurs:<p>\n <ul>\n <li><code>len</code> bytes\n of input data are available, in which case\n a normal return is made.\n\n <li>End of file\n is detected, in which case an <code>EOFException</code>\n is thrown.\n\n <li>An I/O error occurs, in\n which case an <code>IOException</code> other\n than <code>EOFException</code> is thrown.\n </ul>\n <p>\n If <code>b</code> is <code>null</code>,\n a <code>NullPointerException</code> is thrown.\n If <code>off</code> is negative, or <code>len</code>\n is negative, or <code>off+len</code> is\n greater than the length of the array <code>b</code>,\n then an <code>IndexOutOfBoundsException</code>\n is thrown.\n If <code>len</code> is zero,\n then no bytes are read. Otherwise, the first\n byte read is stored into element <code>b[off]</code>,\n the next one into <code>b[off+1]</code>,\n and so on. The number of bytes read is,\n at most, equal to <code>len</code>.\n\n @param     b   the buffer into which the data is read.\n @param off  an int specifying the offset into the data.\n @param len  an int specifying the number of bytes to read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11185,method,java/io/DataInput/readBoolean/," Reads one input byte and returns\n <code>true</code> if that byte is nonzero,\n <code>false</code> if that byte is zero.\n This method is suitable for reading\n the byte written by the <code>writeBoolean</code>\n method of interface <code>DataOutput</code>.\n\n @return     the <code>boolean</code> value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11186,method,java/io/DataInput/readByte/," Reads and returns one input byte.\n The byte is treated as a signed value in\n the range <code>-128</code> through <code>127</code>,\n inclusive.\n This method is suitable for\n reading the byte written by the <code>writeByte</code>\n method of interface <code>DataOutput</code>.\n\n @return     the 8-bit value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11187,method,java/io/DataInput/readUnsignedByte/," Reads one input byte, zero-extends\n it to type <code>int</code>, and returns\n the result, which is therefore in the range\n <code>0</code>\n through <code>255</code>.\n This method is suitable for reading\n the byte written by the <code>writeByte</code>\n method of interface <code>DataOutput</code>\n if the argument to <code>writeByte</code>\n was intended to be a value in the range\n <code>0</code> through <code>255</code>.\n\n @return     the unsigned 8-bit value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11188,method,java/io/DataInput/readShort/," Reads two input bytes and returns\n a <code>short</code> value. Let <code>a</code>\n be the first byte read and <code>b</code>\n be the second byte. The value\n returned\n is:\n <p><pre><code>(short)((a &lt;&lt; 8) | (b &amp; 0xff))\n </code></pre>\n This method\n is suitable for reading the bytes written\n by the <code>writeShort</code> method of\n interface <code>DataOutput</code>.\n\n @return     the 16-bit value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11189,method,java/io/DataInput/readUnsignedShort/," Reads two input bytes and returns\n an <code>int</code> value in the range <code>0</code>\n through <code>65535</code>. Let <code>a</code>\n be the first byte read and\n <code>b</code>\n be the second byte. The value returned is:\n <p><pre><code>(((a &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n </code></pre>\n This method is suitable for reading the bytes\n written by the <code>writeShort</code> method\n of interface <code>DataOutput</code>  if\n the argument to <code>writeShort</code>\n was intended to be a value in the range\n <code>0</code> through <code>65535</code>.\n\n @return     the unsigned 16-bit value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11190,method,java/io/DataInput/readChar/," Reads two input bytes and returns a <code>char</code> value.\n Let <code>a</code>\n be the first byte read and <code>b</code>\n be the second byte. The value\n returned is:\n <p><pre><code>(char)((a &lt;&lt; 8) | (b &amp; 0xff))\n </code></pre>\n This method\n is suitable for reading bytes written by\n the <code>writeChar</code> method of interface\n <code>DataOutput</code>.\n\n @return     the <code>char</code> value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11191,method,java/io/DataInput/readInt/," Reads four input bytes and returns an\n <code>int</code> value. Let <code>a-d</code>\n be the first through fourth bytes read. The value returned is:\n <p><pre>\n <code>\n (((a &amp; 0xff) &lt;&lt; 24) | ((b &amp; 0xff) &lt;&lt; 16) |\n &#32;((c &amp; 0xff) &lt;&lt; 8) | (d &amp; 0xff))\n </code></pre>\n This method is suitable\n for reading bytes written by the <code>writeInt</code>\n method of interface <code>DataOutput</code>.\n\n @return     the <code>int</code> value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11192,method,java/io/DataInput/readLong/," Reads eight input bytes and returns\n a <code>long</code> value. Let <code>a-h</code>\n be the first through eighth bytes read.\n The value returned is:\n <p><pre> <code>\n (((long)(a &amp; 0xff) &lt;&lt; 56) |\n  ((long)(b &amp; 0xff) &lt;&lt; 48) |\n  ((long)(c &amp; 0xff) &lt;&lt; 40) |\n  ((long)(d &amp; 0xff) &lt;&lt; 32) |\n  ((long)(e &amp; 0xff) &lt;&lt; 24) |\n  ((long)(f &amp; 0xff) &lt;&lt; 16) |\n  ((long)(g &amp; 0xff) &lt;&lt;  8) |\n  ((long)(h &amp; 0xff)))\n </code></pre>\n <p>\n This method is suitable\n for reading bytes written by the <code>writeLong</code>\n method of interface <code>DataOutput</code>.\n\n @return     the <code>long</code> value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11193,method,java/io/DataInput/readFloat/," Reads four input bytes and returns\n a <code>float</code> value. It does this\n by first constructing an <code>int</code>\n value in exactly the manner\n of the <code>readInt</code>\n method, then converting this <code>int</code>\n value to a <code>float</code> in\n exactly the manner of the method <code>Float.intBitsToFloat</code>.\n This method is suitable for reading\n bytes written by the <code>writeFloat</code>\n method of interface <code>DataOutput</code>.\n\n @return     the <code>float</code> value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11194,method,java/io/DataInput/readDouble/," Reads eight input bytes and returns\n a <code>double</code> value. It does this\n by first constructing a <code>long</code>\n value in exactly the manner\n of the <code>readlong</code>\n method, then converting this <code>long</code>\n value to a <code>double</code> in exactly\n the manner of the method <code>Double.longBitsToDouble</code>.\n This method is suitable for reading\n bytes written by the <code>writeDouble</code>\n method of interface <code>DataOutput</code>.\n\n @return     the <code>double</code> value read.\n @exception  EOFException  if this stream reaches the end before reading\n               all the bytes.\n @exception  IOException   if an I/O error occurs.\n"
11195,method,java/io/DataInput/readLine/," Reads the next line of text from the input stream.\n It reads successive bytes, converting\n each byte separately into a character,\n until it encounters a line terminator or\n end of\n file; the characters read are then\n returned as a <code>String</code>. Note\n that because this\n method processes bytes,\n it does not support input of the full Unicode\n character set.\n <p>\n If end of file is encountered\n before even one byte can be read, then <code>null</code>\n is returned. Otherwise, each byte that is\n read is converted to type <code>char</code>\n by zero-extension. If the character <code>'\n'</code>\n is encountered, it is discarded and reading\n ceases. If the character <code>'\r'</code>\n is encountered, it is discarded and, if\n the following byte converts &#32;to the\n character <code>'\n'</code>, then that is\n discarded also; reading then ceases. If\n end of file is encountered before either\n of the characters <code>'\n'</code> and\n <code>'\r'</code> is encountered, reading\n ceases. Once reading has ceased, a <code>String</code>\n is returned that contains all the characters\n read and not discarded, taken in order.\n Note that every character in this string\n will have a value less than <code>&#92;u0100</code>,\n that is, <code>(char)256</code>.\n\n @return the next line of text from the input stream,\n         or <CODE>null</CODE> if the end of file is\n         encountered before a byte can be read. \n @exception  IOException  if an I/O error occurs.\n"
11196,method,java/io/DataInput/readUTF/," Reads in a string that has been encoded using a\n <a href="#modified-utf-8">modified UTF-8</a>\n format.\n The general contract of <code>readUTF</code>\n is that it reads a representation of a Unicode\n character string encoded in modified\n UTF-8 format; this string of characters\n is then returned as a <code>String</code>.\n <p>\n First, two bytes are read and used to\n construct an unsigned 16-bit integer in\n exactly the manner of the <code>readUnsignedShort</code>\n method . This integer value is called the\n <i>UTF length</i> and specifies the number\n of additional bytes to be read. These bytes\n are then converted to characters by considering\n them in groups. The length of each group\n is computed from the value of the first\n byte of the group. The byte following a\n group, if any, is the first byte of the\n next group.\n <p>\n If the first byte of a group\n matches the bit pattern <code>0xxxxxxx</code>\n (where <code>x</code> means "may be <code>0</code>\n or <code>1</code>"), then the group consists\n of just that byte. The byte is zero-extended\n to form a character.\n <p>\n If the first byte\n of a group matches the bit pattern <code>110xxxxx</code>,\n then the group consists of that byte <code>a</code>\n and a second byte <code>b</code>. If there\n is no byte <code>b</code> (because byte\n <code>a</code> was the last of the bytes\n to be read), or if byte <code>b</code> does\n not match the bit pattern <code>10xxxxxx</code>,\n then a <code>UTFDataFormatException</code>\n is thrown. Otherwise, the group is converted\n to the character:<p>\n <pre><code>(char)(((a&amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F))\n </code></pre>\n If the first byte of a group\n matches the bit pattern <code>1110xxxx</code>,\n then the group consists of that byte <code>a</code>\n and two more bytes <code>b</code> and <code>c</code>.\n If there is no byte <code>c</code> (because\n byte <code>a</code> was one of the last\n two of the bytes to be read), or either\n byte <code>b</code> or byte <code>c</code>\n does not match the bit pattern <code>10xxxxxx</code>,\n then a <code>UTFDataFormatException</code>\n is thrown. Otherwise, the group is converted\n to the character:<p>\n <pre><code>\n (char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F))\n </code></pre>\n If the first byte of a group matches the\n pattern <code>1111xxxx</code> or the pattern\n <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code>\n is thrown.\n <p>\n If end of file is encountered\n at any time during this entire process,\n then an <code>EOFException</code> is thrown.\n <p>\n After every group has been converted to\n a character by this process, the characters\n are gathered, in the same order in which\n their corresponding groups were read from\n the input stream, to form a <code>String</code>,\n which is returned.\n <p>\n The <code>writeUTF</code>\n method of interface <code>DataOutput</code>\n may be used to write data that is suitable\n for reading by this method.\n @return     a Unicode string.\n @exception  EOFException            if this stream reaches the end\n               before reading all the bytes.\n @exception  IOException             if an I/O error occurs.\n @exception  UTFDataFormatException  if the bytes do not represent a\n               valid modified UTF-8 encoding of a string.\n"
11199,method,java/io/Console/reader/," Retrieves the unique {@link java.io.Reader Reader} object associated\n with this console.\n <p>\n This method is intended to be used by sophisticated applications, for\n example, a {@link java.util.Scanner} object which utilizes the rich\n parsing/scanning functionality provided by the <tt>Scanner</tt>:\n <blockquote><pre>\n Console con = System.console();\n if (con != null) {\n     Scanner sc = new Scanner(con.reader());\n     ...\n }\n </pre></blockquote>\n <p>\n For simple applications requiring only line-oriented reading, use\n <tt>{@link #readLine}</tt>.\n <p>\n The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },\n {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and\n {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}\n on the returned object will not read in characters beyond the line\n bound for each invocation, even if the destination buffer has space for\n more characters. A line bound is considered to be any one of a line feed\n (<tt>'\n'</tt>), a carriage return (<tt>'\r'</tt>), a carriage return\n followed immediately by a linefeed, or an end of stream.\n\n @return  The reader associated with this console\n"
11201,method,java/io/Console/printf/String;Object[]," A convenience method to write a formatted string to this console's\n output stream using the specified format string and arguments.\n\n <p> An invocation of this method of the form <tt>con.printf(format,\n args)</tt> behaves in exactly the same way as the invocation of\n <pre>con.format(format, args)</pre>.\n\n @param  format\n         A format string as described in <a\n         href="../util/Formatter.html#syntax">Format string syntax</a>.\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.  The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href="../util/Formatter.html#syntax">conversion</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section of the\n          formatter class specification.\n\n @return  This console\n"
11202,method,java/io/Console/readLine/String;Object[]," Provides a formatted prompt, then reads a single line of text from the\n console.\n\n @param  fmt\n         A format string as described in <a\n         href="../util/Formatter.html#syntax">Format string syntax</a>.\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section\n          of the formatter class specification.\n\n @throws IOError\n         If an I/O error occurs.\n\n @return  A string containing the line read from the console, not\n          including any line-termination characters, or <tt>null</tt>\n          if an end of stream has been reached.\n"
11203,method,java/io/Console/readLine/," Reads a single line of text from the console.\n\n @throws IOError\n         If an I/O error occurs.\n\n @return  A string containing the line read from the console, not\n          including any line-termination characters, or <tt>null</tt>\n          if an end of stream has been reached.\n"
11204,method,java/io/Console/readPassword/String;Object[]," Provides a formatted prompt, then reads a password or passphrase from\n the console with echoing disabled.\n\n @param  fmt\n         A format string as described in <a\n         href="../util/Formatter.html#syntax">Format string syntax</a>\n         for the prompt text.\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a>\n          section of the formatter class specification.\n\n @throws IOError\n         If an I/O error occurs.\n\n @return  A character array containing the password or passphrase read\n          from the console, not including any line-termination characters,\n          or <tt>null</tt> if an end of stream has been reached.\n"
11205,method,java/io/Console/readPassword/," Reads a password or passphrase from the console with echoing disabled\n\n @throws IOError\n         If an I/O error occurs.\n\n @return  A character array containing the password or passphrase read\n          from the console, not including any line-termination characters,\n          or <tt>null</tt> if an end of stream has been reached.\n"
11207,interface,java/io/Closeable," A <tt>Closeable</tt> is a source or destination of data that can be closed. \n The close method is invoked to release resources that the object is \n holding (such as open files).\n\n @version 1.6 10/03/23\n @since 1.5\n"
11208,method,java/io/Closeable/close/," Closes this stream and releases any system resources associated\n with it. If the stream is already closed then invoking this \n method has no effect. \n\n @throws IOException if an I/O error occurs\n"
11212,class,java/io/CharArrayWriter," This class implements a character buffer that can be used as an Writer.\n The buffer automatically grows when data is written to the stream.  The data\n can be retrieved using toCharArray() and toString().\n <P>\n Note: Invoking close() on this class has no effect, and methods\n of this class can be called after the stream has closed\n without generating an IOException.\n\n @author	Herb Jellinek\n @version 	1.26, 03/23/10\n @since       JDK1.1\n"
11216,method,java/io/CharArrayWriter/writeTo/Writer," Writes the contents of the buffer to another character stream.\n\n @param out	the output stream to write to\n @throws IOException If an I/O error occurs.\n"
11217,method,java/io/CharArrayWriter/append/CharSequence," Appends the specified character sequence to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(csq)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.write(csq.toString()) </pre>\n\n <p> Depending on the specification of <tt>toString</tt> for the\n character sequence <tt>csq</tt>, the entire sequence may not be\n appended. For instance, invoking the <tt>toString</tt> method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n\n @param  csq\n         The character sequence to append.  If <tt>csq</tt> is\n         <tt>null</tt>, then the four characters <tt>"null"</tt> are\n         appended to this writer.\n\n @return  This writer\n\n @since  1.5\n"
11218,method,java/io/CharArrayWriter/append/CharSequence;int;int," Appends a subsequence of the specified character sequence to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(csq, start,\n end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in\n exactly the same way as the invocation\n\n <pre>\n     out.write(csq.subSequence(start, end).toString()) </pre>\n\n @param  csq\n         The character sequence from which a subsequence will be\n         appended.  If <tt>csq</tt> is <tt>null</tt>, then characters\n         will be appended as if <tt>csq</tt> contained the four\n         characters <tt>"null"</tt>.\n\n @param  start\n         The index of the first character in the subsequence\n\n @param  end\n         The index of the character following the last character in the\n         subsequence\n\n @return  This writer\n\n @throws  IndexOutOfBoundsException\n          If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>\n          is greater than <tt>end</tt>, or <tt>end</tt> is greater than\n          <tt>csq.length()</tt>\n\n @since  1.5\n"
11219,method,java/io/CharArrayWriter/append/char," Appends the specified character to this writer.\n\n <p> An invocation of this method of the form <tt>out.append(c)</tt>\n behaves in exactly the same way as the invocation\n\n <pre>\n     out.write(c) </pre>\n\n @param  c\n         The 16-bit character to append\n\n @return  This writer\n\n @since 1.5\n"
11225,method,java/io/CharArrayWriter/close/," Close the stream.  This method does not release the buffer, since its\n contents might still be required. Note: Invoking this method in this class\n will have no effect.\n"
11231,method,java/io/CharArrayReader/read/," Reads a single character.\n \n @exception   IOException  If an I/O error occurs\n"
11232,method,java/io/CharArrayReader/read/char[];int;int," Reads characters into a portion of an array.\n @param b	 Destination buffer\n @param off  Offset at which to start storing characters\n @param len   Maximum number of characters to read\n @return  The actual number of characters read, or -1 if\n 		the end of the stream has been reached\n \n @exception   IOException  If an I/O error occurs\n"
11233,method,java/io/CharArrayReader/skip/long," Skips characters.  Returns the number of characters that were skipped.\n\n <p>The <code>n</code> parameter may be negative, even though the\n <code>skip</code> method of the {@link Reader} superclass throws\n an exception in this case. If <code>n</code> is negative, then\n this method does nothing and returns <code>0</code>.\n\n @param n The number of characters to skip\n @return       The number of characters actually skipped\n @exception  IOException If the stream is closed, or an I/O error occurs\n"
11234,method,java/io/CharArrayReader/ready/," Tells whether this stream is ready to be read.  Character-array readers\n are always ready to be read.\n\n @exception  IOException  If an I/O error occurs\n"
11236,method,java/io/CharArrayReader/mark/int," Marks the present position in the stream.  Subsequent calls to reset()\n will reposition the stream to this point.\n\n @param  readAheadLimit  Limit on the number of characters that may be\n                         read while still preserving the mark.  Because\n                         the stream's input comes from a character array,\n                         there is no actual limit; hence this argument is\n                         ignored.\n\n @exception  IOException  If an I/O error occurs\n"
11237,method,java/io/CharArrayReader/reset/," Resets the stream to the most recent mark, or to the beginning if it has\n never been marked.\n\n @exception  IOException  If an I/O error occurs\n"
11238,method,java/io/CharArrayReader/close/," Closes the stream and releases any system resources associated with\n it.  Once the stream has been closed, further read(), ready(),\n mark(), reset(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n"
11248,method,java/io/ByteArrayOutputStream/writeTo/OutputStream," Writes the complete contents of this byte array output stream to \n the specified output stream argument, as if by calling the output \n stream's write method using <code>out.write(buf, 0, count)</code>.\n\n @param      out   the output stream to which to write the data.\n @exception  IOException  if an I/O error occurs.\n"
11255,method,java/io/ByteArrayOutputStream/close/," Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an <tt>IOException</tt>.\n <p>\n\n"
11256,method,java/io/ByteArrayOutputStream/ByteArrayOutputStream/," Creates a new byte array output stream. The buffer capacity is \n initially 32 bytes, though its size increases if necessary. \n"
11260,class,java/io/ByteArrayInputStream," A <code>ByteArrayInputStream</code> contains\n an internal buffer that contains bytes that\n may be read from the stream. An internal\n counter keeps track of the next byte to\n be supplied by the <code>read</code> method.\n <p>\n Closing a <tt>ByteArrayInputStream</tt> has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an <tt>IOException</tt>.\n\n @author  Arthur van Hoff\n @version 1.48, 03/23/10\n @see     java.io.StringBufferInputStream\n @since   JDK1.0\n"
11266,method,java/io/ByteArrayInputStream/mark/int," Set the current marked position in the stream.\n ByteArrayInputStream objects are marked at position zero by\n default when constructed.  They may be marked at another\n position within the buffer by this method.\n <p>\n If no mark has been set, then the value of the mark is the\n offset passed to the constructor (or 0 if the offset was not\n supplied).\n\n <p> Note: The <code>readAheadLimit</code> for this class\n  has no meaning.\n\n @since   JDK1.1\n"
11271,field,java/io/ByteArrayInputStream/buf," An array of bytes that was provided\n by the creator of the stream. Elements <code>buf[0]</code>\n through <code>buf[count-1]</code> are the\n only bytes that can ever be read from the\n stream;  element <code>buf[pos]</code> is\n the next byte to be read.\n"
11273,field,java/io/ByteArrayInputStream/mark," The currently marked position in the stream.\n ByteArrayInputStream objects are marked at position zero by\n default when constructed.  They may be marked at another\n position within the buffer by the <code>mark()</code> method.\n The current buffer position is set to this point by the\n <code>reset()</code> method.\n <p>\n If no mark has been set, then the value of mark is the offset\n passed to the constructor (or 0 if the offset was not supplied).\n\n @since   JDK1.1\n"
11276,method,java/io/BufferedWriter/write/int," Writes a single character.\n\n @exception  IOException  If an I/O error occurs\n"
11277,method,java/io/BufferedWriter/write/char[];int;int," Writes a portion of an array of characters.\n\n <p> Ordinarily this method stores characters from the given array into\n this stream's buffer, flushing the buffer to the underlying stream as\n needed.  If the requested length is at least as large as the buffer,\n however, then this method will flush the buffer and write the characters\n directly to the underlying stream.  Thus redundant\n <code>BufferedWriter</code>s will not copy data unnecessarily.\n\n @param  cbuf  A character array\n @param  off   Offset from which to start reading characters\n @param  len   Number of characters to write\n\n @exception  IOException  If an I/O error occurs\n"
11279,method,java/io/BufferedWriter/newLine/," Writes a line separator.  The line separator string is defined by the\n system property <tt>line.separator</tt>, and is not necessarily a single\n newline ('\n') character.\n\n @exception  IOException  If an I/O error occurs\n"
11280,method,java/io/BufferedWriter/flush/," Flushes the stream.\n\n @exception  IOException  If an I/O error occurs\n"
11284,class,java/io/BufferedReader," Reads text from a character-input stream, buffering characters so as to\n provide for the efficient reading of characters, arrays, and lines.\n\n <p> The buffer size may be specified, or the default size may be used.  The\n default is large enough for most purposes.\n\n <p> In general, each read request made of a Reader causes a corresponding\n read request to be made of the underlying character or byte stream.  It is\n therefore advisable to wrap a BufferedReader around any Reader whose read()\n operations may be costly, such as FileReaders and InputStreamReaders.  For\n example,\n\n <pre>\n BufferedReader in\n   = new BufferedReader(new FileReader("foo.in"));\n </pre>\n\n will buffer the input from the specified file.  Without buffering, each\n invocation of read() or readLine() could cause bytes to be read from the\n file, converted into characters, and then returned, which can be very\n inefficient. \n\n <p> Programs that use DataInputStreams for textual input can be localized by\n replacing each DataInputStream with an appropriate BufferedReader.\n\n @see FileReader\n @see InputStreamReader\n\n @version 	1.38, 10/03/23\n @author	Mark Reinhold\n @since	JDK1.1\n"
11285,method,java/io/BufferedReader/read/," Reads a single character.\n\n @return The character read, as an integer in the range\n         0 to 65535 (<tt>0x00-0xffff</tt>), or -1 if the\n         end of the stream has been reached\n @exception  IOException  If an I/O error occurs\n"
11287,method,java/io/BufferedReader/readLine/," Reads a line of text.  A line is considered to be terminated by any one\n of a line feed ('\n'), a carriage return ('\r'), or a carriage return\n followed immediately by a linefeed.\n\n @return     A String containing the contents of the line, not including\n             any line-termination characters, or null if the end of the\n             stream has been reached\n\n @exception  IOException  If an I/O error occurs\n"
11288,method,java/io/BufferedReader/skip/long," Skips characters.\n\n @param  n  The number of characters to skip\n\n @return    The number of characters actually skipped\n\n @exception  IllegalArgumentException  If <code>n</code> is negative.\n @exception  IOException  If an I/O error occurs\n"
11289,method,java/io/BufferedReader/ready/," Tells whether this stream is ready to be read.  A buffered character\n stream is ready if the buffer is not empty, or if the underlying\n character stream is ready.\n\n @exception  IOException  If an I/O error occurs\n"
11291,method,java/io/BufferedReader/mark/int," Marks the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point.\n\n @param readAheadLimit   Limit on the number of characters that may be\n                         read while still preserving the mark. An attempt\n                         to reset the stream after reading characters\n                         up to this limit or beyond may fail.\n                         A limit value larger than the size of the input\n                         buffer will cause a new buffer to be allocated\n                         whose size is no smaller than limit.\n                         Therefore large values should be used with care.\n\n @exception  IllegalArgumentException  If readAheadLimit is < 0\n @exception  IOException  If an I/O error occurs\n"
11292,method,java/io/BufferedReader/reset/," Resets the stream to the most recent mark.\n\n @exception  IOException  If the stream has never been marked,\n                          or if the mark has been invalidated\n"
11296,class,java/io/BufferedOutputStream," The class implements a buffered output stream. By setting up such \n an output stream, an application can write bytes to the underlying \n output stream without necessarily causing a call to the underlying \n system for each byte written.\n\n @author  Arthur van Hoff\n @version 1.35, 03/23/10\n @since   JDK1.0\n"
11297,method,java/io/BufferedOutputStream/write/int," Writes the specified byte to this buffered output stream. \n\n @param      b   the byte to be written.\n @exception  IOException  if an I/O error occurs.\n"
11298,method,java/io/BufferedOutputStream/write/byte[];int;int," Writes <code>len</code> bytes from the specified byte array \n starting at offset <code>off</code> to this buffered output stream.\n\n <p> Ordinarily this method stores bytes from the given array into this\n stream's buffer, flushing the buffer to the underlying output stream as\n needed.  If the requested length is at least as large as this stream's\n buffer, however, then this method will flush the buffer and write the\n bytes directly to the underlying output stream.  Thus redundant\n <code>BufferedOutputStream</code>s will not copy data unnecessarily.\n\n @param      b     the data.\n @param      off   the start offset in the data.\n @param      len   the number of bytes to write.\n @exception  IOException  if an I/O error occurs.\n"
11299,method,java/io/BufferedOutputStream/flush/," Flushes this buffered output stream. This forces any buffered \n output bytes to be written out to the underlying output stream. \n\n @exception  IOException  if an I/O error occurs.\n @see        java.io.FilterOutputStream#out\n"
11304,class,java/io/BufferedInputStream," A <code>BufferedInputStream</code> adds\n functionality to another input stream-namely,\n the ability to buffer the input and to\n support the <code>mark</code> and <code>reset</code>\n methods. When  the <code>BufferedInputStream</code>\n is created, an internal buffer array is\n created. As bytes  from the stream are read\n or skipped, the internal buffer is refilled\n as necessary  from the contained input stream,\n many bytes at a time. The <code>mark</code>\n operation  remembers a point in the input\n stream and the <code>reset</code> operation\n causes all the  bytes read since the most\n recent <code>mark</code> operation to be\n reread before new bytes are  taken from\n the contained input stream.\n\n @author  Arthur van Hoff\n @version 1.58, 03/23/10\n @since   JDK1.0\n"
11305,method,java/io/BufferedInputStream/read/," See\n the general contract of the <code>read</code>\n method of <code>InputStream</code>.\n\n @return     the next byte of data, or <code>-1</code> if the end of the\n             stream is reached.\n @exception  IOException  if this input stream has been closed by\n				invoking its {@link #close()} method,\n				or an I/O error occurs. \n @see        java.io.FilterInputStream#in\n"
11307,method,java/io/BufferedInputStream/skip/long," See the general contract of the <code>skip</code>\n method of <code>InputStream</code>.\n\n @exception  IOException  if the stream does not support seek,\n				or if this input stream has been closed by\n				invoking its {@link #close()} method, or an\n				I/O error occurs.\n"
11308,method,java/io/BufferedInputStream/available/," Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n <p>\n This method returns the sum of the number of bytes remaining to be read in\n the buffer (<code>count&nbsp;- pos</code>) and the result of calling the\n {@link java.io.FilterInputStream#in in}.available().\n\n @return     an estimate of the number of bytes that can be read (or skipped\n             over) from this input stream without blocking.\n @exception  IOException  if this input stream has been closed by\n                          invoking its {@link #close()} method,\n                          or an I/O error occurs.\n"
11309,method,java/io/BufferedInputStream/mark/int,"\n See the general contract of the <code>mark</code>\n method of <code>InputStream</code>.\n\n @param   readlimit   the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n @see     java.io.BufferedInputStream#reset()\n"
11310,method,java/io/BufferedInputStream/reset/," See the general contract of the <code>reset</code>\n method of <code>InputStream</code>.\n <p>\n If <code>markpos</code> is <code>-1</code>\n (no mark has been set or the mark has been\n invalidated), an <code>IOException</code>\n is thrown. Otherwise, <code>pos</code> is\n set equal to <code>markpos</code>.\n\n @exception  IOException  if this stream has not been marked or,\n			if the mark has been invalidated, or the stream \n			has been closed by invoking its {@link #close()}\n			method, or an I/O error occurs.\n @see        java.io.BufferedInputStream#mark(int)\n"
11312,method,java/io/BufferedInputStream/close/," Closes this input stream and releases any system resources \n associated with the stream. \n Once the stream has been closed, further read(), available(), reset(),\n or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n\n @exception  IOException  if an I/O error occurs.\n"
11315,field,java/io/BufferedInputStream/buf," The internal buffer array where the data is stored. When necessary,\n it may be replaced by another array of\n a different size.\n"
11319,field,java/io/BufferedInputStream/marklimit," The maximum read ahead allowed after a call to the \n <code>mark</code> method before subsequent calls to the \n <code>reset</code> method fail. \n Whenever the difference between <code>pos</code>\n and <code>markpos</code> exceeds <code>marklimit</code>,\n then the  mark may be dropped by setting\n <code>markpos</code> to <code>-1</code>.\n\n @see     java.io.BufferedInputStream#mark(int)\n @see     java.io.BufferedInputStream#reset()\n"
11320,class,java/rmi/UnmarshalException," An <code>UnmarshalException</code> can be thrown while unmarshalling the\n parameters or results of a remote method call if any of the following\n conditions occur:\n <ul>\n <li> if an exception occurs while unmarshalling the call header\n <li> if the protocol for the return value is invalid\n <li> if a <code>java.io.IOException</code> occurs unmarshalling\n parameters (on the server side) or the return value (on the client side).\n <li> if a <code>java.lang.ClassNotFoundException</code> occurs during\n unmarshalling parameters or return values\n <li> if no skeleton can be loaded on the server-side; note that skeletons\n are required in the 1.1 stub protocol, but not in the 1.2 stub protocol.\n <li> if the method hash is invalid (i.e., missing method).\n <li> if there is a failure to create a remote reference object for\n a remote object's stub when it is unmarshalled.\n </ul>\n \n @version 1.14, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11323,class,java/rmi/UnknownHostException," An <code>UnknownHostException</code> is thrown if a\n <code>java.net.UnknownHostException</code> occurs while creating\n a connection to the remote host for a remote method call.\n \n @version 1.15, 03/23/10\n @since   JDK1.1\n"
11326,class,java/rmi/UnexpectedException," An <code>UnexpectedException</code> is thrown if the client of a\n remote method call receives, as a result of the call, a checked\n exception that is not among the checked exception types declared in the\n <code>throws</code> clause of the method in the remote interface.\n \n @version 1.14, 03/23/10\n @author  Roger Riggs\n @since   JDK1.1\n"
11329,class,java/rmi/StubNotFoundException," A <code>StubNotFoundException</code> is thrown if a valid stub class\n could not be found for a remote object when it is exported.\n A <code>StubNotFoundException</code> may also be\n thrown when an activatable object is registered via the\n <code>java.rmi.activation.Activatable.register</code> method.\n \n @version 1.18, 03/23/10\n @author  Roger Riggs\n @since   JDK1.1\n @see	    java.rmi.server.UnicastRemoteObject\n @see     java.rmi.activation.Activatable\n"
11332,class,java/rmi/ServerRuntimeException," From a server executing on JDK&nbsp;1.1, a\n <code>ServerRuntimeException</code> is thrown as a result of a\n remote method invocation when a <code>RuntimeException</code> is\n thrown while processing the invocation on the server, either while\n unmarshalling the arguments, executing the remote method itself, or\n marshalling the return value.\n\n A <code>ServerRuntimeException</code> instance contains the original\n <code>RuntimeException</code> that occurred as its cause.\n\n <p>A <code>ServerRuntimeException</code> is not thrown from servers\n executing on the Java 2 platform v1.2 or later versions.\n \n @version 1.20, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n @deprecated no replacement\n"
11334,class,java/rmi/ServerException," A <code>ServerException</code> is thrown as a result of a remote method\n invocation when a <code>RemoteException</code> is thrown while processing\n the invocation on the server, either while unmarshalling the arguments or\n executing the remote method itself.\n \n A <code>ServerException</code> instance contains the original\n <code>RemoteException</code> that occurred as its cause.\n\n @version 1.17, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11337,class,java/rmi/ServerError," A <code>ServerError</code> is thrown as a result of a remote method\n invocation when an <code>Error</code> is thrown while processing\n the invocation on the server, either while unmarshalling the arguments,\n executing the remote method itself, or marshalling the return value.\n\n A <code>ServerError</code> instance contains the original\n <code>Error</code> that occurred as its cause.\n \n @version 1.15, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11338,method,java/rmi/ServerError/ServerError/String;Error," Constructs a <code>ServerError</code> with the specified\n detail message and nested error.\n\n @param s the detail message\n @param err the nested error\n @since JDK1.1\n"
11341,method,java/rmi/RemoteException/getCause/," Returns the cause of this exception.  This method returns the value\n of the {@link #detail} field.\n\n @return  the cause, which may be <tt>null</tt>.\n @since   1.4\n"
11346,interface,java/rmi/Remote,"\n The <code>Remote</code> interface serves to identify interfaces whose\n methods may be invoked from a non-local virtual machine.  Any object that\n is a remote object must directly or indirectly implement this interface.\n Only those methods specified in a "remote interface", an interface that\n extends <code>java.rmi.Remote</code> are available remotely.\n\n <p>Implementation classes can implement any number of remote interfaces and\n can extend other remote implementation classes.  RMI provides some\n convenience classes that remote object implementations can extend which\n facilitate remote object creation.  These classes are\n <code>java.rmi.server.UnicastRemoteObject</code> and\n <code>java.rmi.activation.Activatable</code>.\n\n <p>For complete details on RMI, see the <a\n href=../../../platform/rmi/spec/rmiTOC.html>RMI Specification</a> which describes the RMI API and system.\n\n @version 1.19, 03/23/10\n @since   JDK1.1\n @author  Ann Wollrath\n @see	    java.rmi.server.UnicastRemoteObject\n @see     java.rmi.activation.Activatable\n"
11355,class,java/rmi/NoSuchObjectException," A <code>NoSuchObjectException</code> is thrown if an attempt is made to\n invoke a method on an object that no longer exists in the remote virtual\n machine.  If a <code>NoSuchObjectException</code> occurs attempting to\n invoke a method on a remote object, the call may be retransmitted and still\n preserve RMI's "at most once" call semantics.\n\n A <code>NoSuchObjectException</code> is also thrown by the method\n <code>java.rmi.server.RemoteObject.toStub</code> and by the\n <code>unexportObject</code> methods of\n <code>java.rmi.server.UnicastRemoteObject</code> and\n <code>java.rmi.activation.Activatable</code> and\n \n @version 1.14, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n @see     java.rmi.server.RemoteObject#toStub(Remote)\n @see     java.rmi.server.UnicastRemoteObject#unexportObject(Remote,boolean)\n @see     java.rmi.activation.Activatable#unexportObject(Remote,boolean)\n"
11362,method,java/rmi/Naming/list/String," Returns an array of the names bound in the registry.  The names are\n URL-formatted (without the scheme component) strings. The array contains\n a snapshot of the names present in the registry at the time of the\n call.\n\n @param 	name a registry name in URL format (without the scheme\n		component)\n @return 	an array of names (in the appropriate format) bound\n 		in the registry\n @exception MalformedURLException if the name is not an appropriately\n  formatted URL\n @exception RemoteException if registry could not be contacted.\n @since JDK1.1\n"
11363,class,java/rmi/MarshalledObject," A <code>MarshalledObject</code> contains a byte stream with the serialized\n representation of an object given to its constructor.  The <code>get</code>\n method returns a new copy of the original object, as deserialized from\n the contained byte stream.  The contained object is serialized and\n deserialized with the same serialization semantics used for marshaling\n and unmarshaling parameters and return values of RMI calls:  When the\n serialized form is created:\n\n <ul>\n <li> classes are annotated with a codebase URL from where the class\n      can be loaded (if available), and\n <li> any remote object in the <code>MarshalledObject</code> is\n      represented by a serialized instance of its stub.\n </ul>\n\n <p>When copy of the object is retrieved (via the <code>get</code> method),\n if the class is not available locally, it will be loaded from the\n appropriate location (specified the URL annotated with the class descriptor\n when the class was serialized.\n\n <p><code>MarshalledObject</code> facilitates passing objects in RMI calls\n that are not automatically deserialized immediately by the remote peer.\n\n @param <T> the type of the object contained in this\n <code>MarshalledObject</code>\n\n @version 1.36, 03/23/10\n @author  Ann Wollrath\n @author  Peter Jones\n @since   1.2\n"
11364,method,java/rmi/MarshalledObject/get/," Returns a new copy of the contained marshalledobject.  The internal\n representation is deserialized with the semantics used for\n unmarshaling paramters for RMI calls.\n\n @return a copy of the contained object\n @exception IOException if an <code>IOException</code> occurs while\n deserializing the object from its internal representation.\n @exception ClassNotFoundException if a\n <code>ClassNotFoundException</code> occurs while deserializing the\n object from its internal representation.\n could not be found\n @since 1.2\n"
11366,method,java/rmi/MarshalledObject/equals/Object," Compares this <code>MarshalledObject</code> to another object.\n Returns true if and only if the argument refers to a\n <code>MarshalledObject</code> that contains exactly the same\n serialized representation of an object as this one does. The\n comparison ignores any class codebase annotation, meaning that\n two objects are equivalent if they have the same serialized\n representation <i>except</i> for the codebase of each class\n in the serialized representation.\n\n @param obj the object to compare with this <code>MarshalledObject</code>\n @return <code>true</code> if the argument contains an equaivalent\n serialized object; <code>false</code> otherwise\n @since 1.2\n"
11368,class,java/rmi/MarshalException," A <code>MarshalException</code> is thrown if a\n <code>java.io.IOException</code> occurs while marshalling the remote call\n header, arguments or return value for a remote method call.  A\n <code>MarshalException</code> is also thrown if the receiver does not\n support the protocol version of the sender.\n\n <p>If a <code>MarshalException</code> occurs during a remote method call,\n the call may or may not have reached the server.  If the call did reach the\n server, parameters may have been deserialized.  A call may not be\n retransmitted after a <code>MarshalException</code> and reliably preserve\n "at most once" call semantics.\n \n @version 1.14, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11371,class,java/rmi/ConnectIOException," A <code>ConnectIOException</code> is thrown if an\n <code>IOException</code> occurs while making a connection\n to the remote host for a remote method call.\n \n @version 1.14, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11374,class,java/rmi/ConnectException," A <code>ConnectException</code> is thrown if a connection is refused\n to the remote host for a remote method call.\n \n @version 1.15, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11380,class,java/rmi/AccessException," An <code>AccessException</code> is thrown by certain methods of the\n <code>java.rmi.Naming</code> class (specifically <code>bind</code>,\n <code>rebind</code>, and <code>unbind</code>) and methods of the\n <code>java.rmi.activation.ActivationSystem</code> interface to\n indicate that the caller does not have permission to perform the action\n requested by the method call.  If the method was invoked from a non-local\n host, then an <code>AccessException</code> is thrown.\n \n @version 1.14, 03/23/10\n @author  Ann Wollrath\n @author  Roger Riggs\n @since   JDK1.1\n @see     java.rmi.Naming\n @see     java.rmi.activation.ActivationSystem\n"
11383,class,java/rmi/activation/UnknownObjectException," An <code>UnknownObjectException</code> is thrown by methods of classes and\n interfaces in the <code>java.rmi.activation</code> package when the\n <code>ActivationID</code> parameter to the method is determined to be\n invalid.  An <code>ActivationID</code> is invalid if it is not currently\n known by the <code>ActivationSystem</code>.  An <code>ActivationID</code>\n is obtained by the <code>ActivationSystem.registerObject</code> method.\n An <code>ActivationID</code> is also obtained during the\n <code>Activatable.register</code> call.\n \n @version 1.13, 03/23/10\n @author  Ann Wollrath\n @since   1.2\n @see     java.rmi.activation.Activatable\n @see     java.rmi.activation.ActivationGroup\n @see     java.rmi.activation.ActivationID\n @see     java.rmi.activation.ActivationMonitor\n @see     java.rmi.activation.ActivationSystem\n @see     java.rmi.activation.Activator\n"
11387,interface,java/rmi/activation/Activator," The <code>Activator</code> facilitates remote object activation. A\n "faulting" remote reference calls the activator's\n <code>activate</code> method to obtain a "live" reference to a\n "activatable" remote object. Upon receiving a request for activation,\n the activator looks up the activation descriptor for the activation\n identifier, <code>id</code>, determines the group in which the\n object should be activated initiates object re-creation via the\n group's <code>ActivationInstantiator</code> (via a call to the\n <code>newInstance</code> method). The activator initiates the\n execution of activation groups as necessary. For example, if an\n activation group for a specific group identifier is not already\n executing, the activator initiates the execution of a VM for the\n group. <p>\n\n The <code>Activator</code> works closely with\n <code>ActivationSystem</code>, which provides a means for registering\n groups and objects within those groups, and <code>ActivationMonitor</code>,\n which recives information about active and inactive objects and inactive\n groups. <p>\n\n The activator is responsible for monitoring and detecting when\n activation groups fail so that it can remove stale remote references\n to groups and active object's within those groups.<p>\n\n @author 	Ann Wollrath\n @version	1.21, 03/23/10\n @see 	ActivationInstantiator\n @see		ActivationGroupDesc\n @see		ActivationGroupID\n @since 	1.2\n"
11388,method,java/rmi/activation/Activator/activate/ActivationID;boolean," Activate the object associated with the activation identifier,\n <code>id</code>. If the activator knows the object to be active\n already, and <code>force</code> is false , the stub with a\n "live" reference is returned immediately to the caller;\n otherwise, if the activator does not know that corresponding\n the remote object is active, the activator uses the activation\n descriptor information (previously registered) to determine the\n group (VM) in which the object should be activated. If an\n <code>ActivationInstantiator</code> corresponding to the\n object's group descriptor already exists, the activator invokes\n the activation group's <code>newInstance</code> method passing\n it the object's id and descriptor. <p>\n\n If the activation group for the object's group descriptor does\n not yet exist, the activator starts an\n <code>ActivationInstantiator</code> executing (by spawning a\n child process, for example). When the activator receives the\n activation group's call back (via the\n <code>ActivationSystem</code>'s <code>activeGroup</code>\n method) specifying the activation group's reference, the\n activator can then invoke that activation instantiator's\n <code>newInstance</code> method to forward each pending\n activation request to the activation group and return the\n result (a marshalled remote object reference, a stub) to the\n caller.<p>\n\n Note that the activator receives a "marshalled" object instead of a\n Remote object so that the activator does not need to load the\n code for that object, or participate in distributed garbage\n collection for that object. If the activator kept a strong\n reference to the remote object, the activator would then\n prevent the object from being garbage collected under the\n normal distributed garbage collection mechanism. <p>\n\n @param id the activation identifier for the object being activated\n @param force if true, the activator contacts the group to obtain\n the remote object's reference; if false, returning the cached value\n is allowed.\n @return the remote object (a stub) in a marshalled form\n @exception ActivationException if object activation fails\n @exception UnknownObjectException if object is unknown (not registered)\n @exception RemoteException if remote call fails\n @since 1.2\n"
11390,method,java/rmi/activation/ActivationSystem/registerObject/ActivationDesc," The <code>registerObject</code> method is used to register an\n activation descriptor, <code>desc</code>, and obtain an\n activation identifier for a activatable remote object. The\n <code>ActivationSystem</code> creates an\n <code>ActivationID</code> (a activation identifier) for the\n object specified by the descriptor, <code>desc</code>, and\n records, in stable storage, the activation descriptor and its\n associated identifier for later use. When the <code>Activator</code>\n receives an <code>activate</code> request for a specific identifier, it\n looks up the activation descriptor (registered previously) for\n the specified identifier and uses that information to activate\n the object. <p>\n\n @param desc the object's activation descriptor\n @return the activation id that can be used to activate the object\n @exception ActivationException if registration fails (e.g., database\n update failure, etc).\n @exception UnknownGroupException if group referred to in\n <code>desc</code> is not registered with this system\n @exception RemoteException if remote call fails\n @since 1.2\n"
11391,method,java/rmi/activation/ActivationSystem/unregisterObject/ActivationID," Remove the activation id and associated descriptor previously\n registered with the <code>ActivationSystem</code>; the object\n can no longer be activated via the object's activation id.\n\n @param id the object's activation id (from previous registration)\n @exception ActivationException if unregister fails (e.g., database\n update failure, etc).\n @exception UnknownObjectException if object is unknown (not registered)\n @exception RemoteException if remote call fails\n @since 1.2\n"
11393,method,java/rmi/activation/ActivationSystem/activeGroup/ActivationGroupID;ActivationInstantiator;long," Callback to inform activation system that group is now\n active. This call is made internally by the\n <code>ActivationGroup.createGroup</code> method to inform\n the <code>ActivationSystem</code> that the group is now\n active.\n\n @param id the activation group's identifier\n @param group the group's instantiator\n @param incarnation the group's incarnation number\n @return monitor for activation group\n @exception UnknownGroupException if group is not registered\n @exception ActivationException if a group for the specified\n <code>id</code> is already active and that group is not equal\n to the specified <code>group</code> or that group has a different\n <code>incarnation</code> than the specified <code>group</code>\n @exception RemoteException if remote call fails\n @since 1.2\n"
11394,method,java/rmi/activation/ActivationSystem/unregisterGroup/ActivationGroupID," Remove the activation group. An activation group makes this call back\n to inform the activator that the group should be removed (destroyed).\n If this call completes successfully, objects can no longer be\n registered or activated within the group. All information of the\n group and its associated objects is removed from the system.\n\n @param id the activation group's identifier\n @exception ActivationException if unregister fails (e.g., database\n update failure, etc).\n @exception UnknownGroupException if group is not registered\n @exception RemoteException if remote call fails\n @since 1.2\n"
11396,method,java/rmi/activation/ActivationSystem/setActivationDesc/ActivationID;ActivationDesc," Set the activation descriptor, <code>desc</code> for the object with\n the activation identifier, <code>id</code>. The change will take\n effect upon subsequent activation of the object.\n\n @param id the activation identifier for the activatable object\n @param desc the activation descriptor for the activatable object\n @exception UnknownGroupException the group associated with\n <code>desc</code> is not a registered group\n @exception UnknownObjectException the activation <code>id</code>\n is not registered\n @exception ActivationException for general failure (e.g., unable\n to update log)\n @exception RemoteException if remote call fails\n @return the previous value of the activation descriptor\n @see #getActivationDesc\n @since 1.2\n"
11397,method,java/rmi/activation/ActivationSystem/setActivationGroupDesc/ActivationGroupID;ActivationGroupDesc," Set the activation group descriptor, <code>desc</code> for the object\n with the activation group identifier, <code>id</code>. The change will\n take effect upon subsequent activation of the group.\n \n @param id the activation group identifier for the activation group\n @param desc the activation group descriptor for the activation group\n @exception UnknownGroupException the group associated with\n <code>id</code> is not a registered group\n @exception ActivationException for general failure (e.g., unable\n to update log)\n @exception RemoteException if remote call fails\n @return the previous value of the activation group descriptor\n @see #getActivationGroupDesc\n @since 1.2\n"
11398,method,java/rmi/activation/ActivationSystem/getActivationDesc/ActivationID," Returns the activation descriptor, for the object with the activation\n identifier, <code>id</code>.\n \n @param id the activation identifier for the activatable object\n @exception UnknownObjectException if <code>id</code> is not registered\n @exception ActivationException for general failure\n @exception RemoteException if remote call fails\n @return the activation descriptor\n @see #setActivationDesc\n @since 1.2\n"
11399,method,java/rmi/activation/ActivationSystem/getActivationGroupDesc/ActivationGroupID," Returns the activation group descriptor, for the group\n with the activation group identifier, <code>id</code>. \n \n @param id the activation group identifier for the group\n @exception UnknownGroupException if <code>id</code> is not registered\n @exception ActivationException for general failure\n @exception RemoteException if remote call fails\n @return the activation group descriptor\n @see #setActivationGroupDesc\n @since 1.2\n"
11401,interface,java/rmi/activation/ActivationMonitor," An <code>ActivationMonitor</code> is specific to an\n <code>ActivationGroup</code> and is obtained when a group is\n reported active via a call to\n <code>ActivationSystem.activeGroup</code> (this is done\n internally). An activation group is responsible for informing its\n <code>ActivationMonitor</code> when either: its objects become active or\n inactive, or the group as a whole becomes inactive.\n\n @author 	Ann Wollrath\n @version	1.18, 03/23/10\n @see		Activator\n @see		ActivationSystem\n @see 	ActivationGroup\n @since	1.2\n"
11402,method,java/rmi/activation/ActivationMonitor/inactiveObject/ActivationID," An activation group calls its monitor's\n <code>inactiveObject</code> method when an object in its group\n becomes inactive (deactivates).  An activation group discovers\n that an object (that it participated in activating) in its VM\n is no longer active, via calls to the activation group's\n <code>inactiveObject</code> method. <p>\n\n The <code>inactiveObject</code> call informs the\n <code>ActivationMonitor</code> that the remote object reference\n it holds for the object with the activation identifier,\n <code>id</code>, is no longer valid. The monitor considers the\n reference associated with <code>id</code> as a stale reference.\n Since the reference is considered stale, a subsequent\n <code>activate</code> call for the same activation identifier\n results in re-activating the remote object.<p>\n\n @param id the object's activation identifier\n @exception UnknownObjectException if object is unknown\n @exception RemoteException if remote call fails\n @since 1.2\n"
11403,method,java/rmi/activation/ActivationMonitor/activeObject/ActivationID;MarshalledObject," Informs that an object is now active. An <code>ActivationGroup</code>\n informs its monitor if an object in its group becomes active by\n other means than being activated directly (i.e., the object\n is registered and "activated" itself).\n\n @param id the active object's id\n @param obj the marshalled form of the object's stub\n @exception UnknownObjectException if object is unknown\n @exception RemoteException if remote call fails\n @since 1.2\n"
11404,method,java/rmi/activation/ActivationMonitor/inactiveGroup/ActivationGroupID;long," Informs that the group is now inactive. The group will be\n recreated upon a subsequent request to activate an object\n within the group. A group becomes inactive when all objects\n in the group report that they are inactive.\n\n @param id the group's id\n @param incarnation the group's incarnation number\n @exception UnknownGroupException if group is unknown\n @exception RemoteException if remote call fails\n @since 1.2\n"
11405,interface,java/rmi/activation/ActivationInstantiator," An <code>ActivationInstantiator</code> is responsible for creating\n instances of "activatable" objects. A concrete subclass of\n <code>ActivationGroup</code> implements the <code>newInstance</code>\n method to handle creating objects within the group.\n\n @author 	Ann Wollrath\n @version	1.18, 03/23/10\n @see 	ActivationGroup\n @since	1.2\n"
11406,method,java/rmi/activation/ActivationInstantiator/newInstance/ActivationID;ActivationDesc," The activator calls an instantiator's <code>newInstance</code>\n method in order to recreate in that group an object with the\n activation identifier, <code>id</code>, and descriptor,\n <code>desc</code>. The instantiator is responsible for: <ul>\n\n <li> determining the class for the object using the descriptor's\n <code>getClassName</code> method,\n\n <li> loading the class from the code location obtained from the\n descriptor (using the <code>getLocation</code> method),\n\n <li> creating an instance of the class by invoking the special\n "activation" constructor of the object's class that takes two\n arguments: the object's <code>ActivationID</code>, and the\n <code>MarshalledObject</code> containing object specific\n initialization data, and\n\n <li> returning a MarshalledObject containing the stub for the\n remote object it created </ul>\n\n @param id the object's activation identifier\n @param desc the object's descriptor\n @return a marshalled object containing the serialized\n representation of remote object's stub\n @exception ActivationException if object activation fails\n @exception RemoteException if remote call fails\n @since 1.2\n"
11408,method,java/rmi/activation/ActivationID/activate/boolean," Activate the object for this id.\n\n @param force if true, forces the activator to contact the group\n when activating the object (instead of returning a cached reference);\n if false, returning a cached value is acceptable.\n @return the reference to the active remote object\n @exception ActivationException if activation fails\n @exception UnknownObjectException if the object is unknown\n @exception RemoteException if remote call fails\n @since 1.2\n"
11410,method,java/rmi/activation/ActivationID/equals/Object," Compares two activation ids for content equality.\n Returns true if both of the following conditions are true:\n 1) the unique identifiers equivalent (by content), and\n 2) the activator specified in each identifier\n    refers to the same remote object.\n\n @param	obj	the Object to compare with\n @return	true if these Objects are equal; false otherwise.\n @see		java.util.Hashtable\n @since 1.2\n"
11412,class,java/rmi/activation/ActivationGroupID," The identifier for a registered activation group serves several\n purposes: <ul>\n <li>identifies the group uniquely within the activation system, and\n <li>contains a reference to the group's activation system so that the\n group can contact its activation system when necessary.</ul><p>\n\n The <code>ActivationGroupID</code> is returned from the call to\n <code>ActivationSystem.registerGroup</code> and is used to identify\n the group within the activation system. This group id is passed\n as one of the arguments to the activation group's special constructor\n when an activation group is created/recreated.\n\n @author 	Ann Wollrath\n @version	1.17, 03/23/10\n @see 	ActivationGroup\n @see		ActivationGroupDesc\n @since	1.2\n"
11415,method,java/rmi/activation/ActivationGroupID/equals/Object," Compares two group identifiers for content equality.\n Returns true if both of the following conditions are true:\n 1) the unique identifiers are equivalent (by content), and\n 2) the activation system specified in each\n    refers to the same remote object.\n\n @param	obj	the Object to compare with\n @return	true if these Objects are equal; false otherwise.\n @see		java.util.Hashtable\n @since 1.2\n"
11421,method,java/rmi/activation/ActivationGroupDesc/getPropertyOverrides/," Returns the group's property-override list.\n @return the property-override list, or <code>null</code>\n @since 1.2\n"
11425,method,java/rmi/activation/ActivationGroupDesc/ActivationGroupDesc/Properties;CommandEnvironment," Constructs a group descriptor that uses the system defaults for group\n implementation and code location.  Properties specify Java\n environment overrides (which will override system properties in\n the group implementation's VM).  The command\n environment can control the exact command/options used in\n starting the child VM, or can be <code>null</code> to accept\n rmid's default.\n\n <p>This constructor will create an <code>ActivationGroupDesc</code>\n with a <code>null</code> group class name, which indicates the system's\n default <code>ActivationGroup</code> implementation.\n\n @param overrides the set of properties to set when the group is\n recreated.\n @param cmd the controlling options for executing the VM in\n another process (or <code>null</code>).\n @since 1.2\n"
11426,method,java/rmi/activation/ActivationGroupDesc/ActivationGroupDesc/String;String;MarshalledObject;Properties;CommandEnvironment," Specifies an alternate group implementation and execution\n environment to be used for the group.\n \n @param className the group's package qualified class name or\n <code>null</code>. A <code>null</code> group class name indicates\n the system's default <code>ActivationGroup</code> implementation.\n @param location the location from where to load the group's\n class\n @param data the group's initialization data contained in\n marshalled form (could contain properties, for example)\n @param overrides a properties map which will override those set\n by default in the subprocess environment (will be translated\n into <code>-D</code> options), or <code>null</code>.\n @param cmd the controlling options for executing the VM in\n another process (or <code>null</code>).\n @since 1.2\n"
11427,class,java/rmi/activation/ActivationGroupDesc/CommandEnvironment," Startup options for ActivationGroup implementations.\n\n This class allows overriding default system properties and\n specifying implementation-defined options for ActivationGroups.\n @since 1.2\n"
11438,method,java/rmi/activation/ActivationGroup/setSystem/ActivationSystem," Set the activation system for the VM.  The activation system can\n only be set it if no group is currently active. If the activation\n system is not set via this call, then the <code>getSystem</code>\n method attempts to obtain a reference to the\n <code>ActivationSystem</code> by looking up the name\n "java.rmi.activation.ActivationSystem" in the Activator's\n registry. By default, the port number used to look up the\n activation system is defined by\n <code>ActivationSystem.SYSTEM_PORT</code>. This port can be overridden\n by setting the property <code>java.rmi.activation.port</code>.\n\n <p>If there is a security manager, this method first\n calls the security manager's <code>checkSetFactory</code> method.\n This could result in a SecurityException.\n\n @param system remote reference to the <code>ActivationSystem</code>\n @exception ActivationException if activation system is already set\n @exception SecurityException if permission to set the activation system is denied.\n (Note: The default implementation of the security manager \n <code>checkSetFactory</code>\n method requires the RuntimePermission "setFactory")\n @see #getSystem\n @see SecurityManager#checkSetFactory\n @since 1.2\n"
11439,method,java/rmi/activation/ActivationGroup/getSystem/," Returns the activation system for the VM. The activation system\n may be set by the <code>setSystem</code> method. If the\n activation system is not set via the <code>setSystem</code>\n method, then the <code>getSystem</code> method attempts to\n obtain a reference to the <code>ActivationSystem</code> by\n looking up the name "java.rmi.activation.ActivationSystem" in\n the Activator's registry. By default, the port number used to\n look up the activation system is defined by\n <code>ActivationSystem.SYSTEM_PORT</code>. This port can be\n overridden by setting the property\n <code>java.rmi.activation.port</code>.\n\n @return the activation system for the VM/group\n @exception ActivationException if activation system cannot be\n  obtained or is not bound\n (means that it is not running)\n @see #setSystem\n @since 1.2\n"
11440,method,java/rmi/activation/ActivationGroup/activeObject/ActivationID;MarshalledObject," This protected method is necessary for subclasses to\n make the <code>activeObject</code> callback to the group's\n monitor. The call is simply forwarded to the group's\n <code>ActivationMonitor</code>.\n\n @param id the object's identifier\n @param mobj a marshalled object containing the remote object's stub\n @exception UnknownObjectException if object is not registered\n @exception RemoteException if call informing monitor fails\n @exception ActivationException if an activation error occurs\n @since 1.2\n"
11441,method,java/rmi/activation/ActivationGroup/inactiveGroup/," This protected method is necessary for subclasses to\n make the <code>inactiveGroup</code> callback to the group's\n monitor. The call is simply forwarded to the group's\n <code>ActivationMonitor</code>. Also, the current group\n for the VM is set to null.\n\n @exception UnknownGroupException if group is not registered\n @exception RemoteException if call informing monitor fails\n @since 1.2\n"
11443,class,java/rmi/activation/ActivationException," General exception used by the activation interfaces.\n\n <p>As of release 1.4, this exception has been retrofitted to conform to\n the general purpose exception-chaining mechanism.  The "detail exception"\n that may be provided at construction time and accessed via the public\n {@link #detail} field is now known as the <i>cause</i>, and may be\n accessed via the {@link Throwable#getCause()} method, as well as\n the aforementioned "legacy field."\n\n <p>Invoking the method {@link Throwable#initCause(Throwable)} on an\n instance of <code>ActivationException</code> always throws {@link\n IllegalStateException}.\n\n @author 	Ann Wollrath\n @version	1.26, 03/23/10\n @since 	1.2\n"
11445,method,java/rmi/activation/ActivationException/getCause/," Returns the cause of this exception.  This method returns the value\n of the {@link #detail} field.\n\n @return  the cause, which may be <tt>null</tt>.\n @since   1.4\n"
11450,class,java/rmi/activation/ActivationDesc," An activation descriptor contains the information necessary to\n activate an object: <ul>\n <li> the object's group identifier,\n <li> the object's fully-qualified class name,\n <li> the object's code location (the location of the class), a codebase URL\n path,\n <li> the object's restart "mode", and,\n <li> a "marshalled" object that can contain object specific\n initialization data. </ul>\n\n <p>A descriptor registered with the activation system can be used to\n recreate/activate the object specified by the descriptor. The\n <code>MarshalledObject</code> in the object's descriptor is passed\n as the second argument to the remote object's constructor for\n object to use during reinitialization/activation.\n\n @author 	Ann Wollrath\n @version	1.30, 03/23/10\n @since 	1.2\n @see         java.rmi.activation.Activatable\n"
11455,method,java/rmi/activation/ActivationDesc/getRestartMode/," Returns the "restart" mode of the object associated with\n this activation descriptor.\n\n @return true if the activatable object associated with this\n activation descriptor is restarted via the activation\n daemon when either the daemon comes up or the object's group\n is restarted after an unexpected crash; otherwise it returns false,\n meaning that the object is only activated on demand via a\n method call.  Note that if the restart mode is <code>true</code>, the\n activator does not force an initial immediate activation of\n a newly registered object;  initial activation is lazy.\n @since 1.2\n"
11459,method,java/rmi/activation/ActivationDesc/ActivationDesc/String;String;MarshalledObject;boolean," Constructs an object descriptor for an object whose class name\n is <code>className</code>, that can be loaded from the\n code <code>location</code> and whose initialization\n information is <code>data</code>. If this form of the constructor\n is used, the <code>groupID</code> defaults to the current id for\n <code>ActivationGroup</code> for this VM. All objects with the\n same <code>ActivationGroupID</code> are activated in the same VM.\n\n <p>This constructor will throw <code>ActivationException</code> if\n there is no current activation group for this VM.  To create an\n <code>ActivationGroup</code> use the\n <code>ActivationGroup.createGroup</code> method.\n\n @param className the object's fully package qualified class name\n @param location the object's code location (from where the class is\n loaded)\n @param data the object's initialization (activation) data contained\n in marshalled form.\n @param restart if true, the object is restarted (reactivated) when\n either the activator is restarted or the object's activation group\n is restarted after an unexpected crash; if false, the object is only\n activated on demand.  Specifying <code>restart</code> to be\n <code>true</code> does not force an initial immediate activation of\n a newly registered object;  initial activation is lazy.\n @exception ActivationException if the current group is nonexistent\n @since 1.2\n"
11462,class,java/rmi/activation/ActivateFailedException," This exception is thrown by the RMI runtime when activation\n fails during a remote call to an activatable object.\n\n @author 	Ann Wollrath\n @version	1.12, 03/23/10\n @since 	1.2\n"
11465,class,java/rmi/activation/Activatable," The <code>Activatable</code> class provides support for remote\n objects that require persistent access over time and that\n can be activated by the system.\n\n <p>For the constructors and static <code>exportObject</code> methods,\n the stub for a remote object being exported is obtained as described in\n {@link java.rmi.server.UnicastRemoteObject}.\n\n <p>An attempt to serialize explicitly an instance of this class will\n fail.\n\n @author	Ann Wollrath\n @version	1.39, 10/03/23\n @since	1.2\n @serial	exclude\n"
11466,method,java/rmi/activation/Activatable/getID/," Returns the object's activation identifier.  The method is\n protected so that only subclasses can obtain an object's\n identifier.\n @return the object's activation identifier\n @since 1.2\n"
11467,method,java/rmi/activation/Activatable/register/ActivationDesc,"\n Register an object descriptor for an activatable remote\n object so that is can be activated on demand.\n\n @param desc  the object's descriptor\n @return the stub for the activatable remote object\n @exception UnknownGroupException if group id in <code>desc</code>\n is not registered with the activation system\n @exception ActivationException if activation system is not running\n @exception RemoteException if remote call fails\n @since 1.2\n"
11468,method,java/rmi/activation/Activatable/inactive/ActivationID," Informs the system that the object with the corresponding activation\n <code>id</code> is currently inactive. If the object is currently\n active, the object is "unexported" from the RMI runtime (only if\n there are no pending or in-progress calls)\n so the that it can no longer receive incoming calls. This call\n informs this VM's ActivationGroup that the object is inactive,\n that, in turn, informs its ActivationMonitor. If this call\n completes successfully, a subsequent activate request to the activator\n will cause the object to reactivate. The operation may still\n succeed if the object is considered active but has already\n unexported itself.\n\n @param id the object's activation identifier\n @return true if the operation succeeds (the operation will\n succeed if the object in currently known to be active and is\n either already unexported or is currently exported and has no\n pending/executing calls); false is returned if the object has\n pending/executing calls in which case it cannot be deactivated\n @exception UnknownObjectException if object is not known (it may\n already be inactive)\n @exception ActivationException if group is not active\n @exception RemoteException if call informing monitor fails\n @since 1.2\n"
11469,method,java/rmi/activation/Activatable/unregister/ActivationID," Revokes previous registration for the activation descriptor\n associated with <code>id</code>. An object can no longer be\n activated via that <code>id</code>.\n\n @param id the object's activation identifier\n @exception UnknownObjectException if object (<code>id</code>) is unknown\n @exception ActivationException if activation system is not running\n @exception RemoteException if remote call to activation system fails\n @since 1.2\n"
11472,method,java/rmi/activation/Activatable/exportObject/Remote;ActivationID;int,"\n Export the activatable remote object to the RMI runtime to make\n the object available to receive incoming calls. The object is\n exported on an anonymous port, if <code>port</code> is zero. <p>\n\n During activation, this <code>exportObject</code> method should\n be invoked explicitly by an "activatable" object, that does not\n extend the <code>Activatable</code> class. There is no need for objects\n that do extend the <code>Activatable</code> class to invoke this\n method directly because the object is exported during construction.\n \n @return the stub for the activatable remote object\n @param obj the remote object implementation\n @param id the object's  activation identifier\n @param port the port on which the object is exported (an anonymous\n port is used if port=0)\n @exception RemoteException if object export fails\n @since 1.2\n"
11473,method,java/rmi/activation/Activatable/exportObject/Remote;ActivationID;int;RMIClientSocketFactory;RMIServerSocketFactory,"\n Export the activatable remote object to the RMI runtime to make\n the object available to receive incoming calls. The object is\n exported on an anonymous port, if <code>port</code> is zero. <p>\n\n During activation, this <code>exportObject</code> method should\n be invoked explicitly by an "activatable" object, that does not\n extend the <code>Activatable</code> class. There is no need for objects\n that do extend the <code>Activatable</code> class to invoke this\n method directly because the object is exported during construction.\n \n @return the stub for the activatable remote object\n @param obj the remote object implementation\n @param id the object's  activation identifier\n @param port the port on which the object is exported (an anonymous\n port is used if port=0)\n @param csf the client-side socket factory for making calls to the\n remote object\n @param ssf the server-side socket factory for receiving remote calls\n @exception RemoteException if object export fails\n @since 1.2\n"
11474,method,java/rmi/activation/Activatable/unexportObject/Remote;boolean," Remove the remote object, obj, from the RMI runtime. If\n successful, the object can no longer accept incoming RMI calls.\n If the force parameter is true, the object is forcibly unexported\n even if there are pending calls to the remote object or the\n remote object still has calls in progress.  If the force\n parameter is false, the object is only unexported if there are\n no pending or in progress calls to the object.\n\n @param obj the remote object to be unexported\n @param force if true, unexports the object even if there are\n pending or in-progress calls; if false, only unexports the object\n if there are no pending or in-progress calls\n @return true if operation is successful, false otherwise\n @exception NoSuchObjectException if the remote object is not\n currently exported\n @since 1.2\n"
11484,method,java/rmi/dgc/VMID/VMID/," Create a new VMID.  Each new VMID returned from this constructor\n is unique for all Java virtual machines under the following\n conditions: a) the conditions for uniqueness for objects of\n the class <code>java.rmi.server.UID</code> are satisfied, and b) an\n address can be obtained for this host that is unique and constant\n for the lifetime of this object.  <p>\n"
11488,method,java/rmi/dgc/Lease/Lease/VMID;long," Constructs a lease with a specific VMID and lease duration. The\n vmid may be null.\n @param id VMID associated with this lease\n @param duration lease duration\n"
11491,method,java/rmi/dgc/DGC/clean/ObjID[];long;VMID;boolean," The clean call removes the 'vmid' from the reference list of\n each remote object indicated in 'id's.  The sequence number is\n used to detect late clean calls.  If the argument 'strong' is\n true, then the clean call is a result of a failed dirty call,\n thus the sequence number for the client 'vmid' needs to be\n remembered.\n \n @param ids IDs of objects to mark as unreferenced by calling client\n @param sequenceNum sequence number\n @param vmid client VMID\n @param strong make 'strong' clean call\n @throws RemoteException if clean call fails\n"
11493,method,java/rmi/server/Unreferenced/unreferenced/," Called by the RMI runtime sometime after the runtime determines that\n the reference list, the list of clients referencing the remote object,\n becomes empty.\n @since JDK1.1\n"
11496,method,java/rmi/server/UnicastRemoteObject/exportObject/Remote,"\n Exports the remote object to make it available to receive incoming\n calls using an anonymous port.\n @param obj the remote object to be exported\n @return remote object stub\n @exception RemoteException if export fails\n @since JDK1.1\n"
11497,method,java/rmi/server/UnicastRemoteObject/exportObject/Remote;int,"\n Exports the remote object to make it available to receive incoming\n calls, using the particular supplied port.\n @param obj the remote object to be exported\n @param port the port to export the object on\n @return remote object stub\n @exception RemoteException if export fails\n @since 1.2\n"
11498,method,java/rmi/server/UnicastRemoteObject/exportObject/Remote;int;RMIClientSocketFactory;RMIServerSocketFactory," Exports the remote object to make it available to receive incoming\n calls, using a transport specified by the given socket factory.\n @param obj the remote object to be exported\n @param port the port to export the object on\n @param csf the client-side socket factory for making calls to the\n remote object\n @param ssf the server-side socket factory for receiving remote calls\n @return remote object stub\n @exception RemoteException if export fails\n @since 1.2\n"
11499,method,java/rmi/server/UnicastRemoteObject/unexportObject/Remote;boolean," Removes the remote object, obj, from the RMI runtime. If\n successful, the object can no longer accept incoming RMI calls.\n If the force parameter is true, the object is forcibly unexported\n even if there are pending calls to the remote object or the\n remote object still has calls in progress.  If the force\n parameter is false, the object is only unexported if there are\n no pending or in progress calls to the object.\n\n @param obj the remote object to be unexported\n @param force if true, unexports the object even if there are\n pending or in-progress calls; if false, only unexports the object\n if there are no pending or in-progress calls\n @return true if operation is successful, false otherwise\n @exception NoSuchObjectException if the remote object is not\n currently exported\n @since 1.2\n"
11501,method,java/rmi/server/UnicastRemoteObject/UnicastRemoteObject/int," Creates and exports a new UnicastRemoteObject object using the\n particular supplied port.\n @param port the port number on which the remote object receives calls\n (if <code>port</code> is zero, an anonymous port is chosen)\n @throws RemoteException if failed to export object\n @since 1.2\n"
11502,method,java/rmi/server/UnicastRemoteObject/UnicastRemoteObject/int;RMIClientSocketFactory;RMIServerSocketFactory," Creates and exports a new UnicastRemoteObject object using the\n particular supplied port and socket factories.\n @param port the port number on which the remote object receives calls\n (if <code>port</code> is zero, an anonymous port is chosen)\n @param csf the client-side socket factory for making calls to the\n remote object\n @param ssf the server-side socket factory for receiving remote calls\n @throws RemoteException if failed to export object\n @since 1.2\n"
11503,class,java/rmi/server/UID," A <code>UID</code> represents an identifier that is unique over time\n with respect to the host it is generated on, or one of 2<sup>16</sup>\n "well-known" identifiers.\n\n <p>The {@link #UID()} constructor can be used to generate an\n identifier that is unique over time with respect to the host it is\n generated on.  The {@link #UID(short)} constructor can be used to\n create one of 2<sup>16</sup> well-known identifiers.\n\n <p>A <code>UID</code> instance contains three primitive values:\n <ul>\n <li><code>unique</code>, an <code>int</code> that uniquely identifies\n the VM that this <code>UID</code> was generated in, with respect to its\n host and at the time represented by the <code>time</code> value (an\n example implementation of the <code>unique</code> value would be a\n process identifier),\n  or zero for a well-known <code>UID</code>\n <li><code>time</code>, a <code>long</code> equal to a time (as returned\n by {@link System#currentTimeMillis()}) at which the VM that this\n <code>UID</code> was generated in was alive,\n or zero for a well-known <code>UID</code>\n <li><code>count</code>, a <code>short</code> to distinguish\n <code>UID</code>s generated in the same VM with the same\n <code>time</code> value\n </ul>\n\n <p>An independently generated <code>UID</code> instance is unique\n over time with respect to the host it is generated on as long as\n the host requires more than one millisecond to reboot and its system\n clock is never set backward.  A globally unique identifier can be\n constructed by pairing a <code>UID</code> instance with a unique host\n identifier, such as an IP address.\n\n @author	Ann Wollrath\n @author	Peter Jones\n @version	1.25, 10/03/23\n @since	JDK1.1\n"
11505,method,java/rmi/server/UID/equals/Object," Compares the specified object with this <code>UID</code> for\n equality.\n\n This method returns <code>true</code> if and only if the\n specified object is a <code>UID</code> instance with the same\n <code>unique</code>, <code>time</code>, and <code>count</code>\n values as this one.\n\n @param	obj the object to compare this <code>UID</code> to\n\n @return	<code>true</code> if the given object is equivalent to\n this one, and <code>false</code> otherwise\n"
11507,method,java/rmi/server/UID/write/DataOutput," Marshals a binary representation of this <code>UID</code> to\n a <code>DataOutput</code> instance.\n\n <p>Specifically, this method first invokes the given stream's\n {@link DataOutput#writeInt(int)} method with this <code>UID</code>'s\n <code>unique</code> value, then it invokes the stream's\n {@link DataOutput#writeLong(long)} method with this <code>UID</code>'s\n <code>time</code> value, and then it invokes the stream's\n {@link DataOutput#writeShort(int)} method with this <code>UID</code>'s\n <code>count</code> value.\n\n @param	out the <code>DataOutput</code> instance to write\n this <code>UID</code> to\n\n @throws	IOException if an I/O error occurs while performing\n this operation\n"
11508,method,java/rmi/server/UID/read/DataInput," Constructs and returns a new <code>UID</code> instance by\n unmarshalling a binary representation from an\n <code>DataInput</code> instance.\n\n <p>Specifically, this method first invokes the given stream's\n {@link DataInput#readInt()} method to read a <code>unique</code> value,\n then it invoke's the stream's\n {@link DataInput#readLong()} method to read a <code>time</code> value,\n then it invoke's the stream's\n {@link DataInput#readShort()} method to read a <code>count</code> value,\n and then it creates and returns a new <code>UID</code> instance\n that contains the <code>unique</code>, <code>time</code>, and\n <code>count</code> values that were read from the stream.\n\n @param	in the <code>DataInput</code> instance to read\n <code>UID</code> from\n\n @return	unmarshalled <code>UID</code> instance\n\n @throws	IOException if an I/O error occurs while performing\n this operation\n"
11511,class,java/rmi/server/SocketSecurityException," An obsolete subclass of {@link ExportException}.\n\n @version 1.15, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11514,class,java/rmi/server/SkeletonNotFoundException," A <code>SkeletonNotFoundException</code> is thrown if the\n <code>Skeleton</code> corresponding to the remote object being\n exported is not found.  Skeletons are no longer required, so this\n exception is never thrown.\n \n @version 1.19, 03/23/10\n @since   JDK1.1\n @deprecated no replacement.  Skeletons are no longer required for remote\n method calls in the Java 2 platform v1.2 and greater.\n"
11520,method,java/rmi/server/Skeleton/dispatch/Remote;RemoteCall;int;long," Unmarshals arguments, calls the actual remote object implementation,\n and marshals the return value or any exception.\n\n @param obj remote implementation to dispatch call to\n @param theCall object representing remote call\n @param opnum operation number\n @param hash stub/skeleton interface hash\n @exception java.lang.Exception if a general exception occurs.\n @since JDK1.1\n @deprecated no replacement\n"
11523,method,java/rmi/server/ServerRef/exportObject/Remote;Object,"\n Creates a client stub object for the supplied Remote object.\n If the call completes successfully, the remote object should\n be able to accept incoming calls from clients.\n @param obj the remote object implementation\n @param data information necessary to export the object\n @return the stub for the remote object\n @exception RemoteException if an exception occurs attempting\n to export the object (e.g., stub class could not be found)\n @since JDK1.1\n"
11524,method,java/rmi/server/ServerRef/getClientHost/," Returns the hostname of the current client.  When called from a\n thread actively handling a remote method invocation the\n hostname of the client is returned.\n @return the client's host name\n @exception ServerNotActiveException if called outside of servicing\n a remote method invocation\n @since JDK1.1\n"
11526,class,java/rmi/server/ServerNotActiveException," An <code>ServerNotActiveException</code> is an <code>Exception</code>\n thrown during a call to <code>RemoteServer.getClientHost</code> if\n the getClientHost method is called outside of servicing a remote\n method call.\n\n @version 1.15, 03/23/10\n @author  Roger Riggs\n @since   JDK1.1\n @see java.rmi.server.RemoteServer#getClientHost()\n"
11529,class,java/rmi/server/ServerCloneException," A <code>ServerCloneException</code> is thrown if a remote exception occurs\n during the cloning of a <code>UnicastRemoteObject</code>.\n\n <p>As of release 1.4, this exception has been retrofitted to conform to\n the general purpose exception-chaining mechanism.  The "nested exception"\n that may be provided at construction time and accessed via the public\n {@link #detail} field is now known as the <i>cause</i>, and may be\n accessed via the {@link Throwable#getCause()} method, as well as\n the aforementioned "legacy field."\n\n <p>Invoking the method {@link Throwable#initCause(Throwable)} on an\n instance of <code>ServerCloneException</code> always throws {@link\n IllegalStateException}.\n\n @version 1.22, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n @see     java.rmi.server.UnicastRemoteObject#clone()\n"
11531,method,java/rmi/server/ServerCloneException/getCause/," Returns the cause of this exception.  This method returns the value\n of the {@link #detail} field.\n\n @return  the cause, which may be <tt>null</tt>.\n @since   1.4\n"
11535,class,java/rmi/server/RemoteStub," The <code>RemoteStub</code> class is the common superclass to client\n stubs and provides the framework to support a wide range of remote\n reference semantics.  Stub objects are surrogates that support\n exactly the same set of remote interfaces defined by the actual\n implementation of the remote object.\n\n @version 1.23, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11539,class,java/rmi/server/RemoteServer," The <code>RemoteServer</code> class is the common superclass to server\n implementations and provides the framework to support a wide range\n of remote reference semantics.  Specifically, the functions needed\n to create and export remote objects (i.e. to make them remotely\n available) are provided abstractly by <code>RemoteServer</code> and\n concretely by its subclass(es).\n\n @version 1.34, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n"
11540,method,java/rmi/server/RemoteServer/getClientHost/," Returns a string representation of the client host for the\n remote method invocation being processed in the current thread.\n\n @return 	a string representation of the client host\n\n @throws	ServerNotActiveException if no remote method invocation\n is being processed in the current thread\n\n @since	JDK1.1\n"
11541,method,java/rmi/server/RemoteServer/setLog/OutputStream," Log RMI calls to the output stream <code>out</code>. If\n <code>out</code> is <code>null</code>, call logging is turned off.\n\n <p>If there is a security manager, its\n <code>checkPermission</code> method will be invoked with a\n <code>java.util.logging.LoggingPermission("control")</code>\n permission; this could result in a <code>SecurityException</code>.\n\n @param	out the output stream to which RMI calls should be logged\n @throws	SecurityException  if there is a security manager and\n 		the invocation of its <code>checkPermission</code> method\n		fails\n @see #getLog\n @since JDK1.1\n"
11542,method,java/rmi/server/RemoteServer/getLog/," Returns stream for the RMI call log.\n @return the call log\n @see #setLog\n @since JDK1.1\n"
11545,interface,java/rmi/server/RemoteRef," <code>RemoteRef</code> represents the handle for a remote object. A\n <code>RemoteStub</code> uses a remote reference to carry out a\n remote method invocation to a remote object.\n\n @version 1.25, 03/23/10\n @author  Ann Wollrath\n @since   JDK1.1\n @see     java.rmi.server.RemoteStub\n"
11546,method,java/rmi/server/RemoteRef/invoke/Remote;Method;Object[];long," Invoke a method. This form of delegating method invocation\n to the reference allows the reference to take care of\n setting up the connection to the remote host, marshaling\n some representation for the method and parameters, then\n communicating the method invocation to the remote host.\n This method either returns the result of a method invocation\n on the remote object which resides on the remote host or\n throws a RemoteException if the call failed or an\n application-level exception if the remote invocation throws\n an exception.\n    \n @param obj the object that contains the RemoteRef (e.g., the\n            RemoteStub for the object.\n @param method the method to be invoked\n @param params the parameter list\n @param opnum  a hash that may be used to represent the method\n @return result of remote method invocation\n @exception Exception if any exception occurs during remote method\n invocation\n @since 1.2\n"
11547,method,java/rmi/server/RemoteRef/newCall/RemoteObject;Operation[];int;long," Creates an appropriate call object for a new remote method\n invocation on this object.  Passing operation array and index,\n allows the stubs generator to assign the operation indexes and\n interpret them. The remote reference may need the operation to\n encode in the call.\n\n @since JDK1.1\n @deprecated 1.2 style stubs no longer use this method. Instead of\n using a sequence of method calls on the stub's the remote reference\n (<code>newCall</code>, <code>invoke</code>, and <code>done</code>), a\n stub uses a single method, <code>invoke(Remote, Method, Object[],\n int)</code>, on the remote reference to carry out parameter\n marshalling, remote method executing and unmarshalling of the return\n value.\n\n @param obj remote stub through which to make call\n @param op array of stub operations\n @param opnum operation number\n @param hash stub/skeleton interface hash\n @return call object representing remote call\n @throws RemoteException if failed to initiate new remote call\n @see #invoke(Remote,java.lang.reflect.Method,Object[],long)\n"
11555,field,java/rmi/server/RemoteRef/packagePrefix," Initialize the server package prefix: assumes that the\n implementation of server ref classes (e.g., UnicastRef,\n UnicastServerRef) are located in the package defined by the\n prefix.\n"
11556,class,java/rmi/server/RemoteObjectInvocationHandler," An implementation of the <code>InvocationHandler</code> interface for\n use with Java Remote Method Invocation (Java RMI).  This invocation\n handler can be used in conjunction with a dynamic proxy instance as a\n replacement for a pregenerated stub class.\n\n <p>Applications are not expected to use this class directly.  A remote\n object exported to use a dynamic proxy with {@link UnicastRemoteObject}\n or {@link Activatable} has an instance of this class as that proxy's\n invocation handler.\n\n @version 1.6, 10/03/23\n @author  Ann Wollrath\n @since   1.5\n"
11557,method,java/rmi/server/RemoteObjectInvocationHandler/invoke/Object;Method;Object[]," Processes a method invocation made on the encapsulating\n proxy instance, <code>proxy</code>, and returns the result.\n\n <p><code>RemoteObjectInvocationHandler</code> implements this method\n as follows:\n\n <p>If <code>method</code> is one of the following methods, it\n is processed as described below:\n\n <ul>\n\n <li>{@link Object#hashCode Object.hashCode}: Returns the hash\n code value for the proxy.\n\n <li>{@link Object#equals Object.equals}: Returns <code>true</code>\n if the argument (<code>args[0]</code>) is an instance of a dynamic\n proxy class and this invocation handler is equal to the invocation\n handler of that argument, and returns <code>false</code> otherwise.\n\n <li>{@link Object#toString Object.toString}: Returns a string\n representation of the proxy.\n </ul>\n\n <p>Otherwise, a remote call is made as follows:\n\n <ul>\n <li>If <code>proxy</code> is not an instance of the interface\n {@link Remote}, then an {@link IllegalArgumentException} is thrown.\n\n <li>Otherwise, the {@link RemoteRef#invoke invoke} method is invoked\n on this invocation handler's <code>RemoteRef</code>, passing\n <code>proxy</code>, <code>method</code>, <code>args</code>, and the\n method hash (defined in section 8.3 of the "Java Remote Method\n Invocation (RMI) Specification") for <code>method</code>, and the\n result is returned.\n\n <li>If an exception is thrown by <code>RemoteRef.invoke</code> and\n that exception is a checked exception that is not assignable to any\n exception in the <code>throws</code> clause of the method\n implemented by the <code>proxy</code>'s class, then that exception\n is wrapped in an {@link UnexpectedException} and the wrapped\n exception is thrown.  Otherwise, the exception thrown by\n <code>invoke</code> is thrown by this method.\n </ul>\n\n <p>The semantics of this method are unspecified if the\n arguments could not have been produced by an instance of some\n valid dynamic proxy class containing this invocation handler.\n\n @param proxy the proxy instance that the method was invoked on\n @param method the <code>Method</code> instance corresponding to the\n interface method invoked on the proxy instance\n @param args an array of objects containing the values of the\n arguments passed in the method invocation on the proxy instance, or\n <code>null</code> if the method takes no arguments\n @return the value to return from the method invocation on the proxy\n instance \n @throws	Throwable the exception to throw from the method invocation \n on the proxy instance\n @see\n"
11561,method,java/rmi/server/RemoteObject/toStub/Remote," Returns the stub for the remote object <code>obj</code> passed\n as a parameter. This operation is only valid <i>after</i>\n the object has been exported.\n @param obj the remote object whose stub is needed\n @return the stub for the remote object, <code>obj</code>.\n @exception NoSuchObjectException if the stub for the\n remote object could not be found.\n @since 1.2\n"
11563,method,java/rmi/server/RemoteObject/equals/Object," Compares two remote objects for equality.\n Returns a boolean that indicates whether this remote object is\n equivalent to the specified Object. This method is used when a\n remote object is stored in a hashtable.\n If the specified Object is not itself an instance of RemoteObject,\n then this method delegates by returning the result of invoking the\n <code>equals</code> method of its parameter with this remote object\n as the argument.\n @param	obj	the Object to compare with\n @return	true if these Objects are equal; false otherwise.\n @see		java.util.Hashtable\n"
11568,interface,java/rmi/server/RemoteCall," <code>RemoteCall</code> is an abstraction used solely by the RMI runtime\n (in conjunction with stubs and skeletons of remote objects) to carry out a\n call to a remote object.  The <code>RemoteCall</code> interface is\n deprecated because it is only used by deprecated methods of\n <code>java.rmi.server.RemoteRef</code>.\n\n @version 1.22, 03/23/10\n @since   JDK1.1\n @author  Ann Wollrath\n @author  Roger Riggs\n @see     java.rmi.server.RemoteRef\n @deprecated no replacement.\n"
11569,method,java/rmi/server/RemoteCall/getOutputStream/," Return the output stream the stub/skeleton should put arguments/results\n into.\n\n @return output stream for arguments/results\n @exception java.io.IOException if an I/O error occurs.\n @since JDK1.1\n @deprecated no replacement\n"
11570,method,java/rmi/server/RemoteCall/releaseOutputStream/," Release the output stream; in some transports this would release\n the stream.\n\n @exception java.io.IOException if an I/O error occurs.\n @since JDK1.1\n @deprecated no replacement\n"
11571,method,java/rmi/server/RemoteCall/getInputStream/," Get the InputStream that the stub/skeleton should get\n results/arguments from.\n\n @return input stream for reading arguments/results\n @exception java.io.IOException if an I/O error occurs.\n @since JDK1.1\n @deprecated no replacement\n"
11572,method,java/rmi/server/RemoteCall/releaseInputStream/," Release the input stream. This would allow some transports to release\n the channel early.\n\n @exception java.io.IOException if an I/O error occurs.\n @since JDK1.1\n @deprecated no replacement\n"
11574,method,java/rmi/server/RemoteCall/executeCall/," Do whatever it takes to execute the call.\n\n @exception java.lang.Exception if a general exception occurs.\n @since JDK1.1\n @deprecated no replacement\n"
11575,method,java/rmi/server/RemoteCall/done/," Allow cleanup after the remote call has completed.\n\n @exception java.io.IOException if an I/O error occurs.\n @since JDK1.1\n @deprecated no replacement\n"
11576,class,java/rmi/server/RMISocketFactory," An <code>RMISocketFactory</code> instance is used by the RMI runtime\n in order to obtain client and server sockets for RMI calls.  An\n application may use the <code>setSocketFactory</code> method to\n request that the RMI runtime use its socket factory instance\n instead of the default implementation.<p>\n\n The default socket factory implementation used goes through a\n three-tiered approach to creating client sockets. First, a direct\n socket connection to the remote VM is attempted.  If that fails\n (due to a firewall), the runtime uses HTTP with the explicit port\n number of the server.  If the firewall does not allow this type of\n communication, then HTTP to a cgi-bin script on the server is used\n to POST the RMI call.<p>\n\n @version 1.23, 03/23/10\n @author  Ann Wollrath\n @author  Peter Jones\n @since   JDK1.1\n"
11577,method,java/rmi/server/RMISocketFactory/createSocket/String;int," Creates a client socket connected to the specified host and port.\n @param  host   the host name\n @param  port   the port number\n @return a socket connected to the specified host and port.\n @exception IOException if an I/O error occurs during socket creation\n @since JDK1.1\n"
11578,method,java/rmi/server/RMISocketFactory/createServerSocket/int," Create a server socket on the specified port (port 0 indicates\n an anonymous port).\n @param  port the port number\n @return the server socket on the specified port\n @exception IOException if an I/O error occurs during server socket\n creation\n @since JDK1.1\n"
11579,method,java/rmi/server/RMISocketFactory/setSocketFactory/RMISocketFactory," Set the global socket factory from which RMI gets sockets (if the\n remote object is not associated with a specific client and/or server\n socket factory). The RMI socket factory can only be set once. Note: The\n RMISocketFactory may only be set if the current security manager allows\n setting a socket factory; if disallowed, a SecurityException will be\n thrown.\n @param fac the socket factory\n @exception IOException if the RMI socket factory is already set\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkSetFactory</code> method doesn't allow the operation.\n @see #getSocketFactory\n @see java.lang.SecurityManager#checkSetFactory()\n @since JDK1.1\n"
11582,method,java/rmi/server/RMISocketFactory/setFailureHandler/RMIFailureHandler," Sets the failure handler to be called by the RMI runtime if server\n socket creation fails.  By default, if no failure handler is installed\n and server socket creation fails, the RMI runtime does attempt to\n recreate the server socket.\n\n <p>If there is a security manager, this method first calls\n the security manager's <code>checkSetFactory</code> method \n to ensure the operation is allowed. \n This could result in a <code>SecurityException</code>.\n\n @param fh the failure handler\n @throws	SecurityException  if a security manager exists and its  \n		<code>checkSetFactory</code> method doesn't allow the\n		operation.\n @see #getFailureHandler\n @see java.rmi.server.RMIFailureHandler#failure(Exception)\n @since JDK1.1\n"
11586,method,java/rmi/server/RMIServerSocketFactory/createServerSocket/int," Create a server socket on the specified port (port 0 indicates\n an anonymous port).\n @param  port the port number\n @return the server socket on the specified port\n @exception IOException if an I/O error occurs during server socket\n creation\n @since 1.2\n"
11587,interface,java/rmi/server/RMIFailureHandler," An <code>RMIFailureHandler</code> can be registered via the\n <code>RMISocketFactory.setFailureHandler</code> call. The\n <code>failure</code> method of the handler is invoked when the RMI\n runtime is unable to create a <code>ServerSocket</code> to listen\n for incoming calls. The <code>failure</code> method returns a boolean\n indicating whether the runtime should attempt to re-create the\n <code>ServerSocket</code>.\n\n @author 	Ann Wollrath\n @version	@(#)RMIFailureHandler.java	1.13, 10/03/23\n @since 	JDK1.1\n"
11588,method,java/rmi/server/RMIFailureHandler/failure/Exception," The <code>failure</code> callback is invoked when the RMI\n runtime is unable to create a <code>ServerSocket</code> via the\n <code>RMISocketFactory</code>. An <code>RMIFailureHandler</code>\n is registered via a call to\n <code>RMISocketFacotry.setFailureHandler</code>.  If no failure\n handler is installed, the default behavior is to attempt to\n re-create the ServerSocket.\n\n @param ex the exception that occurred during <code>ServerSocket</code>\n           creation\n @return if true, the RMI runtime attempts to retry\n <code>ServerSocket</code> creation\n @see java.rmi.server.RMISocketFactory#setFailureHandler(RMIFailureHandler)\n @since JDK1.1\n"
11590,method,java/rmi/server/RMIClientSocketFactory/createSocket/String;int," Create a client socket connected to the specified host and port.\n @param  host   the host name\n @param  port   the port number\n @return a socket connected to the specified host and port.\n @exception IOException if an I/O error occurs during socket creation\n @since 1.2\n"
11591,class,java/rmi/server/RMIClassLoaderSpi," <code>RMIClassLoaderSpi</code> is the service provider interface for\n <code>RMIClassLoader</code>.\n\n In particular, an <code>RMIClassLoaderSpi</code> instance provides an\n implementation of the following static methods of\n <code>RMIClassLoader</code>:\n\n <ul>\n\n <li>{@link RMIClassLoader#loadClass(URL,String)}\n <li>{@link RMIClassLoader#loadClass(String,String)}\n <li>{@link RMIClassLoader#loadClass(String,String,ClassLoader)}\n <li>{@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}\n <li>{@link RMIClassLoader#getClassLoader(String)}\n <li>{@link RMIClassLoader#getClassAnnotation(Class)}\n\n </ul>\n\n When one of those methods is invoked, its behavior is to delegate\n to a corresponding method on an instance of this class.\n The details of how each method delegates to the provider instance is\n described in the documentation for each particular method.\n See the documentation for {@link RMIClassLoader} for a description\n of how a provider instance is chosen.\n\n @version	1.17, 10/03/23\n @author	Peter Jones\n @author	Laird Dornin\n @see		RMIClassLoader\n @since	1.4\n"
11594,method,java/rmi/server/RMIClassLoaderSpi/getClassLoader/String," Provides the implementation for\n {@link RMIClassLoader#getClassLoader(String)}.\n\n Returns a class loader that loads classes from the given codebase\n URL path.\n\n <p>If there is a security manger, its <code>checkPermission</code>\n method will be invoked with a\n <code>RuntimePermission("getClassLoader")</code> permission;\n this could result in a <code>SecurityException</code>.\n The implementation of this method may also perform further security\n checks to verify that the calling context has permission to connect\n to all of the URLs in the codebase URL path.\n\n @param	codebase the list of URLs (space-separated) from which\n the returned class loader will load classes from, or <code>null</code>\n\n @return a class loader that loads classes from the given codebase URL\n path\n\n @throws	MalformedURLException if <code>codebase</code> is\n non-<code>null</code> and contains an invalid URL, or\n if <code>codebase</code> is <code>null</code> and a provider-specific\n URL used to identify the class loader is invalid\n\n @throws	SecurityException if there is a security manager and the\n invocation of its <code>checkPermission</code> method fails, or\n if the caller does not have permission to connect to all of the\n URLs in the codebase URL path\n"
11597,class,java/rmi/server/RMIClassLoader," <code>RMIClassLoader</code> comprises static methods to support\n dynamic class loading with RMI.  Included are methods for loading\n classes from a network location (one or more URLs) and obtaining\n the location from which an existing class should be loaded by\n remote parties.  These methods are used by the RMI runtime when\n marshalling and unmarshalling classes contained in the arguments\n and return values of remote method calls, and they also may be\n invoked directly by applications in order to mimic RMI's dynamic\n class loading behavior.\n\n <p>The implementation of the following static methods\n\n <ul>\n\n <li>{@link #loadClass(URL,String)}\n <li>{@link #loadClass(String,String)}\n <li>{@link #loadClass(String,String,ClassLoader)}\n <li>{@link #loadProxyClass(String,String[],ClassLoader)}\n <li>{@link #getClassLoader(String)}\n <li>{@link #getClassAnnotation(Class)}\n\n </ul>\n\n is provided by an instance of {@link RMIClassLoaderSpi}, the\n service provider interface for those methods.  When one of the\n methods is invoked, its behavior is to delegate to a corresponding\n method on the service provider instance.  The details of how each\n method delegates to the provider instance is described in the\n documentation for each particular method.\n\n <p>The service provider instance is chosen as follows:\n\n <ul>\n\n <li>If the system property\n <code>java.rmi.server.RMIClassLoaderSpi</code> is defined, then if\n its value equals the string <code>"default"</code>, the provider\n instance will be the value returned by an invocation of the {@link\n #getDefaultProviderInstance()} method, and for any other value, if\n a class named with the value of the property can be loaded by the\n system class loader (see {@link ClassLoader#getSystemClassLoader})\n and that class is assignable to {@link RMIClassLoaderSpi} and has a\n public no-argument constructor, then that constructor will be\n invoked to create the provider instance.  If the property is\n defined but any other of those conditions are not true, then an\n unspecified <code>Error</code> will be thrown to code that attempts\n to use <code>RMIClassLoader</code>, indicating the failure to\n obtain a provider instance.\n\n <li>If a resource named\n <code>META-INF/services/java.rmi.server.RMIClassLoaderSpi</code> is\n visible to the system class loader, then the contents of that\n resource are interpreted as a provider-configuration file, and the\n first class name specified in that file is used as the provider\n class name.  If a class with that name can be loaded by the system\n class loader and that class is assignable to {@link\n RMIClassLoaderSpi} and has a public no-argument constructor, then\n that constructor will be invoked to create the provider instance.\n If the resource is found but a provider cannot be instantiated as\n described, then an unspecified <code>Error</code> will be thrown to\n code that attempts to use <code>RMIClassLoader</code>, indicating\n the failure to obtain a provider instance.\n\n <li>Otherwise, the provider instance will be the value returned by\n an invocation of the {@link #getDefaultProviderInstance()} method.\n\n </ul>\n\n @version	1.42, 10/03/23\n @author	Ann Wollrath\n @author	Peter Jones\n @author	Laird Dornin\n @see		RMIClassLoaderSpi\n @since	JDK1.1\n"
11599,method,java/rmi/server/RMIClassLoader/loadClass/URL;String," Loads a class from a codebase URL.\n\n If <code>codebase</code> is <code>null</code>, then this method\n will behave the same as {@link #loadClass(String,String)} with a\n <code>null</code> <code>codebase</code> and the given class name.\n\n <p>This method delegates to the\n {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}\n method of the provider instance, passing the result of invoking\n {@link URL#toString} on the given URL (or <code>null</code> if\n <code>codebase</code> is null) as the first argument,\n <code>name</code> as the second argument,\n and <code>null</code> as the third argument.\n\n @param	codebase the URL to load the class from, or <code>null</code>\n\n @param	name the name of the class to load\n\n @return	the <code>Class</code> object representing the loaded class\n\n @throws MalformedURLException if <code>codebase</code> is\n <code>null</code> and a provider-specific URL used\n to load classes is invalid\n\n @throws	ClassNotFoundException if a definition for the class\n could not be found at the specified URL\n"
11601,method,java/rmi/server/RMIClassLoader/loadClass/String;String;ClassLoader," Loads a class from a codebase URL path, optionally using the\n supplied loader.\n\n This method should be used when the caller would like to make\n available to the provider implementation an additional contextual\n class loader to consider, such as the loader of a caller on the\n stack.  Typically, a provider implementation will attempt to\n resolve the named class using the given <code>defaultLoader</code>,\n if specified, before attempting to resolve the class from the\n codebase URL path.\n\n <p>This method delegates to the\n {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}\n method of the provider instance, passing <code>codebase</code>\n as the first argument, <code>name</code> as the second argument,\n and <code>defaultLoader</code> as the third argument.\n\n @param	codebase the list of URLs (separated by spaces) to load\n the class from, or <code>null</code>\n\n @param	name the name of the class to load\n\n @param	defaultLoader additional contextual class loader\n to use, or <code>null</code>\n\n @return	the <code>Class</code> object representing the loaded class\n\n @throws MalformedURLException if <code>codebase</code> is\n non-<code>null</code> and contains an invalid URL, or if\n <code>codebase</code> is <code>null</code> and a provider-specific\n URL used to load classes is invalid\n\n @throws	ClassNotFoundException if a definition for the class\n could not be found at the specified location\n\n @since	1.4\n"
11602,method,java/rmi/server/RMIClassLoader/loadProxyClass/String;String[];ClassLoader," Loads a dynamic proxy class (see {@link java.lang.reflect.Proxy})\n that implements a set of interfaces with the given names\n from a codebase URL path.\n\n <p>The interfaces will be resolved similar to classes loaded via\n the {@link #loadClass(String,String)} method using the given\n <code>codebase</code>.\n\n <p>This method delegates to the\n {@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)}\n method of the provider instance, passing <code>codebase</code>\n as the first argument, <code>interfaces</code> as the second argument,\n and <code>defaultLoader</code> as the third argument.\n\n @param	codebase the list of URLs (space-separated) to load\n classes from, or <code>null</code>\n\n @param	interfaces the names of the interfaces for the proxy class\n to implement\n\n @param	defaultLoader additional contextual class loader\n to use, or <code>null</code>\n\n @return	a dynamic proxy class that implements the named interfaces\n\n @throws	MalformedURLException if <code>codebase</code> is\n non-<code>null</code> and contains an invalid URL, or\n if <code>codebase</code> is <code>null</code> and a provider-specific\n URL used to load classes is invalid\n\n @throws	ClassNotFoundException if a definition for one of\n the named interfaces could not be found at the specified location,\n or if creation of the dynamic proxy class failed (such as if\n {@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])}\n would throw an <code>IllegalArgumentException</code> for the given\n interface list)\n\n @since	1.4\n"
11603,method,java/rmi/server/RMIClassLoader/getClassLoader/String," Returns a class loader that loads classes from the given codebase\n URL path.\n\n <p>The class loader returned is the class loader that the\n {@link #loadClass(String,String)} method would use to load classes\n for the same <code>codebase</code> argument.\n \n <p>This method delegates to the\n {@link RMIClassLoaderSpi#getClassLoader(String)} method\n of the provider instance, passing <code>codebase</code> as the argument.\n\n <p>If there is a security manger, its <code>checkPermission</code>\n method will be invoked with a\n <code>RuntimePermission("getClassLoader")</code> permission;\n this could result in a <code>SecurityException</code>.\n The provider implementation of this method may also perform further\n security checks to verify that the calling context has permission to\n connect to all of the URLs in the codebase URL path.\n\n @param	codebase the list of URLs (space-separated) from which\n the returned class loader will load classes from, or <code>null</code>\n\n @return a class loader that loads classes from the given codebase URL\n path\n\n @throws	MalformedURLException if <code>codebase</code> is\n non-<code>null</code> and contains an invalid URL, or\n if <code>codebase</code> is <code>null</code> and a provider-specific\n URL used to identify the class loader is invalid\n\n @throws	SecurityException if there is a security manager and the\n invocation of its <code>checkPermission</code> method fails, or\n if the caller does not have permission to connect to all of the\n URLs in the codebase URL path\n\n @since	1.3\n"
11611,class,java/rmi/server/ObjID," An <code>ObjID</code> is used to identify a remote object exported\n to an RMI runtime.  When a remote object is exported, it is assigned\n an object identifier either implicitly or explicitly, depending on\n the API used to export.\n\n <p>The {@link #ObjID()} constructor can be used to generate a unique\n object identifier.  Such an <code>ObjID</code> is unique over time\n with respect to the host it is generated on.\n\n The {@link #ObjID(int)} constructor can be used to create a\n "well-known" object identifier.  The scope of a well-known\n <code>ObjID</code> depends on the RMI runtime it is exported to.\n\n <p>An <code>ObjID</code> instance contains an object number (of type\n <code>long</code>) and an address space identifier (of type\n {@link UID}).  In a unique <code>ObjID</code>, the address space\n identifier is unique with respect to a given host over time.  In a\n well-known <code>ObjID</code>, the address space identifier is\n equivalent to one returned by invoking the {@link UID#UID(short)}\n constructor with the value zero.\n\n <p>If the system property <code>java.rmi.server.randomIDs</code>\n is defined to equal the string <code>"true"</code> (case insensitive),\n then the {@link #ObjID()} constructor will use a cryptographically\n strong random number generator to choose the object number of the\n returned <code>ObjID</code>.\n\n @author	Ann Wollrath\n @author	Peter Jones\n @version	1.32, 10/03/23\n @since	JDK1.1\n"
11612,method,java/rmi/server/ObjID/write/ObjectOutput," Marshals a binary representation of this <code>ObjID</code> to\n an <code>ObjectOutput</code> instance.\n\n <p>Specifically, this method first invokes the given stream's\n {@link ObjectOutput#writeLong(long)} method with this object\n identifier's object number, and then it writes its address\n space identifier by invoking its {@link UID#write(DataOutput)}\n method with the stream.\n\n @param	out the <code>ObjectOutput</code> instance to write\n this <code>ObjID</code> to\n\n @throws	IOException if an I/O error occurs while performing\n this operation\n"
11613,method,java/rmi/server/ObjID/read/ObjectInput," Constructs and returns a new <code>ObjID</code> instance by\n unmarshalling a binary representation from an\n <code>ObjectInput</code> instance.\n\n <p>Specifically, this method first invokes the given stream's\n {@link ObjectInput#readLong()} method to read an object number,\n then it invokes {@link UID#read(DataInput)} with the\n stream to read an address space identifier, and then it\n creates and returns a new <code>ObjID</code> instance that\n contains the object number and address space identifier that\n were read from the stream.\n\n @param	in the <code>ObjectInput</code> instance to read\n <code>ObjID</code> from\n\n @return	unmarshalled <code>ObjID</code> instance\n\n @throws	IOException if an I/O error occurs while performing\n this operation\n"
11615,method,java/rmi/server/ObjID/equals/Object," Compares the specified object with this <code>ObjID</code> for\n equality.\n\n This method returns <code>true</code> if and only if the\n specified object is an <code>ObjID</code> instance with the same\n object number and address space identifier as this one.\n\n @param	obj the object to compare this <code>ObjID</code> to\n\n @return	<code>true</code> if the given object is equivalent to\n this one, and <code>false</code> otherwise\n"
11617,method,java/rmi/server/ObjID/ObjID/," Generates a unique object identifier.\n\n <p>If the system property <code>java.rmi.server.randomIDs</code>\n is defined to equal the string <code>"true"</code> (case insensitive),\n then this constructor will use a cryptographically\n strong random number generator to choose the object number of the\n returned <code>ObjID</code>.\n"
11622,class,java/rmi/server/LogStream," <code>LogStream</code> provides a mechanism for logging errors that are\n of possible interest to those monitoring a system.  \n\n @version 1.22, 03/23/10\n @author  Ann Wollrath (lots of code stolen from Ken Arnold)\n @since   JDK1.1\n @deprecated no replacement\n"
11623,method,java/rmi/server/LogStream/log/String," Return the LogStream identified by the given name.  If\n a log corresponding to "name" does not exist, a log using\n the default stream is created.\n @param name name identifying the desired LogStream\n @return log associated with given name\n @since JDK1.1\n @deprecated no replacement\n"
11644,method,java/rmi/registry/RegistryHandler/registryStub/String;int," Returns a "stub" for contacting a remote registry\n on the specified host and port.\n\n @deprecated no replacement.  As of the Java 2 platform v1.2, RMI no\n longer uses the <code>RegistryHandler</code> to obtain the registry's\n stub.\n @param host name of remote registry host\n @param port remote registry port\n @return remote registry stub\n @throws RemoteException if a remote error occurs\n @throws UnknownHostException if unable to resolve given hostname\n"
11647,method,java/rmi/registry/Registry/lookup/String," Returns the remote reference bound to the specified\n <code>name</code> in this registry.\n\n @param	name the name for the remote reference to look up\n\n @return	a reference to a remote object\n\n @throws	NotBoundException if <code>name</code> is not currently bound\n\n @throws	RemoteException if remote communication with the\n registry failed; if exception is a <code>ServerException</code>\n containing an <code>AccessException</code>, then the registry\n denies the caller access to perform this operation\n\n @throws	AccessException if this registry is local and it denies\n the caller access to perform this operation\n\n @throws	NullPointerException if <code>name</code> is <code>null</code>\n"
11648,method,java/rmi/registry/Registry/bind/String;Remote," Binds a remote reference to the specified <code>name</code> in\n this registry.\n\n @param	name the name to associate with the remote reference\n @param	obj a reference to a remote object (usually a stub)\n\n @throws	AlreadyBoundException if <code>name</code> is already bound\n\n @throws	RemoteException if remote communication with the\n registry failed; if exception is a <code>ServerException</code>\n containing an <code>AccessException</code>, then the registry\n denies the caller access to perform this operation (if\n originating from a non-local host, for example)\n\n @throws	AccessException if this registry is local and it denies\n the caller access to perform this operation\n\n @throws	NullPointerException if <code>name</code> is\n <code>null</code>, or if <code>obj</code> is <code>null</code>\n"
11649,method,java/rmi/registry/Registry/unbind/String," Removes the binding for the specified <code>name</code> in\n this registry.\n\n @param	name the name of the binding to remove\n\n @throws	NotBoundException if <code>name</code> is not currently bound\n\n @throws	RemoteException if remote communication with the\n registry failed; if exception is a <code>ServerException</code>\n containing an <code>AccessException</code>, then the registry\n denies the caller access to perform this operation (if\n originating from a non-local host, for example)\n\n @throws	AccessException if this registry is local and it denies\n the caller access to perform this operation\n\n @throws	NullPointerException if <code>name</code> is <code>null</code>\n"
11650,method,java/rmi/registry/Registry/rebind/String;Remote," Replaces the binding for the specified <code>name</code> in\n this registry with the supplied remote reference.  If there is\n an existing binding for the specified <code>name</code>, it is\n discarded.\n\n @param	name the name to associate with the remote reference\n @param	obj a reference to a remote object (usually a stub)\n\n @throws	RemoteException if remote communication with the\n registry failed; if exception is a <code>ServerException</code>\n containing an <code>AccessException</code>, then the registry\n denies the caller access to perform this operation (if\n originating from a non-local host, for example)\n\n @throws	AccessException if this registry is local and it denies\n the caller access to perform this operation\n\n @throws	NullPointerException if <code>name</code> is\n <code>null</code>, or if <code>obj</code> is <code>null</code>\n"
11651,method,java/rmi/registry/Registry/list/," Returns an array of the names bound in this registry.  The\n array will contain a snapshot of the names bound in this\n registry at the time of the given invocation of this method.\n\n @return	an array of the names bound in this registry\n\n @throws	RemoteException if remote communication with the\n registry failed; if exception is a <code>ServerException</code>\n containing an <code>AccessException</code>, then the registry\n denies the caller access to perform this operation\n\n @throws	AccessException if this registry is local and it denies\n the caller access to perform this operation\n"
11653,class,java/rmi/registry/LocateRegistry," <code>LocateRegistry</code> is used to obtain a reference to a bootstrap\n remote object registry on a particular host (including the local host), or\n to create a remote object registry that accepts calls on a specific port.\n\n <p> Note that a <code>getRegistry</code> call does not actually make a\n connection to the remote host.  It simply creates a local reference to\n the remote registry and will succeed even if no registry is running on\n the remote host.  Therefore, a subsequent method invocation to a remote\n registry returned as a result of this method may fail.\n\n @version 1.35, 03/23/10\n @author  Ann Wollrath\n @author  Peter Jones\n @since   JDK1.1\n @see     java.rmi.registry.Registry\n"
11659,method,java/rmi/registry/LocateRegistry/createRegistry/int," Creates and exports a <code>Registry</code> instance on the local\n host that accepts requests on the specified <code>port</code>.\n\n <p>The <code>Registry</code> instance is exported as if the static\n {@link UnicastRemoteObject.exportObject(Remote,int)\n UnicastRemoteObject.exportObject} method is invoked, passing the\n <code>Registry</code> instance and the specified <code>port</code> as\n arguments, except that the <code>Registry</code> instance is\n exported with a well-known object identifier, an {@link ObjID}\n instance constructed with the value {@link ObjID#REGISTRY_ID}.\n\n @param port the port on which the registry accepts requests\n @return the registry\n @exception RemoteException if the registry could not be exported\n @since JDK1.1\n"
11660,method,java/rmi/registry/LocateRegistry/createRegistry/int;RMIClientSocketFactory;RMIServerSocketFactory," Creates and exports a <code>Registry</code> instance on the local\n host that uses custom socket factories for communication with that\n instance.  The registry that is created listens for incoming\n requests on the given <code>port</code> using a\n <code>ServerSocket</code> created from the supplied\n <code>RMIServerSocketFactory</code>.\n\n <p>The <code>Registry</code> instance is exported as if \n the static {@link\n UnicastRemoteObject.exportObject(Remote,int,RMIClientSocketFactory,RMIServerSocketFactory)\n UnicastRemoteObject.exportObject} method is invoked, passing the\n <code>Registry</code> instance, the specified <code>port</code>, the\n specified <code>RMIClientSocketFactory</code>, and the specified\n <code>RMIServerSocketFactory</code> as arguments, except that the\n <code>Registry</code> instance is exported with a well-known object\n identifier, an {@link ObjID} instance constructed with the value\n {@link ObjID#REGISTRY_ID}.\n\n @param port port on which the registry accepts requests\n @param csf  client-side <code>Socket</code> factory used to\n      make connections to the registry\n @param ssf  server-side <code>ServerSocket</code> factory\n      used to accept connections to the registry\n @return the registry\n @exception RemoteException if the registry could not be exported\n @since 1.2\n"
11663,class,java/lang/VirtualMachineError," Thrown to indicate that the Java Virtual Machine is broken or has \n run out of resources necessary for it to continue operating. \n\n\n @author  Frank Yellin\n @version 1.16, 03/23/10\n @since   JDK1.0\n"
11672,method,java/lang/UnsupportedOperationException/UnsupportedOperationException/String;Throwable," Constructs a new exception with the specified detail message and\n cause.\n\n <p>Note that the detail message associated with <code>cause</code> is\n <i>not</i> automatically incorporated in this exception's detail\n message.\n\n @param  message the detail message (which is saved for later retrieval\n         by the {@link Throwable#getMessage()} method).\n @param  cause the cause (which is saved for later retrieval by the\n         {@link Throwable#getCause()} method).  (A <tt>null</tt> value\n         is permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since 1.5\n"
11683,class,java/lang/TypeNotPresentException," Thrown when an application tries to access a type using a string\n representing the type's name, but no definition for the type with\n the specified name can be found.   This exception differs from\n {@link ClassNotFoundException} in that <tt>ClassNotFoundException</tt> is a\n checked exception, whereas this exception is unchecked.\n\n <p>Note that this exception may be used when undefined type variables\n are accessed as well as when types (e.g., classes, interfaces or\n annotation types) are loaded.\n\n @author  Josh Bloch\n @since 1.5\n"
11687,method,java/lang/Throwable/getMessage/," Returns the detail message string of this throwable.\n\n @return  the detail message string of this <tt>Throwable</tt> instance\n          (which may be <tt>null</tt>).\n"
11688,method,java/lang/Throwable/getLocalizedMessage/," Creates a localized description of this throwable.\n Subclasses may override this method in order to produce a\n locale-specific message.  For subclasses that do not override this\n method, the default implementation returns the same result as\n <code>getMessage()</code>.\n\n @return  The localized description of this throwable.\n @since   JDK1.1\n"
11689,method,java/lang/Throwable/getCause/," Returns the cause of this throwable or <code>null</code> if the\n cause is nonexistent or unknown.  (The cause is the throwable that\n caused this throwable to get thrown.)\n\n <p>This implementation returns the cause that was supplied via one of\n the constructors requiring a <tt>Throwable</tt>, or that was set after\n creation with the {@link #initCause(Throwable)} method.  While it is\n typically unnecessary to override this method, a subclass can override\n it to return a cause set by some other means.  This is appropriate for\n a "legacy chained throwable" that predates the addition of chained\n exceptions to <tt>Throwable</tt>.  Note that it is <i>not</i>\n necessary to override any of the <tt>PrintStackTrace</tt> methods,\n all of which invoke the <tt>getCause</tt> method to determine the\n cause of a throwable.\n\n @return  the cause of this throwable or <code>null</code> if the\n          cause is nonexistent or unknown.\n @since 1.4\n"
11690,method,java/lang/Throwable/initCause/Throwable," Initializes the <i>cause</i> of this throwable to the specified value.\n (The cause is the throwable that caused this throwable to get thrown.)\n\n <p>This method can be called at most once.  It is generally called from\n within the constructor, or immediately after creating the\n throwable.  If this throwable was created\n with {@link #Throwable(Throwable)} or\n {@link #Throwable(String,Throwable)}, this method cannot be called\n even once.\n\n @param  cause the cause (which is saved for later retrieval by the\n         {@link #getCause()} method).  (A <tt>null</tt> value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @return  a reference to this <code>Throwable</code> instance.\n @throws IllegalArgumentException if <code>cause</code> is this\n         throwable.  (A throwable cannot be its own cause.)\n @throws IllegalStateException if this throwable was\n         created with {@link #Throwable(Throwable)} or\n         {@link #Throwable(String,Throwable)}, or this method has already\n         been called on this throwable.\n @since  1.4\n"
11691,method,java/lang/Throwable/toString/," Returns a short description of this throwable.\n The result is the concatenation of:\n <ul>\n <li> the {@linkplain Class#getName() name} of the class of this object\n <li> ": " (a colon and a space)\n <li> the result of invoking this object's {@link #getLocalizedMessage}\n      method\n </ul>\n If <tt>getLocalizedMessage</tt> returns <tt>null</tt>, then just\n the class name is returned.\n\n @return a string representation of this throwable.\n"
11695,method,java/lang/Throwable/fillInStackTrace/," Fills in the execution stack trace. This method records within this\n <code>Throwable</code> object information about the current state of\n the stack frames for the current thread.\n\n @return  a reference to this <code>Throwable</code> instance.\n @see     java.lang.Throwable#printStackTrace()\n"
11696,method,java/lang/Throwable/getStackTrace/," Provides programmatic access to the stack trace information printed by\n {@link #printStackTrace()}.  Returns an array of stack trace elements,\n each representing one stack frame.  The zeroth element of the array\n (assuming the array's length is non-zero) represents the top of the\n stack, which is the last method invocation in the sequence.  Typically,\n this is the point at which this throwable was created and thrown.\n The last element of the array (assuming the array's length is non-zero)\n represents the bottom of the stack, which is the first method invocation\n in the sequence.\n\n <p>Some virtual machines may, under some circumstances, omit one\n or more stack frames from the stack trace.  In the extreme case,\n a virtual machine that has no stack trace information concerning\n this throwable is permitted to return a zero-length array from this\n method.  Generally speaking, the array returned by this method will\n contain one element for every frame that would be printed by\n <tt>printStackTrace</tt>.\n\n @return an array of stack trace elements representing the stack trace\n         pertaining to this throwable.\n @since  1.4\n"
11697,method,java/lang/Throwable/setStackTrace/StackTraceElement[]," Sets the stack trace elements that will be returned by\n {@link #getStackTrace()} and printed by {@link #printStackTrace()}\n and related methods.\n\n This method, which is designed for use by RPC frameworks and other\n advanced systems, allows the client to override the default\n stack trace that is either generated by {@link #fillInStackTrace()}\n when a throwable is constructed or deserialized when a throwable is\n read from a serialization stream.\n\n @param   stackTrace the stack trace elements to be associated with\n this <code>Throwable</code>.  The specified array is copied by this\n call; changes in the specified array after the method invocation\n returns will have no affect on this <code>Throwable</code>'s stack\n trace.\n\n @throws NullPointerException if <code>stackTrace</code> is\n         <code>null</code>, or if any of the elements of\n         <code>stackTrace</code> are <code>null</code>\n\n @since  1.4\n"
11698,method,java/lang/Throwable/Throwable/," Constructs a new throwable with <code>null</code> as its detail message.\n The cause is not initialized, and may subsequently be initialized by a\n call to {@link #initCause}.\n\n <p>The {@link #fillInStackTrace()} method is called to initialize\n the stack trace data in the newly created throwable.\n"
11699,method,java/lang/Throwable/Throwable/String," Constructs a new throwable with the specified detail message.  The\n cause is not initialized, and may subsequently be initialized by\n a call to {@link #initCause}.\n\n <p>The {@link #fillInStackTrace()} method is called to initialize\n the stack trace data in the newly created throwable.\n\n @param   message   the detail message. The detail message is saved for\n          later retrieval by the {@link #getMessage()} method.\n"
11700,method,java/lang/Throwable/Throwable/String;Throwable," Constructs a new throwable with the specified detail message and\n cause.  <p>Note that the detail message associated with\n <code>cause</code> is <i>not</i> automatically incorporated in\n this throwable's detail message.\n\n <p>The {@link #fillInStackTrace()} method is called to initialize\n the stack trace data in the newly created throwable.\n\n @param  message the detail message (which is saved for later retrieval\n         by the {@link #getMessage()} method).\n @param  cause the cause (which is saved for later retrieval by the\n         {@link #getCause()} method).  (A <tt>null</tt> value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since  1.4\n"
11701,method,java/lang/Throwable/Throwable/Throwable," Constructs a new throwable with the specified cause and a detail\n message of <tt>(cause==null ? null : cause.toString())</tt> (which\n typically contains the class and detail message of <tt>cause</tt>).\n This constructor is useful for throwables that are little more than\n wrappers for other throwables (for example, {@link\n java.security.PrivilegedActionException}).\n\n <p>The {@link #fillInStackTrace()} method is called to initialize\n the stack trace data in the newly created throwable.\n\n @param  cause the cause (which is saved for later retrieval by the\n         {@link #getCause()} method).  (A <tt>null</tt> value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since  1.4\n"
11702,class,java/lang/ThreadLocal," This class provides thread-local variables.  These variables differ from\n their normal counterparts in that each thread that accesses one (via its\n <tt>get</tt> or <tt>set</tt> method) has its own, independently initialized\n copy of the variable.  <tt>ThreadLocal</tt> instances are typically private\n static fields in classes that wish to associate state with a thread (e.g.,\n a user ID or Transaction ID).\n\n <p>For example, the class below generates unique identifiers local to each\n thread.\n A thread's id is\n assigned the first time it invokes <tt>UniqueThreadIdGenerator.getCurrentThreadId()</tt> and remains unchanged on subsequent calls.\n <pre>\n import java.util.concurrent.atomic.AtomicInteger;\n\n public class UniqueThreadIdGenerator {\n\n     private static final AtomicInteger uniqueId = new AtomicInteger(0);\n\n     private static final ThreadLocal &lt; Integer > uniqueNum = \n         new ThreadLocal &lt; Integer > () {\n             &#64;Override protected Integer initialValue() {\n                 return uniqueId.getAndIncrement();\n         }\n     };\n \n     public static int getCurrentThreadId() {\n         return uniqueId.get();\n     }\n } // UniqueThreadIdGenerator\n </pre>\n <p>Each thread holds an implicit reference to its copy of a thread-local\n variable as long as the thread is alive and the <tt>ThreadLocal</tt>\n instance is accessible; after a thread goes away, all of its copies of\n thread-local instances are subject to garbage collection (unless other\n references to these copies exist). \n\n @author  Josh Bloch and Doug Lea\n @version 1.43, 03/23/10\n @since   1.2\n"
11704,method,java/lang/ThreadLocal/get/," Returns the value in the current thread's copy of this\n thread-local variable.  If the variable has no value for the\n current thread, it is first initialized to the value returned\n by an invocation of the {@link #initialValue} method.\n\n @return the current thread's value of this thread-local\n"
11705,method,java/lang/ThreadLocal/set/Object," Sets the current thread's copy of this thread-local variable\n to the specified value.  Most subclasses will have no need to \n override this method, relying solely on the {@link #initialValue}\n method to set the values of thread-locals.\n\n @param value the value to be stored in the current thread's copy of\n        this thread-local.\n"
11706,method,java/lang/ThreadLocal/remove/," Removes the current thread's value for this thread-local\n variable.  If this thread-local variable is subsequently\n {@linkplain #get read} by the current thread, its value will be\n reinitialized by invoking its {@link #initialValue} method,\n unless its value is {@linkplain #set set} by the current thread\n in the interim.  This may result in multiple invocations of the\n <tt>initialValue</tt> method in the current thread.\n\n @since 1.5\n"
11707,method,java/lang/ThreadLocal/ThreadLocal/," Creates a thread local variable.\n"
11708,class,java/lang/ThreadGroup," A thread group represents a set of threads. In addition, a thread \n group can also include other thread groups. The thread groups form \n a tree in which every thread group except the initial thread group \n has a parent. \n <p>\n A thread is allowed to access information about its own thread \n group, but not to access information about its thread group's \n parent thread group or any other thread groups. \n\n @author  unascribed\n @version 1.68, 03/23/10\n @since   JDK1.0\n"
11709,method,java/lang/ThreadGroup/getName/," Returns the name of this thread group.\n\n @return  the name of this thread group.\n @since   JDK1.0\n"
11710,method,java/lang/ThreadGroup/getParent/," Returns the parent of this thread group.\n <p>\n First, if the parent is not <code>null</code>, the \n <code>checkAccess</code> method of the parent thread group is \n called with no arguments; this may result in a security exception. \n\n @return  the parent of this thread group. The top-level thread group\n          is the only thread group whose parent is <code>null</code>.\n @exception  SecurityException  if the current thread cannot modify\n               this thread group.\n @see        java.lang.ThreadGroup#checkAccess()\n @see        java.lang.SecurityException\n @see        java.lang.RuntimePermission\n @since   JDK1.0\n"
11711,method,java/lang/ThreadGroup/getMaxPriority/," Returns the maximum priority of this thread group. Threads that are\n part of this group cannot have a higher priority than the maximum\n priority.\n\n @return  the maximum priority that a thread in this thread group\n          can have.\n @see     #setMaxPriority\n @since   JDK1.0\n"
11712,method,java/lang/ThreadGroup/isDaemon/," Tests if this thread group is a daemon thread group. A \n daemon thread group is automatically destroyed when its last \n thread is stopped or its last thread group is destroyed. \n\n @return  <code>true</code> if this thread group is a daemon thread group;\n          <code>false</code> otherwise.\n @since   JDK1.0\n"
11713,method,java/lang/ThreadGroup/isDestroyed/," Tests if this thread group has been destroyed.\n\n @return  true if this object is destroyed\n @since   JDK1.1\n"
11714,method,java/lang/ThreadGroup/setDaemon/boolean," Changes the daemon status of this thread group.\n <p>\n First, the <code>checkAccess</code> method of this thread group is \n called with no arguments; this may result in a security exception. \n <p>\n A daemon thread group is automatically destroyed when its last \n thread is stopped or its last thread group is destroyed. \n\n @param      daemon   if <code>true</code>, marks this thread group as\n                      a daemon thread group; otherwise, marks this\n                      thread group as normal.\n @exception  SecurityException  if the current thread cannot modify\n               this thread group.\n @see        java.lang.SecurityException\n @see        java.lang.ThreadGroup#checkAccess()\n @since      JDK1.0\n"
11715,method,java/lang/ThreadGroup/setMaxPriority/int," Sets the maximum priority of the group. Threads in the thread \n group that already have a higher priority are not affected. \n <p>\n First, the <code>checkAccess</code> method of this thread group is \n called with no arguments; this may result in a security exception. \n <p>\n If the <code>pri</code> argument is less than \n {@link Thread#MIN_PRIORITY} or greater than \n {@link Thread#MAX_PRIORITY}, the maximum priority of the group \n remains unchanged.\n <p>\n Otherwise, the priority of this ThreadGroup object is set to the \n smaller of the specified <code>pri</code> and the maximum permitted \n priority of the parent of this thread group. (If this thread group \n is the system thread group, which has no parent, then its maximum \n priority is simply set to <code>pri</code>.) Then this method is \n called recursively, with <code>pri</code> as its argument, for \n every thread group that belongs to this thread group.\n\n @param      pri   the new priority of the thread group.\n @exception  SecurityException  if the current thread cannot modify\n               this thread group.\n @see        #getMaxPriority\n @see        java.lang.SecurityException\n @see        java.lang.ThreadGroup#checkAccess()\n @since      JDK1.0\n"
11716,method,java/lang/ThreadGroup/parentOf/ThreadGroup," Tests if this thread group is either the thread group \n argument or one of its ancestor thread groups. \n\n @param   g   a thread group.\n @return  <code>true</code> if this thread group is the thread group\n          argument or one of its ancestor thread groups;\n          <code>false</code> otherwise.\n @since   JDK1.0\n"
11717,method,java/lang/ThreadGroup/checkAccess/," Determines if the currently running thread has permission to \n modify this thread group. \n <p>\n If there is a security manager, its <code>checkAccess</code> method \n is called with this thread group as its argument. This may result \n in throwing a <code>SecurityException</code>. \n\n @exception  SecurityException  if the current thread is not allowed to\n               access this thread group.\n @see        java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)\n @since      JDK1.0\n"
11724,method,java/lang/ThreadGroup/stop/," Stops all threads in this thread group.\n <p>\n First, the <code>checkAccess</code> method of this thread group is \n called with no arguments; this may result in a security exception. \n <p>\n This method then calls the <code>stop</code> method on all the \n threads in this thread group and in all of its subgroups. \n\n @exception  SecurityException  if the current thread is not allowed\n               to access this thread group or any of the threads in\n               the thread group.\n @see        java.lang.SecurityException\n @see        java.lang.Thread#stop()\n @see        java.lang.ThreadGroup#checkAccess()\n @since      JDK1.0\n @deprecated    This method is inherently unsafe.  See\n     {@link Thread#stop} for details.\n"
11725,method,java/lang/ThreadGroup/interrupt/," Interrupts all threads in this thread group.\n <p>\n First, the <code>checkAccess</code> method of this thread group is \n called with no arguments; this may result in a security exception. \n <p>\n This method then calls the <code>interrupt</code> method on all the \n threads in this thread group and in all of its subgroups.\n\n @exception  SecurityException  if the current thread is not allowed\n               to access this thread group or any of the threads in\n               the thread group.\n @see        java.lang.Thread#interrupt()\n @see        java.lang.SecurityException\n @see        java.lang.ThreadGroup#checkAccess()\n @since      1.2\n"
11726,method,java/lang/ThreadGroup/suspend/," Suspends all threads in this thread group.\n <p>\n First, the <code>checkAccess</code> method of this thread group is \n called with no arguments; this may result in a security exception. \n <p>\n This method then calls the <code>suspend</code> method on all the \n threads in this thread group and in all of its subgroups. \n\n @exception  SecurityException  if the current thread is not allowed\n               to access this thread group or any of the threads in\n               the thread group.\n @see        java.lang.Thread#suspend()\n @see        java.lang.SecurityException\n @see        java.lang.ThreadGroup#checkAccess()\n @since      JDK1.0\n @deprecated    This method is inherently deadlock-prone.  See\n     {@link Thread#suspend} for details.\n"
11727,method,java/lang/ThreadGroup/resume/," Resumes all threads in this thread group.\n <p>\n First, the <code>checkAccess</code> method of this thread group is \n called with no arguments; this may result in a security exception. \n <p>\n This method then calls the <code>resume</code> method on all the \n threads in this thread group and in all of its sub groups. \n\n @exception  SecurityException  if the current thread is not allowed to\n               access this thread group or any of the threads in the\n               thread group.\n @see        java.lang.SecurityException\n @see        java.lang.Thread#resume()\n @see        java.lang.ThreadGroup#checkAccess()\n @since      JDK1.0\n @deprecated    This method is used solely in conjunction with\n      <tt>Thread.suspend</tt> and <tt>ThreadGroup.suspend</tt>,\n       both of which have been deprecated, as they are inherently\n       deadlock-prone.  See {@link Thread#suspend} for details.\n"
11729,method,java/lang/ThreadGroup/list/," Prints information about this thread group to the standard \n output. This method is useful only for debugging. \n\n @since   JDK1.0\n"
11731,method,java/lang/ThreadGroup/allowThreadSuspension/boolean," Used by VM to control lowmem implicit suspension.\n\n @param b boolean to allow or disallow suspension\n @return true on success\n @since   JDK1.1\n @deprecated The definition of this call depends on {@link #suspend},\n		   which is deprecated.  Further, the behavior of this call\n		   was never specified.\n"
11732,method,java/lang/ThreadGroup/toString/," Returns a string representation of this Thread group.\n\n @return  a string representation of this thread group.\n @since   JDK1.0\n"
11733,method,java/lang/ThreadGroup/ThreadGroup/String," Constructs a new thread group. The parent of this new group is \n the thread group of the currently running thread. \n <p>\n The <code>checkAccess</code> method of the parent thread group is \n called with no arguments; this may result in a security exception. \n\n @param   name   the name of the new thread group.\n @exception  SecurityException  if the current thread cannot create a\n               thread in the specified thread group.\n @see     java.lang.ThreadGroup#checkAccess()\n @since   JDK1.0\n"
11734,method,java/lang/ThreadGroup/ThreadGroup/ThreadGroup;String," Creates a new thread group. The parent of this new group is the \n specified thread group. \n <p>\n The <code>checkAccess</code> method of the parent thread group is \n called with no arguments; this may result in a security exception. \n\n @param     parent   the parent thread group.\n @param     name     the name of the new thread group.\n @exception  NullPointerException  if the thread group argument is\n               <code>null</code>.\n @exception  SecurityException  if the current thread cannot create a\n               thread in the specified thread group.\n @see     java.lang.SecurityException\n @see     java.lang.ThreadGroup#checkAccess()\n @since   JDK1.0\n"
11738,method,java/lang/Thread/currentThread/," Returns a reference to the currently executing thread object.\n\n @return  the currently executing thread.\n"
11739,method,java/lang/Thread/yield/," Causes the currently executing thread object to temporarily pause \n and allow other threads to execute. \n"
11740,method,java/lang/Thread/sleep/long,"\n Causes the currently executing thread to sleep (temporarily cease \n execution) for the specified number of milliseconds, subject to \n the precision and accuracy of system timers and schedulers. The thread \n does not lose ownership of any monitors.\n\n @param      millis   the length of time to sleep in milliseconds.\n @exception  InterruptedException if any thread has interrupted\n             the current thread.  The <i>interrupted status</i> of the\n             current thread is cleared when this exception is thrown.\n @see        Object#notify()\n"
11741,method,java/lang/Thread/sleep/long;int," Causes the currently executing thread to sleep (cease execution) \n for the specified number of milliseconds plus the specified number \n of nanoseconds, subject to the precision and accuracy of system \n timers and schedulers. The thread does not lose ownership of any \n monitors.\n\n @param      millis   the length of time to sleep in milliseconds.\n @param      nanos    0-999999 additional nanoseconds to sleep.\n @exception  IllegalArgumentException  if the value of millis is \n             negative or the value of nanos is not in the range \n             0-999999.\n @exception  InterruptedException if any thread has interrupted\n             the current thread.  The <i>interrupted status</i> of the\n             current thread is cleared when this exception is thrown.\n @see        Object#notify()\n"
11742,method,java/lang/Thread/start/," Causes this thread to begin execution; the Java Virtual Machine \n calls the <code>run</code> method of this thread. \n <p>\n The result is that two threads are running concurrently: the \n current thread (which returns from the call to the \n <code>start</code> method) and the other thread (which executes its \n <code>run</code> method). \n <p>\n It is never legal to start a thread more than once.\n In particular, a thread may not be restarted once it has completed\n execution.\n\n @exception  IllegalThreadStateException  if the thread was already\n               started.\n @see        #run()\n @see        #stop()\n"
11745,method,java/lang/Thread/stop/Throwable," Forces the thread to stop executing.\n <p>\n If there is a security manager installed, the <code>checkAccess</code>\n method of this thread is called, which may result in a \n <code>SecurityException</code> being raised (in the current thread). \n <p>\n If this thread is different from the current thread (that is, the current\n thread is trying to stop a thread other than itself) or\n <code>obj</code> is not an instance of <code>ThreadDeath</code>, the\n security manager's <code>checkPermission</code> method (with the\n <code>RuntimePermission("stopThread")</code> argument) is called in\n addition.\n Again, this may result in throwing a \n <code>SecurityException</code> (in the current thread). \n <p>\n If the argument <code>obj</code> is null, a \n <code>NullPointerException</code> is thrown (in the current thread). \n <p>\n The thread represented by this thread is forced to stop \n whatever it is doing abnormally and to throw the \n <code>Throwable</code> object <code>obj</code> as an exception. This \n is an unusual action to take; normally, the <code>stop</code> method \n that takes no arguments should be used. \n <p>\n It is permitted to stop a thread that has not yet been started. \n If the thread is eventually started, it immediately terminates. \n\n @param      obj   the Throwable object to be thrown.\n @exception  SecurityException  if the current thread cannot modify\n               this thread.\n @throws     NullPointerException if obj is <tt>null</tt>.\n @see        #interrupt()\n @see        #checkAccess()\n @see        #run()\n @see        #start()\n @see        #stop()\n @see        SecurityManager#checkAccess(Thread)\n @see        SecurityManager#checkPermission\n @deprecated This method is inherently unsafe.  See {@link #stop()}\n        for details.  An additional danger of this\n        method is that it may be used to generate exceptions that the\n        target thread is unprepared to handle (including checked\n        exceptions that the thread could not possibly throw, were it\n        not for this method).\n        For more information, see \n        <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why \n        are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.\n"
11746,method,java/lang/Thread/interrupt/," Interrupts this thread.\n \n <p> Unless the current thread is interrupting itself, which is\n always permitted, the {@link #checkAccess() checkAccess} method\n of this thread is invoked, which may cause a {@link\n SecurityException} to be thrown.\n\n <p> If this thread is blocked in an invocation of the {@link\n Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link\n Object#wait(long, int) wait(long, int)} methods of the {@link Object}\n class, or of the {@link #join()}, {@link #join(long)}, {@link\n #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)},\n methods of this class, then its interrupt status will be cleared and it\n will receive an {@link InterruptedException}.\n\n <p> If this thread is blocked in an I/O operation upon an {@link\n java.nio.channels.InterruptibleChannel </code>interruptible\n channel<code>} then the channel will be closed, the thread's interrupt\n status will be set, and the thread will receive a {@link\n java.nio.channels.ClosedByInterruptException}.\n\n <p> If this thread is blocked in a {@link java.nio.channels.Selector}\n then the thread's interrupt status will be set and it will return\n immediately from the selection operation, possibly with a non-zero\n value, just as if the selector's {@link\n java.nio.channels.Selector#wakeup wakeup} method were invoked.\n\n <p> If none of the previous conditions hold then this thread's interrupt\n status will be set. </p>\n\n <p> Interrupting a thread that is not alive need not have any effect.\n \n @throws  SecurityException\n          if the current thread cannot modify this thread\n\n @revised 6.0\n @spec JSR-51\n"
11748,method,java/lang/Thread/isInterrupted/," Tests whether this thread has been interrupted.  The <i>interrupted\n status</i> of the thread is unaffected by this method.\n\n <p>A thread interruption ignored because a thread was not alive \n at the time of the interrupt will be reflected by this method \n returning false.\n\n @return  <code>true</code> if this thread has been interrupted;\n          <code>false</code> otherwise.\n @see     #interrupted()\n @revised 6.0\n"
11749,method,java/lang/Thread/destroy/," Throws {@link NoSuchMethodError}.\n\n @deprecated This method was originally designed to destroy this\n     thread without any cleanup. Any monitors it held would have\n     remained locked. However, the method was never implemented.\n     If if were to be implemented, it would be deadlock-prone in\n     much the manner of {@link #suspend}. If the target thread held\n     a lock protecting a critical system resource when it was\n     destroyed, no thread could ever access this resource again.\n     If another thread ever attempted to lock this resource, deadlock\n     would result. Such deadlocks typically manifest themselves as\n     "frozen" processes. For more information, see\n     <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">\n     Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.\n @throws NoSuchMethodError always\n"
11750,method,java/lang/Thread/isAlive/," Tests if this thread is alive. A thread is alive if it has \n been started and has not yet died. \n\n @return  <code>true</code> if this thread is alive;\n          <code>false</code> otherwise.\n"
11751,method,java/lang/Thread/suspend/," Suspends this thread.\n <p>\n First, the <code>checkAccess</code> method of this thread is called \n with no arguments. This may result in throwing a \n <code>SecurityException </code>(in the current thread). \n <p>\n If the thread is alive, it is suspended and makes no further \n progress unless and until it is resumed. \n\n @exception  SecurityException  if the current thread cannot modify\n               this thread.\n @see #checkAccess\n @deprecated   This method has been deprecated, as it is\n   inherently deadlock-prone.  If the target thread holds a lock on the\n   monitor protecting a critical system resource when it is suspended, no\n   thread can access this resource until the target thread is resumed. If\n   the thread that would resume the target thread attempts to lock this\n   monitor prior to calling <code>resume</code>, deadlock results.  Such\n   deadlocks typically manifest themselves as "frozen" processes.\n   For more information, see \n   <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why \n   are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.\n"
11752,method,java/lang/Thread/resume/," Resumes a suspended thread.\n <p>\n First, the <code>checkAccess</code> method of this thread is called \n with no arguments. This may result in throwing a \n <code>SecurityException</code> (in the current thread). \n <p>\n If the thread is alive but suspended, it is resumed and is \n permitted to make progress in its execution. \n\n @exception  SecurityException  if the current thread cannot modify this\n               thread.\n @see        #checkAccess\n @see        #suspend()\n @deprecated This method exists solely for use with {@link #suspend},\n     which has been deprecated because it is deadlock-prone.\n     For more information, see \n     <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why \n     are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.\n"
11753,method,java/lang/Thread/setPriority/int," Changes the priority of this thread. \n <p>\n First the <code>checkAccess</code> method of this thread is called \n with no arguments. This may result in throwing a \n <code>SecurityException</code>. \n <p>\n Otherwise, the priority of this thread is set to the smaller of \n the specified <code>newPriority</code> and the maximum permitted \n priority of the thread's thread group. \n\n @param newPriority priority to set this thread to\n @exception  IllegalArgumentException  If the priority is not in the\n               range <code>MIN_PRIORITY</code> to\n               <code>MAX_PRIORITY</code>.\n @exception  SecurityException  if the current thread cannot modify\n               this thread.\n @see        #getPriority\n @see        #checkAccess()\n @see        #getThreadGroup()\n @see        #MAX_PRIORITY\n @see        #MIN_PRIORITY\n @see        ThreadGroup#getMaxPriority()\n"
11754,method,java/lang/Thread/getPriority/," Returns this thread's priority.\n\n @return  this thread's priority.\n @see     #setPriority\n"
11755,method,java/lang/Thread/setName/String," Changes the name of this thread to be equal to the argument \n <code>name</code>. \n <p>\n First the <code>checkAccess</code> method of this thread is called \n with no arguments. This may result in throwing a \n <code>SecurityException</code>. \n\n @param      name   the new name for this thread.\n @exception  SecurityException  if the current thread cannot modify this\n               thread.\n @see        #getName\n @see        #checkAccess()\n"
11756,method,java/lang/Thread/getName/," Returns this thread's name.\n\n @return  this thread's name.\n @see     #setName(String)\n"
11757,method,java/lang/Thread/getThreadGroup/," Returns the thread group to which this thread belongs. \n This method returns null if this thread has died\n (been stopped).\n\n @return  this thread's thread group.\n"
11758,method,java/lang/Thread/activeCount/," Returns the number of active threads in the current thread's thread\n group.\n\n @return  the number of active threads in the current thread's thread\n          group.\n"
11759,method,java/lang/Thread/enumerate/Thread[]," Copies into the specified array every active thread in \n the current thread's thread group and its subgroups. This method simply \n calls the <code>enumerate</code> method of the current thread's thread \n group with the array argument. \n <p>\n First, if there is a security manager, that <code>enumerate</code>\n method calls the security\n manager's <code>checkAccess</code> method \n with the thread group as its argument. This may result \n in throwing a <code>SecurityException</code>. \n\n @param tarray an array of Thread objects to copy to\n @return  the number of threads put into the array\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkAccess</code> method doesn't allow the operation.\n @see     ThreadGroup#enumerate(Thread[])\n @see     SecurityManager#checkAccess(ThreadGroup)\n"
11760,method,java/lang/Thread/countStackFrames/," Counts the number of stack frames in this thread. The thread must \n be suspended. \n\n @return     the number of stack frames in this thread.\n @exception  IllegalThreadStateException  if this thread is not\n             suspended.\n @deprecated The definition of this call depends on {@link #suspend},\n		   which is deprecated.  Further, the results of this call\n		   were never well-defined.\n"
11761,method,java/lang/Thread/join/long," Waits at most <code>millis</code> milliseconds for this thread to \n die. A timeout of <code>0</code> means to wait forever. \n\n @param      millis   the time to wait in milliseconds.\n @exception  InterruptedException if any thread has interrupted\n             the current thread.  The <i>interrupted status</i> of the\n             current thread is cleared when this exception is thrown.\n"
11763,method,java/lang/Thread/join/," Waits for this thread to die. \n\n @exception  InterruptedException if any thread has interrupted\n             the current thread.  The <i>interrupted status</i> of the\n             current thread is cleared when this exception is thrown.\n"
11766,method,java/lang/Thread/isDaemon/," Tests if this thread is a daemon thread.\n\n @return  <code>true</code> if this thread is a daemon thread;\n          <code>false</code> otherwise.\n @see     #setDaemon(boolean)\n"
11767,method,java/lang/Thread/checkAccess/," Determines if the currently running thread has permission to \n modify this thread. \n <p>\n If there is a security manager, its <code>checkAccess</code> method \n is called with this thread as its argument. This may result in \n throwing a <code>SecurityException</code>. \n\n @exception  SecurityException  if the current thread is not allowed to\n               access this thread.\n @see        SecurityManager#checkAccess(Thread)\n"
11768,method,java/lang/Thread/toString/," Returns a string representation of this thread, including the \n thread's name, priority, and thread group.\n\n @return  a string representation of this thread.\n"
11769,method,java/lang/Thread/getContextClassLoader/,"\n Returns the context ClassLoader for this Thread. The context\n ClassLoader is provided by the creator of the thread for use\n by code running in this thread when loading classes and resources.\n If not set, the default is the ClassLoader context of the parent\n Thread. The context ClassLoader of the primordial thread is\n typically set to the class loader used to load the application.\n\n <p>First, if there is a security manager, and the caller's class\n loader is not null and the caller's class loader is not the same as or\n an ancestor of the context class loader for the thread whose\n context class loader is being requested, then the security manager's\n <code>checkPermission</code> \n method is called with a \n <code>RuntimePermission("getClassLoader")</code> permission\n  to see if it's ok to get the context ClassLoader.. \n\n @return the context ClassLoader for this Thread\n\n @throws SecurityException\n        if a security manager exists and its \n        <code>checkPermission</code> method doesn't allow \n        getting the context ClassLoader.\n @see #setContextClassLoader\n @see SecurityManager#checkPermission\n @see RuntimePermission\n \n @since 1.2\n"
11770,method,java/lang/Thread/setContextClassLoader/ClassLoader,"\n Sets the context ClassLoader for this Thread. The context\n ClassLoader can be set when a thread is created, and allows\n the creator of the thread to provide the appropriate class loader\n to code running in the thread when loading classes and resources.\n\n <p>First, if there is a security manager, its <code>checkPermission</code> \n method is called with a \n <code>RuntimePermission("setContextClassLoader")</code> permission\n  to see if it's ok to set the context ClassLoader.. \n\n @param cl the context ClassLoader for this Thread\n \n @exception  SecurityException  if the current thread cannot set the \n context ClassLoader.\n @see #getContextClassLoader\n @see SecurityManager#checkPermission\n @see RuntimePermission\n \n @since 1.2 \n"
11771,method,java/lang/Thread/holdsLock/Object," Returns <tt>true</tt> if and only if the current thread holds the\n monitor lock on the specified object.\n\n <p>This method is designed to allow a program to assert that\n the current thread already holds a specified lock:\n <pre>\n     assert Thread.holdsLock(obj);\n </pre>\n\n @param  obj the object on which to test lock ownership\n @throws NullPointerException if obj is <tt>null</tt>\n @return <tt>true</tt> if the current thread holds the monitor lock on\n         the specified object.\n @since 1.4\n"
11772,method,java/lang/Thread/getStackTrace/," Returns an array of stack trace elements representing the stack dump\n of this thread.  This method will return a zero-length array if\n this thread has not started or has terminated. \n If the returned array is of non-zero length then the first element of \n the array represents the top of the stack, which is the most recent\n method invocation in the sequence.  The last element of the array\n represents the bottom of the stack, which is the least recent method\n invocation in the sequence.\n\n <p>If there is a security manager, and this thread is not \n the current thread, then the security manager's \n <tt>checkPermission</tt> method is called with a \n <tt>RuntimePermission("getStackTrace")</tt> permission\n to see if it's ok to get the stack trace. \n\n <p>Some virtual machines may, under some circumstances, omit one\n or more stack frames from the stack trace.  In the extreme case,\n a virtual machine that has no stack trace information concerning\n this thread is permitted to return a zero-length array from this\n method.  \n\n @return an array of <tt>StackTraceElement</tt>, \n each represents one stack frame.\n\n @throws SecurityException\n        if a security manager exists and its \n        <tt>checkPermission</tt> method doesn't allow \n        getting the stack trace of thread.\n @see SecurityManager#checkPermission\n @see RuntimePermission\n @see Throwable#getStackTrace\n\n @since 1.5\n"
11773,method,java/lang/Thread/getAllStackTraces/," Returns a map of stack traces for all live threads.\n The map keys are threads and each map value is an array of\n <tt>StackTraceElement</tt> that represents the stack dump\n of the corresponding <tt>Thread</tt>.\n The returned stack traces are in the format specified for\n the {@link #getStackTrace getStackTrace} method.\n\n <p>The threads may be executing while this method is called.\n The stack trace of each thread only represents a snapshot and\n each stack trace may be obtained at different time.  A zero-length\n array will be returned in the map value if the virtual machine has \n no stack trace information about a thread.\n\n <p>If there is a security manager, then the security manager's \n <tt>checkPermission</tt> method is called with a \n <tt>RuntimePermission("getStackTrace")</tt> permission as well as\n <tt>RuntimePermission("modifyThreadGroup")</tt> permission\n to see if it is ok to get the stack trace of all threads. \n\n @return a <tt>Map</tt> from <tt>Thread</tt> to an array of \n <tt>StackTraceElement</tt> that represents the stack trace of \n the corresponding thread.\n\n @throws SecurityException\n        if a security manager exists and its \n        <tt>checkPermission</tt> method doesn't allow \n        getting the stack trace of thread.\n @see #getStackTrace\n @see SecurityManager#checkPermission\n @see RuntimePermission\n @see Throwable#getStackTrace\n\n @since 1.5\n"
11774,method,java/lang/Thread/getId/," Returns the identifier of this Thread.  The thread ID is a positive\n <tt>long</tt> number generated when this thread was created.  \n The thread ID is unique and remains unchanged during its lifetime.  \n When a thread is terminated, this thread ID may be reused.\n\n @return this thread's ID.\n @since 1.5\n"
11775,method,java/lang/Thread/getState/," Returns the state of this thread.\n This method is designed for use in monitoring of the system state,\n not for synchronization control.\n \n @return this thread's state.\n @since 1.5\n"
11777,method,java/lang/Thread/getDefaultUncaughtExceptionHandler/," Returns the default handler invoked when a thread abruptly terminates\n due to an uncaught exception. If the returned value is <tt>null</tt>,\n there is no default.\n @since 1.5\n @see #setDefaultUncaughtExceptionHandler\n"
11778,method,java/lang/Thread/getUncaughtExceptionHandler/," Returns the handler invoked when this thread abruptly terminates\n due to an uncaught exception. If this thread has not had an\n uncaught exception handler explicitly set then this thread's\n <tt>ThreadGroup</tt> object is returned, unless this thread\n has terminated, in which case <tt>null</tt> is returned.\n @since 1.5\n"
11779,method,java/lang/Thread/setUncaughtExceptionHandler/UncaughtExceptionHandler," Set the handler invoked when this thread abruptly terminates\n due to an uncaught exception. \n <p>A thread can take full control of how it responds to uncaught\n exceptions by having its uncaught exception handler explicitly set.\n If no such handler is set then the thread's <tt>ThreadGroup</tt>\n object acts as its handler.\n @param eh the object to use as this thread's uncaught exception\n handler. If <tt>null</tt> then this thread has no explicit handler.\n @throws  SecurityException  if the current thread is not allowed to\n          modify this thread.\n @see #setDefaultUncaughtExceptionHandler\n @see ThreadGroup#uncaughtException\n @since 1.5\n"
11780,method,java/lang/Thread/Thread/," Allocates a new <code>Thread</code> object. This constructor has \n the same effect as <code>Thread(null, null,</code>\n <i>gname</i><code>)</code>, where <b><i>gname</i></b> is \n a newly generated name. Automatically generated names are of the \n form <code>"Thread-"+</code><i>n</i>, where <i>n</i> is an integer. \n\n @see     #Thread(ThreadGroup, Runnable, String)\n"
11781,method,java/lang/Thread/Thread/Runnable," Allocates a new <code>Thread</code> object. This constructor has \n the same effect as <code>Thread(null, target,</code>\n <i>gname</i><code>)</code>, where <i>gname</i> is \n a newly generated name. Automatically generated names are of the \n form <code>"Thread-"+</code><i>n</i>, where <i>n</i> is an integer. \n\n @param   target   the object whose <code>run</code> method is called.\n @see     #Thread(ThreadGroup, Runnable, String)\n"
11782,method,java/lang/Thread/Thread/ThreadGroup;Runnable," Allocates a new <code>Thread</code> object. This constructor has \n the same effect as <code>Thread(group, target,</code>\n <i>gname</i><code>)</code>, where <i>gname</i> is \n a newly generated name. Automatically generated names are of the \n form <code>"Thread-"+</code><i>n</i>, where <i>n</i> is an integer. \n\n @param      group    the thread group.\n @param      target   the object whose <code>run</code> method is called.\n @exception  SecurityException  if the current thread cannot create a\n             thread in the specified thread group.\n @see        #Thread(ThreadGroup, Runnable, String)\n"
11783,method,java/lang/Thread/Thread/String," Allocates a new <code>Thread</code> object. This constructor has \n the same effect as <code>Thread(null, null, name)</code>. \n\n @param   name   the name of the new thread.\n @see     #Thread(ThreadGroup, Runnable, String)\n"
11784,method,java/lang/Thread/Thread/ThreadGroup;String," Allocates a new <code>Thread</code> object. This constructor has \n the same effect as <code>Thread(group, null, name)</code> \n\n @param      group   the thread group.\n @param      name    the name of the new thread.\n @exception  SecurityException  if the current thread cannot create a\n               thread in the specified thread group.\n @see        #Thread(ThreadGroup, Runnable, String)\n"
11785,method,java/lang/Thread/Thread/Runnable;String," Allocates a new <code>Thread</code> object. This constructor has \n the same effect as <code>Thread(null, target, name)</code>. \n\n @param   target   the object whose <code>run</code> method is called.\n @param   name     the name of the new thread.\n @see     #Thread(ThreadGroup, Runnable, String)\n"
11786,method,java/lang/Thread/Thread/ThreadGroup;Runnable;String," Allocates a new <code>Thread</code> object so that it has \n <code>target</code> as its run object, has the specified \n <code>name</code> as its name, and belongs to the thread group \n referred to by <code>group</code>.\n <p>\n If <code>group</code> is <code>null</code> and there is a \n security manager, the group is determined by the security manager's \n <code>getThreadGroup</code> method. If <code>group</code> is \n <code>null</code> and there is not a security manager, or the\n security manager's <code>getThreadGroup</code> method returns \n <code>null</code>, the group is set to be the same ThreadGroup \n as the thread that is creating the new thread.\n \n <p>If there is a security manager, its <code>checkAccess</code> \n method is called with the ThreadGroup as its argument.\n <p>In addition, its <code>checkPermission</code>\n method is called with the\n <code>RuntimePermission("enableContextClassLoaderOverride")</code>\n permission when invoked directly or indirectly by the constructor\n of a subclass which overrides the <code>getContextClassLoader</code>\n or <code>setContextClassLoader</code> methods.\n This may result in a SecurityException.\n\n <p>\n If the <code>target</code> argument is not <code>null</code>, the \n <code>run</code> method of the <code>target</code> is called when \n this thread is started. If the target argument is \n <code>null</code>, this thread's <code>run</code> method is called \n when this thread is started. \n <p>\n The priority of the newly created thread is set equal to the \n priority of the thread creating it, that is, the currently running \n thread. The method <code>setPriority</code> may be used to \n change the priority to a new value. \n <p>\n The newly created thread is initially marked as being a daemon \n thread if and only if the thread creating it is currently marked \n as a daemon thread. The method <code>setDaemon </code> may be used \n to change whether or not a thread is a daemon. \n\n @param      group     the thread group.\n @param      target   the object whose <code>run</code> method is called.\n @param      name     the name of the new thread.\n @exception  SecurityException  if the current thread cannot create a\n               thread in the specified thread group or cannot\n               override the context class loader methods.\n @see        Runnable#run()\n @see        #run()\n @see        #setDaemon(boolean)\n @see        #setPriority(int)\n @see        ThreadGroup#checkAccess()\n @see        SecurityManager#checkAccess\n"
11788,field,java/lang/Thread/MIN_PRIORITY," The minimum priority that a thread can have. \n"
11789,field,java/lang/Thread/NORM_PRIORITY," The default priority that is assigned to a thread. \n"
11790,field,java/lang/Thread/MAX_PRIORITY," The maximum priority that a thread can have. \n"
11791,class,java/lang/Thread/State," A thread state.  A thread can be in one of the following states: \n <ul>\n <li>{@link #NEW}<br>\n     A thread that has not yet started is in this state.\n     </li>\n <li>{@link #RUNNABLE}<br>\n     A thread executing in the Java virtual machine is in this state. \n     </li>\n <li>{@link #BLOCKED}<br>\n     A thread that is blocked waiting for a monitor lock \n     is in this state. \n     </li>\n <li>{@link #WAITING}<br>\n     A thread that is waiting indefinitely for another thread to \n     perform a particular action is in this state. \n     </li>\n <li>{@link #TIMED_WAITING}<br>\n     A thread that is waiting for another thread to perform an action \n     for up to a specified waiting time is in this state. \n     </li>\n <li>{@link #TERMINATED}<br> \n     A thread that has exited is in this state.\n     </li>\n </ul>\n\n <p>\n A thread can be in only one state at a given point in time. \n These states are virtual machine states which do not reflect\n any operating system thread states.\n \n @since   1.5\n @see #getState\n"
11794,field,java/lang/Thread/State/NEW," Thread state for a thread which has not yet started.\n"
11795,field,java/lang/Thread/State/RUNNABLE," Thread state for a runnable thread.  A thread in the runnable\n state is executing in the Java virtual machine but it may\n be waiting for other resources from the operating system\n such as processor.\n"
11796,field,java/lang/Thread/State/BLOCKED," Thread state for a thread blocked waiting for a monitor lock.\n A thread in the blocked state is waiting for a monitor lock\n to enter a synchronized block/method or \n reenter a synchronized block/method after calling\n {@link Object#wait() Object.wait}.\n"
11797,field,java/lang/Thread/State/WAITING," Thread state for a waiting thread.\n A thread is in the waiting state due to calling one of the \n following methods:\n <ul>\n   <li>{@link Object#wait() Object.wait} with no timeout</li>\n   <li>{@link #join() Thread.join} with no timeout</li>\n   <li>{@link LockSupport#park() LockSupport.park}</li>\n </ul>\n \n <p>A thread in the waiting state is waiting for another thread to\n perform a particular action.  \n\n For example, a thread that has called <tt>Object.wait()</tt>\n on an object is waiting for another thread to call \n <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on \n that object. A thread that has called <tt>Thread.join()</tt> \n is waiting for a specified thread to terminate.\n"
11798,field,java/lang/Thread/State/TIMED_WAITING," Thread state for a waiting thread with a specified waiting time.\n A thread is in the timed waiting state due to calling one of \n the following methods with a specified positive waiting time:\n <ul>\n   <li>{@link #sleep Thread.sleep}</li>\n   <li>{@link Object#wait(long) Object.wait} with timeout</li>\n   <li>{@link #join(long) Thread.join} with timeout</li>\n   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li> \n   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>\n </ul>\n"
11799,field,java/lang/Thread/State/TERMINATED," Thread state for a terminated thread.\n The thread has completed execution.\n"
11801,method,java/lang/Thread/UncaughtExceptionHandler/uncaughtException/Thread;Throwable,"\n Method invoked when the given thread terminates due to the\n given uncaught exception.\n <p>Any exception thrown by this method will be ignored by the\n Java Virtual Machine.\n @param t the thread\n @param e the exception\n"
11802,class,java/lang/System," The <code>System</code> class contains several useful class fields\n and methods. It cannot be instantiated.\n\n <p>Among the facilities provided by the <code>System</code> class\n are standard input, standard output, and error output streams;\n access to externally defined properties and environment\n variables; a means of loading files and libraries; and a utility\n method for quickly copying a portion of an array.\n\n @author  unascribed\n @version 1.162, 04/01/09\n @since   JDK1.0\n"
11803,method,java/lang/System/setIn/InputStream," Reassigns the "standard" input stream.\n\n <p>First, if there is a security manager, its <code>checkPermission</code>\n method is called with a <code>RuntimePermission("setIO")</code> permission\n  to see if it's ok to reassign the "standard" input stream.\n <p>\n\n @param in the new standard input stream.\n\n @throws SecurityException\n        if a security manager exists and its\n        <code>checkPermission</code> method doesn't allow\n        reassigning of the standard input stream.\n\n @see SecurityManager#checkPermission\n @see java.lang.RuntimePermission\n\n @since   JDK1.1\n"
11804,method,java/lang/System/setOut/PrintStream," Reassigns the "standard" output stream.\n\n <p>First, if there is a security manager, its <code>checkPermission</code>\n method is called with a <code>RuntimePermission("setIO")</code> permission\n  to see if it's ok to reassign the "standard" output stream.\n\n @param out the new standard output stream\n\n @throws SecurityException\n        if a security manager exists and its\n        <code>checkPermission</code> method doesn't allow\n        reassigning of the standard output stream.\n\n @see SecurityManager#checkPermission\n @see java.lang.RuntimePermission\n\n @since   JDK1.1\n"
11805,method,java/lang/System/setErr/PrintStream," Reassigns the "standard" error output stream.\n\n <p>First, if there is a security manager, its <code>checkPermission</code>\n method is called with a <code>RuntimePermission("setIO")</code> permission\n  to see if it's ok to reassign the "standard" error output stream.\n\n @param err the new standard error output stream.\n\n @throws SecurityException\n        if a security manager exists and its\n        <code>checkPermission</code> method doesn't allow\n        reassigning of the standard error output stream.\n\n @see SecurityManager#checkPermission\n @see java.lang.RuntimePermission\n\n @since   JDK1.1\n"
11807,method,java/lang/System/inheritedChannel/,"\n Returns the channel inherited from the entity that created this\n Java virtual machine.\n\n <p> This method returns the channel obtained by invoking the\n {@link java.nio.channels.spi.SelectorProvider#inheritedChannel\n inheritedChannel} method of the system-wide default\n {@link java.nio.channels.spi.SelectorProvider} object. </p>\n\n <p> In addition to the network-oriented channels described in\n {@link java.nio.channels.spi.SelectorProvider#inheritedChannel\n inheritedChannel}, this method may return other kinds of\n channels in the future.\n\n @return	The inherited channel, if any, otherwise <tt>null</tt>.\n\n @throws	IOException\n		If an I/O error occurs\n\n @throws	SecurityException\n		If a security manager is present and it does not\n		permit access to the channel.\n\n @since 1.5\n"
11808,method,java/lang/System/setSecurityManager/SecurityManager," Sets the System security.\n\n <p> If there is a security manager already installed, this method first\n calls the security manager's <code>checkPermission</code> method\n with a <code>RuntimePermission("setSecurityManager")</code>\n permission to ensure it's ok to replace the existing\n security manager.\n This may result in throwing a <code>SecurityException</code>.\n\n <p> Otherwise, the argument is established as the current\n security manager. If the argument is <code>null</code> and no\n security manager has been established, then no action is taken and\n the method simply returns.\n\n @param      s   the security manager.\n @exception  SecurityException  if the security manager has already\n             been set and its <code>checkPermission</code> method\n             doesn't allow it to be replaced.\n @see #getSecurityManager\n @see SecurityManager#checkPermission\n @see java.lang.RuntimePermission\n"
11810,method,java/lang/System/currentTimeMillis/," Returns the current time in milliseconds.  Note that\n while the unit of time of the return value is a millisecond,\n the granularity of the value depends on the underlying\n operating system and may be larger.  For example, many\n operating systems measure time in units of tens of\n milliseconds.\n\n <p> See the description of the class <code>Date</code> for\n a discussion of slight discrepancies that may arise between\n "computer time" and coordinated universal time (UTC).\n\n @return  the difference, measured in milliseconds, between\n          the current time and midnight, January 1, 1970 UTC.\n @see     java.util.Date\n"
11811,method,java/lang/System/nanoTime/," Returns the current value of the most precise available system\n timer, in nanoseconds.\n\n <p>This method can only be used to measure elapsed time and is\n not related to any other notion of system or wall-clock time.\n The value returned represents nanoseconds since some fixed but\n arbitrary time (perhaps in the future, so values may be\n negative).  This method provides nanosecond precision, but not\n necessarily nanosecond accuracy. No guarantees are made about\n how frequently values change. Differences in successive calls\n that span greater than approximately 292 years (2<sup>63</sup>\n nanoseconds) will not accurately compute elapsed time due to\n numerical overflow.\n\n <p> For example, to measure how long some code takes to execute:\n <pre>\n   long startTime = System.nanoTime();\n   // ... the code being measured ...\n   long estimatedTime = System.nanoTime() - startTime;\n </pre>\n \n @return The current value of the system timer, in nanoseconds.\n @since 1.5\n"
11813,method,java/lang/System/identityHashCode/Object," Returns the same hash code for the given object as\n would be returned by the default method hashCode(),\n whether or not the given object's class overrides\n hashCode().\n The hash code for the null reference is zero.\n\n @param x object for which the hashCode is to be calculated\n @return  the hashCode\n @since   JDK1.1\n"
11814,method,java/lang/System/getProperties/," Determines the current system properties.\n <p>\n First, if there is a security manager, its\n <code>checkPropertiesAccess</code> method is called with no\n arguments. This may result in a security exception.\n <p>\n The current set of system properties for use by the \n {@link #getProperty(String)} method is returned as a \n <code>Properties</code> object. If there is no current set of \n system properties, a set of system properties is first created and \n initialized. This set of system properties always includes values \n for the following keys: \n <table summary="Shows property keys and associated values">\n <tr><th>Key</th>\n     <th>Description of Associated Value</th></tr>\n <tr><td><code>java.version</code></td>\n     <td>Java Runtime Environment version</td></tr>\n <tr><td><code>java.vendor</code></td>\n     <td>Java Runtime Environment vendor</td></tr\n <tr><td><code>java.vendor.url</code></td>\n     <td>Java vendor URL</td></tr>\n <tr><td><code>java.home</code></td>\n     <td>Java installation directory</td></tr>\n <tr><td><code>java.vm.specification.version</code></td>\n     <td>Java Virtual Machine specification version</td></tr>\n <tr><td><code>java.vm.specification.vendor</code></td>\n     <td>Java Virtual Machine specification vendor</td></tr>\n <tr><td><code>java.vm.specification.name</code></td>\n     <td>Java Virtual Machine specification name</td></tr>\n <tr><td><code>java.vm.version</code></td>\n     <td>Java Virtual Machine implementation version</td></tr>\n <tr><td><code>java.vm.vendor</code></td>\n     <td>Java Virtual Machine implementation vendor</td></tr>\n <tr><td><code>java.vm.name</code></td>\n     <td>Java Virtual Machine implementation name</td></tr>\n <tr><td><code>java.specification.version</code></td>\n     <td>Java Runtime Environment specification  version</td></tr>\n <tr><td><code>java.specification.vendor</code></td>\n     <td>Java Runtime Environment specification  vendor</td></tr>\n <tr><td><code>java.specification.name</code></td>\n     <td>Java Runtime Environment specification  name</td></tr>\n <tr><td><code>java.class.version</code></td>\n     <td>Java class format version number</td></tr>\n <tr><td><code>java.class.path</code></td>\n     <td>Java class path</td></tr>\n <tr><td><code>java.library.path</code></td>\n     <td>List of paths to search when loading libraries</td></tr>\n <tr><td><code>java.io.tmpdir</code></td>\n     <td>Default temp file path</td></tr>\n <tr><td><code>java.compiler</code></td>\n     <td>Name of JIT compiler to use</td></tr>\n <tr><td><code>java.ext.dirs</code></td>\n     <td>Path of extension directory or directories</td></tr>\n <tr><td><code>os.name</code></td>\n     <td>Operating system name</td></tr>\n <tr><td><code>os.arch</code></td>\n     <td>Operating system architecture</td></tr>\n <tr><td><code>os.version</code></td>\n     <td>Operating system version</td></tr>\n <tr><td><code>file.separator</code></td>\n     <td>File separator ("/" on UNIX)</td></tr>\n <tr><td><code>path.separator</code></td>\n     <td>Path separator (":" on UNIX)</td></tr>\n <tr><td><code>line.separator</code></td>\n     <td>Line separator ("\n" on UNIX)</td></tr>\n <tr><td><code>user.name</code></td>\n     <td>User's account name</td></tr>\n <tr><td><code>user.home</code></td>\n     <td>User's home directory</td></tr>\n <tr><td><code>user.dir</code></td>\n     <td>User's current working directory</td></tr>\n </table>\n <p>\n Multiple paths in a system property value are separated by the path\n separator character of the platform.\n <p>\n Note that even if the security manager does not permit the\n <code>getProperties</code> operation, it may choose to permit the\n {@link #getProperty(String)} operation.\n\n @return     the system properties\n @exception  SecurityException  if a security manager exists and its\n             <code>checkPropertiesAccess</code> method doesn't allow access\n              to the system properties.\n @see        #setProperties\n @see        java.lang.SecurityException\n @see        java.lang.SecurityManager#checkPropertiesAccess()\n @see        java.util.Properties\n"
11815,method,java/lang/System/setProperties/Properties," Sets the system properties to the <code>Properties</code>\n argument.\n <p>\n First, if there is a security manager, its\n <code>checkPropertiesAccess</code> method is called with no\n arguments. This may result in a security exception.\n <p>\n The argument becomes the current set of system properties for use\n by the {@link #getProperty(String)} method. If the argument is\n <code>null</code>, then the current set of system properties is\n forgotten.\n\n @param      props   the new system properties.\n @exception  SecurityException  if a security manager exists and its\n             <code>checkPropertiesAccess</code> method doesn't allow access\n              to the system properties.\n @see        #getProperties\n @see        java.util.Properties\n @see        java.lang.SecurityException\n @see        java.lang.SecurityManager#checkPropertiesAccess()\n"
11816,method,java/lang/System/getProperty/String," Gets the system property indicated by the specified key.\n <p>\n First, if there is a security manager, its\n <code>checkPropertyAccess</code> method is called with the key as\n its argument. This may result in a SecurityException.\n <p>\n If there is no current set of system properties, a set of system\n properties is first created and initialized in the same manner as\n for the <code>getProperties</code> method.\n\n @param      key   the name of the system property.\n @return     the string value of the system property,\n             or <code>null</code> if there is no property with that key.\n\n @exception  SecurityException  if a security manager exists and its\n             <code>checkPropertyAccess</code> method doesn't allow\n              access to the specified system property.\n @exception  NullPointerException if <code>key</code> is\n             <code>null</code>.\n @exception  IllegalArgumentException if <code>key</code> is empty.\n @see        #setProperty\n @see        java.lang.SecurityException\n @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n @see        java.lang.System#getProperties()\n"
11817,method,java/lang/System/getProperty/String;String," Gets the system property indicated by the specified key.\n <p>\n First, if there is a security manager, its\n <code>checkPropertyAccess</code> method is called with the\n <code>key</code> as its argument.\n <p>\n If there is no current set of system properties, a set of system\n properties is first created and initialized in the same manner as\n for the <code>getProperties</code> method.\n\n @param      key   the name of the system property.\n @param      def   a default value.\n @return     the string value of the system property,\n             or the default value if there is no property with that key.\n\n @exception  SecurityException  if a security manager exists and its\n             <code>checkPropertyAccess</code> method doesn't allow\n             access to the specified system property.\n @exception  NullPointerException if <code>key</code> is\n             <code>null</code>.\n @exception  IllegalArgumentException if <code>key</code> is empty.\n @see        #setProperty\n @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n @see        java.lang.System#getProperties()\n"
11818,method,java/lang/System/setProperty/String;String," Sets the system property indicated by the specified key.\n <p>\n First, if a security manager exists, its\n <code>SecurityManager.checkPermission</code> method\n is called with a <code>PropertyPermission(key, "write")</code>\n permission. This may result in a SecurityException being thrown.\n If no exception is thrown, the specified property is set to the given\n value.\n <p>\n\n @param      key   the name of the system property.\n @param      value the value of the system property.\n @return     the previous value of the system property,\n             or <code>null</code> if it did not have one.\n\n @exception  SecurityException  if a security manager exists and its\n             <code>checkPermission</code> method doesn't allow\n             setting of the specified property.\n @exception  NullPointerException if <code>key</code> or \n             <code>value</code> is <code>null</code>.\n @exception  IllegalArgumentException if <code>key</code> is empty.\n @see        #getProperty\n @see        java.lang.System#getProperty(java.lang.String)\n @see        java.lang.System#getProperty(java.lang.String, java.lang.String)\n @see        java.util.PropertyPermission\n @see        SecurityManager#checkPermission\n @since      1.2\n"
11819,method,java/lang/System/clearProperty/String," Removes the system property indicated by the specified key. \n <p>\n First, if a security manager exists, its \n <code>SecurityManager.checkPermission</code> method\n is called with a <code>PropertyPermission(key, "write")</code>\n permission. This may result in a SecurityException being thrown.\n If no exception is thrown, the specified property is removed.\n <p>\n\n @param      key   the name of the system property to be removed. \n @return     the previous string value of the system property,\n             or <code>null</code> if there was no property with that key.\n\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkPropertyAccess</code> method doesn't allow\n              access to the specified system property.\n @exception  NullPointerException if <code>key</code> is\n             <code>null</code>.\n @exception  IllegalArgumentException if <code>key</code> is empty.\n @see        #getProperty\n @see        #setProperty\n @see        java.util.Properties\n @see        java.lang.SecurityException\n @see        java.lang.SecurityManager#checkPropertiesAccess()\n @since 1.5\n"
11822,method,java/lang/System/exit/int," Terminates the currently running Java Virtual Machine. The\n argument serves as a status code; by convention, a nonzero status\n code indicates abnormal termination.\n <p>\n This method calls the <code>exit</code> method in class\n <code>Runtime</code>. This method never returns normally.\n <p>\n The call <code>System.exit(n)</code> is effectively equivalent to\n the call:\n <blockquote><pre>\n Runtime.getRuntime().exit(n)\n </pre></blockquote>\n\n @param      status   exit status.\n @throws  SecurityException\n        if a security manager exists and its <code>checkExit</code>\n        method doesn't allow exit with the specified status.\n @see        java.lang.Runtime#exit(int)\n"
11823,method,java/lang/System/gc/," Runs the garbage collector.\n <p>\n Calling the <code>gc</code> method suggests that the Java Virtual\n Machine expend effort toward recycling unused objects in order to\n make the memory they currently occupy available for quick reuse.\n When control returns from the method call, the Java Virtual\n Machine has made a best effort to reclaim space from all discarded\n objects.\n <p>\n The call <code>System.gc()</code> is effectively equivalent to the\n call:\n <blockquote><pre>\n Runtime.getRuntime().gc()\n </pre></blockquote>\n\n @see     java.lang.Runtime#gc()\n"
11824,method,java/lang/System/runFinalization/," Runs the finalization methods of any objects pending finalization.\n <p>\n Calling this method suggests that the Java Virtual Machine expend\n effort toward running the <code>finalize</code> methods of objects\n that have been found to be discarded but whose <code>finalize</code>\n methods have not yet been run. When control returns from the\n method call, the Java Virtual Machine has made a best effort to\n complete all outstanding finalizations.\n <p>\n The call <code>System.runFinalization()</code> is effectively\n equivalent to the call:\n <blockquote><pre>\n Runtime.getRuntime().runFinalization()\n </pre></blockquote>\n\n @see     java.lang.Runtime#runFinalization()\n"
11825,method,java/lang/System/runFinalizersOnExit/boolean," Enable or disable finalization on exit; doing so specifies that the\n finalizers of all objects that have finalizers that have not yet been\n automatically invoked are to be run before the Java runtime exits.\n By default, finalization on exit is disabled.\n\n <p>If there is a security manager,\n its <code>checkExit</code> method is first called\n with 0 as its argument to ensure the exit is allowed.\n This could result in a SecurityException.\n\n @deprecated  This method is inherently unsafe.  It may result in\n 	    finalizers being called on live objects while other threads are\n      concurrently manipulating those objects, resulting in erratic\n	    behavior or deadlock.\n @param value indicating enabling or disabling of finalization\n @throws  SecurityException\n        if a security manager exists and its <code>checkExit</code>\n        method doesn't allow the exit.\n\n @see     java.lang.Runtime#exit(int)\n @see     java.lang.Runtime#gc()\n @see     java.lang.SecurityManager#checkExit(int)\n @since   JDK1.1\n"
11827,method,java/lang/System/loadLibrary/String," Loads the system library specified by the <code>libname</code>\n argument. The manner in which a library name is mapped to the\n actual system library is system dependent.\n <p>\n The call <code>System.loadLibrary(name)</code> is effectively\n equivalent to the call\n <blockquote><pre>\n Runtime.getRuntime().loadLibrary(name)\n </pre></blockquote>\n\n @param      libname   the name of the library.\n @exception  SecurityException  if a security manager exists and its\n             <code>checkLink</code> method doesn't allow\n             loading of the specified dynamic library\n @exception  UnsatisfiedLinkError  if the library does not exist.\n @exception  NullPointerException if <code>libname</code> is\n             <code>null</code>\n @see        java.lang.Runtime#loadLibrary(java.lang.String)\n @see        java.lang.SecurityManager#checkLink(java.lang.String)\n"
11831,field,java/lang/System/err," The "standard" error output stream. This stream is already\n open and ready to accept output data.\n <p>\n Typically this stream corresponds to display output or another\n output destination specified by the host environment or user. By\n convention, this output stream is used to display error messages\n or other information that should come to the immediate attention\n of a user even if the principal output stream, the value of the\n variable <code>out</code>, has been redirected to a file or other\n destination that is typically not continuously monitored.\n"
11841,method,java/lang/StringBuilder/append/StringBuffer," Appends the specified <tt>StringBuffer</tt> to this sequence.\n <p>\n The characters of the <tt>StringBuffer</tt> argument are appended, \n in order, to this sequence, increasing the \n length of this sequence by the length of the argument. \n If <tt>sb</tt> is <tt>null</tt>, then the four characters \n <tt>"null"</tt> are appended to this sequence.\n <p>\n Let <i>n</i> be the length of this character sequence just prior to \n execution of the <tt>append</tt> method. Then the character at index \n <i>k</i> in the new character sequence is equal to the character at \n index <i>k</i> in the old character sequence, if <i>k</i> is less than \n <i>n</i>; otherwise, it is equal to the character at index <i>k-n</i> \n in the argument <code>sb</code>.\n\n @param   sb   the <tt>StringBuffer</tt> to append.\n @return  a reference to this object.\n"
11842,method,java/lang/StringBuilder/append/CharSequence," @throws IndexOutOfBoundsException {@inheritDoc}\n"
11843,method,java/lang/StringBuilder/append/CharSequence;int;int," @throws     IndexOutOfBoundsException {@inheritDoc}\n"
11853,method,java/lang/StringBuilder/delete/int;int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n"
11854,method,java/lang/StringBuilder/deleteCharAt/int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n"
11855,method,java/lang/StringBuilder/replace/int;int;String," @throws StringIndexOutOfBoundsException {@inheritDoc}\n"
11856,method,java/lang/StringBuilder/insert/int;char[];int;int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n"
11857,method,java/lang/StringBuilder/insert/int;Object," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(java.lang.Object)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11858,method,java/lang/StringBuilder/insert/int;String," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        #length()\n"
11859,method,java/lang/StringBuilder/insert/int;char[]," @throws StringIndexOutOfBoundsException {@inheritDoc}\n"
11860,method,java/lang/StringBuilder/insert/int;CharSequence," @throws IndexOutOfBoundsException {@inheritDoc}\n"
11861,method,java/lang/StringBuilder/insert/int;CharSequence;int;int," @throws IndexOutOfBoundsException {@inheritDoc}\n"
11862,method,java/lang/StringBuilder/insert/int;boolean," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(boolean)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11863,method,java/lang/StringBuilder/insert/int;char," @throws IndexOutOfBoundsException {@inheritDoc}\n @see        #length()\n"
11864,method,java/lang/StringBuilder/insert/int;int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(int)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11865,method,java/lang/StringBuilder/insert/int;long," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(long)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11866,method,java/lang/StringBuilder/insert/int;float," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(float)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11867,method,java/lang/StringBuilder/insert/int;double," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(double)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11868,method,java/lang/StringBuilder/indexOf/String," @throws NullPointerException {@inheritDoc}\n"
11869,method,java/lang/StringBuilder/indexOf/String;int," @throws NullPointerException {@inheritDoc}\n"
11870,method,java/lang/StringBuilder/lastIndexOf/String," @throws NullPointerException {@inheritDoc}\n"
11871,method,java/lang/StringBuilder/lastIndexOf/String;int," @throws NullPointerException {@inheritDoc}\n"
11883,method,java/lang/StringBuffer/setLength/int," @throws IndexOutOfBoundsException {@inheritDoc}\n @see        #length()\n"
11884,method,java/lang/StringBuffer/charAt/int," @throws IndexOutOfBoundsException {@inheritDoc}\n @see        #length()\n"
11889,method,java/lang/StringBuffer/getChars/int;int;char[];int," @throws NullPointerException {@inheritDoc}\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
11890,method,java/lang/StringBuffer/setCharAt/int;char," @throws IndexOutOfBoundsException {@inheritDoc}\n @see        #length()\n"
11893,method,java/lang/StringBuffer/append/StringBuffer," Appends the specified <tt>StringBuffer</tt> to this sequence.\n <p>\n The characters of the <tt>StringBuffer</tt> argument are appended, \n in order, to the contents of this <tt>StringBuffer</tt>, increasing the \n length of this <tt>StringBuffer</tt> by the length of the argument. \n If <tt>sb</tt> is <tt>null</tt>, then the four characters \n <tt>"null"</tt> are appended to this <tt>StringBuffer</tt>.\n <p>\n Let <i>n</i> be the length of the old character sequence, the one \n contained in the <tt>StringBuffer</tt> just prior to execution of the \n <tt>append</tt> method. Then the character at index <i>k</i> in \n the new character sequence is equal to the character at index <i>k</i> \n in the old character sequence, if <i>k</i> is less than <i>n</i>; \n otherwise, it is equal to the character at index <i>k-n</i> in the \n argument <code>sb</code>.\n <p>\n This method synchronizes on <code>this</code> (the destination) \n object but does not synchronize on the source (<code>sb</code>).\n\n @param   sb   the <tt>StringBuffer</tt> to append.\n @return  a reference to this object.\n @since 1.4\n"
11894,method,java/lang/StringBuffer/append/CharSequence," Appends the specified <code>CharSequence</code> to this\n sequence.\n <p>\n The characters of the <code>CharSequence</code> argument are appended, \n in order, increasing the length of this sequence by the length of the \n argument.\n\n <p>The result of this method is exactly the same as if it were an\n invocation of this.append(s, 0, s.length());\n\n <p>This method synchronizes on this (the destination) \n object but does not synchronize on the source (<code>s</code>).\n\n <p>If <code>s</code> is <code>null</code>, then the four characters \n <code>"null"</code> are appended.\n\n @param   s the <code>CharSequence</code> to append.\n @return  a reference to this object.\n @since 1.5\n"
11895,method,java/lang/StringBuffer/append/CharSequence;int;int," @throws IndexOutOfBoundsException {@inheritDoc}\n @since      1.5\n"
11905,method,java/lang/StringBuffer/delete/int;int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @since      1.2\n"
11906,method,java/lang/StringBuffer/deleteCharAt/int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @since      1.2\n"
11907,method,java/lang/StringBuffer/replace/int;int;String," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @since      1.2\n"
11908,method,java/lang/StringBuffer/substring/int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @since      1.2\n"
11909,method,java/lang/StringBuffer/subSequence/int;int," @throws IndexOutOfBoundsException {@inheritDoc}\n @since      1.4\n"
11910,method,java/lang/StringBuffer/substring/int;int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @since      1.2\n"
11911,method,java/lang/StringBuffer/insert/int;char[];int;int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @since      1.2\n"
11912,method,java/lang/StringBuffer/insert/int;Object," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(java.lang.Object)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11913,method,java/lang/StringBuffer/insert/int;String," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        #length()\n"
11914,method,java/lang/StringBuffer/insert/int;char[]," @throws StringIndexOutOfBoundsException {@inheritDoc}\n"
11915,method,java/lang/StringBuffer/insert/int;CharSequence," @throws IndexOutOfBoundsException {@inheritDoc}\n @since      1.5\n"
11916,method,java/lang/StringBuffer/insert/int;CharSequence;int;int," @throws IndexOutOfBoundsException {@inheritDoc}\n @since      1.5\n"
11917,method,java/lang/StringBuffer/insert/int;boolean," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(boolean)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11918,method,java/lang/StringBuffer/insert/int;char," @throws IndexOutOfBoundsException {@inheritDoc}\n @see        #length()\n"
11919,method,java/lang/StringBuffer/insert/int;int," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(int)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11920,method,java/lang/StringBuffer/insert/int;long," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(long)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11921,method,java/lang/StringBuffer/insert/int;float," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(float)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11922,method,java/lang/StringBuffer/insert/int;double," @throws StringIndexOutOfBoundsException {@inheritDoc}\n @see        java.lang.String#valueOf(double)\n @see        #insert(int, java.lang.String)\n @see        #length()\n"
11923,method,java/lang/StringBuffer/indexOf/String," @throws NullPointerException {@inheritDoc}\n @since      1.4\n"
11924,method,java/lang/StringBuffer/indexOf/String;int," @throws NullPointerException {@inheritDoc}\n @since      1.4\n"
11925,method,java/lang/StringBuffer/lastIndexOf/String," @throws NullPointerException {@inheritDoc}\n @since      1.4\n"
11926,method,java/lang/StringBuffer/lastIndexOf/String;int," @throws NullPointerException {@inheritDoc}\n @since      1.4\n"
11933,class,java/lang/String," The <code>String</code> class represents character strings. All\n string literals in Java programs, such as <code>"abc"</code>, are\n implemented as instances of this class.\n <p>\n Strings are constant; their values cannot be changed after they\n are created. String buffers support mutable strings.\n Because String objects are immutable they can be shared. For example:\n <p><blockquote><pre>\n     String str = "abc";\n </pre></blockquote><p>\n is equivalent to:\n <p><blockquote><pre>\n     char data[] = {'a', 'b', 'c'};\n     String str = new String(data);\n </pre></blockquote><p>\n Here are some more examples of how strings can be used:\n <p><blockquote><pre>\n     System.out.println("abc");\n     String cde = "cde";\n     System.out.println("abc" + cde);\n     String c = "abc".substring(2,3);\n     String d = cde.substring(1, 2);\n </pre></blockquote>\n <p>\n The class <code>String</code> includes methods for examining\n individual characters of the sequence, for comparing strings, for\n searching strings, for extracting substrings, and for creating a\n copy of a string with all characters translated to uppercase or to\n lowercase. Case mapping is based on the Unicode Standard version\n specified by the {@link java.lang.Character Character} class.\n <p>\n The Java language provides special support for the string\n concatenation operator (&nbsp;+&nbsp;), and for conversion of\n other objects to strings. String concatenation is implemented\n through the <code>StringBuilder</code>(or <code>StringBuffer</code>)\n class and its <code>append</code> method.\n String conversions are implemented through the method\n <code>toString</code>, defined by <code>Object</code> and\n inherited by all classes in Java. For additional information on\n string concatenation and conversion, see Gosling, Joy, and Steele,\n <i>The Java Language Specification</i>.\n\n <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor\n or method in this class will cause a {@link NullPointerException} to be\n thrown.\n\n <p>A <code>String</code> represents a string in the UTF-16 format\n in which <em>supplementary characters</em> are represented by <em>surrogate\n pairs</em> (see the section <a href="Character.html#unicode">Unicode\n Character Representations</a> in the <code>Character</code> class for\n more information).\n Index values refer to <code>char</code> code units, so a supplementary\n character uses two positions in a <code>String</code>.\n <p>The <code>String</code> class provides methods for dealing with\n Unicode code points (i.e., characters), in addition to those for\n dealing with Unicode code units (i.e., <code>char</code> values).\n\n @author  Lee Boynton\n @author  Arthur van Hoff\n @version 1.207, 03/23/10\n @see     java.lang.Object#toString()\n @see     java.lang.StringBuffer\n @see     java.lang.StringBuilder\n @see     java.nio.charset.Charset\n @since   JDK1.0\n"
11935,method,java/lang/String/isEmpty/," Returns <tt>true</tt> if, and only if, {@link #length()} is <tt>0</tt>.\n\n @return <tt>true</tt> if {@link #length()} is <tt>0</tt>, otherwise\n <tt>false</tt>\n\n @since 1.6\n"
11938,method,java/lang/String/codePointBefore/int," Returns the character (Unicode code point) before the specified\n index. The index refers to <code>char</code> values\n (Unicode code units) and ranges from <code>1</code> to {@link\n CharSequence#length() length}.\n\n <p> If the <code>char</code> value at <code>(index - 1)</code>\n is in the low-surrogate range, <code>(index - 2)</code> is not\n negative, and the <code>char</code> value at <code>(index -\n 2)</code> is in the high-surrogate range, then the\n supplementary code point value of the surrogate pair is\n returned. If the <code>char</code> value at <code>index -\n 1</code> is an unpaired low-surrogate or a high-surrogate, the\n surrogate value is returned.\n\n @param     index the index following the code point that should be returned\n @return    the Unicode code point value before the given index.\n @exception IndexOutOfBoundsException if the <code>index</code>\n            argument is less than 1 or greater than the length\n            of this string.\n @since     1.5\n"
11939,method,java/lang/String/codePointCount/int;int," Returns the number of Unicode code points in the specified text\n range of this <code>String</code>. The text range begins at the\n specified <code>beginIndex</code> and extends to the\n <code>char</code> at index <code>endIndex - 1</code>. Thus the\n length (in <code>char</code>s) of the text range is\n <code>endIndex-beginIndex</code>. Unpaired surrogates within\n the text range count as one code point each.\n\n @param beginIndex the index to the first <code>char</code> of\n the text range.\n @param endIndex the index after the last <code>char</code> of\n the text range.\n @return the number of Unicode code points in the specified text\n range\n @exception IndexOutOfBoundsException if the\n <code>beginIndex</code> is negative, or <code>endIndex</code>\n is larger than the length of this <code>String</code>, or\n <code>beginIndex</code> is larger than <code>endIndex</code>.\n @since  1.5\n"
11940,method,java/lang/String/offsetByCodePoints/int;int," Returns the index within this <code>String</code> that is\n offset from the given <code>index</code> by\n <code>codePointOffset</code> code points. Unpaired surrogates\n within the text range given by <code>index</code> and\n <code>codePointOffset</code> count as one code point each.\n\n @param index the index to be offset\n @param codePointOffset the offset in code points\n @return the index within this <code>String</code>\n @exception IndexOutOfBoundsException if <code>index</code>\n   is negative or larger then the length of this\n   <code>String</code>, or if <code>codePointOffset</code> is positive\n   and the substring starting with <code>index</code> has fewer\n   than <code>codePointOffset</code> code points,\n   or if <code>codePointOffset</code> is negative and the substring\n   before <code>index</code> has fewer than the absolute value\n   of <code>codePointOffset</code> code points.\n @since 1.5\n"
11941,method,java/lang/String/getChars/int;int;char[];int," Copies characters from this string into the destination character\n array.\n <p>\n The first character to be copied is at index <code>srcBegin</code>;\n the last character to be copied is at index <code>srcEnd-1</code>\n (thus the total number of characters to be copied is\n <code>srcEnd-srcBegin</code>). The characters are copied into the\n subarray of <code>dst</code> starting at index <code>dstBegin</code>\n and ending at index:\n <p><blockquote><pre>\n     dstbegin + (srcEnd-srcBegin) - 1\n </pre></blockquote>\n\n @param      srcBegin   index of the first character in the string\n                        to copy.\n @param      srcEnd     index after the last character in the string\n                        to copy.\n @param      dst        the destination array.\n @param      dstBegin   the start offset in the destination array.\n @exception IndexOutOfBoundsException If any of the following\n            is true:\n            <ul><li><code>srcBegin</code> is negative.\n            <li><code>srcBegin</code> is greater than <code>srcEnd</code>\n            <li><code>srcEnd</code> is greater than the length of this\n                string\n            <li><code>dstBegin</code> is negative\n            <li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than\n                <code>dst.length</code></ul>\n"
11942,method,java/lang/String/getBytes/int;int;byte[];int," Copies characters from this string into the destination byte array. Each\n byte receives the 8 low-order bits of the corresponding character. The\n eight high-order bits of each character are not copied and do not\n participate in the transfer in any way.\n\n <p> The first character to be copied is at index {@code srcBegin}; the\n last character to be copied is at index {@code srcEnd-1}.  The total\n number of characters to be copied is {@code srcEnd-srcBegin}. The\n characters, converted to bytes, are copied into the subarray of {@code\n dst} starting at index {@code dstBegin} and ending at index:\n\n <blockquote><pre>\n     dstbegin + (srcEnd-srcBegin) - 1\n </pre></blockquote>\n\n @deprecated  This method does not properly convert characters into\n bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the\n {@link #getBytes()} method, which uses the platform's default charset.\n\n @param  srcBegin\n         Index of the first character in the string to copy\n\n @param  srcEnd\n         Index after the last character in the string to copy\n\n @param  dst\n         The destination array\n\n @param  dstBegin\n         The start offset in the destination array\n\n @throws  IndexOutOfBoundsException\n          If any of the following is true:\n          <ul>\n            <li> {@code srcBegin} is negative\n            <li> {@code srcBegin} is greater than {@code srcEnd}\n            <li> {@code srcEnd} is greater than the length of this String\n            <li> {@code dstBegin} is negative\n            <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n                 dst.length}\n          </ul>\n"
11946,method,java/lang/String/equals/Object," Compares this string to the specified object.  The result is {@code\n true} if and only if the argument is not {@code null} and is a {@code\n String} object that represents the same sequence of characters as this\n object.\n\n @param  anObject\n         The object to compare this {@code String} against\n\n @return  {@code true} if the given object represents a {@code String}\n          equivalent to this string, {@code false} otherwise\n\n @see  #compareTo(String)\n @see  #equalsIgnoreCase(String)\n"
11947,method,java/lang/String/contentEquals/StringBuffer," Compares this string to the specified {@code StringBuffer}.  The result\n is {@code true} if and only if this {@code String} represents the same\n sequence of characters as the specified {@code StringBuffer}.\n\n @param  sb\n         The {@code StringBuffer} to compare this {@code String} against\n\n @return  {@code true} if this {@code String} represents the same\n          sequence of characters as the specified {@code StringBuffer},\n          {@code false} otherwise\n\n @since  1.4\n"
11948,method,java/lang/String/contentEquals/CharSequence," Compares this string to the specified {@code CharSequence}.  The result\n is {@code true} if and only if this {@code String} represents the same\n sequence of char values as the specified sequence.\n\n @param  cs\n         The sequence to compare this {@code String} against\n\n @return  {@code true} if this {@code String} represents the same\n          sequence of char values as the specified sequence, {@code\n          false} otherwise\n\n @since  1.5\n"
11951,method,java/lang/String/compareToIgnoreCase/String," Compares two strings lexicographically, ignoring case\n differences. This method returns an integer whose sign is that of\n calling <code>compareTo</code> with normalized versions of the strings\n where case differences have been eliminated by calling\n <code>Character.toLowerCase(Character.toUpperCase(character))</code> on\n each character.\n <p>\n Note that this method does <em>not</em> take locale into account,\n and will result in an unsatisfactory ordering for certain locales.\n The java.text package provides <em>collators</em> to allow\n locale-sensitive ordering.\n\n @param   str   the <code>String</code> to be compared.\n @return  a negative integer, zero, or a positive integer as the\n		specified String is greater than, equal to, or less\n		than this String, ignoring case considerations.\n @see     java.text.Collator#compare(String, String)\n @since   1.2\n"
11952,method,java/lang/String/regionMatches/int;String;int;int," Tests if two string regions are equal.\n <p>\n A substring of this <tt>String</tt> object is compared to a substring\n of the argument other. The result is true if these substrings\n represent identical character sequences. The substring of this\n <tt>String</tt> object to be compared begins at index <tt>toffset</tt>\n and has length <tt>len</tt>. The substring of other to be compared\n begins at index <tt>ooffset</tt> and has length <tt>len</tt>. The\n result is <tt>false</tt> if and only if at least one of the following\n is true:\n <ul><li><tt>toffset</tt> is negative.\n <li><tt>ooffset</tt> is negative.\n <li><tt>toffset+len</tt> is greater than the length of this\n <tt>String</tt> object.\n <li><tt>ooffset+len</tt> is greater than the length of the other\n argument.\n <li>There is some nonnegative integer <i>k</i> less than <tt>len</tt>\n such that:\n <tt>this.charAt(toffset+<i>k</i>)&nbsp;!=&nbsp;other.charAt(ooffset+<i>k</i>)</tt>\n </ul>\n\n @param   toffset   the starting offset of the subregion in this string.\n @param   other     the string argument.\n @param   ooffset   the starting offset of the subregion in the string\n                    argument.\n @param   len       the number of characters to compare.\n @return  <code>true</code> if the specified subregion of this string\n          exactly matches the specified subregion of the string argument;\n          <code>false</code> otherwise.\n"
11953,method,java/lang/String/regionMatches/boolean;int;String;int;int," Tests if two string regions are equal.\n <p>\n A substring of this <tt>String</tt> object is compared to a substring\n of the argument <tt>other</tt>. The result is <tt>true</tt> if these\n substrings represent character sequences that are the same, ignoring\n case if and only if <tt>ignoreCase</tt> is true. The substring of\n this <tt>String</tt> object to be compared begins at index\n <tt>toffset</tt> and has length <tt>len</tt>. The substring of\n <tt>other</tt> to be compared begins at index <tt>ooffset</tt> and\n has length <tt>len</tt>. The result is <tt>false</tt> if and only if\n at least one of the following is true:\n <ul><li><tt>toffset</tt> is negative.\n <li><tt>ooffset</tt> is negative.\n <li><tt>toffset+len</tt> is greater than the length of this\n <tt>String</tt> object.\n <li><tt>ooffset+len</tt> is greater than the length of the other\n argument.\n <li><tt>ignoreCase</tt> is <tt>false</tt> and there is some nonnegative\n integer <i>k</i> less than <tt>len</tt> such that:\n <blockquote><pre>\n this.charAt(toffset+k) != other.charAt(ooffset+k)\n </pre></blockquote>\n <li><tt>ignoreCase</tt> is <tt>true</tt> and there is some nonnegative\n integer <i>k</i> less than <tt>len</tt> such that:\n <blockquote><pre>\n Character.toLowerCase(this.charAt(toffset+k)) !=\n               Character.toLowerCase(other.charAt(ooffset+k))\n </pre></blockquote>\n and:\n <blockquote><pre>\n Character.toUpperCase(this.charAt(toffset+k)) !=\n         Character.toUpperCase(other.charAt(ooffset+k))\n </pre></blockquote>\n </ul>\n\n @param   ignoreCase   if <code>true</code>, ignore case when comparing\n                       characters.\n @param   toffset      the starting offset of the subregion in this\n                       string.\n @param   other        the string argument.\n @param   ooffset      the starting offset of the subregion in the string\n                       argument.\n @param   len          the number of characters to compare.\n @return  <code>true</code> if the specified subregion of this string\n          matches the specified subregion of the string argument;\n          <code>false</code> otherwise. Whether the matching is exact\n          or case insensitive depends on the <code>ignoreCase</code>\n          argument.\n"
11955,method,java/lang/String/startsWith/String," Tests if this string starts with the specified prefix.\n\n @param   prefix   the prefix.\n @return  <code>true</code> if the character sequence represented by the\n          argument is a prefix of the character sequence represented by\n          this string; <code>false</code> otherwise.\n          Note also that <code>true</code> will be returned if the\n          argument is an empty string or is equal to this\n          <code>String</code> object as determined by the\n          {@link #equals(Object)} method.\n @since   1. 0\n"
11956,method,java/lang/String/endsWith/String," Tests if this string ends with the specified suffix.\n\n @param   suffix   the suffix.\n @return  <code>true</code> if the character sequence represented by the\n          argument is a suffix of the character sequence represented by\n          this object; <code>false</code> otherwise. Note that the\n          result will be <code>true</code> if the argument is the\n          empty string or is equal to this <code>String</code> object\n          as determined by the {@link #equals(Object)} method.\n"
11959,method,java/lang/String/indexOf/int;int," Returns the index within this string of the first occurrence of the\n specified character, starting the search at the specified index.\n <p>\n If a character with value <code>ch</code> occurs in the\n character sequence represented by this <code>String</code>\n object at an index no smaller than <code>fromIndex</code>, then\n the index of the first such occurrence is returned. For values\n of <code>ch</code> in the range from 0 to 0xFFFF (inclusive),\n this is the smallest value <i>k</i> such that:\n <blockquote><pre>\n (this.charAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)\n </pre></blockquote>\n is true. For other values of <code>ch</code>, it is the\n smallest value <i>k</i> such that:\n <blockquote><pre>\n (this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)\n </pre></blockquote>\n is true. In either case, if no such character occurs in this\n string at or after position <code>fromIndex</code>, then\n <code>-1</code> is returned.\n\n <p>\n There is no restriction on the value of <code>fromIndex</code>. If it\n is negative, it has the same effect as if it were zero: this entire\n string may be searched. If it is greater than the length of this\n string, it has the same effect as if it were equal to the length of\n this string: <code>-1</code> is returned.\n\n <p>All indices are specified in <code>char</code> values\n (Unicode code units).\n\n @param   ch          a character (Unicode code point).\n @param   fromIndex   the index to start the search from.\n @return  the index of the first occurrence of the character in the\n          character sequence represented by this object that is greater\n          than or equal to <code>fromIndex</code>, or <code>-1</code>\n          if the character does not occur.\n"
11961,method,java/lang/String/lastIndexOf/int;int," Returns the index within this string of the last occurrence of\n the specified character, searching backward starting at the\n specified index. For values of <code>ch</code> in the range\n from 0 to 0xFFFF (inclusive), the index returned is the largest\n value <i>k</i> such that:\n <blockquote><pre>\n (this.charAt(<i>k</i>) == ch) && (<i>k</i> &lt;= fromIndex)\n </pre></blockquote>\n is true. For other values of <code>ch</code>, it is the\n largest value <i>k</i> such that:\n <blockquote><pre>\n (this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &lt;= fromIndex)\n </pre></blockquote>\n is true. In either case, if no such character occurs in this\n string at or before position <code>fromIndex</code>, then\n <code>-1</code> is returned.\n\n <p>All indices are specified in <code>char</code> values\n (Unicode code units).\n\n @param   ch          a character (Unicode code point).\n @param   fromIndex   the index to start the search from. There is no\n          restriction on the value of <code>fromIndex</code>. If it is\n          greater than or equal to the length of this string, it has\n          the same effect as if it were equal to one less than the\n          length of this string: this entire string may be searched.\n          If it is negative, it has the same effect as if it were -1:\n          -1 is returned.\n @return  the index of the last occurrence of the character in the\n          character sequence represented by this object that is less\n          than or equal to <code>fromIndex</code>, or <code>-1</code>\n          if the character does not occur before that point.\n"
11966,method,java/lang/String/substring/int," Returns a new string that is a substring of this string. The\n substring begins with the character at the specified index and\n extends to the end of this string. <p>\n Examples:\n <blockquote><pre>\n "unhappy".substring(2) returns "happy"\n "Harbison".substring(3) returns "bison"\n "emptiness".substring(9) returns "" (an empty string)\n </pre></blockquote>\n\n @param      beginIndex   the beginning index, inclusive.\n @return     the specified substring.\n @exception  IndexOutOfBoundsException  if\n             <code>beginIndex</code> is negative or larger than the\n             length of this <code>String</code> object.\n"
11967,method,java/lang/String/substring/int;int," Returns a new string that is a substring of this string. The\n substring begins at the specified <code>beginIndex</code> and\n extends to the character at index <code>endIndex - 1</code>.\n Thus the length of the substring is <code>endIndex-beginIndex</code>.\n <p>\n Examples:\n <blockquote><pre>\n "hamburger".substring(4, 8) returns "urge"\n "smiles".substring(1, 5) returns "mile"\n </pre></blockquote>\n\n @param      beginIndex   the beginning index, inclusive.\n @param      endIndex     the ending index, exclusive.\n @return     the specified substring.\n @exception  IndexOutOfBoundsException  if the\n             <code>beginIndex</code> is negative, or\n             <code>endIndex</code> is larger than the length of\n             this <code>String</code> object, or\n             <code>beginIndex</code> is larger than\n             <code>endIndex</code>.\n"
11968,method,java/lang/String/subSequence/int;int," Returns a new character sequence that is a subsequence of this sequence.\n\n <p> An invocation of this method of the form\n\n <blockquote><pre>\n str.subSequence(begin,&nbsp;end)</pre></blockquote>\n\n behaves in exactly the same way as the invocation\n\n <blockquote><pre>\n str.substring(begin,&nbsp;end)</pre></blockquote>\n\n This method is defined so that the <tt>String</tt> class can implement\n the {@link CharSequence} interface. </p>\n\n @param      beginIndex   the begin index, inclusive.\n @param      endIndex     the end index, exclusive.\n @return     the specified subsequence.\n\n @throws  IndexOutOfBoundsException\n          if <tt>beginIndex</tt> or <tt>endIndex</tt> are negative,\n          if <tt>endIndex</tt> is greater than <tt>length()</tt>,\n          or if <tt>beginIndex</tt> is greater than <tt>startIndex</tt>\n\n @since 1.4\n @spec JSR-51\n"
11971,method,java/lang/String/matches/String," Tells whether or not this string matches the given <a\n href="../util/regex/Pattern.html#sum">regular expression</a>.\n\n <p> An invocation of this method of the form\n <i>str</i><tt>.matches(</tt><i>regex</i><tt>)</tt> yields exactly the\n same result as the expression\n\n <blockquote><tt> {@link java.util.regex.Pattern}.{@link\n java.util.regex.Pattern#matches(String,CharSequence)\n matches}(</tt><i>regex</i><tt>,</tt> <i>str</i><tt>)</tt></blockquote>\n\n @param   regex\n          the regular expression to which this string is to be matched\n\n @return  <tt>true</tt> if, and only if, this string matches the\n          given regular expression\n\n @throws  PatternSyntaxException\n          if the regular expression's syntax is invalid\n\n @see java.util.regex.Pattern\n\n @since 1.4\n @spec JSR-51\n"
11972,method,java/lang/String/contains/CharSequence," Returns true if and only if this string contains the specified\n sequence of char values.\n\n @param s the sequence to search for\n @return true if this string contains <code>s</code>, false otherwise\n @throws NullPointerException if <code>s</code> is <code>null</code>\n @since 1.5\n"
11973,method,java/lang/String/replaceFirst/String;String," Replaces the first substring of this string that matches the given <a\n href="../util/regex/Pattern.html#sum">regular expression</a> with the\n given replacement.\n\n <p> An invocation of this method of the form\n <i>str</i><tt>.replaceFirst(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>\n yields exactly the same result as the expression\n\n <blockquote><tt>\n {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile\n compile}(</tt><i>regex</i><tt>).{@link\n java.util.regex.Pattern#matcher(java.lang.CharSequence)\n matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceFirst\n replaceFirst}(</tt><i>repl</i><tt>)</tt></blockquote>\n\n<p>\n Note that backslashes (<tt>\</tt>) and dollar signs (<tt>$</tt>) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n {@link java.util.regex.Matcher#replaceFirst}.\n Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n meaning of these characters, if desired.\n\n @param   regex\n          the regular expression to which this string is to be matched\n @param   replacement\n          the string to be substituted for the first match\n\n @return  The resulting <tt>String</tt>\n\n @throws  PatternSyntaxException\n          if the regular expression's syntax is invalid\n\n @see java.util.regex.Pattern\n\n @since 1.4\n @spec JSR-51\n"
11974,method,java/lang/String/replaceAll/String;String," Replaces each substring of this string that matches the given <a\n href="../util/regex/Pattern.html#sum">regular expression</a> with the\n given replacement.\n\n <p> An invocation of this method of the form\n <i>str</i><tt>.replaceAll(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>\n yields exactly the same result as the expression\n\n <blockquote><tt>\n {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile\n compile}(</tt><i>regex</i><tt>).{@link\n java.util.regex.Pattern#matcher(java.lang.CharSequence)\n matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceAll\n replaceAll}(</tt><i>repl</i><tt>)</tt></blockquote>\n\n<p>\n Note that backslashes (<tt>\</tt>) and dollar signs (<tt>$</tt>) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n meaning of these characters, if desired.\n\n @param   regex\n          the regular expression to which this string is to be matched\n @param   replacement\n          the string to be substituted for each match\n\n @return  The resulting <tt>String</tt>\n\n @throws  PatternSyntaxException\n          if the regular expression's syntax is invalid\n\n @see java.util.regex.Pattern\n\n @since 1.4\n @spec JSR-51\n"
11976,method,java/lang/String/split/String;int," Splits this string around matches of the given\n <a href="../util/regex/Pattern.html#sum">regular expression</a>.\n\n <p> The array returned by this method contains each substring of this\n string that is terminated by another substring that matches the given\n expression or is terminated by the end of the string.  The substrings in\n the array are in the order in which they occur in this string.  If the\n expression does not match any part of the input then the resulting array\n has just one element, namely this string.\n\n <p> The <tt>limit</tt> parameter controls the number of times the\n pattern is applied and therefore affects the length of the resulting\n array.  If the limit <i>n</i> is greater than zero then the pattern\n will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's\n length will be no greater than <i>n</i>, and the array's last entry\n will contain all input beyond the last matched delimiter.  If <i>n</i>\n is non-positive then the pattern will be applied as many times as\n possible and the array can have any length.  If <i>n</i> is zero then\n the pattern will be applied as many times as possible, the array can\n have any length, and trailing empty strings will be discarded.\n\n <p> The string <tt>"boo:and:foo"</tt>, for example, yields the\n following results with these parameters:\n\n <blockquote><table cellpadding=1 cellspacing=0 summary="Split example showing regex, limit, and result">\n <tr>\n     <th>Regex</th>\n     <th>Limit</th>\n     <th>Result</th>\n </tr>\n <tr><td align=center>:</td>\n     <td align=center>2</td>\n     <td><tt>{ "boo", "and:foo" }</tt></td></tr>\n <tr><td align=center>:</td>\n     <td align=center>5</td>\n     <td><tt>{ "boo", "and", "foo" }</tt></td></tr>\n <tr><td align=center>:</td>\n     <td align=center>-2</td>\n     <td><tt>{ "boo", "and", "foo" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td align=center>5</td>\n     <td><tt>{ "b", "", ":and:f", "", "" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td align=center>-2</td>\n     <td><tt>{ "b", "", ":and:f", "", "" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td align=center>0</td>\n     <td><tt>{ "b", "", ":and:f" }</tt></td></tr>\n </table></blockquote>\n\n <p> An invocation of this method of the form\n <i>str.</i><tt>split(</tt><i>regex</i><tt>,</tt>&nbsp;<i>n</i><tt>)</tt>\n yields the same result as the expression\n\n <blockquote>\n {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile\n compile}<tt>(</tt><i>regex</i><tt>)</tt>.{@link\n java.util.regex.Pattern#split(java.lang.CharSequence,int)\n split}<tt>(</tt><i>str</i><tt>,</tt>&nbsp;<i>n</i><tt>)</tt>\n </blockquote>\n\n\n @param  regex\n         the delimiting regular expression\n\n @param  limit\n         the result threshold, as described above\n\n @return  the array of strings computed by splitting this string\n          around matches of the given regular expression\n\n @throws  PatternSyntaxException\n          if the regular expression's syntax is invalid\n\n @see java.util.regex.Pattern\n\n @since 1.4\n @spec JSR-51\n"
11977,method,java/lang/String/split/String," Splits this string around matches of the given <a\n href="../util/regex/Pattern.html#sum">regular expression</a>.\n\n <p> This method works as if by invoking the two-argument {@link\n #split(String, int) split} method with the given expression and a limit\n argument of zero.  Trailing empty strings are therefore not included in\n the resulting array.\n\n <p> The string <tt>"boo:and:foo"</tt>, for example, yields the following\n results with these expressions:\n\n <blockquote><table cellpadding=1 cellspacing=0 summary="Split examples showing regex and result">\n <tr>\n  <th>Regex</th>\n  <th>Result</th>\n </tr>\n <tr><td align=center>:</td>\n     <td><tt>{ "boo", "and", "foo" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td><tt>{ "b", "", ":and:f" }</tt></td></tr>\n </table></blockquote>\n\n\n @param  regex\n         the delimiting regular expression\n\n @return  the array of strings computed by splitting this string\n          around matches of the given regular expression\n\n @throws  PatternSyntaxException\n          if the regular expression's syntax is invalid\n\n @see java.util.regex.Pattern\n\n @since 1.4\n @spec JSR-51\n"
11978,method,java/lang/String/toLowerCase/Locale," Converts all of the characters in this <code>String</code> to lower\n case using the rules of the given <code>Locale</code>.  Case mapping is based\n on the Unicode Standard version specified by the {@link java.lang.Character Character}\n class. Since case mappings are not always 1:1 char mappings, the resulting\n <code>String</code> may be a different length than the original <code>String</code>.\n <p>\n Examples of lowercase  mappings are in the following table:\n <table border="1" summary="Lowercase mapping examples showing language code of locale, upper case, lower case, and description">\n <tr>\n   <th>Language Code of Locale</th>\n   <th>Upper Case</th>\n   <th>Lower Case</th>\n   <th>Description</th>\n </tr>\n <tr>\n   <td>tr (Turkish)</td>\n   <td>&#92;u0130</td>\n   <td>&#92;u0069</td>\n   <td>capital letter I with dot above -&gt; small letter i</td>\n </tr>\n <tr>\n   <td>tr (Turkish)</td>\n   <td>&#92;u0049</td>\n   <td>&#92;u0131</td>\n   <td>capital letter I -&gt; small letter dotless i </td>\n </tr>\n <tr>\n   <td>(all)</td>\n   <td>French Fries</td>\n   <td>french fries</td>\n   <td>lowercased all chars in String</td>\n </tr>\n <tr>\n   <td>(all)</td>\n   <td><img src="doc-files/capiota.gif" alt="capiota"><img src="doc-files/capchi.gif" alt="capchi">\n       <img src="doc-files/captheta.gif" alt="captheta"><img src="doc-files/capupsil.gif" alt="capupsil">\n       <img src="doc-files/capsigma.gif" alt="capsigma"></td>\n   <td><img src="doc-files/iota.gif" alt="iota"><img src="doc-files/chi.gif" alt="chi">\n       <img src="doc-files/theta.gif" alt="theta"><img src="doc-files/upsilon.gif" alt="upsilon">\n       <img src="doc-files/sigma1.gif" alt="sigma"></td>\n   <td>lowercased all chars in String</td>\n </tr>\n </table>\n\n @param locale use the case transformation rules for this locale\n @return the <code>String</code>, converted to lowercase.\n @see     java.lang.String#toLowerCase()\n @see     java.lang.String#toUpperCase()\n @see     java.lang.String#toUpperCase(Locale)\n @since   1.1\n"
11979,method,java/lang/String/toLowerCase/," Converts all of the characters in this <code>String</code> to lower\n case using the rules of the default locale. This is equivalent to calling\n <code>toLowerCase(Locale.getDefault())</code>.\n <p>\n <b>Note:</b> This method is locale sensitive, and may produce unexpected\n results if used for strings that are intended to be interpreted locale\n independently.\n Examples are programming language identifiers, protocol keys, and HTML\n tags.\n For instance, <code>"TITLE".toLowerCase()</code> in a Turkish locale\n returns <code>"tıtle"</code>, where 'ı' is the LATIN SMALL\n LETTER DOTLESS I character.\n To obtain correct results for locale insensitive strings, use\n <code>toLowerCase(Locale.ENGLISH)</code>.\n <p>\n @return  the <code>String</code>, converted to lowercase.\n @see     java.lang.String#toLowerCase(Locale)\n"
11980,method,java/lang/String/toUpperCase/Locale," Converts all of the characters in this <code>String</code> to upper\n case using the rules of the given <code>Locale</code>. Case mapping is based\n on the Unicode Standard version specified by the {@link java.lang.Character Character}\n class. Since case mappings are not always 1:1 char mappings, the resulting\n <code>String</code> may be a different length than the original <code>String</code>.\n <p>\n Examples of locale-sensitive and 1:M case mappings are in the following table.\n <p>\n <table border="1" summary="Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.">\n <tr>\n   <th>Language Code of Locale</th>\n   <th>Lower Case</th>\n   <th>Upper Case</th>\n   <th>Description</th>\n </tr>\n <tr>\n   <td>tr (Turkish)</td>\n   <td>&#92;u0069</td>\n   <td>&#92;u0130</td>\n   <td>small letter i -&gt; capital letter I with dot above</td>\n </tr>\n <tr>\n   <td>tr (Turkish)</td>\n   <td>&#92;u0131</td>\n   <td>&#92;u0049</td>\n   <td>small letter dotless i -&gt; capital letter I</td>\n </tr>\n <tr>\n   <td>(all)</td>\n   <td>&#92;u00df</td>\n   <td>&#92;u0053 &#92;u0053</td>\n   <td>small letter sharp s -&gt; two letters: SS</td>\n </tr>\n <tr>\n   <td>(all)</td>\n   <td>Fahrvergn&uuml;gen</td>\n   <td>FAHRVERGN&Uuml;GEN</td>\n   <td></td>\n </tr>\n </table>\n @param locale use the case transformation rules for this locale\n @return the <code>String</code>, converted to uppercase.\n @see     java.lang.String#toUpperCase()\n @see     java.lang.String#toLowerCase()\n @see     java.lang.String#toLowerCase(Locale)\n @since   1.1\n"
11981,method,java/lang/String/toUpperCase/," Converts all of the characters in this <code>String</code> to upper\n case using the rules of the default locale. This method is equivalent to\n <code>toUpperCase(Locale.getDefault())</code>.\n <p>\n <b>Note:</b> This method is locale sensitive, and may produce unexpected\n results if used for strings that are intended to be interpreted locale\n independently.\n Examples are programming language identifiers, protocol keys, and HTML\n tags.\n For instance, <code>"title".toUpperCase()</code> in a Turkish locale\n returns <code>"TİTLE"</code>, where 'İ' is the LATIN CAPITAL\n LETTER I WITH DOT ABOVE character.\n To obtain correct results for locale insensitive strings, use\n <code>toUpperCase(Locale.ENGLISH)</code>.\n <p>\n @return  the <code>String</code>, converted to uppercase.\n @see     java.lang.String#toUpperCase(Locale)\n"
11982,method,java/lang/String/trim/," Returns a copy of the string, with leading and trailing whitespace\n omitted.\n <p>\n If this <code>String</code> object represents an empty character\n sequence, or the first and last characters of character sequence\n represented by this <code>String</code> object both have codes\n greater than <code>'&#92;u0020'</code> (the space character), then a\n reference to this <code>String</code> object is returned.\n <p>\n Otherwise, if there is no character with a code greater than\n <code>'&#92;u0020'</code> in the string, then a new\n <code>String</code> object representing an empty string is created\n and returned.\n <p>\n Otherwise, let <i>k</i> be the index of the first character in the\n string whose code is greater than <code>'&#92;u0020'</code>, and let\n <i>m</i> be the index of the last character in the string whose code\n is greater than <code>'&#92;u0020'</code>. A new <code>String</code>\n object is created, representing the substring of this string that\n begins with the character at index <i>k</i> and ends with the\n character at index <i>m</i>-that is, the result of\n <code>this.substring(<i>k</i>,&nbsp;<i>m</i>+1)</code>.\n <p>\n This method may be used to trim whitespace (as defined above) from\n the beginning and end of a string.\n\n @return  A copy of this string with leading and trailing white\n          space removed, or this string if it has no leading or\n          trailing white space.\n"
11985,method,java/lang/String/format/String;Object[]," Returns a formatted string using the specified format string and\n arguments.\n\n <p> The locale always used is the one returned by {@link\n java.util.Locale#getDefault() Locale.getDefault()}.\n\n @param  format\n         A <a href="../util/Formatter.html#syntax">format string</a>\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.  The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href="../util/Formatter.html#syntax">conversion</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section of the\n          formatter class specification.\n\n @throws  NullPointerException\n          If the <tt>format</tt> is <tt>null</tt>\n\n @return  A formatted string\n\n @see  java.util.Formatter\n @since  1.5\n"
11986,method,java/lang/String/format/Locale;String;Object[]," Returns a formatted string using the specified locale, format string,\n and arguments.\n\n @param  l\n         The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.\n\n @param  format\n         A <a href="../util/Formatter.html#syntax">format string</a>\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.  The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href="../util/Formatter.html#syntax">conversion</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section of the\n          formatter class specification\n\n @throws  NullPointerException\n          If the <tt>format</tt> is <tt>null</tt>\n\n @return  A formatted string\n\n @see  java.util.Formatter\n @since  1.5\n"
11998,method,java/lang/String/intern/," Returns a canonical representation for the string object.\n <p>\n A pool of strings, initially empty, is maintained privately by the\n class <code>String</code>.\n <p>\n When the intern method is invoked, if the pool already contains a\n string equal to this <code>String</code> object as determined by\n the {@link #equals(Object)} method, then the string from the pool is\n returned. Otherwise, this <code>String</code> object is added to the\n pool and a reference to this <code>String</code> object is returned.\n <p>\n It follows that for any two strings <code>s</code> and <code>t</code>,\n <code>s.intern()&nbsp;==&nbsp;t.intern()</code> is <code>true</code>\n if and only if <code>s.equals(t)</code> is <code>true</code>.\n <p>\n All literal strings and string-valued constant expressions are\n interned. String literals are defined in &sect;3.10.5 of the\n <a href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>\n\n @return  a string that has the same contents as this string, but is\n          guaranteed to be from a pool of unique strings.\n"
11999,method,java/lang/String/String/," Initializes a newly created {@code String} object so that it represents\n an empty character sequence.  Note that use of this constructor is\n unnecessary since Strings are immutable.\n"
12014,field,java/lang/String/CASE_INSENSITIVE_ORDER," A Comparator that orders <code>String</code> objects as by\n <code>compareToIgnoreCase</code>. This comparator is serializable.\n <p>\n Note that this Comparator does <em>not</em> take locale into account,\n and will result in an unsatisfactory ordering for certain locales.\n The java.text package provides <em>Collators</em> to allow\n locale-sensitive ordering.\n\n @see     java.text.Collator#compare(String, String)\n @since   1.2\n"
12023,method,java/lang/StrictMath/toDegrees/double," Converts an angle measured in radians to an approximately\n equivalent angle measured in degrees.  The conversion from\n radians to degrees is generally inexact; users should\n <i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly\n equal <code>0.0</code>.\n\n @param   angrad   an angle, in radians\n @return  the measurement of the angle <code>angrad</code>\n          in degrees.\n"
12030,method,java/lang/StrictMath/ceil/double," Returns the smallest (closest to negative infinity)\n <code>double</code> value that is greater than or equal to the\n argument and is equal to a mathematical integer. Special cases:\n <ul><li>If the argument value is already equal to a\n mathematical integer, then the result is the same as the\n argument.  <li>If the argument is NaN or an infinity or\n positive zero or negative zero, then the result is the same as\n the argument.  <li>If the argument value is less than zero but\n greater than -1.0, then the result is negative zero.</ul> Note\n that the value of <code>StrictMath.ceil(x)</code> is exactly the\n value of <code>-StrictMath.floor(-x)</code>.\n\n @param   a   a value.\n @return  the smallest (closest to negative infinity) \n          floating-point value that is greater than or equal to\n          the argument and is equal to a mathematical integer. \n"
12034,method,java/lang/StrictMath/pow/double;double," Returns the value of the first argument raised to the power of the\n second argument. Special cases:\n\n <ul><li>If the second argument is positive or negative zero, then the \n result is 1.0. \n <li>If the second argument is 1.0, then the result is the same as the \n first argument.\n <li>If the second argument is NaN, then the result is NaN. \n <li>If the first argument is NaN and the second argument is nonzero, \n then the result is NaN. \n\n <li>If\n <ul>\n <li>the absolute value of the first argument is greater than 1\n and the second argument is positive infinity, or\n <li>the absolute value of the first argument is less than 1 and\n the second argument is negative infinity,\n </ul>\n then the result is positive infinity. \n\n <li>If \n <ul>\n <li>the absolute value of the first argument is greater than 1 and \n the second argument is negative infinity, or \n <li>the absolute value of the \n first argument is less than 1 and the second argument is positive \n infinity,\n </ul>\n then the result is positive zero. \n\n <li>If the absolute value of the first argument equals 1 and the \n second argument is infinite, then the result is NaN. \n\n <li>If \n <ul>\n <li>the first argument is positive zero and the second argument\n is greater than zero, or\n <li>the first argument is positive infinity and the second\n argument is less than zero,\n </ul>\n then the result is positive zero. \n\n <li>If \n <ul>\n <li>the first argument is positive zero and the second argument\n is less than zero, or\n <li>the first argument is positive infinity and the second\n argument is greater than zero,\n </ul>\n then the result is positive infinity.\n\n <li>If \n <ul>\n <li>the first argument is negative zero and the second argument\n is greater than zero but not a finite odd integer, or\n <li>the first argument is negative infinity and the second\n argument is less than zero but not a finite odd integer,\n </ul>\n then the result is positive zero. \n\n <li>If \n <ul>\n <li>the first argument is negative zero and the second argument\n is a positive finite odd integer, or\n <li>the first argument is negative infinity and the second\n argument is a negative finite odd integer,\n </ul>\n then the result is negative zero. \n\n <li>If\n <ul>\n <li>the first argument is negative zero and the second argument\n is less than zero but not a finite odd integer, or\n <li>the first argument is negative infinity and the second\n argument is greater than zero but not a finite odd integer,\n </ul>\n then the result is positive infinity. \n\n <li>If \n <ul>\n <li>the first argument is negative zero and the second argument\n is a negative finite odd integer, or\n <li>the first argument is negative infinity and the second\n argument is a positive finite odd integer,\n </ul>\n then the result is negative infinity. \n\n <li>If the first argument is finite and less than zero\n <ul>\n <li> if the second argument is a finite even integer, the\n result is equal to the result of raising the absolute value of\n the first argument to the power of the second argument\n\n <li>if the second argument is a finite odd integer, the result\n is equal to the negative of the result of raising the absolute\n value of the first argument to the power of the second\n argument\n\n <li>if the second argument is finite and not an integer, then\n the result is NaN.\n </ul>\n\n <li>If both arguments are integers, then the result is exactly equal \n to the mathematical result of raising the first argument to the power \n of the second argument if that result can in fact be represented \n exactly as a <code>double</code> value.</ul>\n \n <p>(In the foregoing descriptions, a floating-point value is\n considered to be an integer if and only if it is finite and a\n fixed point of the method {@link #ceil <tt>ceil</tt>} or,\n equivalently, a fixed point of the method {@link #floor\n <tt>floor</tt>}. A value is a fixed point of a one-argument\n method if and only if the result of applying the method to the\n value is equal to the value.)\n\n @param   a   base.\n @param   b   the exponent.\n @return  the value <code>a<sup>b</sup></code>.\n"
12037,method,java/lang/StrictMath/random/," Returns a <code>double</code> value with a positive sign, greater \n than or equal to <code>0.0</code> and less than <code>1.0</code>. \n Returned values are chosen pseudorandomly with (approximately) \n uniform distribution from that range. \n \n <p>When this method is first called, it creates a single new\n pseudorandom-number generator, exactly as if by the expression\n <blockquote><pre>new java.util.Random</pre></blockquote> This\n new pseudorandom-number generator is used thereafter for all\n calls to this method and is used nowhere else.\n \n <p>This method is properly synchronized to allow correct use by\n more than one thread. However, if many threads need to generate\n pseudorandom numbers at a great rate, it may reduce contention\n for each thread to have its own pseudorandom number generator.\n  \n @return  a pseudorandom <code>double</code> greater than or equal \n to <code>0.0</code> and less than <code>1.0</code>.\n @see     java.util.Random#nextDouble()\n"
12038,method,java/lang/StrictMath/abs/int," Returns the absolute value of an <code>int</code> value..\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned. \n \n <p>Note that if the argument is equal to the value of\n <code>Integer.MIN_VALUE</code>, the most negative representable\n <code>int</code> value, the result is that same value, which is\n negative.\n\n @param   a   the  argument whose absolute value is to be determined.\n @return  the absolute value of the argument.\n @see     java.lang.Integer#MIN_VALUE\n"
12039,method,java/lang/StrictMath/abs/long," Returns the absolute value of a <code>long</code> value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned. \n \n <p>Note that if the argument is equal to the value of\n <code>Long.MIN_VALUE</code>, the most negative representable\n <code>long</code> value, the result is that same value, which\n is negative.\n\n @param   a   the  argument whose absolute value is to be determined.\n @return  the absolute value of the argument.\n @see     java.lang.Long#MIN_VALUE\n"
12044,method,java/lang/StrictMath/max/float;float," Returns the greater of two <code>float</code> values.  That is,\n the result is the argument closer to positive infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero.\n\n @param   a   an argument.\n @param   b   another argument.\n @return  the larger of <code>a</code> and <code>b</code>.\n"
12045,method,java/lang/StrictMath/max/double;double," Returns the greater of two <code>double</code> values.  That\n is, the result is the argument closer to positive infinity. If\n the arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero.\n\n @param   a   an argument.\n @param   b   another argument.\n @return  the larger of <code>a</code> and <code>b</code>.\n"
12048,method,java/lang/StrictMath/min/float;float," Returns the smaller of two <code>float</code> values.  That is,\n the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero.  If\n one argument is positive zero and the other is negative zero,\n the result is negative zero.\n\n @param   a   an argument.\n @param   b   another argument.\n @return  the smaller of <code>a</code> and <code>b.</code>\n"
12049,method,java/lang/StrictMath/min/double;double," Returns the smaller of two <code>double</code> values.  That\n is, the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other is negative zero, the\n result is negative zero.\n\n @param   a   an argument.\n @param   b   another argument.\n @return  the smaller of <code>a</code> and <code>b</code>.\n"
12050,method,java/lang/StrictMath/ulp/double," Returns the size of an ulp of the argument.  An ulp of a\n <code>double</code> value is the positive distance between this\n floating-point value and the <code>double</code> value next\n larger in magnitude.  Note that for non-NaN <i>x</i>,\n <code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.\n \n <p>Special Cases:\n <ul>\n <li> If the argument is NaN, then the result is NaN.\n <li> If the argument is positive or negative infinity, then the\n result is positive infinity.\n <li> If the argument is positive or negative zero, then the result is\n <code>Double.MIN_VALUE</code>.\n <li> If the argument is &plusmn;<code>Double.MAX_VALUE</code>, then\n the result is equal to 2<sup>971</sup>.\n </ul>\n\n @param d the floating-point value whose ulp is to be returned\n @return the size of an ulp of the argument\n @author Joseph D. Darcy\n @since 1.5\n"
12051,method,java/lang/StrictMath/ulp/float," Returns the size of an ulp of the argument.  An ulp of a\n <code>float</code> value is the positive distance between this\n floating-point value and the <code>float</code> value next\n larger in magnitude.  Note that for non-NaN <i>x</i>,\n <code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.\n \n <p>Special Cases:\n <ul>\n <li> If the argument is NaN, then the result is NaN.\n <li> If the argument is positive or negative infinity, then the\n result is positive infinity.\n <li> If the argument is positive or negative zero, then the result is\n <code>Float.MIN_VALUE</code>.\n <li> If the argument is &plusmn;<code>Float.MAX_VALUE</code>, then\n the result is equal to 2<sup>104</sup>.\n </ul>\n\n @param f the floating-point value whose ulp is to be returned\n @return the size of an ulp of the argument\n @author Joseph D. Darcy\n @since 1.5\n"
12056,method,java/lang/StrictMath/tanh/double," Returns the hyperbolic tangent of a <code>double</code> value.\n The hyperbolic tangent of <i>x</i> is defined to be\n (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>),\n in other words, {@linkplain Math#sinh\n sinh(<i>x</i>)}/{@linkplain Math#cosh cosh(<i>x</i>)}.  Note\n that the absolute value of the exact tanh is always less than\n 1.\n\n <p>Special cases:\n <ul>\n\n <li>If the argument is NaN, then the result is NaN.\n\n <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n <li>If the argument is positive infinity, then the result is\n <code>+1.0</code>.\n\n <li>If the argument is negative infinity, then the result is\n <code>-1.0</code>.\n  \n </ul>\n\n @param   x The number whose hyperbolic tangent is to be returned.\n @return  The hyperbolic tangent of <code>x</code>.\n @since 1.5\n"
12058,method,java/lang/StrictMath/expm1/double," Returns <i>e</i><sup>x</sup>&nbsp;-1.  Note that for values of\n <i>x</i> near 0, the exact sum of\n <code>expm1(x)</code>&nbsp;+&nbsp;1 is much closer to the true\n result of <i>e</i><sup>x</sup> than <code>exp(x)</code>.\n\n <p>Special cases:\n <ul>\n <li>If the argument is NaN, the result is NaN.\n\n <li>If the argument is positive infinity, then the result is\n positive infinity.\n\n <li>If the argument is negative infinity, then the result is\n -1.0.\n\n <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n </ul>\n\n @param   x   the exponent to raise <i>e</i> to in the computation of\n              <i>e</i><sup><code>x</code></sup>&nbsp;-1.\n @return  the value <i>e</i><sup><code>x</code></sup>&nbsp;-&nbsp;1.\n @since 1.5\n"
12059,method,java/lang/StrictMath/log1p/double," Returns the natural logarithm of the sum of the argument and 1.\n Note that for small values <code>x</code>, the result of\n <code>log1p(x)</code> is much closer to the true result of ln(1\n + <code>x</code>) than the floating-point evaluation of\n <code>log(1.0+x)</code>.\n\n <p>Special cases:\n\n <ul>\n\n <li>If the argument is NaN or less than -1, then the result is\n NaN.\n\n <li>If the argument is positive infinity, then the result is\n positive infinity.\n\n <li>If the argument is negative one, then the result is\n negative infinity.\n\n <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n </ul>\n\n @param   x   a value\n @return the value ln(<code>x</code>&nbsp;+&nbsp;1), the natural\n log of <code>x</code>&nbsp;+&nbsp;1\n @since 1.5\n"
12064,method,java/lang/StrictMath/nextAfter/double;double," Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal the second argument is returned.\n\n <p>\n Special cases:\n <ul>\n <li> If either argument is a NaN, then NaN is returned.\n\n <li> If both arguments are signed zeros, {@code direction}\n is returned unchanged (as implied by the requirement of\n returning the second argument if the arguments compare as\n equal).\n\n <li> If {@code start} is\n &plusmn;{@link Double#MIN_VALUE} and {@code direction}\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as {@code start}\n is returned.\n\n <li> If {@code start} is infinite and\n {@code direction} has a value such that the result should\n have a smaller magnitude, {@link Double#MAX_VALUE} with the\n same sign as {@code start} is returned.\n\n <li> If {@code start} is equal to &plusmn;\n {@link Double#MAX_VALUE} and {@code direction} has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as {@code start} is returned.\n </ul>\n\n @param start  starting floating-point value\n @param direction value indicating which of\n {@code start}'s neighbors or {@code start} should\n be returned\n @return The floating-point number adjacent to {@code start} in the\n direction of {@code direction}.\n @since 1.6\n"
12065,method,java/lang/StrictMath/nextAfter/float;double," Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal a value equivalent to the second argument\n is returned.\n\n <p>\n Special cases:\n <ul>\n <li> If either argument is a NaN, then NaN is returned.\n\n <li> If both arguments are signed zeros, a value equivalent\n to {@code direction} is returned.\n\n <li> If {@code start} is\n &plusmn;{@link Float#MIN_VALUE} and {@code direction}\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as {@code start}\n is returned.\n\n <li> If {@code start} is infinite and\n {@code direction} has a value such that the result should\n have a smaller magnitude, {@link Float#MAX_VALUE} with the\n same sign as {@code start} is returned.\n\n <li> If {@code start} is equal to &plusmn;\n {@link Float#MAX_VALUE} and {@code direction} has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as {@code start} is returned.\n </ul>\n\n @param start  starting floating-point value\n @param direction value indicating which of\n {@code start}'s neighbors or {@code start} should\n be returned\n @return The floating-point number adjacent to {@code start} in the\n direction of {@code direction}.\n @since 1.6\n"
12066,method,java/lang/StrictMath/nextUp/double," Returns the floating-point value adjacent to {@code d} in\n the direction of positive infinity.  This method is\n semantically equivalent to {@code nextAfter(d,\n Double.POSITIVE_INFINITY)}; however, a {@code nextUp}\n implementation may run faster than its equivalent\n {@code nextAfter} call.\n\n <p>Special Cases:\n <ul>\n <li> If the argument is NaN, the result is NaN.\n\n <li> If the argument is positive infinity, the result is\n positive infinity.\n\n <li> If the argument is zero, the result is\n {@link Double#MIN_VALUE}\n\n </ul>\n\n @param d starting floating-point value\n @return The adjacent floating-point value closer to positive\n infinity.\n @since 1.6\n"
12067,method,java/lang/StrictMath/nextUp/float," Returns the floating-point value adjacent to {@code f} in\n the direction of positive infinity.  This method is\n semantically equivalent to {@code nextAfter(f,\n Float.POSITIVE_INFINITY)}; however, a {@code nextUp}\n implementation may run faster than its equivalent\n {@code nextAfter} call.\n\n <p>Special Cases:\n <ul>\n <li> If the argument is NaN, the result is NaN.\n\n <li> If the argument is positive infinity, the result is\n positive infinity.\n\n <li> If the argument is zero, the result is\n {@link Float#MIN_VALUE}\n\n </ul>\n\n @param f starting floating-point value\n @return The adjacent floating-point value closer to positive\n infinity.\n @since 1.6\n"
12068,method,java/lang/StrictMath/scalb/double;int," Return {@code d} &times;\n 2<sup>{@code scaleFactor}</sup> rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the double value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between {@link\n Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than {@code Double.MAX_EXPONENT}, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when {@code scalb(x, n)}\n is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n <i>x</i>.  When the result is non-NaN, the result has the same\n sign as {@code d}.\n\n<p>\n Special cases:\n <ul>\n <li> If the first argument is NaN, NaN is returned.\n <li> If the first argument is infinite, then an infinity of the\n same sign is returned.\n <li> If the first argument is zero, then a zero of the same\n sign is returned.\n </ul>\n\n @param d number to be scaled by a power of two.\n @param scaleFactor power of 2 used to scale {@code d}\n @return {@code d} &times; 2<sup>{@code scaleFactor}</sup>\n @since 1.6\n"
12069,method,java/lang/StrictMath/scalb/float;int," Return {@code f} &times;\n 2<sup>{@code scaleFactor}</sup> rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the float value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between {@link\n Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than {@code Float.MAX_EXPONENT}, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when {@code scalb(x, n)}\n is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n <i>x</i>.  When the result is non-NaN, the result has the same\n sign as {@code f}.\n\n<p>\n Special cases:\n <ul>\n <li> If the first argument is NaN, NaN is returned.\n <li> If the first argument is infinite, then an infinity of the\n same sign is returned.\n <li> If the first argument is zero, then a zero of the same\n sign is returned.\n </ul>\n\n @param f number to be scaled by a power of two.\n @param scaleFactor power of 2 used to scale {@code f}\n @return {@code f} &times; 2<sup>{@code scaleFactor}</sup>\n @since 1.6\n"
12072,class,java/lang/StackTraceElement," An element in a stack trace, as returned by {@link\n Throwable#getStackTrace()}.  Each element represents a single stack frame.\n All stack frames except for the one at the top of the stack represent\n a method invocation.  The frame at the top of the stack represents the \n execution point at which the stack trace was generated.  Typically,\n this is the point at which the throwable corresponding to the stack trace\n was created.\n\n @since  1.4\n @author Josh Bloch\n"
12073,method,java/lang/StackTraceElement/getFileName/," Returns the name of the source file containing the execution point\n represented by this stack trace element.  Generally, this corresponds\n to the <tt>SourceFile</tt> attribute of the relevant <tt>class</tt>\n file (as per <i>The Java Virtual Machine Specification</i>, Section\n 4.7.7).  In some systems, the name may refer to some source code unit\n other than a file, such as an entry in source repository.\n\n @return the name of the file containing the execution point\n         represented by this stack trace element, or <tt>null</tt> if\n         this information is unavailable.\n"
12078,method,java/lang/StackTraceElement/toString/," Returns a string representation of this stack trace element.  The\n format of this string depends on the implementation, but the following\n examples may be regarded as typical:\n <ul>\n <li>\n   <tt>"MyClass.mash(MyClass.java:9)"</tt> - Here, <tt>"MyClass"</tt>\n   is the <i>fully-qualified name</i> of the class containing the\n   execution point represented by this stack trace element,\n   <tt>"mash"</tt> is the name of the method containing the execution\n   point, <tt>"MyClass.java"</tt> is the source file containing the\n   execution point, and <tt>"9"</tt> is the line number of the source\n   line containing the execution point.\n <li>\n   <tt>"MyClass.mash(MyClass.java)"</tt> - As above, but the line\n   number is unavailable.\n <li>\n   <tt>"MyClass.mash(Unknown Source)"</tt> - As above, but neither\n   the file name nor the line  number are available.\n <li>\n   <tt>"MyClass.mash(Native Method)"</tt> - As above, but neither\n   the file name nor the line  number are available, and the method\n   containing the execution point is known to be a native method.\n </ul>\n @see    Throwable#printStackTrace()\n"
12079,method,java/lang/StackTraceElement/equals/Object," Returns true if the specified object is another\n <tt>StackTraceElement</tt> instance representing the same execution\n point as this instance.  Two stack trace elements <tt>a</tt> and\n <tt>b</tt> are equal if and only if:\n <pre>\n     equals(a.getFileName(), b.getFileName()) &&\n     a.getLineNumber() == b.getLineNumber()) &&\n     equals(a.getClassName(), b.getClassName()) &&\n     equals(a.getMethodName(), b.getMethodName())\n </pre>\n where <tt>equals</tt> is defined as:\n <pre>\n     static boolean equals(Object a, Object b) {\n         return a==b || (a != null && a.equals(b));\n     }\n </pre>\n \n @param  obj the object to be compared with this stack trace element.\n @return true if the specified object is another\n         <tt>StackTraceElement</tt> instance representing the same\n         execution point as this instance.\n"
12085,class,java/lang/Short," The <code>Short</code> class wraps a value of primitive type\n <code>short</code> in an object.  An object of type\n <code>Short</code> contains a single field whose type is\n <code>short</code>.\n\n <p>\n\n In addition, this class provides several methods for converting a\n <code>short</code> to a <code>String</code> and a\n <code>String</code> to a <code>short</code>, as well as other\n constants and methods useful when dealing with a <code>short</code>.\n\n @author  Nakul Saraiya\n @version 1.46, 03/23/10\n @see     java.lang.Number\n @since   JDK1.1\n"
12086,method,java/lang/Short/toString/short," Returns a new <code>String</code> object representing the\n specified <code>short</code>. The radix is assumed to be 10.\n\n @param s the <code>short</code> to be converted\n @return the string representation of the specified <code>short</code>\n @see java.lang.Integer#toString(int)\n"
12101,method,java/lang/Short/equals/Object," Compares this object to the specified object.  The result is\n <code>true</code> if and only if the argument is not\n <code>null</code> and is a <code>Short</code> object that\n contains the same <code>short</code> value as this object.\n\n @param obj	the object to compare with\n @return 		<code>true</code> if the objects are the same;\n			<code>false</code> otherwise.\n"
12111,method,java/lang/SecurityManager/getInCheck/,"\n Tests if there is a security check in progress.\n\n @return the value of the <code>inCheck</code> field. This field \n          should contain <code>true</code> if a security check is\n          in progress,\n          <code>false</code> otherwise.\n @see     java.lang.SecurityManager#inCheck\n @deprecated This type of security checking is not recommended.\n  It is recommended that the <code>checkPermission</code>\n  call be used instead.\n"
12112,method,java/lang/SecurityManager/getClassContext/," Returns the current execution stack as an array of classes. \n <p>\n The length of the array is the number of methods on the execution \n stack. The element at index <code>0</code> is the class of the \n currently executing method, the element at index <code>1</code> is \n the class of that method's caller, and so on. \n\n @return  the execution stack.\n"
12119,method,java/lang/SecurityManager/getSecurityContext/," Creates an object that encapsulates the current execution \n environment. The result of this method is used, for example, by the \n three-argument <code>checkConnect</code> method and by the \n two-argument <code>checkRead</code> method. \n These methods are needed because a trusted method may be called \n on to read a file or open a socket on behalf of another method. \n The trusted method needs to determine if the other (possibly \n untrusted) method would be allowed to perform the operation on its \n own. \n <p> The default implementation of this method is to return \n an <code>AccessControlContext</code> object.\n\n @return  an implementation-dependent object that encapsulates\n          sufficient information about the current execution environment\n          to perform some security checks later.\n @see     java.lang.SecurityManager#checkConnect(java.lang.String, int, \n   java.lang.Object) checkConnect\n @see     java.lang.SecurityManager#checkRead(java.lang.String, \n   java.lang.Object) checkRead\n @see     java.security.AccessControlContext AccessControlContext\n"
12120,method,java/lang/SecurityManager/checkPermission/Permission," Throws a <code>SecurityException</code> if the requested\n access, specified by the given permission, is not permitted based\n on the security policy currently in effect.\n <p>\n This method calls <code>AccessController.checkPermission</code> \n with the given permission.\n\n @param     perm   the requested permission.\n @exception SecurityException if access is not permitted based on\n		  the current security policy.\n @exception NullPointerException if the permission argument is\n            <code>null</code>.\n @since     1.2\n"
12152,method,java/lang/SecurityManager/SecurityManager/," Constructs a new <code>SecurityManager</code>.\n\n <p> If there is a security manager already installed, this method first\n calls the security manager's <code>checkPermission</code> method\n with the <code>RuntimePermission("createSecurityManager")</code>\n permission to ensure the calling thread has permission to create a new \n security manager.\n This may result in throwing a <code>SecurityException</code>.\n\n @exception  java.lang.SecurityException if a security manager already \n             exists and its <code>checkPermission</code> method \n             doesn't allow creation of a new security manager.\n @see        java.lang.System#getSecurityManager()\n @see        #checkPermission(java.security.Permission) checkPermission\n @see java.lang.RuntimePermission\n"
12159,class,java/lang/RuntimePermission," This class is for runtime permissions. A RuntimePermission\n contains a name (also referred to as a "target name") but\n no actions list; you either have the named permission\n or you don't.\n\n <P>\n The target name is the name of the runtime permission (see below). The\n naming convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a ".", or by itself, to\n signify a wildcard match. For example: "loadLibrary.*" or "*" is valid,\n "*loadLibrary" or "a*b" is not valid.\n <P>\n The following table lists all the possible RuntimePermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n <P>\n\n <table border=1 cellpadding=5 summary="permission target name, \n  what the target allows,and associated risks">\n <tr>\n <th>Permission Target Name</th>\n <th>What the Permission Allows</th>\n <th>Risks of Allowing this Permission</th>\n </tr>\n\n <tr>\n   <td>createClassLoader</td>\n   <td>Creation of a class loader</td>\n   <td>This is an extremely dangerous permission to grant.\n Malicious applications that can instantiate their own class\n loaders could then load their own rogue classes into the system.\n These newly loaded classes could be placed into any protection\n domain by the class loader, thereby automatically granting the\n classes the permissions for that domain.</td>\n </tr>\n\n <tr>\n   <td>getClassLoader</td>\n   <td>Retrieval of a class loader (e.g., the class loader for the calling\n class)</td>\n   <td>This would grant an attacker permission to get the\n class loader for a particular class. This is dangerous because\n having access to a class's class loader allows the attacker to\n load other classes available to that class loader. The attacker\n would typically otherwise not have access to those classes.</td>\n </tr>\n\n <tr>\n   <td>setContextClassLoader</td>\n   <td>Setting of the context class loader used by a thread</td>\n   <td>The context class loader is used by system code and extensions\n when they need to lookup resources that might not exist in the system\n class loader. Granting setContextClassLoader permission would allow\n code to change which context class loader is used\n for a particular thread, including system threads.</td>\n </tr>\n\n <tr>\n   <td>enableContextClassLoaderOverride</td>\n   <td>Subclass implementation of the thread context class loader methods</td>\n   <td>The context class loader is used by system code and extensions\n when they need to lookup resources that might not exist in the system\n class loader. Granting enableContextClassLoaderOverride permission would allow\n a subclass of Thread to override the methods that are used\n to get or set the context class loader for a particular thread.</td>\n </tr>\n\n <tr>\n   <td>setSecurityManager</td>\n   <td>Setting of the security manager (possibly replacing an existing one)\n </td>\n   <td>The security manager is a class that allows \n applications to implement a security policy. Granting the setSecurityManager\n permission would allow code to change which security manager is used by\n installing a different, possibly less restrictive security manager,\n thereby bypassing checks that would have been enforced by the original\n security manager.</td>\n </tr>\n\n <tr>\n   <td>createSecurityManager</td>\n   <td>Creation of a new security manager</td>\n   <td>This gives code access to protected, sensitive methods that may\n disclose information about other classes or the execution stack.</td>\n </tr>\n\n <tr>\n   <td>getenv.{variable name}</td>\n   <td>Reading of the value of the specified environment variable</td>\n   <td>This would allow code to read the value, or determine the\n       existence, of a particular environment variable.  This is\n       dangerous if the variable contains confidential data.</td>\n </tr>\n\n <tr>\n   <td>exitVM.{exit status}</td>\n   <td>Halting of the Java Virtual Machine with the specified exit status</td>\n   <td>This allows an attacker to mount a denial-of-service attack\n by automatically forcing the virtual machine to halt.\n Note: The "exitVM.*" permission is automatically granted to all code\n loaded from the application class path, thus enabling applications\n to terminate themselves. Also, the "exitVM" permission is equivalent to \n "exitVM.*".</td>\n </tr>\n\n <tr>\n   <td>shutdownHooks</td>\n   <td>Registration and cancellation of virtual-machine shutdown hooks</td>\n   <td>This allows an attacker to register a malicious shutdown\n hook that interferes with the clean shutdown of the virtual machine.</td>\n </tr>\n\n <tr>\n   <td>setFactory</td>\n   <td>Setting of the socket factory used by ServerSocket or Socket,\n or of the stream handler factory used by URL</td>\n   <td>This allows code to set the actual implementation\n for the socket, server socket, stream handler, or RMI socket factory.\n An attacker may set a faulty implementation which mangles the data\n stream.</td>\n </tr>\n\n <tr>\n   <td>setIO</td>\n   <td>Setting of System.out, System.in, and System.err</td>\n   <td>This allows changing the value of the standard system streams.\n An attacker may change System.in to monitor and\n steal user input, or may set System.err to a "null" OutputStream,\n which would hide any error messages sent to System.err. </td>\n </tr>\n\n <tr>\n   <td>modifyThread</td>\n   <td>Modification of threads, e.g., via calls to Thread\n <tt>interrupt</tt>, <tt>stop</tt>, <tt>suspend</tt>,\n <tt>resume</tt>, <tt>setDaemon</tt>, <tt>setPriority</tt>,\n <tt>setName</tt> and <tt>setUncaughtExceptionHandler</tt>\n methods</td> \n <td>This allows an attacker to modify the behaviour of\n any thread in the system.</td>\n </tr>\n\n <tr>\n   <td>stopThread</td>\n   <td>Stopping of threads via calls to the Thread <code>stop</code>\n method</td>\n   <td>This allows code to stop any thread in the system provided that it is\n already granted permission to access that thread.\n This poses as a threat, because that code may corrupt the system by\n killing existing threads.</td>\n </tr>\n\n <tr>\n   <td>modifyThreadGroup</td>\n   <td>modification of thread groups, e.g., via calls to ThreadGroup\n <code>destroy</code>, <code>getParent</code>, <code>resume</code>, \n <code>setDaemon</code>, <code>setMaxPriority</code>, <code>stop</code>, \n and <code>suspend</code> methods</td>\n   <td>This allows an attacker to create thread groups and\n set their run priority.</td>\n </tr>\n\n <tr>\n   <td>getProtectionDomain</td>\n   <td>Retrieval of the ProtectionDomain for a class</td>\n   <td>This allows code to obtain policy information\n for a particular code source. While obtaining policy information\n does not compromise the security of the system, it does give\n attackers additional information, such as local file names for\n example, to better aim an attack.</td>\n </tr>\n\n <tr>\n   <td>getFileSystemAttributes</td>\n   <td>Retrieval of file system attributes</td>\n   <td>This allows code to obtain file system information such as disk usage\n       or disk space available to the caller.  This is potentially dangerous\n       because it discloses information about the system hardware  \n       configuration and some information about the caller's privilege to\n       write files.</td>\n </tr>\n\n <tr>\n   <td>readFileDescriptor</td>\n   <td>Reading of file descriptors</td>\n   <td>This would allow code to read the particular file associated\n       with the file descriptor read. This is dangerous if the file\n       contains confidential data.</td>\n </tr>\n\n <tr>\n   <td>writeFileDescriptor</td>\n   <td>Writing to file descriptors</td>\n   <td>This allows code to write to a particular file associated\n       with the descriptor. This is dangerous because it may allow\n       malicious code to plant viruses or at the very least, fill up\n       your entire disk.</td>\n </tr>\n\n <tr>\n   <td>loadLibrary.{library name}</td>\n   <td>Dynamic linking of the specified library</td>\n   <td>It is dangerous to allow an applet permission to load native code\n libraries, because the Java security architecture is not designed to and\n does not prevent malicious behavior at the level of native code.</td>\n </tr>\n\n <tr>\n   <td>accessClassInPackage.{package name}</td>\n   <td>Access to the specified package via a class loader's\n <code>loadClass</code> method when that class loader calls\n the SecurityManager <code>checkPackageAccess</code> method</td>\n   <td>This gives code access to classes in packages\n to which it normally does not have access. Malicious code\n may use these classes to help in its attempt to compromise\n security in the system.</td>\n </tr>\n\n <tr>\n   <td>defineClassInPackage.{package name}</td>\n   <td>Definition of classes in the specified package, via a class\n loader's <code>defineClass</code> method when that class loader calls\n the SecurityManager <code>checkPackageDefinition</code> method.</td>\n   <td>This grants code permission to define a class\n in a particular package. This is dangerous because malicious\n code with this permission may define rogue classes in\n trusted packages like <code>java.security</code> or <code>java.lang</code>,\n for example.</td>\n </tr>\n\n <tr>\n   <td>accessDeclaredMembers</td>\n   <td>Access to the declared members of a class</td>\n   <td>This grants code permission to query a class for its public,\n protected, default (package) access, and private fields and/or\n methods. Although the code would have\n access to the private and protected field and method names, it would not\n have access to the private/protected field data and would not be able\n to invoke any private methods. Nevertheless, malicious code\n may use this information to better aim an attack.\n Additionally, it may invoke any public methods and/or access public fields\n in the class.  This could be dangerous if\n the code would normally not be able to invoke those methods and/or\n access the fields  because\n it can't cast the object to the class/interface with those methods\n and fields.\n</td>\n </tr>\n <tr>\n   <td>queuePrintJob</td>\n   <td>Initiation of a print job request</td>\n   <td>This could print sensitive information to a printer,\n or simply waste paper.</td>\n </tr>\n\n <tr>\n   <td>getStackTrace</td>\n   <td>Retrieval of the stack trace information of another thread.</td>\n   <td>This allows retrieval of the stack trace information of \n another thread.  This might allow malicious code to monitor the \n execution of threads and discover vulnerabilities in applications.</td>\n </tr>\n\n <tr>\n   <td>setDefaultUncaughtExceptionHandler</td>\n   <td>Setting the default handler to be used when a thread\n   terminates abruptly due to an uncaught exception</td>\n   <td>This allows an attacker to register a malicious\n   uncaught exception handler that could interfere with termination\n   of a thread</td>\n </tr>\n\n <tr>\n   <td>preferences</td>\n   <td>Represents the permission required to get access to the\n   java.util.prefs.Preferences implementations user or system root\n   which in turn allows retrieval or update operations within the\n   Preferences persistent backing store.) </td>\n   <td>This permission allows the user to read from or write to the\n   preferences backing store if the user running the code has \n   sufficient OS privileges to read/write to that backing store.\n   The actual backing store may reside within a traditional filesystem\n   directory or within a registry depending on the platform OS</td>\n </tr>\n\n </table>\n\n @see java.security.BasicPermission\n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n @see java.lang.SecurityManager\n\n @version 1.58 10/03/23\n\n @author Marianne Mueller\n @author Roland Schemers\n"
12160,method,java/lang/RuntimePermission/RuntimePermission/String," Creates a new RuntimePermission with the specified name.\n The name is the symbolic name of the RuntimePermission, such as\n "exit", "setFactory", etc. An asterisk\n may appear at the end of the name, following a ".", or by itself, to\n signify a wildcard match.\n\n @param name the name of the RuntimePermission.\n\n @throws NullPointerException if <code>name</code> is <code>null</code>.\n @throws IllegalArgumentException if <code>name</code> is empty.\n"
12163,method,java/lang/RuntimeException/RuntimeException/,"Constructs a new runtime exception with <code>null</code> as its\n detail message.  The cause is not initialized, and may subsequently be\n initialized by a call to {@link #initCause}.\n"
12164,method,java/lang/RuntimeException/RuntimeException/String,"Constructs a new runtime exception with the specified detail message.\n The cause is not initialized, and may subsequently be initialized by a\n call to {@link #initCause}.\n\n @param   message   the detail message. The detail message is saved for \n          later retrieval by the {@link #getMessage()} method.\n"
12165,method,java/lang/RuntimeException/RuntimeException/String;Throwable," Constructs a new runtime exception with the specified detail message and\n cause.  <p>Note that the detail message associated with\n <code>cause</code> is <i>not</i> automatically incorporated in\n this runtime exception's detail message.\n\n @param  message the detail message (which is saved for later retrieval\n         by the {@link #getMessage()} method).\n @param  cause the cause (which is saved for later retrieval by the\n         {@link #getCause()} method).  (A <tt>null</tt> value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since  1.4\n"
12168,method,java/lang/Runtime/getRuntime/," Returns the runtime object associated with the current Java application.\n Most of the methods of class <code>Runtime</code> are instance \n methods and must be invoked with respect to the current runtime object. \n \n @return  the <code>Runtime</code> object associated with the current\n          Java application.\n"
12169,method,java/lang/Runtime/exit/int," Terminates the currently running Java virtual machine by initiating its\n shutdown sequence.  This method never returns normally.  The argument\n serves as a status code; by convention, a nonzero status code indicates\n abnormal termination.\n\n <p> The virtual machine's shutdown sequence consists of two phases.  In\n the first phase all registered {@link #addShutdownHook shutdown hooks},\n if any, are started in some unspecified order and allowed to run\n concurrently until they finish.  In the second phase all uninvoked\n finalizers are run if {@link #runFinalizersOnExit finalization-on-exit}\n has been enabled.  Once this is done the virtual machine {@link #halt\n halts}.\n\n <p> If this method is invoked after the virtual machine has begun its\n shutdown sequence then if shutdown hooks are being run this method will\n block indefinitely.  If shutdown hooks have already been run and on-exit\n finalization has been enabled then this method halts the virtual machine\n with the given status code if the status is nonzero; otherwise, it\n blocks indefinitely.\n\n <p> The <tt>{@link System#exit(int) System.exit}</tt> method is the\n conventional and convenient means of invoking this method. <p>\n\n @param  status\n         Termination status.  By convention, a nonzero status code\n         indicates abnormal termination.\n\n @throws SecurityException\n         If a security manager is present and its <tt>{@link\n         SecurityManager#checkExit checkExit}</tt> method does not permit\n         exiting with the specified status\n\n @see java.lang.SecurityException\n @see java.lang.SecurityManager#checkExit(int)\n @see #addShutdownHook\n @see #removeShutdownHook\n @see #runFinalizersOnExit\n @see #halt(int)\n"
12173,method,java/lang/Runtime/runFinalizersOnExit/boolean," Enable or disable finalization on exit; doing so specifies that the\n finalizers of all objects that have finalizers that have not yet been\n automatically invoked are to be run before the Java runtime exits.\n By default, finalization on exit is disabled.\n \n <p>If there is a security manager, \n its <code>checkExit</code> method is first called\n with 0 as its argument to ensure the exit is allowed. \n This could result in a SecurityException.\n\n @param value true to enable finalization on exit, false to disable\n @deprecated  This method is inherently unsafe.  It may result in\n 	    finalizers being called on live objects while other threads are\n      concurrently manipulating those objects, resulting in erratic\n	    behavior or deadlock.\n \n @throws  SecurityException\n        if a security manager exists and its <code>checkExit</code> \n        method doesn't allow the exit.\n\n @see     java.lang.Runtime#exit(int)\n @see     java.lang.Runtime#gc()\n @see     java.lang.SecurityManager#checkExit(int)\n @since   JDK1.1\n"
12174,method,java/lang/Runtime/exec/String," Executes the specified string command in a separate process.\n\n <p>This is a convenience method.  An invocation of the form\n <tt>exec(command)</tt>\n behaves in exactly the same way as the invocation\n <tt>{@link #exec(String, String[], File) exec}(command, null, null)</tt>.\n\n @param   command   a specified system command.\n\n @return  A new {@link Process} object for managing the subprocess\n\n @throws  SecurityException\n          If a security manager exists and its\n          {@link SecurityManager#checkExec checkExec}\n          method doesn't allow creation of the subprocess\n\n @throws  IOException\n          If an I/O error occurs\n\n @throws  NullPointerException\n          If <code>command</code> is <code>null</code>\n\n @throws  IllegalArgumentException\n          If <code>command</code> is empty\n\n @see     #exec(String[], String[], File)\n @see     ProcessBuilder\n"
12177,method,java/lang/Runtime/exec/String[]," Executes the specified command and arguments in a separate process.\n\n <p>This is a convenience method.  An invocation of the form\n <tt>exec(cmdarray)</tt>\n behaves in exactly the same way as the invocation\n <tt>{@link #exec(String[], String[], File) exec}(cmdarray, null, null)</tt>.\n\n @param   cmdarray  array containing the command to call and\n                    its arguments.\n\n @return  A new {@link Process} object for managing the subprocess\n\n @throws  SecurityException\n          If a security manager exists and its\n          {@link SecurityManager#checkExec checkExec}\n          method doesn't allow creation of the subprocess\n\n @throws  IOException\n          If an I/O error occurs\n\n @throws  NullPointerException\n          If <code>cmdarray</code> is <code>null</code>,\n          or one of the elements of <code>cmdarray</code> is <code>null</code>\n\n @throws  IndexOutOfBoundsException\n          If <code>cmdarray</code> is an empty array\n          (has length <code>0</code>)\n\n @see     ProcessBuilder\n"
12180,method,java/lang/Runtime/availableProcessors/," Returns the number of processors available to the Java virtual machine.\n\n <p> This value may change during a particular invocation of the virtual\n machine.  Applications that are sensitive to the number of available\n processors should therefore occasionally poll this property and adjust\n their resource usage appropriately. </p>\n\n @return  the maximum number of processors available to the virtual\n          machine; never smaller than one\n @since 1.4\n"
12181,method,java/lang/Runtime/freeMemory/," Returns the amount of free memory in the Java Virtual Machine.\n Calling the \n <code>gc</code> method may result in increasing the value returned \n by <code>freeMemory.</code>\n\n @return  an approximation to the total amount of memory currently\n          available for future allocated objects, measured in bytes.\n"
12184,method,java/lang/Runtime/gc/," Runs the garbage collector.\n Calling this method suggests that the Java virtual machine expend \n effort toward recycling unused objects in order to make the memory \n they currently occupy available for quick reuse. When control \n returns from the method call, the virtual machine has made \n its best effort to recycle all discarded objects. \n <p>\n The name <code>gc</code> stands for "garbage \n collector". The virtual machine performs this recycling \n process automatically as needed, in a separate thread, even if the \n <code>gc</code> method is not invoked explicitly.\n <p>\n The method {@link System#gc()} is the conventional and convenient \n means of invoking this method. \n"
12185,method,java/lang/Runtime/runFinalization/," Runs the finalization methods of any objects pending finalization.\n Calling this method suggests that the Java virtual machine expend \n effort toward running the <code>finalize</code> methods of objects \n that have been found to be discarded but whose <code>finalize</code> \n methods have not yet been run. When control returns from the \n method call, the virtual machine has made a best effort to \n complete all outstanding finalizations. \n <p>\n The virtual machine performs the finalization process \n automatically as needed, in a separate thread, if the \n <code>runFinalization</code> method is not invoked explicitly. \n <p>\n The method {@link System#runFinalization()} is the conventional \n and convenient means of invoking this method.\n\n @see     java.lang.Object#finalize()\n"
12186,method,java/lang/Runtime/traceInstructions/boolean," Enables/Disables tracing of instructions.\n If the <code>boolean</code> argument is <code>true</code>, this \n method suggests that the Java virtual machine emit debugging \n information for each instruction in the virtual machine as it \n is executed. The format of this information, and the file or other \n output stream to which it is emitted, depends on the host environment. \n The virtual machine may ignore this request if it does not support \n this feature. The destination of the trace output is system \n dependent. \n <p>\n If the <code>boolean</code> argument is <code>false</code>, this \n method causes the virtual machine to stop performing the \n detailed instruction trace it is performing.\n\n @param   on   <code>true</code> to enable instruction tracing;\n               <code>false</code> to disable this feature.\n"
12187,method,java/lang/Runtime/traceMethodCalls/boolean," Enables/Disables tracing of method calls.\n If the <code>boolean</code> argument is <code>true</code>, this \n method suggests that the Java virtual machine emit debugging \n information for each method in the virtual machine as it is \n called. The format of this information, and the file or other output \n stream to which it is emitted, depends on the host environment. The \n virtual machine may ignore this request if it does not support \n this feature.  \n <p>\n Calling this method with argument false suggests that the\n virtual machine cease emitting per-call debugging information.\n\n @param   on   <code>true</code> to enable instruction tracing;\n               <code>false</code> to disable this feature.\n"
12189,method,java/lang/Runtime/loadLibrary/String," Loads the dynamic library with the specified library name. \n A file containing native code is loaded from the local file system \n from a place where library files are conventionally obtained. The \n details of this process are implementation-dependent. The \n mapping from a library name to a specific filename is done in a \n system-specific manner. \n <p>\n First, if there is a security manager, its <code>checkLink</code> \n method is called with the <code>libname</code> as its argument. \n This may result in a security exception. \n <p>\n The method {@link System#loadLibrary(String)} is the conventional \n and convenient means of invoking this method. If native\n methods are to be used in the implementation of a class, a standard \n strategy is to put the native code in a library file (call it \n <code>LibFile</code>) and then to put a static initializer:\n <blockquote><pre>\n static { System.loadLibrary("LibFile"); }\n </pre></blockquote>\n within the class declaration. When the class is loaded and \n initialized, the necessary native code implementation for the native \n methods will then be loaded as well. \n <p>\n If this method is called more than once with the same library \n name, the second and subsequent calls are ignored. \n\n @param      libname   the name of the library.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkLink</code> method doesn't allow \n             loading of the specified dynamic library\n @exception  UnsatisfiedLinkError  if the library does not exist.\n @exception  NullPointerException if <code>libname</code> is\n             <code>null</code>\n @see        java.lang.SecurityException\n @see        java.lang.SecurityManager#checkLink(java.lang.String)\n"
12190,method,java/lang/Runtime/getLocalizedInputStream/InputStream," Creates a localized version of an input stream. This method takes \n an <code>InputStream</code> and returns an <code>InputStream</code> \n equivalent to the argument in all respects except that it is \n localized: as characters in the local character set are read from \n the stream, they are automatically converted from the local \n character set to Unicode. \n <p>\n If the argument is already a localized stream, it may be returned \n as the result. \n\n @param      in InputStream to localize\n @return     a localized input stream\n @see        java.io.InputStream\n @see        java.io.BufferedReader#BufferedReader(java.io.Reader)\n @see        java.io.InputStreamReader#InputStreamReader(java.io.InputStream)\n @deprecated As of JDK&nbsp;1.1, the preferred way to translate a byte\n stream in the local encoding into a character stream in Unicode is via\n the <code>InputStreamReader</code> and <code>BufferedReader</code>\n classes.\n"
12191,method,java/lang/Runtime/getLocalizedOutputStream/OutputStream," Creates a localized version of an output stream. This method \n takes an <code>OutputStream</code> and returns an \n <code>OutputStream</code> equivalent to the argument in all respects \n except that it is localized: as Unicode characters are written to \n the stream, they are automatically converted to the local \n character set. \n <p>\n If the argument is already a localized stream, it may be returned \n as the result. \n\n @deprecated As of JDK&nbsp;1.1, the preferred way to translate a\n Unicode character stream into a byte stream in the local encoding is via\n the <code>OutputStreamWriter</code>, <code>BufferedWriter</code>, and\n <code>PrintWriter</code> classes.\n\n @param      out OutputStream to localize\n @return     a localized output stream\n @see        java.io.OutputStream\n @see        java.io.BufferedWriter#BufferedWriter(java.io.Writer)\n @see        java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)\n @see        java.io.PrintWriter#PrintWriter(java.io.OutputStream)\n"
12193,method,java/lang/Runnable/run/," When an object implementing interface <code>Runnable</code> is used \n to create a thread, starting the thread causes the object's \n <code>run</code> method to be called in that separately executing \n thread. \n <p>\n The general contract of the method <code>run</code> is that it may \n take any action whatsoever.\n\n @see     java.lang.Thread#run()\n"
12194,interface,java/lang/Readable," A <tt>Readable</tt> is a source of characters. Characters from\n a <tt>Readable</tt> are made available to callers of the read\n method via a {@link java.nio.CharBuffer CharBuffer}.\n\n @version 1.5 10/03/23\n @since 1.5\n"
12195,method,java/lang/Readable/read/CharBuffer," Attempts to read characters into the specified character buffer.\n The buffer is used as a repository of characters as-is: the only\n changes made are the results of a put operation. No flipping or\n rewinding of the buffer is performed.\n\n @param cb the buffer to read characters into\n @return @return The number of <tt>char</tt> values added to the buffer,\n                 or -1 if this source of characters is at its end\n @throws IOException if an I/O error occurs\n @throws NullPointerException if cb is null\n @throws ReadOnlyBufferException if cb is a read only buffer\n"
12200,method,java/lang/ProcessBuilder/environment/," Returns a string map view of this process builder's environment.\n\n Whenever a process builder is created, the environment is\n initialized to a copy of the current process environment (see\n {@link System#getenv()}).  Subprocesses subsequently started by\n this object's {@link #start()} method will use this map as\n their environment.\n\n <p>The returned object may be modified using ordinary {@link\n java.util.Map Map} operations.  These modifications will be\n visible to subprocesses started via the {@link #start()}\n method.  Two <code>ProcessBuilder</code> instances always\n contain independent process environments, so changes to the\n returned map will never be reflected in any other\n <code>ProcessBuilder</code> instance or the values returned by\n {@link System#getenv System.getenv}.\n\n <p>If the system does not support environment variables, an\n empty map is returned.\n\n <p>The returned map does not permit null keys or values.\n Attempting to insert or query the presence of a null key or\n value will throw a {@link NullPointerException}.\n Attempting to query the presence of a key or value which is not\n of type {@link String} will throw a {@link ClassCastException}.\n\n <p>The behavior of the returned map is system-dependent.  A\n system may not allow modifications to environment variables or\n may forbid certain variable names or values.  For this reason,\n attempts to modify the map may fail with\n {@link UnsupportedOperationException} or\n {@link IllegalArgumentException}\n if the modification is not permitted by the operating system.\n\n <p>Since the external format of environment variable names and\n values is system-dependent, there may not be a one-to-one\n mapping between them and Java's Unicode strings.  Nevertheless,\n the map is implemented in such a way that environment variables\n which are not modified by Java code will have an unmodified\n native representation in the subprocess.\n\n <p>The returned map and its collection views may not obey the\n general contract of the {@link Object#equals} and\n {@link Object#hashCode} methods.\n\n <p>The returned map is typically case-sensitive on all platforms.\n\n <p>If a security manager exists, its\n {@link SecurityManager#checkPermission checkPermission}\n method is called with a\n <code>{@link RuntimePermission}("getenv.*")</code>\n permission.  This may result in a {@link SecurityException} being\n thrown.\n\n <p>When passing information to a Java subprocess,\n <a href=System.html#EnvironmentVSSystemProperties>system properties</a>\n are generally preferred over environment variables.</p>\n\n @return  This process builder's environment\n\n @throws  SecurityException\n          If a security manager exists and its\n          {@link SecurityManager#checkPermission checkPermission}\n          method doesn't allow access to the process environment\n\n @see     Runtime#exec(String[],String[],java.io.File)\n @see     System#getenv()\n"
12201,method,java/lang/ProcessBuilder/directory/," Returns this process builder's working directory.\n\n Subprocesses subsequently started by this object's {@link\n #start()} method will use this as their working directory.\n The returned value may be <code>null</code> -- this means to use\n the working directory of the current Java process, usually the\n directory named by the system property <code>user.dir</code>,\n as the working directory of the child process.</p>\n\n @return  This process builder's working directory\n"
12202,method,java/lang/ProcessBuilder/directory/File," Sets this process builder's working directory.\n\n Subprocesses subsequently started by this object's {@link\n #start()} method will use this as their working directory.\n The argument may be <code>null</code> -- this means to use the\n working directory of the current Java process, usually the\n directory named by the system property <code>user.dir</code>,\n as the working directory of the child process.</p>\n\n @param   directory  The new working directory\n @return  This process builder\n"
12203,method,java/lang/ProcessBuilder/redirectErrorStream/," Tells whether this process builder merges standard error and\n standard output.\n\n <p>If this property is <code>true</code>, then any error output\n generated by subprocesses subsequently started by this object's\n {@link #start()} method will be merged with the standard\n output, so that both can be read using the\n {@link Process#getInputStream()} method.  This makes it easier\n to correlate error messages with the corresponding output.\n The initial value is <code>false</code>.</p>\n\n @return  This process builder's <code>redirectErrorStream</code> property\n"
12204,method,java/lang/ProcessBuilder/redirectErrorStream/boolean," Sets this process builder's <code>redirectErrorStream</code> property.\n\n <p>If this property is <code>true</code>, then any error output\n generated by subprocesses subsequently started by this object's\n {@link #start()} method will be merged with the standard\n output, so that both can be read using the\n {@link Process#getInputStream()} method.  This makes it easier\n to correlate error messages with the corresponding output.\n The initial value is <code>false</code>.</p>\n\n @param   redirectErrorStream  The new property value\n @return  This process builder\n"
12209,method,java/lang/Process/getOutputStream/," Gets the output stream of the subprocess.\n Output to the stream is piped into the standard input stream of \n the process represented by this <code>Process</code> object. \n <p>\n Implementation note: It is a good idea for the output stream to \n be buffered.\n\n @return  the output stream connected to the normal input of the\n          subprocess.\n"
12210,method,java/lang/Process/getInputStream/," Gets the input stream of the subprocess.\n The stream obtains data piped from the standard output stream \n of the process represented by this <code>Process</code> object. \n <p>\n Implementation note: It is a good idea for the input stream to \n be buffered.\n\n @return  the input stream connected to the normal output of the\n          subprocess.\n @see ProcessBuilder#redirectErrorStream()\n"
12211,method,java/lang/Process/getErrorStream/," Gets the error stream of the subprocess.\n The stream obtains data piped from the error output stream of the \n process represented by this <code>Process</code> object. \n <p>\n Implementation note: It is a good idea for the input stream to be \n buffered.\n\n @return  the input stream connected to the error stream of the\n          subprocess.\n @see ProcessBuilder#redirectErrorStream()\n"
12212,method,java/lang/Process/waitFor/," causes the current thread to wait, if necessary, until the \n process represented by this <code>Process</code> object has \n terminated. This method returns \n immediately if the subprocess has already terminated. If the\n subprocess has not yet terminated, the calling thread will be\n blocked until the subprocess exits.\n\n @return     the exit value of the process. By convention, \n             <code>0</code> indicates normal termination.\n @exception  InterruptedException  if the current thread is \n             {@linkplain Thread#interrupt() interrupted} by another\n             thread while it is waiting, then the wait is ended and\n             an {@link InterruptedException} is thrown.\n"
12216,class,java/lang/Package," <code>Package</code> objects contain version information\n about the implementation and specification of a Java package.\n This versioning information is retrieved and made available\n by the {@link ClassLoader <code>ClassLoader</code>} instance that\n loaded the class(es).  Typically, it is stored in the manifest that is\n distributed with the classes.\n\n <p>The set of classes that make up the package may implement a\n particular specification and if so the specification title, version number,\n and vendor strings identify that specification.\n An application can ask if the package is\n compatible with a particular version, see the {@link #isCompatibleWith\n <code>isCompatibleWith</code>} method for details.\n\n <p>Specification version numbers use a syntax that consists of positive\n decimal integers separated by periods ".", for example "2.0" or\n "1.2.3.4.5.6.7".  This allows an extensible number to be used to represent\n major, minor, micro, etc. versions.  The version specification is described\n by the following formal grammar:\n <blockquote>\n <dl>\n <dt><i>SpecificationVersion:\n <dd>Digits RefinedVersion<sub>opt</sub></i>\n\n <p><dt><i>RefinedVersion:</i>\n <dd><code>.</code> <i>Digits</i>\n <dd><code>.</code> <i>Digits RefinedVersion</i>\n\n <p><dt><i>Digits:\n <dd>Digit\n <dd>Digits</i>\n\n <p><dt><i>Digit:</i>\n <dd>any character for which {@link Character#isDigit} returns <code>true</code>,\n e.g. 0, 1, 2, ...\n </dl>\n </blockquote>\n\n <p>The implementation title, version, and vendor strings identify an\n implementation and are made available conveniently to enable accurate\n reporting of the packages involved when a problem occurs. The contents\n all three implementation strings are vendor specific. The\n implementation version strings have no specified syntax and should\n only be compared for equality with desired version identifiers.\n\n <p>Within each <code>ClassLoader</code> instance all classes from the same\n java package have the same Package object.  The static methods allow a package\n to be found by name or the set of all packages known to the current class\n loader to be found.\n\n @see ClassLoader#definePackage\n"
12222,method,java/lang/Package/getImplementationVersion/," Return the version of this implementation. It consists of any string\n assigned by the vendor of this implementation and does\n not have any particular syntax specified or expected by the Java\n runtime. It may be compared for equality with other\n package version strings used for this implementation\n by this vendor for this package.\n @return the version of the implementation, null is returned if it is not known.\n"
12226,method,java/lang/Package/isCompatibleWith/String," Compare this package's specification version with a\n desired version. It returns true if\n this packages specification version number is greater than or equal\n to the desired version number. <p>\n\n Version numbers are compared by sequentially comparing corresponding\n components of the desired and specification strings.\n Each component is converted as a decimal integer and the values\n compared.\n If the specification value is greater than the desired\n value true is returned. If the value is less false is returned.\n If the values are equal the period is skipped and the next pair of\n components is compared.\n\n @param desired the version string of the desired version.\n @return true if this package's version number is greater\n 		than or equal to the desired version number\n\n @exception NumberFormatException if the desired or current version\n		is not of the correct dotted form.\n"
12227,method,java/lang/Package/getPackage/String," Find a package by name in the callers <code>ClassLoader</code> instance.\n The callers <code>ClassLoader</code> instance is used to find the package\n instance corresponding to the named class. If the callers\n <code>ClassLoader</code> instance is null then the set of packages loaded\n by the system <code>ClassLoader</code> instance is searched to find the\n named package. <p>\n\n Packages have attributes for versions and specifications only if the class\n loader created the package instance with the appropriate attributes. Typically,\n those attributes are defined in the manifests that accompany the classes.\n\n @param name a package name, for example, java.lang.\n @return the package of the requested name. It may be null if no package\n 		information is available from the archive or codebase.\n"
12228,method,java/lang/Package/getPackages/," Get all the packages currently known for the caller's <code>ClassLoader</code>\n instance.  Those packages correspond to classes loaded via or accessible by\n name to that <code>ClassLoader</code> instance.  If the caller's\n <code>ClassLoader</code> instance is the bootstrap <code>ClassLoader</code>\n instance, which may be represented by <code>null</code> in some implementations,\n only packages corresponding to classes loaded by the bootstrap\n <code>ClassLoader</code> instance will be returned.\n\n @return a new array of packages known to the callers <code>ClassLoader</code>\n instance.  An zero length array is returned if none are known.\n"
12231,method,java/lang/Package/getAnnotation/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
12232,method,java/lang/Package/isAnnotationPresent/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
12239,class,java/lang/Object," Class <code>Object</code> is the root of the class hierarchy. \n Every class has <code>Object</code> as a superclass. All objects, \n including arrays, implement the methods of this class. \n\n @author  unascribed\n @version 1.74, 03/23/10\n @see     java.lang.Class\n @since   JDK1.0\n"
12240,method,java/lang/Object/getClass/," Returns the runtime class of this {@code Object}. The returned\n {@code Class} object is the object that is locked by {@code\n static synchronized} methods of the represented class.\n\n <p><b>The actual result type is {@code Class<? extends |X|>}\n where {@code |X|} is the erasure of the static type of the\n expression on which {@code getClass} is called.</b> For\n example, no cast is required in this code fragment:</p>\n\n <p>\n {@code Number n = 0;                             }<br>\n {@code Class<? extends Number> c = n.getClass(); }\n </p>\n\n @return The {@code Class} object that represents the runtime\n         class of this object.\n @see    <a href="http://java.sun.com/docs/books/jls/">The Java\n         Language Specification, Third Edition (15.8.2 Class\n         Literals)</a>\n"
12250,method,java/lang/Object/finalize/," Called by the garbage collector on an object when garbage collection\n determines that there are no more references to the object.\n A subclass overrides the <code>finalize</code> method to dispose of\n system resources or to perform other cleanup. \n <p>\n The general contract of <tt>finalize</tt> is that it is invoked \n if and when the Java<font size="-2"><sup>TM</sup></font> virtual \n machine has determined that there is no longer any\n means by which this object can be accessed by any thread that has\n not yet died, except as a result of an action taken by the\n finalization of some other object or class which is ready to be\n finalized. The <tt>finalize</tt> method may take any action, including\n making this object available again to other threads; the usual purpose\n of <tt>finalize</tt>, however, is to perform cleanup actions before \n the object is irrevocably discarded. For example, the finalize method \n for an object that represents an input/output connection might perform\n explicit I/O transactions to break the connection before the object is\n permanently discarded. \n <p>\n The <tt>finalize</tt> method of class <tt>Object</tt> performs no \n special action; it simply returns normally. Subclasses of \n <tt>Object</tt> may override this definition.\n <p>\n The Java programming language does not guarantee which thread will \n invoke the <tt>finalize</tt> method for any given object. It is \n guaranteed, however, that the thread that invokes finalize will not \n be holding any user-visible synchronization locks when finalize is \n invoked. If an uncaught exception is thrown by the finalize method, \n the exception is ignored and finalization of that object terminates.\n <p>\n After the <tt>finalize</tt> method has been invoked for an object, no \n further action is taken until the Java virtual machine has again \n determined that there is no longer any means by which this object can \n be accessed by any thread that has not yet died, including possible\n actions by other objects or classes which are ready to be finalized, \n at which point the object may be discarded.\n <p>\n The <tt>finalize</tt> method is never invoked more than once by a Java\n virtual machine for any given object.\n <p>\n Any exception thrown by the <code>finalize</code> method causes \n the finalization of this object to be halted, but is otherwise \n ignored. \n\n @throws Throwable the <code>Exception</code> raised by this method\n"
12256,method,java/lang/Number/intValue/," Returns the value of the specified number as an <code>int</code>.\n This may involve rounding or truncation.\n\n @return  the numeric value represented by this object after conversion\n          to type <code>int</code>.\n"
12257,method,java/lang/Number/longValue/," Returns the value of the specified number as a <code>long</code>.\n This may involve rounding or truncation.\n\n @return  the numeric value represented by this object after conversion\n          to type <code>long</code>.\n"
12258,method,java/lang/Number/floatValue/," Returns the value of the specified number as a <code>float</code>.\n This may involve rounding.\n\n @return  the numeric value represented by this object after conversion\n          to type <code>float</code>.\n"
12259,method,java/lang/Number/doubleValue/," Returns the value of the specified number as a <code>double</code>.\n This may involve rounding.\n\n @return  the numeric value represented by this object after conversion\n          to type <code>double</code>.\n"
12260,method,java/lang/Number/byteValue/," Returns the value of the specified number as a <code>byte</code>.\n This may involve rounding or truncation.\n\n @return  the numeric value represented by this object after conversion\n          to type <code>byte</code>.\n @since   JDK1.1\n"
12261,method,java/lang/Number/shortValue/," Returns the value of the specified number as a <code>short</code>.\n This may involve rounding or truncation.\n\n @return  the numeric value represented by this object after conversion\n          to type <code>short</code>.\n @since   JDK1.1\n"
12269,class,java/lang/NoSuchMethodError," Thrown if an application tries to call a specified method of a \n class (either static or instance), and that class no longer has a \n definition of that method. \n <p>\n Normally, this error is caught by the compiler; this error can \n only occur at run time if the definition of a class has \n incompatibly changed. \n\n @author  unascribed\n @version 1.23, 03/23/10\n @since   JDK1.0\n"
12275,class,java/lang/NoSuchFieldError," Thrown if an application tries to access or modify a specified \n field of an object, and that object no longer has that field. \n <p>\n Normally, this error is caught by the compiler; this error can \n only occur at run time if the definition of a class has \n incompatibly changed. \n\n @author  unascribed\n @version 1.14, 03/23/10\n @since   JDK1.0\n"
12278,class,java/lang/NoClassDefFoundError," Thrown if the Java Virtual Machine or a <code>ClassLoader</code> instance\n tries to load in the definition of a class (as part of a normal method call\n or as part of creating a new instance using the <code>new</code> expression)\n and no definition of the class could be found. \n <p>\n The searched-for class definition existed when the currently \n executing class was compiled, but the definition can no longer be \n found. \n\n @author  unascribed\n @version 1.24, 03/23/10\n @since   JDK1.0\n"
12292,method,java/lang/Math/toDegrees/double," Converts an angle measured in radians to an approximately\n equivalent angle measured in degrees.  The conversion from\n radians to degrees is generally inexact; users should\n <i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly\n equal <code>0.0</code>.\n\n @param   angrad   an angle, in radians\n @return  the measurement of the angle <code>angrad</code>\n          in degrees.\n @since   1.2\n"
12299,method,java/lang/Math/ceil/double," Returns the smallest (closest to negative infinity)\n <code>double</code> value that is greater than or equal to the\n argument and is equal to a mathematical integer. Special cases:\n <ul><li>If the argument value is already equal to a\n mathematical integer, then the result is the same as the\n argument.  <li>If the argument is NaN or an infinity or\n positive zero or negative zero, then the result is the same as\n the argument.  <li>If the argument value is less than zero but\n greater than -1.0, then the result is negative zero.</ul> Note\n that the value of <code>Math.ceil(x)</code> is exactly the\n value of <code>-Math.floor(-x)</code>.\n\n\n @param   a   a value.\n @return  the smallest (closest to negative infinity) \n          floating-point value that is greater than or equal to \n          the argument and is equal to a mathematical integer. \n"
12306,method,java/lang/Math/random/," Returns a <code>double</code> value with a positive sign, greater \n than or equal to <code>0.0</code> and less than <code>1.0</code>. \n Returned values are chosen pseudorandomly with (approximately) \n uniform distribution from that range. \n \n <p>When this method is first called, it creates a single new\n pseudorandom-number generator, exactly as if by the expression\n <blockquote><pre>new java.util.Random</pre></blockquote> This\n new pseudorandom-number generator is used thereafter for all\n calls to this method and is used nowhere else.\n \n <p>This method is properly synchronized to allow correct use by\n more than one thread. However, if many threads need to generate\n pseudorandom numbers at a great rate, it may reduce contention\n for each thread to have its own pseudorandom-number generator.\n  \n @return  a pseudorandom <code>double</code> greater than or equal \n to <code>0.0</code> and less than <code>1.0</code>.\n @see     java.util.Random#nextDouble()\n"
12307,method,java/lang/Math/abs/int," Returns the absolute value of an <code>int</code> value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned. \n \n <p>Note that if the argument is equal to the value of\n <code>Integer.MIN_VALUE</code>, the most negative representable\n <code>int</code> value, the result is that same value, which is\n negative.\n\n @param   a   the argument whose absolute value is to be determined\n @return  the absolute value of the argument.\n @see     java.lang.Integer#MIN_VALUE\n"
12308,method,java/lang/Math/abs/long," Returns the absolute value of a <code>long</code> value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned. \n \n <p>Note that if the argument is equal to the value of\n <code>Long.MIN_VALUE</code>, the most negative representable\n <code>long</code> value, the result is that same value, which\n is negative.\n\n @param   a   the argument whose absolute value is to be determined\n @return  the absolute value of the argument.\n @see     java.lang.Long#MIN_VALUE\n"
12313,method,java/lang/Math/max/float;float," Returns the greater of two <code>float</code> values.  That is,\n the result is the argument closer to positive infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero.\n\n @param   a   an argument.\n @param   b   another argument.\n @return  the larger of <code>a</code> and <code>b</code>.\n"
12314,method,java/lang/Math/max/double;double," Returns the greater of two <code>double</code> values.  That\n is, the result is the argument closer to positive infinity. If\n the arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero.\n\n @param   a   an argument.\n @param   b   another argument.\n @return  the larger of <code>a</code> and <code>b</code>.\n"
12317,method,java/lang/Math/min/float;float," Returns the smaller of two <code>float</code> values.  That is,\n the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero.  If\n one argument is positive zero and the other is negative zero,\n the result is negative zero.\n\n @param   a   an argument.\n @param   b   another argument.\n @return  the smaller of <code>a</code> and <code>b.</code>\n"
12318,method,java/lang/Math/min/double;double," Returns the smaller of two <code>double</code> values.  That\n is, the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other is negative zero, the\n result is negative zero.\n\n @param   a   an argument.\n @param   b   another argument.\n @return  the smaller of <code>a</code> and <code>b</code>.\n"
12319,method,java/lang/Math/ulp/double," Returns the size of an ulp of the argument.  An ulp of a\n <code>double</code> value is the positive distance between this\n floating-point value and the <code>double</code> value next\n larger in magnitude.  Note that for non-NaN <i>x</i>,\n <code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.\n \n <p>Special Cases:\n <ul>\n <li> If the argument is NaN, then the result is NaN.\n <li> If the argument is positive or negative infinity, then the\n result is positive infinity.\n <li> If the argument is positive or negative zero, then the result is\n <code>Double.MIN_VALUE</code>.\n <li> If the argument is &plusmn;<code>Double.MAX_VALUE</code>, then\n the result is equal to 2<sup>971</sup>.\n </ul>\n\n @param d the floating-point value whose ulp is to be returned\n @return the size of an ulp of the argument\n @author Joseph D. Darcy\n @since 1.5\n"
12320,method,java/lang/Math/ulp/float," Returns the size of an ulp of the argument.  An ulp of a\n <code>float</code> value is the positive distance between this\n floating-point value and the <code>float</code> value next\n larger in magnitude.  Note that for non-NaN <i>x</i>,\n <code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.\n \n <p>Special Cases:\n <ul>\n <li> If the argument is NaN, then the result is NaN.\n <li> If the argument is positive or negative infinity, then the\n result is positive infinity.\n <li> If the argument is positive or negative zero, then the result is\n <code>Float.MIN_VALUE</code>.\n <li> If the argument is &plusmn;<code>Float.MAX_VALUE</code>, then\n the result is equal to 2<sup>104</sup>.\n </ul>\n\n @param f the floating-point value whose ulp is to be returned\n @return the size of an ulp of the argument\n @author Joseph D. Darcy\n @since 1.5\n"
12333,method,java/lang/Math/nextAfter/double;double," Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal the second argument is returned.\n\n <p>\n Special cases:\n <ul>\n <li> If either argument is a NaN, then NaN is returned.\n\n <li> If both arguments are signed zeros, {@code direction}\n is returned unchanged (as implied by the requirement of\n returning the second argument if the arguments compare as\n equal).\n\n <li> If {@code start} is\n &plusmn;{@link Double#MIN_VALUE} and {@code direction}\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as {@code start}\n is returned.\n\n <li> If {@code start} is infinite and\n {@code direction} has a value such that the result should\n have a smaller magnitude, {@link Double#MAX_VALUE} with the\n same sign as {@code start} is returned.\n\n <li> If {@code start} is equal to &plusmn;\n {@link Double#MAX_VALUE} and {@code direction} has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as {@code start} is returned.\n </ul>\n\n @param start  starting floating-point value\n @param direction value indicating which of\n {@code start}'s neighbors or {@code start} should\n be returned\n @return The floating-point number adjacent to {@code start} in the\n direction of {@code direction}.\n @since 1.6\n"
12334,method,java/lang/Math/nextAfter/float;double," Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal a value equivalent to the second argument\n is returned.\n\n <p>\n Special cases:\n <ul>\n <li> If either argument is a NaN, then NaN is returned.\n\n <li> If both arguments are signed zeros, a value equivalent\n to {@code direction} is returned.\n\n <li> If {@code start} is\n &plusmn;{@link Float#MIN_VALUE} and {@code direction}\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as {@code start}\n is returned.\n\n <li> If {@code start} is infinite and\n {@code direction} has a value such that the result should\n have a smaller magnitude, {@link Float#MAX_VALUE} with the\n same sign as {@code start} is returned.\n\n <li> If {@code start} is equal to &plusmn;\n {@link Float#MAX_VALUE} and {@code direction} has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as {@code start} is returned.\n </ul>\n\n @param start  starting floating-point value\n @param direction value indicating which of\n {@code start}'s neighbors or {@code start} should\n be returned\n @return The floating-point number adjacent to {@code start} in the\n direction of {@code direction}.\n @since 1.6\n"
12335,method,java/lang/Math/nextUp/double," Returns the floating-point value adjacent to {@code d} in\n the direction of positive infinity.  This method is\n semantically equivalent to {@code nextAfter(d,\n Double.POSITIVE_INFINITY)}; however, a {@code nextUp}\n implementation may run faster than its equivalent\n {@code nextAfter} call.\n\n <p>Special Cases:\n <ul>\n <li> If the argument is NaN, the result is NaN.\n\n <li> If the argument is positive infinity, the result is\n positive infinity.\n\n <li> If the argument is zero, the result is\n {@link Double#MIN_VALUE}\n\n </ul>\n\n @param d starting floating-point value\n @return The adjacent floating-point value closer to positive\n infinity.\n @since 1.6\n"
12336,method,java/lang/Math/nextUp/float," Returns the floating-point value adjacent to {@code f} in\n the direction of positive infinity.  This method is\n semantically equivalent to {@code nextAfter(f,\n Float.POSITIVE_INFINITY)}; however, a {@code nextUp}\n implementation may run faster than its equivalent\n {@code nextAfter} call.\n\n <p>Special Cases:\n <ul>\n <li> If the argument is NaN, the result is NaN.\n\n <li> If the argument is positive infinity, the result is\n positive infinity.\n\n <li> If the argument is zero, the result is\n {@link Float#MIN_VALUE}\n\n </ul>\n\n @param f starting floating-point value\n @return The adjacent floating-point value closer to positive\n infinity.\n @since 1.6\n"
12337,method,java/lang/Math/scalb/double;int," Return {@code d} &times;\n 2<sup>{@code scaleFactor}</sup> rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the double value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between {@link\n Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than {@code Double.MAX_EXPONENT}, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when {@code scalb(x, n)}\n is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n <i>x</i>.  When the result is non-NaN, the result has the same\n sign as {@code d}.\n\n<p>\n Special cases:\n <ul>\n <li> If the first argument is NaN, NaN is returned.\n <li> If the first argument is infinite, then an infinity of the\n same sign is returned.\n <li> If the first argument is zero, then a zero of the same\n sign is returned.\n </ul>\n\n @param d number to be scaled by a power of two.\n @param scaleFactor power of 2 used to scale {@code d}\n @return {@code d} &times; 2<sup>{@code scaleFactor}</sup>\n @since 1.6\n"
12338,method,java/lang/Math/scalb/float;int," Return {@code f} &times;\n 2<sup>{@code scaleFactor}</sup> rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the float value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between {@link\n Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than {@code Float.MAX_EXPONENT}, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when {@code scalb(x, n)}\n is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n <i>x</i>.  When the result is non-NaN, the result has the same\n sign as {@code f}.\n\n<p>\n Special cases:\n <ul>\n <li> If the first argument is NaN, NaN is returned.\n <li> If the first argument is infinite, then an infinity of the\n same sign is returned.\n <li> If the first argument is zero, then a zero of the same\n sign is returned.\n </ul>\n\n @param f number to be scaled by a power of two.\n @param scaleFactor power of 2 used to scale {@code f}\n @return {@code f} &times; 2<sup>{@code scaleFactor}</sup>\n @since 1.6\n"
12341,class,java/lang/Long," The <code>Long</code> class wraps a value of the primitive type\n <code>long</code> in an object. An object of type <code>Long</code>\n contains a single field whose type is <code>long</code>.\n\n <p> \n\n In addition, this class provides several methods for converting a\n <code>long</code> to a <code>String</code> and a\n <code>String</code> to a <code>long</code>, as well as other\n constants and methods useful when dealing with a <code>long</code>.\n\n <p>Implementation note: The implementations of the "bit twiddling"\n methods (such as {@link #highestOneBit(long) highestOneBit} and\n {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are\n based on material from Henry S. Warren, Jr.'s <i>Hacker's\n Delight</i>, (Addison Wesley, 2002).\n\n @author  Lee Boynton\n @author  Arthur van Hoff\n @author  Josh Bloch\n @version 1.83, 03/23/10\n @since   JDK1.0\n"
12342,method,java/lang/Long/toString/long;int," Returns a string representation of the first argument in the\n radix specified by the second argument.\n <p>\n If the radix is smaller than <code>Character.MIN_RADIX</code>\n or larger than <code>Character.MAX_RADIX</code>, then the radix\n <code>10</code> is used instead.\n <p>\n If the first argument is negative, the first element of the\n result is the ASCII minus sign <code>'-'</code>\n (<code>'&#92;u002d'</code>). If the first argument is not\n negative, no sign character appears in the result.\n <p>\n The remaining characters of the result represent the magnitude\n of the first argument. If the magnitude is zero, it is\n represented by a single zero character <code>'0'</code>\n (<code>'&#92;u0030'</code>); otherwise, the first character of\n the representation of the magnitude will not be the zero\n character.  The following ASCII characters are used as digits:\n <blockquote><pre>\n   0123456789abcdefghijklmnopqrstuvwxyz\n </pre></blockquote>\n These are <code>'&#92;u0030'</code> through\n <code>'&#92;u0039'</code> and <code>'&#92;u0061'</code> through\n <code>'&#92;u007a'</code>. If <code>radix</code> is\n <var>N</var>, then the first <var>N</var> of these characters\n are used as radix-<var>N</var> digits in the order shown. Thus,\n the digits for hexadecimal (radix 16) are\n <code>0123456789abcdef</code>. If uppercase letters are\n desired, the {@link java.lang.String#toUpperCase()} method may\n be called on the result:\n <blockquote><pre>\n Long.toString(n, 16).toUpperCase()\n </pre></blockquote>\n \n @param   i       a <code>long</code>to be converted to a string.\n @param   radix   the radix to use in the string representation.\n @return  a string representation of the argument in the specified radix.\n @see     java.lang.Character#MAX_RADIX\n @see     java.lang.Character#MIN_RADIX\n"
12343,method,java/lang/Long/toHexString/long," Returns a string representation of the <code>long</code>\n argument as an unsigned integer in base&nbsp;16.\n <p>\n The unsigned <code>long</code> value is the argument plus\n 2<sup>64</sup> if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in hexadecimal (base&nbsp;16) with no extra\n leading <code>0</code>s.  If the unsigned magnitude is zero, it\n is represented by a single zero character <code>'0'</code>\n (<code>'&#92;u0030'</code>); otherwise, the first character of\n the representation of the unsigned magnitude will not be the\n zero character. The following characters are used as\n hexadecimal digits:\n <blockquote><pre>\n 0123456789abcdef\n </pre></blockquote>\n These are the characters <code>'&#92;u0030'</code> through\n <code>'&#92;u0039'</code> and  <code>'&#92;u0061'</code> through\n <code>'&#92;u0066'</code>.  If uppercase letters are desired,\n the {@link java.lang.String#toUpperCase()} method may be called\n on the result:\n <blockquote><pre>\n Long.toHexString(n).toUpperCase()\n </pre></blockquote>\n\n @param   i   a <code>long</code> to be converted to a string.\n @return  the string representation of the unsigned <code>long</code>\n 		value represented by the argument in hexadecimal\n		(base&nbsp;16).\n @since   JDK 1.0.2\n"
12361,method,java/lang/Long/equals/Object," Compares this object to the specified object.  The result is\n <code>true</code> if and only if the argument is not\n <code>null</code> and is a <code>Long</code> object that\n contains the same <code>long</code> value as this object.\n\n @param   obj   the object to compare with.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n"
12363,method,java/lang/Long/getLong/String;long," Determines the <code>long</code> value of the system property\n with the specified name.\n <p>\n The first argument is treated as the name of a system property.\n System properties are accessible through the {@link\n java.lang.System#getProperty(java.lang.String)} method. The\n string value of this property is then interpreted as a\n <code>long</code> value and a <code>Long</code> object\n representing this value is returned.  Details of possible\n numeric formats can be found with the definition of\n <code>getProperty</code>.\n <p>\n The second argument is the default value. A <code>Long</code> object\n that represents the value of the second argument is returned if there\n is no property of the specified name, if the property does not have\n the correct numeric format, or if the specified name is empty or null.\n <p>\n In other words, this method returns a <code>Long</code> object equal \n to the value of:\n <blockquote><code>\n getLong(nm, new Long(val))\n </code></blockquote>\n but in practice it may be implemented in a manner such as: \n <blockquote><pre>\n Long result = getLong(nm, null);\n return (result == null) ? new Long(val) : result;\n </pre></blockquote>\n to avoid the unnecessary allocation of a <code>Long</code> object when \n the default value is not needed. \n\n @param   nm    property name.\n @param   val   default value.\n @return  the <code>Long</code> value of the property.\n @see     java.lang.System#getProperty(java.lang.String)\n @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n"
12364,method,java/lang/Long/getLong/String;Long," Returns the <code>long</code> value of the system property with\n the specified name.  The first argument is treated as the name\n of a system property.  System properties are accessible through\n the {@link java.lang.System#getProperty(java.lang.String)}\n method. The string value of this property is then interpreted\n as a <code>long</code> value, as per the\n <code>Long.decode</code> method, and a <code>Long</code> object\n representing this value is returned.\n <p><ul>\n <li>If the property value begins with the two ASCII characters\n <code>0x</code> or the ASCII character <code>#</code>, not followed by \n a minus sign, then the rest of it is parsed as a hexadecimal integer\n exactly as for the method {@link #valueOf(java.lang.String, int)} \n with radix 16. \n <li>If the property value begins with the ASCII character\n <code>0</code> followed by another character, it is parsed as\n an octal integer exactly as by the method {@link\n #valueOf(java.lang.String, int)} with radix 8.\n <li>Otherwise the property value is parsed as a decimal\n integer exactly as by the method \n {@link #valueOf(java.lang.String, int)} with radix 10.\n </ul>\n <p>\n Note that, in every case, neither <code>L</code>\n (<code>'&#92;u004C'</code>) nor <code>l</code>\n (<code>'&#92;u006C'</code>) is permitted to appear at the end\n of the property value as a type indicator, as would be\n permitted in Java programming language source code.\n <p>\n The second argument is the default value. The default value is\n returned if there is no property of the specified name, if the\n property does not have the correct numeric format, or if the\n specified name is empty or <code>null</code>.\n\n @param   nm   property name.\n @param   val   default value.\n @return  the <code>Long</code> value of the property.\n @see     java.lang.System#getProperty(java.lang.String)\n @see java.lang.System#getProperty(java.lang.String, java.lang.String)\n @see java.lang.Long#decode\n"
12368,method,java/lang/Long/numberOfLeadingZeros/long," Returns the number of zero bits preceding the highest-order\n ("leftmost") one-bit in the two's complement binary representation\n of the specified <tt>long</tt> value.  Returns 64 if the\n specified value has no one-bits in its two's complement representation,\n in other words if it is equal to zero.\n\n <p>Note that this method is closely related to the logarithm base 2.\n For all positive <tt>long</tt> values x:\n <ul>\n <li>floor(log<sub>2</sub>(x)) = <tt>63 - numberOfLeadingZeros(x)</tt>\n <li>ceil(log<sub>2</sub>(x)) = <tt>64 - numberOfLeadingZeros(x - 1)</tt>\n </ul>\n\n @return the number of zero bits preceding the highest-order\n     ("leftmost") one-bit in the two's complement binary representation\n     of the specified <tt>long</tt> value, or 64 if the value\n     is equal to zero.\n @since 1.5\n"
12371,method,java/lang/Long/rotateLeft/long;int," Returns the value obtained by rotating the two's complement binary\n representation of the specified <tt>long</tt> value left by the\n specified number of bits.  (Bits shifted out of the left hand, or\n high-order, side reenter on the right, or low-order.)\n\n <p>Note that left rotation with a negative distance is equivalent to\n right rotation: <tt>rotateLeft(val, -distance) == rotateRight(val,\n distance)</tt>.  Note also that rotation by any multiple of 64 is a\n no-op, so all but the last six bits of the rotation distance can be\n ignored, even if the distance is negative: <tt>rotateLeft(val,\n distance) == rotateLeft(val, distance & 0x3F)</tt>.\n\n @return the value obtained by rotating the two's complement binary\n     representation of the specified <tt>long</tt> value left by the\n     specified number of bits.\n @since 1.5\n"
12372,method,java/lang/Long/rotateRight/long;int," Returns the value obtained by rotating the two's complement binary\n representation of the specified <tt>long</tt> value right by the\n specified number of bits.  (Bits shifted out of the right hand, or\n low-order, side reenter on the left, or high-order.)\n\n <p>Note that right rotation with a negative distance is equivalent to\n left rotation: <tt>rotateRight(val, -distance) == rotateLeft(val,\n distance)</tt>.  Note also that rotation by any multiple of 64 is a\n no-op, so all but the last six bits of the rotation distance can be\n ignored, even if the distance is negative: <tt>rotateRight(val,\n distance) == rotateRight(val, distance & 0x3F)</tt>.\n\n @return the value obtained by rotating the two's complement binary\n     representation of the specified <tt>long</tt> value right by the\n     specified number of bits.\n @since 1.5\n"
12382,class,java/lang/LinkageError," Subclasses of <code>LinkageError</code> indicate that a class has \n some dependency on another class; however, the latter class has \n incompatibly changed after the compilation of the former class. \n\n\n @author  Frank Yellin\n @version 1.15, 03/23/10\n @since   JDK1.0\n"
12387,class,java/lang/InterruptedException," Thrown when a thread is waiting, sleeping, or otherwise occupied,\n and the thread is interrupted, either before or during the activity.\n Occasionally a method may wish to test whether the current\n thread has been interrupted, and if so, to immediately throw\n this exception.  The following code can be used to achieve\n this effect:\n <pre>\n  if (Thread.interrupted())  // Clears interrupted status!\n      throw new InterruptedException();\n </pre>\n\n @author  Frank Yellin\n @version 1.18, 03/23/10\n @see     java.lang.Object#wait()\n @see     java.lang.Object#wait(long)\n @see     java.lang.Object#wait(long, int)\n @see     java.lang.Thread#sleep(long)\n @see     java.lang.Thread#interrupt()\n @see     java.lang.Thread#interrupted()\n @since   JDK1.0\n"
12390,class,java/lang/InternalError," Thrown to indicate some unexpected internal error has occurred in \n the Java Virtual Machine. \n\n @author  unascribed\n @version 1.23, 03/23/10\n @since   JDK1.0\n"
12393,class,java/lang/Integer," The <code>Integer</code> class wraps a value of the primitive type\n <code>int</code> in an object. An object of type\n <code>Integer</code> contains a single field whose type is\n <code>int</code>.\n\n  <p>\n \n In addition, this class provides several methods for converting an\n <code>int</code> to a <code>String</code> and a <code>String</code>\n to an <code>int</code>, as well as other constants and methods\n useful when dealing with an <code>int</code>.\n\n <p>Implementation note: The implementations of the "bit twiddling"\n methods (such as {@link #highestOneBit(int) highestOneBit} and\n {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are\n based on material from Henry S. Warren, Jr.'s <i>Hacker's\n Delight</i>, (Addison Wesley, 2002).\n\n @author  Lee Boynton\n @author  Arthur van Hoff\n @author  Josh Bloch\n @version 1.94, 03/23/10\n @since JDK1.0\n"
12412,method,java/lang/Integer/equals/Object," Compares this object to the specified object.  The result is\n <code>true</code> if and only if the argument is not\n <code>null</code> and is an <code>Integer</code> object that\n contains the same <code>int</code> value as this object.\n\n @param   obj   the object to compare with.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n"
12414,method,java/lang/Integer/getInteger/String;int," Determines the integer value of the system property with the\n specified name.\n <p>\n The first argument is treated as the name of a system property.\n System properties are accessible through the {@link\n java.lang.System#getProperty(java.lang.String)} method. The \n string value of this property is then interpreted as an integer \n value and an <code>Integer</code> object representing this value is \n returned. Details of possible numeric formats can be found with \n the definition of <code>getProperty</code>. \n <p>\n The second argument is the default value. An <code>Integer</code> object\n that represents the value of the second argument is returned if there\n is no property of the specified name, if the property does not have\n the correct numeric format, or if the specified name is empty or\n  <code>null</code>.\n <p>\n In other words, this method returns an <code>Integer</code> object \n equal to the value of:\n <blockquote><code>\n getInteger(nm, new Integer(val))\n </code></blockquote>\n but in practice it may be implemented in a manner such as: \n <blockquote><pre>\n Integer result = getInteger(nm, null);\n return (result == null) ? new Integer(val) : result;\n </pre></blockquote>\n to avoid the unnecessary allocation of an <code>Integer</code> \n object when the default value is not needed. \n\n @param   nm   property name.\n @param   val   default value.\n @return  the <code>Integer</code> value of the property.\n @see     java.lang.System#getProperty(java.lang.String)\n @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n"
12420,method,java/lang/Integer/numberOfLeadingZeros/int," Returns the number of zero bits preceding the highest-order\n ("leftmost") one-bit in the two's complement binary representation\n of the specified <tt>int</tt> value.  Returns 32 if the\n specified value has no one-bits in its two's complement representation,\n in other words if it is equal to zero.\n\n <p>Note that this method is closely related to the logarithm base 2.\n For all positive <tt>int</tt> values x:\n <ul>\n <li>floor(log<sub>2</sub>(x)) = <tt>31 - numberOfLeadingZeros(x)</tt>\n <li>ceil(log<sub>2</sub>(x)) = <tt>32 - numberOfLeadingZeros(x - 1)</tt>\n </ul>\n\n @return the number of zero bits preceding the highest-order\n     ("leftmost") one-bit in the two's complement binary representation\n     of the specified <tt>int</tt> value, or 32 if the value\n     is equal to zero.\n @since 1.5\n"
12423,method,java/lang/Integer/rotateLeft/int;int," Returns the value obtained by rotating the two's complement binary\n representation of the specified <tt>int</tt> value left by the\n specified number of bits.  (Bits shifted out of the left hand, or\n high-order, side reenter on the right, or low-order.)\n\n <p>Note that left rotation with a negative distance is equivalent to\n right rotation: <tt>rotateLeft(val, -distance) == rotateRight(val,\n distance)</tt>.  Note also that rotation by any multiple of 32 is a\n no-op, so all but the last five bits of the rotation distance can be\n ignored, even if the distance is negative: <tt>rotateLeft(val,\n distance) == rotateLeft(val, distance & 0x1F)</tt>.\n\n @return the value obtained by rotating the two's complement binary\n     representation of the specified <tt>int</tt> value left by the\n     specified number of bits.\n @since 1.5\n"
12424,method,java/lang/Integer/rotateRight/int;int," Returns the value obtained by rotating the two's complement binary\n representation of the specified <tt>int</tt> value right by the\n specified number of bits.  (Bits shifted out of the right hand, or\n low-order, side reenter on the left, or high-order.)\n\n <p>Note that right rotation with a negative distance is equivalent to\n left rotation: <tt>rotateRight(val, -distance) == rotateLeft(val,\n distance)</tt>.  Note also that rotation by any multiple of 32 is a\n no-op, so all but the last five bits of the rotation distance can be\n ignored, even if the distance is negative: <tt>rotateRight(val,\n distance) == rotateRight(val, distance & 0x1F)</tt>.\n\n @return the value obtained by rotating the two's complement binary\n     representation of the specified <tt>int</tt> value right by the\n     specified number of bits.\n @since 1.5\n"
12437,class,java/lang/InstantiationError," Thrown when an application tries to use the Java <code>new</code> \n construct to instantiate an abstract class or an interface. \n <p>\n Normally, this error is caught by the compiler; this error can \n only occur at run time if the definition of a class has \n incompatibly changed. \n\n @author  unascribed\n @version 1.14, 03/23/10\n @since   JDK1.0\n"
12443,class,java/lang/IndexOutOfBoundsException," Thrown to indicate that an index of some sort (such as to an array, to a\n string, or to a vector) is out of range. \n <p>\n Applications can subclass this class to indicate similar exceptions. \n\n @author  Frank Yellin\n @version 1.13, 03/23/10\n @since   JDK1.0\n"
12449,class,java/lang/IllegalThreadStateException," Thrown to indicate that a thread is not in an appropriate state \n for the requested operation. See, for example, the \n <code>suspend</code> and <code>resume</code> methods in class \n <code>Thread</code>. \n\n @author  unascribed\n @version 1.23, 03/23/10\n @see     java.lang.Thread#resume()\n @see     java.lang.Thread#suspend()\n @since   JDK1.0\n"
12452,class,java/lang/IllegalStateException," Signals that a method has been invoked at an illegal or\n inappropriate time.  In other words, the Java environment or\n Java application is not in an appropriate state for the requested\n operation.\n\n @author  Jonni Kanerva\n @version 1.17, 03/23/10\n @since   JDK1.1\n"
12455,method,java/lang/IllegalStateException/IllegalStateException/String;Throwable," Constructs a new exception with the specified detail message and\n cause.\n\n <p>Note that the detail message associated with <code>cause</code> is\n <i>not</i> automatically incorporated in this exception's detail\n message.\n\n @param  message the detail message (which is saved for later retrieval\n         by the {@link Throwable#getMessage()} method).\n @param  cause the cause (which is saved for later retrieval by the\n         {@link Throwable#getCause()} method).  (A <tt>null</tt> value\n         is permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since 1.5\n"
12457,class,java/lang/IllegalMonitorStateException," Thrown to indicate that a thread has attempted to wait on an \n object's monitor or to notify other threads waiting on an object's\n monitor without owning the specified monitor. \n\n @author  unascribed\n @version 1.14, 03/23/10\n @see     java.lang.Object#notify()\n @see     java.lang.Object#notifyAll()\n @see     java.lang.Object#wait() \n @see     java.lang.Object#wait(long) \n @see     java.lang.Object#wait(long, int) \n @since   JDK1.0\n"
12460,class,java/lang/IllegalArgumentException," Thrown to indicate that a method has been passed an illegal or \n inappropriate argument.\n\n @author  unascribed\n @version 1.25, 03/23/10\n @see	    java.lang.Thread#setPriority(int)\n @since   JDK1.0\n"
12463,method,java/lang/IllegalArgumentException/IllegalArgumentException/String;Throwable," Constructs a new exception with the specified detail message and\n cause.\n\n <p>Note that the detail message associated with <code>cause</code> is\n <i>not</i> automatically incorporated in this exception's detail\n message.\n\n @param  message the detail message (which is saved for later retrieval\n         by the {@link Throwable#getMessage()} method).\n @param  cause the cause (which is saved for later retrieval by the\n         {@link Throwable#getCause()} method).  (A <tt>null</tt> value\n         is permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since 1.5\n"
12465,class,java/lang/IllegalAccessException," An IllegalAccessException is thrown when an application tries \n to reflectively create an instance (other than an array), \n set or get a field, or invoke a method, but the currently \n executing method does not have access to the definition of \n the specified class, field, method or constructor.\n\n @author  unascribed\n @version 1.16, 03/23/10\n @see     Class#newInstance()\n @see     java.lang.reflect.Field#set(Object, Object)\n @see     java.lang.reflect.Field#setBoolean(Object, boolean)\n @see     java.lang.reflect.Field#setByte(Object, byte)\n @see     java.lang.reflect.Field#setShort(Object, short)\n @see     java.lang.reflect.Field#setChar(Object, char)\n @see     java.lang.reflect.Field#setInt(Object, int)\n @see     java.lang.reflect.Field#setLong(Object, long)\n @see     java.lang.reflect.Field#setFloat(Object, float)\n @see     java.lang.reflect.Field#setDouble(Object, double)\n @see     java.lang.reflect.Field#get(Object)\n @see     java.lang.reflect.Field#getBoolean(Object)\n @see     java.lang.reflect.Field#getByte(Object)\n @see     java.lang.reflect.Field#getShort(Object)\n @see     java.lang.reflect.Field#getChar(Object)\n @see     java.lang.reflect.Field#getInt(Object)\n @see     java.lang.reflect.Field#getLong(Object)\n @see     java.lang.reflect.Field#getFloat(Object)\n @see     java.lang.reflect.Field#getDouble(Object)\n @see     java.lang.reflect.Method#invoke(Object, Object[])\n @see     java.lang.reflect.Constructor#newInstance(Object[])\n @since   JDK1.0\n"
12468,class,java/lang/IllegalAccessError," Thrown if an application attempts to access or modify a field, or \n to call a method that it does not have access to. \n <p>\n Normally, this error is caught by the compiler; this error can \n only occur at run time if the definition of a class has \n incompatibly changed. \n\n @author  unascribed\n @version 1.18, 03/23/10\n @since   JDK1.0\n"
12471,class,java/lang/Float," The <code>Float</code> class wraps a value of primitive type\n <code>float</code> in an object. An object of type\n <code>Float</code> contains a single field whose type is\n <code>float</code>.\n <p>\n In addition, this class provides several methods for converting a\n <code>float</code> to a <code>String</code> and a\n <code>String</code> to a <code>float</code>, as well as other\n constants and methods useful when dealing with a\n <code>float</code>.\n\n @author  Lee Boynton\n @author  Arthur van Hoff\n @author  Joseph D. Darcy\n @version 1.102, 03/23/10\n @since JDK1.0 \n"
12489,method,java/lang/Float/equals/Object,"\n Compares this object against the specified object.  The result\n is <code>true</code> if and only if the argument is not\n <code>null</code> and is a <code>Float</code> object that\n represents a <code>float</code> with the same value as the\n <code>float</code> represented by this object. For this\n purpose, two <code>float</code> values are considered to be the\n same if and only if the method {@link #floatToIntBits(float)}\n returns the identical <code>int</code> value when applied to\n each.\n <p>\n Note that in most cases, for two instances of class\n <code>Float</code>, <code>f1</code> and <code>f2</code>, the value\n of <code>f1.equals(f2)</code> is <code>true</code> if and only if\n <blockquote><pre>\n   f1.floatValue() == f2.floatValue()\n </pre></blockquote>\n <p>\n also has the value <code>true</code>. However, there are two exceptions:\n <ul>\n <li>If <code>f1</code> and <code>f2</code> both represent\n     <code>Float.NaN</code>, then the <code>equals</code> method returns\n     <code>true</code>, even though <code>Float.NaN==Float.NaN</code>\n     has the value <code>false</code>.\n <li>If <code>f1</code> represents <code>+0.0f</code> while\n     <code>f2</code> represents <code>-0.0f</code>, or vice\n     versa, the <code>equal</code> test has the value\n     <code>false</code>, even though <code>0.0f==-0.0f</code>\n     has the value <code>true</code>.\n </ul>\n This definition allows hash tables to operate properly.\n\n @param obj the object to be compared\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see java.lang.Float#floatToIntBits(float)\n"
12490,method,java/lang/Float/floatToIntBits/float," Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point "single format" bit\n layout.\n <p>\n Bit 31 (the bit that is selected by the mask \n <code>0x80000000</code>) represents the sign of the floating-point \n number. \n Bits 30-23 (the bits that are selected by the mask \n <code>0x7f800000</code>) represent the exponent. \n Bits 22-0 (the bits that are selected by the mask \n <code>0x007fffff</code>) represent the significand (sometimes called \n the mantissa) of the floating-point number. \n <p>If the argument is positive infinity, the result is \n <code>0x7f800000</code>. \n <p>If the argument is negative infinity, the result is \n <code>0xff800000</code>. \n <p>If the argument is NaN, the result is <code>0x7fc00000</code>. \n <p>\n In all cases, the result is an integer that, when given to the \n {@link #intBitsToFloat(int)} method, will produce a floating-point \n value the same as the argument to <code>floatToIntBits</code>\n (except all NaN values are collapsed to a single\n &quot;canonical&quot; NaN value).\n \n @param   value   a floating-point number.\n @return the bits that represent the floating-point number.  \n"
12491,method,java/lang/Float/floatToRawIntBits/float," Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point "single format" bit\n layout, preserving Not-a-Number (NaN) values.\n <p>\n Bit 31 (the bit that is selected by the mask \n <code>0x80000000</code>) represents the sign of the floating-point \n number. \n Bits 30-23 (the bits that are selected by the mask \n <code>0x7f800000</code>) represent the exponent. \n Bits 22-0 (the bits that are selected by the mask \n <code>0x007fffff</code>) represent the significand (sometimes called \n the mantissa) of the floating-point number. \n <p>If the argument is positive infinity, the result is \n <code>0x7f800000</code>. \n <p>If the argument is negative infinity, the result is \n <code>0xff800000</code>.\n <p>\n If the argument is NaN, the result is the integer representing\n the actual NaN value.  Unlike the <code>floatToIntBits</code>\n method, <code>floatToRawIntBits</code> does not collapse all the\n bit patterns encoding a NaN to a single &quot;canonical&quot;\n NaN value.\n <p>\n In all cases, the result is an integer that, when given to the\n {@link #intBitsToFloat(int)} method, will produce a\n floating-point value the same as the argument to\n <code>floatToRawIntBits</code>.\n @param   value   a floating-point number.\n @return the bits that represent the floating-point number.\n @since 1.3\n"
12494,method,java/lang/Float/compare/float;float," Compares the two specified <code>float</code> values. The sign\n of the integer value returned is the same as that of the\n integer that would be returned by the call:\n <pre>\n    new Float(f1).compareTo(new Float(f2))\n </pre>\n\n @param   f1        the first <code>float</code> to compare.\n @param   f2        the second <code>float</code> to compare.\n @return  the value <code>0</code> if <code>f1</code> is\n		numerically equal to <code>f2</code>; a value less than\n          <code>0</code> if <code>f1</code> is numerically less than\n		<code>f2</code>; and a value greater than <code>0</code>\n		if <code>f1</code> is numerically greater than\n		<code>f2</code>.\n @since 1.4 \n"
12504,field,java/lang/Float/MAX_EXPONENT," Maximum exponent a finite {@code float} variable may have.  It\n is equal to the value returned by {@code\n Math.getExponent(Float.MAX_VALUE)}.\n\n @since 1.6\n"
12505,field,java/lang/Float/MIN_EXPONENT," Minimum exponent a normalized {@code float} variable may have.\n It is equal to the value returned by {@code\n Math.getExponent(Float.MIN_NORMAL)}.\n\n @since 1.6\n"
12508,class,java/lang/ExceptionInInitializerError," Signals that an unexpected exception has occurred in a static initializer. \n An <code>ExceptionInInitializerError</code> is thrown to indicate that an \n exception occurred during evaluation of a static initializer or the\n initializer for a static variable.\n\n <p>As of release 1.4, this exception has been retrofitted to conform to\n the general purpose exception-chaining mechanism.  The "saved throwable\n object" that may be provided at construction time and accessed via\n the {@link #getException()} method is now known as the <i>cause</i>,\n and may be accessed via the {@link Throwable#getCause()} method, as well\n as the aforementioned "legacy method."\n\n @author  Frank Yellin\n @version 1.19, 03/23/10\n @since   JDK1.1\n"
12509,method,java/lang/ExceptionInInitializerError/getException/," Returns the exception that occurred during a static initialization that\n caused this error to be created.\n\n <p>This method predates the general-purpose exception chaining facility.\n The {@link Throwable#getCause()} method is now the preferred means of\n obtaining this information.\n \n @return the saved throwable object of this \n         <code>ExceptionInInitializerError</code>, or <code>null</code> \n         if this <code>ExceptionInInitializerError</code> has no saved \n         throwable object. \n"
12510,method,java/lang/ExceptionInInitializerError/getCause/," Returns the cause of this error (the exception that occurred\n during a static initialization that caused this error to be created).\n \n @return  the cause of this error or <code>null</code> if the\n          cause is nonexistent or unknown.\n @since   1.4\n"
12514,class,java/lang/Exception," The class <code>Exception</code> and its subclasses are a form of \n <code>Throwable</code> that indicates conditions that a reasonable \n application might want to catch.\n\n @author  Frank Yellin\n @version 1.33, 03/23/10\n @see     java.lang.Error\n @since   JDK1.0\n"
12515,method,java/lang/Exception/Exception/," Constructs a new exception with <code>null</code> as its detail message.\n The cause is not initialized, and may subsequently be initialized by a\n call to {@link #initCause}.\n"
12516,method,java/lang/Exception/Exception/String," Constructs a new exception with the specified detail message.  The\n cause is not initialized, and may subsequently be initialized by\n a call to {@link #initCause}.\n\n @param   message   the detail message. The detail message is saved for \n          later retrieval by the {@link #getMessage()} method.\n"
12517,method,java/lang/Exception/Exception/String;Throwable," Constructs a new exception with the specified detail message and\n cause.  <p>Note that the detail message associated with\n <code>cause</code> is <i>not</i> automatically incorporated in\n this exception's detail message.\n\n @param  message the detail message (which is saved for later retrieval\n         by the {@link #getMessage()} method).\n @param  cause the cause (which is saved for later retrieval by the\n         {@link #getCause()} method).  (A <tt>null</tt> value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since  1.4\n"
12520,method,java/lang/Error/Error/," Constructs a new error with <code>null</code> as its detail message.\n The cause is not initialized, and may subsequently be initialized by a\n call to {@link #initCause}.\n"
12521,method,java/lang/Error/Error/String," Constructs a new error with the specified detail message.  The\n cause is not initialized, and may subsequently be initialized by\n a call to {@link #initCause}.\n\n @param   message   the detail message. The detail message is saved for \n          later retrieval by the {@link #getMessage()} method.\n"
12522,method,java/lang/Error/Error/String;Throwable," Constructs a new error with the specified detail message and\n cause.  <p>Note that the detail message associated with\n <code>cause</code> is <i>not</i> automatically incorporated in\n this error's detail message.\n\n @param  message the detail message (which is saved for later retrieval\n         by the {@link #getMessage()} method).\n @param  cause the cause (which is saved for later retrieval by the\n         {@link #getCause()} method).  (A <tt>null</tt> value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since  1.4\n"
12523,method,java/lang/Error/Error/Throwable," Constructs a new error with the specified cause and a detail\n message of <tt>(cause==null ? null : cause.toString())</tt> (which\n typically contains the class and detail message of <tt>cause</tt>).\n This constructor is useful for errors that are little more than\n wrappers for other throwables.\n\n @param  cause the cause (which is saved for later retrieval by the\n         {@link #getCause()} method).  (A <tt>null</tt> value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)\n @since  1.4\n"
12535,method,java/lang/Enum/compareTo/Enum," Compares this enum with the specified object for order.  Returns a\n negative integer, zero, or a positive integer as this object is less\n than, equal to, or greater than the specified object.\n \n Enum constants are only comparable to other enum constants of the\n same enum type.  The natural order implemented by this\n method is the order in which the constants are declared.\n"
12536,method,java/lang/Enum/getDeclaringClass/," Returns the Class object corresponding to this enum constant's\n enum type.  Two enum constants e1 and  e2 are of the\n same enum type if and only if\n   e1.getDeclaringClass() == e2.getDeclaringClass().\n (The value returned by this method may differ from the one returned\n by the {@link Object#getClass} method for enum constants with\n constant-specific class bodies.)\n\n @return the Class object corresponding to this enum constant's\n     enum type\n"
12539,method,java/lang/Enum/Enum/String;int," Sole constructor.  Programmers cannot invoke this constructor.\n It is for use by code emitted by the compiler in response to\n enum type declarations.\n\n @param name - The name of this enum constant, which is the identifier\n               used to declare it.\n @param ordinal - The ordinal of this enumeration constant (its position\n         in the enum declaration, where the initial constant is assigned\n         an ordinal of zero).\n"
12540,class,java/lang/Double," The <code>Double</code> class wraps a value of the primitive type\n <code>double</code> in an object. An object of type\n <code>Double</code> contains a single field whose type is\n <code>double</code>.\n <p>\n In addition, this class provides several methods for converting a\n <code>double</code> to a <code>String</code> and a\n <code>String</code> to a <code>double</code>, as well as other\n constants and methods useful when dealing with a\n <code>double</code>.\n\n @author  Lee Boynton\n @author  Arthur van Hoff\n @author  Joseph D. Darcy\n @version 1.101, 03/23/10\n @since JDK1.0\n"
12558,method,java/lang/Double/equals/Object," Compares this object against the specified object.  The result\n is <code>true</code> if and only if the argument is not\n <code>null</code> and is a <code>Double</code> object that\n represents a <code>double</code> that has the same value as the\n <code>double</code> represented by this object. For this\n purpose, two <code>double</code> values are considered to be\n the same if and only if the method {@link\n #doubleToLongBits(double)} returns the identical\n <code>long</code> value when applied to each.\n <p>\n Note that in most cases, for two instances of class\n <code>Double</code>, <code>d1</code> and <code>d2</code>, the\n value of <code>d1.equals(d2)</code> is <code>true</code> if and\n only if\n <blockquote><pre>\n   d1.doubleValue()&nbsp;== d2.doubleValue()\n </pre></blockquote>\n <p>\n also has the value <code>true</code>. However, there are two\n exceptions:\n <ul>\n <li>If <code>d1</code> and <code>d2</code> both represent\n     <code>Double.NaN</code>, then the <code>equals</code> method\n     returns <code>true</code>, even though\n     <code>Double.NaN==Double.NaN</code> has the value\n     <code>false</code>.\n <li>If <code>d1</code> represents <code>+0.0</code> while\n     <code>d2</code> represents <code>-0.0</code>, or vice versa,\n     the <code>equal</code> test has the value <code>false</code>,\n     even though <code>+0.0==-0.0</code> has the value <code>true</code>.\n </ul>\n This definition allows hash tables to operate properly.\n @param   obj   the object to compare with.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see java.lang.Double#doubleToLongBits(double)\n"
12559,method,java/lang/Double/doubleToLongBits/double," Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point "double\n format" bit layout.\n <p>\n Bit 63 (the bit that is selected by the mask \n <code>0x8000000000000000L</code>) represents the sign of the \n floating-point number. Bits \n 62-52 (the bits that are selected by the mask \n <code>0x7ff0000000000000L</code>) represent the exponent. Bits 51-0 \n (the bits that are selected by the mask \n <code>0x000fffffffffffffL</code>) represent the significand \n (sometimes called the mantissa) of the floating-point number. \n <p>\n If the argument is positive infinity, the result is\n <code>0x7ff0000000000000L</code>.\n <p>\n If the argument is negative infinity, the result is\n <code>0xfff0000000000000L</code>.\n <p>\n If the argument is NaN, the result is \n <code>0x7ff8000000000000L</code>. \n <p>\n In all cases, the result is a <code>long</code> integer that, when \n given to the {@link #longBitsToDouble(long)} method, will produce a \n floating-point value the same as the argument to \n <code>doubleToLongBits</code> (except all NaN values are\n collapsed to a single &quot;canonical&quot; NaN value).\n\n @param   value   a <code>double</code> precision floating-point number.\n @return the bits that represent the floating-point number.  \n"
12560,method,java/lang/Double/doubleToRawLongBits/double," Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point "double\n format" bit layout, preserving Not-a-Number (NaN) values.\n <p>\n Bit 63 (the bit that is selected by the mask \n <code>0x8000000000000000L</code>) represents the sign of the \n floating-point number. Bits \n 62-52 (the bits that are selected by the mask \n <code>0x7ff0000000000000L</code>) represent the exponent. Bits 51-0 \n (the bits that are selected by the mask \n <code>0x000fffffffffffffL</code>) represent the significand \n (sometimes called the mantissa) of the floating-point number. \n <p>\n If the argument is positive infinity, the result is\n <code>0x7ff0000000000000L</code>.\n <p>\n If the argument is negative infinity, the result is\n <code>0xfff0000000000000L</code>.\n <p>\n If the argument is NaN, the result is the <code>long</code>\n integer representing the actual NaN value.  Unlike the\n <code>doubleToLongBits</code> method,\n <code>doubleToRawLongBits</code> does not collapse all the bit\n patterns encoding a NaN to a single &quot;canonical&quot; NaN\n value.\n <p>\n In all cases, the result is a <code>long</code> integer that,\n when given to the {@link #longBitsToDouble(long)} method, will\n produce a floating-point value the same as the argument to\n <code>doubleToRawLongBits</code>.\n\n @param   value   a <code>double</code> precision floating-point number.\n @return the bits that represent the floating-point number.\n @since 1.3\n"
12563,method,java/lang/Double/compare/double;double," Compares the two specified <code>double</code> values. The sign\n of the integer value returned is the same as that of the\n integer that would be returned by the call:\n <pre>\n    new Double(d1).compareTo(new Double(d2))\n </pre>\n\n @param   d1        the first <code>double</code> to compare\n @param   d2        the second <code>double</code> to compare\n @return  the value <code>0</code> if <code>d1</code> is\n		numerically equal to <code>d2</code>; a value less than\n          <code>0</code> if <code>d1</code> is numerically less than\n		<code>d2</code>; and a value greater than <code>0</code>\n		if <code>d1</code> is numerically greater than\n		<code>d2</code>.\n @since 1.4\n"
12572,field,java/lang/Double/MAX_EXPONENT," Maximum exponent a finite {@code double} variable may have.\n It is equal to the value returned by\n {@code Math.getExponent(Double.MAX_VALUE)}.\n\n @since 1.6\n"
12573,field,java/lang/Double/MIN_EXPONENT," Minimum exponent a normalized {@code double} variable may\n have.  It is equal to the value returned by\n {@code Math.getExponent(Double.MIN_NORMAL)}.\n\n @since 1.6\n"
12576,interface,java/lang/Deprecated," A program element annotated &#64;Deprecated is one that programmers\n are discouraged from using, typically because it is dangerous,\n or because a better alternative exists.  Compilers warn when a\n deprecated program element is used or overridden in non-deprecated code.\n\n @author  Neal Gafter\n @version 1.6, 03/23/10\n @since 1.5\n"
12577,class,java/lang/Compiler," The <code>Compiler</code> class is provided to support\n Java-to-native-code compilers and related services. By design, the\n <code>Compiler</code> class does nothing; it serves as a\n placeholder for a JIT compiler implementation.\n <p>\n When the Java Virtual Machine first starts, it determines if the\n system property <code>java.compiler</code> exists. (System\n properties are accessible through <code>getProperty</code>,\n a method defined by the <code>System</code> class.) If so, it is\n assumed to be the name of a library (with a platform-dependent\n exact location and type); the <code>loadLibrary</code> method in\n class <code>System</code> is called to load that library. If this\n loading succeeds, the function named\n <code>java_lang_Compiler_start()</code> in that library is called.\n <p>\n If no compiler is available, these methods do nothing.\n\n @author  Frank Yellin\n @version 1.23, 03/23/10\n @see     java.lang.System#getProperty(java.lang.String)\n @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n @see     java.lang.System#loadLibrary(java.lang.String)\n @since   JDK1.0\n"
12580,method,java/lang/Compiler/command/Object," Examines the argument type and its fields and perform some documented\n operation. No specific operations are required.\n\n @param   any   an argument.\n @return  a compiler-specific value, or <code>null</code> if no compiler\n          is available.\n @exception NullPointerException if <code>any</code> is \n          <code>null</code>.\n"
12589,class,java/lang/ClassNotFoundException," Thrown when an application tries to load in a class through its \n string name using:\n <ul>\n <li>The <code>forName</code> method in class <code>Class</code>.\n <li>The <code>findSystemClass</code> method in class\n     <code>ClassLoader</code> .\n <li>The <code>loadClass</code> method in class <code>ClassLoader</code>.\n </ul>\n <p>\n but no definition for the class with the specified name could be found. \n\n <p>As of release 1.4, this exception has been retrofitted to conform to\n the general purpose exception-chaining mechanism.  The "optional exception\n that was raised while loading the class" that may be provided at\n construction time and accessed via the {@link #getException()} method is\n now known as the <i>cause</i>, and may be accessed via the {@link\n Throwable#getCause()} method, as well as the aforementioned "legacy method."\n\n @author  unascribed\n @version 1.22, 03/23/10\n @see     java.lang.Class#forName(java.lang.String)\n @see     java.lang.ClassLoader#findSystemClass(java.lang.String)\n @see     java.lang.ClassLoader#loadClass(java.lang.String, boolean)\n @since   JDK1.0\n"
12590,method,java/lang/ClassNotFoundException/getException/," Returns the exception that was raised if an error occurred while\n attempting to load the class. Otherwise, returns <tt>null</tt>.\n\n <p>This method predates the general-purpose exception chaining facility.\n The {@link Throwable#getCause()} method is now the preferred means of\n obtaining this information.\n\n @return the <code>Exception</code> that was raised while loading a class\n @since 1.2\n"
12591,method,java/lang/ClassNotFoundException/getCause/," Returns the cause of this exception (the exception that was raised\n if an error occurred while attempting to load the class; otherwise\n <tt>null</tt>).\n\n @return  the cause of this exception.\n @since   1.4\n"
12596,method,java/lang/ClassLoader/loadClass/String," Loads the class with the specified <a href="#name">binary name</a>.\n This method searches for classes in the same manner as the {@link\n #loadClass(String, boolean)} method.  It is invoked by the Java virtual\n machine to resolve class references.  Invoking this method is equivalent\n to invoking {@link #loadClass(String, boolean) <tt>loadClass(name,\n false)</tt>}.  </p>\n\n @param  name\n         The <a href="#name">binary name</a> of the class\n\n @return  The resulting <tt>Class</tt> object\n\n @throws  ClassNotFoundException\n          If the class was not found\n"
12603,method,java/lang/ClassLoader/resolveClass/Class," Links the specified class.  This (misleadingly named) method may be\n used by a class loader to link a class.  If the class <tt>c</tt> has\n already been linked, then this method simply returns. Otherwise, the\n class is linked as described in the "Execution" chapter of the <a\n href="http://java.sun.com/docs/books/jls/">Java Language\n Specification</a>.\n </p>\n\n @param  c\n         The class to link\n\n @throws  NullPointerException\n          If <tt>c</tt> is <tt>null</tt>.\n\n @see  #defineClass(String, byte[], int, int)\n"
12604,method,java/lang/ClassLoader/findSystemClass/String," Finds a class with the specified <a href="#name">binary name</a>,\n loading it if necessary.\n\n <p> This method loads the class through the system class loader (see\n {@link #getSystemClassLoader()}).  The <tt>Class</tt> object returned\n might have more than one <tt>ClassLoader</tt> associated with it.\n Subclasses of <tt>ClassLoader</tt> need not usually invoke this method,\n because most class loaders need to override just {@link\n #findClass(String)}.  </p>\n\n @param  name\n         The <a href="#name">binary name</a> of the class\n\n @return  The <tt>Class</tt> object for the specified <tt>name</tt>\n\n @throws  ClassNotFoundException\n          If the class could not be found\n\n @see  #ClassLoader(ClassLoader)\n @see  #getParent()\n"
12607,method,java/lang/ClassLoader/getResource/String," Finds the resource with the given name.  A resource is some data\n (images, audio, text, etc) that can be accessed by class code in a way\n that is independent of the location of the code.\n\n <p> The name of a resource is a '<tt>/</tt>'-separated path name that\n identifies the resource.\n\n <p> This method will first search the parent class loader for the\n resource; if the parent is <tt>null</tt> the path of the class loader\n built-in to the virtual machine is searched.  That failing, this method\n will invoke {@link #findResource(String)} to find the resource.  </p>\n\n @param  name\n         The resource name\n\n @return  A <tt>URL</tt> object for reading the resource, or\n          <tt>null</tt> if the resource could not be found or the invoker\n          doesn't have adequate  privileges to get the resource.\n\n @since  1.1\n"
12608,method,java/lang/ClassLoader/getResources/String," Finds all the resources with the given name. A resource is some data\n (images, audio, text, etc) that can be accessed by class code in a way\n that is independent of the location of the code.\n\n <p>The name of a resource is a <tt>/</tt>-separated path name that\n identifies the resource.\n\n <p> The search order is described in the documentation for {@link\n #getResource(String)}.  </p>\n\n @param  name\n         The resource name\n\n @return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects for\n          the resource.  If no resources could  be found, the enumeration\n          will be empty.  Resources that the class loader doesn't have\n          access to will not be in the enumeration.\n\n @throws  IOException\n          If I/O errors occur\n\n @see  #findResources(String)\n\n @since  1.2\n"
12612,method,java/lang/ClassLoader/getSystemResources/String," Finds all resources of the specified name from the search path used to\n load classes.  The resources thus found are returned as an\n {@link java.util.Enumeration <tt>Enumeration</tt>} of {@link\n java.net.URL <tt>URL</tt>} objects.\n\n <p> The search order is described in the documentation for {@link\n #getSystemResource(String)}.  </p>\n\n @param  name\n         The resource name\n\n @return  An enumeration of resource {@link java.net.URL <tt>URL</tt>}\n          objects\n\n @throws  IOException\n          If I/O errors occur\n\n @since  1.2\n"
12615,method,java/lang/ClassLoader/getParent/," Returns the parent class loader for delegation. Some implementations may\n use <tt>null</tt> to represent the bootstrap class loader. This method\n will return <tt>null</tt> in such implementations if this class loader's\n parent is the bootstrap class loader.\n\n <p> If a security manager is present, and the invoker's class loader is\n not <tt>null</tt> and is not an ancestor of this class loader, then this\n method invokes the security manager's {@link\n SecurityManager#checkPermission(java.security.Permission)\n <tt>checkPermission</tt>} method with a {@link\n RuntimePermission#RuntimePermission(String)\n <tt>RuntimePermission("getClassLoader")</tt>} permission to verify\n access to the parent class loader is permitted.  If not, a\n <tt>SecurityException</tt> will be thrown.  </p>\n\n @return  The parent <tt>ClassLoader</tt>\n\n @throws  SecurityException\n          If a security manager exists and its <tt>checkPermission</tt>\n          method doesn't allow access to this class loader's parent class\n          loader.\n\n @since  1.2\n"
12620,method,java/lang/ClassLoader/findLibrary/String," Returns the absolute path name of a native library.  The VM invokes this\n method to locate the native libraries that belong to classes loaded with\n this class loader. If this method returns <tt>null</tt>, the VM\n searches the library along the path specified as the\n "<tt>java.library.path</tt>" property.  </p>\n\n @param  libname\n         The library name\n\n @return  The absolute path of the native library\n\n @see  System#loadLibrary(String)\n @see  System#mapLibraryName(String)\n\n @since  1.2\n"
12621,method,java/lang/ClassLoader/setDefaultAssertionStatus/boolean," Sets the default assertion status for this class loader.  This setting\n determines whether classes loaded by this class loader and initialized\n in the future will have assertions enabled or disabled by default.\n This setting may be overridden on a per-package or per-class basis by\n invoking {@link #setPackageAssertionStatus(String, boolean)} or {@link\n #setClassAssertionStatus(String, boolean)}.  </p>\n\n @param  enabled\n         <tt>true</tt> if classes loaded by this class loader will\n         henceforth have assertions enabled by default, <tt>false</tt>\n         if they will have assertions disabled by default.\n\n @since  1.4\n"
12622,method,java/lang/ClassLoader/setPackageAssertionStatus/String;boolean," Sets the package default assertion status for the named package.  The\n package default assertion status determines the assertion status for\n classes initialized in the future that belong to the named package or\n any of its "subpackages".\n\n <p> A subpackage of a package named p is any package whose name begins\n with "<tt>p.</tt>".  For example, <tt>javax.swing.text</tt> is a\n subpackage of <tt>javax.swing</tt>, and both <tt>java.util</tt> and\n <tt>java.lang.reflect</tt> are subpackages of <tt>java</tt>.\n\n <p> In the event that multiple package defaults apply to a given class,\n the package default pertaining to the most specific package takes\n precedence over the others.  For example, if <tt>javax.lang</tt> and\n <tt>javax.lang.reflect</tt> both have package defaults associated with\n them, the latter package default applies to classes in\n <tt>javax.lang.reflect</tt>.\n\n <p> Package defaults take precedence over the class loader's default\n assertion status, and may be overridden on a per-class basis by invoking\n {@link #setClassAssertionStatus(String, boolean)}.  </p>\n\n @param  packageName\n         The name of the package whose package default assertion status\n         is to be set. A <tt>null</tt> value indicates the unnamed\n         package that is "current"\n         (<a href="http://java.sun.com/docs/books/jls/">Java Language\n         Specification</a>, section 7.4.2).\n\n @param  enabled\n         <tt>true</tt> if classes loaded by this classloader and\n         belonging to the named package or any of its subpackages will\n         have assertions enabled by default, <tt>false</tt> if they will\n         have assertions disabled by default.\n\n @since  1.4\n"
12623,method,java/lang/ClassLoader/setClassAssertionStatus/String;boolean," Sets the desired assertion status for the named top-level class in this\n class loader and any nested classes contained therein.  This setting\n takes precedence over the class loader's default assertion status, and\n over any applicable per-package default.  This method has no effect if\n the named class has already been initialized.  (Once a class is\n initialized, its assertion status cannot change.)\n\n <p> If the named class is not a top-level class, this invocation will\n have no effect on the actual assertion status of any class. </p>\n\n @param  className\n         The fully qualified class name of the top-level class whose\n         assertion status is to be set.\n\n @param  enabled\n         <tt>true</tt> if the named class is to have assertions\n         enabled when (and if) it is initialized, <tt>false</tt> if the\n         class is to have assertions disabled.\n\n @since  1.4\n"
12625,method,java/lang/ClassLoader/ClassLoader/ClassLoader," Creates a new class loader using the specified parent class loader for\n delegation.\n\n <p> If there is a security manager, its {@link\n SecurityManager#checkCreateClassLoader()\n <tt>checkCreateClassLoader</tt>} method is invoked.  This may result in\n a security exception.  </p>\n\n @param  parent\n         The parent class loader\n\n @throws  SecurityException\n          If a security manager exists and its\n          <tt>checkCreateClassLoader</tt> method doesn't allow creation\n          of a new class loader.\n\n @since  1.2\n"
12626,method,java/lang/ClassLoader/ClassLoader/," Creates a new class loader using the <tt>ClassLoader</tt> returned by\n the method {@link #getSystemClassLoader()\n <tt>getSystemClassLoader()</tt>} as the parent class loader.\n\n <p> If there is a security manager, its {@link\n SecurityManager#checkCreateClassLoader()\n <tt>checkCreateClassLoader</tt>} method is invoked.  This may result in\n a security exception.  </p>\n\n @throws  SecurityException\n          If a security manager exists and its\n          <tt>checkCreateClassLoader</tt> method doesn't allow creation\n          of a new class loader.\n"
12633,class,java/lang/ClassCastException," Thrown to indicate that the code has attempted to cast an object \n to a subclass of which it is not an instance. For example, the \n following code generates a <code>ClassCastException</code>: \n <p><blockquote><pre>\n     Object x = new Integer(0);\n     System.out.println((String)x);\n </pre></blockquote>\n\n @author  unascribed\n @version 1.22, 03/23/10\n @since   JDK1.0\n"
12636,class,java/lang/Class," Instances of the class <code>Class</code> represent classes and\n interfaces in a running Java application.  An enum is a kind of\n class and an annotation is a kind of interface.  Every array also\n belongs to a class that is reflected as a <code>Class</code> object\n that is shared by all arrays with the same element type and number\n of dimensions.  The primitive Java types (<code>boolean</code>,\n <code>byte</code>, <code>char</code>, <code>short</code>,\n <code>int</code>, <code>long</code>, <code>float</code>, and\n <code>double</code>), and the keyword <code>void</code> are also\n represented as <code>Class</code> objects.\n\n <p> <code>Class</code> has no public constructor. Instead <code>Class</code>\n objects are constructed automatically by the Java Virtual Machine as classes\n are loaded and by calls to the <code>defineClass</code> method in the class\n loader.\n\n <p> The following example uses a <code>Class</code> object to print the\n class name of an object:\n\n <p> <blockquote><pre>\n     void printClassName(Object obj) {\n         System.out.println("The class of " + obj +\n                            " is " + obj.getClass().getName());\n     }\n </pre></blockquote>\n \n <p> It is also possible to get the <code>Class</code> object for a named\n type (or for void) using a class literal \n (JLS Section <A HREF="http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#251530">15.8.2</A>). \n For example:\n\n <p> <blockquote><pre>\n     System.out.println("The name of class Foo is: "+Foo.class.getName());\n </pre></blockquote>\n\n @param <T> the type of the class modeled by this {@code Class}\n object.  For example, the type of {@code String.class} is {@code\n Class<String>}.  Use {@code Class<?>} if the class being modeled is\n unknown.\n\n @author  unascribed\n @version 1.203, 03/23/10\n @see     java.lang.ClassLoader#defineClass(byte[], int, int)\n @since   JDK1.0\n"
12638,method,java/lang/Class/forName/String," Returns the <code>Class</code> object associated with the class or\n interface with the given string name.  Invoking this method is\n equivalent to:\n\n <blockquote><pre>\n  Class.forName(className, true, currentLoader)\n </pre></blockquote>\n\n where <code>currentLoader</code> denotes the defining class loader of\n the current class.\n\n <p> For example, the following code fragment returns the\n runtime <code>Class</code> descriptor for the class named\n <code>java.lang.Thread</code>:\n\n <blockquote><pre>\n   Class&nbsp;t&nbsp;= Class.forName("java.lang.Thread")\n </pre></blockquote>\n <p>\n A call to <tt>forName("X")</tt> causes the class named \n <tt>X</tt> to be initialized.\n\n @param      className   the fully qualified name of the desired class.\n @return     the <code>Class</code> object for the class with the\n             specified name.\n @exception LinkageError if the linkage fails\n @exception ExceptionInInitializerError if the initialization provoked\n            by this method fails\n @exception ClassNotFoundException if the class cannot be located\n"
12639,method,java/lang/Class/forName/String;boolean;ClassLoader," Returns the <code>Class</code> object associated with the class or\n interface with the given string name, using the given class loader.\n Given the fully qualified name for a class or interface (in the same\n format returned by <code>getName</code>) this method attempts to\n locate, load, and link the class or interface.  The specified class\n loader is used to load the class or interface.  If the parameter\n <code>loader</code> is null, the class is loaded through the bootstrap\n class loader.  The class is initialized only if the\n <code>initialize</code> parameter is <code>true</code> and if it has\n not been initialized earlier.\n\n <p> If <code>name</code> denotes a primitive type or void, an attempt\n will be made to locate a user-defined class in the unnamed package whose\n name is <code>name</code>. Therefore, this method cannot be used to\n obtain any of the <code>Class</code> objects representing primitive\n types or void.\n\n <p> If <code>name</code> denotes an array class, the component type of\n the array class is loaded but not initialized.\n\n <p> For example, in an instance method the expression:\n\n <blockquote><pre>\n  Class.forName("Foo")\n </pre></blockquote>\n\n is equivalent to:\n\n <blockquote><pre>\n  Class.forName("Foo", true, this.getClass().getClassLoader())\n </pre></blockquote>\n\n Note that this method throws errors related to loading, linking or\n initializing as specified in Sections 12.2, 12.3 and 12.4 of <em>The\n Java Language Specification</em>.\n Note that this method does not check whether the requested class \n is accessible to its caller.\n\n <p> If the <code>loader</code> is <code>null</code>, and a security\n manager is present, and the caller's class loader is not null, then this\n method calls the security manager's <code>checkPermission</code> method\n with a <code>RuntimePermission("getClassLoader")</code> permission to\n ensure it's ok to access the bootstrap class loader.\n\n @param name       fully qualified name of the desired class\n @param initialize whether the class must be initialized\n @param loader     class loader from which the class must be loaded\n @return           class object representing the desired class\n \n @exception LinkageError if the linkage fails\n @exception ExceptionInInitializerError if the initialization provoked\n            by this method fails\n @exception ClassNotFoundException if the class cannot be located by\n            the specified class loader\n\n @see 	  java.lang.Class#forName(String) \n @see 	  java.lang.ClassLoader\n @since 	  1.2\n"
12641,method,java/lang/Class/isInstance/Object," Determines if the specified <code>Object</code> is assignment-compatible\n with the object represented by this <code>Class</code>.  This method is\n the dynamic equivalent of the Java language <code>instanceof</code>\n operator. The method returns <code>true</code> if the specified\n <code>Object</code> argument is non-null and can be cast to the\n reference type represented by this <code>Class</code> object without\n raising a <code>ClassCastException.</code> It returns <code>false</code>\n otherwise.\n\n <p> Specifically, if this <code>Class</code> object represents a\n declared class, this method returns <code>true</code> if the specified\n <code>Object</code> argument is an instance of the represented class (or\n of any of its subclasses); it returns <code>false</code> otherwise. If\n this <code>Class</code> object represents an array class, this method\n returns <code>true</code> if the specified <code>Object</code> argument\n can be converted to an object of the array class by an identity\n conversion or by a widening reference conversion; it returns\n <code>false</code> otherwise. If this <code>Class</code> object\n represents an interface, this method returns <code>true</code> if the\n class or any superclass of the specified <code>Object</code> argument\n implements this interface; it returns <code>false</code> otherwise. If\n this <code>Class</code> object represents a primitive type, this method\n returns <code>false</code>.\n\n @param   obj the object to check\n @return  true if <code>obj</code> is an instance of this class\n\n @since JDK1.1\n"
12642,method,java/lang/Class/isAssignableFrom/Class," Determines if the class or interface represented by this\n <code>Class</code> object is either the same as, or is a superclass or\n superinterface of, the class or interface represented by the specified\n <code>Class</code> parameter. It returns <code>true</code> if so;\n otherwise it returns <code>false</code>. If this <code>Class</code>\n object represents a primitive type, this method returns\n <code>true</code> if the specified <code>Class</code> parameter is\n exactly this <code>Class</code> object; otherwise it returns\n <code>false</code>.\n\n <p> Specifically, this method tests whether the type represented by the\n specified <code>Class</code> parameter can be converted to the type\n represented by this <code>Class</code> object via an identity conversion\n or via a widening reference conversion. See <em>The Java Language\n Specification</em>, sections 5.1.1 and 5.1.4 , for details.\n \n @param cls the <code>Class</code> object to be checked\n @return the <code>boolean</code> value indicating whether objects of the\n type <code>cls</code> can be assigned to objects of this class\n @exception NullPointerException if the specified Class parameter is\n            null.\n @since JDK1.1\n"
12645,method,java/lang/Class/isPrimitive/," Determines if the specified <code>Class</code> object represents a\n primitive type.\n\n <p> There are nine predefined <code>Class</code> objects to represent\n the eight primitive types and void.  These are created by the Java\n Virtual Machine, and have the same names as the primitive types that\n they represent, namely <code>boolean</code>, <code>byte</code>,\n <code>char</code>, <code>short</code>, <code>int</code>,\n <code>long</code>, <code>float</code>, and <code>double</code>.\n\n <p> These objects may only be accessed via the following public static\n final variables, and are the only <code>Class</code> objects for which\n this method returns <code>true</code>.\n\n @return true if and only if this class represents a primitive type\n\n @see     java.lang.Boolean#TYPE\n @see     java.lang.Character#TYPE\n @see     java.lang.Byte#TYPE\n @see     java.lang.Short#TYPE\n @see     java.lang.Integer#TYPE\n @see     java.lang.Long#TYPE\n @see     java.lang.Float#TYPE\n @see     java.lang.Double#TYPE\n @see     java.lang.Void#TYPE\n @since JDK1.1\n"
12646,method,java/lang/Class/isAnnotation/," Returns true if this <tt>Class</tt> object represents an annotation\n type.  Note that if this method returns true, {@link #isInterface()}\n would also return true, as all annotation types are also interfaces.\n\n @return <tt>true</tt> if this class object represents an annotation\n      type; <tt>false</tt> otherwise\n @since 1.5\n"
12647,method,java/lang/Class/isSynthetic/," Returns <tt>true</tt> if this class is a synthetic class;\n returns <tt>false</tt> otherwise.\n @return <tt>true</tt> if and only if this class is a synthetic class as\n         defined by the Java Language Specification.\n @since 1.5\n"
12649,method,java/lang/Class/getClassLoader/," Returns the class loader for the class.  Some implementations may use\n null to represent the bootstrap class loader. This method will return\n null in such implementations if this class was loaded by the bootstrap\n class loader.\n\n <p> If a security manager is present, and the caller's class loader is\n not null and the caller's class loader is not the same as or an ancestor of\n the class loader for the class whose class loader is requested, then\n this method calls the security manager's <code>checkPermission</code> \n method with a <code>RuntimePermission("getClassLoader")</code> \n permission to ensure it's ok to access the class loader for the class.\n \n <p>If this object\n represents a primitive type or void, null is returned.\n\n @return  the class loader that loaded the class or interface\n          represented by this object.\n @throws SecurityException\n    if a security manager exists and its \n    <code>checkPermission</code> method denies\n    access to the class loader for the class.\n @see java.lang.ClassLoader\n @see SecurityManager#checkPermission\n @see java.lang.RuntimePermission\n"
12651,method,java/lang/Class/getSuperclass/," Returns the <code>Class</code> representing the superclass of the entity\n (class, interface, primitive type or void) represented by this\n <code>Class</code>.  If this <code>Class</code> represents either the\n <code>Object</code> class, an interface, a primitive type, or void, then\n null is returned.  If this object represents an array class then the\n <code>Class</code> object representing the <code>Object</code> class is\n returned.\n\n @return the superclass of the class represented by this object.\n"
12653,method,java/lang/Class/getPackage/," Gets the package for this class.  The class loader of this class is used\n to find the package.  If the class was loaded by the bootstrap class\n loader the set of packages loaded from CLASSPATH is searched to find the\n package of the class. Null is returned if no package object was created\n by the class loader of this class.\n\n <p> Packages have attributes for versions and specifications only if the\n information was defined in the manifests that accompany the classes, and\n if the class loader created the package instance with the attributes\n from the manifest.\n\n @return the package of the class, or null if no package\n         information is available from the archive or codebase.\n"
12654,method,java/lang/Class/getInterfaces/," Determines the interfaces implemented by the class or interface\n represented by this object.\n\n <p> If this object represents a class, the return value is an array\n containing objects representing all interfaces implemented by the\n class. The order of the interface objects in the array corresponds to\n the order of the interface names in the <code>implements</code> clause\n of the declaration of the class represented by this object. For \n example, given the declaration:\n <blockquote><pre>\n class Shimmer implements FloorWax, DessertTopping { ... }\n </pre></blockquote>\n suppose the value of <code>s</code> is an instance of \n <code>Shimmer</code>; the value of the expression:\n <blockquote><pre>\n s.getClass().getInterfaces()[0]\n </pre></blockquote>\n is the <code>Class</code> object that represents interface \n <code>FloorWax</code>; and the value of:\n <blockquote><pre>\n s.getClass().getInterfaces()[1]\n </pre></blockquote>\n is the <code>Class</code> object that represents interface \n <code>DessertTopping</code>.\n\n <p> If this object represents an interface, the array contains objects\n representing all interfaces extended by the interface. The order of the\n interface objects in the array corresponds to the order of the interface\n names in the <code>extends</code> clause of the declaration of the\n interface represented by this object.\n\n <p> If this object represents a class or interface that implements no\n interfaces, the method returns an array of length 0.\n\n <p> If this object represents a primitive type or void, the method\n returns an array of length 0.\n\n @return an array of interfaces implemented by this class.\n"
12665,method,java/lang/Class/isAnonymousClass/," Returns <tt>true</tt> if and only if the underlying class\n is an anonymous class.\n\n @return <tt>true</tt> if and only if this class is an anonymous class.\n @since 1.5\n"
12666,method,java/lang/Class/isLocalClass/," Returns <tt>true</tt> if and only if the underlying class\n is a local class.\n\n @return <tt>true</tt> if and only if this class is a local class.\n @since 1.5\n"
12667,method,java/lang/Class/isMemberClass/," Returns <tt>true</tt> if and only if the underlying class\n is a member class.\n\n @return <tt>true</tt> if and only if this class is a member class.\n @since 1.5\n"
12670,method,java/lang/Class/getMethods/," Returns an array containing <code>Method</code> objects reflecting all\n the public <em>member</em> methods of the class or interface represented\n by this <code>Class</code> object, including those declared by the class\n or interface and those inherited from superclasses and\n superinterfaces.  Array classes return all the (public) member methods \n inherited from the <code>Object</code> class.  The elements in the array \n returned are not sorted and are not in any particular order.  This \n method returns an array of length 0 if this <code>Class</code> object\n represents a class or interface that has no public member methods, or if\n this <code>Class</code> object represents a primitive type or void.\n\n <p> The class initialization method <code>&lt;clinit&gt;</code> is not\n included in the returned array. If the class declares multiple public\n member methods with the same parameter types, they are all included in\n the returned array.\n\n <p> See <em>The Java Language Specification</em>, sections 8.2 and 8.4.\n\n @return the array of <code>Method</code> objects representing the\n public methods of this class\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies\n             access to the methods within this class\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12674,method,java/lang/Class/getConstructor/Class[]," Returns a <code>Constructor</code> object that reflects the specified\n public constructor of the class represented by this <code>Class</code>\n object. The <code>parameterTypes</code> parameter is an array of\n <code>Class</code> objects that identify the constructor's formal\n parameter types, in declared order.  \n\n If this <code>Class</code> object represents an inner class\n declared in a non-static context, the formal parameter types\n include the explicit enclosing instance as the first parameter.\n\n <p> The constructor to reflect is the public constructor of the class\n represented by this <code>Class</code> object whose formal parameter\n types match those specified by <code>parameterTypes</code>.\n\n @param parameterTypes the parameter array\n @return the <code>Constructor</code> object of the public constructor that\n matches the specified <code>parameterTypes</code>\n @exception NoSuchMethodException if a matching method is not found.\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies\n             access to the constructor\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12675,method,java/lang/Class/getDeclaredClasses/," Returns an array of <code>Class</code> objects reflecting all the\n classes and interfaces declared as members of the class represented by\n this <code>Class</code> object. This includes public, protected, default\n (package) access, and private classes and interfaces declared by the\n class, but excludes inherited classes and interfaces.  This method\n returns an array of length 0 if the class declares no classes or\n interfaces as members, or if this <code>Class</code> object represents a\n primitive type, an array class, or void.\n\n @return the array of <code>Class</code> objects representing all the \n declared members of this class\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.DECLARED)}</tt> denies\n             access to the declared classes within this class\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12676,method,java/lang/Class/getDeclaredFields/," Returns an array of <code>Field</code> objects reflecting all the fields\n declared by the class or interface represented by this\n <code>Class</code> object. This includes public, protected, default\n (package) access, and private fields, but excludes inherited fields.\n The elements in the array returned are not sorted and are not in any\n particular order.  This method returns an array of length 0 if the class\n or interface declares no fields, or if this <code>Class</code> object\n represents a primitive type, an array class, or void.\n\n <p> See <em>The Java Language Specification</em>, sections 8.2 and 8.3.\n\n @return    the array of <code>Field</code> objects representing all the\n declared fields of this class\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.DECLARED)}</tt> denies\n             access to the declared fields within this class\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12677,method,java/lang/Class/getDeclaredMethods/," Returns an array of <code>Method</code> objects reflecting all the\n methods declared by the class or interface represented by this\n <code>Class</code> object. This includes public, protected, default\n (package) access, and private methods, but excludes inherited methods.\n The elements in the array returned are not sorted and are not in any\n particular order.  This method returns an array of length 0 if the class\n or interface declares no methods, or if this <code>Class</code> object\n represents a primitive type, an array class, or void.  The class\n initialization method <code>&lt;clinit&gt;</code> is not included in the\n returned array. If the class declares multiple public member methods\n with the same parameter types, they are all included in the returned\n array.\n\n <p> See <em>The Java Language Specification</em>, section 8.2.\n\n @return    the array of <code>Method</code> objects representing all the\n declared methods of this class\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.DECLARED)}</tt> denies\n             access to the declared methods within this class\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12678,method,java/lang/Class/getDeclaredConstructors/," Returns an array of <code>Constructor</code> objects reflecting all the\n constructors declared by the class represented by this\n <code>Class</code> object. These are public, protected, default\n (package) access, and private constructors.  The elements in the array\n returned are not sorted and are not in any particular order.  If the\n class has a default constructor, it is included in the returned array.\n This method returns an array of length 0 if this <code>Class</code>\n object represents an interface, a primitive type, an array class, or\n void.\n\n <p> See <em>The Java Language Specification</em>, section 8.2.\n\n @return    the array of <code>Constructor</code> objects representing all the\n declared constructors of this class\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.DECLARED)}</tt> denies\n             access to the declared constructors within this class\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12679,method,java/lang/Class/getDeclaredField/String," Returns a <code>Field</code> object that reflects the specified declared\n field of the class or interface represented by this <code>Class</code>\n object. The <code>name</code> parameter is a <code>String</code> that\n specifies the simple name of the desired field.  Note that this method\n will not reflect the <code>length</code> field of an array class.\n\n @param name the name of the field\n @return the <code>Field</code> object for the specified field in this\n class\n @exception NoSuchFieldException if a field with the specified name is\n              not found.\n @exception NullPointerException if <code>name</code> is <code>null</code>\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.DECLARED)}</tt> denies\n             access to the declared field\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12680,method,java/lang/Class/getDeclaredMethod/String;Class[]," Returns a <code>Method</code> object that reflects the specified\n declared method of the class or interface represented by this\n <code>Class</code> object. The <code>name</code> parameter is a\n <code>String</code> that specifies the simple name of the desired\n method, and the <code>parameterTypes</code> parameter is an array of\n <code>Class</code> objects that identify the method's formal parameter\n types, in declared order.  If more than one method with the same\n parameter types is declared in a class, and one of these methods has a\n return type that is more specific than any of the others, that method is\n returned; otherwise one of the methods is chosen arbitrarily.  If the\n name is "&lt;init&gt;"or "&lt;clinit&gt;" a <code>NoSuchMethodException</code>\n is raised.\n\n @param name the name of the method\n @param parameterTypes the parameter array\n @return    the <code>Method</code> object for the method of this class\n matching the specified name and parameters\n @exception NoSuchMethodException if a matching method is not found.\n @exception NullPointerException if <code>name</code> is <code>null</code>\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.DECLARED)}</tt> denies\n             access to the declared method\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12681,method,java/lang/Class/getDeclaredConstructor/Class[]," Returns a <code>Constructor</code> object that reflects the specified\n constructor of the class or interface represented by this\n <code>Class</code> object.  The <code>parameterTypes</code> parameter is\n an array of <code>Class</code> objects that identify the constructor's\n formal parameter types, in declared order.\n\n If this <code>Class</code> object represents an inner class\n declared in a non-static context, the formal parameter types\n include the explicit enclosing instance as the first parameter.\n\n @param parameterTypes the parameter array\n @return    The <code>Constructor</code> object for the constructor with the\n specified parameter list\n @exception NoSuchMethodException if a matching method is not found.\n @exception  SecurityException\n             If a security manager, <i>s</i>, is present and any of the\n             following conditions is met:\n\n             <ul>\n\n             <li> invocation of \n             <tt>{@link SecurityManager#checkMemberAccess\n             s.checkMemberAccess(this, Member.DECLARED)}</tt> denies\n             access to the declared constructor\n\n             <li> the caller's class loader is not the same as or an\n             ancestor of the class loader for the current class and\n             invocation of <tt>{@link SecurityManager#checkPackageAccess\n             s.checkPackageAccess()}</tt> denies access to the package\n             of this class\n\n             </ul>\n\n @since JDK1.1\n"
12682,method,java/lang/Class/getResourceAsStream/String," Finds a resource with a given name.  The rules for searching resources\n associated with a given class are implemented by the defining\n {@linkplain ClassLoader class loader} of the class.  This method\n delegates to this object's class loader.  If this object was loaded by\n the bootstrap class loader, the method delegates to {@link\n ClassLoader#getSystemResourceAsStream}.\n\n <p> Before delegation, an absolute resource name is constructed from the\n given resource name using this algorithm:\n\n <ul>\n\n <li> If the <tt>name</tt> begins with a <tt>'/'</tt>\n (<tt>'&#92;u002f'</tt>), then the absolute name of the resource is the\n portion of the <tt>name</tt> following the <tt>'/'</tt>. \n\n <li> Otherwise, the absolute name is of the following form:\n\n <blockquote><pre>\n   <tt>modified_package_name</tt>/<tt>name</tt>\n </pre></blockquote>\n\n <p> Where the <tt>modified_package_name</tt> is the package name of this\n object with <tt>'/'</tt> substituted for <tt>'.'</tt>\n (<tt>'&#92;u002e'</tt>).\n\n </ul>\n\n @param  name name of the desired resource\n @return      A {@link java.io.InputStream} object or <tt>null</tt> if\n              no resource with this name is found\n @throws  NullPointerException If <tt>name</tt> is <tt>null</tt>\n @since  JDK1.1\n"
12683,method,java/lang/Class/getResource/String," Finds a resource with a given name.  The rules for searching resources\n associated with a given class are implemented by the defining\n {@linkplain ClassLoader class loader} of the class.  This method\n delegates to this object's class loader.  If this object was loaded by\n the bootstrap class loader, the method delegates to {@link\n ClassLoader#getSystemResource}.\n\n <p> Before delegation, an absolute resource name is constructed from the\n given resource name using this algorithm:\n\n <ul>\n\n <li> If the <tt>name</tt> begins with a <tt>'/'</tt>\n (<tt>'&#92;u002f'</tt>), then the absolute name of the resource is the\n portion of the <tt>name</tt> following the <tt>'/'</tt>. \n\n <li> Otherwise, the absolute name is of the following form:\n\n <blockquote><pre>\n   <tt>modified_package_name</tt>/<tt>name</tt>\n </pre></blockquote>\n\n <p> Where the <tt>modified_package_name</tt> is the package name of this\n object with <tt>'/'</tt> substituted for <tt>'.'</tt>\n (<tt>'&#92;u002e'</tt>).\n\n </ul>\n\n @param  name name of the desired resource\n @return      A  {@link java.net.URL} object or <tt>null</tt> if no\n              resource with this name is found\n @since  JDK1.1\n"
12684,method,java/lang/Class/getProtectionDomain/," Returns the <code>ProtectionDomain</code> of this class.  If there is a\n security manager installed, this method first calls the security\n manager's <code>checkPermission</code> method with a\n <code>RuntimePermission("getProtectionDomain")</code> permission to\n ensure it's ok to get the\n <code>ProtectionDomain</code>.\n\n @return the ProtectionDomain of this class\n\n @throws SecurityException\n        if a security manager exists and its \n        <code>checkPermission</code> method doesn't allow \n        getting the ProtectionDomain.\n\n @see java.security.ProtectionDomain\n @see SecurityManager#checkPermission\n @see java.lang.RuntimePermission\n @since 1.2\n"
12685,method,java/lang/Class/desiredAssertionStatus/," Returns the assertion status that would be assigned to this\n class if it were to be initialized at the time this method is invoked.\n If this class has had its assertion status set, the most recent\n setting will be returned; otherwise, if any package default assertion\n status pertains to this class, the most recent setting for the most\n specific pertinent package default assertion status is returned;\n otherwise, if this class is not a system class (i.e., it has a\n class loader) its class loader's default assertion status is returned;\n otherwise, the system class default assertion status is returned.\n <p>\n Few programmers will have any need for this method; it is provided\n for the benefit of the JRE itself.  (It allows a class to determine at\n the time that it is initialized whether assertions should be enabled.)\n Note that this method is not guaranteed to return the actual\n assertion status that was (or will be) associated with the specified\n class when it was (or will be) initialized.\n\n @return the desired assertion status of the specified class.\n @see    java.lang.ClassLoader#setClassAssertionStatus\n @see    java.lang.ClassLoader#setPackageAssertionStatus\n @see    java.lang.ClassLoader#setDefaultAssertionStatus\n @since  1.4\n"
12686,method,java/lang/Class/isEnum/," Returns true if and only if this class was declared as an enum in the\n source code.\n\n @return true if and only if this class was declared as an enum in the\n     source code\n @since 1.5\n"
12688,method,java/lang/Class/cast/Object," Casts an object to the class or interface represented\n by this <tt>Class</tt> object.\n\n @param obj the object to be cast\n @return the object after casting, or null if obj is null\n\n @throws ClassCastException if the object is not\n null and is not assignable to the type T.\n\n @since 1.5\n"
12689,method,java/lang/Class/asSubclass/Class," Casts this <tt>Class</tt> object to represent a subclass of the class\n represented by the specified class object.  Checks that that the cast\n is valid, and throws a <tt>ClassCastException</tt> if it is not.  If\n this method succeeds, it always returns a reference to this class object.\n\n <p>This method is useful when a client needs to "narrow" the type of\n a <tt>Class</tt> object to pass it to an API that restricts the\n <tt>Class</tt> objects that it is willing to accept.  A cast would\n generate a compile-time warning, as the correctness of the cast\n could not be checked at runtime (because generic types are implemented\n by erasure).\n\n @return this <tt>Class</tt> object, cast to represent a subclass of\n    the specified class object.\n @throws ClassCastException if this <tt>Class</tt> object does not\n    represent a subclass of the specified class (here "subclass" includes\n    the class itself).\n @since 1.5\n"
12690,method,java/lang/Class/getAnnotation/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
12691,method,java/lang/Class/isAnnotationPresent/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
12694,class,java/lang/Character," The <code>Character</code> class wraps a value of the primitive\n type <code>char</code> in an object. An object of type\n <code>Character</code> contains a single field whose type is\n <code>char</code>.\n <p>\n In addition, this class provides several methods for determining\n a character's category (lowercase letter, digit, etc.) and for converting\n characters from uppercase to lowercase and vice versa.\n <p>\n Character information is based on the Unicode Standard, version 4.0.\n <p>\n The methods and data of class <code>Character</code> are defined by\n the information in the <i>UnicodeData</i> file that is part of the\n Unicode Character Database maintained by the Unicode\n Consortium. This file specifies various properties including name\n and general category for every defined Unicode code point or\n character range.\n <p>\n The file and its description are available from the Unicode Consortium at:\n <ul>\n <li><a href="http://www.unicode.org">http://www.unicode.org</a>\n </ul>\n\n <h4><a name="unicode">Unicode Character Representations</a></h4>\n\n <p>The <code>char</code> data type (and therefore the value that a\n <code>Character</code> object encapsulates) are based on the\n original Unicode specification, which defined characters as\n fixed-width 16-bit entities. The Unicode standard has since been\n changed to allow for characters whose representation requires more\n than 16 bits.  The range of legal <em>code point</em>s is now\n U+0000 to U+10FFFF, known as <em>Unicode scalar value</em>.\n (Refer to the <a\n href="http://www.unicode.org/reports/tr27/#notation"><i>\n definition</i></a> of the U+<i>n</i> notation in the Unicode\n standard.)\n\n <p>The set of characters from U+0000 to U+FFFF is sometimes\n referred to as the <em>Basic Multilingual Plane (BMP)</em>. <a\n name="supplementary">Characters</a> whose code points are greater\n than U+FFFF are called <em>supplementary character</em>s.  The Java\n 2 platform uses the UTF-16 representation in <code>char</code>\n arrays and in the <code>String</code> and <code>StringBuffer</code>\n classes. In this representation, supplementary characters are\n represented as a pair of <code>char</code> values, the first from\n the <em>high-surrogates</em> range, (&#92;uD800-&#92;uDBFF), the\n second from the <em>low-surrogates</em> range\n (&#92;uDC00-&#92;uDFFF).\n\n <p>A <code>char</code> value, therefore, represents Basic\n Multilingual Plane (BMP) code points, including the surrogate\n code points, or code units of the UTF-16 encoding. An\n <code>int</code> value represents all Unicode code points,\n including supplementary code points. The lower (least significant)\n 21 bits of <code>int</code> are used to represent Unicode code\n points and the upper (most significant) 11 bits must be zero.\n Unless otherwise specified, the behavior with respect to\n supplementary characters and surrogate <code>char</code> values is\n as follows:\n\n <ul>\n <li>The methods that only accept a <code>char</code> value cannot support\n supplementary characters. They treat <code>char</code> values from the\n surrogate ranges as undefined characters. For example,\n <code>Character.isLetter('&#92;uD840')</code> returns <code>false</code>, even though\n this specific value if followed by any low-surrogate value in a string\n would represent a letter.\n\n <li>The methods that accept an <code>int</code> value support all\n Unicode characters, including supplementary characters. For\n example, <code>Character.isLetter(0x2F81A)</code> returns\n <code>true</code> because the code point value represents a letter\n (a CJK ideograph).\n </ul>\n\n <p>In the Java SE API documentation, <em>Unicode code point</em> is\n used for character values in the range between U+0000 and U+10FFFF,\n and <em>Unicode code unit</em> is used for 16-bit\n <code>char</code> values that are code units of the <em>UTF-16</em>\n encoding. For more information on Unicode terminology, refer to the\n <a href="http://www.unicode.org/glossary/">Unicode Glossary</a>.\n\n @author  Lee Boynton\n @author  Guy Steele\n @author  Akira Tanaka\n @since   1.0\n"
12698,method,java/lang/Character/equals/Object," Compares this object against the specified object.\n The result is <code>true</code> if and only if the argument is not\n <code>null</code> and is a <code>Character</code> object that\n represents the same <code>char</code> value as this object.\n\n @param   obj   the object to compare with.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n"
12702,method,java/lang/Character/isSupplementaryCodePoint/int," Determines whether the specified character (Unicode code point)\n is in the supplementary character range. The method call is\n equivalent to the expression:\n <blockquote><pre>\n codePoint >= 0x10000 && codePoint <= 0x10FFFF\n </pre></blockquote>\n\n @param  codePoint the character (Unicode code point) to be tested\n @return <code>true</code> if the specified character is in the Unicode\n         supplementary character range; <code>false</code> otherwise.\n @since  1.5\n"
12703,method,java/lang/Character/isHighSurrogate/char," Determines if the given <code>char</code> value is a\n high-surrogate code unit (also known as <i>leading-surrogate\n code unit</i>). Such values do not represent characters by\n themselves, but are used in the representation of <a\n href="#supplementary">supplementary characters</a> in the\n UTF-16 encoding.\n\n <p>This method returns <code>true</code> if and only if\n <blockquote><pre>ch >= '&#92;uD800' && ch <= '&#92;uDBFF'\n </pre></blockquote>\n is <code>true</code>.\n\n @param   ch   the <code>char</code> value to be tested.\n @return  <code>true</code> if the <code>char</code> value\n          is between '&#92;uD800' and '&#92;uDBFF' inclusive;\n          <code>false</code> otherwise.\n @see     java.lang.Character#isLowSurrogate(char)\n @see     Character.UnicodeBlock#of(int)\n @since   1.5\n"
12704,method,java/lang/Character/isLowSurrogate/char," Determines if the given <code>char</code> value is a\n low-surrogate code unit (also known as <i>trailing-surrogate code\n unit</i>). Such values do not represent characters by themselves,\n but are used in the representation of <a\n href="#supplementary">supplementary characters</a> in the UTF-16 encoding.\n\n <p> This method returns <code>true</code> if and only if\n <blockquote><pre>ch >= '&#92;uDC00' && ch <= '&#92;uDFFF'\n </pre></blockquote> is <code>true</code>.\n\n @param   ch   the <code>char</code> value to be tested.\n @return  <code>true</code> if the <code>char</code> value\n          is between '&#92;uDC00' and '&#92;uDFFF' inclusive;\n          <code>false</code> otherwise.\n @see java.lang.Character#isHighSurrogate(char)\n @since   1.5\n"
12710,method,java/lang/Character/codePointAt/char[];int;int," Returns the code point at the given index of the\n <code>char</code> array, where only array elements with\n <code>index</code> less than <code>limit</code> can be used. If\n the <code>char</code> value at the given index in the\n <code>char</code> array is in the high-surrogate range, the\n following index is less than the <code>limit</code>, and the\n <code>char</code> value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the <code>char</code> value at the given index is returned.\n\n @param a the <code>char</code> array\n @param index the index to the <code>char</code> values (Unicode\n code units) in the <code>char</code> array to be converted\n @param limit the index after the last array element that can be used in the\n <code>char</code> array\n @return the Unicode code point at the given index\n @exception NullPointerException if <code>a</code> is null.\n @exception IndexOutOfBoundsException if the <code>index</code>\n argument is negative or not less than the <code>limit</code>\n argument, or if the <code>limit</code> argument is negative or\n greater than the length of the <code>char</code> array.\n @since  1.5\n"
12711,method,java/lang/Character/codePointBefore/CharSequence;int," Returns the code point preceding the given index of the\n <code>CharSequence</code>. If the <code>char</code> value at\n <code>(index - 1)</code> in the <code>CharSequence</code> is in\n the low-surrogate range, <code>(index - 2)</code> is not\n negative, and the <code>char</code> value at <code>(index -\n 2)</code> in the <code>CharSequence</code> is in the\n high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the <code>char</code> value at <code>(index - 1)</code> is\n returned.\n\n @param seq the <code>CharSequence</code> instance\n @param index the index following the code point that should be returned\n @return the Unicode code point value before the given index.\n @exception NullPointerException if <code>seq</code> is null.\n @exception IndexOutOfBoundsException if the <code>index</code>\n argument is less than 1 or greater than {@link\n CharSequence#length() seq.length()}.\n @since  1.5\n"
12712,method,java/lang/Character/codePointBefore/char[];int," Returns the code point preceding the given index of the\n <code>char</code> array. If the <code>char</code> value at\n <code>(index - 1)</code> in the <code>char</code> array is in\n the low-surrogate range, <code>(index - 2)</code> is not\n negative, and the <code>char</code> value at <code>(index -\n 2)</code> in the <code>char</code> array is in the\n high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the <code>char</code> value at <code>(index - 1)</code> is\n returned.\n\n @param a the <code>char</code> array\n @param index the index following the code point that should be returned\n @return the Unicode code point value before the given index.\n @exception NullPointerException if <code>a</code> is null.\n @exception IndexOutOfBoundsException if the <code>index</code>\n argument is less than 1 or greater than the length of the\n <code>char</code> array\n @since  1.5\n"
12713,method,java/lang/Character/codePointBefore/char[];int;int," Returns the code point preceding the given index of the\n <code>char</code> array, where only array elements with\n <code>index</code> greater than or equal to <code>start</code>\n can be used. If the <code>char</code> value at <code>(index -\n 1)</code> in the <code>char</code> array is in the\n low-surrogate range, <code>(index - 2)</code> is not less than\n <code>start</code>, and the <code>char</code> value at\n <code>(index - 2)</code> in the <code>char</code> array is in\n the high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the <code>char</code> value at <code>(index - 1)</code> is\n returned.\n\n @param a the <code>char</code> array\n @param index the index following the code point that should be returned\n @param start the index of the first array element in the\n <code>char</code> array\n @return the Unicode code point value before the given index.\n @exception NullPointerException if <code>a</code> is null.\n @exception IndexOutOfBoundsException if the <code>index</code>\n argument is not greater than the <code>start</code> argument or\n is greater than the length of the <code>char</code> array, or\n if the <code>start</code> argument is negative or not less than\n the length of the <code>char</code> array.\n @since  1.5\n"
12716,method,java/lang/Character/codePointCount/CharSequence;int;int," Returns the number of Unicode code points in the text range of\n the specified char sequence. The text range begins at the\n specified <code>beginIndex</code> and extends to the\n <code>char</code> at index <code>endIndex - 1</code>. Thus the\n length (in <code>char</code>s) of the text range is\n <code>endIndex-beginIndex</code>. Unpaired surrogates within\n the text range count as one code point each.\n\n @param seq the char sequence\n @param beginIndex the index to the first <code>char</code> of\n the text range.\n @param endIndex the index after the last <code>char</code> of\n the text range.\n @return the number of Unicode code points in the specified text\n range\n @exception NullPointerException if <code>seq</code> is null.\n @exception IndexOutOfBoundsException if the\n <code>beginIndex</code> is negative, or <code>endIndex</code>\n is larger than the length of the given sequence, or\n <code>beginIndex</code> is larger than <code>endIndex</code>.\n @since  1.5\n"
12718,method,java/lang/Character/offsetByCodePoints/CharSequence;int;int," Returns the index within the given char sequence that is offset\n from the given <code>index</code> by <code>codePointOffset</code>\n code points. Unpaired surrogates within the text range given by\n <code>index</code> and <code>codePointOffset</code> count as\n one code point each.\n\n @param seq the char sequence\n @param index the index to be offset\n @param codePointOffset the offset in code points\n @return the index within the char sequence\n @exception NullPointerException if <code>seq</code> is null.\n @exception IndexOutOfBoundsException if <code>index</code>\n   is negative or larger then the length of the char sequence,\n   or if <code>codePointOffset</code> is positive and the\n   subsequence starting with <code>index</code> has fewer than\n   <code>codePointOffset</code> code points, or if\n   <code>codePointOffset</code> is negative and the subsequence\n   before <code>index</code> has fewer than the absolute value\n   of <code>codePointOffset</code> code points.\n @since 1.5\n"
12720,method,java/lang/Character/isLowerCase/char," Determines if the specified character is a lowercase character.\n <p>\n A character is lowercase if its general category type, provided\n by <code>Character.getType(ch)</code>, is\n <code>LOWERCASE_LETTER</code>.\n <p>\n The following are examples of lowercase characters:\n <p><blockquote><pre>\n a b c d e f g h i j k l m n o p q r s t u v w x y z\n '&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6' \n '&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE'\n '&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6'\n '&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF'\n </pre></blockquote>\n <p> Many other Unicode characters are lowercase too.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isLowerCase(int)} method.\n\n @param   ch   the character to be tested.\n @return  <code>true</code> if the character is lowercase;\n          <code>false</code> otherwise.\n @see     java.lang.Character#isLowerCase(char)\n @see     java.lang.Character#isTitleCase(char)\n @see     java.lang.Character#toLowerCase(char)\n @see     java.lang.Character#getType(char)\n"
12722,method,java/lang/Character/isUpperCase/char," Determines if the specified character is an uppercase character.\n <p>\n A character is uppercase if its general category type, provided by\n <code>Character.getType(ch)</code>, is <code>UPPERCASE_LETTER</code>.\n <p>\n The following are examples of uppercase characters:\n <p><blockquote><pre>\n A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n '&#92;u00C0' '&#92;u00C1' '&#92;u00C2' '&#92;u00C3' '&#92;u00C4' '&#92;u00C5' '&#92;u00C6' '&#92;u00C7'\n '&#92;u00C8' '&#92;u00C9' '&#92;u00CA' '&#92;u00CB' '&#92;u00CC' '&#92;u00CD' '&#92;u00CE' '&#92;u00CF'\n '&#92;u00D0' '&#92;u00D1' '&#92;u00D2' '&#92;u00D3' '&#92;u00D4' '&#92;u00D5' '&#92;u00D6' '&#92;u00D8'\n '&#92;u00D9' '&#92;u00DA' '&#92;u00DB' '&#92;u00DC' '&#92;u00DD' '&#92;u00DE'\n </pre></blockquote>\n <p> Many other Unicode characters are uppercase too.<p>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isUpperCase(int)} method.\n\n @param   ch   the character to be tested.\n @return  <code>true</code> if the character is uppercase;\n          <code>false</code> otherwise.\n @see     java.lang.Character#isLowerCase(char)\n @see     java.lang.Character#isTitleCase(char)\n @see     java.lang.Character#toUpperCase(char)\n @see     java.lang.Character#getType(char)\n @since   1.0\n"
12724,method,java/lang/Character/isTitleCase/char," Determines if the specified character is a titlecase character.\n <p> \n A character is a titlecase character if its general\n category type, provided by <code>Character.getType(ch)</code>,\n is <code>TITLECASE_LETTER</code>.\n <p>\n Some characters look like pairs of Latin letters. For example, there\n is an uppercase letter that looks like "LJ" and has a corresponding\n lowercase letter that looks like "lj". A third form, which looks like "Lj",\n is the appropriate form to use when rendering a word in lowercase\n with initial capitals, as for a book title.\n <p>\n These are some of the Unicode characters for which this method returns\n <code>true</code>:\n <ul>\n <li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON</code>\n <li><code>LATIN CAPITAL LETTER L WITH SMALL LETTER J</code>\n <li><code>LATIN CAPITAL LETTER N WITH SMALL LETTER J</code>\n <li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z</code>\n </ul>\n <p> Many other Unicode characters are titlecase too.<p>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isTitleCase(int)} method.\n\n @param   ch   the character to be tested.\n @return  <code>true</code> if the character is titlecase;\n          <code>false</code> otherwise.\n @see     java.lang.Character#isLowerCase(char)\n @see     java.lang.Character#isUpperCase(char)\n @see     java.lang.Character#toTitleCase(char)\n @see     java.lang.Character#getType(char)\n @since   1.0.2\n"
12726,method,java/lang/Character/isDigit/char," Determines if the specified character is a digit.\n <p>\n A character is a digit if its general category type, provided\n by <code>Character.getType(ch)</code>, is\n <code>DECIMAL_DIGIT_NUMBER</code>.\n <p>\n Some Unicode character ranges that contain digits:\n <ul>\n <li><code>'&#92;u0030'</code> through <code>'&#92;u0039'</code>, \n     ISO-LATIN-1 digits (<code>'0'</code> through <code>'9'</code>)\n <li><code>'&#92;u0660'</code> through <code>'&#92;u0669'</code>,\n     Arabic-Indic digits\n <li><code>'&#92;u06F0'</code> through <code>'&#92;u06F9'</code>,\n     Extended Arabic-Indic digits\n <li><code>'&#92;u0966'</code> through <code>'&#92;u096F'</code>,\n     Devanagari digits\n <li><code>'&#92;uFF10'</code> through <code>'&#92;uFF19'</code>,\n     Fullwidth digits\n </ul>\n\n Many other character ranges contain digits as well.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isDigit(int)} method.\n\n @param   ch   the character to be tested.\n @return  <code>true</code> if the character is a digit;\n          <code>false</code> otherwise.\n @see     java.lang.Character#digit(char, int)\n @see     java.lang.Character#forDigit(int, int)\n @see     java.lang.Character#getType(char)\n"
12727,method,java/lang/Character/isDigit/int," Determines if the specified character (Unicode code point) is a digit.\n <p>\n A character is a digit if its general category type, provided\n by {@link Character#getType(int) getType(codePoint)}, is\n <code>DECIMAL_DIGIT_NUMBER</code>.\n <p>\n Some Unicode character ranges that contain digits:\n <ul>\n <li><code>'&#92;u0030'</code> through <code>'&#92;u0039'</code>, \n     ISO-LATIN-1 digits (<code>'0'</code> through <code>'9'</code>)\n <li><code>'&#92;u0660'</code> through <code>'&#92;u0669'</code>,\n     Arabic-Indic digits\n <li><code>'&#92;u06F0'</code> through <code>'&#92;u06F9'</code>,\n     Extended Arabic-Indic digits\n <li><code>'&#92;u0966'</code> through <code>'&#92;u096F'</code>,\n     Devanagari digits\n <li><code>'&#92;uFF10'</code> through <code>'&#92;uFF19'</code>,\n     Fullwidth digits\n </ul>\n\n Many other character ranges contain digits as well.\n\n @param   codePoint the character (Unicode code point) to be tested.\n @return  <code>true</code> if the character is a digit;\n          <code>false</code> otherwise.\n @see     java.lang.Character#forDigit(int, int)\n @see     java.lang.Character#getType(int)\n @since   1.5\n"
12728,method,java/lang/Character/isDefined/char," Determines if a character is defined in Unicode.\n <p>\n A character is defined if at least one of the following is true:\n <ul>\n <li>It has an entry in the UnicodeData file.\n <li>It has a value in a range defined by the UnicodeData file.\n </ul>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isDefined(int)} method.\n\n @param   ch   the character to be tested\n @return  <code>true</code> if the character has a defined meaning\n          in Unicode; <code>false</code> otherwise.\n @see     java.lang.Character#isDigit(char)\n @see     java.lang.Character#isLetter(char)\n @see     java.lang.Character#isLetterOrDigit(char)\n @see     java.lang.Character#isLowerCase(char)\n @see     java.lang.Character#isTitleCase(char)\n @see     java.lang.Character#isUpperCase(char)\n @since   1.0.2\n"
12730,method,java/lang/Character/isLetter/char," Determines if the specified character is a letter.\n <p>\n A character is considered to be a letter if its general\n category type, provided by <code>Character.getType(ch)</code>,\n is any of the following:\n <ul>\n <li> <code>UPPERCASE_LETTER</code>\n <li> <code>LOWERCASE_LETTER</code>\n <li> <code>TITLECASE_LETTER</code>\n <li> <code>MODIFIER_LETTER</code>\n <li> <code>OTHER_LETTER</code>\n </ul>\n\n Not all letters have case. Many characters are\n letters but are neither uppercase nor lowercase nor titlecase.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isLetter(int)} method.\n\n @param   ch   the character to be tested.\n @return  <code>true</code> if the character is a letter;\n          <code>false</code> otherwise.\n @see     java.lang.Character#isDigit(char)\n @see     java.lang.Character#isJavaIdentifierStart(char)\n @see     java.lang.Character#isJavaLetter(char)\n @see     java.lang.Character#isJavaLetterOrDigit(char)\n @see     java.lang.Character#isLetterOrDigit(char)\n @see     java.lang.Character#isLowerCase(char)\n @see     java.lang.Character#isTitleCase(char)\n @see     java.lang.Character#isUnicodeIdentifierStart(char)\n @see     java.lang.Character#isUpperCase(char)\n"
12732,method,java/lang/Character/isLetterOrDigit/char," Determines if the specified character is a letter or digit.\n <p>\n A character is considered to be a letter or digit if either\n <code>Character.isLetter(char ch)</code> or\n <code>Character.isDigit(char ch)</code> returns\n <code>true</code> for the character.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isLetterOrDigit(int)} method.\n\n @param   ch   the character to be tested.\n @return  <code>true</code> if the character is a letter or digit;\n          <code>false</code> otherwise.\n @see     java.lang.Character#isDigit(char)\n @see     java.lang.Character#isJavaIdentifierPart(char)\n @see     java.lang.Character#isJavaLetter(char)\n @see     java.lang.Character#isJavaLetterOrDigit(char)\n @see     java.lang.Character#isLetter(char)\n @see     java.lang.Character#isUnicodeIdentifierPart(char)\n @since   1.0.2\n"
12734,method,java/lang/Character/isJavaLetter/char," Determines if the specified character is permissible as the first\n character in a Java identifier.\n <p>\n A character may start a Java identifier if and only if\n one of the following is true:\n <ul>\n <li> {@link #isLetter(char) isLetter(ch)} returns <code>true</code>\n <li> {@link #getType(char) getType(ch)} returns <code>LETTER_NUMBER</code>\n <li> ch is a currency symbol (such as "$")\n <li> ch is a connecting punctuation character (such as "_").\n </ul>\n\n @param   ch the character to be tested.\n @return  <code>true</code> if the character may start a Java\n          identifier; <code>false</code> otherwise.\n @see     java.lang.Character#isJavaLetterOrDigit(char)\n @see     java.lang.Character#isJavaIdentifierStart(char)\n @see     java.lang.Character#isJavaIdentifierPart(char)\n @see     java.lang.Character#isLetter(char)\n @see     java.lang.Character#isLetterOrDigit(char)\n @see     java.lang.Character#isUnicodeIdentifierStart(char)\n @since   1.02\n @deprecated Replaced by isJavaIdentifierStart(char).\n"
12735,method,java/lang/Character/isJavaLetterOrDigit/char," Determines if the specified character may be part of a Java\n identifier as other than the first character.\n <p>\n A character may be part of a Java identifier if and only if any\n of the following are true:\n <ul>\n <li>  it is a letter\n <li>  it is a currency symbol (such as <code>'$'</code>)\n <li>  it is a connecting punctuation character (such as <code>'_'</code>)\n <li>  it is a digit\n <li>  it is a numeric letter (such as a Roman numeral character)\n <li>  it is a combining mark\n <li>  it is a non-spacing mark\n <li> <code>isIdentifierIgnorable</code> returns\n <code>true</code> for the character.\n </ul>\n\n @param   ch the character to be tested.\n @return  <code>true</code> if the character may be part of a\n          Java identifier; <code>false</code> otherwise.\n @see     java.lang.Character#isJavaLetter(char)\n @see     java.lang.Character#isJavaIdentifierStart(char)\n @see     java.lang.Character#isJavaIdentifierPart(char)\n @see     java.lang.Character#isLetter(char)\n @see     java.lang.Character#isLetterOrDigit(char)\n @see     java.lang.Character#isUnicodeIdentifierPart(char)\n @see     java.lang.Character#isIdentifierIgnorable(char)\n @since   1.02\n @deprecated Replaced by isJavaIdentifierPart(char).\n"
12737,method,java/lang/Character/isJavaIdentifierStart/int," Determines if the character (Unicode code point) is\n permissible as the first character in a Java identifier.\n <p>\n A character may start a Java identifier if and only if\n one of the following conditions is true:\n <ul>\n <li> {@link #isLetter(int) isLetter(codePoint)}\n      returns <code>true</code>\n <li> {@link #getType(int) getType(codePoint)}\n      returns <code>LETTER_NUMBER</code>\n <li> the referenced character is a currency symbol (such as "$")\n <li> the referenced character is a connecting punctuation character\n      (such as "_").\n </ul>\n\n @param   codePoint the character (Unicode code point) to be tested.\n @return  <code>true</code> if the character may start a Java identifier;\n          <code>false</code> otherwise.\n @see     java.lang.Character#isJavaIdentifierPart(int)\n @see     java.lang.Character#isLetter(int)\n @see     java.lang.Character#isUnicodeIdentifierStart(int)\n @see     javax.lang.model.SourceVersion#isIdentifier(CharSequence)\n @since   1.5\n"
12738,method,java/lang/Character/isJavaIdentifierPart/char," Determines if the specified character may be part of a Java\n identifier as other than the first character.\n <p>\n A character may be part of a Java identifier if any of the following\n are true:\n <ul>\n <li>  it is a letter\n <li>  it is a currency symbol (such as <code>'$'</code>)\n <li>  it is a connecting punctuation character (such as <code>'_'</code>)\n <li>  it is a digit\n <li>  it is a numeric letter (such as a Roman numeral character)\n <li>  it is a combining mark\n <li>  it is a non-spacing mark\n <li> <code>isIdentifierIgnorable</code> returns\n <code>true</code> for the character\n </ul>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isJavaIdentifierPart(int)} method.\n\n @param   ch      the character to be tested.\n @return <code>true</code> if the character may be part of a\n          Java identifier; <code>false</code> otherwise.\n @see     java.lang.Character#isIdentifierIgnorable(char)\n @see     java.lang.Character#isJavaIdentifierStart(char)\n @see     java.lang.Character#isLetterOrDigit(char)\n @see     java.lang.Character#isUnicodeIdentifierPart(char)\n @see     javax.lang.model.SourceVersion#isIdentifier(CharSequence)\n @since   1.1\n"
12739,method,java/lang/Character/isJavaIdentifierPart/int," Determines if the character (Unicode code point) may be part of a Java\n identifier as other than the first character.\n <p>\n A character may be part of a Java identifier if any of the following\n are true:\n <ul>\n <li>  it is a letter\n <li>  it is a currency symbol (such as <code>'$'</code>)\n <li>  it is a connecting punctuation character (such as <code>'_'</code>)\n <li>  it is a digit\n <li>  it is a numeric letter (such as a Roman numeral character)\n <li>  it is a combining mark\n <li>  it is a non-spacing mark\n <li> {@link #isIdentifierIgnorable(int)\n isIdentifierIgnorable(codePoint)} returns <code>true</code> for\n the character\n </ul>\n\n @param   codePoint the character (Unicode code point) to be tested.\n @return <code>true</code> if the character may be part of a\n          Java identifier; <code>false</code> otherwise.\n @see     java.lang.Character#isIdentifierIgnorable(int)\n @see     java.lang.Character#isJavaIdentifierStart(int)\n @see     java.lang.Character#isLetterOrDigit(int)\n @see     java.lang.Character#isUnicodeIdentifierPart(int)\n @see     javax.lang.model.SourceVersion#isIdentifier(CharSequence)\n @since   1.5\n"
12740,method,java/lang/Character/isUnicodeIdentifierStart/char," Determines if the specified character is permissible as the\n first character in a Unicode identifier.\n <p>\n A character may start a Unicode identifier if and only if\n one of the following conditions is true:\n <ul>\n <li> {@link #isLetter(char) isLetter(ch)} returns <code>true</code>\n <li> {@link #getType(char) getType(ch)} returns \n      <code>LETTER_NUMBER</code>.\n </ul>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isUnicodeIdentifierStart(int)} method.\n\n @param   ch      the character to be tested.\n @return  <code>true</code> if the character may start a Unicode \n          identifier; <code>false</code> otherwise.\n @see     java.lang.Character#isJavaIdentifierStart(char)\n @see     java.lang.Character#isLetter(char)\n @see     java.lang.Character#isUnicodeIdentifierPart(char)\n @since   1.1\n"
12742,method,java/lang/Character/isUnicodeIdentifierPart/char," Determines if the specified character may be part of a Unicode\n identifier as other than the first character.\n <p>\n A character may be part of a Unicode identifier if and only if\n one of the following statements is true:\n <ul>\n <li>  it is a letter\n <li>  it is a connecting punctuation character (such as <code>'_'</code>)\n <li>  it is a digit\n <li>  it is a numeric letter (such as a Roman numeral character)\n <li>  it is a combining mark\n <li>  it is a non-spacing mark\n <li> <code>isIdentifierIgnorable</code> returns\n <code>true</code> for this character.\n </ul>\n \n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isUnicodeIdentifierPart(int)} method.\n\n @param   ch      the character to be tested.\n @return  <code>true</code> if the character may be part of a \n          Unicode identifier; <code>false</code> otherwise.\n @see     java.lang.Character#isIdentifierIgnorable(char)\n @see     java.lang.Character#isJavaIdentifierPart(char)\n @see     java.lang.Character#isLetterOrDigit(char)\n @see     java.lang.Character#isUnicodeIdentifierStart(char)\n @since   1.1\n"
12743,method,java/lang/Character/isUnicodeIdentifierPart/int," Determines if the specified character (Unicode code point) may be part of a Unicode\n identifier as other than the first character.\n <p>\n A character may be part of a Unicode identifier if and only if\n one of the following statements is true:\n <ul>\n <li>  it is a letter\n <li>  it is a connecting punctuation character (such as <code>'_'</code>)\n <li>  it is a digit\n <li>  it is a numeric letter (such as a Roman numeral character)\n <li>  it is a combining mark\n <li>  it is a non-spacing mark\n <li> <code>isIdentifierIgnorable</code> returns\n <code>true</code> for this character.\n </ul>\n @param   codePoint the character (Unicode code point) to be tested.\n @return  <code>true</code> if the character may be part of a \n          Unicode identifier; <code>false</code> otherwise.\n @see     java.lang.Character#isIdentifierIgnorable(int)\n @see     java.lang.Character#isJavaIdentifierPart(int)\n @see     java.lang.Character#isLetterOrDigit(int)\n @see     java.lang.Character#isUnicodeIdentifierStart(int)\n @since   1.5\n"
12744,method,java/lang/Character/isIdentifierIgnorable/char," Determines if the specified character should be regarded as\n an ignorable character in a Java identifier or a Unicode identifier.\n <p>\n The following Unicode characters are ignorable in a Java identifier\n or a Unicode identifier:\n <ul>\n <li>ISO control characters that are not whitespace\n <ul>\n <li><code>'&#92;u0000'</code> through <code>'&#92;u0008'</code>\n <li><code>'&#92;u000E'</code> through <code>'&#92;u001B'</code>\n <li><code>'&#92;u007F'</code> through <code>'&#92;u009F'</code>\n </ul>\n\n <li>all characters that have the <code>FORMAT</code> general\n category value\n </ul>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isIdentifierIgnorable(int)} method.\n\n @param   ch      the character to be tested.\n @return  <code>true</code> if the character is an ignorable control \n          character that may be part of a Java or Unicode identifier;\n           <code>false</code> otherwise.\n @see     java.lang.Character#isJavaIdentifierPart(char)\n @see     java.lang.Character#isUnicodeIdentifierPart(char)\n @since   1.1\n"
12745,method,java/lang/Character/isIdentifierIgnorable/int," Determines if the specified character (Unicode code point) should be regarded as\n an ignorable character in a Java identifier or a Unicode identifier.\n <p>\n The following Unicode characters are ignorable in a Java identifier\n or a Unicode identifier:\n <ul>\n <li>ISO control characters that are not whitespace\n <ul>\n <li><code>'&#92;u0000'</code> through <code>'&#92;u0008'</code>\n <li><code>'&#92;u000E'</code> through <code>'&#92;u001B'</code>\n <li><code>'&#92;u007F'</code> through <code>'&#92;u009F'</code>\n </ul>\n\n <li>all characters that have the <code>FORMAT</code> general\n category value\n </ul>\n\n @param   codePoint the character (Unicode code point) to be tested.\n @return  <code>true</code> if the character is an ignorable control \n          character that may be part of a Java or Unicode identifier;\n          <code>false</code> otherwise.\n @see     java.lang.Character#isJavaIdentifierPart(int)\n @see     java.lang.Character#isUnicodeIdentifierPart(int)\n @since   1.5\n"
12750,method,java/lang/Character/toTitleCase/char," Converts the character argument to titlecase using case mapping\n information from the UnicodeData file. If a character has no\n explicit titlecase mapping and is not itself a titlecase char\n according to UnicodeData, then the uppercase mapping is\n returned as an equivalent titlecase mapping. If the\n <code>char</code> argument is already a titlecase\n <code>char</code>, the same <code>char</code> value will be\n returned.\n <p>\n Note that\n <code>Character.isTitleCase(Character.toTitleCase(ch))</code>\n does not always return <code>true</code> for some ranges of\n characters.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #toTitleCase(int)} method.\n\n @param   ch   the character to be converted.\n @return  the titlecase equivalent of the character, if any;\n          otherwise, the character itself.\n @see     java.lang.Character#isTitleCase(char)\n @see     java.lang.Character#toLowerCase(char)\n @see     java.lang.Character#toUpperCase(char)\n @since   1.0.2\n"
12751,method,java/lang/Character/toTitleCase/int," Converts the character (Unicode code point) argument to titlecase using case mapping\n information from the UnicodeData file. If a character has no\n explicit titlecase mapping and is not itself a titlecase char\n according to UnicodeData, then the uppercase mapping is\n returned as an equivalent titlecase mapping. If the\n character argument is already a titlecase\n character, the same character value will be\n returned.\n \n <p>Note that\n <code>Character.isTitleCase(Character.toTitleCase(codePoint))</code>\n does not always return <code>true</code> for some ranges of\n characters.\n\n @param   codePoint   the character (Unicode code point) to be converted.\n @return  the titlecase equivalent of the character, if any;\n          otherwise, the character itself.\n @see     java.lang.Character#isTitleCase(int)\n @see     java.lang.Character#toLowerCase(int)\n @see     java.lang.Character#toUpperCase(int)\n @since   1.5\n"
12752,method,java/lang/Character/digit/char;int," Returns the numeric value of the character <code>ch</code> in the\n specified radix.\n <p>\n If the radix is not in the range <code>MIN_RADIX</code>&nbsp;&lt;=\n <code>radix</code>&nbsp;&lt;= <code>MAX_RADIX</code> or if the\n value of <code>ch</code> is not a valid digit in the specified\n radix, <code>-1</code> is returned. A character is a valid digit\n if at least one of the following is true:\n <ul>\n <li>The method <code>isDigit</code> is <code>true</code> of the character\n     and the Unicode decimal digit value of the character (or its\n     single-character decomposition) is less than the specified radix.\n     In this case the decimal digit value is returned.\n <li>The character is one of the uppercase Latin letters\n     <code>'A'</code> through <code>'Z'</code> and its code is less than\n     <code>radix&nbsp;+ 'A'&nbsp;-&nbsp;10</code>.\n     In this case, <code>ch&nbsp;- 'A'&nbsp;+&nbsp;10</code>\n     is returned.\n <li>The character is one of the lowercase Latin letters\n     <code>'a'</code> through <code>'z'</code> and its code is less than\n     <code>radix&nbsp;+ 'a'&nbsp;-&nbsp;10</code>.\n     In this case, <code>ch&nbsp;- 'a'&nbsp;+&nbsp;10</code>\n     is returned.\n </ul>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #digit(int, int)} method.\n\n @param   ch      the character to be converted.\n @param   radix   the radix.\n @return  the numeric value represented by the character in the\n          specified radix.\n @see     java.lang.Character#forDigit(int, int)\n @see     java.lang.Character#isDigit(char)\n"
12754,method,java/lang/Character/getNumericValue/char," Returns the <code>int</code> value that the specified Unicode\n character represents. For example, the character\n <code>'&#92;u216C'</code> (the roman numeral fifty) will return\n an int with a value of 50.\n <p>\n The letters A-Z in their uppercase (<code>'&#92;u0041'</code> through\n <code>'&#92;u005A'</code>), lowercase\n (<code>'&#92;u0061'</code> through <code>'&#92;u007A'</code>), and\n full width variant (<code>'&#92;uFF21'</code> through\n <code>'&#92;uFF3A'</code> and <code>'&#92;uFF41'</code> through\n <code>'&#92;uFF5A'</code>) forms have numeric values from 10\n through 35. This is independent of the Unicode specification,\n which does not assign numeric values to these <code>char</code>\n values.\n <p>\n If the character does not have a numeric value, then -1 is returned.\n If the character has a numeric value that cannot be represented as a\n nonnegative integer (for example, a fractional value), then -2\n is returned.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #getNumericValue(int)} method.\n\n @param   ch      the character to be converted.\n @return  the numeric value of the character, as a nonnegative <code>int</code>\n           value; -2 if the character has a numeric value that is not a\n          nonnegative integer; -1 if the character has no numeric value.\n @see     java.lang.Character#forDigit(int, int)\n @see     java.lang.Character#isDigit(char)\n @since   1.1\n"
12756,method,java/lang/Character/isSpace/char," Determines if the specified character is ISO-LATIN-1 white space.\n This method returns <code>true</code> for the following five\n characters only:\n <table>\n <tr><td><code>'\t'</code></td>            <td><code>'&#92;u0009'</code></td>\n     <td><code>HORIZONTAL TABULATION</code></td></tr>\n <tr><td><code>'\n'</code></td>            <td><code>'&#92;u000A'</code></td>\n     <td><code>NEW LINE</code></td></tr>\n <tr><td><code>'\f'</code></td>            <td><code>'&#92;u000C'</code></td>\n     <td><code>FORM FEED</code></td></tr>\n <tr><td><code>'\r'</code></td>            <td><code>'&#92;u000D'</code></td>\n     <td><code>CARRIAGE RETURN</code></td></tr>\n <tr><td><code>'&nbsp;'</code></td>  <td><code>'&#92;u0020'</code></td>\n     <td><code>SPACE</code></td></tr>\n </table>\n\n @param      ch   the character to be tested.\n @return     <code>true</code> if the character is ISO-LATIN-1 white\n             space; <code>false</code> otherwise.\n @see        java.lang.Character#isSpaceChar(char)\n @see        java.lang.Character#isWhitespace(char)\n @deprecated Replaced by isWhitespace(char).\n"
12757,method,java/lang/Character/isSpaceChar/char," Determines if the specified character is a Unicode space character.\n A character is considered to be a space character if and only if\n it is specified to be a space character by the Unicode standard. This\n method returns true if the character's general category type is any of\n the following:\n <ul>\n <li> <code>SPACE_SEPARATOR</code>\n <li> <code>LINE_SEPARATOR</code>\n <li> <code>PARAGRAPH_SEPARATOR</code>\n </ul>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isSpaceChar(int)} method.\n\n @param   ch      the character to be tested.\n @return  <code>true</code> if the character is a space character; \n          <code>false</code> otherwise.\n @see     java.lang.Character#isWhitespace(char)\n @since   1.1\n"
12758,method,java/lang/Character/isSpaceChar/int," Determines if the specified character (Unicode code point) is a\n Unicode space character.  A character is considered to be a\n space character if and only if it is specified to be a space\n character by the Unicode standard. This method returns true if\n the character's general category type is any of the following:\n\n <ul>\n <li> {@link #SPACE_SEPARATOR}\n <li> {@link #LINE_SEPARATOR}\n <li> {@link #PARAGRAPH_SEPARATOR}\n </ul>\n\n @param   codePoint the character (Unicode code point) to be tested.\n @return  <code>true</code> if the character is a space character; \n          <code>false</code> otherwise.\n @see     java.lang.Character#isWhitespace(int)\n @since   1.5\n"
12759,method,java/lang/Character/isWhitespace/char," Determines if the specified character is white space according to Java.\n A character is a Java whitespace character if and only if it satisfies\n one of the following criteria:\n <ul>\n <li> It is a Unicode space character (<code>SPACE_SEPARATOR</code>,\n      <code>LINE_SEPARATOR</code>, or <code>PARAGRAPH_SEPARATOR</code>) \n      but is not also a non-breaking space (<code>'&#92;u00A0'</code>,\n      <code>'&#92;u2007'</code>, <code>'&#92;u202F'</code>).\n <li> It is <code>'&#92;u0009'</code>, HORIZONTAL TABULATION.\n <li> It is <code>'&#92;u000A'</code>, LINE FEED.\n <li> It is <code>'&#92;u000B'</code>, VERTICAL TABULATION.\n <li> It is <code>'&#92;u000C'</code>, FORM FEED.\n <li> It is <code>'&#92;u000D'</code>, CARRIAGE RETURN.\n <li> It is <code>'&#92;u001C'</code>, FILE SEPARATOR.\n <li> It is <code>'&#92;u001D'</code>, GROUP SEPARATOR.\n <li> It is <code>'&#92;u001E'</code>, RECORD SEPARATOR.\n <li> It is <code>'&#92;u001F'</code>, UNIT SEPARATOR.\n </ul>\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isWhitespace(int)} method.\n\n @param   ch the character to be tested.\n @return  <code>true</code> if the character is a Java whitespace\n          character; <code>false</code> otherwise.\n @see     java.lang.Character#isSpaceChar(char)\n @since   1.1\n"
12760,method,java/lang/Character/isWhitespace/int," Determines if the specified character (Unicode code point) is\n white space according to Java.  A character is a Java\n whitespace character if and only if it satisfies one of the\n following criteria:\n <ul>\n <li> It is a Unicode space character ({@link #SPACE_SEPARATOR},\n      {@link #LINE_SEPARATOR}, or {@link #PARAGRAPH_SEPARATOR}) \n      but is not also a non-breaking space (<code>'&#92;u00A0'</code>,\n      <code>'&#92;u2007'</code>, <code>'&#92;u202F'</code>).\n <li> It is <code>'&#92;u0009'</code>, HORIZONTAL TABULATION.\n <li> It is <code>'&#92;u000A'</code>, LINE FEED.\n <li> It is <code>'&#92;u000B'</code>, VERTICAL TABULATION.\n <li> It is <code>'&#92;u000C'</code>, FORM FEED.\n <li> It is <code>'&#92;u000D'</code>, CARRIAGE RETURN.\n <li> It is <code>'&#92;u001C'</code>, FILE SEPARATOR.\n <li> It is <code>'&#92;u001D'</code>, GROUP SEPARATOR.\n <li> It is <code>'&#92;u001E'</code>, RECORD SEPARATOR.\n <li> It is <code>'&#92;u001F'</code>, UNIT SEPARATOR.\n </ul>\n <p>\n\n @param   codePoint the character (Unicode code point) to be tested.\n @return  <code>true</code> if the character is a Java whitespace\n          character; <code>false</code> otherwise.\n @see     java.lang.Character#isSpaceChar(int)\n @since   1.5\n"
12761,method,java/lang/Character/isISOControl/char," Determines if the specified character is an ISO control\n character.  A character is considered to be an ISO control\n character if its code is in the range <code>'&#92;u0000'</code>\n through <code>'&#92;u001F'</code> or in the range\n <code>'&#92;u007F'</code> through <code>'&#92;u009F'</code>.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isISOControl(int)} method.\n\n @param   ch      the character to be tested.\n @return  <code>true</code> if the character is an ISO control character;\n          <code>false</code> otherwise.\n\n @see     java.lang.Character#isSpaceChar(char)\n @see     java.lang.Character#isWhitespace(char)\n @since   1.1\n"
12763,method,java/lang/Character/getType/char," Returns a value indicating a character's general category.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #getType(int)} method.\n\n @param   ch      the character to be tested.\n @return  a value of type <code>int</code> representing the \n          character's general category.\n @see     java.lang.Character#COMBINING_SPACING_MARK\n @see     java.lang.Character#CONNECTOR_PUNCTUATION\n @see     java.lang.Character#CONTROL\n @see     java.lang.Character#CURRENCY_SYMBOL\n @see     java.lang.Character#DASH_PUNCTUATION\n @see     java.lang.Character#DECIMAL_DIGIT_NUMBER\n @see     java.lang.Character#ENCLOSING_MARK\n @see     java.lang.Character#END_PUNCTUATION\n @see     java.lang.Character#FINAL_QUOTE_PUNCTUATION\n @see     java.lang.Character#FORMAT\n @see     java.lang.Character#INITIAL_QUOTE_PUNCTUATION\n @see     java.lang.Character#LETTER_NUMBER\n @see     java.lang.Character#LINE_SEPARATOR\n @see     java.lang.Character#LOWERCASE_LETTER\n @see     java.lang.Character#MATH_SYMBOL\n @see     java.lang.Character#MODIFIER_LETTER\n @see     java.lang.Character#MODIFIER_SYMBOL\n @see     java.lang.Character#NON_SPACING_MARK\n @see     java.lang.Character#OTHER_LETTER\n @see     java.lang.Character#OTHER_NUMBER\n @see     java.lang.Character#OTHER_PUNCTUATION\n @see     java.lang.Character#OTHER_SYMBOL\n @see     java.lang.Character#PARAGRAPH_SEPARATOR\n @see     java.lang.Character#PRIVATE_USE\n @see     java.lang.Character#SPACE_SEPARATOR\n @see     java.lang.Character#START_PUNCTUATION\n @see     java.lang.Character#SURROGATE\n @see     java.lang.Character#TITLECASE_LETTER\n @see     java.lang.Character#UNASSIGNED\n @see     java.lang.Character#UPPERCASE_LETTER\n @since   1.1\n"
12766,method,java/lang/Character/getDirectionality/char," Returns the Unicode directionality property for the given\n character.  Character directionality is used to calculate the\n visual ordering of text. The directionality value of undefined\n <code>char</code> values is <code>DIRECTIONALITY_UNDEFINED</code>.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #getDirectionality(int)} method.\n\n @param  ch <code>char</code> for which the directionality property \n            is requested.\n @return the directionality property of the <code>char</code> value.\n\n @see Character#DIRECTIONALITY_UNDEFINED\n @see Character#DIRECTIONALITY_LEFT_TO_RIGHT\n @see Character#DIRECTIONALITY_RIGHT_TO_LEFT\n @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC\n @see Character#DIRECTIONALITY_EUROPEAN_NUMBER\n @see Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR\n @see Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR\n @see Character#DIRECTIONALITY_ARABIC_NUMBER\n @see Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR\n @see Character#DIRECTIONALITY_NONSPACING_MARK\n @see Character#DIRECTIONALITY_BOUNDARY_NEUTRAL\n @see Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR\n @see Character#DIRECTIONALITY_SEGMENT_SEPARATOR\n @see Character#DIRECTIONALITY_WHITESPACE\n @see Character#DIRECTIONALITY_OTHER_NEUTRALS\n @see Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING\n @see Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE\n @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING\n @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE\n @see Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT\n @since 1.4\n"
12768,method,java/lang/Character/isMirrored/char," Determines whether the character is mirrored according to the\n Unicode specification.  Mirrored characters should have their\n glyphs horizontally mirrored when displayed in text that is\n right-to-left.  For example, <code>'&#92;u0028'</code> LEFT\n PARENTHESIS is semantically defined to be an <i>opening\n parenthesis</i>.  This will appear as a "(" in text that is\n left-to-right but as a ")" in text that is right-to-left.\n\n <p><b>Note:</b> This method cannot handle <a\n href="#supplementary"> supplementary characters</a>. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isMirrored(int)} method.\n\n @param  ch <code>char</code> for which the mirrored property is requested\n @return <code>true</code> if the char is mirrored, <code>false</code>\n         if the <code>char</code> is not mirrored or is not defined.\n @since 1.4\n"
12769,method,java/lang/Character/isMirrored/int," Determines whether the specified character (Unicode code point)\n is mirrored according to the Unicode specification.  Mirrored\n characters should have their glyphs horizontally mirrored when\n displayed in text that is right-to-left.  For example,\n <code>'&#92;u0028'</code> LEFT PARENTHESIS is semantically\n defined to be an <i>opening parenthesis</i>.  This will appear\n as a "(" in text that is left-to-right but as a ")" in text\n that is right-to-left.\n\n @param   codePoint the character (Unicode code point) to be tested.\n @return  <code>true</code> if the character is mirrored, <code>false</code>\n          if the character is not mirrored or is not defined.\n @since   1.5\n"
12770,method,java/lang/Character/compareTo/Character," Compares two <code>Character</code> objects numerically.\n\n @param   anotherCharacter   the <code>Character</code> to be compared.\n\n @return  the value <code>0</code> if the argument <code>Character</code> \n          is equal to this <code>Character</code>; a value less than \n          <code>0</code> if this <code>Character</code> is numerically less \n          than the <code>Character</code> argument; and a value greater than \n          <code>0</code> if this <code>Character</code> is numerically greater \n          than the <code>Character</code> argument (unsigned comparison).  \n          Note that this is strictly a numerical comparison; it is not \n          locale-dependent.\n @since   1.2\n"
12809,field,java/lang/Character/DIRECTIONALITY_LEFT_TO_RIGHT," Strong bidirectional character type "L" in the Unicode specification.\n @since 1.4\n"
12810,field,java/lang/Character/DIRECTIONALITY_RIGHT_TO_LEFT," Strong bidirectional character type "R" in the Unicode specification.\n @since 1.4\n"
12811,field,java/lang/Character/DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC," Strong bidirectional character type "AL" in the Unicode specification.\n @since 1.4\n"
12823,field,java/lang/Character/DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING," Strong bidirectional character type "LRE" in the Unicode specification.\n @since 1.4\n"
12824,field,java/lang/Character/DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE," Strong bidirectional character type "LRO" in the Unicode specification.\n @since 1.4\n"
12825,field,java/lang/Character/DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING," Strong bidirectional character type "RLE" in the Unicode specification.\n @since 1.4\n"
12826,field,java/lang/Character/DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE," Strong bidirectional character type "RLO" in the Unicode specification.\n @since 1.4\n"
12838,class,java/lang/Character/Subset," Instances of this class represent particular subsets of the Unicode\n character set.  The only family of subsets defined in the\n <code>Character</code> class is <code>{@link Character.UnicodeBlock\n UnicodeBlock}</code>.  Other portions of the Java API may define other\n subsets for their own purposes.\n\n @since 1.2\n"
12839,method,java/lang/Character/Subset/equals/Object," Compares two <code>Subset</code> objects for equality.\n This method returns <code>true</code> if and only if\n <code>this</code> and the argument refer to the same\n object; since this method is <code>final</code>, this\n guarantee holds for all subclasses.\n"
12840,method,java/lang/Character/Subset/hashCode/," Returns the standard hash code as defined by the\n <code>{@link Object#hashCode}</code> method.  This method\n is <code>final</code> in order to ensure that the\n <code>equals</code> and <code>hashCode</code> methods will\n be consistent in all subclasses.\n"
12844,method,java/lang/Character/UnicodeBlock/of/char," Returns the object representing the Unicode block containing the\n given character, or <code>null</code> if the character is not a\n member of a defined block.\n\n <p><b>Note:</b> This method cannot handle <a\n href="Character.html#supplementary"> supplementary\n characters</a>. To support all Unicode characters,\n including supplementary characters, use the {@link\n #of(int)} method.\n\n @param   c  The character in question\n @return  The <code>UnicodeBlock</code> instance representing the\n          Unicode block of which this character is a member, or\n          <code>null</code> if the character is not a member of any\n          Unicode block\n"
12849,field,java/lang/Character/UnicodeBlock/LATIN_EXTENDED_A," Constant for the "Latin Extended-A" Unicode character block.\n @since 1.2\n"
12850,field,java/lang/Character/UnicodeBlock/LATIN_EXTENDED_B," Constant for the "Latin Extended-B" Unicode character block.\n @since 1.2\n"
12873,field,java/lang/Character/UnicodeBlock/LATIN_EXTENDED_ADDITIONAL," Constant for the "Latin Extended Additional" Unicode character block.\n @since 1.2\n"
12874,field,java/lang/Character/UnicodeBlock/GREEK_EXTENDED," Constant for the "Greek Extended" Unicode character block.\n @since 1.2\n"
12876,field,java/lang/Character/UnicodeBlock/SUPERSCRIPTS_AND_SUBSCRIPTS," Constant for the "Superscripts and Subscripts" Unicode character block.\n @since 1.2\n"
12928,field,java/lang/Character/UnicodeBlock/BOPOMOFO_EXTENDED," Constant for the "Bopomofo Extended" Unicode character block.\n @since 1.4\n"
12973,interface,java/lang/CharSequence," A <tt>CharSequence</tt> is a readable sequence of <code>char</code> values. This\n interface provides uniform, read-only access to many different kinds of\n <code>char</code> sequences.\n A <code>char</code> value represents a character in the <i>Basic\n Multilingual Plane (BMP)</i> or a surrogate. Refer to <a\n href="Character.html#unicode">Unicode Character Representation</a> for details.\n\n <p> This interface does not refine the general contracts of the {@link\n java.lang.Object#equals(java.lang.Object) equals} and {@link\n java.lang.Object#hashCode() hashCode} methods.  The result of comparing two\n objects that implement <tt>CharSequence</tt> is therefore, in general,\n undefined.  Each object may be implemented by a different class, and there\n is no guarantee that each class will be capable of testing its instances\n for equality with those of the other.  It is therefore inappropriate to use\n arbitrary <tt>CharSequence</tt> instances as elements in a set or as keys in\n a map. </p>\n\n @author Mike McCloskey\n @version 1.10 10/03/23\n @since 1.4\n @spec JSR-51\n"
12978,class,java/lang/Byte,"\n The <code>Byte</code> class wraps a value of primitive type\n <code>byte</code> in an object.  An object of type\n <code>Byte</code> contains a single field whose type is\n <code>byte</code>.\n\n <p>\n\n In addition, this class provides several methods for converting a\n <code>byte</code> to a <code>String</code> and a <code>String</code>\n to a <code>byte</code>, as well as other constants and methods\n useful when dealing with a <code>byte</code>.\n\n @author  Nakul Saraiya\n @version 1.42, 03/23/10\n @see     java.lang.Number\n @since   JDK1.1\n"
12979,method,java/lang/Byte/toString/byte," Returns a new <code>String</code> object representing the\n specified <code>byte</code>. The radix is assumed to be 10.\n\n @param b	the <code>byte</code> to be converted\n @return the string representation of the specified <code>byte</code>\n @see java.lang.Integer#toString(int)\n"
12994,method,java/lang/Byte/equals/Object," Compares this object to the specified object.  The result is\n <code>true</code> if and only if the argument is not\n <code>null</code> and is a <code>Byte</code> object that\n contains the same <code>byte</code> value as this object.\n\n @param obj	the object to compare with\n @return 		<code>true</code> if the objects are the same;\n 			<code>false</code> otherwise.\n"
13002,class,java/lang/Boolean," The Boolean class wraps a value of the primitive type \n <code>boolean</code> in an object. An object of type \n <code>Boolean</code> contains a single field whose type is \n <code>boolean</code>. \n <p>\n In addition, this class provides many methods for \n converting a <code>boolean</code> to a <code>String</code> and a \n <code>String</code> to a <code>boolean</code>, as well as other \n constants and methods useful when dealing with a \n <code>boolean</code>. \n\n @author  Arthur van Hoff\n @version 1.54, 03/23/10\n @since   JDK1.0\n"
13010,method,java/lang/Boolean/equals/Object," Returns <code>true</code> if and only if the argument is not \n <code>null</code> and is a <code>Boolean</code> object that \n represents the same <code>boolean</code> value as this object. \n\n @param   obj   the object to compare with.\n @return  <code>true</code> if the Boolean objects represent the \n          same value; <code>false</code> otherwise.\n"
13011,method,java/lang/Boolean/getBoolean/String," Returns <code>true</code> if and only if the system property \n named by the argument exists and is equal to the string \n {@code "true"}. (Beginning with version 1.0.2 of the \n Java<small><sup>TM</sup></small> platform, the test of \n this string is case insensitive.) A system property is accessible \n through <code>getProperty</code>, a method defined by the \n <code>System</code> class.\n <p>\n If there is no property with the specified name, or if the specified\n name is empty or null, then <code>false</code> is returned.\n\n @param   name   the system property name.\n @return  the <code>boolean</code> value of the system property.\n @see     java.lang.System#getProperty(java.lang.String)\n @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n"
13018,class,java/lang/AssertionError," Thrown to indicate that an assertion has failed.\n\n <p>The seven one-argument public constructors provided by this\n class ensure that the assertion error returned by the invocation:\n <pre>\n     new AssertionError(<i>expression</i>)\n </pre>\n has as its detail message the <i>string conversion</i> of\n <i>expression</i> (as defined in <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html">\n <i>The Java Language Specification, Second Edition</i></a>, \n <a href="http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#40220">\n Section  15.18.1.1</a>), regardless of the type of <i>expression</i>.\n\n @version 1.10, 03/23/10\n @since   1.4\n"
13020,method,java/lang/AssertionError/AssertionError/Object," Constructs an AssertionError with its detail message derived\n from the specified object, which is converted to a string as\n defined in <i>The Java Language Specification, Second\n Edition</i>, Section 15.18.1.1.\n<p>\n If the specified object is an instance of <tt>Throwable</tt>, it\n becomes the <i>cause</i> of the newly constructed assertion error.\n\n @param detailMessage value to be used in constructing detail message\n @see   Throwable#getCause()\n"
13034,class,java/lang/ArithmeticException," Thrown when an exceptional arithmetic condition has occurred. For \n example, an integer "divide by zero" throws an \n instance of this class. \n\n @author  unascribed\n @version 1.24, 03/23/10\n @since   JDK1.0\n"
13038,method,java/lang/Appendable/append/CharSequence," Appends the specified character sequence to this <tt>Appendable</tt>.\n\n <p> Depending on which class implements the character sequence\n <tt>csq</tt>, the entire sequence may not be appended.  For\n instance, if <tt>csq</tt> is a {@link java.nio.CharBuffer} then\n the subsequence to append is defined by the buffer's position and limit.\n\n @param  csq\n         The character sequence to append.  If <tt>csq</tt> is\n         <tt>null</tt>, then the four characters <tt>"null"</tt> are\n         appended to this Appendable.\n\n @return  A reference to this <tt>Appendable</tt>\n\n @throws  IOException\n          If an I/O error occurs\n"
13039,method,java/lang/Appendable/append/CharSequence;int;int," Appends a subsequence of the specified character sequence to this\n <tt>Appendable</tt>.\n\n <p> An invocation of this method of the form <tt>out.append(csq, start,\n end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in\n exactly the same way as the invocation\n\n <pre>\n     out.append(csq.subSequence(start, end)) </pre>\n\n @param  csq\n         The character sequence from which a subsequence will be\n         appended.  If <tt>csq</tt> is <tt>null</tt>, then characters\n         will be appended as if <tt>csq</tt> contained the four\n         characters <tt>"null"</tt>.\n\n @param  start\n         The index of the first character in the subsequence\n\n @param  end\n         The index of the character following the last character in the\n         subsequence\n\n @return  A reference to this <tt>Appendable</tt>\n\n @throws  IndexOutOfBoundsException\n          If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>\n          is greater than <tt>end</tt>, or <tt>end</tt> is greater than\n          <tt>csq.length()</tt>\n\n @throws  IOException\n          If an I/O error occurs\n"
13040,method,java/lang/Appendable/append/char," Appends the specified character to this <tt>Appendable</tt>.\n\n @param  c\n         The character to append\n\n @return  A reference to this <tt>Appendable</tt>\n\n @throws  IOException\n          If an I/O error occurs\n"
13041,class,java/lang/AbstractMethodError," Thrown when an application tries to call an abstract method.\n Normally, this error is caught by the compiler; this error can\n only occur at run time if the definition of some class has\n incompatibly changed since the currently executing method was last\n compiled.\n\n @author  unascribed\n @version 1.21, 03/23/10\n @since   JDK1.0\n"
13044,class,java/lang/ref/WeakReference," Weak reference objects, which do not prevent their referents from being\n made finalizable, finalized, and then reclaimed.  Weak references are most\n often used to implement canonicalizing mappings.\n\n <p> Suppose that the garbage collector determines at a certain point in time\n that an object is <a href="package-summary.html#reachability">weakly\n reachable</a>.  At that time it will atomically clear all weak references to\n that object and all weak references to any other weakly-reachable objects\n from which that object is reachable through a chain of strong and soft\n references.  At the same time it will declare all of the formerly\n weakly-reachable objects to be finalizable.  At the same time or at some\n later time it will enqueue those newly-cleared weak references that are\n registered with reference queues.\n\n @version  1.20, 03/23/10\n @author   Mark Reinhold\n @since    1.2\n"
13047,class,java/lang/ref/SoftReference," Soft reference objects, which are cleared at the discretion of the garbage\n collector in response to memory demand.  Soft references are most often used\n to implement memory-sensitive caches.\n\n <p> Suppose that the garbage collector determines at a certain point in time\n that an object is <a href="package-summary.html#reachability">softly\n reachable</a>.  At that time it may choose to clear atomically all soft\n references to that object and all soft references to any other\n softly-reachable objects from which that object is reachable through a chain\n of strong references.  At the same time or at some later time it will\n enqueue those newly-cleared soft references that are registered with\n reference queues.\n\n <p> All soft references to softly-reachable objects are guaranteed to have\n been cleared before the virtual machine throws an\n <code>OutOfMemoryError</code>.  Otherwise no constraints are placed upon the\n time at which a soft reference will be cleared or the order in which a set\n of such references to different objects will be cleared.  Virtual machine\n implementations are, however, encouraged to bias against clearing\n recently-created or recently-used soft references.\n\n <p> Direct instances of this class may be used to implement simple caches;\n this class or derived subclasses may also be used in larger data structures\n to implement more sophisticated caches.  As long as the referent of a soft\n reference is strongly reachable, that is, is actually in use, the soft\n reference will not be cleared.  Thus a sophisticated cache can, for example,\n prevent its most recently used entries from being discarded by keeping\n strong referents to those entries, leaving the remaining entries to be\n discarded at the discretion of the garbage collector.\n\n @version  1.37, 03/23/10\n @author   Mark Reinhold\n @since    1.2\n"
13051,class,java/lang/ref/ReferenceQueue," Reference queues, to which registered reference objects are appended by the\n garbage collector after the appropriate reachability changes are detected.\n\n @version  1.27, 03/23/10\n @author   Mark Reinhold\n @since    1.2\n"
13053,method,java/lang/ref/ReferenceQueue/remove/long," Removes the next reference object in this queue, blocking until either\n one becomes available or the given timeout period expires.\n\n <p> This method does not offer real-time guarantees: It schedules the\n timeout as if by invoking the {@link Object#wait(long)} method.\n\n @param  timeout  If positive, block for up to <code>timeout</code>\n                  milliseconds while waiting for a reference to be\n                  added to this queue.  If zero, block indefinitely.\n\n @return  A reference object, if one was available within the specified\n          timeout period, otherwise <code>null</code>\n\n @throws  IllegalArgumentException\n          If the value of the timeout argument is negative\n\n @throws  InterruptedException\n          If the timeout wait is interrupted\n"
13058,method,java/lang/ref/Reference/clear/," Clears this reference object.  Invoking this method will not cause this\n object to be enqueued.\n\n <p> This method is invoked only by Java code; when the garbage collector\n clears references it does so directly, without invoking this method.\n"
13059,method,java/lang/ref/Reference/isEnqueued/," Tells whether or not this reference object has been enqueued, either by\n the program or by the garbage collector.	 If this reference object was\n not registered with a queue when it was created, then this method will\n always return <code>false</code>.\n\n @return	 <code>true</code> if and only if this reference object has\n		 been enqueued\n"
13060,method,java/lang/ref/Reference/enqueue/," Adds this reference object to the queue with which it is registered,\n if any.\n\n <p> This method is invoked only by Java code; when the garbage collector\n enqueues references it does so directly, without invoking this method.\n\n @return	 <code>true</code> if this reference object was successfully\n		 enqueued; <code>false</code> if it was already enqueued or if\n		 it was not registered with a queue when it was created\n"
13061,class,java/lang/ref/PhantomReference," Phantom reference objects, which are enqueued after the collector\n determines that their referents may otherwise be reclaimed.  Phantom\n references are most often used for scheduling pre-mortem cleanup actions in\n a more flexible way than is possible with the Java finalization mechanism.\n\n <p> If the garbage collector determines at a certain point in time that the\n referent of a phantom reference is <a\n href="package-summary.html#reachability">phantom reachable</a>, then at that\n time or at some later time it will enqueue the reference.\n\n <p> In order to ensure that a reclaimable object remains so, the referent of\n a phantom reference may not be retrieved: The <code>get</code> method of a\n phantom reference always returns <code>null</code>.\n\n <p> Unlike soft and weak references, phantom references are not\n automatically cleared by the garbage collector as they are enqueued.  An\n object that is reachable via phantom references will remain so until all\n such references are cleared or themselves become unreachable.\n\n @version  1.21, 03/23/10\n @author   Mark Reinhold\n @since    1.2\n"
13071,field,java/lang/annotation/RetentionPolicy/RUNTIME," Annotations are to be recorded in the class file by the compiler and\n retained by the VM at run time, so they may be read reflectively.\n\n @see java.lang.reflect.AnnotatedElement\n"
13072,interface,java/lang/annotation/Retention," Indicates how long annotations with the annotated type are to\n be retained.  If no Retention annotation is present on\n an annotation type declaration, the retention policy defaults to\n <tt>RetentionPolicy.CLASS</tt>.\n\n <p>A Target meta-annotation has effect only if the meta-annotated\n type is use directly for annotation.  It has no effect if the meta-annotated\n type is used as a member type in another annotation type.\n\n @author  Joshua Bloch\n @since 1.5\n"
13074,interface,java/lang/annotation/Inherited," Indicates that an annotation type is automatically inherited.  If\n an Inherited meta-annotation is present on an annotation type\n declaration, and the user queries the annotation type on a class\n declaration, and the class declaration has no annotation for this type,\n then the class's superclass will automatically be queried for the\n annotation type.  This process will be repeated until an annotation for this\n type is found, or the top of the class hierarchy (Object)\n is reached.  If no superclass has an annotation for this type, then\n the query will indicate that the class in question has no such annotation.\n\n <p>Note that this meta-annotation type has no effect if the annotated\n type is used to annotate anything other than a class.  Note also\n that this meta-annotation only causes annotations to be inherited\n from superclasses; annotations on implemented interfaces have no\n effect.\n\n @author  Joshua Bloch\n @since 1.5\n"
13075,class,java/lang/annotation/IncompleteAnnotationException," Thrown to indicate that a program has attempted to access an element of\n an annotation type that was added to the annotation type definition after\n the annotation was compiled (or serialized).  This exception will not be\n thrown if the new element has a default value.\n\n @author  Josh Bloch\n @since 1.5\n"
13090,interface,java/lang/annotation/Documented," Indicates that annotations with a type are to be documented by javadoc\n and similar tools by default.  This type should be used to annotate the \n declarations of types whose annotations affect the use of annotated\n elements by their clients.  If a type declaration is annotated with\n Documented, its annotations become part of the public API\n of the annotated elements.\n\n @author  Joshua Bloch\n @version 1.7, 03/23/10\n @since 1.5\n"
13091,class,java/lang/annotation/AnnotationTypeMismatchException," Thrown to indicate that a program has attempted to access an element of\n an annotation whose type has changed after the annotation was compiled\n (or serialized).\n\n @author  Josh Bloch\n @since 1.5\n"
13093,method,java/lang/annotation/AnnotationTypeMismatchException/foundType/," Returns the type of data found in the incorrectly typed element.\n The returned string may, but is not required to, contain the value\n as well.  The exact format of the string is unspecified.\n\n @return the type of data found in the incorrectly typed element\n"
13094,method,java/lang/annotation/AnnotationTypeMismatchException/AnnotationTypeMismatchException/Method;String," Constructs an AnnotationTypeMismatchException for the specified\n annotation type element and found data type.\n\n @param element the <tt>Method</tt> object for the annotation element\n @param foundType the (erroneous) type of data found in the annotation.\n        This string may, but is not required to, contain the value\n        as well.  The exact format of the string is unspecified.\n"
13097,method,java/lang/annotation/AnnotationFormatError/AnnotationFormatError/String;Throwable," Constructs a new <tt>AnnotationFormatError</tt> with the specified\n detail message and cause.  Note that the detail message associated\n with <code>cause</code> is <i>not</i> automatically incorporated in\n this error's detail message.\n\n @param  message the detail message \n @param  cause the cause (A <tt>null</tt> value is permitted, and\n     indicates that the cause is nonexistent or unknown.)\n"
13099,interface,java/lang/annotation/Annotation," The common interface extended by all annotation types.  Note that an\n interface that manually extends this one does <i>not</i> define\n an annotation type.  Also note that this interface does not itself\n define an annotation type.\n\n @author  Josh Bloch\n @since   1.5\n"
13100,method,java/lang/annotation/Annotation/equals/Object," Returns true if the specified object represents an annotation\n that is logically equivalent to this one.  In other words,\n returns true if the specified object is an instance of the same\n annotation type as this instance, all of whose members are equal\n to the corresponding member of this annotation, as defined below:\n <ul>\n    <li>Two corresponding primitive typed members whose values are\n    <tt>x</tt> and <tt>y</tt> are considered equal if <tt>x == y</tt>,\n    unless their type is <tt>float</tt> or <tt>double</tt>.\n\n    <li>Two corresponding <tt>float</tt> members whose values\n    are <tt>x</tt> and <tt>y</tt> are considered equal if\n    <tt>Float.valueOf(x).equals(Float.valueOf(y))</tt>.\n    (Unlike the <tt>==</tt> operator, NaN is considered equal\n    to itself, and <tt>0.0f</tt> unequal to <tt>-0.0f</tt>.) \n\n    <li>Two corresponding <tt>double</tt> members whose values\n    are <tt>x</tt> and <tt>y</tt> are considered equal if\n    <tt>Double.valueOf(x).equals(Double.valueOf(y))</tt>.\n    (Unlike the <tt>==</tt> operator, NaN is considered equal\n    to itself, and <tt>0.0</tt> unequal to <tt>-0.0</tt>.)\n\n    <li>Two corresponding <tt>String</tt>, <tt>Class</tt>, enum, or\n    annotation typed members whose values are <tt>x</tt> and <tt>y</tt>\n    are considered equal if <tt>x.equals(y)</tt>.  (Note that this\n    definition is recursive for annotation typed members.)\n\n    <li>Two corresponding array typed members <tt>x</tt> and <tt>y</tt>\n    are considered equal if <tt>Arrays.equals(x, y)</tt>, for the\n    appropriate overloading of {@link java.util.Arrays#equals}.\n </ul>\n\n @return true if the specified object represents an annotation\n     that is logically equivalent to this one, otherwise false\n"
13102,method,java/lang/annotation/Annotation/toString/," Returns a string representation of this annotation.  The details\n of the representation are implementation-dependent, but the following\n may be regarded as typical:\n <pre>\n   &#064;com.acme.util.Name(first=Alfred, middle=E., last=Neuman)\n </pre>\n\n @return a string representation of this annotation\n"
13104,interface,java/lang/reflect/WildcardType," WildcardType represents a wildcard type expression, such as\n <tt>?</tt>, <tt>? extends Number</tt>, or <tt>? super Integer</tt>.\n\n @since 1.5\n"
13105,method,java/lang/reflect/WildcardType/getUpperBounds/," Returns an array of <tt>Type</tt> objects representing the  upper\n bound(s) of this type variable.  Note that if no upper bound is\n explicitly declared, the upper bound is <tt>Object</tt>.\n\n <p>For each upper bound B :\n <ul>\n  <li>if B is a parameterized type or a type variable, it is created,\n  (see {@link java.lang.reflect.ParameterizedType ParameterizedType} \n  for the details of the creation process for parameterized types).\n  <li>Otherwise, B is resolved. \n </ul>\n\n @return an array of Types representing the upper bound(s) of this \n     type variable\n @throws TypeNotPresentException if any of the\n     bounds refers to a non-existent type declaration\n @throws MalformedParameterizedTypeException if any of the \n     bounds refer to a parameterized type that cannot be instantiated \n     for any reason\n"
13106,method,java/lang/reflect/WildcardType/getLowerBounds/," Returns an array of <tt>Type</tt> objects representing the \n lower bound(s) of this type variable.  Note that if no lower bound is\n explicitly declared, the lower bound is the type of <tt>null</tt>.\n In this case, a zero length array is returned.\n \n <p>For each lower bound B :\n <ul>\n   <li>if B is a parameterized type or a type variable, it is created,\n  (see {@link java.lang.reflect.ParameterizedType ParameterizedType} \n  for the details of the creation process for parameterized types).\n   <li>Otherwise, B is resolved.\n </ul>\n\n @return an array of Types representing the lower bound(s) of this \n     type variable\n @throws TypeNotPresentException if any of the\n     bounds refers to a non-existent type declaration\n @throws MalformedParameterizedTypeException if any of the \n     bounds refer to a parameterized type that cannot be instantiated \n     for any reason\n"
13107,class,java/lang/reflect/UndeclaredThrowableException," Thrown by a method invocation on a proxy instance if its invocation\n handler's {@link InvocationHandler#invoke invoke} method throws a\n checked exception (a <code>Throwable</code> that is not assignable\n to <code>RuntimeException</code> or <code>Error</code>) that\n is not assignable to any of the exception types declared in the\n <code>throws</code> clause of the method that was invoked on the\n proxy instance and dispatched to the invocation handler.\n\n <p>An <code>UndeclaredThrowableException</code> instance contains\n the undeclared checked exception that was thrown by the invocation\n handler, and it can be retrieved with the\n <code>getUndeclaredThrowable()</code> method.\n <code>UndeclaredThrowableException</code> extends\n <code>RuntimeException</code>, so it is an unchecked exception\n that wraps a checked exception.\n\n <p>As of release 1.4, this exception has been retrofitted to\n conform to the general purpose exception-chaining mechanism.  The\n "undeclared checked exception that was thrown by the invocation\n handler" that may be provided at construction time and accessed via\n the {@link #getUndeclaredThrowable()} method is now known as the\n <i>cause</i>, and may be accessed via the {@link\n Throwable#getCause()} method, as well as the aforementioned "legacy\n method."\n\n @author	Peter Jones\n @version	1.16, 10/03/23\n @see		InvocationHandler\n @since	1.3\n"
13108,method,java/lang/reflect/UndeclaredThrowableException/getUndeclaredThrowable/," Returns the <code>Throwable</code> instance wrapped in this\n <code>UndeclaredThrowableException</code>, which may be <tt>null</tt>.\n\n <p>This method predates the general-purpose exception chaining facility.\n The {@link Throwable#getCause()} method is now the preferred means of\n obtaining this information.\n\n @return the undeclared checked exception that was thrown\n"
13109,method,java/lang/reflect/UndeclaredThrowableException/getCause/," Returns the cause of this exception (the <code>Throwable</code>\n instance wrapped in this <code>UndeclaredThrowableException</code>,\n which may be <tt>null</tt>).\n\n @return  the cause of this exception.\n @since   1.4\n"
13113,method,java/lang/reflect/TypeVariable/getBounds/," Returns an array of <tt>Type</tt> objects representing the \n upper bound(s) of this type variable.  Note that if no upper bound is\n explicitly declared, the upper bound is <tt>Object</tt>.\n\n <p>For each upper bound B: <ul> <li>if B is a parameterized\n type or a type variable, it is created, (see {@link\n java.lang.reflect.ParameterizedType ParameterizedType} for the\n details of the creation process for parameterized types).\n <li>Otherwise, B is resolved.  </ul>\n\n @throws TypeNotPresentException  if any of the\n     bounds refers to a non-existent type declaration\n @throws MalformedParameterizedTypeException if any of the \n     bounds refer to a parameterized type that cannot be instantiated \n     for any reason\n @return an array of <tt>Type</tt>s representing the upper\n     bound(s) of this type variable\n"
13116,interface,java/lang/reflect/Type," Type is the common superinterface for all types in the Java\n programming language. These include raw types, parameterized types,\n array types, type variables and primitive types.\n\n @since 1.5\n"
13117,class,java/lang/reflect/ReflectPermission," The Permission class for reflective operations.  A\n ReflectPermission is a <em>named permission</em> and has no\n actions.  The only name currently defined is <tt>suppressAccessChecks</tt>,\n which allows suppressing the standard Java language access checks\n -- for public, default (package) access, protected, and private\n members -- performed by reflected objects at their point of use.\n <P>\n The following table\n provides a summary description of what the permission allows,\n and discusses the risks of granting code the permission.\n <P>\n\n <table border=1 cellpadding=5 summary="Table shows permission target name, what the permission allows, and associated risks">\n <tr>\n <th>Permission Target Name</th>\n <th>What the Permission Allows</th>\n <th>Risks of Allowing this Permission</th>\n </tr>\n\n <tr>\n   <td>suppressAccessChecks</td>\n   <td>ability to access\n fields and invoke methods in a class. Note that this includes\n not only public, but protected and private fields and methods as well.</td>\n   <td>This is dangerous in that information (possibly confidential) and\n methods normally unavailable would be accessible to malicious code.</td>\n </tr>\n\n </table>\n\n @see java.security.Permission\n @see java.security.BasicPermission\n @see AccessibleObject\n @see Field#get\n @see Field#set\n @see Method#invoke\n @see Constructor#newInstance\n\n @since 1.2\n"
13120,class,java/lang/reflect/Proxy," <code>Proxy</code> provides static methods for creating dynamic proxy\n classes and instances, and it is also the superclass of all\n dynamic proxy classes created by those methods.\n\n <p>To create a proxy for some interface <code>Foo</code>:\n <pre>\n     InvocationHandler handler = new MyInvocationHandler(...);\n     Class proxyClass = Proxy.getProxyClass(\n         Foo.class.getClassLoader(), new Class[] { Foo.class });\n     Foo f = (Foo) proxyClass.\n         getConstructor(new Class[] { InvocationHandler.class }).\n         newInstance(new Object[] { handler });\n </pre>\n or more simply:\n <pre>\n     Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),\n                                          new Class[] { Foo.class },\n                                          handler);\n </pre>\n\n <p>A <i>dynamic proxy class</i> (simply referred to as a <i>proxy\n class</i> below) is a class that implements a list of interfaces\n specified at runtime when the class is created, with behavior as\n described below.\n\n A <i>proxy interface</i> is such an interface that is implemented\n by a proxy class.\n\n A <i>proxy instance</i> is an instance of a proxy class.\n\n Each proxy instance has an associated <i>invocation handler</i>\n object, which implements the interface {@link InvocationHandler}.\n A method invocation on a proxy instance through one of its proxy\n interfaces will be dispatched to the {@link InvocationHandler#invoke\n invoke} method of the instance's invocation handler, passing the proxy\n instance, a <code>java.lang.reflect.Method</code> object identifying\n the method that was invoked, and an array of type <code>Object</code>\n containing the arguments.  The invocation handler processes the\n encoded method invocation as appropriate and the result that it\n returns will be returned as the result of the method invocation on\n the proxy instance.\n\n <p>A proxy class has the following properties:\n\n <ul>\n <li>Proxy classes are public, final, and not abstract.\n\n <li>The unqualified name of a proxy class is unspecified.  The space\n of class names that begin with the string <code>"$Proxy"</code>\n should be, however, reserved for proxy classes.\n\n <li>A proxy class extends <code>java.lang.reflect.Proxy</code>.\n\n <li>A proxy class implements exactly the interfaces specified at its\n creation, in the same order.\n\n <li>If a proxy class implements a non-public interface, then it will\n be defined in the same package as that interface.  Otherwise, the\n package of a proxy class is also unspecified.  Note that package\n sealing will not prevent a proxy class from being successfully defined\n in a particular package at runtime, and neither will classes already\n defined by the same class loader and the same package with particular\n signers.\n\n <li>Since a proxy class implements all of the interfaces specified at\n its creation, invoking <code>getInterfaces</code> on its\n <code>Class</code> object will return an array containing the same\n list of interfaces (in the order specified at its creation), invoking\n <code>getMethods</code> on its <code>Class</code> object will return\n an array of <code>Method</code> objects that include all of the\n methods in those interfaces, and invoking <code>getMethod</code> will\n find methods in the proxy interfaces as would be expected.\n\n <li>The {@link Proxy#isProxyClass Proxy.isProxyClass} method will\n return true if it is passed a proxy class-- a class returned by\n <code>Proxy.getProxyClass</code> or the class of an object returned by\n <code>Proxy.newProxyInstance</code>-- and false otherwise.\n\n <li>The <code>java.security.ProtectionDomain</code> of a proxy class\n is the same as that of system classes loaded by the bootstrap class\n loader, such as <code>java.lang.Object</code>, because the code for a\n proxy class is generated by trusted system code.  This protection\n domain will typically be granted\n <code>java.security.AllPermission</code>.\n\n <li>Each proxy class has one public constructor that takes one argument,\n an implementation of the interface {@link InvocationHandler}, to set\n the invocation handler for a proxy instance.  Rather than having to use\n the reflection API to access the public constructor, a proxy instance\n can be also be created by calling the {@link Proxy#newProxyInstance\n Proxy.newInstance} method, which combines the actions of calling\n {@link Proxy#getProxyClass Proxy.getProxyClass} with invoking the\n constructor with an invocation handler.\n </ul>\n\n <p>A proxy instance has the following properties:\n\n <ul>\n <li>Given a proxy instance <code>proxy</code> and one of the\n interfaces implemented by its proxy class <code>Foo</code>, the\n following expression will return true:\n <pre>\n     <code>proxy instanceof Foo</code>\n </pre>\n and the following cast operation will succeed (rather than throwing\n a <code>ClassCastException</code>):\n <pre>\n     <code>(Foo) proxy</code>\n </pre>\n\n <li>Each proxy instance has an associated invocation handler, the one\n that was passed to its constructor.  The static\n {@link Proxy#getInvocationHandler Proxy.getInvocationHandler} method\n will return the invocation handler associated with the proxy instance\n passed as its argument.\n\n <li>An interface method invocation on a proxy instance will be\n encoded and dispatched to the invocation handler's {@link\n InvocationHandler#invoke invoke} method as described in the\n documentation for that method.\n\n <li>An invocation of the <code>hashCode</code>,\n <code>equals</code>, or <code>toString</code> methods declared in\n <code>java.lang.Object</code> on a proxy instance will be encoded and\n dispatched to the invocation handler's <code>invoke</code> method in\n the same manner as interface method invocations are encoded and\n dispatched, as described above.  The declaring class of the\n <code>Method</code> object passed to <code>invoke</code> will be\n <code>java.lang.Object</code>.  Other public methods of a proxy\n instance inherited from <code>java.lang.Object</code> are not\n overridden by a proxy class, so invocations of those methods behave\n like they do for instances of <code>java.lang.Object</code>.\n </ul>\n\n <h3>Methods Duplicated in Multiple Proxy Interfaces</h3>\n\n <p>When two or more interfaces of a proxy class contain a method with\n the same name and parameter signature, the order of the proxy class's\n interfaces becomes significant.  When such a <i>duplicate method</i>\n is invoked on a proxy instance, the <code>Method</code> object passed\n to the invocation handler will not necessarily be the one whose\n declaring class is assignable from the reference type of the interface\n that the proxy's method was invoked through.  This limitation exists\n because the corresponding method implementation in the generated proxy\n class cannot determine which interface it was invoked through.\n Therefore, when a duplicate method is invoked on a proxy instance,\n the <code>Method</code> object for the method in the foremost interface\n that contains the method (either directly or inherited through a\n superinterface) in the proxy class's list of interfaces is passed to\n the invocation handler's <code>invoke</code> method, regardless of the\n reference type through which the method invocation occurred.\n\n <p>If a proxy interface contains a method with the same name and\n parameter signature as the <code>hashCode</code>, <code>equals</code>,\n or <code>toString</code> methods of <code>java.lang.Object</code>,\n when such a method is invoked on a proxy instance, the\n <code>Method</code> object passed to the invocation handler will have\n <code>java.lang.Object</code> as its declaring class.  In other words,\n the public, non-final methods of <code>java.lang.Object</code>\n logically precede all of the proxy interfaces for the determination of\n which <code>Method</code> object to pass to the invocation handler.\n\n <p>Note also that when a duplicate method is dispatched to an\n invocation handler, the <code>invoke</code> method may only throw\n checked exception types that are assignable to one of the exception\n types in the <code>throws</code> clause of the method in <i>all</i> of\n the proxy interfaces that it can be invoked through.  If the\n <code>invoke</code> method throws a checked exception that is not\n assignable to any of the exception types declared by the method in one\n of the proxy interfaces that it can be invoked through, then an\n unchecked <code>UndeclaredThrowableException</code> will be thrown by\n the invocation on the proxy instance.  This restriction means that not\n all of the exception types returned by invoking\n <code>getExceptionTypes</code> on the <code>Method</code> object\n passed to the <code>invoke</code> method can necessarily be thrown\n successfully by the <code>invoke</code> method.\n\n @author	Peter Jones\n @version	1.23, 10/03/23\n @see		InvocationHandler\n @since	1.3\n"
13122,method,java/lang/reflect/Proxy/newProxyInstance/ClassLoader;Class[];InvocationHandler," Returns an instance of a proxy class for the specified interfaces\n that dispatches method invocations to the specified invocation\n handler.  This method is equivalent to:\n <pre>\n     Proxy.getProxyClass(loader, interfaces).\n         getConstructor(new Class[] { InvocationHandler.class }).\n         newInstance(new Object[] { handler });\n </pre>\n\n <p><code>Proxy.newProxyInstance</code> throws\n <code>IllegalArgumentException</code> for the same reasons that\n <code>Proxy.getProxyClass</code> does.\n\n @param	loader the class loader to define the proxy class\n @param	interfaces the list of interfaces for the proxy class\n		to implement\n @param   h the invocation handler to dispatch method invocations to\n @return	a proxy instance with the specified invocation handler of a\n		proxy class that is defined by the specified class loader\n		and that implements the specified interfaces\n @throws	IllegalArgumentException if any of the restrictions on the\n		parameters that may be passed to <code>getProxyClass</code>\n		are violated\n @throws	NullPointerException if the <code>interfaces</code> array\n		argument or any of its elements are <code>null</code>, or\n		if the invocation handler, <code>h</code>, is\n		<code>null</code>\n"
13124,method,java/lang/reflect/Proxy/getInvocationHandler/Object," Returns the invocation handler for the specified proxy instance.\n\n @param	proxy the proxy instance to return the invocation handler for\n @return	the invocation handler for the proxy instance\n @throws	IllegalArgumentException if the argument is not a\n		proxy instance\n"
13125,method,java/lang/reflect/Proxy/Proxy/InvocationHandler," Constructs a new <code>Proxy</code> instance from a subclass\n (typically, a dynamic proxy class) with the specified value\n for its invocation handler.\n\n @param   h the invocation handler for this proxy instance\n"
13126,field,java/lang/reflect/Proxy/h," the invocation handler for this proxy instance.\n @serial\n"
13128,method,java/lang/reflect/ParameterizedType/getActualTypeArguments/," Returns an array of <tt>Type</tt> objects representing the actual type\n arguments to this type.\n \n <p>Note that in some cases, the returned array be empty. This can occur\n if this type represents a non-parameterized type nested within\n a parameterized type.\n\n @return an array of <tt>Type</tt> objects representing the actual type\n     arguments to this type\n @throws <tt>TypeNotPresentException</tt> if any of the\n     actual type arguments refers to a non-existent type declaration\n @throws <tt>MalformedParameterizedTypeException</tt> if any of the \n     actual type parameters refer to a parameterized type that cannot\n     be instantiated for any reason\n @since 1.5\n"
13137,method,java/lang/reflect/Modifier/isSynchronized/int," Return <tt>true</tt> if the integer argument includes the\n <tt>synchronized</tt> modifier, <tt>false</tt> otherwise.\n\n @param 	mod a set of modifiers\n @return <tt>true</tt> if <code>mod</code> includes the\n <tt>synchronized</tt> modifier; <tt>false</tt> otherwise.\n"
13143,method,java/lang/reflect/Modifier/isStrict/int," Return <tt>true</tt> if the integer argument includes the\n <tt>strictfp</tt> modifier, <tt>false</tt> otherwise.\n\n @param 	mod a set of modifiers\n @return <tt>true</tt> if <code>mod</code> includes the\n <tt>strictfp</tt> modifier; <tt>false</tt> otherwise.\n"
13144,method,java/lang/reflect/Modifier/toString/int," Return a string describing the access modifier flags in\n the specified modifier. For example:\n <blockquote><pre>\n    public final synchronized strictfp\n </pre></blockquote>\n The modifier names are returned in an order consistent with the\n suggested modifier orderings given in <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html"><em>The\n Java Language Specification, Second Edition</em></a> sections\n <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#21613">&sect;8.1.1</a>, \n <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78091">&sect;8.3.1</a>, \n <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78188">&sect;8.4.3</a>, \n <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#42018">&sect;8.8.3</a>, and\n <a href="http://java.sun.com/docs/books/jls/second_edition/html/interfaces.doc.html#235947">&sect;9.1.1</a>.  \n The full modifier ordering used by this method is:\n <blockquote> <code> \n public protected private abstract static final transient\n volatile synchronized native strictfp\n interface </code> </blockquote> \n The <code>interface</code> modifier discussed in this class is\n not a true modifier in the Java language and it appears after\n all other modifiers listed by this method.  This method may\n return a string of modifiers that are not valid modifiers of a\n Java entity; in other words, no checking is done on the\n possible validity of the combination of modifiers represented\n by the input.\n\n @param	mod a set of modifiers\n @return	a string representation of the set of modifiers\n represented by <code>mod</code>\n"
13151,field,java/lang/reflect/Modifier/SYNCHRONIZED," The <code>int</code> value representing the <code>synchronized</code> \n modifier.\n"
13157,field,java/lang/reflect/Modifier/STRICT," The <code>int</code> value representing the <code>strictfp</code> \n modifier.\n"
13158,class,java/lang/reflect/Method," A <code>Method</code> provides information about, and access to, a single method\n on a class or interface.  The reflected method may be a class method\n or an instance method (including an abstract method).\n\n <p>A <code>Method</code> permits widening conversions to occur when matching the\n actual parameters to invoke with the underlying method's formal\n parameters, but it throws an <code>IllegalArgumentException</code> if a\n narrowing conversion would occur.\n\n @see Member\n @see java.lang.Class\n @see java.lang.Class#getMethods()\n @see java.lang.Class#getMethod(String, Class[])\n @see java.lang.Class#getDeclaredMethods()\n @see java.lang.Class#getDeclaredMethod(String, Class[])\n\n @author Kenneth Russell\n @author Nakul Saraiya\n"
13161,method,java/lang/reflect/Method/getModifiers/," Returns the Java language modifiers for the method represented\n by this <code>Method</code> object, as an integer. The <code>Modifier</code> class should\n be used to decode the modifiers.\n\n @see Modifier\n"
13171,method,java/lang/reflect/Method/toString/," Returns a string describing this <code>Method</code>.  The string is\n formatted as the method access modifiers, if any, followed by\n the method return type, followed by a space, followed by the\n class declaring the method, followed by a period, followed by\n the method name, followed by a parenthesized, comma-separated\n list of the method's formal parameter types. If the method\n throws checked exceptions, the parameter list is followed by a\n space, followed by the word throws followed by a\n comma-separated list of the thrown exception types.\n For example:\n <pre>\n    public boolean java.lang.Object.equals(java.lang.Object)\n </pre>\n\n <p>The access modifiers are placed in canonical order as\n specified by "The Java Language Specification".  This is\n <tt>public</tt>, <tt>protected</tt> or <tt>private</tt> first,\n and then other modifiers in the following order:\n <tt>abstract</tt>, <tt>static</tt>, <tt>final</tt>,\n <tt>synchronized</tt>, <tt>native</tt>.\n"
13172,method,java/lang/reflect/Method/toGenericString/," Returns a string describing this <code>Method</code>, including\n type parameters.  The string is formatted as the method access\n modifiers, if any, followed by an angle-bracketed\n comma-separated list of the method's type parameters, if any,\n followed by the method's generic return type, followed by a\n space, followed by the class declaring the method, followed by\n a period, followed by the method name, followed by a\n parenthesized, comma-separated list of the method's generic\n formal parameter types. A space is used to separate access\n modifiers from one another and from the type parameters or\n return type.  If there are no type parameters, the type\n parameter list is elided; if the type parameter list is\n present, a space separates the list from the class name.  If\n the method is declared to throw exceptions, the parameter list\n is followed by a space, followed by the word throws followed by\n a comma-separated list of the generic thrown exception types.\n If there are no type parameters, the type parameter list is\n elided.\n\n <p>The access modifiers are placed in canonical order as\n specified by "The Java Language Specification".  This is\n <tt>public</tt>, <tt>protected</tt> or <tt>private</tt> first,\n and then other modifiers in the following order:\n <tt>abstract</tt>, <tt>static</tt>, <tt>final</tt>,\n <tt>synchronized</tt> <tt>native</tt>.\n\n @return a string describing this <code>Method</code>,\n include type parameters\n\n @since 1.5\n"
13174,method,java/lang/reflect/Method/isBridge/," Returns <tt>true</tt> if this method is a bridge\n method; returns <tt>false</tt> otherwise.\n\n @return true if and only if this method is a bridge\n method as defined by the Java Language Specification.\n @since 1.5\n"
13175,method,java/lang/reflect/Method/isVarArgs/," Returns <tt>true</tt> if this method was declared to take\n a variable number of arguments; returns <tt>false</tt>\n otherwise.\n\n @return <tt>true</tt> if an only if this method was declared to\n take a variable number of arguments.\n @since 1.5\n"
13176,method,java/lang/reflect/Method/isSynthetic/," Returns <tt>true</tt> if this method is a synthetic\n method; returns <tt>false</tt> otherwise.\n\n @return true if and only if this method is a synthetic\n method as defined by the Java Language Specification.\n @since 1.5\n"
13177,method,java/lang/reflect/Method/getAnnotation/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
13180,method,java/lang/reflect/Method/getParameterAnnotations/," Returns an array of arrays that represent the annotations on the formal\n parameters, in declaration order, of the method represented by\n this <tt>Method</tt> object. (Returns an array of length zero if the\n underlying method is parameterless.  If the method has one or more\n parameters, a nested array of length zero is returned for each parameter\n with no annotations.) The annotation objects contained in the returned\n arrays are serializable.  The caller of this method is free to modify\n the returned arrays; it will have no effect on the arrays returned to\n other callers.\n\n @return an array of arrays that represent the annotations on the formal\n    parameters, in declaration order, of the method represented by this\n    Method object\n @since 1.5\n"
13184,method,java/lang/reflect/Member/getModifiers/," Returns the Java language modifiers for the member or\n constructor represented by this Member, as an integer.  The\n Modifier class should be used to decode the modifiers in\n the integer.\n \n @return the Java language modifiers for the underlying member\n @see Modifier\n"
13185,method,java/lang/reflect/Member/isSynthetic/," Returns <tt>true</tt> if this member was introduced by\n the compiler; returns <tt>false</tt> otherwise.\n\n @return true if and only if this member was introduced by\n the compiler.\n @since 1.5\n"
13186,field,java/lang/reflect/Member/PUBLIC," Identifies the set of all public members of a class or interface,\n including inherited members.\n @see java.lang.SecurityManager#checkMemberAccess\n"
13187,field,java/lang/reflect/Member/DECLARED," Identifies the set of declared members of a class or interface.\n Inherited members are not included.\n @see java.lang.SecurityManager#checkMemberAccess\n"
13190,class,java/lang/reflect/InvocationTargetException," InvocationTargetException is a checked exception that wraps\n an exception thrown by an invoked method or constructor.\n\n <p>As of release 1.4, this exception has been retrofitted to conform to\n the general purpose exception-chaining mechanism.  The "target exception"\n that is provided at construction time and accessed via the\n {@link #getTargetException()} method is now known as the <i>cause</i>,\n and may be accessed via the {@link Throwable#getCause()} method,\n as well as the aforementioned "legacy method."\n\n @see Method\n @see Constructor\n"
13192,method,java/lang/reflect/InvocationTargetException/getCause/," Returns the cause of this exception (the thrown target exception,\n which may be <tt>null</tt>).\n\n @return  the cause of this exception.\n @since   1.4\n"
13193,method,java/lang/reflect/InvocationTargetException/InvocationTargetException/," Constructs an <code>InvocationTargetException</code> with \n <code>null</code> as the target exception.\n"
13194,method,java/lang/reflect/InvocationTargetException/InvocationTargetException/Throwable," Constructs a InvocationTargetException with a target exception.\n \n @param target the target exception\n"
13195,method,java/lang/reflect/InvocationTargetException/InvocationTargetException/Throwable;String," Constructs a InvocationTargetException with a target exception\n and a detail message.\n\n @param target the target exception\n @param s      the detail message\n"
13196,interface,java/lang/reflect/InvocationHandler," <code>InvocationHandler</code> is the interface implemented by\n the <i>invocation handler</i> of a proxy instance.\n\n <p>Each proxy instance has an associated invocation handler.\n When a method is invoked on a proxy instance, the method\n invocation is encoded and dispatched to the <code>invoke</code>\n method of its invocation handler.\n\n @author	Peter Jones\n @version	1.12, 10/03/23\n @see		Proxy\n @since	1.3\n"
13204,class,java/lang/reflect/Field," A <code>Field</code> provides information about, and dynamic access to, a\n single field of a class or an interface.  The reflected field may\n be a class (static) field or an instance field.\n\n <p>A <code>Field</code> permits widening conversions to occur during a get or\n set access operation, but throws an <code>IllegalArgumentException</code> if a\n narrowing conversion would occur.\n\n @see Member\n @see java.lang.Class\n @see java.lang.Class#getFields()\n @see java.lang.Class#getField(String)\n @see java.lang.Class#getDeclaredFields()\n @see java.lang.Class#getDeclaredField(String)\n\n @author Kenneth Russell\n @author Nakul Saraiya\n"
13207,method,java/lang/reflect/Field/getModifiers/," Returns the Java language modifiers for the field represented\n by this <code>Field</code> object, as an integer. The <code>Modifier</code> class should\n be used to decode the modifiers.\n\n @see Modifier\n"
13208,method,java/lang/reflect/Field/isEnumConstant/," Returns <tt>true</tt> if this field represents an element of\n an enumerated type; returns <tt>false</tt> otherwise.\n\n @return <tt>true</tt> if and only if this field represents an element of\n an enumerated type.\n @since 1.5\n"
13209,method,java/lang/reflect/Field/isSynthetic/," Returns <tt>true</tt> if this field is a synthetic\n field; returns <tt>false</tt> otherwise.\n\n @return true if and only if this field is a synthetic\n field as defined by the Java Language Specification.\n @since 1.5\n"
13214,method,java/lang/reflect/Field/toString/," Returns a string describing this <code>Field</code>.  The format is\n the access modifiers for the field, if any, followed\n by the field type, followed by a space, followed by\n the fully-qualified name of the class declaring the field,\n followed by a period, followed by the name of the field.\n For example:\n <pre>\n    public static final int java.lang.Thread.MIN_PRIORITY\n    private int java.io.FileDescriptor.fd\n </pre>\n\n <p>The modifiers are placed in canonical order as specified by\n "The Java Language Specification".  This is <tt>public</tt>,\n <tt>protected</tt> or <tt>private</tt> first, and then other\n modifiers in the following order: <tt>static</tt>, <tt>final</tt>,\n <tt>transient</tt>, <tt>volatile</tt>.\n"
13217,method,java/lang/reflect/Field/getBoolean/Object," Gets the value of a static or instance <code>boolean</code> field.\n\n @param obj the object to extract the <code>boolean</code> value\n from\n @return the value of the <code>boolean</code> field\n\n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not \n              an instance of the class or interface declaring the\n              underlying field (or a subclass or implementor \n              thereof), or if the field value cannot be\n              converted to the type <code>boolean</code> by a \n              widening conversion.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#get\n"
13218,method,java/lang/reflect/Field/getByte/Object," Gets the value of a static or instance <code>byte</code> field.\n\n @param obj the object to extract the <code>byte</code> value\n from\n @return the value of the <code>byte</code> field\n\n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not \n              an instance of the class or interface declaring the\n              underlying field (or a subclass or implementor \n              thereof), or if the field value cannot be\n              converted to the type <code>byte</code> by a \n              widening conversion.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#get\n"
13219,method,java/lang/reflect/Field/getChar/Object," Gets the value of a static or instance field of type\n <code>char</code> or of another primitive type convertible to\n type <code>char</code> via a widening conversion.\n\n @param obj the object to extract the <code>char</code> value\n from\n @return the value of the field converted to type <code>char</code>\n\n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not \n              an instance of the class or interface declaring the\n              underlying field (or a subclass or implementor \n              thereof), or if the field value cannot be\n              converted to the type <code>char</code> by a \n              widening conversion.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see Field#get\n"
13220,method,java/lang/reflect/Field/getShort/Object," Gets the value of a static or instance field of type\n <code>short</code> or of another primitive type convertible to\n type <code>short</code> via a widening conversion.\n\n @param obj the object to extract the <code>short</code> value\n from\n @return the value of the field converted to type <code>short</code>\n\n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not \n              an instance of the class or interface declaring the\n              underlying field (or a subclass or implementor \n              thereof), or if the field value cannot be\n              converted to the type <code>short</code> by a \n              widening conversion.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#get\n"
13221,method,java/lang/reflect/Field/getInt/Object," Gets the value of a static or instance field of type\n <code>int</code> or of another primitive type convertible to\n type <code>int</code> via a widening conversion.\n\n @param obj the object to extract the <code>int</code> value\n from\n @return the value of the field converted to type <code>int</code>\n\n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not \n              an instance of the class or interface declaring the\n              underlying field (or a subclass or implementor \n              thereof), or if the field value cannot be\n              converted to the type <code>int</code> by a \n              widening conversion.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#get\n"
13222,method,java/lang/reflect/Field/getLong/Object," Gets the value of a static or instance field of type\n <code>long</code> or of another primitive type convertible to\n type <code>long</code> via a widening conversion.\n\n @param obj the object to extract the <code>long</code> value\n from\n @return the value of the field converted to type <code>long</code>\n\n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not \n              an instance of the class or interface declaring the\n              underlying field (or a subclass or implementor \n              thereof), or if the field value cannot be\n              converted to the type <code>long</code> by a \n              widening conversion.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#get\n"
13223,method,java/lang/reflect/Field/getFloat/Object," Gets the value of a static or instance field of type\n <code>float</code> or of another primitive type convertible to\n type <code>float</code> via a widening conversion.\n\n @param obj the object to extract the <code>float</code> value\n from\n @return the value of the field converted to type <code>float</code>\n\n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not \n              an instance of the class or interface declaring the\n              underlying field (or a subclass or implementor \n              thereof), or if the field value cannot be\n              converted to the type <code>float</code> by a \n              widening conversion.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see Field#get\n"
13224,method,java/lang/reflect/Field/getDouble/Object," Gets the value of a static or instance field of type\n <code>double</code> or of another primitive type convertible to\n type <code>double</code> via a widening conversion.\n\n @param obj the object to extract the <code>double</code> value\n from\n @return the value of the field converted to type <code>double</code>\n\n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not \n              an instance of the class or interface declaring the\n              underlying field (or a subclass or implementor \n              thereof), or if the field value cannot be\n              converted to the type <code>double</code> by a \n              widening conversion.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#get\n"
13225,method,java/lang/reflect/Field/set/Object;Object," Sets the field represented by this <code>Field</code> object on the\n specified object argument to the specified new value. The new\n value is automatically unwrapped if the underlying field has a\n primitive type.\n\n <p>The operation proceeds as follows:\n\n <p>If the underlying field is static, the <code>obj</code> argument is\n ignored; it may be null.\n\n <p>Otherwise the underlying field is an instance field.  If the\n specified object argument is null, the method throws a\n <code>NullPointerException</code>.  If the specified object argument is not\n an instance of the class or interface declaring the underlying\n field, the method throws an <code>IllegalArgumentException</code>.\n\n <p>If this <code>Field</code> object enforces Java language access control, and\n the underlying field is inaccessible, the method throws an\n <code>IllegalAccessException</code>.\n\n <p>If the underlying field is final, the method throws an\n <code>IllegalAccessException</code> unless\n <code>setAccessible(true)</code> has succeeded for this field\n and this field is non-static. Setting a final field in this way\n is meaningful only during deserialization or reconstruction of\n instances of classes with blank final fields, before they are\n made available for access by other parts of a program. Use in\n any other context may have unpredictable effects, including cases\n in which other parts of a program continue to use the original\n value of this field.\n\n <p>If the underlying field is of a primitive type, an unwrapping\n conversion is attempted to convert the new value to a value of\n a primitive type.  If this attempt fails, the method throws an\n <code>IllegalArgumentException</code>.\n\n <p>If, after possible unwrapping, the new value cannot be\n converted to the type of the underlying field by an identity or\n widening conversion, the method throws an\n <code>IllegalArgumentException</code>.\n\n <p>If the underlying field is static, the class that declared the\n field is initialized if it has not already been initialized.\n\n <p>The field is set to the possibly unwrapped and widened new value.\n\n <p>If the field is hidden in the type of <code>obj</code>,\n the field's value is set according to the preceding rules.\n\n @param obj the object whose field should be modified\n @param value the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n"
13226,method,java/lang/reflect/Field/setBoolean/Object;boolean," Sets the value of a field as a <code>boolean</code> on the specified object.\n This method is equivalent to\n <code>set(obj, zObj)</code>,\n where <code>zObj</code> is a <code>Boolean</code> object and \n <code>zObj.booleanValue() == z</code>.\n\n @param obj the object whose field should be modified\n @param z   the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#set\n"
13227,method,java/lang/reflect/Field/setByte/Object;byte," Sets the value of a field as a <code>byte</code> on the specified object.\n This method is equivalent to\n <code>set(obj, bObj)</code>,\n where <code>bObj</code> is a <code>Byte</code> object and \n <code>bObj.byteValue() == b</code>.\n\n @param obj the object whose field should be modified\n @param b   the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#set\n"
13228,method,java/lang/reflect/Field/setChar/Object;char," Sets the value of a field as a <code>char</code> on the specified object.\n This method is equivalent to\n <code>set(obj, cObj)</code>,\n where <code>cObj</code> is a <code>Character</code> object and \n <code>cObj.charValue() == c</code>.\n\n @param obj the object whose field should be modified\n @param c   the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#set\n"
13229,method,java/lang/reflect/Field/setShort/Object;short," Sets the value of a field as a <code>short</code> on the specified object.\n This method is equivalent to\n <code>set(obj, sObj)</code>,\n where <code>sObj</code> is a <code>Short</code> object and \n <code>sObj.shortValue() == s</code>.\n\n @param obj the object whose field should be modified\n @param s   the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#set\n"
13230,method,java/lang/reflect/Field/setInt/Object;int," Sets the value of a field as an <code>int</code> on the specified object.\n This method is equivalent to\n <code>set(obj, iObj)</code>,\n where <code>iObj</code> is a <code>Integer</code> object and \n <code>iObj.intValue() == i</code>.\n\n @param obj the object whose field should be modified\n @param i   the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#set\n"
13231,method,java/lang/reflect/Field/setLong/Object;long," Sets the value of a field as a <code>long</code> on the specified object.\n This method is equivalent to\n <code>set(obj, lObj)</code>,\n where <code>lObj</code> is a <code>Long</code> object and \n <code>lObj.longValue() == l</code>.\n\n @param obj the object whose field should be modified\n @param l   the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#set\n"
13232,method,java/lang/reflect/Field/setFloat/Object;float," Sets the value of a field as a <code>float</code> on the specified object.\n This method is equivalent to\n <code>set(obj, fObj)</code>,\n where <code>fObj</code> is a <code>Float</code> object and \n <code>fObj.floatValue() == f</code>.\n\n @param obj the object whose field should be modified\n @param f   the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#set\n"
13233,method,java/lang/reflect/Field/setDouble/Object;double," Sets the value of a field as a <code>double</code> on the specified object.\n This method is equivalent to\n <code>set(obj, dObj)</code>,\n where <code>dObj</code> is a <code>Double</code> object and \n <code>dObj.doubleValue() == d</code>.\n\n @param obj the object whose field should be modified\n @param d   the new value for the field of <code>obj</code>\n being modified\n \n @exception IllegalAccessException    if the underlying field\n              is inaccessible.\n @exception IllegalArgumentException  if the specified object is not an\n              instance of the class or interface declaring the underlying\n              field (or a subclass or implementor thereof), \n              or if an unwrapping conversion fails.\n @exception NullPointerException      if the specified object is null\n              and the field is an instance field.\n @exception ExceptionInInitializerError if the initialization provoked\n              by this method fails.\n @see       Field#set\n"
13234,method,java/lang/reflect/Field/getAnnotation/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
13239,method,java/lang/reflect/Constructor/getModifiers/," Returns the Java language modifiers for the constructor\n represented by this <code>Constructor</code> object, as an integer. The\n <code>Modifier</code> class should be used to decode the modifiers.\n\n @see Modifier\n"
13247,method,java/lang/reflect/Constructor/toString/," Returns a string describing this <code>Constructor</code>.  The string is\n formatted as the constructor access modifiers, if any,\n followed by the fully-qualified name of the declaring class,\n followed by a parenthesized, comma-separated list of the\n constructor's formal parameter types.  For example:\n <pre>\n    public java.util.Hashtable(int,float)\n </pre>\n\n <p>The only possible modifiers for constructors are the access\n modifiers <tt>public</tt>, <tt>protected</tt> or\n <tt>private</tt>.  Only one of these may appear, or none if the\n constructor has default (package) access.\n"
13248,method,java/lang/reflect/Constructor/toGenericString/," Returns a string describing this <code>Constructor</code>,\n including type parameters.  The string is formatted as the\n constructor access modifiers, if any, followed by an\n angle-bracketed comma separated list of the constructor's type\n parameters, if any, followed by the fully-qualified name of the\n declaring class, followed by a parenthesized, comma-separated\n list of the constructor's generic formal parameter types.  A\n space is used to separate access modifiers from one another and\n from the type parameters or return type.  If there are no type\n parameters, the type parameter list is elided; if the type\n parameter list is present, a space separates the list from the\n class name.  If the constructor is declared to throw\n exceptions, the parameter list is followed by a space, followed\n by the word &quot;<tt>throws</tt>&quot; followed by a\n comma-separated list of the thrown exception types.\n\n <p>The only possible modifiers for constructors are the access\n modifiers <tt>public</tt>, <tt>protected</tt> or\n <tt>private</tt>.  Only one of these may appear, or none if the\n constructor has default (package) access.\n\n @return a string describing this <code>Constructor</code>,\n include type parameters\n\n @since 1.5\n"
13250,method,java/lang/reflect/Constructor/isVarArgs/," Returns <tt>true</tt> if this constructor was declared to take\n a variable number of arguments; returns <tt>false</tt>\n otherwise.\n\n @return <tt>true</tt> if an only if this constructor was declared to\n take a variable number of arguments.\n @since 1.5\n"
13251,method,java/lang/reflect/Constructor/isSynthetic/," Returns <tt>true</tt> if this constructor is a synthetic\n constructor; returns <tt>false</tt> otherwise.\n\n @return true if and only if this constructor is a synthetic\n constructor as defined by the Java Language Specification.\n @since 1.5\n"
13252,method,java/lang/reflect/Constructor/getAnnotation/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
13254,method,java/lang/reflect/Constructor/getParameterAnnotations/," Returns an array of arrays that represent the annotations on the formal\n parameters, in declaration order, of the method represented by\n this <tt>Constructor</tt> object. (Returns an array of length zero if the\n underlying method is parameterless.  If the method has one or more\n parameters, a nested array of length zero is returned for each parameter\n with no annotations.) The annotation objects contained in the returned\n arrays are serializable.  The caller of this method is free to modify\n the returned arrays; it will have no effect on the arrays returned to\n other callers.\n\n @return an array of arrays that represent the annotations on the formal\n    parameters, in declaration order, of the method represented by this\n    Constructor object\n @since 1.5\n"
13256,method,java/lang/reflect/Array/newInstance/Class;int," Creates a new array with the specified component type and\n length.\n Invoking this method is equivalent to creating an array\n as follows:\n <blockquote>\n <pre>\n int[] x = {length};\n Array.newInstance(componentType, x);\n </pre>\n </blockquote>\n\n @param componentType the <code>Class</code> object representing the\n component type of the new array\n @param length the length of the new array\n @return the new array\n @exception NullPointerException if the specified\n <code>componentType</code> parameter is null\n @exception IllegalArgumentException if componentType is {@link Void#TYPE}\n @exception NegativeArraySizeException if the specified <code>length</code> \n is negative\n"
13277,interface,java/lang/reflect/AnnotatedElement," Represents an annotated element of the program currently running in this\n VM.  This interface allows annotations to be read reflectively.  All\n annotations returned by methods in this interface are immutable and\n serializable.  It is permissible for the caller to modify the\n arrays returned by accessors for array-valued enum members; it will\n have no affect on the arrays returned to other callers.\n\n <p>If an annotation returned by a method in this interface contains\n (directly or indirectly) a {@link Class}-valued member referring to\n a class that is not accessible in this VM, attempting to read the class\n by calling the relevant Class-returning method on the returned annotation\n will result in a {@link TypeNotPresentException}.\n\n <p>Similarly, attempting to read an enum-valued member will result in\n a {@link EnumConstantNotPresentException} if the enum constant in the\n annotation is no longer present in the enum type.\n \n <p>Finally, Attempting to read a member whose definition has evolved\n incompatibly will result in a {@link\n java.lang.annotation.AnnotationTypeMismatchException} or an\n {@link java.lang.annotation.IncompleteAnnotationException}.\n\n @since 1.5\n @author Josh Bloch\n"
13280,method,java/lang/reflect/AnnotatedElement/getAnnotations/," Returns all annotations present on this element.  (Returns an array\n of length zero if this element has no annotations.)  The caller of\n this method is free to modify the returned array; it will have no\n effect on the arrays returned to other callers.\n\n @return all annotations present on this element\n @since 1.5\n"
13281,method,java/lang/reflect/AnnotatedElement/getDeclaredAnnotations/," Returns all annotations that are directly present on this\n element.  Unlike the other methods in this interface, this method\n ignores inherited annotations.  (Returns an array of length zero if\n no annotations are directly present on this element.)  The caller of\n this method is free to modify the returned array; it will have no\n effect on the arrays returned to other callers.\n\n @return All annotations directly present on this element\n @since 1.5\n"
13282,class,java/lang/reflect/AccessibleObject," The AccessibleObject class is the base class for Field, Method and\n Constructor objects.  It provides the ability to flag a reflected\n object as suppressing default Java language access control checks\n when it is used.  The access checks--for public, default (package)\n access, protected, and private members--are performed when Fields,\n Methods or Constructors are used to set or get fields, to invoke\n methods, or to create and initialize new instances of classes,\n respectively.\n\n <p>Setting the <tt>accessible</tt> flag in a reflected object\n permits sophisticated applications with sufficient privilege, such\n as Java Object Serialization or other persistence mechanisms, to\n manipulate objects in a manner that would normally be prohibited.\n\n @see Field\n @see Method\n @see Constructor\n @see ReflectPermission\n\n @since 1.2\n"
13283,method,java/lang/reflect/AccessibleObject/setAccessible/AccessibleObject[];boolean," Convenience method to set the <tt>accessible</tt> flag for an\n array of objects with a single security check (for efficiency).\n\n <p>First, if there is a security manager, its\n <code>checkPermission</code> method is called with a\n <code>ReflectPermission("suppressAccessChecks")</code> permission.\n\n <p>A <code>SecurityException</code> is raised if <code>flag</code> is\n <code>true</code> but accessibility of any of the elements of the input\n <code>array</code> may not be changed (for example, if the element\n object is a {@link Constructor} object for the class {@link\n java.lang.Class}).  In the event of such a SecurityException, the\n accessibility of objects is set to <code>flag</code> for array elements\n upto (and excluding) the element for which the exception occurred; the\n accessibility of elements beyond (and including) the element for which\n the exception occurred is unchanged.\n\n @param array the array of AccessibleObjects\n @param flag  the new value for the <tt>accessible</tt> flag\n              in each object\n @throws SecurityException if the request is denied.\n @see SecurityManager#checkPermission\n @see java.lang.RuntimePermission\n"
13284,method,java/lang/reflect/AccessibleObject/setAccessible/boolean," Set the <tt>accessible</tt> flag for this object to\n the indicated boolean value.  A value of <tt>true</tt> indicates that\n the reflected object should suppress Java language access\n checking when it is used.  A value of <tt>false</tt> indicates \n that the reflected object should enforce Java language access checks.\n\n <p>First, if there is a security manager, its\n <code>checkPermission</code> method is called with a\n <code>ReflectPermission("suppressAccessChecks")</code> permission.\n \n <p>A <code>SecurityException</code> is raised if <code>flag</code> is\n <code>true</code> but accessibility of this object may not be changed\n (for example, if this element object is a {@link Constructor} object for\n the class {@link java.lang.Class}).\n\n <p>A <code>SecurityException</code> is raised if this object is a {@link\n java.lang.reflect.Constructor} object for the class\n <code>java.lang.Class</code>, and <code>flag</code> is true.\n\n @param flag the new value for the <tt>accessible</tt> flag\n @throws SecurityException if the request is denied.\n @see SecurityManager#checkPermission\n @see java.lang.RuntimePermission\n"
13286,method,java/lang/reflect/AccessibleObject/getAnnotation/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
13287,method,java/lang/reflect/AccessibleObject/isAnnotationPresent/Class," @throws NullPointerException {@inheritDoc}\n @since 1.5\n"
13290,method,java/lang/reflect/AccessibleObject/AccessibleObject/," Constructor: only used by the Java Virtual Machine.\n"
13294,interface,java/lang/instrument/Instrumentation," This class provides services needed to instrument Java\n programming language code.\n Instrumentation is the addition of byte-codes to methods for the\n purpose of gathering data to be utilized by tools. \n Since the changes are purely additive, these tools do not modify\n application state or behavior.\n Examples of such benign tools include monitoring agents, profilers,\n coverage analyzers, and event loggers.\n\n <P>\n There are two ways to obtain an instance of the\n <code>Instrumentation</code> interface:\n\n <ol>\n   <li><p> When a JVM is launched in a way that indicates an agent \n     class. In that case an <code>Instrumentation</code> instance\n     is passed to the <code>premain</code> method of the agent class. \n     </p></li>\n   <li><p> When a JVM provides a mechanism to start agents sometime\n     after the JVM is launched. In that case an <code>Instrumentation</code>\n     instance is passed to the <code>agentmain</code> method of the\n     agent code. </p> </li> \n </ol>\n <p> \n These mechanisms are described in the \n {@linkplain java.lang.instrument package specification}.\n <p>\n Once an agent acquires an <code>Instrumentation</code> instance,\n the agent may call methods on the instance at any time.\n\n @since   1.5\n"
13295,method,java/lang/instrument/Instrumentation/addTransformer/ClassFileTransformer;boolean," Registers the supplied transformer. All future class definitions\n will be seen by the transformer, except definitions of classes upon which any\n registered transformer is dependent.\n The transformer is called when classes are loaded, when they are\n {@linkplain #redefineClasses redefined}. and if <code>canRetransform</code> is true,\n when they are {@linkplain #retransformClasses retransformed}.\n See {@link java.lang.instrument.ClassFileTransformer#transform\n ClassFileTransformer.transform} for the order\n of transform calls.\n If a transformer throws\n an exception during execution, the JVM will still call the other registered \n transformers in order. The same transformer may be added more than once, \n but it is strongly discouraged -- avoid this by creating a new instance of\n tranformer class.\n <P>\n This method is intended for use in instrumentation, as described in the\n {@linkplain Instrumentation class specification}.\n\n @param transformer          the transformer to register\n @param canRetransform       can this transformer's transformations be retransformed\n @throws java.lang.NullPointerException if passed a <code>null</code> transformer\n @throws java.lang.UnsupportedOperationException if <code>canRetransform</code> \n is true and the current configuration of the JVM does not allow \n retransformation ({@link #isRetransformClassesSupported} is false)\n @since 1.6\n"
13298,method,java/lang/instrument/Instrumentation/isRetransformClassesSupported/," Returns whether or not the current JVM configuration supports retransformation\n of classes.\n The ability to retransform an already loaded class is an optional capability\n of a JVM.\n Retransformation will only be supported if the \n <code>Can-Retransform-Classes</code> manifest attribute is set to\n <code>true</code> in the agent JAR file (as described in the \n {@linkplain java.lang.instrument package specification}) and the JVM supports\n this capability.\n During a single instantiation of a single JVM, multiple calls to this\n method will always return the same answer.\n @return  true if the current JVM configuration supports retransformation of\n          classes, false if not.\n @see #retransformClasses\n @since 1.6\n"
13300,method,java/lang/instrument/Instrumentation/isRedefineClassesSupported/," Returns whether or not the current JVM configuration supports redefinition\n of classes.\n The ability to redefine an already loaded class is an optional capability\n of a JVM.\n Redefinition will only be supported if the \n <code>Can-Redefine-Classes</code> manifest attribute is set to\n <code>true</code> in the agent JAR file (as described in the \n {@linkplain java.lang.instrument package specification}) and the JVM supports\n this capability.\n During a single instantiation of a single JVM, multiple calls to this\n method will always return the same answer.\n @return  true if the current JVM configuration supports redefinition of classes,\n false if not.\n @see #redefineClasses\n"
13305,method,java/lang/instrument/Instrumentation/getObjectSize/Object," Returns an implementation-specific approximation of the amount of storage consumed by\n the specified object. The result may include some or all of the object's overhead,\n and thus is useful for comparison within an implementation but not between implementations.\n\n The estimate may change during a single invocation of the JVM.\n\n @param objectToSize     the object to size\n @return an implementation-specific approximation of the amount of storage consumed by the specified object\n @throws java.lang.NullPointerException if the supplied Object is <code>null</code>.\n"
13308,method,java/lang/instrument/Instrumentation/isNativeMethodPrefixSupported/," Returns whether the current JVM configuration supports\n {@linkplain #setNativeMethodPrefix(ClassFileTransformer,String)\n setting a native method prefix}.\n The ability to set a native method prefix is an optional\n capability of a JVM.\n Setting a native method prefix will only be supported if the \n <code>Can-Set-Native-Method-Prefix</code> manifest attribute is set to\n <code>true</code> in the agent JAR file (as described in the \n {@linkplain java.lang.instrument package specification}) and the JVM supports\n this capability.\n During a single instantiation of a single JVM, multiple\n calls to this method will always return the same answer.\n @return  true if the current JVM configuration supports\n setting a native method prefix, false if not.\n @see #setNativeMethodPrefix\n @since 1.6\n"
13309,method,java/lang/instrument/Instrumentation/setNativeMethodPrefix/ClassFileTransformer;String," This method modifies the failure handling of\n native method resolution by allowing retry\n with a prefix applied to the name.\n When used with the \n {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer},\n it enables native methods to be\n instrumented.\n <p/>\n Since native methods cannot be directly instrumented\n (they have no bytecodes), they must be wrapped with\n a non-native method which can be instrumented.\n For example, if we had:\n <pre>\n   native boolean foo(int x);</pre>\n <p/>\n We could transform the class file (with the \n ClassFileTransformer during the initial definition\n of the class) so that this becomes:\n <pre>\n   boolean foo(int x) {\n     <i>... record entry to foo ...</i>\n     return wrapped_foo(x);\n   }\n   \n   native boolean wrapped_foo(int x);</pre>\n <p/>\n Where <code>foo</code> becomes a wrapper for the actual native \n method with the appended prefix "wrapped_".  Note that\n "wrapped_" would be a poor choice of prefix since it\n might conceivably form the name of an existing method\n thus something like "$$$MyAgentWrapped$$$_" would be\n better but would make these examples less readable.\n <p/>\n The wrapper will allow data to be collected on the native\n method call, but now the problem becomes linking up the  \n wrapped method with the native implementation.  \n That is, the method <code>wrapped_foo</code> needs to be \n resolved to the native implementation of <code>foo</code>,\n which might be:\n <pre>\n   Java_somePackage_someClass_foo(JNIEnv* env, jint x)</pre>\n <p/>\n This function allows the prefix to be specified and the\n proper resolution to occur.  \n Specifically, when the standard resolution fails, the\n resolution is retried taking the prefix into consideration.\n There are two ways that resolution occurs, explicit\n resolution with the JNI function <code>RegisterNatives</code>\n and the normal automatic resolution.  For \n <code>RegisterNatives</code>, the JVM will attempt this \n association:\n <pre>\n   method(foo) -> nativeImplementation(foo)</pre>\n <p/>\n When this fails, the resolution will be retried with\n the specified prefix prepended to the method name, \n yielding the correct resolution:\n <pre>\n   method(wrapped_foo) -> nativeImplementation(foo)</pre>\n <p/>\n For automatic resolution, the JVM will attempt:\n <pre>\n   method(wrapped_foo) -> nativeImplementation(wrapped_foo)</pre>\n <p/>\n When this fails, the resolution will be retried with\n the specified prefix deleted from the implementation name, \n yielding the correct resolution:\n <pre>\n   method(wrapped_foo) -> nativeImplementation(foo)</pre>\n <p/>\n Note that since the prefix is only used when standard\n resolution fails, native methods can be wrapped selectively.\n <p/>\n Since each <code>ClassFileTransformer</code>\n can do its own transformation of the bytecodes, more \n than one layer of wrappers may be applied. Thus each\n transformer needs its own prefix.  Since transformations\n are applied in order, the prefixes, if applied, will\n be applied in the same order\n (see {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}). \n Thus if three transformers applied\n wrappers, <code>foo</code> might become \n <code>$trans3_$trans2_$trans1_foo</code>.  But if, say,\n the second transformer did not apply a wrapper to\n <code>foo</code> it would be just \n <code>$trans3_$trans1_foo</code>.  To be able to \n efficiently determine the sequence of prefixes,\n an intermediate prefix is only applied if its non-native\n wrapper exists.  Thus, in the last example, even though \n <code>$trans1_foo</code> is not a native method, the\n <code>$trans1_</code> prefix is applied since \n <code>$trans1_foo</code> exists.\n\n @param   transformer\n          The ClassFileTransformer which wraps using this prefix.\n @param   prefix\n          The prefix which has been applied to wrapped native methods.\n @throws java.lang.NullPointerException if passed a <code>null</code> transformer.\n @throws java.lang.UnsupportedOperationException if the current configuration of\n           the JVM does not allow setting a native method prefix\n           ({@link #isNativeMethodPrefixSupported} is false).\n @throws java.lang.IllegalArgumentException if the transformer is not registered\n           (see {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}).\n\n @since 1.6\n"
13310,class,java/lang/instrument/IllegalClassFormatException," Thrown by an implementation of\n {@link java.lang.instrument.ClassFileTransformer#transform ClassFileTransformer.transform}\n when its input parameters are invalid. \n This may occur either because the initial class file bytes were \n invalid or a previously applied transform corrupted the bytes.\n\n @see     java.lang.instrument.ClassFileTransformer#transform\n @since   1.5\n"
13313,interface,java/lang/instrument/ClassFileTransformer," An agent provides an implementation of this interface in order\n to transform class files.  \n The transformation occurs before the class is defined by the JVM.\n <P>\n Note the term <i>class file</i> is used as defined in the chapter\n <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#80959">The class File Format</a>\n of <i>The Java Virtual Machine Specification</i>, to mean a sequence\n of bytes in class file format, whether or not they reside in a file.\n\n @see     java.lang.instrument.Instrumentation\n @see     java.lang.instrument.Instrumentation#addTransformer\n @see     java.lang.instrument.Instrumentation#removeTransformer\n @since   1.5\n"
13319,interface,java/lang/management/ThreadMXBean," The management interface for the thread system of\n the Java virtual machine.\n\n <p> A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is\n an <a href="ManagementFactory.html#MXBean">MXBean</a>\n that can be obtained by calling\n the {@link ManagementFactory#getThreadMXBean} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n the thread system within an MBeanServer is:\n <blockquote>\n    {@link ManagementFactory#THREAD_MXBEAN_NAME \n           <tt>java.lang:type=Threading</tt>}\n </blockquote>\n\n <h4>Thread ID</h4>\n Thread ID is a positive long value returned by calling the\n {@link java.lang.Thread#getId} method for a thread.\n The thread ID is unique during its lifetime.  When a thread \n is terminated, this thread ID may be reused.\n\n <p> Some methods in this interface take a thread ID or an array\n of thread IDs as the input parameter and return per-thread information.\n\n <h4>Thread CPU time</h4>\n A Java virtual machine implementation may support measuring\n the CPU time for the current thread, for any thread, or for no threads.\n\n <p>\n The {@link #isThreadCpuTimeSupported} method can be used to determine\n if a Java virtual machine supports measuring of the CPU time for any \n thread.  The {@link #isCurrentThreadCpuTimeSupported} method can \n be used to determine if a Java virtual machine supports measuring of \n the CPU time for the current  thread.\n A Java virtual machine implementation that supports CPU time measurement \n for any thread will also support that for the current thread.\n\n <p> The CPU time provided by this interface has nanosecond precision\n but not necessarily nanosecond accuracy.\n\n <p>\n A Java virtual machine may disable CPU time measurement\n by default.\n The {@link #isThreadCpuTimeEnabled} and {@link #setThreadCpuTimeEnabled}\n methods can be used to test if CPU time measurement is enabled\n and to enable/disable this support respectively.\n Enabling thread CPU measurement could be expensive in some\n Java virtual machine implementations.\n\n <h4>Thread Contention Monitoring</h4>\n Some Java virtual machines may support thread contention monitoring.\n When thread contention monitoring is enabled, the accumulated elapsed \n time that the thread has blocked for synchronization or waited for \n notification will be collected and returned in the \n <a href="ThreadInfo.html#SyncStats"><tt>ThreadInfo</tt></a> object.\n <p>\n The {@link #isThreadContentionMonitoringSupported} method can be used to \n determine if a Java virtual machine supports thread contention monitoring.\n The thread contention monitoring is disabled by default.  The \n {@link #setThreadContentionMonitoringEnabled} method can be used to enable\n thread contention monitoring. \n\n <h4>Synchronization Information and Deadlock Detection</h4>\n Some Java virtual machines may support monitoring of \n {@linkplain #isObjectMonitorUsageSupported object monitor usage} and\n {@linkplain #isSynchronizerUsageSupported ownable synchronizer usage}.\n The {@link #getThreadInfo(long[], boolean, boolean)} and \n {@link #dumpAllThreads} methods can be used to obtain the thread stack trace\n and synchronization information including which \n {@linkplain LockInfo <i>lock</i>} a thread is blocked to\n acquire or waiting on and which locks the thread currently owns.\n <p>\n The <tt>ThreadMXBean</tt> interface provides the\n {@link #findMonitorDeadlockedThreads} and \n {@link #findDeadlockedThreads} methods to find deadlocks in\n the running application.\n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access MXBeans</a>\n\n @author  Mandy Chung\n @version 1.21, 03/23/10\n @since   1.5\n"
13320,method,java/lang/management/ThreadMXBean/getThreadCount/," Returns the current number of live threads including both \n daemon and non-daemon threads.\n\n @return the current number of live threads.\n"
13321,method,java/lang/management/ThreadMXBean/getPeakThreadCount/," Returns the peak live thread count since the Java virtual machine \n started or peak was reset.\n\n @return the peak live thread count.\n"
13322,method,java/lang/management/ThreadMXBean/getTotalStartedThreadCount/," Returns the total number of threads created and also started \n since the Java virtual machine started.\n\n @return the total number of threads started.\n"
13323,method,java/lang/management/ThreadMXBean/getDaemonThreadCount/," Returns the current number of live daemon threads.\n\n @return the current number of live daemon threads.\n"
13324,method,java/lang/management/ThreadMXBean/getAllThreadIds/," Returns all live thread IDs. \n Some threads included in the returned array\n may have been terminated when this method returns.\n\n @return an array of <tt>long</tt>, each is a thread ID.\n\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("monitor").\n"
13326,method,java/lang/management/ThreadMXBean/getThreadInfo/long[]," Returns the thread info for each thread \n whose ID is in the input array <tt>ids</tt> with no stack trace.\n This method is equivalent to calling:\n <blockquote><pre>\n   {@link #getThreadInfo(long[], int) getThreadInfo}(ids, 0);\n </pre></blockquote>\n\n <p>\n This method returns an array of the <tt>ThreadInfo</tt> objects.\n The stack trace, locked monitors, and locked synchronizers \n in each <tt>ThreadInfo</tt> object will be empty.\n\n If a thread of a given ID is not alive or does not exist,\n the corresponding element in the returned array will\n contain <tt>null</tt>.  A thread is alive if \n it has been started and has not yet died.\n\n <p>\n <b>MBeanServer access</b>:<br>\n The mapped type of <tt>ThreadInfo</tt> is\n <tt>CompositeData</tt> with attributes as specified in the\n {@link ThreadInfo#from ThreadInfo.from} method.\n\n @param ids an array of thread IDs. \n @return an array of the {@link ThreadInfo} objects, each containing\n information about a thread whose ID is in the corresponding\n element of the input array of IDs\n with no stack trace, no locked monitor and no synchronizer info.\n\n @throws IllegalArgumentException if any element in the input array \n      <tt>ids</tt> is <tt>&lt= 0</tt>.\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("monitor").\n"
13328,method,java/lang/management/ThreadMXBean/getThreadInfo/long[];int," Returns the thread info for each thread \n whose ID is in the input array <tt>ids</tt>,\n with stack trace of a specified number of stack trace elements.\n The <tt>maxDepth</tt> parameter indicates the maximum number of \n {@link StackTraceElement} to be retrieved from the stack trace.\n If <tt>maxDepth == Integer.MAX_VALUE</tt>, the entire stack trace of \n the thread will be dumped. \n If <tt>maxDepth == 0</tt>, no stack trace of the thread \n will be dumped.\n This method does not obtain the locked monitors and locked \n synchronizers of the threads.\n <p>\n When the Java virtual machine has no stack trace information \n about a thread or <tt>maxDepth == 0</tt>, \n the stack trace in the\n <tt>ThreadInfo</tt> object will be an empty array of \n <tt>StackTraceElement</tt>.\n <p>\n This method returns an array of the <tt>ThreadInfo</tt> objects,\n each is the thread information about the thread with the same index\n as in the <tt>ids</tt> array.\n If a thread of the given ID is not alive or does not exist,\n <tt>null</tt> will be set in the corresponding element \n in the returned array.  A thread is alive if \n it has been started and has not yet died.\n\n <p>\n <b>MBeanServer access</b>:<br>\n The mapped type of <tt>ThreadInfo</tt> is\n <tt>CompositeData</tt> with attributes as specified in the\n {@link ThreadInfo#from ThreadInfo.from} method.\n\n @param ids an array of thread IDs \n @param maxDepth the maximum number of entries in the stack trace \n to be dumped. <tt>Integer.MAX_VALUE</tt> could be used to request\n the entire stack to be dumped.\n\n @return an array of the {@link ThreadInfo} objects, each containing\n information about a thread whose ID is in the corresponding\n element of the input array of IDs with no locked monitor and\n synchronizer info.\n\n @throws IllegalArgumentException if <tt>maxDepth is negative</tt>.\n @throws IllegalArgumentException if any element in the input array \n      <tt>ids</tt> is <tt>&lt= 0</tt>.\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("monitor").\n\n"
13329,method,java/lang/management/ThreadMXBean/isThreadContentionMonitoringSupported/," Tests if the Java virtual machine supports thread contention monitoring.\n\n @return\n   <tt>true</tt>\n     if the Java virtual machine supports thread contention monitoring;\n   <tt>false</tt> otherwise.\n"
13330,method,java/lang/management/ThreadMXBean/isThreadContentionMonitoringEnabled/," Tests if thread contention monitoring is enabled.\n\n @return <tt>true</tt> if thread contention monitoring is enabled;\n         <tt>false</tt> otherwise.\n\n @throws java.lang.UnsupportedOperationException if the Java virtual \n machine does not support thread contention monitoring.\n\n @see #isThreadContentionMonitoringSupported\n"
13331,method,java/lang/management/ThreadMXBean/setThreadContentionMonitoringEnabled/boolean," Enables or disables thread contention monitoring.\n Thread contention monitoring is disabled by default.\n\n @param enable <tt>true</tt> to enable;\n               <tt>false</tt> to disable.\n\n @throws java.lang.UnsupportedOperationException if the Java \n virtual machine does not support thread contention monitoring.\n\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("control").\n\n @see #isThreadContentionMonitoringSupported\n"
13333,method,java/lang/management/ThreadMXBean/getCurrentThreadUserTime/," Returns the CPU time that the current thread has executed \n in user mode in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n\n <p>\n This is a convenient method for local management use and is \n equivalent to calling:\n <blockquote><pre>\n   {@link #getThreadUserTime getThreadUserTime}(Thread.currentThread().getId());\n </pre></blockquote>\n\n @return the user-level CPU time for the current thread if CPU time\n measurement is enabled; <tt>-1</tt> otherwise.\n\n @throws java.lang.UnsupportedOperationException if the Java \n virtual machine does not support CPU time measurement for\n the current thread.\n\n @see #getCurrentThreadCpuTime\n @see #isCurrentThreadCpuTimeSupported\n @see #isThreadCpuTimeEnabled\n @see #setThreadCpuTimeEnabled\n"
13334,method,java/lang/management/ThreadMXBean/getThreadCpuTime/long," Returns the total CPU time for a thread of the specified ID in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n If the implementation distinguishes between user mode time and system \n mode time, the returned CPU time is the amount of time that \n the thread has executed in user mode or system mode.\n\n <p>\n If the thread of the specified ID is not alive or does not exist,\n this method returns <tt>-1</tt>. If CPU time measurement\n is disabled, this method returns <tt>-1</tt>.\n A thread is alive if it has been started and has not yet died.\n <p>\n If CPU time measurement is enabled after the thread has started,\n the Java virtual machine implementation may choose any time up to\n and including the time that the capability is enabled as the point\n where CPU time measurement starts.\n\n @param id the thread ID of a thread\n @return the total CPU time for a thread of the specified ID\n if the thread of the specified ID exists, the thread is alive,\n and CPU time measurement is enabled;\n <tt>-1</tt> otherwise.\n\n @throws IllegalArgumentException if <tt>id &lt= 0 </tt>.\n @throws java.lang.UnsupportedOperationException if the Java \n virtual machine does not support CPU time measurement for \n other threads.\n\n @see #getThreadUserTime\n @see #isThreadCpuTimeSupported\n @see #isThreadCpuTimeEnabled\n @see #setThreadCpuTimeEnabled\n"
13335,method,java/lang/management/ThreadMXBean/getThreadUserTime/long," Returns the CPU time that a thread of the specified ID \n has executed in user mode in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n\n <p>\n If the thread of the specified ID is not alive or does not exist,\n this method returns <tt>-1</tt>. If CPU time measurement\n is disabled, this method returns <tt>-1</tt>.\n A thread is alive if it has been started and has not yet died.\n <p>\n If CPU time measurement is enabled after the thread has started,\n the Java virtual machine implementation may choose any time up to\n and including the time that the capability is enabled as the point\n where CPU time measurement starts.\n\n @param id the thread ID of a thread\n @return the user-level CPU time for a thread of the specified ID\n if the thread of the specified ID exists, the thread is alive,\n and CPU time measurement is enabled;\n <tt>-1</tt> otherwise.\n\n @throws IllegalArgumentException if <tt>id &lt= 0 </tt>.\n @throws java.lang.UnsupportedOperationException if the Java \n virtual machine does not support CPU time measurement for \n other threads.\n\n @see #getThreadCpuTime\n @see #isThreadCpuTimeSupported\n @see #isThreadCpuTimeEnabled\n @see #setThreadCpuTimeEnabled\n"
13336,method,java/lang/management/ThreadMXBean/isThreadCpuTimeSupported/," Tests if the Java virtual machine implementation supports CPU time\n measurement for any thread.\n A Java virtual machine implementation that supports CPU time\n measurement for any thread will also support CPU time\n measurement for the current thread.  \n\n @return\n   <tt>true</tt>\n     if the Java virtual machine supports CPU time \n     measurement for any thread;\n   <tt>false</tt> otherwise.\n"
13337,method,java/lang/management/ThreadMXBean/isCurrentThreadCpuTimeSupported/," Tests if the Java virtual machine supports CPU time\n measurement for the current thread.\n This method returns <tt>true</tt> if {@link #isThreadCpuTimeSupported}\n returns <tt>true</tt>.\n\n @return\n   <tt>true</tt>\n     if the Java virtual machine supports CPU time \n     measurement for current thread;\n   <tt>false</tt> otherwise.\n"
13338,method,java/lang/management/ThreadMXBean/isThreadCpuTimeEnabled/," Tests if thread CPU time measurement is enabled.\n\n @return <tt>true</tt> if thread CPU time measurement is enabled;\n         <tt>false</tt> otherwise.\n\n @throws java.lang.UnsupportedOperationException if the Java virtual \n machine does not support CPU time measurement for other threads\n nor for the current thread.\n\n @see #isThreadCpuTimeSupported\n @see #isCurrentThreadCpuTimeSupported\n"
13339,method,java/lang/management/ThreadMXBean/setThreadCpuTimeEnabled/boolean," Enables or disables thread CPU time measurement.  The default\n is platform dependent.\n\n @param enable <tt>true</tt> to enable;\n               <tt>false</tt> to disable.\n\n @throws java.lang.UnsupportedOperationException if the Java \n virtual machine does not support CPU time measurement for\n any threads nor for the current thread.\n\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("control").\n\n @see #isThreadCpuTimeSupported\n @see #isCurrentThreadCpuTimeSupported\n"
13341,method,java/lang/management/ThreadMXBean/resetPeakThreadCount/," Resets the peak thread count to the current number of\n live threads.\n\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("control").\n\n @see #getPeakThreadCount\n @see #getThreadCount\n"
13342,method,java/lang/management/ThreadMXBean/findDeadlockedThreads/," Finds cycles of threads that are in deadlock waiting to acquire \n object monitors or \n <a href="LockInfo.html#OwnableSynchronizer">ownable synchronizers</a>.\n\n Threads are <em>deadlocked</em> in a cycle waiting for a lock of\n these two types if each thread owns one lock while\n trying to acquire another lock already held \n by another thread in the cycle.\n <p>\n This method is designed for troubleshooting use, but not for\n synchronization control.  It might be an expensive operation.\n\n @return an array of IDs of the threads that are \n deadlocked waiting for object monitors or ownable synchronizers, if any;\n <tt>null</tt> otherwise.\n\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("monitor").\n @throws java.lang.UnsupportedOperationException if the Java virtual \n machine does not support monitoriing of ownable synchronizer usage.\n\n @see #isSynchronizerUsageSupported\n @see #findMonitorDeadlockedThreads\n @since 1.6 \n"
13344,method,java/lang/management/ThreadMXBean/isSynchronizerUsageSupported/," Tests if the Java virtual machine supports monitoring of\n <a href="LockInfo.html#OwnableSynchronizer">\n ownable synchronizer</a> usage.\n\n @return\n   <tt>true</tt>\n     if the Java virtual machine supports monitoring of ownable\n     synchronizer usage;\n   <tt>false</tt> otherwise.\n\n @see #dumpAllThreads\n @since 1.6\n"
13346,method,java/lang/management/ThreadMXBean/dumpAllThreads/boolean;boolean," Returns the thread info for all live threads with stack trace\n and synchronization information.\n Some threads included in the returned array\n may have been terminated when this method returns.\n\n <p>\n This method returns an array of {@link ThreadInfo} objects\n as specified in the {@link #getThreadInfo(long[], boolean, boolean)}\n method.\n\n @param  lockedMonitors if <tt>true</tt>, dump all locked monitors.\n @param  lockedSynchronizers if <tt>true</tt>, dump all locked\n             ownable synchronizers.\n\n @return an array of {@link ThreadInfo} for all live threads.\n\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("monitor").\n @throws java.lang.UnsupportedOperationException \n         <ul>\n           <li>if <tt>lockedMonitors</tt> is <tt>true</tt> but\n               the Java virtual machine does not support monitoring \n               of {@linkplain #isObjectMonitorUsageSupported\n               object monitor usage}; or</li>\n           <li>if <tt>lockedSynchronizers</tt> is <tt>true</tt> but\n               the Java virtual machine does not support monitoring \n               of {@linkplain #isSynchronizerUsageSupported\n               ownable synchronizer usage}.</li>\n         </ul>\n\n @see #isObjectMonitorUsageSupported\n @see #isSynchronizerUsageSupported\n\n @since 1.6\n"
13347,class,java/lang/management/ThreadInfo," Thread information. <tt>ThreadInfo</tt> contains the information \n about a thread including:\n <h4>General thread information</h4>\n <ul>\n   <li>Thread ID.</li>\n   <li>Name of the thread.</li>\n </ul>\n\n <h4>Execution information</h4>\n <ul>\n   <li>Thread state.</li>\n   <li>The object upon which the thread is blocked due to:\n       <ul>\n       <li>waiting to enter a synchronization block/method, or</li>\n       <li>waiting to be notified in a {@link Object#wait Object.wait} method,\n           or</li>\n       <li>parking due to a {@link java.util.concurrent.locks.LockSupport#park\n           LockSupport.park} call.</li>\n       </ul>\n   </li>\n   <li>The ID of the thread that owns the object\n       that the thread is blocked.</li>\n   <li>Stack trace of the thread.</li>\n   <li>List of object monitors locked by the thread.</li>\n   <li>List of <a href="LockInfo.html#OwnableSynchronizer">\n       ownable synchronizers</a> locked by the thread.</li>\n </ul>\n\n <h4><a name="SyncStats">Synchronization Statistics</a></h4>\n <ul>\n   <li>The number of times that the thread has blocked for \n       synchronization or waited for notification.</li>\n   <li>The accumulated elapsed time that the thread has blocked\n       for synchronization or waited for notification\n       since {@link ThreadMXBean#setThreadContentionMonitoringEnabled \n       thread contention monitoring}\n       was enabled. Some Java virtual machine implementation \n       may not support this.  The \n       {@link ThreadMXBean#isThreadContentionMonitoringSupported()}\n       method can be used to determine if a Java virtual machine\n       supports this.</li>\n </ul>\n\n <p>This thread information class is designed for use in monitoring of\n the system, not for synchronization control.\n\n <h4>MXBean Mapping</h4>\n <tt>ThreadInfo</tt> is mapped to a {@link CompositeData CompositeData}\n with attributes as specified in \n the {@link #from from} method.\n\n @see ThreadMXBean#getThreadInfo\n @see ThreadMXBean#dumpAllThreads\n\n @author  Mandy Chung\n @version 1.26, 03/23/10 \n @since   1.5\n"
13348,method,java/lang/management/ThreadInfo/getThreadId/," Returns the ID of the thread associated with this <tt>ThreadInfo</tt>.  \n\n @return the ID of the associated thread.\n"
13349,method,java/lang/management/ThreadInfo/getThreadName/," Returns the name of the thread associated with this <tt>ThreadInfo</tt>.\n\n @return the name of the associated thread.\n"
13350,method,java/lang/management/ThreadInfo/getThreadState/," Returns the state of the thread associated with this <tt>ThreadInfo</tt>.\n\n @return <tt>Thread.State</tt> of the associated thread.\n"
13351,method,java/lang/management/ThreadInfo/getBlockedTime/," Returns the approximate accumulated elapsed time (in milliseconds)\n that the thread associated with this <tt>ThreadInfo</tt> \n has blocked to enter or reenter a monitor\n since thread contention monitoring is enabled.\n I.e. the total accumulated time the thread has been in the\n {@link java.lang.Thread.State#BLOCKED BLOCKED} state since thread\n contention monitoring was last enabled.\n This method returns <tt>-1</tt> if thread contention monitoring\n is disabled.\n\n <p>The Java virtual machine may measure the time with a high\n resolution timer.  This statistic is reset when\n the thread contention monitoring is reenabled.\n\n @return the approximate accumulated elapsed time in milliseconds\n that a thread entered the <tt>BLOCKED</tt> state;\n <tt>-1</tt> if thread contention monitoring is disabled.\n\n @throws java.lang.UnsupportedOperationException if the Java \n virtual machine does not support this operation.\n\n @see ThreadMXBean#isThreadContentionMonitoringSupported\n @see ThreadMXBean#setThreadContentionMonitoringEnabled\n"
13352,method,java/lang/management/ThreadInfo/getBlockedCount/," Returns the total number of times that \n the thread associated with this <tt>ThreadInfo</tt> \n blocked to enter or reenter a monitor. \n I.e. the number of times a thread has been in the\n {@link java.lang.Thread.State#BLOCKED BLOCKED} state. \n\n @return the total number of times that the thread \n entered the <tt>BLOCKED</tt> state.\n"
13353,method,java/lang/management/ThreadInfo/getWaitedTime/," Returns the approximate accumulated elapsed time (in milliseconds)\n that the thread associated with this <tt>ThreadInfo</tt> \n has waited for notification\n since thread contention monitoring is enabled.\n I.e. the total accumulated time the thread has been in the\n {@link java.lang.Thread.State#WAITING WAITING}\n or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state\n since thread contention monitoring is enabled.\n This method returns <tt>-1</tt> if thread contention monitoring\n is disabled.\n\n <p>The Java virtual machine may measure the time with a high\n resolution timer.  This statistic is reset when\n the thread contention monitoring is reenabled.\n \n @return the approximate accumulated elapsed time in milliseconds \n that a thread has been in the <tt>WAITING</tt> or\n <tt>TIMED_WAITING</tt> state;\n <tt>-1</tt> if thread contention monitoring is disabled.\n\n @throws java.lang.UnsupportedOperationException if the Java \n virtual machine does not support this operation.\n\n @see ThreadMXBean#isThreadContentionMonitoringSupported\n @see ThreadMXBean#setThreadContentionMonitoringEnabled\n"
13354,method,java/lang/management/ThreadInfo/getWaitedCount/," Returns the total number of times that \n the thread associated with this <tt>ThreadInfo</tt> \n waited for notification.\n I.e. the number of times that a thread has been\n in the {@link java.lang.Thread.State#WAITING WAITING}\n or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state.\n\n @return the total number of times that the thread \n was in the <tt>WAITING</tt> or <tt>TIMED_WAITING</tt> state.\n"
13355,method,java/lang/management/ThreadInfo/getLockInfo/," Returns the <tt>LockInfo</tt> of an object for which \n the thread associated with this <tt>ThreadInfo</tt> \n is blocked waiting. \n A thread can be blocked waiting for one of the following:\n <ul>\n <li>an object monitor to be acquired for entering or reentering\n     a synchronization block/method.\n     <br>The thread is in the {@link java.lang.Thread.State#BLOCKED BLOCKED}\n     state waiting to enter the <tt>synchronized</tt> statement\n     or method.\n     <p></li> \n <li>an object monitor to be notified by another thread.\n     <br>The thread is in the {@link java.lang.Thread.State#WAITING WAITING}\n     or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state\n     due to a call to the {@link Object#wait Object.wait} method.\n     <p></li>\n <li>a synchronization object responsible for the thread parking.\n     <br>The thread is in the {@link java.lang.Thread.State#WAITING WAITING}\n     or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state\n     due to a call to the\n     {@link java.util.concurrent.locks.LockSupport#park(Object)\n     LockSupport.park} method.  The synchronization object\n     is the object returned from \n     {@link java.util.concurrent.locks.LockSupport#getBlocker\n     LockSupport.getBlocker} method. Typically it is an \n     <a href="LockInfo.html#OwnableSynchronizer"> ownable synchronizer</a>\n     or a {@link java.util.concurrent.locks.Condition Condition}.</li>\n </ul>\n\n <p>This method returns <tt>null</tt> if the thread is not in any of\n the above conditions.\n\n @return <tt>LockInfo</tt> of an object for which the thread\n         is blocked waiting if any; <tt>null</tt> otherwise.\n @since 1.6\n"
13356,method,java/lang/management/ThreadInfo/getLockName/," Returns the {@link LockInfo#toString string representation}\n of an object for which the thread associated with this \n <tt>ThreadInfo</tt> is blocked waiting.  \n This method is equivalent to calling:\n <blockquote>\n <pre>\n getLockInfo().toString()\n </pre></blockquote>\n \n <p>This method will return <tt>null</tt> if this thread is not blocked\n waiting for any object or if the object is not owned by any thread.\n\n @return the string representation of the object on which\n the thread is blocked if any;\n <tt>null</tt> otherwise.\n\n @see #getLockInfo\n"
13357,method,java/lang/management/ThreadInfo/getLockOwnerId/," Returns the ID of the thread which owns the object  \n for which the thread associated with this <tt>ThreadInfo</tt>\n is blocked waiting.\n This method will return <tt>-1</tt> if this thread is not blocked\n waiting for any object or if the object is not owned by any thread.\n\n @return the thread ID of the owner thread of the object \n this thread is blocked on;\n <tt>-1</tt> if this thread is not blocked\n or if the object lis not owned by any thread.\n\n @see #getLockInfo\n"
13358,method,java/lang/management/ThreadInfo/getLockOwnerName/," Returns the name of the thread which owns the object\n for which the thread associated with this <tt>ThreadInfo</tt>\n is blocked waiting.\n This method will return <tt>null</tt> if this thread is not blocked\n waiting for any object or if the object is not owned by any thread.\n\n @return the name of the thread that owns the object \n this thread is blocked on;\n <tt>null</tt> if this thread is not blocked\n or if the object is not owned by any thread.\n\n @see #getLockInfo\n"
13359,method,java/lang/management/ThreadInfo/getStackTrace/," Returns the stack trace of the thread \n associated with this <tt>ThreadInfo</tt>.\n If no stack trace was requested for this thread info, this method\n will return a zero-length array.\n If the returned array is of non-zero length then the first element of\n the array represents the top of the stack, which is the most recent\n method invocation in the sequence.  The last element of the array\n represents the bottom of the stack, which is the least recent method\n invocation in the sequence.\n\n <p>Some Java virtual machines may, under some circumstances, omit one\n or more stack frames from the stack trace.  In the extreme case,\n a virtual machine that has no stack trace information concerning\n the thread associated with this <tt>ThreadInfo</tt> \n is permitted to return a zero-length array from this method.\n\n @return an array of <tt>StackTraceElement</tt> objects of the thread.\n"
13360,method,java/lang/management/ThreadInfo/isSuspended/," Tests if the thread associated with this <tt>ThreadInfo</tt>\n is suspended.  This method returns <tt>true</tt> if\n {@link Thread#suspend} has been called.\n\n @return <tt>true</tt> if the thread is suspended;\n         <tt>false</tt> otherwise.\n"
13361,method,java/lang/management/ThreadInfo/isInNative/," Tests if the thread associated with this <tt>ThreadInfo</tt>\n is executing native code via the Java Native Interface (JNI).\n The JNI native code does not include\n the virtual machine support code or the compiled native\n code generated by the virtual machine.\n\n @return <tt>true</tt> if the thread is executing native code;\n         <tt>false</tt> otherwise.\n"
13362,method,java/lang/management/ThreadInfo/toString/," Returns a string representation of this thread info.\n The format of this string depends on the implementation.\n The returned string will typically include  \n the {@linkplain #getThreadName thread name}, \n the {@linkplain #getThreadId thread ID},\n its {@linkplain #getThreadState state}, \n and a {@linkplain #getStackTrace stack trace} if any.\n\n @return a string representation of this thread info.\n"
13364,method,java/lang/management/ThreadInfo/getLockedMonitors/," Returns an array of {@link MonitorInfo} objects, each of which\n represents an object monitor currently locked by the thread\n associated with this <tt>ThreadInfo</tt>.\n If no locked monitor was requested for this thread info or\n no monitor is locked by the thread, this method\n will return a zero-length array.\n\n @return an array of <tt>MonitorInfo</tt> objects representing\n         the object monitors locked by the thread.\n\n @since 1.6\n"
13365,method,java/lang/management/ThreadInfo/getLockedSynchronizers/," Returns an array of {@link LockInfo} objects, each of which\n represents an <a href="LockInfo.html#OwnableSynchronizer">ownable\n synchronizer</a> currently locked by the thread associated with\n this <tt>ThreadInfo</tt>.  If no locked synchronizer was\n requested for this thread info or no synchronizer is locked by\n the thread, this method will return a zero-length array.\n\n @return an array of <tt>LockInfo</tt> objects representing\n         the ownable synchronizers locked by the thread.\n\n @since 1.6\n"
13366,interface,java/lang/management/RuntimeMXBean," The management interface for the runtime system of\n the Java virtual machine.\n\n <p> A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is\n an <a href="ManagementFactory.html#MXBean">MXBean</a>\n that can be obtained by calling\n the {@link ManagementFactory#getRuntimeMXBean} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n the runtime system within an MBeanServer is:\n <blockquote>\n    {@link ManagementFactory#RUNTIME_MXBEAN_NAME \n           <tt>java.lang:type=Runtime</tt>}\n </blockquote>\n\n <p> This interface defines several convenient methods for accessing \n system properties about the Java virtual machine.  \n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access MXBeans</a>\n\n @author  Mandy Chung\n @version 1.15, 03/23/10 \n @since   1.5\n"
13378,method,java/lang/management/RuntimeMXBean/getBootClassPath/," Returns the boot class path that is used by the bootstrap class loader \n to search for class files.\n\n <p> Multiple paths in the boot class path are separated by the \n path separator character of the platform on which the Java \n virtual machine is running.\n\n <p>A Java virtual machine implementation may not support \n the boot class path mechanism for the bootstrap class loader \n to search for class files.\n The {@link #isBootClassPathSupported} method can be used\n to determine if the Java virtual machine supports this method.\n\n @return the boot class path.\n\n @throws java.lang.UnsupportedOperationException \n     if the Java virtual machine does not support this operation.\n\n @throws  java.lang.SecurityException \n     if a security manager exists and the caller does not have\n     ManagementPermission("monitor").\n"
13379,method,java/lang/management/RuntimeMXBean/getInputArguments/," Returns the input arguments passed to the Java virtual machine\n which does not include the arguments to the <tt>main</tt> method.\n This method returns an empty list if there is no input argument\n to the Java virtual machine.\n <p>\n Some Java virtual machine implementations may take input arguments \n from multiple different sources: for examples, arguments passed from \n the application that launches the Java virtual machine such as\n the 'java' command, environment variables, configuration files, etc.\n <p>\n Typically, not all command-line options to the 'java' command \n are passed to the Java virtual machine.  \n Thus, the returned input arguments may not\n include all command-line options.\n\n <p>\n <b>MBeanServer access</b>:<br>\n The mapped type of <tt>List<String></tt> is <tt>String[]</tt>.\n\n @return a list of <tt>String</tt> objects; each element \n is an argument passed to the Java virtual machine.\n\n @throws  java.lang.SecurityException \n     if a security manager exists and the caller does not have\n     ManagementPermission("monitor").\n"
13382,method,java/lang/management/RuntimeMXBean/getSystemProperties/," Returns a map of names and values of all system properties.\n This method calls {@link System#getProperties} to get all\n system properties.  Properties whose name or value is not\n a <tt>String</tt> are omitted.\n\n <p>\n <b>MBeanServer access</b>:<br>\n The mapped type of <tt>Map<String,String></tt> is\n {@link javax.management.openmbean.TabularData TabularData}\n with two items in each row as follows:\n <blockquote>\n <table border>\n <tr>\n   <th>Item Name</th>\n   <th>Item Type</th>\n   </tr>\n <tr>\n   <td><tt>key</tt></td>\n   <td><tt>String</tt></td>\n   </tr>\n <tr>\n   <td><tt>value</tt></td>\n   <td><tt>String</tt></td>\n   </tr>\n </table>\n </blockquote>\n\n @return a map of names and values of all system properties.\n\n @throws  java.lang.SecurityException\n     if a security manager exists and its\n     <code>checkPropertiesAccess</code> method doesn't allow access\n     to the system properties.\n"
13383,interface,java/lang/management/OperatingSystemMXBean," The management interface for the operating system on which\n the Java virtual machine is running.\n\n <p> A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is\n an <a href="ManagementFactory.html#MXBean">MXBean</a>\n that can be obtained by calling\n the {@link ManagementFactory#getOperatingSystemMXBean} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n the operating system within an MBeanServer is:\n <blockquote>\n    {@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME\n      <tt>java.lang:type=OperatingSystem</tt>}\n </blockquote>\n\n <p> This interface defines several convenient methods for accessing \n system properties about the operating system on which the Java \n virtual machine is running.\n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access MXBeans</a>\n\n @author  Mandy Chung\n @version 1.12, 03/23/10 \n @since   1.5\n"
13388,method,java/lang/management/OperatingSystemMXBean/getSystemLoadAverage/," Returns the system load average for the last minute.\n The system load average is the sum of the number of runnable entities\n queued to the {@linkplain #getAvailableProcessors available processors}\n and the number of runnable entities running on the available processors\n averaged over a period of time.\n The way in which the load average is calculated is operating system\n specific but is typically a damped time-dependent average.\n <p>\n If the load average is not available, a negative value is returned.\n <p>\n This method is designed to provide a hint about the system load\n and may be queried frequently.\n The load average may be unavailable on some platform where it is\n expensive to implement this method.\n\n @return the system load average; or a negative value if not available.\n\n @since 1.6\n"
13389,class,java/lang/management/MonitorInfo," Information about an object monitor lock.  An object monitor is locked\n when entering a synchronization block or method on that object.\n\n <h4>MXBean Mapping</h4>\n <tt>MonitorInfo</tt> is mapped to a {@link CompositeData CompositeData}\n with attributes as specified in\n the {@link #from from} method.\n\n @author  Mandy Chung\n @version 1.6, 03/23/10\n @since   1.6\n"
13390,method,java/lang/management/MonitorInfo/getLockedStackDepth/," Returns the depth in the stack trace where the object monitor\n was locked.  The depth is the index to the <tt>StackTraceElement</tt>\n array returned in the {@link ThreadInfo#getStackTrace} method.\n \n @return the depth in the stack trace where the object monitor\n         was locked, or a negative number if not available.\n"
13391,method,java/lang/management/MonitorInfo/getLockedStackFrame/," Returns the stack frame that locked the object monitor.\n\n @return <tt>StackTraceElement</tt> that locked the object monitor,\n         or <tt>null</tt> if not available.\n"
13393,method,java/lang/management/MonitorInfo/MonitorInfo/String;int;int;StackTraceElement," Construct a <tt>MonitorInfo</tt> object.\n\n @param className the fully qualified name of the class of the lock object.\n @param identityHashCode the {@link System#identityHashCode\n                         identity hash code} of the lock object.\n @param stackDepth the depth in the stack trace where the object monitor\n                   was locked.\n @param stackFrame the stack frame that locked the object monitor.\n @throws IllegalArgumentException if \n    <tt>stackDepth</tt> &ge; 0 but <tt>stackFrame</tt> is <tt>null</tt>,\n    or <tt>stackDepth</tt> &lt; 0 but <tt>stackFrame</tt> is not\n       <tt>null</tt>.\n"
13394,class,java/lang/management/MemoryUsage," A <tt>MemoryUsage</tt> object represents a snapshot of memory usage.\n Instances of the <tt>MemoryUsage</tt> class are usually constructed\n by methods that are used to obtain memory usage\n information about individual memory pool of the Java virtual machine or\n the heap or non-heap memory of the Java virtual machine as a whole.\n\n <p> A <tt>MemoryUsage</tt> object contains four values:\n <ul>\n <table>\n <tr>\n <td valign=top> <tt>init</tt> </td>\n <td valign=top> represents the initial amount of memory (in bytes) that\n      the Java virtual machine requests from the operating system\n      for memory management during startup.  The Java virtual machine\n      may request additional memory from the operating system and\n      may also release memory to the system over time.\n      The value of <tt>init</tt> may be undefined.\n </td>\n </tr>\n <tr>\n <td valign=top> <tt>used</tt> </td>\n <td valign=top> represents the amount of memory currently used (in bytes).\n </td>\n </tr>\n <tr>\n <td valign=top> <tt>committed</tt> </td>\n <td valign=top> represents the amount of memory (in bytes) that is\n      guaranteed to be available for use by the Java virtual machine.\n      The amount of committed memory may change over time (increase\n      or decrease).  The Java virtual machine may release memory to\n      the system and <tt>committed</tt> could be less than <tt>init</tt>.\n      <tt>committed</tt> will always be greater than\n      or equal to <tt>used</tt>.\n </td>\n </tr>\n <tr>\n <td valign=top> <tt>max</tt> </td>\n <td valign=top> represents the maximum amount of memory (in bytes)\n      that can be used for memory management. Its value may be undefined.\n      The maximum amount of memory may change over time if defined.\n      The amount of used and committed memory will always be less than \n      or equal to <tt>max</tt> if <tt>max</tt> is defined.\n      A memory allocation may fail if it attempts to increase the\n      used memory such that <tt>used &gt committed</tt> even\n      if <tt>used &lt= max</tt> would still be true (for example,\n      when the system is low on virtual memory).\n </td>\n </tr>\n </table>\n </ul>\n\n Below is a picture showing an example of a memory pool:\n <p>\n <pre>\n        +----------------------------------------------+\n        +////////////////           |                  +\n        +////////////////           |                  +\n        +----------------------------------------------+\n\n        |--------|\n           init\n        |---------------|\n               used\n        |---------------------------|\n                  committed \n        |----------------------------------------------|\n                            max \n </pre>\n\n <h4>MXBean Mapping</h4>\n <tt>MemoryUsage</tt> is mapped to a {@link CompositeData CompositeData}\n with attributes as specified in the {@link #from from} method. \n\n @author   Mandy Chung\n @version 1.18, 03/23/10\n @since   1.5\n"
13398,method,java/lang/management/MemoryUsage/getMax/,"\n Returns the maximum amount of memory in bytes that can be \n used for memory management.  This method returns <tt>-1</tt> \n if the maximum memory size is undefined.\n\n <p> This amount of memory is not guaranteed to be available \n for memory management if it is greater than the amount of \n committed memory.  The Java virtual machine may fail to allocate \n memory even if the amount of used memory does not exceed this \n maximum size.\n \n @return the maximum amount of memory in bytes; \n <tt>-1</tt> if undefined.\n"
13407,field,java/lang/management/MemoryType/NON_HEAP," Non-heap memory type.\n <p>\n The Java virtual machine manages memory other than the heap\n (referred as <i>non-heap memory</i>).  The non-heap memory includes\n the <i>method area</i> and memory required for the internal \n processing or optimization for the Java virtual machine. \n It stores per-class structures such as a runtime \n constant pool, field and method data, and the code for\n methods and constructors.  \n"
13413,method,java/lang/management/MemoryPoolMXBean/resetPeakUsage/," Resets the peak memory usage statistic of this memory pool\n to the current memory usage.\n\n @throws java.lang.SecurityException if a security manager\n         exists and the caller does not have\n         ManagementPermission("control").\n"
13414,method,java/lang/management/MemoryPoolMXBean/isValid/," Tests if this memory pool is valid in the Java virtual\n machine.  A memory pool becomes invalid once the Java virtual\n machine removes it from the memory system.\n\n @return <tt>true</tt> if the memory pool is valid in the running \n              Java virtual machine;\n         <tt>false</tt> otherwise.\n"
13423,method,java/lang/management/MemoryPoolMXBean/isCollectionUsageThresholdExceeded/," Tests if the memory usage of this memory pool after\n the most recent collection on which the Java virtual\n machine has expended effort has reached or\n exceeded its collection usage threshold. \n This method does not request the Java virtual\n machine to perform any garbage collection other than its normal\n automatic memory management.\n\n @return <tt>true</tt> if the memory usage of this memory pool \n reaches or exceeds the collection usage threshold value\n in the most recent collection;\n <tt>false</tt> otherwise.\n\n @throws UnsupportedOperationException if this memory pool\n         does not support a usage threshold.\n"
13425,method,java/lang/management/MemoryPoolMXBean/getCollectionUsage/," Returns the memory usage after the Java virtual machine  \n most recently expended effort in recycling unused objects\n in this memory pool.\n This method does not request the Java virtual\n machine to perform any garbage collection other than its normal\n automatic memory management.\n This method returns <tt>null</tt> if the Java virtual\n machine does not support this method.\n \n <p>\n <b>MBeanServer access</b>:<br>\n The mapped type of <tt>MemoryUsage</tt> is\n <tt>CompositeData</tt> with attributes as specified in\n {@link MemoryUsage#from MemoryUsage}.\n\n @return a {@link MemoryUsage} representing the memory usage of\n this memory pool after the Java virtual machine most recently \n expended effort in recycling unused objects;\n <tt>null</tt> if this method is not supported.\n"
13427,class,java/lang/management/MemoryNotificationInfo," The information about a memory notification.\n\n <p>\n A memory notification is emitted by {@link MemoryMXBean} \n when the Java virtual machine detects that the memory usage \n of a memory pool is exceeding a threshold value. \n The notification emitted will contain the memory notification\n information about the detected condition:\n <ul>\n   <li>The name of the memory pool.</li>\n   <li>The memory usage of the memory pool when the notification \n       was constructed.</li>\n   <li>The number of times that the memory usage has crossed \n       a threshold when the notification was constructed.\n       For usage threshold notifications, this count will be the \n       {@link MemoryPoolMXBean#getUsageThresholdCount usage threshold\n       count}.  For collection threshold notifications, \n       this count will be the\n       {@link MemoryPoolMXBean#getCollectionUsageThresholdCount\n       collection usage threshold count}.\n       </li>\n </ul>\n\n <p>\n A {@link CompositeData CompositeData} representing \n the <tt>MemoryNotificationInfo</tt> object \n is stored in the\n {@link javax.management.Notification#setUserData user data} \n of a {@link javax.management.Notification notification}.\n The {@link #from from} method is provided to convert from \n a <tt>CompositeData</tt> to a <tt>MemoryNotificationInfo</tt> \n object. For example:\n\n <blockquote><pre>\n      Notification notif;\n\n      // receive the notification emitted by MemoryMXBean and set to notif\n      ...\n            \n      String notifType = notif.getType();\n      if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED) ||\n          notifType.equals(MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED)) {\n          // retrieve the memory notification information\n          CompositeData cd = (CompositeData) notif.getUserData();\n          MemoryNotificationInfo info = MemoryNotificationInfo.from(cd);\n          ....\n      }  \n </pre></blockquote>\n\n <p>\n The types of notifications emitted by <tt>MemoryMXBean</tt> are:\n <ul> \n   <li>A {@link #MEMORY_THRESHOLD_EXCEEDED \n       usage threshold exceeded notification}.\n       <br>This notification will be emitted when\n       the memory usage of a memory pool is increased and has reached \n       or exceeded its \n       <a href="MemoryPoolMXBean.html#UsageThreshold"> usage threshold</a> value.\n       Subsequent crossing of the usage threshold value does not cause\n       further notification until the memory usage has returned\n       to become less than the usage threshold value.\n       <p></li>\n   <li>A {@link #MEMORY_COLLECTION_THRESHOLD_EXCEEDED\n       collection usage threshold exceeded notification}.\n       <br>This notification will be emitted when\n       the memory usage of a memory pool is greater than or equal to its\n       <a href="MemoryPoolMXBean.html#CollectionThreshold">\n       collection usage threshold</a> after the Java virtual machine\n       has expended effort in recycling unused objects in that\n       memory pool.</li> \n </ul>\n\n @author  Mandy Chung\n @version 1.9, 03/23/10\n @since   1.5\n\n"
13434,field,java/lang/management/MemoryNotificationInfo/MEMORY_COLLECTION_THRESHOLD_EXCEEDED," Notification type denoting that \n the memory usage of a memory pool is greater than or equal to its\n <a href="MemoryPoolMXBean.html#CollectionThreshold">\n collection usage threshold</a> after the Java virtual machine\n has expended effort in recycling unused objects in that\n memory pool. \n This notification is emitted by {@link MemoryMXBean}.\n The value of this notification type is \n <tt>java.management.memory.collection.threshold.exceeded</tt>.\n"
13435,interface,java/lang/management/MemoryManagerMXBean," The management interface for a memory manager.\n A memory manager manages one or more memory pools of the \n Java virtual machine.\n\n <p> A Java virtual machine has one or more memory managers.\n An instance implementing this interface is\n an <a href="ManagementFactory.html#MXBean">MXBean</a>\n that can be obtained by calling\n the {@link ManagementFactory#getMemoryManagerMXBeans} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n a memory manager within an MBeanServer is:\n <blockquote>\n   {@link ManagementFactory#MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE\n    <tt>java.lang:type=MemoryManager</tt>}<tt>,name=</tt><i>manager's name</i>\n </blockquote>\n\n @see MemoryMXBean\n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access MXBeans</a>\n\n @author  Mandy Chung\n @version 1.12, 03/23/10 \n @since   1.5\n"
13437,method,java/lang/management/MemoryManagerMXBean/isValid/," Tests if this memory manager is valid in the Java virtual\n machine.  A memory manager becomes invalid once the Java virtual\n machine removes it from the memory system.\n\n @return <tt>true</tt> if the memory manager is valid in the \n               Java virtual machine;\n         <tt>false</tt> otherwise.\n"
13439,interface,java/lang/management/MemoryMXBean," The management interface for the memory system of\n the Java virtual machine.\n\n <p> A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is\n an <a href="ManagementFactory.html#MXBean">MXBean</a>\n that can be obtained by calling\n the {@link ManagementFactory#getMemoryMXBean} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n the memory system within an MBeanServer is:\n <blockquote>\n    {@link ManagementFactory#MEMORY_MXBEAN_NAME \n           <tt>java.lang:type=Memory</tt>}\n </blockquote>\n\n <h4> Memory </h4>\n The memory system of the Java virtual machine manages \n the following kinds of memory:\n\n <h4> 1. Heap </h4>\n The Java virtual machine has a <i>heap</i> that is the runtime\n data area from which memory for all class instances and arrays \n are allocated.  It is created at the Java virtual machine start-up.\n Heap memory for objects is reclaimed by an automatic memory management\n system which is known as a <i>garbage collector</i>.\n\n <p>The heap may be of a fixed size or may be expanded and shrunk.\n The memory for the heap does not need to be contiguous.\n\n <h4> 2. Non-Heap Memory</h4>\n The Java virtual machine manages memory other than the heap\n (referred as <i>non-heap memory</i>).\n \n <p> The Java virtual machine has a <i>method area</i> that is shared\n among all threads.\n The method area belongs to non-heap memory.  It stores per-class structures\n such as a runtime constant pool, field and method data, and the code for\n methods and constructors.  It is created at the Java virtual machine\n start-up.\n \n <p> The method area is logically part of the heap but a Java virtual\n machine implementation may choose not to either garbage collect\n or compact it.  Similar to the heap, the method area may be of a\n fixed size or may be expanded and shrunk.  The memory for the\n method area does not need to be contiguous.\n\n <p>In addition to the method area, a Java virtual machine\n implementation may require memory for internal processing or \n optimization which also belongs to non-heap memory.\n For example, the JIT compiler requires memory for storing the native\n machine code translated from the Java virtual machine code for\n high performance.\n\n <h4>Memory Pools and Memory Managers</h4>\n {@link MemoryPoolMXBean Memory pools} and \n {@link MemoryManagerMXBean memory managers} are the abstract entities\n that monitor and manage the memory system\n of the Java virtual machine.\n\n <p>A memory pool represents a memory area that the Java virtual machine \n manages.  The Java virtual machine has at least one memory pool\n and it may create or remove memory pools during execution.  \n A memory pool can belong to either the heap or the non-heap memory. \n \n <p>A memory manager is responsible for managing one or more memory pools.\n The garbage collector is one type of memory manager responsible \n for reclaiming memory occupied by unreachable objects.  A Java virtual\n machine may have one or more memory managers.   It may\n add or remove memory managers during execution.\n A memory pool can be managed by more than one memory manager.\n\n <h4>Memory Usage Monitoring</h4>\n\n Memory usage is a very important monitoring attribute for the memory system.\n The memory usage, for example, could indicate:\n <ul>\n   <li>the memory usage of an application,</li>\n   <li>the workload being imposed on the automatic memory management system,</li>\n   <li>potential memory leakage.</li>\n </ul>\n\n <p>\n The memory usage can be monitored in three ways:\n <ul>\n   <li>Polling</li>\n   <li>Usage Threshold Notification</li>\n   <li>Collection Usage Threshold Notification</li>\n </ul>\n\n Details are specified in the {@link MemoryPoolMXBean} interface.\n\n <p>The memory usage monitoring mechanism is intended for load-balancing\n or workload distribution use.  For example, an application would stop\n receiving any new workload when its memory usage exceeds a\n certain threshold. It is not intended for an application to detect\n and recover from a low memory condition.\n\n <h4>Notifications</h4>\n\n <p>This <tt>MemoryMXBean</tt> is a \n {@link javax.management.NotificationEmitter NotificationEmitter}\n that emits two types of memory {@link javax.management.Notification \n notifications} if any one of the memory pools\n supports a <a href="MemoryPoolMXBean.html#UsageThreshold">usage threshold</a>\n or a <a href="MemoryPoolMXBean.html#CollectionThreshold">collection usage\n threshold</a> which can be determined by calling the\n {@link MemoryPoolMXBean#isUsageThresholdSupported} and\n {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} methods. \n <ul>\n   <li>{@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED\n       usage threshold exceeded notification} - for notifying that\n       the memory usage of a memory pool is increased and has reached\n       or exceeded its\n       <a href="MemoryPoolMXBean.html#UsageThreshold"> usage threshold</a> value.\n       </li>\n   <li>{@link MemoryNotificationInfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED\n       collection usage threshold exceeded notification} - for notifying that\n       the memory usage of a memory pool is greater than or equal to its\n       <a href="MemoryPoolMXBean.html#CollectionThreshold">\n       collection usage threshold</a> after the Java virtual machine\n       has expended effort in recycling unused objects in that\n       memory pool.</li>\n </ul>\n\n <p>\n The notification emitted is a {@link javax.management.Notification}\n instance whose {@link javax.management.Notification#setUserData \n user data} is set to a {@link CompositeData CompositeData} \n that represents a {@link MemoryNotificationInfo} object\n containing information about the memory pool when the notification\n was constructed. The <tt>CompositeData</tt> contains the attributes\n as described in {@link MemoryNotificationInfo#from \n MemoryNotificationInfo}.\n\n <hr>\n <h4>NotificationEmitter</h4>\n The <tt>MemoryMXBean</tt> object returned by\n {@link ManagementFactory#getMemoryMXBean} implements\n the {@link javax.management.NotificationEmitter NotificationEmitter}\n interface that allows a listener to be registered within the\n <tt>MemoryMXBean</tt> as a notification listener.  \n \n Below is an example code that registers a <tt>MyListener</tt> to handle \n notification emitted by the <tt>MemoryMXBean</tt>. \n\n <blockquote><pre>\n class MyListener implements javax.management.NotificationListener {\n     public void handleNotification(Notification notif, Object handback) {\n         // handle notification\n         ....\n     }\n }\n\n MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();\n NotificationEmitter emitter = (NotificationEmitter) mbean;\n MyListener listener = new MyListener();\n emitter.addNotificationListener(listener, null, null);\n </pre></blockquote>\n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access MXBeans</a>\n\n @author  Mandy Chung\n @version 1.17, 03/23/10 \n @since   1.5\n"
13441,method,java/lang/management/MemoryMXBean/getHeapMemoryUsage/,"\n Returns the current memory usage of the heap that\n is used for object allocation.  The heap consists \n of one or more memory pools.  The <tt>used</tt>\n and <tt>committed</tt> size of the returned memory\n usage is the sum of those values of all heap memory pools\n whereas the <tt>init</tt> and <tt>max</tt> size of the\n returned memory usage represents the setting of the heap\n memory which may not be the sum of those of all heap\n memory pools.\n <p>\n The amount of used memory in the returned memory usage\n is the amount of memory occupied by both live objects\n and garbage objects that have not been collected, if any.\n\n <p>\n <b>MBeanServer access</b>:<br>\n The mapped type of <tt>MemoryUsage</tt> is\n <tt>CompositeData</tt> with attributes as specified in \n {@link MemoryUsage#from MemoryUsage}.\n\n @return a {@link MemoryUsage} object representing \n the heap memory usage.\n"
13442,method,java/lang/management/MemoryMXBean/getNonHeapMemoryUsage/,"\n Returns the current memory usage of non-heap memory that\n is used by the Java virtual machine.\n The non-heap memory consists of one or more memory pools.  \n The <tt>used</tt> and <tt>committed</tt> size of the \n returned memory usage is the sum of those values of \n all non-heap memory pools whereas the <tt>init</tt> \n and <tt>max</tt> size of the returned memory usage \n represents the setting of the non-heap\n memory which may not be the sum of those of all non-heap\n memory pools.\n\n <p>\n <b>MBeanServer access</b>:<br>\n The mapped type of <tt>MemoryUsage</tt> is\n <tt>CompositeData</tt> with attributes as specified in \n {@link MemoryUsage#from MemoryUsage}.\n\n @return a {@link MemoryUsage} object representing \n the non-heap memory usage.\n"
13444,method,java/lang/management/MemoryMXBean/setVerbose/boolean," Enables or disables verbose output for the memory\n system.  The verbose output information and the output stream\n to which the verbose information is emitted are implementation\n dependent.  Typically, a Java virtual machine implementation\n prints a message whenever it frees memory at garbage collection. \n\n <p>\n Each invocation of this method enables or disables verbose\n output globally.\n\n @param value <tt>true</tt> to enable verbose output;\n              <tt>false</tt> to disable.\n\n @exception  java.lang.SecurityException if a security manager\n             exists and the caller does not have\n             ManagementPermission("control").\n"
13445,method,java/lang/management/MemoryMXBean/gc/," Runs the garbage collector.  \n The call <code>gc()</code> is effectively equivalent to the\n call:\n <blockquote><pre>\n System.gc()\n </pre></blockquote>\n\n @see     java.lang.System#gc()\n"
13449,class,java/lang/management/ManagementFactory," The <tt>ManagementFactory</tt> class is a factory class for getting \n managed beans for the Java platform.\n This class consists of static methods each of which returns\n one or more <a href="#MXBean">platform MXBean(s)</a> representing  \n the management interface of a component of the Java virtual\n machine.  \n\n <p>\n An application can access a platform MXBean in the following ways:\n <ul>\n <li><i>Direct access to an MXBean interface</i>\n     <ol type="a">\n     <li>Get the MXBean instance through the static factory method\n         and access the MXBean locally of the running\n         virtual machine.\n         </li>\n     <li>Construct an MXBean proxy instance that forwards the \n         method calls to a given {@link MBeanServer MBeanServer} by calling\n         {@link #newPlatformMXBeanProxy newPlatfromMXBeanProxy}.\n         A proxy is typically constructed to remotely access\n         an MXBean of another running virtual machine.\n         </li> \n     </ol></li>\n <li><i>Indirect access to an MXBean interface via MBeanServer</i>\n     <ol type="a">\n     <li>Go through the {@link #getPlatformMBeanServer \n         platform MBeanServer} to access MXBeans locally or \n         a specific <tt>MBeanServerConnection</tt> to access\n         MXBeans remotely.\n         The attributes and operations of an MXBean use only \n         <em>JMX open types</em> which include basic data types, \n         {@link javax.management.openmbean.CompositeData CompositeData},\n         and {@link javax.management.openmbean.TabularData TabularData}\n         defined in\n         {@link javax.management.openmbean.OpenType OpenType}.\n         The mapping is specified below.\n        </li>\n     </ol></li>\n </ul>\n\n <h4><a name="MXBean">Platform MXBeans</a></h4>\n A platform MXBean is a <i>managed bean</i> that conforms to\n the JMX Instrumentation Specification and only uses\n a set of basic data types described below.\n See <a href="../../../javax/management/MXBean.html#MXBean-spec"> \n the specification of MXBeans</a> for details.\n A JMX management application and the platform <tt>MBeanServer</tt>\n can interoperate without requiring classes for MXBean specific\n data types.  \n The data types being transmitted between the JMX connector \n server and the connector client are \n {@linkplain javax.management.openmbean.OpenType open types}\n and this allows interoperation across versions. \n <p>\n The platform MXBean interfaces use only the following data types:\n <ul>\n   <li>Primitive types such as <tt>int</tt>, <tt>long</tt>, \n       <tt>boolean</tt>, etc</li>\n   <li>Wrapper classes for primitive types such as \n       {@link java.lang.Integer Integer}, {@link java.lang.Long Long},\n       {@link java.lang.Boolean Boolean}, etc and \n       {@link java.lang.String String}</li>\n   <li>{@link java.lang.Enum Enum} classes</li> \n   <li>Classes that define only getter methods and define a static\n       <tt>from</tt> method with a \n       {@link javax.management.openmbean.CompositeData CompositeData}\n       argument to convert from an input <tt>CompositeData</tt> to \n       an instance of that class\n       </li> \n   <li>{@link java.util.List List&lt;E&gt;} \n       where <tt>E</tt> is a primitive type, a wrapper class, \n       an enum class, or a class supporting conversion from a \n       <tt>CompositeData</tt> to its class\n       </li> \n   <li>{@link java.util.Map Map&lt;K,V&gt;}\n       where <tt>K</tt> and <tt>V</tt> are \n       a primitive type, a wrapper class, \n       an enum class, or a class supporting conversion from a \n       <tt>CompositeData</tt> to its class\n       </li> \n </ul> \n \n <p>\n When an attribute or operation of a platform MXBean\n is accessed via an <tt>MBeanServer</tt>, the data types are mapped\n as follows:\n <ul>\n   <li>A primitive type or a wrapper class is mapped\n       to the same type.\n       </li>\n   <li>An {@link Enum} is mapped to\n       <tt>String</tt> whose value is the name of the enum constant.\n   <li>A class that defines only getter methods and a static\n       <tt>from</tt> method with a \n       {@link javax.management.openmbean.CompositeData CompositeData}\n       argument is mapped to\n       {@link javax.management.openmbean.CompositeData CompositeData}.\n       </li>\n   <li><tt>Map&lt;K,V&gt;</tt> is mapped to\n       {@link javax.management.openmbean.TabularData TabularData}\n       whose row type is a \n       {@link javax.management.openmbean.CompositeType CompositeType} with\n       two items whose names are <i>"key"</i> and <i>"value"</i> \n       and the item types are \n       the corresponding mapped type of <tt>K</tt> and <tt>V</tt> \n       respectively and the <i>"key"</i> is the index.\n       </li>\n   <li><tt>List&lt;E&gt;</tt> is mapped to an array with the mapped \n       type of <tt>E</tt> as the element type.\n       </li>\n   <li>An array of element type <tt>E</tt> is mapped to\n       an array of the same dimenions with the mapped type of <tt>E</tt> \n       as the element type.</li>\n </ul> \n\n The {@link javax.management.MBeanInfo MBeanInfo} \n for a platform MXBean\n describes the data types of the attributes and operations\n as primitive or open types mapped as specified above. \n \n <p>\n For example, the {@link MemoryMXBean}\n interface has the following <i>getter</i> and <i>setter</i> methods:\n \n <blockquote><pre>\n public MemoryUsage getHeapMemoryUsage();\n public boolean isVerbose();\n public void setVerbose(boolean value);\n </pre></blockquote>\n\n These attributes in the <tt>MBeanInfo</tt> \n of the <tt>MemoryMXBean</tt> have the following names and types:\n\n <blockquote>\n <table border>\n <tr>\n   <th>Attribute Name</th>\n   <th>Type</th>\n   </tr>\n <tr>\n   <td><tt>HeapMemoryUsage</tt></td>\n   <td>{@link MemoryUsage#from \n              CompositeData representing MemoryUsage}</td>\n </tr>\n <tr>\n   <td><tt>Verbose</tt></td>\n   <td><tt>boolean</tt></td>\n </tr>\n </table>\n </blockquote>\n\n <h4><a name="MXBeanNames">MXBean Names</a></h4>\n Each platform MXBean for a Java virtual machine has a unique\n {@link javax.management.ObjectName ObjectName} for \n registration in the platform <tt>MBeanServer</tt>. \n A Java virtual machine has a single instance of the following management\n interfaces:\n\n <blockquote>\n <table border>\n <tr>\n <th>Management Interface</th>\n <th>ObjectName</th>\n </tr>\n <tr>\n <td> {@link ClassLoadingMXBean} </td>\n <td> {@link #CLASS_LOADING_MXBEAN_NAME\n             <tt>java.lang:type=ClassLoading</tt>}</td>\n </tr>\n <tr>\n <td> {@link MemoryMXBean} </td>\n <td> {@link #MEMORY_MXBEAN_NAME\n             <tt>java.lang:type=Memory</tt>}</td>\n </tr>\n <tr>\n <td> {@link ThreadMXBean} </td>\n <td> {@link #THREAD_MXBEAN_NAME\n             <tt>java.lang:type=Threading</tt>}</td>\n </tr>\n <tr>\n <td> {@link RuntimeMXBean} </td>\n <td> {@link #RUNTIME_MXBEAN_NAME\n             <tt>java.lang:type=Runtime</tt>}</td>\n </tr>\n <tr>\n <td> {@link OperatingSystemMXBean} </td>\n <td> {@link #OPERATING_SYSTEM_MXBEAN_NAME\n             <tt>java.lang:type=OperatingSystem</tt>}</td>\n </tr>\n </table>\n </blockquote>\n\n <p>\n A Java virtual machine has zero or a single instance of \n the following management interfaces.\n\n <blockquote>\n <table border>\n <tr>\n <th>Management Interface</th>\n <th>ObjectName</th>\n </tr>\n <tr>\n <td> {@link CompilationMXBean} </td>\n <td> {@link #COMPILATION_MXBEAN_NAME\n             <tt>java.lang:type=Compilation</tt>}</td>\n </tr>\n </table>\n </blockquote>\n\n <p>\n A Java virtual machine may have one or more instances of the following\n management interfaces. \n <blockquote>\n <table border>\n <tr>\n <th>Management Interface</th>\n <th>ObjectName</th>\n </tr>\n <tr>\n <td> {@link GarbageCollectorMXBean} </td>\n <td> {@link #GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE\n    <tt>java.lang:type=GarbageCollector</tt>}<tt>,name=</tt><i>collector's name</i></td>\n </tr>\n <tr>\n <td> {@link MemoryManagerMXBean} </td>\n <td> {@link #MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE\n    <tt>java.lang:type=MemoryManager</tt>}<tt>,name=</tt><i>manager's name</i></td>\n </tr>\n <tr>\n <td> {@link MemoryPoolMXBean} </td>\n <td> {@link #MEMORY_POOL_MXBEAN_DOMAIN_TYPE\n    <tt>java.lang:type=MemoryPool</tt>}<tt>,name=</tt><i>pool's name</i></td>\n </tr>\n </table>\n </blockquote>\n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access Management Metrics</a>\n @see java.util.logging.LoggingMXBean\n @see javax.management.MXBean\n\n @author  Mandy Chung\n @version 1.25, 03/23/10 \n @since   1.5\n"
13452,method,java/lang/management/ManagementFactory/getThreadMXBean/," Returns the managed bean for the thread system of \n the Java virtual machine.\n\n @return a {@link ThreadMXBean} object for the Java virtual machine.\n"
13456,method,java/lang/management/ManagementFactory/getMemoryPoolMXBeans/," Returns a list of {@link MemoryPoolMXBean} objects in the \n Java virtual machine.\n The Java virtual machine can have one or more memory pools.\n It may add or remove memory pools during execution.\n\n @return a list of <tt>MemoryPoolMXBean</tt> objects.\n\n"
13457,method,java/lang/management/ManagementFactory/getMemoryManagerMXBeans/," Returns a list of {@link MemoryManagerMXBean} objects \n in the Java virtual machine. \n The Java virtual machine can have one or more memory managers.\n It may add or remove memory managers during execution.\n\n @return a list of <tt>MemoryManagerMXBean</tt> objects.\n\n"
13458,method,java/lang/management/ManagementFactory/getGarbageCollectorMXBeans/," Returns a list of {@link GarbageCollectorMXBean} objects \n in the Java virtual machine.\n The Java virtual machine may have one or more\n <tt>GarbageCollectorMXBean</tt> objects.\n It may add or remove <tt>GarbageCollectorMXBean</tt> \n during execution.\n\n @return a list of <tt>GarbageCollectorMXBean</tt> objects.\n\n"
13466,field,java/lang/management/ManagementFactory/THREAD_MXBEAN_NAME," String representation of the\n <tt>ObjectName</tt> for the {@link ThreadMXBean}.\n"
13470,class,java/lang/management/LockInfo," Information about a <em>lock</em>.  A lock can be a built-in object monitor,\n an <em>ownable synchronizer</em>, or the {@link Condition Condition}\n object associated with synchronizers.\n <p>\n <a name="OwnableSynchronizer">An ownable synchronizer</a> is \n a synchronizer that may be exclusively owned by a thread and uses\n {@link AbstractOwnableSynchronizer AbstractOwnableSynchronizer} \n (or its subclass) to implement its synchronization property. \n {@link ReentrantLock ReentrantLock} and\n {@link ReentrantReadWriteLock ReentrantReadWriteLock} are\n two examples of ownable synchronizers provided by the platform.\n\n <h4><a name="MappedType">MXBean Mapping</a></h4>\n <tt>LockInfo</tt> is mapped to a {@link CompositeData CompositeData}\n as specified in the <a href="../../../javax/management/MXBean.html#mapping-rules">\n type mapping rules</a> of {@linkplain javax.management.MXBean MXBeans}.\n \n @see java.util.concurrent.locks.AbstractOwnableSynchronizer\n @see java.util.concurrent.locks.Condition\n\n @author  Mandy Chung\n @version 1.7, 03/23/10\n @since   1.6\n"
13471,method,java/lang/management/LockInfo/getClassName/," Returns the fully qualified name of the class of the lock object.\n\n @return the fully qualified name of the class of the lock object.\n"
13472,method,java/lang/management/LockInfo/getIdentityHashCode/," Returns the identity hash code of the lock object\n returned from the {@link System#identityHashCode} method.\n\n @return the identity hash code of the lock object.\n"
13473,method,java/lang/management/LockInfo/toString/," Returns a string representation of a lock.  The returned\n string representation consists of the name of the class of the \n lock object, the at-sign character `@', and the unsigned \n hexadecimal representation of the <em>identity</em> hash code \n of the object.  This method returns a string equals to the value of:\n <blockquote>\n <pre>\n lock.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(lock))\n </pre></blockquote>\n where <tt>lock</tt> is the lock object.\n\n @return the string representation of a lock.\n"
13474,method,java/lang/management/LockInfo/LockInfo/String;int," Constructs a <tt>LockInfo</tt> object.\n\n @param className the fully qualified name of the class of the lock object.\n @param identityHashCode the {@link System#identityHashCode \n                         identity hash code} of the lock object.\n"
13475,interface,java/lang/management/GarbageCollectorMXBean," The management interface for the garbage collection of\n the Java virtual machine.  Garbage collection is the process \n that the Java virtual machine uses to find and reclaim unreachable \n objects to free up memory space.  A garbage collector is one type of\n {@link MemoryManagerMXBean memory manager}.\n\n <p> A Java virtual machine may have one or more instances of \n the implementation class of this interface.  \n An instance implementing this interface is\n an <a href="ManagementFactory.html#MXBean">MXBean</a>\n that can be obtained by calling\n the {@link ManagementFactory#getGarbageCollectorMXBeans} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n a garbage collector within an MBeanServer is:\n <blockquote>\n   {@link ManagementFactory#GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE\n    <tt>java.lang:type=GarbageCollector</tt>}<tt>,name=</tt><i>collector's name</i>\n </blockquote>\n\n A platform usually includes additional platform-dependent information \n specific to a garbage collection algorithm for monitoring.\n\n @see MemoryMXBean\n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access MXBeans</a>\n\n @author  Mandy Chung\n @version 1.11, 03/23/10 \n @since   1.5\n"
13477,method,java/lang/management/GarbageCollectorMXBean/getCollectionTime/," Returns the approximate accumulated collection elapsed time \n in milliseconds.  This method returns <tt>-1</tt> if the collection \n elapsed time is undefined for this collector.\n <p>\n The Java virtual machine implementation may use a high resolution\n timer to measure the elapsed time.  This method may return the\n same value even if the collection count has been incremented\n if the collection elapsed time is very short.\n\n @return the approximate accumulated collection elapsed time \n in milliseconds.\n"
13478,interface,java/lang/management/CompilationMXBean," The management interface for the compilation system of\n the Java virtual machine.\n\n <p> A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is\n an <a href="ManagementFactory.html#MXBean">MXBean</a>\n that can be obtained by calling\n the {@link ManagementFactory#getCompilationMXBean} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n the compilation system within an MBeanServer is:\n <blockquote>\n  {@link ManagementFactory#COMPILATION_MXBEAN_NAME \n         <tt>java.lang:type=Compilation</tt>}\n </blockquote>\n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access MXBeans</a>\n\n @author  Mandy Chung\n @version 1.12, 03/23/10 \n @since   1.5\n"
13481,method,java/lang/management/CompilationMXBean/getTotalCompilationTime/,"\n Returns the approximate accumlated elapsed time (in milliseconds) \n spent in compilation.\n If multiple threads are used for compilation, this value is \n summation of the approximate time that each thread spent in compilation.\n\n <p>This method is optionally supported by the platform.\n A Java virtual machine implementation may not support the compilation \n time monitoring. The {@link #isCompilationTimeMonitoringSupported} \n method can be used to determine if the Java virtual machine \n supports this operation.\n\n <p> This value does not indicate the level of performance of \n the Java virtual machine and is not intended for performance comparisons\n of different virtual machine implementations.\n The implementations may have different definitions and different \n measurements of the compilation time.\n\n @return Compilation time in milliseconds\n @throws java.lang.UnsupportedOperationException if the Java \n virtual machine does not support\n this operation.\n\n"
13482,interface,java/lang/management/ClassLoadingMXBean," The management interface for the class loading system of \n the Java virtual machine. \n\n <p> A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is \n an <a href="ManagementFactory.html#MXBean">MXBean</a>\n that can be obtained by calling\n the {@link ManagementFactory#getClassLoadingMXBean} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for \n the class loading system within an <tt>MBeanServer</tt> is:\n <blockquote>\n {@link ManagementFactory#CLASS_LOADING_MXBEAN_NAME \n        <tt>java.lang:type=ClassLoading</tt>}\n </blockquote>\n\n @see <a href="../../../javax/management/package-summary.html">\n      JMX Specification.</a>\n @see <a href="package-summary.html#examples">\n      Ways to Access MXBeans</a>\n\n @author  Mandy Chung\n @version 1.13, 03/23/10\n @since   1.5 \n"
13487,method,java/lang/management/ClassLoadingMXBean/setVerbose/boolean," Enables or disables the verbose output for the class loading \n system.  The verbose output information and the output stream\n to which the verbose information is emitted are implementation\n dependent.  Typically, a Java virtual machine implementation \n prints a message each time a class file is loaded. \n\n <p>This method can be called by multiple threads concurrently.\n Each invocation of this method enables or disables the verbose\n output globally.\n\n @param value <tt>true</tt> to enable the verbose output;\n              <tt>false</tt> to disable.\n\n @exception  java.lang.SecurityException if a security manager \n             exists and the caller does not have \n             ManagementPermission("control").\n"
13489,method,java/text/StringCharacterIterator/setText/String," Reset this iterator to point to a new string.  This package-visible\n method is used by other java.text classes that want to avoid allocating\n new StringCharacterIterator objects every time their setText method\n is called.\n\n @param  text   The String to be iterated over\n @since 1.2\n"
13508,method,java/text/SimpleDateFormat/format/Date;StringBuffer;FieldPosition," Formats the given <code>Date</code> into a date/time string and appends\n the result to the given <code>StringBuffer</code>.\n\n @param date the date-time value to be formatted into a date-time string.\n @param toAppendTo where the new date-time text is to be appended.\n @param pos the formatting position. On input: an alignment field,\n if desired. On output: the offsets of the alignment field.\n @return the formatted date-time string.\n @exception NullPointerException if the given date is null\n"
13510,method,java/text/SimpleDateFormat/parse/String;ParsePosition," Parses text from a string to produce a <code>Date</code>.\n <p>\n The method attempts to parse text starting at the index given by\n <code>pos</code>.\n If parsing succeeds, then the index of <code>pos</code> is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n date is returned. The updated <code>pos</code> can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of <code>pos</code> is not\n changed, the error index of <code>pos</code> is set to the index of\n the character where the error occurred, and null is returned.\n\n @param text  A <code>String</code>, part of which should be parsed.\n @param pos   A <code>ParsePosition</code> object with index and error\n              index information as described above.\n @return A <code>Date</code> parsed from the string. In case of\n         error, returns null.\n @exception NullPointerException if <code>text</code> or <code>pos</code> is null.\n"
13520,method,java/text/SimpleDateFormat/SimpleDateFormat/," Constructs a <code>SimpleDateFormat</code> using the default pattern and\n date format symbols for the default locale.\n <b>Note:</b> This constructor may not support all locales.\n For full coverage, use the factory methods in the {@link DateFormat}\n class.\n"
13521,method,java/text/SimpleDateFormat/SimpleDateFormat/String," Constructs a <code>SimpleDateFormat</code> using the given pattern and\n the default date format symbols for the default locale.\n <b>Note:</b> This constructor may not support all locales.\n For full coverage, use the factory methods in the {@link DateFormat}\n class.\n\n @param pattern the pattern describing the date and time format\n @exception NullPointerException if the given pattern is null\n @exception IllegalArgumentException if the given pattern is invalid\n"
13522,method,java/text/SimpleDateFormat/SimpleDateFormat/String;Locale," Constructs a <code>SimpleDateFormat</code> using the given pattern and\n the default date format symbols for the given locale.\n <b>Note:</b> This constructor may not support all locales.\n For full coverage, use the factory methods in the {@link DateFormat}\n class.\n\n @param pattern the pattern describing the date and time format\n @param locale the locale whose date format symbols should be used\n @exception NullPointerException if the given pattern or locale is null\n @exception IllegalArgumentException if the given pattern is invalid\n"
13530,method,java/text/RuleBasedCollator/clone/," Standard override; no change in semantics.\n"
13538,method,java/text/ParsePosition/getErrorIndex/," Retrieve the index at which an error occurred, or -1 if the\n error index has not been set.\n @since 1.2\n"
13539,method,java/text/ParsePosition/equals/Object," Overrides equals\n"
13543,class,java/text/ParseException," Signals that an error has been reached unexpectedly\n while parsing.\n @see java.lang.Exception\n @see java.text.Format\n @see java.text.FieldPosition\n @version     1.18, 03/23/10\n @author      Mark Davis\n"
13544,method,java/text/ParseException/getErrorOffset/," Returns the position where the error was found.\n"
13545,method,java/text/ParseException/ParseException/String;int," Constructs a ParseException with the specified detail message and\n offset.\n A detail message is a String that describes this particular exception.\n @param s the detail message\n @param errorOffset the position where the error is found while parsing.\n"
13547,method,java/text/NumberFormat/format/Object;StringBuffer;FieldPosition," Formats a number and appends the resulting text to the given string\n buffer.\n The number can be of any subclass of {@link java.lang.Number}.\n <p>\n This implementation extracts the number's value using\n {@link java.lang.Number#longValue()} for all integral type values that\n can be converted to <code>long</code> without loss of information,\n including <code>BigInteger</code> values with a\n {@link java.math.BigInteger#bitLength() bit length} of less than 64,\n and {@link java.lang.Number#doubleValue()} for all other types. It\n then calls\n {@link #format(long,java.lang.StringBuffer,java.text.FieldPosition)}\n or {@link #format(double,java.lang.StringBuffer,java.text.FieldPosition)}.\n This may result in loss of magnitude information and precision for\n <code>BigInteger</code> and <code>BigDecimal</code> values.\n @param number     the number to format\n @param toAppendTo the <code>StringBuffer</code> to which the formatted\n                   text is to be appended\n @param pos        On input: an alignment field, if desired.\n                   On output: the offsets of the alignment field.\n @return           the value passed in as <code>toAppendTo</code>\n @exception        IllegalArgumentException if <code>number</code> is\n                   null or not an instance of <code>Number</code>.\n @exception        NullPointerException if <code>toAppendTo</code> or\n                   <code>pos</code> is null\n @exception        ArithmeticException if rounding is needed with rounding\n                   mode being set to RoundingMode.UNNECESSARY\n @see              java.text.FieldPosition\n"
13548,method,java/text/NumberFormat/parseObject/String;ParsePosition," Parses text from a string to produce a <code>Number</code>.\n <p>\n The method attempts to parse text starting at the index given by\n <code>pos</code>.\n If parsing succeeds, then the index of <code>pos</code> is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n number is returned. The updated <code>pos</code> can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of <code>pos</code> is not\n changed, the error index of <code>pos</code> is set to the index of\n the character where the error occurred, and null is returned.\n <p>\n See the {@link #parse(String, ParsePosition)} method for more information\n on number parsing.\n\n @param source A <code>String</code>, part of which should be parsed.\n @param pos A <code>ParsePosition</code> object with index and error\n            index information as described above.\n @return A <code>Number</code> parsed from the string. In case of\n         error, returns null.\n @exception NullPointerException if <code>pos</code> is null.\n"
13553,method,java/text/NumberFormat/parse/String;ParsePosition," Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,\n Long.MAX_VALUE] and with no decimals), otherwise a Double.\n If IntegerOnly is set, will stop at a decimal\n point (or equivalent; e.g., for rational numbers "1 2/3", will stop\n after the 1).\n Does not throw an exception; if no object can be parsed, index is\n unchanged!\n @see java.text.NumberFormat#isParseIntegerOnly\n @see java.text.Format#parseObject\n"
13554,method,java/text/NumberFormat/parse/String," Parses text from the beginning of the given string to produce a number.\n The method may not use the entire text of the given string.\n <p>\n See the {@link #parse(String, ParsePosition)} method for more information\n on number parsing.\n\n @param source A <code>String</code> whose beginning should be parsed.\n @return A <code>Number</code> parsed from the string.\n @exception ParseException if the beginning of the specified string\n            cannot be parsed.\n"
13555,method,java/text/NumberFormat/isParseIntegerOnly/," Returns true if this format will parse numbers as integers only.\n For example in the English locale, with ParseIntegerOnly true, the\n string "1234." would be parsed as the integer value 1234 and parsing\n would stop at the "." character.  Of course, the exact format accepted\n by the parse operation is locale dependant and determined by sub-classes\n of NumberFormat.\n"
13556,method,java/text/NumberFormat/setParseIntegerOnly/boolean," Sets whether or not numbers should be parsed as integers only.\n @see #isParseIntegerOnly\n"
13557,method,java/text/NumberFormat/getInstance/," Returns a general-purpose number format for the current default locale.\n This is the same as calling\n {@link #getNumberInstance() getNumberInstance()}.\n"
13558,method,java/text/NumberFormat/getInstance/Locale," Returns a general-purpose number format for the specified locale.\n This is the same as calling\n {@link #getNumberInstance(java.util.Locale) getNumberInstance(inLocale)}.\n"
13561,method,java/text/NumberFormat/getIntegerInstance/," Returns an integer number format for the current default locale. The\n returned number format is configured to round floating point numbers\n to the nearest integer using half-even rounding (see {@link\n java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,\n and to parse only the integer part of an input string (see {@link\n #isParseIntegerOnly isParseIntegerOnly}).\n\n @see #getRoundingMode()\n @return a number format for integer values\n @since 1.4\n"
13562,method,java/text/NumberFormat/getIntegerInstance/Locale," Returns an integer number format for the specified locale. The\n returned number format is configured to round floating point numbers\n to the nearest integer using half-even rounding (see {@link\n java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,\n and to parse only the integer part of an input string (see {@link\n #isParseIntegerOnly isParseIntegerOnly}).\n\n @see #getRoundingMode()\n @return a number format for integer values\n @since 1.4\n"
13568,method,java/text/NumberFormat/hashCode/," Overrides hashCode\n"
13569,method,java/text/NumberFormat/equals/Object," Overrides equals\n"
13570,method,java/text/NumberFormat/clone/," Overrides Cloneable\n"
13581,method,java/text/NumberFormat/getCurrency/," Gets the currency used by this number format when formatting\n currency values. The initial value is derived in a locale dependent\n way. The returned value may be null if no valid\n currency could be determined and no currency has been set using\n {@link #setCurrency(java.util.Currency) setCurrency}.\n <p>\n The default implementation throws\n <code>UnsupportedOperationException</code>.\n\n @return the currency used by this number format, or <code>null</code>\n @exception UnsupportedOperationException if the number format class\n doesn't implement currency formatting\n @since 1.4\n"
13585,method,java/text/NumberFormat/NumberFormat/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
13586,field,java/text/NumberFormat/INTEGER_FIELD," Field constant used to construct a FieldPosition object. Signifies that\n the position of the integer part of a formatted number should be returned.\n @see java.text.FieldPosition\n"
13587,field,java/text/NumberFormat/FRACTION_FIELD," Field constant used to construct a FieldPosition object. Signifies that\n the position of the fraction part of a formatted number should be returned.\n @see java.text.FieldPosition\n"
13613,method,java/text/MessageFormat/setLocale/Locale," Sets the locale to be used when creating or comparing subformats.\n This affects subsequent calls\n <ul>\n <li>to the {@link #applyPattern applyPattern}\n     and {@link #toPattern toPattern} methods if format elements specify\n     a format type and therefore have the subformats created in the\n     <code>applyPattern</code> method, as well as\n <li>to the <code>format</code> and\n     {@link #formatToCharacterIterator formatToCharacterIterator} methods\n     if format elements do not specify a format type and therefore have\n     the subformats created in the formatting methods.\n </ul>\n Subformats that have already been created are not affected.\n\n @param locale the locale to be used when creating or comparing subformats\n"
13616,method,java/text/MessageFormat/toPattern/," Returns a pattern representing the current state of the message format.\n The string is constructed from internal information and therefore\n does not necessarily equal the previously applied pattern. \n\n @return a pattern representing the current state of the message format\n"
13617,method,java/text/MessageFormat/setFormatsByArgumentIndex/Format[]," Sets the formats to use for the values passed into\n <code>format</code> methods or returned from <code>parse</code>\n methods. The indices of elements in <code>newFormats</code>\n correspond to the argument indices used in the previously set\n pattern string.\n The order of formats in <code>newFormats</code> thus corresponds to\n the order of elements in the <code>arguments</code> array passed\n to the <code>format</code> methods or the result array returned\n by the <code>parse</code> methods.\n <p>\n If an argument index is used for more than one format element\n in the pattern string, then the corresponding new format is used\n for all such format elements. If an argument index is not used\n for any format element in the pattern string, then the\n corresponding new format is ignored. If fewer formats are provided\n than needed, then only the formats for argument indices less\n than <code>newFormats.length</code> are replaced.\n\n @param newFormats the new formats to use\n @exception NullPointerException if <code>newFormats</code> is null\n @since 1.4\n"
13623,method,java/text/MessageFormat/format/Object[];StringBuffer;FieldPosition," Formats an array of objects and appends the <code>MessageFormat</code>'s\n pattern, with format elements replaced by the formatted objects, to the\n provided <code>StringBuffer</code>.\n <p>\n The text substituted for the individual format elements is derived from\n the current subformat of the format element and the\n <code>arguments</code> element at the format element's argument index\n as indicated by the first matching line of the following table. An\n argument is <i>unavailable</i> if <code>arguments</code> is\n <code>null</code> or has fewer than argumentIndex+1 elements.\n <p>\n <table border=1 summary="Examples of subformat,argument,and formatted text">\n    <tr>\n       <th>Subformat\n       <th>Argument\n       <th>Formatted Text\n    <tr>\n       <td><i>any</i>\n       <td><i>unavailable</i>\n       <td><code>"{" + argumentIndex + "}"</code>\n    <tr>\n       <td><i>any</i>\n       <td><code>null</code>\n       <td><code>"null"</code>\n    <tr>\n       <td><code>instanceof ChoiceFormat</code>\n       <td><i>any</i>\n       <td><code>subformat.format(argument).indexOf('{') >= 0 ?<br>\n           (new MessageFormat(subformat.format(argument), getLocale())).format(argument) :\n           subformat.format(argument)</code>\n    <tr>\n       <td><code>!= null</code>\n       <td><i>any</i>\n       <td><code>subformat.format(argument)</code>\n    <tr>\n       <td><code>null</code>\n       <td><code>instanceof Number</code>\n       <td><code>NumberFormat.getInstance(getLocale()).format(argument)</code>\n    <tr>\n       <td><code>null</code>\n       <td><code>instanceof Date</code>\n       <td><code>DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)</code>\n    <tr>\n       <td><code>null</code>\n       <td><code>instanceof String</code>\n       <td><code>argument</code>\n    <tr>\n       <td><code>null</code>\n       <td><i>any</i>\n       <td><code>argument.toString()</code>\n </table>\n <p>\n If <code>pos</code> is non-null, and refers to\n <code>Field.ARGUMENT</code>, the location of the first formatted\n string will be returned.\n\n @param arguments an array of objects to be formatted and substituted.\n @param result where text is appended.\n @param pos On input: an alignment field, if desired.\n            On output: the offsets of the alignment field.\n @exception IllegalArgumentException if an argument in the\n            <code>arguments</code> array is not of the type\n            expected by the format element(s) that use it.\n"
13625,method,java/text/MessageFormat/format/Object;StringBuffer;FieldPosition," Formats an array of objects and appends the <code>MessageFormat</code>'s\n pattern, with format elements replaced by the formatted objects, to the\n provided <code>StringBuffer</code>.\n This is equivalent to\n <blockquote>\n     <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}((Object[]) arguments, result, pos)</code>\n </blockquote>\n\n @param arguments an array of objects to be formatted and substituted.\n @param result where text is appended.\n @param pos On input: an alignment field, if desired.\n            On output: the offsets of the alignment field.\n @exception IllegalArgumentException if an argument in the\n            <code>arguments</code> array is not of the type\n            expected by the format element(s) that use it.\n"
13626,method,java/text/MessageFormat/formatToCharacterIterator/Object," Formats an array of objects and inserts them into the\n <code>MessageFormat</code>'s pattern, producing an\n <code>AttributedCharacterIterator</code>.\n You can use the returned <code>AttributedCharacterIterator</code>\n to build the resulting String, as well as to determine information\n about the resulting String.\n <p>\n The text of the returned <code>AttributedCharacterIterator</code> is\n the same that would be returned by\n <blockquote>\n     <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>\n </blockquote>\n <p>\n In addition, the <code>AttributedCharacterIterator</code> contains at\n least attributes indicating where text was generated from an\n argument in the <code>arguments</code> array. The keys of these attributes are of\n type <code>MessageFormat.Field</code>, their values are\n <code>Integer</code> objects indicating the index in the <code>arguments</code>\n array of the argument from which the text was generated.\n <p>\n The attributes/value from the underlying <code>Format</code>\n instances that <code>MessageFormat</code> uses will also be\n placed in the resulting <code>AttributedCharacterIterator</code>.\n This allows you to not only find where an argument is placed in the\n resulting String, but also which fields it contains in turn.\n\n @param arguments an array of objects to be formatted and substituted.\n @return AttributedCharacterIterator describing the formatted value.\n @exception NullPointerException if <code>arguments</code> is null.\n @exception IllegalArgumentException if an argument in the\n            <code>arguments</code> array is not of the type\n            expected by the format element(s) that use it.\n @since 1.4\n"
13627,method,java/text/MessageFormat/parse/String;ParsePosition," Parses the string.\n\n <p>Caveats: The parse may fail in a number of circumstances.\n For example:\n <ul>\n <li>If one of the arguments does not occur in the pattern.\n <li>If the format of an argument loses information, such as\n     with a choice format where a large number formats to "many".\n <li>Does not yet handle recursion (where\n     the substituted strings contain {n} references.)\n <li>Will not always find a match (or the correct match)\n     if some part of the parse is ambiguous.\n     For example, if the pattern "{1},{2}" is used with the\n     string arguments {"a,b", "c"}, it will format as "a,b,c".\n     When the result is parsed, it will return {"a", "b,c"}.\n <li>If a single argument is parsed more than once in the string,\n     then the later parse wins.\n </ul>\n When the parse fails, use ParsePosition.getErrorIndex() to find out\n where in the string the parsing failed.  The returned error\n index is the starting offset of the sub-patterns that the string\n is comparing with.  For example, if the parsing string "AAA {0} BBB"\n is comparing against the pattern "AAD {0} BBB", the error index is\n 0. When an error occurs, the call to this method will return null.\n If the source is null, return an empty array.\n"
13628,method,java/text/MessageFormat/parse/String," Parses text from the beginning of the given string to produce an object\n array.\n The method may not use the entire text of the given string.\n <p>\n See the {@link #parse(String, ParsePosition)} method for more information\n on message parsing.\n\n @param source A <code>String</code> whose beginning should be parsed.\n @return An <code>Object</code> array parsed from the string.\n @exception ParseException if the beginning of the specified string\n            cannot be parsed.\n"
13629,method,java/text/MessageFormat/parseObject/String;ParsePosition," Parses text from a string to produce an object array.\n <p>\n The method attempts to parse text starting at the index given by\n <code>pos</code>.\n If parsing succeeds, then the index of <code>pos</code> is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n object array is returned. The updated <code>pos</code> can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of <code>pos</code> is not\n changed, the error index of <code>pos</code> is set to the index of\n the character where the error occurred, and null is returned.\n <p>\n See the {@link #parse(String, ParsePosition)} method for more information\n on message parsing.\n\n @param source A <code>String</code>, part of which should be parsed.\n @param pos A <code>ParsePosition</code> object with index and error\n            index information as described above.\n @return An <code>Object</code> array parsed from the string. In case of\n         error, returns null.\n @exception NullPointerException if <code>pos</code> is null.\n"
13631,method,java/text/MessageFormat/equals/Object," Equality comparison between two message format objects\n"
13643,method,java/text/Format/parseObject/String;ParsePosition," Parses text from a string to produce an object.\n <p>\n The method attempts to parse text starting at the index given by\n <code>pos</code>.\n If parsing succeeds, then the index of <code>pos</code> is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n object is returned. The updated <code>pos</code> can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of <code>pos</code> is not\n changed, the error index of <code>pos</code> is set to the index of\n the character where the error occurred, and null is returned.\n\n @param source A <code>String</code>, part of which should be parsed.\n @param pos A <code>ParsePosition</code> object with index and error\n            index information as described above.\n @return An <code>Object</code> parsed from the string. In case of\n         error, returns null.\n @exception NullPointerException if <code>pos</code> is null.\n"
13644,method,java/text/Format/parseObject/String," Parses text from the beginning of the given string to produce an object.\n The method may not use the entire text of the given string.\n\n @param source A <code>String</code> whose beginning should be parsed.\n @return An <code>Object</code> parsed from the string.\n @exception ParseException if the beginning of the specified string\n            cannot be parsed.\n"
13646,method,java/text/Format/Format/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
13650,method,java/text/FieldPosition/getFieldAttribute/," Returns the field identifier as an attribute constant\n from one of the <code>Field</code> subclasses. May return null if\n the field is specified only by an integer field ID.\n\n @return Identifier for the field\n @since 1.4\n"
13654,method,java/text/FieldPosition/setBeginIndex/int," Sets the begin index.  For use by subclasses of Format.\n @since 1.2\n"
13655,method,java/text/FieldPosition/setEndIndex/int," Sets the end index.  For use by subclasses of Format.\n @since 1.2\n"
13656,method,java/text/FieldPosition/equals/Object," Overrides equals\n"
13659,method,java/text/FieldPosition/FieldPosition/int," Creates a FieldPosition object for the given field.  Fields are\n identified by constants, whose names typically end with _FIELD,\n in the various subclasses of Format.\n\n @see java.text.NumberFormat#INTEGER_FIELD\n @see java.text.NumberFormat#FRACTION_FIELD\n @see java.text.DateFormat#YEAR_FIELD\n @see java.text.DateFormat#MONTH_FIELD\n"
13660,method,java/text/FieldPosition/FieldPosition/Field," Creates a FieldPosition object for the given field constant. Fields are\n identified by constants defined in the various <code>Format</code>\n subclasses. This is equivalent to calling\n <code>new FieldPosition(attribute, -1)</code>.\n\n @param attribute Format.Field constant identifying a field\n @since 1.4\n"
13665,method,java/text/DecimalFormatSymbols/getInstance/Locale," Gets the <code>DecimalFormatSymbols</code> instance for the specified \n locale.  This method provides access to <code>DecimalFormatSymbols</code>\n instances for locales supported by the Java runtime itself as well \n as for those supported by installed \n {@link java.text.spi.DecimalFormatSymbolsProvider \n DecimalFormatSymbolsProvider} implementations.\n @param locale the desired locale.\n @return a <code>DecimalFormatSymbols</code> instance.\n @exception NullPointerException if <code>locale</code> is null\n @since 1.6\n"
13690,method,java/text/DecimalFormatSymbols/getCurrency/," Gets the currency of these DecimalFormatSymbols. May be null if the\n currency symbol attribute was previously set to a value that's not\n a valid ISO 4217 currency code.\n\n @return the currency used, or null\n @since 1.4\n"
13696,method,java/text/DecimalFormatSymbols/clone/," Standard override.\n"
13697,method,java/text/DecimalFormatSymbols/equals/Object," Override equals.\n"
13698,method,java/text/DecimalFormatSymbols/hashCode/," Override hashCode.\n"
13699,method,java/text/DecimalFormatSymbols/DecimalFormatSymbols/," Create a DecimalFormatSymbols object for the default locale.\n This constructor can only construct instances for the locales \n supported by the Java runtime environment, not for those \n supported by installed \n {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}\n implementations. For full locale coverage, use the \n {@link #getInstance(Locale) getInstance} method.\n"
13700,method,java/text/DecimalFormatSymbols/DecimalFormatSymbols/Locale," Create a DecimalFormatSymbols object for the given locale.\n This constructor can only construct instances for the locales \n supported by the Java runtime environment, not for those \n supported by installed \n {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}\n implementations. For full locale coverage, use the \n {@link #getInstance(Locale) getInstance} method.\n\n @exception NullPointerException if <code>locale</code> is null\n"
13702,method,java/text/DecimalFormat/format/Object;StringBuffer;FieldPosition," Formats a number and appends the resulting text to the given string \n buffer.\n The number can be of any subclass of {@link java.lang.Number}.\n <p>\n This implementation uses the maximum precision permitted.\n @param number     the number to format\n @param toAppendTo the <code>StringBuffer</code> to which the formatted\n                   text is to be appended\n @param pos        On input: an alignment field, if desired.\n                   On output: the offsets of the alignment field.\n @return           the value passed in as <code>toAppendTo</code>\n @exception        IllegalArgumentException if <code>number</code> is\n                   null or not an instance of <code>Number</code>.\n @exception        NullPointerException if <code>toAppendTo</code> or \n                   <code>pos</code> is null\n @exception        ArithmeticException if rounding is needed with rounding\n                   mode being set to RoundingMode.UNNECESSARY\n @see              java.text.FieldPosition\n"
13703,method,java/text/DecimalFormat/format/double;StringBuffer;FieldPosition," Formats a double to produce a string.\n @param number    The double to format\n @param result    where the text is to be appended\n @param fieldPosition    On input: an alignment field, if desired.\n On output: the offsets of the alignment field.\n @exception ArithmeticException if rounding is needed with rounding\n            mode being set to RoundingMode.UNNECESSARY\n @return The formatted number string\n @see java.text.FieldPosition\n"
13704,method,java/text/DecimalFormat/format/long;StringBuffer;FieldPosition," Format a long to produce a string.\n @param number    The long to format\n @param result    where the text is to be appended\n @param fieldPosition    On input: an alignment field, if desired.\n On output: the offsets of the alignment field.\n @exception       ArithmeticException if rounding is needed with rounding\n                  mode being set to RoundingMode.UNNECESSARY\n @return The formatted number string\n @see java.text.FieldPosition\n"
13706,method,java/text/DecimalFormat/parse/String;ParsePosition," Parses text from a string to produce a <code>Number</code>.\n <p>\n The method attempts to parse text starting at the index given by\n <code>pos</code>.\n If parsing succeeds, then the index of <code>pos</code> is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n number is returned. The updated <code>pos</code> can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of <code>pos</code> is not\n changed, the error index of <code>pos</code> is set to the index of\n the character where the error occurred, and null is returned.\n <p>\n The subclass returned depends on the value of {@link #isParseBigDecimal}\n as well as on the string being parsed.\n <ul>\n   <li>If <code>isParseBigDecimal()</code> is false (the default),\n       most integer values are returned as <code>Long</code>\n       objects, no matter how they are written: <code>"17"</code> and\n       <code>"17.000"</code> both parse to <code>Long(17)</code>.\n       Values that cannot fit into a <code>Long</code> are returned as\n       <code>Double</code>s. This includes values with a fractional part,\n       infinite values, <code>NaN</code>, and the value -0.0.\n       <code>DecimalFormat</code> does <em>not</em> decide whether to\n       return a <code>Double</code> or a <code>Long</code> based on the\n       presence of a decimal separator in the source string. Doing so\n       would prevent integers that overflow the mantissa of a double,\n       such as <code>"-9,223,372,036,854,775,808.00"</code>, from being\n       parsed accurately.\n       <p>\n       Callers may use the <code>Number</code> methods \n       <code>doubleValue</code>, <code>longValue</code>, etc., to obtain\n       the type they want.\n   <li>If <code>isParseBigDecimal()</code> is true, values are returned\n       as <code>BigDecimal</code> objects. The values are the ones\n       constructed by {@link java.math.BigDecimal#BigDecimal(String)}\n       for corresponding strings in locale-independent format. The\n       special cases negative and positive infinity and NaN are returned\n       as <code>Double</code> instances holding the values of the\n       corresponding <code>Double</code> constants.\n </ul>\n <p>\n <code>DecimalFormat</code> parses all Unicode characters that represent\n decimal digits, as defined by <code>Character.digit()</code>. In\n addition, <code>DecimalFormat</code> also recognizes as digits the ten\n consecutive characters starting with the localized zero digit defined in\n the <code>DecimalFormatSymbols</code> object.\n\n @param text the string to be parsed\n @param pos  A <code>ParsePosition</code> object with index and error\n             index information as described above.\n @return     the parsed value, or <code>null</code> if the parse fails\n @exception  NullPointerException if <code>text</code> or\n             <code>pos</code> is null.\n"
13707,method,java/text/DecimalFormat/getDecimalFormatSymbols/," Returns a copy of the decimal format symbols, which is generally not\n changed by the programmer or user.\n @return a copy of the desired DecimalFormatSymbols\n @see java.text.DecimalFormatSymbols\n"
13708,method,java/text/DecimalFormat/setDecimalFormatSymbols/DecimalFormatSymbols," Sets the decimal format symbols, which is generally not changed\n by the programmer or user.\n @param newSymbols desired DecimalFormatSymbols\n @see java.text.DecimalFormatSymbols\n"
13719,method,java/text/DecimalFormat/getGroupingSize/," Return the grouping size. Grouping size is the number of digits between\n grouping separators in the integer portion of a number.  For example,\n in the number "123,456.78", the grouping size is 3. \n @see #setGroupingSize\n @see java.text.NumberFormat#isGroupingUsed\n @see java.text.DecimalFormatSymbols#getGroupingSeparator\n"
13720,method,java/text/DecimalFormat/setGroupingSize/int," Set the grouping size. Grouping size is the number of digits between\n grouping separators in the integer portion of a number.  For example,\n in the number "123,456.78", the grouping size is 3.\n <br>\n The value passed in is converted to a byte, which may lose information.\n @see #getGroupingSize\n @see java.text.NumberFormat#setGroupingUsed\n @see java.text.DecimalFormatSymbols#setGroupingSeparator\n"
13725,method,java/text/DecimalFormat/clone/," Standard override; no change in semantics.\n"
13726,method,java/text/DecimalFormat/equals/Object," Overrides equals\n"
13727,method,java/text/DecimalFormat/hashCode/," Overrides hashCode\n"
13730,method,java/text/DecimalFormat/applyPattern/String," Apply the given pattern to this Format object.  A pattern is a\n short-hand specification for the various formatting properties.\n These properties can also be changed individually through the\n various setter methods.\n <p>\n There is no limit to integer digits set\n by this routine, since that is the typical end-user desire;\n use setMaximumInteger if you want to set a real value.\n For negative numbers, use a second pattern, separated by a semicolon\n <P>Example <code>"#,#00.0#"</code> -> 1,234.56\n <P>This means a minimum of 2 integer digits, 1 fraction digit, and\n a maximum of 2 fraction digits.\n <p>Example: <code>"#,#00.0#;(#,#00.0#)"</code> for negatives in\n parentheses.\n <p>In negative patterns, the minimum and maximum counts are ignored;\n these are presumed to be set in the positive pattern.\n\n @exception NullPointerException if <code>pattern</code> is null\n @exception IllegalArgumentException if the given pattern is invalid.\n"
13731,method,java/text/DecimalFormat/applyLocalizedPattern/String," Apply the given pattern to this Format object.  The pattern\n is assumed to be in a localized notation. A pattern is a\n short-hand specification for the various formatting properties.\n These properties can also be changed individually through the\n various setter methods.\n <p>\n There is no limit to integer digits set\n by this routine, since that is the typical end-user desire;\n use setMaximumInteger if you want to set a real value.\n For negative numbers, use a second pattern, separated by a semicolon\n <P>Example <code>"#,#00.0#"</code> -> 1,234.56\n <P>This means a minimum of 2 integer digits, 1 fraction digit, and\n a maximum of 2 fraction digits.\n <p>Example: <code>"#,#00.0#;(#,#00.0#)"</code> for negatives in\n parentheses.\n <p>In negative patterns, the minimum and maximum counts are ignored;\n these are presumed to be set in the positive pattern.\n\n @exception NullPointerException if <code>pattern</code> is null\n @exception IllegalArgumentException if the given pattern is invalid.\n"
13740,method,java/text/DecimalFormat/getCurrency/," Gets the currency used by this decimal format when formatting\n currency values.\n The currency is obtained by calling\n {@link DecimalFormatSymbols#getCurrency DecimalFormatSymbols.getCurrency}\n on this number format's symbols.\n\n @return the currency used by this decimal format, or <code>null</code>\n @since 1.4\n"
13741,method,java/text/DecimalFormat/setCurrency/Currency," Sets the currency used by this number format when formatting\n currency values. This does not update the minimum or maximum\n number of fraction digits used by the number format.\n The currency is set by calling\n {@link DecimalFormatSymbols#setCurrency DecimalFormatSymbols.setCurrency}\n on this number format's symbols.\n\n @param currency the new currency to be used by this decimal format\n @exception NullPointerException if <code>currency</code> is null\n @since 1.4\n"
13746,method,java/text/DecimalFormat/DecimalFormat/String;DecimalFormatSymbols," Creates a DecimalFormat using the given pattern and symbols.\n Use this constructor when you need to completely customize the\n behavior of the format.\n <p>\n To obtain standard formats for a given\n locale, use the factory methods on NumberFormat such as\n getInstance or getCurrencyInstance. If you need only minor adjustments\n to a standard format, you can modify the format returned by\n a NumberFormat factory method.\n\n @param pattern a non-localized pattern string\n @param symbols the set of symbols to be used\n @exception NullPointerException if any of the given arguments is null\n @exception IllegalArgumentException if the given pattern is invalid\n @see java.text.NumberFormat#getInstance\n @see java.text.NumberFormat#getNumberInstance\n @see java.text.NumberFormat#getCurrencyInstance\n @see java.text.NumberFormat#getPercentInstance\n @see java.text.DecimalFormatSymbols\n"
13767,method,java/text/DateFormatSymbols/clone/," Overrides Cloneable\n"
13768,method,java/text/DateFormatSymbols/hashCode/," Override hashCode.\n Generates a hash code for the DateFormatSymbols object.\n"
13769,method,java/text/DateFormatSymbols/equals/Object," Override equals\n"
13770,method,java/text/DateFormatSymbols/DateFormatSymbols/," Construct a DateFormatSymbols object by loading format data from\n resources for the default locale. This constructor can only \n construct instances for the locales supported by the Java \n runtime environment, not for those supported by installed \n {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}\n implementations. For full locale coverage, use the \n {@link #getInstance(Locale) getInstance} method. \n\n @see #getInstance()\n @exception  java.util.MissingResourceException\n             if the resources for the default locale cannot be\n             found or cannot be loaded.\n"
13771,method,java/text/DateFormatSymbols/DateFormatSymbols/Locale," Construct a DateFormatSymbols object by loading format data from\n resources for the given locale. This constructor can only \n construct instances for the locales supported by the Java \n runtime environment, not for those supported by installed \n {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}\n implementations. For full locale coverage, use the \n {@link #getInstance(Locale) getInstance} method. \n\n @see #getInstance(Locale)\n @exception  java.util.MissingResourceException\n             if the resources for the specified locale cannot be\n             found or cannot be loaded.\n"
13774,method,java/text/DateFormat/format/Date;StringBuffer;FieldPosition," Formats a Date into a date/time string.\n @param date a Date to be formatted into a date/time string.\n @param toAppendTo the string buffer for the returning date/time string.\n @param fieldPosition keeps track of the position of the field\n within the returned string.\n On input: an alignment field,\n if desired. On output: the offsets of the alignment field. For\n example, given a time text "1996.07.10 AD at 15:08:56 PDT",\n if the given fieldPosition is DateFormat.YEAR_FIELD, the\n begin index and end index of fieldPosition will be set to\n 0 and 4, respectively.\n Notice that if the same time field appears\n more than once in a pattern, the fieldPosition will be set for the first\n occurrence of that time field. For instance, formatting a Date to\n the time string "1 PM PDT (Pacific Daylight Time)" using the pattern\n "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD,\n the begin index and end index of fieldPosition will be set to\n 5 and 8, respectively, for the first occurrence of the timezone\n pattern character 'z'.\n @return the string buffer passed in as toAppendTo, with formatted text appended.\n"
13776,method,java/text/DateFormat/parse/String," Parses text from the beginning of the given string to produce a date.\n The method may not use the entire text of the given string.\n <p>\n See the {@link #parse(String, ParsePosition)} method for more information\n on date parsing.\n\n @param source A <code>String</code> whose beginning should be parsed.\n @return A <code>Date</code> parsed from the string.\n @exception ParseException if the beginning of the specified string\n            cannot be parsed.\n"
13777,method,java/text/DateFormat/parse/String;ParsePosition," Parse a date/time string according to the given parse position.  For\n example, a time text "07/10/96 4:5 PM, PDT" will be parsed into a Date\n that is equivalent to Date(837039928046).\n\n <p> By default, parsing is lenient: If the input is not in the form used\n by this object's format method but can still be parsed as a date, then\n the parse succeeds.  Clients may insist on strict adherence to the\n format by calling setLenient(false).\n\n @see java.text.DateFormat#setLenient(boolean)\n\n @param source  The date/time string to be parsed\n\n @param pos   On input, the position at which to start parsing; on\n              output, the position at which parsing terminated, or the\n              start position if the parse failed.\n\n @return      A Date, or null if the input could not be parsed\n"
13778,method,java/text/DateFormat/parseObject/String;ParsePosition," Parses text from a string to produce a <code>Date</code>.\n <p>\n The method attempts to parse text starting at the index given by\n <code>pos</code>.\n If parsing succeeds, then the index of <code>pos</code> is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n date is returned. The updated <code>pos</code> can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of <code>pos</code> is not\n changed, the error index of <code>pos</code> is set to the index of\n the character where the error occurred, and null is returned.\n <p>\n See the {@link #parse(String, ParsePosition)} method for more information\n on date parsing.\n\n @param source A <code>String</code>, part of which should be parsed.\n @param pos A <code>ParsePosition</code> object with index and error\n            index information as described above.\n @return A <code>Date</code> parsed from the string. In case of\n         error, returns null.\n @exception NullPointerException if <code>pos</code> is null.\n"
13798,method,java/text/DateFormat/hashCode/," Overrides hashCode\n"
13799,method,java/text/DateFormat/equals/Object," Overrides equals\n"
13800,method,java/text/DateFormat/clone/," Overrides Cloneable\n"
13827,class,java/text/DateFormat/Field," Defines constants that are used as attribute keys in the\n <code>AttributedCharacterIterator</code> returned\n from <code>DateFormat.formatToCharacterIterator</code> and as\n field identifiers in <code>FieldPosition</code>.\n <p>\n The class also provides two methods to map\n between its constants and the corresponding Calendar constants.\n\n @since 1.4\n @see java.util.Calendar\n"
13828,method,java/text/DateFormat/Field/ofCalendarField/int," Returns the <code>Field</code> constant that corresponds to\n the <code>Calendar</code> constant <code>calendarField</code>.\n If there is no direct mapping between the <code>Calendar</code>\n constant and a <code>Field</code>, null is returned.\n\n @throws IllegalArgumentException if <code>calendarField</code> is\n         not the value of a <code>Calendar</code> field constant.\n @param calendarField Calendar field constant\n @return Field instance representing calendarField.\n @see java.util.Calendar\n"
13831,method,java/text/DateFormat/Field/DateFormat/Field/String;int," Creates a <code>Field</code>.\n\n @param name the name of the <code>Field</code>\n @param calendarField the <code>Calendar</code> constant this\n        <code>Field</code> corresponds to; any value, even one\n        outside the range of legal <code>Calendar</code> values may\n        be used, but <code>-1</code> should be used for values\n        that don't correspond to legal <code>Calendar</code> values\n"
13852,method,java/text/Collator/getInstance/Locale," Gets the Collator for the desired locale.\n @param desiredLocale the desired locale.\n @return the Collator for the desired locale.\n @see java.util.Locale\n @see java.util.ResourceBundle\n"
13859,method,java/text/Collator/getDecomposition/," Get the decomposition mode of this Collator. Decomposition mode\n determines how Unicode composed characters are handled. Adjusting\n decomposition mode allows the user to select between faster and more\n complete collation behavior.\n <p>The three values for decomposition mode are:\n <UL>\n <LI>NO_DECOMPOSITION,\n <LI>CANONICAL_DECOMPOSITION\n <LI>FULL_DECOMPOSITION.\n </UL>\n See the documentation for these three constants for a description\n of their meaning.\n @return the decomposition mode\n @see java.text.Collator#setDecomposition\n @see java.text.Collator#NO_DECOMPOSITION\n @see java.text.Collator#CANONICAL_DECOMPOSITION\n @see java.text.Collator#FULL_DECOMPOSITION\n"
13862,method,java/text/Collator/clone/," Overrides Cloneable\n"
13865,method,java/text/Collator/Collator/," Default constructor.  This constructor is\n protected so subclasses can get access to it. Users typically create\n a Collator sub-class by calling the factory method getInstance.\n @see java.text.Collator#getInstance\n"
13866,field,java/text/Collator/PRIMARY," Collator strength value.  When set, only PRIMARY differences are\n considered significant during comparison. The assignment of strengths\n to language features is locale dependant. A common example is for\n different base letters ("a" vs "b") to be considered a PRIMARY difference.\n @see java.text.Collator#setStrength\n @see java.text.Collator#getStrength\n"
13867,field,java/text/Collator/SECONDARY," Collator strength value.  When set, only SECONDARY and above differences are\n considered significant during comparison. The assignment of strengths\n to language features is locale dependant. A common example is for\n different accented forms of the same base letter ("a" vs "ä") to be\n considered a SECONDARY difference.\n @see java.text.Collator#setStrength\n @see java.text.Collator#getStrength\n"
13868,field,java/text/Collator/TERTIARY," Collator strength value.  When set, only TERTIARY and above differences are\n considered significant during comparison. The assignment of strengths\n to language features is locale dependant. A common example is for\n case differences ("a" vs "A") to be considered a TERTIARY difference.\n @see java.text.Collator#setStrength\n @see java.text.Collator#getStrength\n"
13869,field,java/text/Collator/IDENTICAL," Collator strength value.  When set, all differences are\n considered significant during comparison. The assignment of strengths\n to language features is locale dependant. A common example is for control\n characters ("&#092;u0001" vs "&#092;u0002") to be considered equal at the\n PRIMARY, SECONDARY, and TERTIARY levels but different at the IDENTICAL\n level.  Additionally, differences between pre-composed accents such as\n "&#092;u00C0" (A-grave) and combining accents such as "A&#092;u0300"\n (A, combining-grave) will be considered significant at the IDENTICAL\n level if decomposition is set to NO_DECOMPOSITION.\n"
13870,field,java/text/Collator/NO_DECOMPOSITION," Decomposition mode value. With NO_DECOMPOSITION\n set, accented characters will not be decomposed for collation. This\n is the default setting and provides the fastest collation but \n will only produce correct results for languages that do not use accents.\n @see java.text.Collator#getDecomposition\n @see java.text.Collator#setDecomposition\n"
13871,field,java/text/Collator/CANONICAL_DECOMPOSITION," Decomposition mode value. With CANONICAL_DECOMPOSITION\n set, characters that are canonical variants according to Unicode \n standard will be decomposed for collation. This should be used to get \n correct collation of accented characters.\n <p>\n CANONICAL_DECOMPOSITION corresponds to Normalization Form D as\n described in \n <a href="http://www.unicode.org/unicode/reports/tr15/tr15-23.html">Unicode \n Technical Report #15</a>.\n @see java.text.Collator#getDecomposition\n @see java.text.Collator#setDecomposition\n"
13872,field,java/text/Collator/FULL_DECOMPOSITION," Decomposition mode value. With FULL_DECOMPOSITION\n set, both Unicode canonical variants and Unicode compatibility variants\n will be decomposed for collation.  This causes not only accented\n characters to be collated, but also characters that have special formats\n to be collated with their norminal form. For example, the half-width and\n full-width ASCII and Katakana characters are then collated together.\n FULL_DECOMPOSITION is the most complete and therefore the slowest\n decomposition mode.\n <p>\n FULL_DECOMPOSITION corresponds to Normalization Form KD as\n described in \n <a href="http://www.unicode.org/unicode/reports/tr15/tr15-23.html">Unicode \n Technical Report #15</a>.\n @see java.text.Collator#getDecomposition\n @see java.text.Collator#setDecomposition\n"
13873,class,java/text/CollationKey," A <code>CollationKey</code> represents a <code>String</code> under the\n rules of a specific <code>Collator</code> object. Comparing two\n <code>CollationKey</code>s returns the relative order of the\n <code>String</code>s they represent. Using <code>CollationKey</code>s\n to compare <code>String</code>s is generally faster than using\n <code>Collator.compare</code>. Thus, when the <code>String</code>s\n must be compared multiple times, for example when sorting a list\n of <code>String</code>s. It's more efficient to use <code>CollationKey</code>s.\n\n <p>\n You can not create <code>CollationKey</code>s directly. Rather,\n generate them by calling <code>Collator.getCollationKey</code>.\n You can only compare <code>CollationKey</code>s generated from\n the same <code>Collator</code> object.\n\n <p>\n Generating a <code>CollationKey</code> for a <code>String</code>\n involves examining the entire <code>String</code>\n and converting it to series of bits that can be compared bitwise. This\n allows fast comparisons once the keys are generated. The cost of generating\n keys is recouped in faster comparisons when <code>String</code>s need\n to be compared many times. On the other hand, the result of a comparison\n is often determined by the first couple of characters of each <code>String</code>.\n <code>Collator.compare</code> examines only as many characters as it needs which\n allows it to be faster when doing single comparisons.\n <p>\n The following example shows how <code>CollationKey</code>s might be used\n to sort a list of <code>String</code>s.\n <blockquote>\n <pre>\n // Create an array of CollationKeys for the Strings to be sorted.\n Collator myCollator = Collator.getInstance();\n CollationKey[] keys = new CollationKey[3];\n keys[0] = myCollator.getCollationKey("Tom");\n keys[1] = myCollator.getCollationKey("Dick");\n keys[2] = myCollator.getCollationKey("Harry");\n sort( keys );\n <br>\n //...\n <br>\n // Inside body of sort routine, compare keys this way\n if( keys[i].compareTo( keys[j] ) > 0 )\n    // swap keys[i] and keys[j]\n <br>\n //...\n <br>\n // Finally, when we've returned from sort.\n System.out.println( keys[0].getSourceString() );\n System.out.println( keys[1].getSourceString() );\n System.out.println( keys[2].getSourceString() );\n </pre>\n </blockquote>\n\n @see          Collator\n @see          RuleBasedCollator\n @version      1.22, 03/23/10\n @author       Helena Shih\n"
13874,method,java/text/CollationKey/compareTo/CollationKey," Compare this CollationKey to the target CollationKey. The collation rules of the\n Collator object which created these keys are applied. <strong>Note:</strong>\n CollationKeys created by different Collators can not be compared.\n @param target target CollationKey\n @return Returns an integer value. Value is less than zero if this is less\n than target, value is zero if this and target are equal and value is greater than\n zero if this is greater than target.\n @see java.text.Collator#compare\n"
13878,class,java/text/CollationElementIterator," The <code>CollationElementIterator</code> class is used as an iterator\n to walk through each character of an international string. Use the iterator\n to return the ordering priority of the positioned character. The ordering\n priority of a character, which we refer to as a key, defines how a character\n is collated in the given collation object.\n\n <p>\n For example, consider the following in Spanish:\n <blockquote>\n <pre>\n "ca" -> the first key is key('c') and second key is key('a').\n "cha" -> the first key is key('ch') and second key is key('a').\n </pre>\n </blockquote>\n And in German,\n <blockquote>\n <pre>\n "äb"-> the first key is key('a'), the second key is key('e'), and\n the third key is key('b').\n </pre>\n </blockquote>\n The key of a character is an integer composed of primary order(short),\n secondary order(byte), and tertiary order(byte). Java strictly defines\n the size and signedness of its primitive data types. Therefore, the static\n functions <code>primaryOrder</code>, <code>secondaryOrder</code>, and\n <code>tertiaryOrder</code> return <code>int</code>, <code>short</code>,\n and <code>short</code> respectively to ensure the correctness of the key\n value.\n\n <p>\n Example of the iterator usage,\n <blockquote>\n <pre>\n\n  String testString = "This is a test";\n  RuleBasedCollator ruleBasedCollator = (RuleBasedCollator)Collator.getInstance();\n  CollationElementIterator collationElementIterator = ruleBasedCollator.getCollationElementIterator(testString);\n  int primaryOrder = CollationElementIterator.primaryOrder(collationElementIterator.next());\n </pre>\n </blockquote>\n\n <p>\n <code>CollationElementIterator.next</code> returns the collation order\n of the next character. A collation order consists of primary order,\n secondary order and tertiary order. The data type of the collation\n order is <strong>int</strong>. The first 16 bits of a collation order\n is its primary order; the next 8 bits is the secondary order and the\n last 8 bits is the tertiary order.\n\n @see                Collator\n @see                RuleBasedCollator\n @version            1.24 07/27/98\n @author             Helena Shih, Laura Werner, Richard Gillam\n"
13879,method,java/text/CollationElementIterator/reset/," Resets the cursor to the beginning of the string.  The next call\n to next() will return the first collation element in the string.\n"
13880,method,java/text/CollationElementIterator/next/," Get the next collation element in the string.  <p>This iterator iterates\n over a sequence of collation elements that were built from the string.\n Because there isn't necessarily a one-to-one mapping from characters to\n collation elements, this doesn't mean the same thing as "return the\n collation element [or ordering priority] of the next character in the\n string".</p>\n <p>This function returns the collation element that the iterator is currently\n pointing to and then updates the internal pointer to point to the next element.\n previous() updates the pointer first and then returns the element.  This\n means that when you change direction while iterating (i.e., call next() and\n then call previous(), or call previous() and then call next()), you'll get\n back the same element twice.</p>\n"
13881,method,java/text/CollationElementIterator/previous/," Get the previous collation element in the string.  <p>This iterator iterates\n over a sequence of collation elements that were built from the string.\n Because there isn't necessarily a one-to-one mapping from characters to\n collation elements, this doesn't mean the same thing as "return the\n collation element [or ordering priority] of the previous character in the\n string".</p>\n <p>This function updates the iterator's internal pointer to point to the\n collation element preceding the one it's currently pointing to and then\n returns that element, while next() returns the current element and then\n updates the pointer.  This means that when you change direction while\n iterating (i.e., call next() and then call previous(), or call previous()\n and then call next()), you'll get back the same element twice.</p>\n @since 1.2\n"
13885,method,java/text/CollationElementIterator/setOffset/int," Sets the iterator to point to the collation element corresponding to\n the specified character (the parameter is a CHARACTER offset in the\n original string, not an offset into its corresponding sequence of\n collation elements).  The value returned by the next call to next()\n will be the collation element corresponding to the specified position\n in the text.  If that position is in the middle of a contracting\n character sequence, the result of the next call to next() is the\n collation element for that sequence.  This means that getOffset()\n is not guaranteed to return the same value as was passed to a preceding\n call to setOffset().\n\n @param newOffset The new character offset into the original text.\n @since 1.2\n"
13886,method,java/text/CollationElementIterator/getOffset/," Returns the character offset in the original text corresponding to the next\n collation element.  (That is, getOffset() returns the position in the text\n corresponding to the collation element that will be returned by the next\n call to next().)  This value will always be the index of the FIRST character\n corresponding to the collation element (a contracting character sequence is\n when two or more characters all correspond to the same collation element).\n This means if you do setOffset(x) followed immediately by getOffset(), getOffset()\n won't necessarily return x.\n\n @return The character offset in the original text corresponding to the collation\n element that will be returned by the next call to next().\n @since 1.2\n"
13897,method,java/text/ChoiceFormat/format/long;StringBuffer;FieldPosition," Specialization of format. This method really calls\n <code>format(double, StringBuffer, FieldPosition)</code>\n thus the range of longs that are supported is only equal to\n the range that can be stored by double. This will never be\n a practical limitation.\n"
13899,method,java/text/ChoiceFormat/parse/String;ParsePosition," Parses a Number from the input text.\n @param text the source text.\n @param status an input-output parameter.  On input, the\n status.index field indicates the first character of the\n source text that should be parsed.  On exit, if no error\n occured, status.index is set to the first unparsed character\n in the source text.  On exit, if an error did occur,\n status.index is unchanged and status.errorIndex is set to the\n first index of the character that caused the parse to fail.\n @return A Number representing the value of the number parsed.\n"
13902,method,java/text/ChoiceFormat/clone/," Overrides Cloneable\n"
13904,method,java/text/ChoiceFormat/equals/Object," Equality comparision between two\n"
13908,interface,java/text/CharacterIterator," This interface defines a protocol for bidirectional iteration over text.\n The iterator iterates over a bounded sequence of characters.  Characters\n are indexed with values beginning with the value returned by getBeginIndex() and\n continuing through the value returned by getEndIndex()-1.\n <p>\n Iterators maintain a current character index, whose valid range is from\n getBeginIndex() to getEndIndex(); the value getEndIndex() is included to allow\n handling of zero-length text ranges and for historical reasons.\n The current index can be retrieved by calling getIndex() and set directly\n by calling setIndex(), first(), and last().\n <p>\n The methods previous() and next() are used for iteration. They return DONE if\n they would move outside the range from getBeginIndex() to getEndIndex() -1,\n signaling that the iterator has reached the end of the sequence. DONE is\n also returned by other methods to indicate that the current index is\n outside this range.\n\n <P>Examples:<P>\n\n Traverse the text from start to finish\n <pre>\n public void traverseForward(CharacterIterator iter) {\n     for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) {\n         processChar(c);\n     }\n }\n </pre>\n\n Traverse the text backwards, from end to start\n <pre>\n public void traverseBackward(CharacterIterator iter) {\n     for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) {\n         processChar(c);\n     }\n }\n </pre>\n\n Traverse both forward and backward from a given position in the text.\n Calls to notBoundary() in this example represents some\n additional stopping criteria.\n <pre>\n public void traverseOut(CharacterIterator iter, int pos) {\n     for (char c = iter.setIndex(pos);\n              c != CharacterIterator.DONE && notBoundary(c);\n              c = iter.next()) {\n     }\n     int end = iter.getIndex();\n     for (char c = iter.setIndex(pos);\n             c != CharacterIterator.DONE && notBoundary(c);\n             c = iter.previous()) {\n     }\n     int start = iter.getIndex();\n     processSection(start, end);\n }\n </pre>\n\n @see StringCharacterIterator\n @see AttributedCharacterIterator\n"
13916,method,java/text/CharacterIterator/getEndIndex/," Returns the end index of the text.  This index is the index of the first\n character following the end of the text.\n @return the index after the last character in the text\n"
13919,field,java/text/CharacterIterator/DONE," Constant that is returned when the iterator has reached either the end\n or the beginning of the text. The value is '\\uFFFF', the "not a\n character" value which should not occur in any valid Unicode string.\n"
13924,method,java/text/BreakIterator/next/int," Returns the nth boundary from the current boundary. If either\n the first or last text boundary has been reached, it returns\n <code>BreakIterator.DONE</code> and the current position is set to either \n the first or last text boundary depending on which one is reached. Otherwise, \n the iterator's current position is set to the new boundary.\n For example, if the iterator's current position is the mth text boundary  \n and three more boundaries exist from the current boundary to the last text \n boundary, the next(2) call will return m + 2. The new text position is set \n to the (m + 2)th text boundary. A next(4) call would return \n <code>BreakIterator.DONE</code> and the last text boundary would become the \n new text position.\n @param n which boundary to return.  A value of 0\n does nothing.  Negative values move to previous boundaries\n and positive values move to later boundaries.\n @return The character index of the nth boundary from the current position\n or <code>BreakIterator.DONE</code> if either first or last text boundary \n has been reached.\n"
13927,method,java/text/BreakIterator/following/int," Returns the first boundary following the specified character offset. If the \n specified offset equals to the last text boundary, it returns \n <code>BreakIterator.DONE</code> and the iterator's current position is unchanged. \n Otherwise, the iterator's current position is set to the returned boundary. \n The value returned is always greater than the offset or the value \n <code>BreakIterator.DONE</code>.\n @param offset the character offset to begin scanning.\n @return The first boundary after the specified offset or \n <code>BreakIterator.DONE</code> if the last text boundary is passed in \n as the offset.\n @exception  IllegalArgumentException if the specified offset is less than\n the first text boundary or greater than the last text boundary.\n"
13928,method,java/text/BreakIterator/preceding/int," Returns the last boundary preceding the specified character offset. If the \n specified offset equals to the first text boundary, it returns \n <code>BreakIterator.DONE</code> and the iterator's current position is unchanged. \n Otherwise, the iterator's current position is set to the returned boundary. \n The value returned is always less than the offset or the value \n <code>BreakIterator.DONE</code>.\n @param offset the characater offset to begin scanning.  \n @return The last boundary before the specified offset or \n <code>BreakIterator.DONE</code> if the first text boundary is passed in \n as the offset.\n @exception   IllegalArgumentException if the specified offset is less than\n the first text boundary or greater than the last text boundary.\n @since 1.2\n"
13935,method,java/text/BreakIterator/getWordInstance/Locale," Returns a new <code>BreakIterator</code> instance\n for <a href="#word">word breaks</a>\n for the given locale.\n @param locale the desired locale\n @return A break iterator for word breaks\n @exception NullPointerException if <code>locale</code> is null\n"
13937,method,java/text/BreakIterator/getLineInstance/Locale," Returns a new <code>BreakIterator</code> instance\n for <a href="#line">line breaks</a>\n for the given locale.\n @param locale the desired locale\n @return A break iterator for line breaks\n @exception NullPointerException if <code>locale</code> is null\n"
13939,method,java/text/BreakIterator/getCharacterInstance/Locale," Returns a new <code>BreakIterator</code> instance\n for <a href="#character">character breaks</a>\n for the given locale.\n @param locale the desired locale\n @return A break iterator for character breaks\n @exception NullPointerException if <code>locale</code> is null\n"
13941,method,java/text/BreakIterator/getSentenceInstance/Locale," Returns a new <code>BreakIterator</code> instance\n for <a href="#sentence">sentence breaks</a>\n for the given locale.\n @param locale the desired locale\n @return A break iterator for sentence breaks\n @exception NullPointerException if <code>locale</code> is null\n"
13945,class,java/text/Bidi," This class implements the Unicode Bidirectional Algorithm.\n <p>\n A Bidi object provides information on the bidirectional reordering of the text\n used to create it.  This is required, for example, to properly display Arabic \n or Hebrew text.  These languages are inherently mixed directional, as they order\n numbers from left-to-right while ordering most other text from right-to-left.\n <p>\n Once created, a Bidi object can be queried to see if the text it represents is\n all left-to-right or all right-to-left.  Such objects are very lightweight and\n this text is relatively easy to process.\n <p>\n If there are multiple runs of text, information about the runs can be accessed\n by indexing to get the start, limit, and level of a run.  The level represents\n both the direction and the 'nesting level' of a directional run.  Odd levels\n are right-to-left, while even levels are left-to-right.  So for example level\n 0 represents left-to-right text, while level 1 represents right-to-left text, and\n level 2 represents left-to-right text embedded in a right-to-left run.\n\n @since 1.4\n"
13947,method,java/text/Bidi/isMixed/," Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right \n and right-to-left text, or the base direction differs from the direction of the only run of text.\n @return true if the line is not left-to-right or right-to-left.\n"
13955,method,java/text/Bidi/getRunLevel/int," Return the level of the nth logical run in this line.\n @param run the index of the run, between 0 and <code>getRunCount()</code>\n @return the level of the run\n"
13956,method,java/text/Bidi/getRunStart/int," Return the index of the character at the start of the nth logical run in this line, as \n an offset from the start of the line.\n @param run the index of the run, between 0 and <code>getRunCount()</code>\n @return the start of the run\n"
13957,method,java/text/Bidi/getRunLimit/int," Return the index of the character past the end of the nth logical run in this line, as \n an offset from the start of the line.  For example, this will return the length\n of the line for the last run on the line.\n @param run the index of the run, between 0 and <code>getRunCount()</code>\n @return limit the limit of the run\n"
13959,method,java/text/Bidi/reorderVisually/byte[];int;Object[];int;int," Reorder the objects in the array into visual order based on their levels.\n This is a utility function to use when you have a collection of objects\n representing runs of text in logical order, each run containing text\n at a single level.  The elements at <code>index</code> from\n <code>objectStart</code> up to <code>objectStart + count</code> \n in the objects array will be reordered into visual order assuming\n each run of text has the level indicated by the corresponding element \n in the levels array (at <code>index - objectStart + levelStart</code>).\n\n @param levels an array representing the bidi level of each object\n @param levelStart the start position in the levels array\n @param objects the array of objects to be reordered into visual order\n @param objectStart the start position in the objects array\n @param count the number of objects to reorder\n"
13960,method,java/text/Bidi/toString/," Display the bidi internal state, used in debugging.\n"
13962,method,java/text/Bidi/Bidi/AttributedCharacterIterator," Create Bidi from the given paragraph of text.\n <p>\n The RUN_DIRECTION attribute in the text, if present, determines the base\n direction (left-to-right or right-to-left).  If not present, the base\n direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right\n if there are no strong directional characters in the text.  This attribute, if\n present, must be applied to all the text in the paragraph.\n <p>\n The BIDI_EMBEDDING attribute in the text, if present, represents embedding level\n information.  Negative values from -1 to -62 indicate overrides at the absolute value\n of the level.  Positive values from 1 to 62 indicate embeddings.  Where values are\n zero or not defined, the base embedding level as determined by the base direction\n is assumed.\n <p>\n The NUMERIC_SHAPING attribute in the text, if present, converts European digits to\n other decimal digits before running the bidi algorithm.  This attribute, if present,\n must be applied to all the text in the paragraph.\n\n @param paragraph a paragraph of text with optional character and paragraph attribute information\n\n @see TextAttribute#BIDI_EMBEDDING\n @see TextAttribute#NUMERIC_SHAPING\n @see TextAttribute#RUN_DIRECTION\n"
13963,method,java/text/Bidi/Bidi/char[];int;byte[];int;int;int," Create Bidi from the given text, embedding, and direction information.\n The embeddings array may be null.  If present, the values represent embedding level\n information.  Negative values from -1 to -61 indicate overrides at the absolute value\n of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are\n zero, the base embedding level as determined by the base direction is assumed.\n @param text an array containing the paragraph of text to process.\n @param textStart the index into the text array of the start of the paragraph.\n @param embeddings an array containing embedding values for each character in the paragraph.\n This can be null, in which case it is assumed that there is no external embedding information.\n @param embStart the index into the embedding array of the start of the paragraph.\n @param paragraphLength the length of the paragraph in the text and embeddings arrays.\n @param flags a collection of flags that control the algorithm.  The\n algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,\n DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.\n Other values are reserved.\n"
13966,field,java/text/Bidi/DIRECTION_DEFAULT_LEFT_TO_RIGHT,"\n Constant indicating that the base direction depends on the first strong\n directional character in the text according to the Unicode\n Bidirectional Algorithm.  If no strong directional character is present,\n the base direction is left-to-right.\n"
13967,field,java/text/Bidi/DIRECTION_DEFAULT_RIGHT_TO_LEFT,"\n Constant indicating that the base direction depends on the first strong\n directional character in the text according to the Unicode\n Bidirectional Algorithm.  If no strong directional character is present,\n the base direction is right-to-left.\n"
13968,class,java/text/AttributedString," An AttributedString holds text and related attribute information. It\n may be used as the actual data storage in some cases where a text\n reader wants to access attributed text through the AttributedCharacterIterator\n interface.\n\n <p>\n An attribute is a key/value pair, identified by the key.  No two\n attributes on a given character can have the same key.\n\n <p>The values for an attribute are immutable, or must not be mutated\n by clients or storage.  They are always passed by reference, and not\n cloned.\n\n @see AttributedCharacterIterator\n @see Annotation\n @since 1.2\n"
13969,method,java/text/AttributedString/addAttribute/Attribute;Object," Adds an attribute to the entire string.\n @param attribute the attribute key\n @param value the value of the attribute; may be null\n @exception NullPointerException if <code>attribute</code> is null.\n @exception IllegalArgumentException if the AttributedString has length 0\n (attributes cannot be applied to a 0-length range).\n"
13970,method,java/text/AttributedString/addAttribute/Attribute;Object;int;int," Adds an attribute to a subrange of the string.\n @param attribute the attribute key\n @param value The value of the attribute. May be null.\n @param beginIndex Index of the first character of the range.\n @param endIndex Index of the character following the last character of the range.\n @exception NullPointerException if <code>attribute</code> is null.\n @exception IllegalArgumentException if beginIndex is less then 0, endIndex is\n greater than the length of the string, or beginIndex and endIndex together don't\n define a non-empty subrange of the string.\n"
13978,method,java/text/AttributedString/AttributedString/AttributedCharacterIterator;int;int," Constructs an AttributedString instance with the subrange of\n the given attributed text represented by\n AttributedCharacterIterator. If the given range produces an\n empty text, all attributes will be discarded.  Note that any\n attributes wrapped by an Annotation object are discarded for a\n subrange of the original attribute range.\n\n @param text The text for this attributed string.\n @param beginIndex Index of the first character of the range.\n @param endIndex Index of the character following the last character\n of the range.\n @exception NullPointerException if <code>text</code> is null.\n @exception IllegalArgumentException if the subrange given by\n beginIndex and endIndex is out of the text range.\n @see java.text.Annotation\n"
13979,method,java/text/AttributedString/AttributedString/AttributedCharacterIterator;int;int;Attribute[]," Constructs an AttributedString instance with the subrange of\n the given attributed text represented by\n AttributedCharacterIterator.  Only attributes that match the\n given attributes will be incorporated into the instance. If the\n given range produces an empty text, all attributes will be\n discarded. Note that any attributes wrapped by an Annotation\n object are discarded for a subrange of the original attribute\n range.\n\n @param text The text for this attributed string.\n @param beginIndex Index of the first character of the range.\n @param endIndex Index of the character following the last character\n of the range.\n @param attributes Specifies attributes to be extracted\n from the text. If null is specified, all available attributes will\n be used.\n @exception NullPointerException if <code>text</code> or\n            <code>attributes</code> is null.\n @exception IllegalArgumentException if the subrange given by\n beginIndex and endIndex is out of the text range.\n @see java.text.Annotation\n"
13980,interface,java/text/AttributedCharacterIterator," An AttributedCharacterIterator allows iteration through both text and\n related attribute information.\n\n <p>\n An attribute is a key/value pair, identified by the key.  No two\n attributes on a given character can have the same key.\n\n <p>The values for an attribute are immutable, or must not be mutated\n by clients or storage.  They are always passed by reference, and not\n cloned.\n\n <p>A <em>run with respect to an attribute</em> is a maximum text range for\n which:\n <ul>\n <li>the attribute is undefined or null for the entire range, or\n <li>the attribute value is defined and has the same non-null value for the\n     entire range.\n </ul>\n\n <p>A <em>run with respect to a set of attributes</em> is a maximum text range for\n which this condition is met for each member attribute.\n\n <p>The returned indexes are limited to the range of the iterator.\n\n <p>The returned attribute information is limited to runs that contain\n the current character.\n\n <p>\n Attribute keys are instances of AttributedCharacterIterator.Attribute and its\n subclasses, such as java.awt.font.TextAttribute.\n\n @see AttributedCharacterIterator.Attribute\n @see java.awt.font.TextAttribute\n @see AttributedString\n @see Annotation\n @since 1.2\n"
13991,method,java/text/AttributedCharacterIterator/Attribute/equals/Object," Compares two objects for equality. This version only returns true\n for <code>x.equals(y)</code> if <code>x</code> and <code>y</code> refer\n to the same object, and guarantees this for all subclasses.\n"
13998,field,java/text/AttributedCharacterIterator/Attribute/READING," Attribute key for the reading of some text. In languages where the written form\n and the pronunciation of a word are only loosely related (such as Japanese),\n it is often necessary to store the reading (pronunciation) along with the\n written form.\n <p>Values are instances of Annotation holding instances of String.\n @see Annotation\n @see java.lang.String\n"
14000,class,java/text/Annotation," An Annotation object is used as a wrapper for a text attribute value if\n the attribute has annotation characteristics. These characteristics are:\n <ul>\n <li>The text range that the attribute is applied to is critical to the\n semantics of the range. That means, the attribute cannot be applied to subranges\n of the text range that it applies to, and, if two adjacent text ranges have\n the same value for this attribute, the attribute still cannot be applied to\n the combined range as a whole with this value.\n <li>The attribute or its value usually do no longer apply if the underlying text is\n changed.\n </ul>\n\n An example is grammatical information attached to a sentence:\n For the previous sentence, you can say that "an example"\n is the subject, but you cannot say the same about "an", "example", or "exam".\n When the text is changed, the grammatical information typically becomes invalid.\n Another example is Japanese reading information (yomi).\n\n <p>\n Wrapping the attribute value into an Annotation object guarantees that\n adjacent text runs don't get merged even if the attribute values are equal,\n and indicates to text containers that the attribute should be discarded if\n the underlying text is modified.\n\n @see AttributedCharacterIterator\n @since 1.2\n"
14001,method,java/text/Annotation/getValue/," Returns the value of the attribute, which may be null.\n"
14003,method,java/text/Annotation/Annotation/Object," Constructs an annotation record with the given value, which\n may be null.\n @param value The value of the attribute\n"
14005,method,java/text/spi/NumberFormatProvider/getCurrencyInstance/Locale," Returns a new <code>NumberFormat</code> instance which formats \n monetary values for the specified locale.\n\n @param locale the desired locale.\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @return a currency formatter\n @see java.text.NumberFormat#getCurrencyInstance(java.util.Locale)\n"
14006,method,java/text/spi/NumberFormatProvider/getIntegerInstance/Locale," Returns a new <code>NumberFormat</code> instance which formats \n integer values for the specified locale.\n The returned number format is configured to\n round floating point numbers to the nearest integer using\n half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN HALF_EVEN})\n for formatting, and to parse only the integer part of\n an input string (see {@link\n java.text.NumberFormat#isParseIntegerOnly isParseIntegerOnly}).\n\n @param locale the desired locale\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @return a number format for integer values\n @see java.text.NumberFormat#getIntegerInstance(java.util.Locale)\n"
14007,method,java/text/spi/NumberFormatProvider/getNumberInstance/Locale," Returns a new general-purpose <code>NumberFormat</code> instance for \n the specified locale.\n\n @param locale the desired locale\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @return a general-purpose number formatter\n @see java.text.NumberFormat#getNumberInstance(java.util.Locale)\n"
14008,method,java/text/spi/NumberFormatProvider/getPercentInstance/Locale," Returns a new <code>NumberFormat</code> instance which formats \n percentage values for the specified locale.\n\n @param locale the desired locale\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @return a percent formatter\n @see java.text.NumberFormat#getPercentInstance(java.util.Locale)\n"
14009,method,java/text/spi/NumberFormatProvider/NumberFormatProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
14011,method,java/text/spi/DecimalFormatSymbolsProvider/getInstance/Locale," Returns a new <code>DecimalFormatSymbols</code> instance for the \n specified locale.\n\n @param locale the desired locale\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @return a <code>DecimalFormatSymbols</code> instance.\n @see java.text.DecimalFormatSymbols#getInstance(java.util.Locale)\n"
14012,method,java/text/spi/DecimalFormatSymbolsProvider/DecimalFormatSymbolsProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
14014,method,java/text/spi/DateFormatSymbolsProvider/getInstance/Locale," Returns a new <code>DateFormatSymbols</code> instance for the \n specified locale.\n\n @param locale the desired locale\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @return a <code>DateFormatSymbols</code> instance.\n @see java.text.DateFormatSymbols#getInstance(java.util.Locale)\n"
14015,method,java/text/spi/DateFormatSymbolsProvider/DateFormatSymbolsProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
14017,method,java/text/spi/DateFormatProvider/getTimeInstance/int;Locale," Returns a new <code>DateFormat</code> instance which formats time \n with the given formatting style for the specified locale.\n @param style the given formatting style.  Either one of\n     {@link java.text.DateFormat#SHORT DateFormat.SHORT}, \n     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM}, \n     {@link java.text.DateFormat#LONG DateFormat.LONG}, or\n     {@link java.text.DateFormat#FULL DateFormat.FULL}.\n @param locale the desired locale.\n @exception IllegalArgumentException if <code>style</code> is invalid,\n     or if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @exception NullPointerException if <code>locale</code> is null\n @return a time formatter.\n @see java.text.DateFormat#getTimeInstance(int, java.util.Locale)\n"
14018,method,java/text/spi/DateFormatProvider/getDateInstance/int;Locale," Returns a new <code>DateFormat</code> instance which formats date\n with the given formatting style for the specified locale.\n @param style the given formatting style.  Either one of\n     {@link java.text.DateFormat#SHORT DateFormat.SHORT}, \n     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM}, \n     {@link java.text.DateFormat#LONG DateFormat.LONG}, or\n     {@link java.text.DateFormat#FULL DateFormat.FULL}.\n @param locale the desired locale.\n @exception IllegalArgumentException if <code>style</code> is invalid,\n     or if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @exception NullPointerException if <code>locale</code> is null\n @return a date formatter.\n @see java.text.DateFormat#getDateInstance(int, java.util.Locale)\n"
14019,method,java/text/spi/DateFormatProvider/getDateTimeInstance/int;int;Locale," Returns a new <code>DateFormat</code> instance which formats date and time\n with the given formatting style for the specified locale.\n @param dateStyle the given date formatting style.  Either one of\n     {@link java.text.DateFormat#SHORT DateFormat.SHORT}, \n     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM}, \n     {@link java.text.DateFormat#LONG DateFormat.LONG}, or\n     {@link java.text.DateFormat#FULL DateFormat.FULL}.\n @param timeStyle the given time formatting style.  Either one of\n     {@link java.text.DateFormat#SHORT DateFormat.SHORT}, \n     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM}, \n     {@link java.text.DateFormat#LONG DateFormat.LONG}, or\n     {@link java.text.DateFormat#FULL DateFormat.FULL}.\n @param locale the desired locale.\n @exception IllegalArgumentException if <code>dateStyle</code> or\n     <code>timeStyle</code> is invalid,\n     or if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @exception NullPointerException if <code>locale</code> is null\n @return a date/time formatter.\n @see java.text.DateFormat#getDateTimeInstance(int, int, java.util.Locale)\n"
14020,method,java/text/spi/DateFormatProvider/DateFormatProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
14022,method,java/text/spi/CollatorProvider/getInstance/Locale," Returns a new <code>Collator</code> instance for the specified locale.\n @param locale the desired locale.\n @return the <code>Collator</code> for the desired locale.\n @exception NullPointerException if\n <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @see java.text.Collator#getInstance(java.util.Locale)\n"
14023,method,java/text/spi/CollatorProvider/CollatorProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
14025,method,java/text/spi/BreakIteratorProvider/getWordInstance/Locale," Returns a new <code>BreakIterator</code> instance\n for <a href="../BreakIterator.html#word">word breaks</a>\n for the given locale.\n @param locale the desired locale\n @return A break iterator for word breaks\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @see java.text.BreakIterator#getWordInstance(java.util.Locale)\n"
14026,method,java/text/spi/BreakIteratorProvider/getLineInstance/Locale," Returns a new <code>BreakIterator</code> instance\n for <a href="../BreakIterator.html#line">line breaks</a>\n for the given locale.\n @param locale the desired locale\n @return A break iterator for line breaks\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @see java.text.BreakIterator#getLineInstance(java.util.Locale)\n"
14027,method,java/text/spi/BreakIteratorProvider/getCharacterInstance/Locale," Returns a new <code>BreakIterator</code> instance\n for <a href="../BreakIterator.html#character">character breaks</a>\n for the given locale.\n @param locale the desired locale\n @return A break iterator for character breaks\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @see java.text.BreakIterator#getCharacterInstance(java.util.Locale)\n"
14028,method,java/text/spi/BreakIteratorProvider/getSentenceInstance/Locale," Returns a new <code>BreakIterator</code> instance\n for <a href="../BreakIterator.html#sentence">sentence breaks</a>\n for the given locale.\n @param locale the desired locale\n @return A break iterator for sentence breaks\n @exception NullPointerException if <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @see java.text.BreakIterator#getSentenceInstance(java.util.Locale)\n"
14029,method,java/text/spi/BreakIteratorProvider/BreakIteratorProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
14030,interface,java/sql/Wrapper," Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance\n in question is in fact a proxy class.\n <p>\n The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond\n the traditional JDBC API that are specific to a data source. Developers may wish to gain access to\n these resources that are wrapped (the delegates) as  proxy class instances representing the\n the actual resources. This interface describes a standard mechanism to access \n these wrapped resources\n represented by their proxy, to permit direct access to the resource delegates.\n \n @since 1.6 \n"
14033,class,java/sql/Types," <P>The class that defines the constants that are used to identify generic\n SQL types, called JDBC types.\n <p>\n This class is never instantiated.\n"
14070,class,java/sql/Timestamp," <P>A thin wrapper around <code>java.util.Date</code> that allows\n the JDBC API to identify this as an SQL <code>TIMESTAMP</code> value.\n It adds the ability\n to hold the SQL <code>TIMESTAMP</code> fractional seconds value, by allowing\n the specification of fractional seconds to a precision of nanoseconds.\n A Timestamp also provides formatting and\n parsing operations to support the JDBC escape syntax for timestamp values.\n\n <p>The precision of a Timestamp object is calculated to be either:\n <ul>\n <li><code>19 </code>, which is the number of characters in yyyy-mm-dd hh:mm:ss\n <li> <code> 20 + s </code>, which is the number\n of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and <code>s</code> represents  the scale of the given Timestamp,\n its fractional seconds precision.\n</ul>\n\n <P><B>Note:</B> This type is a composite of a <code>java.util.Date</code> and a\n separate nanoseconds value. Only integral seconds are stored in the\n <code>java.util.Date</code> component. The fractional seconds - the nanos - are\n separate.  The <code>Timestamp.equals(Object)</code> method never returns \n <code>true</code> when passed an object\n that isn't an instance of <code>java.sql.Timestamp</code>, \n because the nanos component of a date is unknown.\n As a result, the <code>Timestamp.equals(Object)</code>\n method is not symmetric with respect to the\n <code>java.util.Date.equals(Object)</code>\n method.  Also, the <code>hashcode</code> method uses the underlying \n <code>java.util.Date</code> \n implementation and therefore does not include nanos in its computation.  \n <P>\n Due to the differences between the <code>Timestamp</code> class\n and the <code>java.util.Date</code>\n class mentioned above, it is recommended that code not view\n <code>Timestamp</code> values generically as an instance of\n <code>java.util.Date</code>.  The\n inheritance relationship between <code>Timestamp</code>\n and <code>java.util.Date</code> really \n denotes implementation inheritance, and not type inheritance.  \n"
14071,method,java/sql/Timestamp/setTime/long," Sets this <code>Timestamp</code> object to represent a point in time that is \n <tt>time</tt> milliseconds after January 1, 1970 00:00:00 GMT. \n\n @param time   the number of milliseconds.\n @see #getTime\n @see #Timestamp(long time)\n @see java.util.Calendar\n"
14073,method,java/sql/Timestamp/valueOf/String," Converts a <code>String</code> object in JDBC timestamp escape format to a\n <code>Timestamp</code> value.\n\n @param s timestamp in format <code>yyyy-mm-dd hh:mm:ss[.f...]</code>.  The\n fractional seconds may be omitted.\n @return corresponding <code>Timestamp</code> value\n @exception java.lang.IllegalArgumentException if the given argument\n does not have the format <code>yyyy-mm-dd hh:mm:ss[.f...]</code>\n"
14078,method,java/sql/Timestamp/equals/Object," Tests to see if this <code>Timestamp</code> object is\n equal to the given object.\n\n This version of the method <code>equals</code> has been added\n to fix the incorrect \n signature of <code>Timestamp.equals(Timestamp)</code> and to preserve backward \n compatibility with existing class files.\n\n Note: This method is not symmetric with respect to the \n <code>equals(Object)</code> method in the base class.\n\n @param ts the <code>Object</code> value to compare with\n @return <code>true</code> if the given <code>Object</code> is an instance\n         of a <code>Timestamp</code> that\n         is equal to this <code>Timestamp</code> object;\n         <code>false</code> otherwise\n"
14081,method,java/sql/Timestamp/compareTo/Timestamp," Compares this <code>Timestamp</code> object to the given \n <code>Timestamp</code> object.\n\n @param   ts   the <code>Timestamp</code> object to be compared to\n                this <code>Timestamp</code> object\n @return  the value <code>0</code> if the two <code>Timestamp</code>\n          objects are equal; a value less than <code>0</code> if this \n          <code>Timestamp</code> object is before the given argument;\n          and a value greater than <code>0</code> if this \n          <code>Timestamp</code> object is after the given argument.\n @since   1.4\n"
14084,method,java/sql/Timestamp/Timestamp/long," Constructs a <code>Timestamp</code> object \n using a milliseconds time value. The\n integral seconds are stored in the underlying date value; the\n fractional seconds are stored in the <code>nanos</code> field of\n the <code>Timestamp</code> object.\n\n @param time milliseconds since January 1, 1970, 00:00:00 GMT.\n        A negative number is the number of milliseconds before\n         January 1, 1970, 00:00:00 GMT.\n @see java.util.Calendar \n"
14085,class,java/sql/Time," <P>A thin wrapper around the <code>java.util.Date</code> class that allows the JDBC\n API to identify this as an SQL <code>TIME</code> value. The <code>Time</code>\n class adds formatting and\n parsing operations to support the JDBC escape syntax for time\n values. \n <p>The date components should be set to the "zero epoch"\n value of January 1, 1970 and should not be accessed. \n"
14086,method,java/sql/Time/setTime/long," Sets a <code>Time</code> object using a milliseconds time value.\n\n @param time milliseconds since January 1, 1970, 00:00:00 GMT;\n             a negative number is milliseconds before\n               January 1, 1970, 00:00:00 GMT\n"
14097,method,java/sql/Time/Time/long," Constructs a <code>Time</code> object using a milliseconds time value.\n\n @param time milliseconds since January 1, 1970, 00:00:00 GMT;\n             a negative number is milliseconds before\n               January 1, 1970, 00:00:00 GMT\n"
14098,interface,java/sql/Struct," <p>The standard mapping in the Java programming language for an SQL\n structured type. A <code>Struct</code> object contains a\n value for each attribute of the SQL structured type that\n it represents.\n By default, an instance of<code>Struct</code> is valid as long as the \n application has a reference to it.\n <p>\n All methods on the <code>Struct</code> interface must be fully implemented if the \n JDBC driver supports the data type.\n @since 1.2\n"
14099,method,java/sql/Struct/getSQLTypeName/," Retrieves the SQL type name of the SQL structured type\n that this <code>Struct</code> object represents.\n\n @return the fully-qualified type name of the SQL structured \n          type for which this <code>Struct</code> object\n          is the generic representation\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14100,method,java/sql/Struct/getAttributes/," Produces the ordered values of the attributes of the SQL \n structured type that this <code>Struct</code> object represents.\n As individual attributes are processed, this method uses the type map\n associated with the \n connection for customizations of the type mappings.\n If there is no\n entry in the connection's type map that matches the structured\n type that an attribute represents,\n the driver uses the standard mapping.\n <p>\n Conceptually, this method calls the method\n <code>getObject</code> on each attribute\n of the structured type and returns a Java array containing \n the result.\n\n @return an array containing the ordered attribute values\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14104,method,java/sql/Statement/executeUpdate/String," Executes the given SQL statement, which may be an <code>INSERT</code>, \n <code>UPDATE</code>, or <code>DELETE</code> statement or an\n SQL statement that returns nothing, such as an SQL DDL statement.\n\n @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n <code>DELETE</code>; or an SQL statement that returns nothing, \n such as a DDL statement.\n\n @return either (1) the row count for SQL Data Manipulation Language (DML) statements\n         or (2) 0 for SQL statements that return nothing\n\n @exception SQLException if a database access error occurs, \n this method is called on a closed <code>Statement</code> or the given\n            SQL statement produces a <code>ResultSet</code> object\n"
14105,method,java/sql/Statement/close/," Releases this <code>Statement</code> object's database \n and JDBC resources immediately instead of waiting for\n this to happen when it is automatically closed.\n It is generally good practice to release resources as soon as\n you are finished with them to avoid tying up database\n resources.\n <P>\n Calling the method <code>close</code> on a <code>Statement</code>\n object that is already closed has no effect.\n <P>\n <B>Note:</B>When a <code>Statement</code> object is \n closed, its current <code>ResultSet</code> object, if one exists, is \n also closed.  \n\n @exception SQLException if a database access error occurs\n"
14106,method,java/sql/Statement/getMaxFieldSize/," Retrieves the maximum number of bytes that can be\n returned for character and binary column values in a <code>ResultSet</code> \n object produced by this <code>Statement</code> object.\n This limit applies only to  <code>BINARY</code>, <code>VARBINARY</code>,\n <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,\n <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code> \n and <code>LONGVARCHAR</code> columns.  If the limit is exceeded, the \n excess data is silently discarded.\n\n @return the current column size limit for columns storing character and \n         binary values; zero means there is no limit \n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @see #setMaxFieldSize\n"
14107,method,java/sql/Statement/setMaxFieldSize/int," Sets the limit for the maximum number of bytes that can be returned for\n character and binary column values in a <code>ResultSet</code>\n object produced by this <code>Statement</code> object.\n \n This limit applies\n only to <code>BINARY</code>, <code>VARBINARY</code>,\n <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,\n <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code> and\n <code>LONGVARCHAR</code> fields.  If the limit is exceeded, the excess data\n is silently discarded. For maximum portability, use values\n greater than 256.\n\n @param max the new column size limit in bytes; zero means there is no limit \n @exception SQLException if a database access error occurs, \n this method is called on a closed <code>Statement</code> \n            or the condition max >= 0 is not satisfied\n @see #getMaxFieldSize\n"
14108,method,java/sql/Statement/getMaxRows/," Retrieves the maximum number of rows that a\n <code>ResultSet</code> object produced by this\n <code>Statement</code> object can contain.  If this limit is exceeded, \n the excess rows are silently dropped.\n\n @return the current maximum number of rows for a <code>ResultSet</code>\n         object produced by this <code>Statement</code> object; \n         zero means there is no limit\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @see #setMaxRows\n"
14109,method,java/sql/Statement/setMaxRows/int," Sets the limit for the maximum number of rows that any\n <code>ResultSet</code> object  generated by this <code>Statement</code>\n object can contain to the given number.\n If the limit is exceeded, the excess\n rows are silently dropped.\n\n @param max the new max rows limit; zero means there is no limit \n @exception SQLException if a database access error occurs, \n this method is called on a closed <code>Statement</code> \n            or the condition max >= 0 is not satisfied\n @see #getMaxRows\n"
14111,method,java/sql/Statement/getQueryTimeout/," Retrieves the number of seconds the driver will\n wait for a <code>Statement</code> object to execute. \n If the limit is exceeded, a\n <code>SQLException</code> is thrown.\n\n @return the current query timeout limit in seconds; zero means there is \n         no limit \n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @see #setQueryTimeout\n"
14113,method,java/sql/Statement/cancel/," Cancels this <code>Statement</code> object if both the DBMS and\n driver support aborting an SQL statement.\n This method can be used by one thread to cancel a statement that\n is being executed by another thread.\n\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n"
14114,method,java/sql/Statement/getWarnings/," Retrieves the first warning reported by calls on this <code>Statement</code> object.\n Subsequent <code>Statement</code> object warnings will be chained to this\n <code>SQLWarning</code> object.\n\n <p>The warning chain is automatically cleared each time\n a statement is (re)executed. This method may not be called on a closed\n <code>Statement</code> object; doing so will cause an <code>SQLException</code>\n to be thrown.\n\n <P><B>Note:</B> If you are processing a <code>ResultSet</code> object, any\n warnings associated with reads on that <code>ResultSet</code> object \n will be chained on it rather than on the <code>Statement</code>\n object that produced it.\n\n @return the first <code>SQLWarning</code> object or <code>null</code> \n         if there are no warnings\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n"
14115,method,java/sql/Statement/clearWarnings/," Clears all the warnings reported on this <code>Statement</code>\n object. After a call to this method,\n the method <code>getWarnings</code> will return \n <code>null</code> until a new warning is reported for this\n <code>Statement</code> object.  \n\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n"
14120,method,java/sql/Statement/getMoreResults/," Moves to this <code>Statement</code> object's next result, returns\n <code>true</code> if it is a <code>ResultSet</code> object, and\n implicitly closes any current <code>ResultSet</code>\n object(s) obtained with the method <code>getResultSet</code>.\n\n <P>There are no more results when the following is true:\n <PRE>\n     // stmt is a Statement object\n     ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))\n </PRE>\n\n @return <code>true</code> if the next result is a <code>ResultSet</code>\n         object; <code>false</code> if it is an update count or there are \n         no more results\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @see #execute \n"
14121,method,java/sql/Statement/setFetchDirection/int," Gives the driver a hint as to the direction in which\n rows will be processed in <code>ResultSet</code>\n objects created using this <code>Statement</code> object.  The \n default value is <code>ResultSet.FETCH_FORWARD</code>.\n <P>\n Note that this method sets the default fetch direction for \n result sets generated by this <code>Statement</code> object.\n Each result set has its own methods for getting and setting\n its own fetch direction.\n\n @param direction the initial direction for processing rows\n @exception SQLException if a database access error occurs, \n this method is called on a closed <code>Statement</code> \n or the given direction\n is not one of <code>ResultSet.FETCH_FORWARD</code>,\n <code>ResultSet.FETCH_REVERSE</code>, or <code>ResultSet.FETCH_UNKNOWN</code>\n @since 1.2\n @see #getFetchDirection\n"
14122,method,java/sql/Statement/getFetchDirection/," Retrieves the direction for fetching rows from\n database tables that is the default for result sets\n generated from this <code>Statement</code> object.\n If this <code>Statement</code> object has not set\n a fetch direction by calling the method <code>setFetchDirection</code>,\n the return value is implementation-specific.\n\n @return the default fetch direction for result sets generated\n          from this <code>Statement</code> object\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @since 1.2\n @see #setFetchDirection\n"
14123,method,java/sql/Statement/setFetchSize/int," Gives the JDBC driver a hint as to the number of rows that should \n be fetched from the database when more rows are needed for\n <code>ResultSet</code> objects genrated by this <code>Statement</code>. \n If the value specified is zero, then the hint is ignored.\n The default value is zero.\n\n @param rows the number of rows to fetch\n @exception SQLException if a database access error occurs, \n this method is called on a closed <code>Statement</code> or the\n        condition  <code>rows >= 0</code> is not satisfied.\n @since 1.2\n @see #getFetchSize\n"
14124,method,java/sql/Statement/getFetchSize/," Retrieves the number of result set rows that is the default \n fetch size for <code>ResultSet</code> objects\n generated from this <code>Statement</code> object.\n If this <code>Statement</code> object has not set\n a fetch size by calling the method <code>setFetchSize</code>,\n the return value is implementation-specific.\n\n @return the default fetch size for result sets generated\n          from this <code>Statement</code> object\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @since 1.2\n @see #setFetchSize\n"
14125,method,java/sql/Statement/getResultSetConcurrency/," Retrieves the result set concurrency for <code>ResultSet</code> objects\n generated by this <code>Statement</code> object.\n\n @return either <code>ResultSet.CONCUR_READ_ONLY</code> or\n <code>ResultSet.CONCUR_UPDATABLE</code>\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @since 1.2\n"
14126,method,java/sql/Statement/getResultSetType/," Retrieves the result set type for <code>ResultSet</code> objects\n generated by this <code>Statement</code> object.\n\n @return one of <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or	\n <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @since 1.2\n"
14127,method,java/sql/Statement/addBatch/String," Adds the given SQL command to the current list of commmands for this\n <code>Statement</code> object. The commands in this list can be\n executed as a batch by calling the method <code>executeBatch</code>.\n <P>\n\n @param sql typically this is a SQL <code>INSERT</code> or \n <code>UPDATE</code> statement\n @exception SQLException if a database access error occurs, \n this method is called on a closed <code>Statement</code> or the\n driver does not support batch updates\n @see #executeBatch\n @see DatabaseMetaData#supportsBatchUpdates\n @since 1.2\n"
14128,method,java/sql/Statement/clearBatch/," Empties this <code>Statement</code> object's current list of \n SQL commands.\n <P>\n @exception SQLException if a database access error occurs, \n  this method is called on a closed <code>Statement</code> or the\n driver does not support batch updates\n @see #addBatch    \n @see DatabaseMetaData#supportsBatchUpdates\n @since 1.2\n"
14130,method,java/sql/Statement/getConnection/," Retrieves the <code>Connection</code> object\n that produced this <code>Statement</code> object.\n @return the connection that produced this statement\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @since 1.2\n"
14132,method,java/sql/Statement/getGeneratedKeys/," Retrieves any auto-generated keys created as a result of executing this\n <code>Statement</code> object. If this <code>Statement</code> object did \n not generate any keys, an empty <code>ResultSet</code>\n object is returned.\n\n<p><B>Note:</B>If the columns which represent the auto-generated keys were not specified,\n the JDBC driver implementation will determine the columns which best represent the auto-generated keys.\n\n @return a <code>ResultSet</code> object containing the auto-generated key(s) \n         generated by the execution of this <code>Statement</code> object\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.4\n"
14133,method,java/sql/Statement/executeUpdate/String;int," Executes the given SQL statement and signals the driver with the\n given flag about whether the\n auto-generated keys produced by this <code>Statement</code> object\n should be made available for retrieval.  The driver will ignore the \n flag if the SQL statement\n is not an <code>INSERT</code> statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n\n @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n <code>DELETE</code>; or an SQL statement that returns nothing, \n such as a DDL statement.\n\n @param autoGeneratedKeys a flag indicating whether auto-generated keys\n        should be made available for retrieval;\n         one of the following constants:\n         <code>Statement.RETURN_GENERATED_KEYS</code>\n         <code>Statement.NO_GENERATED_KEYS</code>\n @return either (1) the row count for SQL Data Manipulation Language (DML) statements\n         or (2) 0 for SQL statements that return nothing\n\n @exception SQLException if a database access error occurs,\n  this method is called on a closed <code>Statement</code>, the given\n            SQL statement returns a <code>ResultSet</code> object, or\n            the given constant is not one of those allowed\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method with a constant of Statement.RETURN_GENERATED_KEYS\n @since 1.4\n"
14134,method,java/sql/Statement/executeUpdate/String;int[]," Executes the given SQL statement and signals the driver that the\n auto-generated keys indicated in the given array should be made available\n for retrieval.   This array contains the indexes of the columns in the \n target table that contain the auto-generated keys that should be made\n available. The driver will ignore the array if the SQL statement\n is not an <code>INSERT</code> statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n\n @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n <code>DELETE</code>; or an SQL statement that returns nothing, \n such as a DDL statement.\n\n @param columnIndexes an array of column indexes indicating the columns\n        that should be returned from the inserted row\n @return either (1) the row count for SQL Data Manipulation Language (DML) statements\n         or (2) 0 for SQL statements that return nothing\n\n @exception SQLException if a database access error occurs, \n this method is called on a closed <code>Statement</code>, the SQL\n            statement returns a <code>ResultSet</code> object, or the\n            second argument supplied to this method is not an <code>int</code> array\n            whose elements are valid column indexes \n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.4\n"
14135,method,java/sql/Statement/executeUpdate/String;String[]," Executes the given SQL statement and signals the driver that the\n auto-generated keys indicated in the given array should be made available\n for retrieval.   This array contains the names of the columns in the \n target table that contain the auto-generated keys that should be made\n available. The driver will ignore the array if the SQL statement\n is not an <code>INSERT</code> statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n\n @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n <code>DELETE</code>; or an SQL statement that returns nothing, \n such as a DDL statement.\n @param columnNames an array of the names of the columns that should be \n        returned from the inserted row\n @return either the row count for <code>INSERT</code>, <code>UPDATE</code>,\n         or <code>DELETE</code> statements, or 0 for SQL statements \n         that return nothing\n @exception SQLException if a database access error occurs, \n  this method is called on a closed <code>Statement</code>, the SQL\n            statement returns a <code>ResultSet</code> object, or the\n            second argument supplied to this method is not a <code>String</code> array\n            whose elements are valid column names\n\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.4\n"
14139,method,java/sql/Statement/getResultSetHoldability/," Retrieves the result set holdability for <code>ResultSet</code> objects\n generated by this <code>Statement</code> object.\n\n @return either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>Statement</code>\n\n @since 1.4\n"
14140,method,java/sql/Statement/isClosed/," Retrieves whether this <code>Statement</code> object has been closed. A <code>Statement</code> is closed if the\n method close has been called on it, or if it is automatically closed.\n @return true if this <code>Statement</code> object is closed; false if it is still open\n @throws SQLException if a database access error occurs\n @since 1.6\n"
14141,method,java/sql/Statement/setPoolable/boolean," Requests that a <code>Statement</code> be pooled or not pooled.  The value \n specified is a hint to the statement pool implementation indicating \n whether the applicaiton wants the statement to be pooled.  It is up to \n the statement pool manager as to whether the hint is used.\n <p>\n The poolable value of a statement is applicable to both internal \n statement caches implemented by the driver and external statement caches \n implemented by application servers and other applications.\n <p>\n By default, a <code>Statement</code> is not poolable when created, and \n a <code>PreparedStatement</code> and <code>CallableStatement</code> \n are poolable when created.\n <p>\n @param poolable		requests that the statement be pooled if true and\n 						that the statement not be pooled if false \n <p>\n @throws SQLException if this method is called on a closed \n <code>Statement</code>\n <p>\n @since 1.6\n"
14142,method,java/sql/Statement/isPoolable/," Returns a  value indicating whether the <code>Statement</code>\n is poolable or not.\n <p>\n @return		<code>true</code> if the <code>Statement</code> \n is poolable; <code>false</code> otherwise\n <p>\n @throws SQLException if this method is called on a closed \n <code>Statement</code>\n <p>\n @since 1.6\n <p>\n @see java.sql.Statement#setPoolable(boolean) setPoolable(boolean)\n"
14143,field,java/sql/Statement/CLOSE_CURRENT_RESULT,"\n The constant indicating that the current <code>ResultSet</code> object \n should be closed when calling <code>getMoreResults</code>.\n\n @since 1.4\n"
14144,field,java/sql/Statement/KEEP_CURRENT_RESULT," The constant indicating that the current <code>ResultSet</code> object\n should not be closed when calling <code>getMoreResults</code>.\n\n @since 1.4\n"
14145,field,java/sql/Statement/CLOSE_ALL_RESULTS," The constant indicating that all <code>ResultSet</code> objects that\n have previously been kept open should be closed when calling\n <code>getMoreResults</code>.\n\n @since 1.4\n"
14147,field,java/sql/Statement/EXECUTE_FAILED," The constant indicating that an error occured while executing a\n batch statement.\n\n @since 1.4\n"
14148,field,java/sql/Statement/RETURN_GENERATED_KEYS," The constant indicating that generated keys should be made \n available for retrieval.\n\n @since 1.4\n"
14149,field,java/sql/Statement/NO_GENERATED_KEYS," The constant indicating that generated keys should not be made \n available for retrieval.\n\n @since 1.4\n"
14150,interface,java/sql/Savepoint," The representation of a savepoint, which is a point within\n the current transaction that can be referenced from the \n <code>Connection.rollback</code> method. When a transaction\n is rolled back to a savepoint all changes made after that\n savepoint are undone.\n <p>\n Savepoints can be either named or unnamed. Unnamed savepoints\n are identified by an ID generated by the underlying data source.\n\n @since 1.4\n"
14155,method,java/sql/SQLXML/getBinaryStream/," Retrieves the XML value designated by this SQLXML instance as a stream.  \n The bytes of the input stream are interpreted according to appendix F of the XML 1.0 specification. \n The behavior of this method is the same as ResultSet.getBinaryStream()\n when the designated column of the ResultSet has a type java.sql.Types of SQLXML.\n <p>\n The SQL XML object becomes not readable when this method is called and\n may also become not writable depending on implementation.\n \n @return a stream containing the XML data.\n @throws SQLException if there is an error processing the XML value.\n   An exception is thrown if the state is not readable.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14156,method,java/sql/SQLXML/setBinaryStream/," Retrieves a stream that can be used to write the XML value that this SQLXML instance represents. \n The stream begins at position 0. \n The bytes of the stream are interpreted according to appendix F of the XML 1.0 specification\n The behavior of this method is the same as ResultSet.updateBinaryStream()\n when the designated column of the ResultSet has a type java.sql.Types of SQLXML.\n <p>\n The SQL XML object becomes not writeable when this method is called and\n may also become not readable depending on implementation.\n \n @return a stream to which data can be written.\n @throws SQLException if there is an error processing the XML value.\n   An exception is thrown if the state is not writable.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14157,method,java/sql/SQLXML/getCharacterStream/," Retrieves the XML value designated by this SQLXML instance as a java.io.Reader object.\n The format of this stream is defined by org.xml.sax.InputSource,\n where the characters in the stream represent the unicode code points for  \n XML according to section 2 and appendix B of the XML 1.0 specification.\n Although an encoding declaration other than unicode may be present, \n the encoding of the stream is unicode.\n The behavior of this method is the same as ResultSet.getCharacterStream()\n when the designated column of the ResultSet has a type java.sql.Types of SQLXML.\n <p>\n The SQL XML object becomes not readable when this method is called and\n may also become not writable depending on implementation.\n \n @return a stream containing the XML data.\n @throws SQLException if there is an error processing the XML value.\n   The getCause() method of the exception may provide a more detailed exception, for example,\n   if the stream does not contain valid characters. \n   An exception is thrown if the state is not readable.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14158,method,java/sql/SQLXML/setCharacterStream/," Retrieves a stream to be used to write the XML value that this SQLXML instance represents.\n The format of this stream is defined by org.xml.sax.InputSource,\n where the characters in the stream represent the unicode code points for  \n XML according to section 2 and appendix B of the XML 1.0 specification.\n Although an encoding declaration other than unicode may be present, \n the encoding of the stream is unicode.\n The behavior of this method is the same as ResultSet.updateCharacterStream()\n when the designated column of the ResultSet has a type java.sql.Types of SQLXML.\n <p>\n The SQL XML object becomes not writeable when this method is called and\n may also become not readable depending on implementation.\n \n @return a stream to which data can be written.\n @throws SQLException if there is an error processing the XML value.\n   The getCause() method of the exception may provide a more detailed exception, for example,\n   if the stream does not contain valid characters. \n   An exception is thrown if the state is not writable.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14159,method,java/sql/SQLXML/getString/," Returns a string representation of the XML value designated by this SQLXML instance.\n The format of this String is defined by org.xml.sax.InputSource,\n where the characters in the stream represent the unicode code points for  \n XML according to section 2 and appendix B of the XML 1.0 specification.\n Although an encoding declaration other than unicode may be present, \n the encoding of the String is unicode.\n The behavior of this method is the same as ResultSet.getString()\n when the designated column of the ResultSet has a type java.sql.Types of SQLXML.\n <p>\n The SQL XML object becomes not readable when this method is called and\n may also become not writable depending on implementation.\n \n @return a string representation of the XML value designated by this SQLXML instance.\n @throws SQLException if there is an error processing the XML value.\n   The getCause() method of the exception may provide a more detailed exception, for example,\n   if the stream does not contain valid characters. \n   An exception is thrown if the state is not readable.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14160,method,java/sql/SQLXML/setString/String," Sets the XML value designated by this SQLXML instance to the given String representation. \n The format of this String is defined by org.xml.sax.InputSource,\n where the characters in the stream represent the unicode code points for  \n XML according to section 2 and appendix B of the XML 1.0 specification.\n Although an encoding declaration other than unicode may be present, \n the encoding of the String is unicode.\n The behavior of this method is the same as ResultSet.updateString()\n when the designated column of the ResultSet has a type java.sql.Types of SQLXML.\n <p>\n The SQL XML object becomes not writeable when this method is called and\n may also become not readable depending on implementation.\n \n @param value the XML value\n @throws SQLException if there is an error processing the XML value.\n   The getCause() method of the exception may provide a more detailed exception, for example,\n   if the stream does not contain valid characters. \n   An exception is thrown if the state is not writable.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14161,method,java/sql/SQLXML/getSource/Class," Returns a Source for reading the XML value designated by this SQLXML instance.\n Sources are used as inputs to XML parsers and XSLT transformers.\n <p>\n Sources for XML parsers will have namespace processing on by default.\n The systemID of the Source is implementation dependent.\n <p>\n The SQL XML object becomes not readable when this method is called and\n may also become not writable depending on implementation.\n <p>\n Note that SAX is a callback architecture, so a returned\n SAXSource should then be set with a content handler that will\n receive the SAX events from parsing.  The content handler\n will receive callbacks based on the contents of the XML.\n <pre>\n   SAXSource saxSource = sqlxml.getSource(SAXSource.class);\n   XMLReader xmlReader = saxSource.getXMLReader();\n   xmlReader.setContentHandler(myHandler);\n   xmlReader.parse(saxSource.getInputSource());\n </pre>\n \n @param sourceClass The class of the source, or null.  \n If the class is null, a vendor specifc Source implementation will be returned.\n The following classes are supported at a minimum:\n <pre>\n   javax.xml.transform.dom.DOMSource - returns a DOMSource\n   javax.xml.transform.sax.SAXSource - returns a SAXSource\n   javax.xml.transform.stax.StAXSource - returns a StAXSource\n   javax.xml.transform.stream.StreamSource - returns a StreamSource\n </pre>\n @return a Source for reading the XML value.\n @throws SQLException if there is an error processing the XML value\n   or if this feature is not supported.\n   The getCause() method of the exception may provide a more detailed exception, for example,\n   if an XML parser exception occurs. \n   An exception is thrown if the state is not readable.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14162,method,java/sql/SQLXML/setResult/Class," Returns a Result for setting the XML value designated by this SQLXML instance.\n <p>\n The systemID of the Result is implementation dependent.\n <p>\n The SQL XML object becomes not writeable when this method is called and\n may also become not readable depending on implementation.\n <p>\n Note that SAX is a callback architecture and the returned\n SAXResult has a content handler assigned that will receive the \n SAX events based on the contents of the XML.  Call the content\n handler with the contents of the XML document to assign the values.\n <pre>\n   SAXResult saxResult = sqlxml.setResult(SAXResult.class);\n   ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler();\n   contentHandler.startDocument();\n   // set the XML elements and attributes into the result\n   contentHandler.endDocument();\n </pre>\n \n @param resultClass The class of the result, or null.  \n If resultClass is null, a vendor specific Result implementation will be returned.\n The following classes are supported at a minimum:\n <pre>\n   javax.xml.transform.dom.DOMResult - returns a DOMResult\n   javax.xml.transform.sax.SAXResult - returns a SAXResult\n   javax.xml.transform.stax.StAXResult - returns a StAXResult\n   javax.xml.transform.stream.StreamResult - returns a StreamResult\n </pre>\n @return Returns a Result for setting the XML value.\n @throws SQLException if there is an error processing the XML value\n   or if this feature is not supported.\n   The getCause() method of the exception may provide a more detailed exception, for example,\n   if an XML parser exception occurs. \n   An exception is thrown if the state is not writable.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14163,class,java/sql/SQLWarning," <P>An exception that provides information on  database access\n warnings. Warnings are silently chained to the object whose method\n caused it to be reported.  \n <P>\n Warnings may be retrieved from <code>Connection</code>, <code>Statement</code>,\n and <code>ResultSet</code> objects.  Trying to retrieve a warning on a\n connection after it has been closed will cause an exception to be thrown.\n Similarly, trying to retrieve a warning on a statement after it has been\n closed or on a result set after it has been closed will cause \n an exception to be thrown. Note that closing a statement also \n closes a result set that it might have produced.\n\n @see Connection#getWarnings\n @see Statement#getWarnings\n @see ResultSet#getWarnings \n"
14164,method,java/sql/SQLWarning/getNextWarning/," Retrieves the warning chained to this <code>SQLWarning</code> object by\n <code>setNextWarning</code>.\n\n @return the next <code>SQLException</code> in the chain; <code>null</code> if none\n @see #setNextWarning\n"
14166,method,java/sql/SQLWarning/SQLWarning/String;String;int," Constructs a  <code>SQLWarning</code> object\n  with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the warning \n @param SQLState an XOPEN or SQL:2003 code identifying the warning\n @param vendorCode a database vendor-specific warning code\n"
14167,method,java/sql/SQLWarning/SQLWarning/String;String," Constructs a <code>SQLWarning</code> object\n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the warning \n @param SQLState an XOPEN or SQL:2003 code identifying the warning\n"
14168,method,java/sql/SQLWarning/SQLWarning/String," Constructs a <code>SQLWarning</code> object\n with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the warning \n"
14169,method,java/sql/SQLWarning/SQLWarning/," Constructs a  <code>SQLWarning</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n"
14170,method,java/sql/SQLWarning/SQLWarning/Throwable," Constructs a <code>SQLWarning</code> object\n with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLWarning</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n"
14171,method,java/sql/SQLWarning/SQLWarning/String;Throwable," Constructs a <code>SQLWarning</code> object\n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the warning\n @param cause  the underlying reason for this <code>SQLWarning</code> \n (which is saved for later retrieval by the <code>getCause()</code> method);\n may be null indicating the cause is non-existent or unknown.\n"
14172,method,java/sql/SQLWarning/SQLWarning/String;String;Throwable," Constructs a <code>SQLWarning</code> object\n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>\n @param reason a description of the warning\n @param SQLState an XOPEN or SQL:2003 code identifying the warning\n @param cause the underlying reason for this <code>SQLWarning</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n"
14173,method,java/sql/SQLWarning/SQLWarning/String;String;int;Throwable," Constructs a<code>SQLWarning</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the warning\n @param SQLState an XOPEN or SQL:2003 code identifying the warning\n @param vendorCode a database vendor-specific warning code\n @param cause the underlying reason for this <code>SQLWarning</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n"
14174,class,java/sql/SQLTransientException," The subclass of {@link SQLException} is thrown in situations where a\n previoulsy failed operation might be able to succeed when the operation is\n retried without any intervention by application-level functionality.\n<p>\n\n @since 1.6\n"
14175,method,java/sql/SQLTransientException/SQLTransientException/," Constructs a <code>SQLTransientException</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14176,method,java/sql/SQLTransientException/SQLTransientException/String," Constructs a <code>SQLTransientException</code> object \n  with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14177,method,java/sql/SQLTransientException/SQLTransientException/String;String," Constructs a <code>SQLTransientException</code> object \n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14178,method,java/sql/SQLTransientException/SQLTransientException/String;String;int," Constructs a <code>SQLTransientException</code> object\n  with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14179,method,java/sql/SQLTransientException/SQLTransientException/Throwable," Constructs a <code>SQLTransientException</code> object \n with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14180,method,java/sql/SQLTransientException/SQLTransientException/String;Throwable," Constructs a <code>SQLTransientException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14181,method,java/sql/SQLTransientException/SQLTransientException/String;String;Throwable," Constructs a <code>SQLTransientException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14182,method,java/sql/SQLTransientException/SQLTransientException/String;String;int;Throwable,"  Constructs a <code>SQLTransientException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14183,class,java/sql/SQLTransientConnectionException," The subclass of {@link SQLException} for the SQLState class \n value '<i>08</i>', representing\n that the connection operation that failed might be able to succeed when\n the operation is retried without any application-level changes.\n<p>\n \n @since 1.6\n"
14184,method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/," Constructs a <code>SQLTransientConnectionException</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14185,method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String," Constructs a <code>SQLTransientConnectionException</code> object \n with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14186,method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String;String," Constructs a <code>SQLTransientConnectionException</code> object \n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14187,method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String;String;int," Constructs a <code>SQLTransientConnectionException</code> object\n with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14188,method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/Throwable," Constructs a <code>SQLTransientConnectionException</code> object \n with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14189,method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String;Throwable," Constructs a <code>SQLTransientConnectionException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code>(which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14190,method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String;String;Throwable," Constructs a <code>SQLTransientConnectionException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14191,method,java/sql/SQLTransientConnectionException/SQLTransientConnectionException/String;String;int;Throwable,"  Constructs a <code>SQLTransientConnectionException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14192,class,java/sql/SQLTransactionRollbackException," The subclass of {@link SQLException} thrown when the SQLState class value is '<i>40</i>'. This indicates that the\n current statement was automatically rolled back by the database becuase of deadlock or other\n transaction serialization failures.\n \n @since 1.6\n"
14193,method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/," Constructs a <code>SQLTransactionRollbackException</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14194,method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String," Constructs a <code>SQLTransactionRollbackException</code> object \n with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14195,method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String;String," Constructs a <code>SQLTransactionRollbackException</code> object \n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14196,method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String;String;int," Constructs a <code>SQLTransactionRollbackException</code> object\n with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14197,method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/Throwable," Constructs a <code>SQLTransactionRollbackException</code> object \n with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14198,method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String;Throwable," Constructs a <code>SQLTransactionRollbackException</code> object\n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14199,method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String;String;Throwable," Constructs a <code>SQLTransactionRollbackException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14200,method,java/sql/SQLTransactionRollbackException/SQLTransactionRollbackException/String;String;int;Throwable,"  Constructs a <code>SQLTransactionRollbackException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14201,class,java/sql/SQLTimeoutException," <P>The subclass of {@link SQLException} thrown when the timeout specified by <code>Statement</code>\n  has expired.\n <P> This exception does not correspond to a standard SQLState.\n \n @since 1.6 \n"
14202,method,java/sql/SQLTimeoutException/SQLTimeoutException/," Constructs a <code>SQLTimeoutException</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14203,method,java/sql/SQLTimeoutException/SQLTimeoutException/String," Constructs a <code>SQLTimeoutException</code> object \n with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14204,method,java/sql/SQLTimeoutException/SQLTimeoutException/String;String," Constructs a <code>SQLTimeoutException</code> object\n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14205,method,java/sql/SQLTimeoutException/SQLTimeoutException/String;String;int," Constructs a <code>SQLTimeoutException</code> object\n with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14206,method,java/sql/SQLTimeoutException/SQLTimeoutException/Throwable," Constructs a <code>SQLTimeoutException</code> object \n with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14207,method,java/sql/SQLTimeoutException/SQLTimeoutException/String;Throwable," Constructs a <code>SQLTimeoutException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14208,method,java/sql/SQLTimeoutException/SQLTimeoutException/String;String;Throwable," Constructs a <code>SQLTimeoutException</code> object \n  with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14209,method,java/sql/SQLTimeoutException/SQLTimeoutException/String;String;int;Throwable,"  Constructs a <code>SQLTimeoutException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14210,class,java/sql/SQLSyntaxErrorException," The subclass of {@link SQLException} thrown when the SQLState class value is '<i>42</i>'. This indicates that the\n in-progress query has violated SQL syntax rules.\n  \n @since 1.6\n"
14211,method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/," Constructs a <code>SQLSyntaxErrorException</code> object.\n  The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14212,method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String," Constructs a <code>SQLSyntaxErrorException</code> object \n with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14213,method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String;String," Constructs a <code>SQLSyntaxErrorException</code> object\n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14214,method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String;String;int," Constructs a <code>SQLSyntaxErrorException</code> object\n  with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14215,method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/Throwable," Constructs a <code>SQLSyntaxErrorException</code> object \n   with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval bythe <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14216,method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String;Throwable," Constructs a <code>SQLSyntaxErrorException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14217,method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String;String;Throwable," Constructs a <code>SQLSyntaxErrorException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14218,method,java/sql/SQLSyntaxErrorException/SQLSyntaxErrorException/String;String;int;Throwable,"  Constructs a <code>SQLSyntaxErrorException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14220,method,java/sql/SQLRecoverableException/SQLRecoverableException/," Constructs a <code>SQLRecoverableException</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14221,method,java/sql/SQLRecoverableException/SQLRecoverableException/String," Constructs a <code>SQLRecoverableException</code> object \n  with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14222,method,java/sql/SQLRecoverableException/SQLRecoverableException/String;String," Constructs a <code>SQLRecoverableException</code> object \n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14223,method,java/sql/SQLRecoverableException/SQLRecoverableException/String;String;int," Constructs a <code>SQLRecoverableException</code> object\n  with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14224,method,java/sql/SQLRecoverableException/SQLRecoverableException/Throwable," Constructs a <code>SQLRecoverableException</code> object \n with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14225,method,java/sql/SQLRecoverableException/SQLRecoverableException/String;Throwable," Constructs a <code>SQLRecoverableException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14226,method,java/sql/SQLRecoverableException/SQLRecoverableException/String;String;Throwable," Constructs a <code>SQLRecoverableException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14227,method,java/sql/SQLRecoverableException/SQLRecoverableException/String;String;int;Throwable,"  Constructs a <code>SQLRecoverableException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14228,class,java/sql/SQLPermission," The permission for which the <code>SecurityManager</code> will check\n when code that is running in an applet calls the \n <code>DriverManager.setLogWriter</code> method or the\n <code>DriverManager.setLogStream</code> (deprecated) method.\n If there is no <code>SQLPermission</code> object, these methods\n throw a <code>java.lang.SecurityException</code> as a runtime exception.\n <P> \n A <code>SQLPermission</code> object contains\n a name (also referred to as a "target name") but no actions\n list; there is either a named permission or there is not.\n The target name is the name of the permission (see below). The\n naming convention follows the  hierarchical property naming convention.\n In addition, an asterisk\n may appear at the end of the name, following a ".", or by itself, to\n signify a wildcard match. For example: <code>loadLibrary.*</code>\n or <code>*</code> is valid,\n but <code>*loadLibrary</code> or <code>a*b</code> is not valid.\n <P>\n The following table lists all the possible <code>SQLPermission</code> target names.\n Currently, the only name allowed is <code>setLog</code>.\n The table gives a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n <P>\n\n <table border=1 cellpadding=5 summary="permission target name, what the permission allows, and associated risks">\n <tr>\n <th>Permission Target Name</th>\n <th>What the Permission Allows</th>\n <th>Risks of Allowing this Permission</th>\n </tr>\n\n <tr>\n   <td>setLog</td>\n   <td>Setting of the logging stream</td>\n   <td>This is a dangerous permission to grant.\n The contents of the log may contain usernames and passwords,\n SQL statements, and SQL data.</td>\n </tr>\n \n </table>\n\n The person running an applet decides what permissions to allow\n and will run the <code>Policy Tool</code> to create an\n <code>SQLPermission</code> in a policy file.  A programmer does\n not use a constructor directly to create an instance of <code>SQLPermission</code>\n but rather uses a tool.\n @since 1.3\n @see java.security.BasicPermission\n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n @see java.lang.SecurityManager\n\n"
14232,method,java/sql/SQLOutput/writeString/String," Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14233,method,java/sql/SQLOutput/writeBoolean/boolean," Writes the next attribute to the stream as a Java boolean.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14234,method,java/sql/SQLOutput/writeByte/byte," Writes the next attribute to the stream as a Java byte.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14235,method,java/sql/SQLOutput/writeShort/short," Writes the next attribute to the stream as a Java short.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14236,method,java/sql/SQLOutput/writeInt/int," Writes the next attribute to the stream as a Java int.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14237,method,java/sql/SQLOutput/writeLong/long," Writes the next attribute to the stream as a Java long.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14238,method,java/sql/SQLOutput/writeFloat/float," Writes the next attribute to the stream as a Java float.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14239,method,java/sql/SQLOutput/writeDouble/double," Writes the next attribute to the stream as a Java double.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14240,method,java/sql/SQLOutput/writeBigDecimal/BigDecimal," Writes the next attribute to the stream as a java.math.BigDecimal object.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14241,method,java/sql/SQLOutput/writeBytes/byte[]," Writes the next attribute to the stream as an array of bytes.\n Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14242,method,java/sql/SQLOutput/writeDate/Date," Writes the next attribute to the stream as a java.sql.Date object.\n Writes the next attribute to the stream as a <code>java.sql.Date</code> object\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14243,method,java/sql/SQLOutput/writeTime/Time," Writes the next attribute to the stream as a java.sql.Time object.\n Writes the next attribute to the stream as a <code>java.sql.Date</code> object\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14244,method,java/sql/SQLOutput/writeTimestamp/Timestamp," Writes the next attribute to the stream as a java.sql.Timestamp object.\n Writes the next attribute to the stream as a <code>java.sql.Date</code> object\n in the Java programming language.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14245,method,java/sql/SQLOutput/writeCharacterStream/Reader," Writes the next attribute to the stream as a stream of Unicode characters.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14246,method,java/sql/SQLOutput/writeAsciiStream/InputStream," Writes the next attribute to the stream as a stream of ASCII characters.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14247,method,java/sql/SQLOutput/writeBinaryStream/InputStream," Writes the next attribute to the stream as a stream of uninterpreted\n bytes.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14249,method,java/sql/SQLOutput/writeRef/Ref," Writes an SQL <code>REF</code> value to the stream.\n\n @param x a <code>Ref</code> object representing data of an SQL\n <code>REF</code> value\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14250,method,java/sql/SQLOutput/writeBlob/Blob," Writes an SQL <code>BLOB</code> value to the stream.\n\n @param x a <code>Blob</code> object representing data of an SQL\n <code>BLOB</code> value\n\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14251,method,java/sql/SQLOutput/writeClob/Clob," Writes an SQL <code>CLOB</code> value to the stream.\n\n @param x a <code>Clob</code> object representing data of an SQL\n <code>CLOB</code> value\n\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14252,method,java/sql/SQLOutput/writeStruct/Struct," Writes an SQL structured type value to the stream.\n\n @param x a <code>Struct</code> object representing data of an SQL\n structured type \n\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14253,method,java/sql/SQLOutput/writeArray/Array," Writes an SQL <code>ARRAY</code> value to the stream.\n\n @param x an <code>Array</code> object representing data of an SQL\n <code>ARRAY</code> type\n\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14254,method,java/sql/SQLOutput/writeURL/URL,"\n Writes a SQL <code>DATALINK</code> value to the stream.\n\n @param x a <code>java.net.URL</code> object representing the data\n of SQL DATALINK type\n\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14255,method,java/sql/SQLOutput/writeNString/String," Writes the next attribute to the stream as a <code>String</code>\n in the Java programming language. The driver converts this to a\n SQL <code>NCHAR</code> or\n <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n (depending on the argument's\n size relative to the driver's limits on <code>NVARCHAR</code> values)\n when it sends it to the stream.\n\n @param x the value to pass to the database\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14256,method,java/sql/SQLOutput/writeNClob/NClob," Writes an SQL <code>NCLOB</code> value to the stream.\n\n @param x a <code>NClob</code> object representing data of an SQL\n <code>NCLOB</code> value\n\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14257,method,java/sql/SQLOutput/writeRowId/RowId," Writes an SQL <code>ROWID</code> value to the stream.\n\n @param x a <code>RowId</code> object representing data of an SQL\n <code>ROWID</code> value\n\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14258,method,java/sql/SQLOutput/writeSQLXML/SQLXML," Writes an SQL <code>XML</code> value to the stream.\n\n @param x a <code>SQLXML</code> object representing data of an SQL\n <code>XML</code> value\n\n @throws SQLException if a database access error occurs, \n the <code>java.xml.transform.Result</code>,\n  <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object or\n  if there is an error processing the XML value.  The <code>getCause</code> method \n  of the exception may provide a more detailed exception, for example, if the \n  stream does not contain valid XML.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14259,class,java/sql/SQLNonTransientException," The subclass of {@link SQLException} thrown when an instance where a retry\n of the same operation would fail unless the cause of the <code>SQLException</code>\n is corrected.\n<p>\n  \n @since 1.6\n"
14260,method,java/sql/SQLNonTransientException/SQLNonTransientException/," Constructs a <code>SQLNonTransientException</code> object.\n  The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n\n @since 1.6\n"
14261,method,java/sql/SQLNonTransientException/SQLNonTransientException/String," Constructs a <code>SQLNonTransientException</code> object\n with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n \n @param reason a description of the exception\n @since 1.6\n"
14262,method,java/sql/SQLNonTransientException/SQLNonTransientException/String;String," Constructs a <code>SQLNonTransientException</code> object \n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14263,method,java/sql/SQLNonTransientException/SQLNonTransientException/String;String;int," Constructs a <code>SQLNonTransientException</code> object\n with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14264,method,java/sql/SQLNonTransientException/SQLNonTransientException/Throwable," Constructs a <code>SQLNonTransientException</code> object \n  with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14265,method,java/sql/SQLNonTransientException/SQLNonTransientException/String;Throwable," Constructs a <code>SQLTransientException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14266,method,java/sql/SQLNonTransientException/SQLNonTransientException/String;String;Throwable," Constructs a <code>SQLNonTransientException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>  \n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14267,method,java/sql/SQLNonTransientException/SQLNonTransientException/String;String;int;Throwable,"  Constructs a <code>SQLNonTransientException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14268,class,java/sql/SQLNonTransientConnectionException," <P> The subclass of {@link SQLException} thrown for the SQLState\n class value '<i>08</i>', representing \n that the connection operation that failed will not succeed when\n the operation is retried without the cause of the failure being corrected.\n <p>\n @since 1.6\n"
14269,method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/," Constructs a <code>SQLNonTransientConnectionException</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n\n @since 1.6\n"
14270,method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String," Constructs a <code>SQLNonTransientConnectionException</code> object\n  with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14271,method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String;String," Constructs a <code>SQLNonTransientConnectionException</code> object\n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14272,method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String;String;int," Constructs a <code>SQLNonTransientConnectionException</code> object\n with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14273,method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/Throwable," Constructs a <code>SQLNonTransientConnectionException</code> object\n with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14274,method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String;Throwable," Constructs a <code>SQLTransientException</code> object\n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14275,method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String;String;Throwable," Constructs a <code>SQLNonTransientConnectionException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>  \n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14276,method,java/sql/SQLNonTransientConnectionException/SQLNonTransientConnectionException/String;String;int;Throwable,"  Constructs a <code>SQLNonTransientConnectionException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14277,class,java/sql/SQLInvalidAuthorizationSpecException," The subclass of {@link SQLException} thrown when the SQLState class value is '<i>28</i>'. This indicated that the\n authorization credentials presented during connection establishment are not valid.\n  \n @since 1.6\n"
14278,method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/," Constructs a <code>SQLInvalidAuthorizationSpecException</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14279,method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/String," Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n  with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14280,method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/String;String," Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14281,method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/String;String;int," Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14282,method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/Throwable," Constructs a <code>SQLInvalidAuthorizationSpecException</code> object \n with a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14283,method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/String;Throwable," Constructs a <code>SQLInvalidAuthorizationSpecException</code> object \n  with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14284,method,java/sql/SQLInvalidAuthorizationSpecException/SQLInvalidAuthorizationSpecException/String;String;Throwable," Constructs a <code>SQLInvalidAuthorizationSpecException</code> object \n  with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>  \n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code>  method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14286,class,java/sql/SQLIntegrityConstraintViolationException," The subclass of {@link SQLException} thrown when the SQLState class value is '<i>23</i>'. This indicates that an integrity\n constraint (foreign key, primary key or unique key) has been violated.\n   \n @since 1.6	\n"
14287,method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/," Constructs a <code>SQLIntegrityConstraintViolationException</code> object.\n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14288,method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String," Constructs a <code>SQLIntegrityConstraintViolationException</code>\n  with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14289,method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;String," Constructs a <code>SQLIntegrityConstraintViolationException</code> \n object with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14290,method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;String;int," Constructs a <code>SQLIntegrityConstraintViolationException</code> object\n with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14291,method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/Throwable," Constructs an <code>SQLIntegrityConstraintViolationException</code> object with\n  a given  <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code>  method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14292,method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;Throwable," Constructs a <code>SQLIntegrityConstraintViolationException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14293,method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;String;Throwable," Constructs a <code>SQLIntegrityConstraintViolationException</code> object\n  with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>  \n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code>  method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14294,method,java/sql/SQLIntegrityConstraintViolationException/SQLIntegrityConstraintViolationException/String;String;int;Throwable,"  Constructs a <code>SQLIntegrityConstraintViolationException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14296,method,java/sql/SQLInput/readString/," Reads the next attribute in the stream and returns it as a <code>String</code> \n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14297,method,java/sql/SQLInput/readBoolean/," Reads the next attribute in the stream and returns it as a <code>boolean</code> \n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>false</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14298,method,java/sql/SQLInput/readByte/," Reads the next attribute in the stream and returns it as a <code>byte</code> \n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14299,method,java/sql/SQLInput/readShort/," Reads the next attribute in the stream and returns it as a <code>short</code> \n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14300,method,java/sql/SQLInput/readInt/," Reads the next attribute in the stream and returns it as an <code>int</code> \n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14301,method,java/sql/SQLInput/readLong/," Reads the next attribute in the stream and returns it as a <code>long</code> \n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14302,method,java/sql/SQLInput/readFloat/," Reads the next attribute in the stream and returns it as a <code>float</code> \n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14303,method,java/sql/SQLInput/readDouble/," Reads the next attribute in the stream and returns it as a <code>double</code> \n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14304,method,java/sql/SQLInput/readBigDecimal/," Reads the next attribute in the stream and returns it as a <code>java.math.BigDecimal</code> \n object in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14305,method,java/sql/SQLInput/readBytes/," Reads the next attribute in the stream and returns it as an array of bytes\n in the Java programming language.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14306,method,java/sql/SQLInput/readDate/," Reads the next attribute in the stream and returns it as a <code>java.sql.Date</code> object.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14307,method,java/sql/SQLInput/readTime/," Reads the next attribute in the stream and returns it as a <code>java.sql.Time</code> object.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14308,method,java/sql/SQLInput/readTimestamp/," Reads the next attribute in the stream and returns it as a <code>java.sql.Timestamp</code> object.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14309,method,java/sql/SQLInput/readCharacterStream/," Reads the next attribute in the stream and returns it as a stream of Unicode characters.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14310,method,java/sql/SQLInput/readAsciiStream/," Reads the next attribute in the stream and returns it as a stream of ASCII characters.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14311,method,java/sql/SQLInput/readBinaryStream/," Reads the next attribute in the stream and returns it as a stream of uninterpreted\n bytes.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14312,method,java/sql/SQLInput/readObject/," Reads the datum at the head of the stream and returns it as an\n <code>Object</code> in the Java programming language.  The\n actual type of the object returned is determined by the default type\n mapping, and any customizations present in this stream's type map.\n\n <P>A type map is registered with the stream by the JDBC driver before the\n stream is passed to the application.\n\n <P>When the datum at the head of the stream is an SQL <code>NULL</code>, \n the method returns <code>null</code>.  If the datum is an SQL structured or distinct\n type, it determines the SQL type of the datum at the head of the stream. \n If the stream's type map has an entry for that SQL type, the driver\n constructs an object of the appropriate class and calls the method \n <code>SQLData.readSQL</code> on that object, which reads additional data from the \n stream, using the protocol described for that method.\n\n @return the datum at the head of the stream as an <code>Object</code> in the\n Java programming language;<code>null</code> if the datum is SQL <code>NULL</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14313,method,java/sql/SQLInput/readRef/," Reads an SQL <code>REF</code> value from the stream and returns it as a\n <code>Ref</code> object in the Java programming language.\n\n @return a <code>Ref</code> object representing the SQL <code>REF</code> value\n at the head of the stream; <code>null</code> if the value read is \n SQL <code>NULL</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14314,method,java/sql/SQLInput/readBlob/," Reads an SQL <code>BLOB</code> value from the stream and returns it as a\n <code>Blob</code> object in the Java programming language.\n\n @return a <code>Blob</code> object representing data of the SQL <code>BLOB</code> value\n at the head of the stream; <code>null</code> if the value read is \n SQL <code>NULL</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14315,method,java/sql/SQLInput/readClob/," Reads an SQL <code>CLOB</code> value from the stream and returns it as a\n <code>Clob</code> object in the Java programming language.\n\n @return a <code>Clob</code> object representing data of the SQL <code>CLOB</code> value\n at the head of the stream; <code>null</code> if the value read is \n SQL <code>NULL</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14316,method,java/sql/SQLInput/readArray/," Reads an SQL <code>ARRAY</code> value from the stream and returns it as an\n <code>Array</code> object in the Java programming language.\n\n @return an <code>Array</code> object representing data of the SQL\n <code>ARRAY</code> value at the head of the stream; <code>null</code>\n if the value read is SQL <code>NULL</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14317,method,java/sql/SQLInput/wasNull/," Retrieves whether the last value read was SQL <code>NULL</code>.\n \n @return <code>true</code> if the most recently read SQL value was SQL\n <code>NULL</code>; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14318,method,java/sql/SQLInput/readURL/," Reads an SQL <code>DATALINK</code> value from the stream and returns it as a\n <code>java.net.URL</code> object in the Java programming language.\n \n @return a <code>java.net.URL</code> object.\n @exception SQLException if a database access error occurs,\n            or if a URL is malformed\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14319,method,java/sql/SQLInput/readNClob/," Reads an SQL <code>NCLOB</code> value from the stream and returns it as a\n <code>NClob</code> object in the Java programming language.\n\n @return a <code>NClob</code> object representing data of the SQL <code>NCLOB</code> value\n at the head of the stream; <code>null</code> if the value read is \n SQL <code>NULL</code>\n @exception SQLException if a database access error occurs   \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14320,method,java/sql/SQLInput/readNString/," Reads the next attribute in the stream and returns it as a <code>String</code> \n in the Java programming language. It is intended for use when\n accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n\n @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>\n @exception SQLException if a database access error occurs   \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14321,method,java/sql/SQLInput/readSQLXML/," Reads an SQL <code>XML</code> value from the stream and returns it as a\n <code>SQLXML</code> object in the Java programming language.\n\n @return a <code>SQLXML</code> object representing data of the SQL <code>XML</code> value\n at the head of the stream; <code>null</code> if the value read is \n SQL <code>NULL</code>\n @exception SQLException if a database access error occurs   \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14322,method,java/sql/SQLInput/readRowId/," Reads an SQL <code>ROWID</code> value from the stream and returns it as a\n <code>RowId</code> object in the Java programming language.\n\n @return a <code>RowId</code> object representing data of the SQL <code>ROWID</code> value\n at the head of the stream; <code>null</code> if the value read is \n SQL <code>NULL</code>\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14323,class,java/sql/SQLFeatureNotSupportedException," The subclass of {@link SQLException} thrown when the SQLState class value is '<i>0A</i>'\n ( the value is 'zero' A). \n This indicates that the JDBC driver does not support an optional JDBC feature.\n Optional JDBC features can fall into the fallowing categories:\n<p>\n<UL>\n<LI>no support for an optional feature \n<LI>no support for an optional overloaded method\n<LI>no support for an optional mode for a method.  The mode for a method is \ndetermined based on constants passed as parameter values to a method\n</UL>\n  \n @since 1.6\n"
14324,method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/," Constructs a <code>SQLFeatureNotSupportedException</code> object.\n  The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @since 1.6\n"
14325,method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String," Constructs a <code>SQLFeatureNotSupportedException</code> object \n with a given <code>reason</code>. The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @since 1.6\n"
14326,method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String;String," Constructs a <code>SQLFeatureNotSupportedException</code> object\n with a given <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14327,method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String;String;int," Constructs a <code>SQLFeatureNotSupportedException</code> object\n  with a given <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14329,method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String;Throwable," Constructs a <code>SQLFeatureNotSupportedException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14330,method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String;String;Throwable," Constructs a <code>SQLFeatureNotSupportedException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14331,method,java/sql/SQLFeatureNotSupportedException/SQLFeatureNotSupportedException/String;String;int;Throwable,"  Constructs a <code>SQLFeatureNotSupportedException</code> object\n with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14332,class,java/sql/SQLException," <P>An exception that provides information on a database access\n error or other errors.\n\n <P>Each <code>SQLException</code> provides several kinds of information: \n <UL>\n   <LI> a string describing the error.  This is used as the Java Exception\n       message, available via the method <code>getMesasge</code>.\n   <LI> a "SQLstate" string, which follows either the XOPEN SQLstate conventions\n        or the SQL:2003 conventions.\n       The values of the SQLState string are described in the appropriate spec.\n       The <code>DatabaseMetaData</code> method <code>getSQLStateType</code>\n       can be used to discover whether the driver returns the XOPEN type or\n       the SQL:2003 type.\n   <LI> an integer error code that is specific to each vendor.  Normally this will\n	 be the actual error code returned by the underlying database.\n   <LI> a chain to a next Exception.  This can be used to provide additional\n 	 error information.\n   <LI> the causal relationship, if any for this <code>SQLException</code>.\n </UL>\n"
14334,method,java/sql/SQLException/getErrorCode/," Retrieves the vendor-specific exception code\n for this <code>SQLException</code> object.\n\n @return the vendor's error code\n"
14338,method,java/sql/SQLException/SQLException/String;String;int,"  Constructs a <code>SQLException</code> object with a given\n <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n"
14339,method,java/sql/SQLException/SQLException/String;String," Constructs a <code>SQLException</code> object with a given\n <code>reason</code> and <code>SQLState</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p>\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n"
14340,method,java/sql/SQLException/SQLException/String,"  Constructs a <code>SQLException</code> object with a given\n <code>reason</code>. The  <code>SQLState</code>  is initialized to\n <code>null</code> and the vender code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception \n"
14341,method,java/sql/SQLException/SQLException/," Constructs a <code>SQLException</code> object. \n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n"
14342,method,java/sql/SQLException/SQLException/Throwable,"  Constructs a <code>SQLException</code> object with a given\n <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> \n (which is saved for later retrieval by the <code>getCause()</code> method); \n may be null indicating the cause is non-existent or unknown.\n @since 1.6\n"
14343,method,java/sql/SQLException/SQLException/String;Throwable," Constructs a <code>SQLException</code> object with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>\n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> \n (which is saved for later retrieval by the <code>getCause()</code> method); \n may be null indicating the cause is non-existent or unknown.\n @since 1.6\n"
14344,method,java/sql/SQLException/SQLException/String;String;Throwable," Constructs a <code>SQLException</code> object with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>  \n @param reason a description of the exception. \n @param sqlState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code>\n (which is saved for later retrieval by the \n <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14345,method,java/sql/SQLException/SQLException/String;String;int;Throwable," Constructs a <code>SQLException</code> object with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p> \n @param reason a description of the exception \n @param sqlState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> \n (which is saved for later retrieval by the <code>getCause()</code> method); \n may be null indicating the cause is non-existent or unknown.\n @since 1.6\n"
14346,class,java/sql/SQLDataException," The subclass of {@link SQLException} thrown when the SQLState class value is '<i>22</i>'. This indicates\n various data errors, including but not limited to not-allowed conversion, division by 0\n and invalid arguments to functions.\n  \n @since 1.6\n"
14347,method,java/sql/SQLDataException/SQLDataException/," Constructs a <code>SQLDataException</code> object. \n The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to\n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n\n @since 1.6\n"
14348,method,java/sql/SQLDataException/SQLDataException/String," Constructs a <code>SQLDataException</code> object with a given\n <code>reason</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to\n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n\n @param reason a description of the exception\n @since 1.6\n"
14349,method,java/sql/SQLDataException/SQLDataException/String;String," Constructs a <code>SQLDataException</code> object with a given\n <code>reason</code> and <code>SQLState</code>. The\n vendor code is initialized to 0.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to\n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @since 1.6\n"
14350,method,java/sql/SQLDataException/SQLDataException/String;String;int," Constructs a <code>SQLDataException</code> object with a given\n <code>reason</code>, <code>SQLState</code>  and \n <code>vendorCode</code>.\n\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to\n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>  \n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor specific exception code\n @since 1.6\n"
14351,method,java/sql/SQLDataException/SQLDataException/Throwable," Constructs a <code>SQLDataException</code> object with a given\n <code>cause</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n <p>\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14352,method,java/sql/SQLDataException/SQLDataException/String;Throwable," Constructs a <code>SQLDataException</code> object with a given\n <code>reason</code> and  <code>cause</code>.  \n The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n <p>  \n @param reason a description of the exception. \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14353,method,java/sql/SQLDataException/SQLDataException/String;String;Throwable,"  Constructs a <code>SQLDataException</code> object with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n The vendor code is initialized to 0.\n <p>  \n @param reason a description of the exception. \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14354,method,java/sql/SQLDataException/SQLDataException/String;String;int;Throwable," Constructs a <code>SQLDataException</code> object with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n and  <code>cause</code>.  \n <p>  \n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode a database vendor-specific exception code\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n @since 1.6\n"
14355,interface,java/sql/SQLData," The interface used for the custom mapping of an SQL user-defined type (UDT) to\n a class in the Java programming language. The class object for a class\n implementing the <code>SQLData</code> interface will be entered in the\n appropriate <code>Connection</code> object's type map along with the SQL\n name of the UDT for which it is a custom mapping.\n <P>\n Typically, a <code>SQLData</code> implementation\n will define a field for each attribute of an SQL structured type or a\n single field for an SQL <code>DISTINCT</code> type. When the UDT is\n retrieved from a data source with the <code>ResultSet.getObject</code>\n method, it will be mapped as an instance of this class.  A programmer\n can operate on this class instance just as on any other object in the\n Java programming language and then store any changes made to it by\n calling the <code>PreparedStatement.setObject</code> method,\n which will map it back to the SQL type.\n <p>\n It is expected that the implementation of the class for a custom\n mapping will be done by a tool.  In a typical implementation, the\n programmer would simply supply the name of the SQL UDT, the name of\n the class to which it is being mapped, and the names of the fields to\n which each of the attributes of the UDT is to be mapped.  The tool will use\n this information to implement the <code>SQLData.readSQL</code> and\n <code>SQLData.writeSQL</code> methods.  The <code>readSQL</code> method\n calls the appropriate <code>SQLInput</code> methods to read\n each attribute from an <code>SQLInput</code> object, and the\n <code>writeSQL</code> method calls <code>SQLOutput</code> methods\n to write each attribute back to the data source via an\n <code>SQLOutput</code> object.\n <P>\n An application programmer will not normally call <code>SQLData</code> methods\n directly, and the <code>SQLInput</code> and <code>SQLOutput</code> methods\n are called internally by <code>SQLData</code> methods, not by application code.\n \n @since 1.2\n"
14356,method,java/sql/SQLData/getSQLTypeName/,"\n Returns the fully-qualified \n name of the SQL user-defined type that this object represents.\n This method is called by the JDBC driver to get the name of the\n UDT instance that is being mapped to this instance of \n <code>SQLData</code>.\n\n @return the type name that was passed to the method <code>readSQL</code>\n            when this object was constructed and populated\n @exception SQLException if there is a database access error\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14359,class,java/sql/SQLClientInfoException," The subclass of {@link SQLException} is thrown when one or more client info properties\n could not be set on a <code>Connection</code>.  In addition to the information provided\n by <code>SQLException</code>, a <code>SQLClientInfoException</code> provides a list of client info\n properties that were not set.\n \n Some databases do not allow multiple client info properties to be set \n atomically.  For those databases, it is possible that some of the client\n info properties had been set even though the <code>Connection.setClientInfo</code> \n method threw an exception.  An application can use the <code>getFailedProperties </code>\n method to retrieve a list of client info properties that were not set.  The\n properties are identified by passing a \n <code>Map&lt;String,ClientInfoStatus&gt;</code> to\n the appropriate <code>SQLClientInfoException</code> constructor.\n <p>\n @see ClientInfoStatus\n @see Connection#setClientInfo\n @since 1.6\n"
14361,method,java/sql/SQLClientInfoException/SQLClientInfoException/," Constructs a <code>SQLClientInfoException</code>  Object. \n The <code>reason</code>,\n <code>SQLState</code>, and failedProperties list are initialized to\n <code> null</code> and the vendor code is initialized to 0.\n The <code>cause</code> is not initialized, and may subsequently be \n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n \n @since 1.6\n"
14362,method,java/sql/SQLClientInfoException/SQLClientInfoException/Map," Constructs a <code>SQLClientInfoException</code> object initialized with a\n given <code>failedProperties</code>.\n The <code>reason</code> and <code>SQLState</code> are initialized \n to <code>null</code> and the vendor code is initialized to 0.\n \n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n \n @param failedProperties 		A Map containing the property values that could not \n 					be set.  The keys in the Map\n 					contain the names of the client info \n 					properties that could not be set and\n 					the values contain one of the reason codes\n 					defined in <code>ClientInfoStatus</code>\n <p>\n @since 1.6\n"
14363,method,java/sql/SQLClientInfoException/SQLClientInfoException/Map;Throwable," Constructs a <code>SQLClientInfoException</code> object initialized with \n a given <code>cause</code> and <code>failedProperties</code>. \n \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code> and the vendor code is initialized to 0.\n \n <p>\n \n @param failedProperties 		A Map containing the property values that could not \n 					be set.  The keys in the Map\n 					contain the names of the client info \n 					properties that could not be set and\n 					the values contain one of the reason codes\n 					defined in <code>ClientInfoStatus</code>\n @param cause					the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n <p>\n @since 1.6\n"
14364,method,java/sql/SQLClientInfoException/SQLClientInfoException/String;Map," Constructs a <code>SQLClientInfoException</code> object initialized with a\n given <code>reason</code> and <code>failedProperties</code>.\n The <code>SQLState</code> is initialized \n to <code>null</code> and the vendor code is initialized to 0.\n \n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n \n @param reason				a description of the exception\n @param failedProperties 		A Map containing the property values that could not \n 					be set.  The keys in the Map\n 					contain the names of the client info \n 					properties that could not be set and\n 					the values contain one of the reason codes\n 					defined in <code>ClientInfoStatus</code>\n <p>\n @since 1.6\n"
14365,method,java/sql/SQLClientInfoException/SQLClientInfoException/String;Map;Throwable," Constructs a <code>SQLClientInfoException</code> object initialized with a\n given <code>reason</code>, <code>cause</code> and \n <code>failedProperties</code>.\n The  <code>SQLState</code> is initialized \n to <code>null</code> and the vendor code is initialized to 0.\n <p>\n \n @param reason				a description of the exception\n @param failedProperties 		A Map containing the property values that could not \n 					be set.  The keys in the Map\n 					contain the names of the client info \n 					properties that could not be set and\n 					the values contain one of the reason codes\n 					defined in <code>ClientInfoStatus</code>\n @param cause					the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n <p>\n @since 1.6\n"
14366,method,java/sql/SQLClientInfoException/SQLClientInfoException/String;String;Map," Constructs a <code>SQLClientInfoException</code> object initialized with a\n given  <code>reason</code>, <code>SQLState</code>  and\n <code>failedProperties</code>.\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is initialized to 0.\n <p> \n \n @param reason				a description of the exception\n @param SQLState				an XOPEN or SQL:2003 code identifying the exception\n @param failedProperties 		A Map containing the property values that could not \n 					be set.  The keys in the Map\n 					contain the names of the client info \n 					properties that could not be set and\n 					the values contain one of the reason codes\n 					defined in <code>ClientInfoStatus</code>\n <p>\n @since 1.6\n"
14367,method,java/sql/SQLClientInfoException/SQLClientInfoException/String;String;Map;Throwable," Constructs a <code>SQLClientInfoException</code> object initialized with a\n given  <code>reason</code>, <code>SQLState</code>, <code>cause</code>\n and <code>failedProperties</code>.  The vendor code is initialized to 0.\n <p>\n \n @param reason				a description of the exception\n @param SQLState				an XOPEN or SQL:2003 code identifying the exception\n @param failedProperties 		A Map containing the property values that could not \n 					be set.  The keys in the Map\n 					contain the names of the client info \n 					properties that could not be set and\n 					the values contain one of the reason codes\n 					defined in <code>ClientInfoStatus</code>\n @param cause					the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n <p>\n @since 1.6\n"
14368,method,java/sql/SQLClientInfoException/SQLClientInfoException/String;String;int;Map," Constructs a <code>SQLClientInfoException</code> object initialized with a\n given  <code>reason</code>, <code>SQLState</code>, \n <code>vendorCode</code>  and <code>failedProperties</code>.\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p> \n \n @param reason				a description of the exception\n @param SQLState				an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode			a database vendor-specific exception code\n @param failedProperties 		A Map containing the property values that could not \n 					be set.  The keys in the Map\n 					contain the names of the client info \n 					properties that could not be set and\n 					the values contain one of the reason codes\n 					defined in <code>ClientInfoStatus</code>\n <p>\n @since 1.6\n"
14369,method,java/sql/SQLClientInfoException/SQLClientInfoException/String;String;int;Map;Throwable," Constructs a <code>SQLClientInfoException</code> object initialized with a\n given  <code>reason</code>, <code>SQLState</code>,\n <code>cause</code>, <code>vendorCode</code> and\n <code>failedProperties</code>.\n <p>\n \n @param reason				a description of the exception\n @param SQLState				an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode			a database vendor-specific exception code\n @param failedProperties 		A Map containing the property values that could not \n 					be set.  The keys in the Map\n 					contain the names of the client info \n 					properties that could not be set and\n 					the values contain one of the reason codes\n 					defined in <code>ClientInfoStatus</code>\n @param cause			the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n <p>\n @since 1.6\n"
14378,interface,java/sql/RowId," \n The representation (mapping) in the Java programming language of an SQL ROWID\n value. An SQL ROWID is a built-in type, a value of which can be thought of as\n an address  for its identified row in a database table. Whether that address\n is logical or, in any  respects, physical is determined by its originating data \n source.  \n <p>\n Methods in the interfaces <code>ResultSet</code>, <code>CallableStatement</code>,\n and <code>PreparedStatement</code>, such as <code>getRowId</code> and <code>setRowId</code>\n allow a programmer to access a SQL <code>ROWID</code>  value. The <code>RowId</code>\n interface provides a method \n for representing the value of the <code>ROWID</code> as a byte array or as a \n <code>String</code>. \n <p>\n The method <code>getRowIdLifetime</code> in the interface <code>DatabaseMetaData</code>,\n can be used \n to determine if a <code>RowId</code> object remains valid for the duration of the transaction in \n which  the <code>RowId</code> was created, the duration of the session in which \n the <code>RowId</code> was created,\n or, effectively, for as long as its identified row is not deleted. In addition\n to specifying the duration of its valid lifetime outside its originating data\n source, <code>getRowIdLifetime</code> specifies the duration of a <code>ROWID</code>\n value's valid lifetime \n within its originating data source. In this, it differs from a large object,\n because there is no limit on the valid lifetime of a large  object within its \n originating data source.  \n <p>\n All methods on the <code>RowId</code> interface must be fully implemented if the \n JDBC driver supports the data type.\n\n @see java.sql.DatabaseMetaData\n @since 1.6\n"
14379,method,java/sql/RowId/equals/Object," Compares this <code>RowId</code> to the specified object. The result is \n <code>true</code> if and only if the argument is not null and is a RowId \n object that represents the same ROWID as  this object. \n <p>\n It is important \n to consider both the origin and the valid lifetime of a <code>RowId</code>\n when comparing it to another <code>RowId</code>. If both are valid, and \n both are from the same table on the same data source, then if they are equal\n they identify \n the same row; if one or more is no longer guaranteed to be valid, or if \n they originate from different data sources, or different tables on the\n same data source, they  may be equal but still\n not identify the same row. \n \n @param obj the <code>Object</code> to compare this <code>RowId</code> object\n     against.\n @return true if the <code>RowId</code>s are equal; false otherwise\n @since 1.6\n"
14384,method,java/sql/ResultSetMetaData/getColumnCount/," Returns the number of columns in this <code>ResultSet</code> object.\n\n @return the number of columns\n @exception SQLException if a database access error occurs\n"
14385,method,java/sql/ResultSetMetaData/isAutoIncrement/int," Indicates whether the designated column is automatically numbered.\n\n @param column the first column is 1, the second is 2, ...\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14386,method,java/sql/ResultSetMetaData/isCaseSensitive/int," Indicates whether a column's case matters.\n\n @param column the first column is 1, the second is 2, ...\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14387,method,java/sql/ResultSetMetaData/isSearchable/int," Indicates whether the designated column can be used in a where clause.\n\n @param column the first column is 1, the second is 2, ...\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14388,method,java/sql/ResultSetMetaData/isCurrency/int," Indicates whether the designated column is a cash value.\n\n @param column the first column is 1, the second is 2, ...\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14389,method,java/sql/ResultSetMetaData/isNullable/int," Indicates the nullability of values in the designated column.		\n\n @param column the first column is 1, the second is 2, ...\n @return the nullability status of the given column; one of <code>columnNoNulls</code>,\n          <code>columnNullable</code> or <code>columnNullableUnknown</code>\n @exception SQLException if a database access error occurs\n"
14390,method,java/sql/ResultSetMetaData/isSigned/int," Indicates whether values in the designated column are signed numbers.\n\n @param column the first column is 1, the second is 2, ...\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14391,method,java/sql/ResultSetMetaData/getColumnDisplaySize/int," Indicates the designated column's normal maximum width in characters.\n\n @param column the first column is 1, the second is 2, ...\n @return the normal maximum number of characters allowed as the width\n          of the designated column\n @exception SQLException if a database access error occurs\n"
14392,method,java/sql/ResultSetMetaData/getColumnLabel/int," Gets the designated column's suggested title for use in printouts and\n displays. The suggested title is usually specified by the SQL <code>AS</code> \n clause.  If a SQL <code>AS</code> is not specified, the value returned from \n <code>getColumnLabel</code> will be the same as the value returned by the \n <code>getColumnName</code> method.\n\n @param column the first column is 1, the second is 2, ...\n @return the suggested column title\n @exception SQLException if a database access error occurs\n"
14393,method,java/sql/ResultSetMetaData/getColumnName/int," Get the designated column's name.\n\n @param column the first column is 1, the second is 2, ...\n @return column name\n @exception SQLException if a database access error occurs\n"
14394,method,java/sql/ResultSetMetaData/getSchemaName/int," Get the designated column's table's schema.\n\n @param column the first column is 1, the second is 2, ...\n @return schema name or "" if not applicable\n @exception SQLException if a database access error occurs\n"
14396,method,java/sql/ResultSetMetaData/getScale/int," Gets the designated column's number of digits to right of the decimal point.\n 0 is returned for data types where the scale is not applicable.\n\n @param column the first column is 1, the second is 2, ...\n @return scale\n @exception SQLException if a database access error occurs\n"
14397,method,java/sql/ResultSetMetaData/getTableName/int," Gets the designated column's table name. \n\n @param column the first column is 1, the second is 2, ...\n @return table name or "" if not applicable\n @exception SQLException if a database access error occurs\n"
14398,method,java/sql/ResultSetMetaData/getCatalogName/int," Gets the designated column's table's catalog name.\n\n @param column the first column is 1, the second is 2, ...\n @return the name of the catalog for the table in which the given column\n          appears or "" if not applicable\n @exception SQLException if a database access error occurs\n"
14399,method,java/sql/ResultSetMetaData/getColumnType/int," Retrieves the designated column's SQL type.\n\n @param column the first column is 1, the second is 2, ...\n @return SQL type from java.sql.Types\n @exception SQLException if a database access error occurs\n @see Types\n"
14400,method,java/sql/ResultSetMetaData/getColumnTypeName/int," Retrieves the designated column's database-specific type name.\n\n @param column the first column is 1, the second is 2, ...\n @return type name used by the database. If the column type is\n a user-defined type, then a fully-qualified type name is returned.\n @exception SQLException if a database access error occurs\n"
14401,method,java/sql/ResultSetMetaData/isReadOnly/int," Indicates whether the designated column is definitely not writable.\n\n @param column the first column is 1, the second is 2, ...\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14402,method,java/sql/ResultSetMetaData/isWritable/int," Indicates whether it is possible for a write on the designated column to succeed.\n\n @param column the first column is 1, the second is 2, ...\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14403,method,java/sql/ResultSetMetaData/isDefinitelyWritable/int," Indicates whether a write on the designated column will definitely succeed.	\n\n @param column the first column is 1, the second is 2, ...\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14404,method,java/sql/ResultSetMetaData/getColumnClassName/int," <p>Returns the fully-qualified name of the Java class whose instances \n are manufactured if the method <code>ResultSet.getObject</code>\n is called to retrieve a value \n from the column.  <code>ResultSet.getObject</code> may return a subclass of the\n class returned by this method.\n\n @param column the first column is 1, the second is 2, ...\n @return the fully-qualified name of the class in the Java programming\n         language that would be used by the method \n <code>ResultSet.getObject</code> to retrieve the value in the specified\n column. This is the class name used for custom mapping.\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14408,interface,java/sql/ResultSet," A table of data representing a database result set, which\n is usually generated by executing a statement that queries the database. \n \n <P>A <code>ResultSet</code> object  maintains a cursor pointing\n to its current row of data.  Initially the cursor is positioned \n before the first row. The <code>next</code> method moves the \n cursor to the next row, and because it returns <code>false</code>\n when there are no more rows in the <code>ResultSet</code> object,\n it can be used in a <code>while</code> loop to iterate through \n the result set.\n <P>\n A default <code>ResultSet</code> object is not updatable and\n has a cursor that moves forward only.  Thus, you can\n iterate through it only once and only from the first row to the\n last row. It is possible to\n produce <code>ResultSet</code> objects that are scrollable and/or\n updatable.  The following code fragment, in which <code>con</code>\n is a valid <code>Connection</code> object, illustrates how to make \n a result set that is scrollable and insensitive to updates by others, and \n that is updatable. See <code>ResultSet</code> fields for other\n options.\n <PRE>\n\n       Statement stmt = con.createStatement(\n                                      ResultSet.TYPE_SCROLL_INSENSITIVE,\n                                      ResultSet.CONCUR_UPDATABLE);\n       ResultSet rs = stmt.executeQuery("SELECT a, b FROM TABLE2");\n       // rs will be scrollable, will not show changes made by others,\n       // and will be updatable\n\n </PRE>\n The <code>ResultSet</code> interface provides \n <i>getter</i> methods (<code>getBoolean</code>, <code>getLong</code>, and so on)\n for retrieving column values from the current row.\n Values can be retrieved using either the index number of the\n column or the name of the column.  In general, using the \n column index will be more efficient.  Columns are numbered from 1.\n For maximum portability, result set columns within each row should be\n read in left-to-right order, and each column should be read only once.\n\n <P>For the getter methods, a JDBC driver attempts\n to convert the underlying data to the Java type specified in the\n getter method and returns a suitable Java value.  The JDBC specification \n has a table showing the allowable mappings from SQL types to Java types\n that can be used by the <code>ResultSet</code> getter methods.\n <P>\n <P>Column names used as input to getter methods are case\n insensitive.  When a getter method is called  with\n a column name and several columns have the same name, \n the value of the first matching column will be returned. \n The column name option is\n designed to be used when column names are used in the SQL\n query that generated the result set.\n For columns that are NOT explicitly named in the query, it\n is best to use column numbers. If column names are used, the \n programmer should take care to guarantee that they uniquely refer to\n the intended columns, which can be assured with the SQL <i>AS</i> clause.\n <P>\n A set of updater methods were added to this interface\n in the JDBC 2.0 API (Java<sup><font size=-2>TM</font></sup> 2 SDK,\n Standard Edition, version 1.2). The comments regarding parameters\n to the getter methods also apply to parameters to the\n updater methods.\n<P>\n The updater methods may be used in two ways:\n <ol>\n <LI>to update a column value in the current row.  In a scrollable\n     <code>ResultSet</code> object, the cursor can be moved backwards\n     and forwards, to an absolute position, or to a position\n     relative to the current row.\n     The following code fragment updates the <code>NAME</code> column\n     in the fifth row of the <code>ResultSet</code> object\n     <code>rs</code> and then uses the method <code>updateRow</code>\n     to update the data source table from which <code>rs</code> was derived.\n <PRE>\n\n       rs.absolute(5); // moves the cursor to the fifth row of rs\n       rs.updateString("NAME", "AINSWORTH"); // updates the \n          // <code>NAME</code> column of row 5 to be <code>AINSWORTH</code>\n       rs.updateRow(); // updates the row in the data source\n\n </PRE>\n <LI>to insert column values into the insert row.  An updatable\n     <code>ResultSet</code> object has a special row associated with\n     it that serves as a staging area for building a row to be inserted.\n     The following code fragment moves the cursor to the insert row, builds\n     a three-column row, and inserts it into <code>rs</code> and into\n     the data source table using the method <code>insertRow</code>.\n <PRE>\n\n       rs.moveToInsertRow(); // moves cursor to the insert row\n       rs.updateString(1, "AINSWORTH"); // updates the \n          // first column of the insert row to be <code>AINSWORTH</code>\n       rs.updateInt(2,35); // updates the second column to be <code>35</code>\n       rs.updateBoolean(3, true); // updates the third column to <code>true</code>\n       rs.insertRow();\n       rs.moveToCurrentRow();\n\n </PRE>\n </ol>\n <P>A <code>ResultSet</code> object is automatically closed when the\n <code>Statement</code> object that\n generated it is closed, re-executed, or used\n to retrieve the next result from a sequence of multiple results.\n \n <P>The number, types and properties of a <code>ResultSet</code>\n object's columns are provided by the <code>ResulSetMetaData</code>\n object returned by the <code>ResultSet.getMetaData</code> method.\n\n @see Statement#executeQuery \n @see Statement#getResultSet \n @see ResultSetMetaData \n"
14410,method,java/sql/ResultSet/close/," Releases this <code>ResultSet</code> object's database and\n JDBC resources immediately instead of waiting for\n this to happen when it is automatically closed.\n\n <P>The closing of a <code>ResultSet</code> object does <strong>not</strong> close the <code>Blob</code>,\n <code>Clob</code> or <code>NClob</code> objects created by the <code>ResultSet</code>. <code>Blob</code>,\n <code>Clob</code> or <code>NClob</code> objects remain valid for at least the duration of the\n transaction in which they are creataed, unless their <code>free</code> method is invoked.\n<p>\n When a <code>ResultSet</code> is closed, any <code>ResultSetMetaData</code>\n instances that were created by calling the  <code>getMetaData</code> \n method remain accessible.\n\n <P><B>Note:</B> A <code>ResultSet</code> object\n is automatically closed by the\n <code>Statement</code> object that generated it when\n that <code>Statement</code> object is closed,\n re-executed, or is used to retrieve the next result from a\n sequence of multiple results. \n<p>\n Calling the method <code>close</code> on a <code>ResultSet</code>\n object that is already closed is a no-op.\n <P>\n <p>\n\n @exception SQLException if a database access error occurs\n"
14412,method,java/sql/ResultSet/getString/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>String</code> in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14413,method,java/sql/ResultSet/getBoolean/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>boolean</code> in the Java programming language.\n  \n <P>If the designated column has a datatype of CHAR or VARCHAR\n and contains a "0" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT \n and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype\n of CHAR or VARCHAR\n and contains a "1" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT \n and contains  a 1, a value of <code>true</code> is returned.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>false</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14414,method,java/sql/ResultSet/getByte/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>byte</code> in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14415,method,java/sql/ResultSet/getShort/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>short</code> in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14416,method,java/sql/ResultSet/getInt/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n an <code>int</code> in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14417,method,java/sql/ResultSet/getLong/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>long</code> in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14418,method,java/sql/ResultSet/getFloat/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>float</code> in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14419,method,java/sql/ResultSet/getDouble/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>double</code> in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14420,method,java/sql/ResultSet/getBigDecimal/int;int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>java.sql.BigDecimal</code> in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param scale the number of digits to the right of the decimal point\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @deprecated\n"
14421,method,java/sql/ResultSet/getBytes/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>byte</code> array in the Java programming language.\n The bytes represent the raw values returned by the driver.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14422,method,java/sql/ResultSet/getDate/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>java.sql.Date</code> object in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14423,method,java/sql/ResultSet/getTime/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>java.sql.Time</code> object in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14424,method,java/sql/ResultSet/getTimestamp/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>java.sql.Timestamp</code> object in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14428,method,java/sql/ResultSet/getString/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>String</code> in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14429,method,java/sql/ResultSet/getBoolean/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>boolean</code> in the Java programming language. \n  \n <P>If the designated column has a datatype of CHAR or VARCHAR\n and contains a "0" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT \n and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype\n of CHAR or VARCHAR\n and contains a "1" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT \n and contains  a 1, a value of <code>true</code> is returned.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>false</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14430,method,java/sql/ResultSet/getByte/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>byte</code> in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14431,method,java/sql/ResultSet/getShort/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>short</code> in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14432,method,java/sql/ResultSet/getInt/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n an <code>int</code> in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14433,method,java/sql/ResultSet/getLong/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>long</code> in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14434,method,java/sql/ResultSet/getFloat/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>float</code> in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14435,method,java/sql/ResultSet/getDouble/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>double</code> in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>0</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14436,method,java/sql/ResultSet/getBigDecimal/String;int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>java.math.BigDecimal</code> in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param scale the number of digits to the right of the decimal point\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @deprecated\n"
14437,method,java/sql/ResultSet/getBytes/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>byte</code> array in the Java programming language.\n The bytes represent the raw values returned by the driver.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14438,method,java/sql/ResultSet/getDate/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>java.sql.Date</code> object in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14439,method,java/sql/ResultSet/getTime/String," Retrieves the value of the designated column in the current row  \n of this <code>ResultSet</code> object as\n a <code>java.sql.Time</code> object in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; \n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14440,method,java/sql/ResultSet/getTimestamp/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>java.sql.Timestamp</code> object in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14444,method,java/sql/ResultSet/getWarnings/," Retrieves the first warning reported by calls on this \n <code>ResultSet</code> object.\n Subsequent warnings on this <code>ResultSet</code> object\n will be chained to the <code>SQLWarning</code> object that \n this method returns.\n\n <P>The warning chain is automatically cleared each time a new\n row is read.  This method may not be called on a <code>ResultSet</code>\n object that has been closed; doing so will cause an \n <code>SQLException</code> to be thrown.\n <P>\n <B>Note:</B> This warning chain only covers warnings caused\n by <code>ResultSet</code> methods.  Any warning caused by\n <code>Statement</code> methods\n (such as reading OUT parameters) will be chained on the\n <code>Statement</code> object. \n\n @return the first <code>SQLWarning</code> object reported or \n         <code>null</code> if there are none\n @exception SQLException if a database access error occurs or this method is \n            called on a closed result set\n"
14445,method,java/sql/ResultSet/clearWarnings/," Clears all warnings reported on this <code>ResultSet</code> object.\n After this method is called, the method <code>getWarnings</code>\n returns <code>null</code> until a new warning is\n reported for this <code>ResultSet</code> object.  \n\n @exception SQLException if a database access error occurs or this method is \n            called on a closed result set\n"
14446,method,java/sql/ResultSet/getCursorName/," Retrieves the name of the SQL cursor used by this <code>ResultSet</code>\n object.\n\n <P>In SQL, a result table is retrieved through a cursor that is\n named. The current row of a result set can be updated or deleted\n using a positioned update/delete statement that references the\n cursor name. To insure that the cursor has the proper isolation\n level to support update, the cursor's <code>SELECT</code> statement \n should be of the form <code>SELECT FOR UPDATE</code>. If \n <code>FOR UPDATE</code> is omitted, the positioned updates may fail.\n \n <P>The JDBC API supports this SQL feature by providing the name of the\n SQL cursor used by a <code>ResultSet</code> object.\n The current row of a <code>ResultSet</code> object\n is also the current row of this SQL cursor.\n\n @return the SQL name for this <code>ResultSet</code> object's cursor\n @exception SQLException if a database access error occurs or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n"
14447,method,java/sql/ResultSet/getMetaData/," Retrieves the  number, types and properties of\n this <code>ResultSet</code> object's columns.\n\n @return the description of this <code>ResultSet</code> object's columns\n @exception SQLException if a database access error occurs or this method is \n            called on a closed result set\n"
14448,method,java/sql/ResultSet/getObject/int," <p>Gets the value of the designated column in the current row \n of this <code>ResultSet</code> object as \n an <code>Object</code> in the Java programming language.\n\n <p>This method will return the value of the given column as a\n Java object.  The type of the Java object will be the default\n Java object type corresponding to the column's SQL type,\n following the mapping for built-in types specified in the JDBC \n specification. If the value is an SQL <code>NULL</code>, \n the driver returns a Java <code>null</code>.\n\n <p>This method may also be used to read database-specific\n abstract data types.\n\n In the JDBC 2.0 API, the behavior of method\n <code>getObject</code> is extended to materialize  \n data of SQL user-defined types. \n <p>\n If <code>Connection.getTypeMap</code> does not throw a \n <code>SQLFeatureNotSupportedException</code>, \n then when a column contains a structured or distinct value, \n the behavior of this method is as \n if it were a call to: <code>getObject(columnIndex, \n this.getStatement().getConnection().getTypeMap())</code>.\n\n If <code>Connection.getTypeMap</code> does throw a \n <code>SQLFeatureNotSupportedException</code>, \n then structured values are not supported, and distinct values \n are mapped to the default Java class as determined by the \n underlying SQL type of the DISTINCT type.\n \n @param columnIndex the first column is 1, the second is 2, ...\n @return a <code>java.lang.Object</code> holding the column value  \n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14449,method,java/sql/ResultSet/getObject/String," <p>Gets the value of the designated column in the current row \n of this <code>ResultSet</code> object as \n an <code>Object</code> in the Java programming language.\n\n <p>This method will return the value of the given column as a\n Java object.  The type of the Java object will be the default\n Java object type corresponding to the column's SQL type,\n following the mapping for built-in types specified in the JDBC \n specification. If the value is an SQL <code>NULL</code>, \n the driver returns a Java <code>null</code>.\n <P>\n This method may also be used to read database-specific\n abstract data types.\n <P>\n In the JDBC 2.0 API, the behavior of the method\n <code>getObject</code> is extended to materialize  \n data of SQL user-defined types.  When a column contains\n a structured or distinct value, the behavior of this method is as \n if it were a call to: <code>getObject(columnIndex, \n this.getStatement().getConnection().getTypeMap())</code>.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return a <code>java.lang.Object</code> holding the column value  \n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n"
14450,method,java/sql/ResultSet/findColumn/String," Maps the given <code>ResultSet</code> column label to its\n <code>ResultSet</code> column index.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column index of the given column name\n @exception SQLException if the <code>ResultSet</code> object\n does not contain a column labeled <code>columnLabel</code>, a database access error occurs\n  or this method is called on a closed result set\n"
14451,method,java/sql/ResultSet/getCharacterStream/int," Retrieves the value of the designated column in the current row \n of this <code>ResultSet</code> object as a\n <code>java.io.Reader</code> object.\n @return a <code>java.io.Reader</code> object that contains the column\n value; if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language.\n @param columnIndex the first column is 1, the second is 2, ...\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n @since 1.2\n"
14452,method,java/sql/ResultSet/getCharacterStream/String," Retrieves the value of the designated column in the current row \n of this <code>ResultSet</code> object as a\n <code>java.io.Reader</code> object.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return a <code>java.io.Reader</code> object that contains the column\n value; if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n @since 1.2\n"
14453,method,java/sql/ResultSet/getBigDecimal/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a\n <code>java.math.BigDecimal</code> with full precision.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value (full precision);\n if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language.\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n @since 1.2\n"
14454,method,java/sql/ResultSet/getBigDecimal/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a\n <code>java.math.BigDecimal</code> with full precision.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value (full precision);\n if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language.\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs or this method is \n            called on a closed result set\n @since 1.2\n\n"
14455,method,java/sql/ResultSet/isBeforeFirst/," Retrieves whether the cursor is before the first row in \n this <code>ResultSet</code> object.\n <p>\n <strong>Note:</strong>Support for the <code>isBeforeFirst</code> method \n is optional for <code>ResultSet</code>s with a result \n set type of <code>TYPE_FORWARD_ONLY</code>\n\n @return <code>true</code> if the cursor is before the first row;\n <code>false</code> if the cursor is at any other position or the\n result set contains no rows\n @exception SQLException if a database access error occurs or this method is \n            called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14456,method,java/sql/ResultSet/isAfterLast/," Retrieves whether the cursor is after the last row in \n this <code>ResultSet</code> object.\n <p>\n <strong>Note:</strong>Support for the <code>isAfterLast</code> method \n is optional for <code>ResultSet</code>s with a result \n set type of <code>TYPE_FORWARD_ONLY</code>\n\n @return <code>true</code> if the cursor is after the last row;\n <code>false</code> if the cursor is at any other position or the\n result set contains no rows\n @exception SQLException if a database access error occurs or this method is \n            called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14457,method,java/sql/ResultSet/isFirst/," Retrieves whether the cursor is on the first row of\n this <code>ResultSet</code> object.\n <p>\n <strong>Note:</strong>Support for the <code>isFirst</code> method \n is optional for <code>ResultSet</code>s with a result \n set type of <code>TYPE_FORWARD_ONLY</code>\n\n @return <code>true</code> if the cursor is on the first row;\n <code>false</code> otherwise   \n @exception SQLException if a database access error occurs or this method is \n            called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14458,method,java/sql/ResultSet/isLast/," Retrieves whether the cursor is on the last row of \n this <code>ResultSet</code> object.\n  <strong>Note:</strong> Calling the method <code>isLast</code> may be expensive\n because the JDBC driver\n might need to fetch ahead one row in order to determine \n whether the current row is the last row in the result set.\n <p>\n <strong>Note:</strong> Support for the <code>isLast</code> method \n is optional for <code>ResultSet</code>s with a result \n set type of <code>TYPE_FORWARD_ONLY</code>\n @return <code>true</code> if the cursor is on the last row;\n <code>false</code> otherwise   \n @exception SQLException if a database access error occurs or this method is \n            called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14459,method,java/sql/ResultSet/beforeFirst/," Moves the cursor to the front of\n this <code>ResultSet</code> object, just before the\n first row. This method has no effect if the result set contains no rows.\n\n @exception SQLException if a database access error\n occurs; this method is called on a closed result set or the \n result set type is <code>TYPE_FORWARD_ONLY</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14460,method,java/sql/ResultSet/afterLast/," Moves the cursor to the end of\n this <code>ResultSet</code> object, just after the\n last row. This method has no effect if the result set contains no rows.\n @exception SQLException if a database access error\n occurs; this method is called on a closed result set\n or the result set type is <code>TYPE_FORWARD_ONLY</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14461,method,java/sql/ResultSet/first/," Moves the cursor to the first row in\n this <code>ResultSet</code> object.\n\n @return <code>true</code> if the cursor is on a valid row;\n <code>false</code> if there are no rows in the result set\n @exception SQLException if a database access error\n occurs; this method is called on a closed result set\n or the result set type is <code>TYPE_FORWARD_ONLY</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14462,method,java/sql/ResultSet/last/," Moves the cursor to the last row in\n this <code>ResultSet</code> object.\n\n @return <code>true</code> if the cursor is on a valid row;\n <code>false</code> if there are no rows in the result set\n @exception SQLException if a database access error\n occurs; this method is called on a closed result set\n or the result set type is <code>TYPE_FORWARD_ONLY</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14463,method,java/sql/ResultSet/getRow/," Retrieves the current row number.  The first row is number 1, the\n second number 2, and so on.  \n <p>\n <strong>Note:</strong>Support for the <code>getRow</code> method \n is optional for <code>ResultSet</code>s with a result \n set type of <code>TYPE_FORWARD_ONLY</code>\n\n @return the current row number; <code>0</code> if there is no current row\n @exception SQLException if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14464,method,java/sql/ResultSet/absolute/int," Moves the cursor to the given row number in\n this <code>ResultSet</code> object.\n\n <p>If the row number is positive, the cursor moves to \n the given row number with respect to the\n beginning of the result set.  The first row is row 1, the second\n is row 2, and so on. \n\n <p>If the given row number is negative, the cursor moves to\n an absolute row position with respect to\n the end of the result set.  For example, calling the method\n <code>absolute(-1)</code> positions the \n cursor on the last row; calling the method <code>absolute(-2)</code>\n moves the cursor to the next-to-last row, and so on.\n\n <p>An attempt to position the cursor beyond the first/last row in\n the result set leaves the cursor before the first row or after \n the last row.\n\n <p><B>Note:</B> Calling <code>absolute(1)</code> is the same\n as calling <code>first()</code>. Calling <code>absolute(-1)</code> \n is the same as calling <code>last()</code>.\n\n @param row the number of the row to which the cursor should move.\n        A positive number indicates the row number counting from the\n        beginning of the result set; a negative number indicates the\n        row number counting from the end of the result set\n @return <code>true</code> if the cursor is moved to a position in this\n <code>ResultSet</code> object; \n <code>false</code> if the cursor is before the first row or after the\n last row\n @exception SQLException if a database access error\n occurs; this method is called on a closed result set \n or the result set type is <code>TYPE_FORWARD_ONLY</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14465,method,java/sql/ResultSet/relative/int," Moves the cursor a relative number of rows, either positive or negative.\n Attempting to move beyond the first/last row in the\n result set positions the cursor before/after the\n the first/last row. Calling <code>relative(0)</code> is valid, but does\n not change the cursor position.\n\n <p>Note: Calling the method <code>relative(1)</code>\n is identical to calling the method <code>next()</code> and \n calling the method <code>relative(-1)</code> is identical\n to calling the method <code>previous()</code>.\n\n @param rows an <code>int</code> specifying the number of rows to\n        move from the current row; a positive number moves the cursor\n        forward; a negative number moves the cursor backward\n @return <code>true</code> if the cursor is on a row;\n         <code>false</code> otherwise\n @exception SQLException if a database access error occurs;  this method \n is called on a closed result set or the result set type is \n            <code>TYPE_FORWARD_ONLY</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14467,method,java/sql/ResultSet/setFetchDirection/int," Gives a hint as to the direction in which the rows in this\n <code>ResultSet</code> object will be processed. \n The initial value is determined by the \n <code>Statement</code> object\n that produced this <code>ResultSet</code> object.\n The fetch direction may be changed at any time.\n\n @param direction an <code>int</code> specifying the suggested\n        fetch direction; one of <code>ResultSet.FETCH_FORWARD</code>, \n        <code>ResultSet.FETCH_REVERSE</code>, or\n        <code>ResultSet.FETCH_UNKNOWN</code>\n @exception SQLException if a database access error occurs; this \n method is called on a closed result set or \n the result set type is <code>TYPE_FORWARD_ONLY</code> and the fetch\n direction is not <code>FETCH_FORWARD</code>\n @since 1.2\n @see Statement#setFetchDirection\n @see #getFetchDirection\n"
14468,method,java/sql/ResultSet/getFetchDirection/," Retrieves the fetch direction for this \n <code>ResultSet</code> object.\n\n @return the current fetch direction for this <code>ResultSet</code> object \n @exception SQLException if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n @see #setFetchDirection\n"
14469,method,java/sql/ResultSet/setFetchSize/int," Gives the JDBC driver a hint as to the number of rows that should \n be fetched from the database when more rows are needed for this \n <code>ResultSet</code> object.\n If the fetch size specified is zero, the JDBC driver \n ignores the value and is free to make its own best guess as to what\n the fetch size should be.  The default value is set by the \n <code>Statement</code> object\n that created the result set.  The fetch size may be changed at any time.\n\n @param rows the number of rows to fetch\n @exception SQLException if a database access error occurs; this method \n is called on a closed result set or the\n condition <code>rows >= 0 </code> is not satisfied\n @since 1.2\n @see #getFetchSize\n"
14470,method,java/sql/ResultSet/getFetchSize/," Retrieves the fetch size for this \n <code>ResultSet</code> object.\n\n @return the current fetch size for this <code>ResultSet</code> object\n @exception SQLException if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n @see #setFetchSize\n"
14471,method,java/sql/ResultSet/getType/," Retrieves the type of this <code>ResultSet</code> object.  \n The type is determined by the <code>Statement</code> object\n that created the result set.\n\n @return <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>,\n         or <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @exception SQLException if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14472,method,java/sql/ResultSet/getConcurrency/," Retrieves the concurrency mode of this <code>ResultSet</code> object.\n The concurrency used is determined by the \n <code>Statement</code> object that created the result set.\n\n @return the concurrency type, either\n         <code>ResultSet.CONCUR_READ_ONLY</code>\n         or <code>ResultSet.CONCUR_UPDATABLE</code>\n @exception SQLException if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14474,method,java/sql/ResultSet/rowInserted/," Retrieves whether the current row has had an insertion.\n The value returned depends on whether or not this\n <code>ResultSet</code> object can detect visible inserts.\n <p>\n <strong>Note:</strong> Support for the <code>rowInserted</code> method is optional with a result set \n concurrency of <code>CONCUR_READ_ONLY</code>\n @return <code>true</code> if the current row is detected to \n have been inserted; <code>false</code> otherwise\n @exception SQLException if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n \n @see DatabaseMetaData#insertsAreDetected\n @since 1.2\n"
14476,method,java/sql/ResultSet/updateNull/int," Updates the designated column with a <code>null</code> value.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code>\n or <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14477,method,java/sql/ResultSet/updateBoolean/int;boolean," Updates the designated column with a <code>boolean</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14478,method,java/sql/ResultSet/updateByte/int;byte," Updates the designated column with a <code>byte</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14479,method,java/sql/ResultSet/updateShort/int;short," Updates the designated column with a <code>short</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14480,method,java/sql/ResultSet/updateInt/int;int," Updates the designated column with an <code>int</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14481,method,java/sql/ResultSet/updateLong/int;long," Updates the designated column with a <code>long</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14482,method,java/sql/ResultSet/updateFloat/int;float," Updates the designated column with a <code>float</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14483,method,java/sql/ResultSet/updateDouble/int;double," Updates the designated column with a <code>double</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14484,method,java/sql/ResultSet/updateBigDecimal/int;BigDecimal," Updates the designated column with a <code>java.math.BigDecimal</code> \n value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14486,method,java/sql/ResultSet/updateBytes/int;byte[]," Updates the designated column with a <code>byte</code> array value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14487,method,java/sql/ResultSet/updateDate/int;Date," Updates the designated column with a <code>java.sql.Date</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14488,method,java/sql/ResultSet/updateTime/int;Time," Updates the designated column with a <code>java.sql.Time</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14489,method,java/sql/ResultSet/updateTimestamp/int;Timestamp," Updates the designated column with a <code>java.sql.Timestamp</code>\n value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14490,method,java/sql/ResultSet/updateAsciiStream/int;InputStream;int,"\n Updates the designated column with an ascii stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @param length the length of the stream\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14494,method,java/sql/ResultSet/updateObject/int;Object," Updates the designated column with an <code>Object</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14495,method,java/sql/ResultSet/updateNull/String," Updates the designated column with a <code>null</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14496,method,java/sql/ResultSet/updateBoolean/String;boolean," Updates the designated column with a <code>boolean</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14497,method,java/sql/ResultSet/updateByte/String;byte," Updates the designated column with a <code>byte</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14499,method,java/sql/ResultSet/updateInt/String;int," Updates the designated column with an <code>int</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14500,method,java/sql/ResultSet/updateLong/String;long," Updates the designated column with a <code>long</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14501,method,java/sql/ResultSet/updateFloat/String;float," Updates the designated column with a <code>float	</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14502,method,java/sql/ResultSet/updateDouble/String;double," Updates the designated column with a <code>double</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14503,method,java/sql/ResultSet/updateBigDecimal/String;BigDecimal," Updates the designated column with a <code>java.sql.BigDecimal</code>\n value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14504,method,java/sql/ResultSet/updateString/String;String," Updates the designated column with a <code>String</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14505,method,java/sql/ResultSet/updateBytes/String;byte[]," Updates the designated column with a byte array value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> \n or <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14506,method,java/sql/ResultSet/updateDate/String;Date," Updates the designated column with a <code>java.sql.Date</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14507,method,java/sql/ResultSet/updateTime/String;Time," Updates the designated column with a <code>java.sql.Time</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14508,method,java/sql/ResultSet/updateTimestamp/String;Timestamp," Updates the designated column with a <code>java.sql.Timestamp</code>\n value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14509,method,java/sql/ResultSet/updateAsciiStream/String;InputStream;int,"\n Updates the designated column with an ascii stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @param length the length of the stream\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14510,method,java/sql/ResultSet/updateBinaryStream/String;InputStream;int,"\n Updates the designated column with a binary stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @param length the length of the stream\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14511,method,java/sql/ResultSet/updateCharacterStream/String;Reader;int," Updates the designated column with a character stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param reader the <code>java.io.Reader</code> object containing\n        the new column value\n @param length the length of the stream\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14513,method,java/sql/ResultSet/updateObject/String;Object," Updates the designated column with an <code>Object</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14515,method,java/sql/ResultSet/updateRow/," Updates the underlying database with the new contents of the\n current row of this <code>ResultSet</code> object.\n This method cannot be called when the cursor is on the insert row.\n\n @exception SQLException if a database access error occurs; \n the result set concurrency is <code>CONCUR_READ_ONLY</code>;\n  this method is called on a closed result set or\n if this method is called when the cursor is on the insert row\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14516,method,java/sql/ResultSet/deleteRow/," Deletes the current row from this <code>ResultSet</code> object \n and from the underlying database.  This method cannot be called when\n the cursor is on the insert row.\n\n @exception SQLException if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code>; \n this method is called on a closed result set \n or if this method is called when the cursor is on the insert row\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14517,method,java/sql/ResultSet/refreshRow/," Refreshes the current row with its most recent value in \n the database.  This method cannot be called when\n the cursor is on the insert row.\n\n <P>The <code>refreshRow</code> method provides a way for an \n application to \n explicitly tell the JDBC driver to refetch a row(s) from the\n database.  An application may want to call <code>refreshRow</code> when \n caching or prefetching is being done by the JDBC driver to\n fetch the latest value of a row from the database.  The JDBC driver \n may actually refresh multiple rows at once if the fetch size is \n greater than one.\n \n <P> All values are refetched subject to the transaction isolation \n level and cursor sensitivity.  If <code>refreshRow</code> is called after\n calling an updater method, but before calling\n the method <code>updateRow</code>, then the\n updates made to the row are lost.  Calling the method\n <code>refreshRow</code> frequently will likely slow performance.\n\n @exception SQLException if a database access error\n occurs; this method is called on a closed result set;\n the result set type is <code>TYPE_FORWARD_ONLY</code> or if this \n method is called when the cursor is on the insert row\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method or this method is not supported for the specified result \n set type and result set concurrency.\n @since 1.2\n"
14518,method,java/sql/ResultSet/cancelRowUpdates/," Cancels the updates made to the current row in this\n <code>ResultSet</code> object.\n This method may be called after calling an\n updater method(s) and before calling\n the method <code>updateRow</code> to roll back \n the updates made to a row.  If no updates have been made or \n <code>updateRow</code> has already been called, this method has no \n effect.\n\n @exception SQLException if a database access error\n            occurs; this method is called on a closed result set;\n the result set concurrency is <code>CONCUR_READ_ONLY</code>  \n or if this method is called when the cursor is \n            on the insert row\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14520,method,java/sql/ResultSet/moveToCurrentRow/," Moves the cursor to the remembered cursor position, usually the\n current row.  This method has no effect if the cursor is not on \n the insert row. \n\n @exception SQLException if a database access error occurs; this \n method is called on a closed result set \n  or the result set concurrency is <code>CONCUR_READ_ONLY</code>   \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14521,method,java/sql/ResultSet/getStatement/," Retrieves the <code>Statement</code> object that produced this \n <code>ResultSet</code> object.\n If the result set was generated some other way, such as by a\n <code>DatabaseMetaData</code> method, this method  may return\n <code>null</code>.\n\n @return the <code>Statment</code> object that produced \n this <code>ResultSet</code> object or <code>null</code>\n if the result set was produced some other way\n @exception SQLException if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14522,method,java/sql/ResultSet/getObject/int;Map," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as an <code>Object</code>\n in the Java programming language.\n If the value is an SQL <code>NULL</code>, \n the driver returns a Java <code>null</code>.\n This method uses the given <code>Map</code> object\n for the custom mapping of the\n SQL structured or distinct type that is being retrieved.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param map a <code>java.util.Map</code> object that contains the mapping \n from SQL type names to classes in the Java programming language\n @return an <code>Object</code> in the Java programming language\n representing the SQL value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14523,method,java/sql/ResultSet/getRef/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>Ref</code> object\n in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return a <code>Ref</code> object representing an SQL <code>REF</code> \n         value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14524,method,java/sql/ResultSet/getBlob/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>Blob</code> object\n in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return a <code>Blob</code> object representing the SQL \n         <code>BLOB</code> value in the specified column\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14525,method,java/sql/ResultSet/getClob/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>Clob</code> object\n in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return a <code>Clob</code> object representing the SQL \n         <code>CLOB</code> value in the specified column\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14526,method,java/sql/ResultSet/getArray/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as an <code>Array</code> object\n in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return an <code>Array</code> object representing the SQL \n         <code>ARRAY</code> value in the specified column\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14527,method,java/sql/ResultSet/getObject/String;Map," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as an <code>Object</code>\n in the Java programming language.\n If the value is an SQL <code>NULL</code>, \n the driver returns a Java <code>null</code>.\n This method uses the specified <code>Map</code> object for\n custom mapping if appropriate.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param map a <code>java.util.Map</code> object that contains the mapping \n from SQL type names to classes in the Java programming language\n @return an <code>Object</code> representing the SQL value in the \n         specified column\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14528,method,java/sql/ResultSet/getRef/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>Ref</code> object\n in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return a <code>Ref</code> object representing the SQL <code>REF</code> \n         value in the specified column\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14529,method,java/sql/ResultSet/getBlob/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>Blob</code> object\n in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return a <code>Blob</code> object representing the SQL <code>BLOB</code> \n         value in the specified column\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14530,method,java/sql/ResultSet/getClob/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>Clob</code> object\n in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return a <code>Clob</code> object representing the SQL <code>CLOB</code>\n value in the specified column\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14532,method,java/sql/ResultSet/getDate/int;Calendar," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the date if the underlying database does not store\n timezone information.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param cal the <code>java.util.Calendar</code> object\n to use in constructing the date\n @return the column value as a <code>java.sql.Date</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14533,method,java/sql/ResultSet/getDate/String;Calendar," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the date if the underlying database does not store\n timezone information.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param cal the <code>java.util.Calendar</code> object\n to use in constructing the date\n @return the column value as a <code>java.sql.Date</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14534,method,java/sql/ResultSet/getTime/int;Calendar," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the time if the underlying database does not store\n timezone information.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param cal the <code>java.util.Calendar</code> object\n to use in constructing the time\n @return the column value as a <code>java.sql.Time</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14535,method,java/sql/ResultSet/getTime/String;Calendar," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the time if the underlying database does not store\n timezone information.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param cal the <code>java.util.Calendar</code> object\n to use in constructing the time\n @return the column value as a <code>java.sql.Time</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n @exception SQLException if the columnLabel is not valid;\n if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14536,method,java/sql/ResultSet/getTimestamp/int;Calendar," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the timestamp if the underlying database does not store\n timezone information.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param cal the <code>java.util.Calendar</code> object\n to use in constructing the timestamp\n @return the column value as a <code>java.sql.Timestamp</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14537,method,java/sql/ResultSet/getTimestamp/String;Calendar," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the timestamp if the underlying database does not store\n timezone information.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param cal the <code>java.util.Calendar</code> object\n to use in constructing the date\n @return the column value as a <code>java.sql.Timestamp</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n @exception SQLException if the columnLabel is not valid or\n if a database access error occurs \n or this method is called on a closed result set\n @since 1.2\n"
14538,method,java/sql/ResultSet/getURL/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.net.URL</code>\n object in the Java programming language.\n \n @param columnIndex the index of the column 1 is the first, 2 is the second,...\n @return the column value as a <code>java.net.URL</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs; this method \n is called on a closed result set or if a URL is malformed\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14539,method,java/sql/ResultSet/getURL/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.net.URL</code>\n object in the Java programming language.\n \n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value as a <code>java.net.URL</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs; this method \n is called on a closed result set or if a URL is malformed\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14540,method,java/sql/ResultSet/updateRef/int;Ref," Updates the designated column with a <code>java.sql.Ref</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14541,method,java/sql/ResultSet/updateRef/String;Ref,"\n Updates the designated column with a <code>java.sql.Ref</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14542,method,java/sql/ResultSet/updateBlob/int;Blob," Updates the designated column with a <code>java.sql.Blob</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14543,method,java/sql/ResultSet/updateBlob/String;Blob,"\n Updates the designated column with a <code>java.sql.Blob</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14544,method,java/sql/ResultSet/updateClob/int;Clob," Updates the designated column with a <code>java.sql.Clob</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method \n @since 1.4\n"
14545,method,java/sql/ResultSet/updateClob/String;Clob,"\n Updates the designated column with a <code>java.sql.Clob</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14546,method,java/sql/ResultSet/updateArray/int;Array," Updates the designated column with a <code>java.sql.Array</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14547,method,java/sql/ResultSet/updateArray/String;Array,"\n Updates the designated column with a <code>java.sql.Array</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14548,method,java/sql/ResultSet/getRowId/int," Retrieves the value of the designated column in the current row of this \n <code>ResultSet</code> object as a <code>java.sql.RowId</code> object in the Java\n programming language.\n\n @param columnIndex the first column is 1, the second 2, ...\n @return the column value; if the value is a SQL <code>NULL</code> the\n     value returned is <code>null</code>\n @throws SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14549,method,java/sql/ResultSet/getRowId/String," Retrieves the value of the designated column in the current row of this \n <code>ResultSet</code> object as a <code>java.sql.RowId</code> object in the Java\n programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value ; if the value is a SQL <code>NULL</code> the\n     value returned is <code>null</code>\n @throws SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14550,method,java/sql/ResultSet/updateRowId/int;RowId," Updates the designated column with a <code>RowId</code> value. The updater\n methods are used to update column values in the current row or the insert\n row. The updater methods do not update the underlying database; instead \n the <code>updateRow</code> or <code>insertRow</code> methods are called \n to update the database.\n \n @param columnIndex the first column is 1, the second 2, ...\n @param x the column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14551,method,java/sql/ResultSet/updateRowId/String;RowId," Updates the designated column with a <code>RowId</code> value. The updater\n methods are used to update column values in the current row or the insert\n row. The updater methods do not update the underlying database; instead \n the <code>updateRow</code> or <code>insertRow</code> methods are called \n to update the database.\n \n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the column value\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14552,method,java/sql/ResultSet/getHoldability/," Retrieves the holdability of this <code>ResultSet</code> object\n @return  either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n @throws SQLException if a database access error occurs \n or this method is called on a closed result set\n @since 1.6\n"
14553,method,java/sql/ResultSet/isClosed/," Retrieves whether this <code>ResultSet</code> object has been closed. A <code>ResultSet</code> is closed if the\n method close has been called on it, or if it is automatically closed.\n\n @return true if this <code>ResultSet</code> object is closed; false if it is still open\n @throws SQLException if a database access error occurs\n @since 1.6\n"
14554,method,java/sql/ResultSet/updateNString/int;String," Updates the designated column with a <code>String</code> value.\n It is intended for use when updating <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second 2, ...\n @param nString the value for the column to be updated\n @throws SQLException if the columnIndex is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set;\n the result set concurrency is <code>CONCUR_READ_ONLY</code>\n or if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14555,method,java/sql/ResultSet/updateNString/String;String," Updates the designated column with a <code>String</code> value.\n It is intended for use when updating <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param nString the value for the column to be updated\n @throws SQLException if the columnLabel is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set;\n the result set concurrency is <CODE>CONCUR_READ_ONLY</code> \n  or if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14556,method,java/sql/ResultSet/updateNClob/int;NClob," Updates the designated column with a <code>java.sql.NClob</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second 2, ...\n @param nClob the value for the column to be updated\n @throws SQLException if the columnIndex is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set;  \n if a database access error occurs or\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14557,method,java/sql/ResultSet/updateNClob/String;NClob," Updates the designated column with a <code>java.sql.NClob</code> value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param nClob the value for the column to be updated\n @throws SQLException if the columnLabel is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set;\n  if a database access error occurs or\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14558,method,java/sql/ResultSet/getNClob/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>NClob</code> object\n in the Java programming language.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return a <code>NClob</code> object representing the SQL \n         <code>NCLOB</code> value in the specified column\n @exception SQLException if the columnIndex is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set \n or if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14559,method,java/sql/ResultSet/getNClob/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>NClob</code> object\n in the Java programming language.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return a <code>NClob</code> object representing the SQL <code>NCLOB</code>\n value in the specified column\n @exception SQLException if the columnLabel is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set \n or if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14560,method,java/sql/ResultSet/getSQLXML/int," Retrieves the value of the designated column in  the current row of\n  this <code>ResultSet</code> as a\n <code>java.sql.SQLXML</code> object in the Java programming language.\n @param columnIndex the first column is 1, the second is 2, ...\n @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n @throws SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14561,method,java/sql/ResultSet/getSQLXML/String," Retrieves the value of the designated column in  the current row of\n  this <code>ResultSet</code> as a\n <code>java.sql.SQLXML</code> object in the Java programming language.\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n @throws SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set    \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14562,method,java/sql/ResultSet/updateSQLXML/int;SQLXML," Updates the designated column with a <code>java.sql.SQLXML</code> value.\n The updater\n methods are used to update column values in the current row or the insert\n row. The updater methods do not update the underlying database; instead \n the <code>updateRow</code> or <code>insertRow</code> methods are called \n to update the database.\n <p>\n\n @param columnIndex the first column is 1, the second 2, ...\n @param xmlObject the value for the column to be updated\n @throws SQLException if the columnIndex is not valid; \n if a database access error occurs; this method\n  is called on a closed result set;\n the <code>java.xml.transform.Result</code>,\n  <code>Writer</code> or <code>OutputStream</code> has not been closed\n for the <code>SQLXML</code> object; \n  if there is an error processing the XML value or   \n the result set concurrency is <code>CONCUR_READ_ONLY</code>.  The <code>getCause</code> method \n  of the exception may provide a more detailed exception, for example, if the \n  stream does not contain valid XML.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method \n @since 1.6\n"
14563,method,java/sql/ResultSet/updateSQLXML/String;SQLXML," Updates the designated column with a <code>java.sql.SQLXML</code> value. \n The updater\n methods are used to update column values in the current row or the insert\n row. The updater methods do not update the underlying database; instead \n the <code>updateRow</code> or <code>insertRow</code> methods are called \n to update the database. \n <p>\n \n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param xmlObject the column value\n @throws SQLException if the columnLabel is not valid; \n if a database access error occurs; this method\n  is called on a closed result set;\n the <code>java.xml.transform.Result</code>,\n  <code>Writer</code> or <code>OutputStream</code> has not been closed\n for the <code>SQLXML</code> object; \n  if there is an error processing the XML value or   \n the result set concurrency is <code>CONCUR_READ_ONLY</code>.  The <code>getCause</code> method \n  of the exception may provide a more detailed exception, for example, if the \n  stream does not contain valid XML.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14564,method,java/sql/ResultSet/getNString/int," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>String</code> in the Java programming language.\n It is intended for use when\n accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14565,method,java/sql/ResultSet/getNString/String," Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>String</code> in the Java programming language.\n It is intended for use when\n accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14566,method,java/sql/ResultSet/getNCharacterStream/int," Retrieves the value of the designated column in the current row \n of this <code>ResultSet</code> object as a\n <code>java.io.Reader</code> object.\n It is intended for use when\n accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n\n @return a <code>java.io.Reader</code> object that contains the column\n value; if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language.\n @param columnIndex the first column is 1, the second is 2, ...\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14567,method,java/sql/ResultSet/getNCharacterStream/String," Retrieves the value of the designated column in the current row \n of this <code>ResultSet</code> object as a\n <code>java.io.Reader</code> object.\n It is intended for use when\n accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n \n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @return a <code>java.io.Reader</code> object that contains the column\n value; if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14568,method,java/sql/ResultSet/updateNCharacterStream/int;Reader;long," Updates the designated column with a character stream value, which will have\n the specified number of bytes.   The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n It is intended for use when\n updating  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @param length the length of the stream\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs; \n the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14570,method,java/sql/ResultSet/updateAsciiStream/int;InputStream;long,"\n Updates the designated column with an ascii stream value, which will have\n the specified number of bytes.\n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @param length the length of the stream\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14571,method,java/sql/ResultSet/updateBinaryStream/int;InputStream;long,"\n Updates the designated column with a binary stream value, which will have\n the specified number of bytes.\n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value     \n @param length the length of the stream\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14572,method,java/sql/ResultSet/updateCharacterStream/int;Reader;long," Updates the designated column with a character stream value, which will have\n the specified number of bytes.\n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @param length the length of the stream\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14573,method,java/sql/ResultSet/updateAsciiStream/String;InputStream;long,"\n Updates the designated column with an ascii stream value, which will have\n the specified number of bytes.\n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param x the new column value\n @param length the length of the stream\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14575,method,java/sql/ResultSet/updateCharacterStream/String;Reader;long," Updates the designated column with a character stream value, which will have\n the specified number of bytes.\n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param reader the <code>java.io.Reader</code> object containing\n        the new column value\n @param length the length of the stream\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14576,method,java/sql/ResultSet/updateBlob/int;InputStream;long," Updates the designated column using the given input stream, which\n will have the specified number of bytes.\n \n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param inputStream An object that contains the data to set the parameter\n value to.\n @param length the number of bytes in the parameter data.\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14577,method,java/sql/ResultSet/updateBlob/String;InputStream;long,"\n Updates the designated column using the given input stream, which\n will have the specified number of bytes.\n \n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param inputStream An object that contains the data to set the parameter\n value to.\n @param length the number of bytes in the parameter data.\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14578,method,java/sql/ResultSet/updateClob/int;Reader;long," Updates the designated column using the given <code>Reader</code>\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param reader An object that contains the data to set the parameter value to.\n @param length the number of characters in the parameter data.\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method \n @since 1.6\n"
14579,method,java/sql/ResultSet/updateClob/String;Reader;long,"\n Updates the designated column using the given <code>Reader</code>\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param reader An object that contains the data to set the parameter value to.\n @param length the number of characters in the parameter data.\n @exception SQLException if the columnLabel is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14580,method,java/sql/ResultSet/updateNClob/int;Reader;long," Updates the designated column using the given <code>Reader</code>\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnIndex the first column is 1, the second 2, ...\n @param reader An object that contains the data to set the parameter value to.\n @param length the number of characters in the parameter data.\n @throws SQLException if the columnIndex is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set,  \n if a database access error occurs or\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14581,method,java/sql/ResultSet/updateNClob/String;Reader;long," Updates the designated column using the given <code>Reader</code>\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param reader An object that contains the data to set the parameter value to.\n @param length the number of characters in the parameter data.\n @throws SQLException if the columnLabel is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set;\n  if a database access error occurs or\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14586,method,java/sql/ResultSet/updateCharacterStream/int;Reader," Updates the designated column with a character stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.\n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>updateCharacterStream</code> which takes a length parameter.\n\n @param columnIndex the first column is 1, the second is 2, ...\n @param x the new column value\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14592,method,java/sql/ResultSet/updateClob/int;Reader," Updates the designated column using the given <code>Reader</code>\n object.\n  The data will be read from the stream\n as needed until end-of-stream is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n   <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>updateClob</code> which takes a length parameter.\n     \n @param columnIndex the first column is 1, the second is 2, ...\n @param reader An object that contains the data to set the parameter value to.\n @exception SQLException if the columnIndex is not valid; \n if a database access error occurs;\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n or this method is called on a closed result set\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method \n @since 1.6\n"
14595,method,java/sql/ResultSet/updateNClob/String;Reader," Updates the designated column using the given <code>Reader</code>\n object.\n The data will be read from the stream\n as needed until end-of-stream is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n <p>\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>updateNClob</code> which takes a length parameter.\n\n @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n @param reader An object that contains the data to set the parameter value to.\n @throws SQLException if the columnLabel is not valid; if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; this method is called on a closed result set;\n  if a database access error occurs or\n the result set concurrency is <code>CONCUR_READ_ONLY</code> \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
14596,field,java/sql/ResultSet/FETCH_FORWARD," The constant indicating that the rows in a result set will be \n processed in a forward direction; first-to-last.\n This constant is used by the method <code>setFetchDirection</code>\n as a hint to the driver, which the driver may ignore.\n @since 1.2\n"
14597,field,java/sql/ResultSet/FETCH_REVERSE," The constant indicating that the rows in a result set will be \n processed in a reverse direction; last-to-first.\n This constant is used by the method <code>setFetchDirection</code>\n as a hint to the driver, which the driver may ignore.\n @since 1.2\n"
14598,field,java/sql/ResultSet/FETCH_UNKNOWN," The constant indicating that the order in which rows in a \n result set will be processed is unknown.\n This constant is used by the method <code>setFetchDirection</code>\n as a hint to the driver, which the driver may ignore.\n"
14599,field,java/sql/ResultSet/TYPE_FORWARD_ONLY," The constant indicating the type for a <code>ResultSet</code> object\n whose cursor may move only forward.\n @since 1.2\n"
14602,field,java/sql/ResultSet/CONCUR_READ_ONLY," The constant indicating the concurrency mode for a\n <code>ResultSet</code> object that may NOT be updated.\n @since 1.2\n"
14603,field,java/sql/ResultSet/CONCUR_UPDATABLE," The constant indicating the concurrency mode for a\n <code>ResultSet</code> object that may be updated.\n @since 1.2\n"
14606,interface,java/sql/Ref," The mapping in the Java programming language of an SQL <code>REF</code>\n value, which is a reference to an SQL structured type value in the database.\n <P>\n SQL <code>REF</code> values are stored in a table that contains\n instances of a referenceable SQL structured type, and each <code>REF</code>\n value is a unique identifier for one instance in that table. \n An SQL <code>REF</code> value may be used in place of the\n SQL structured type it references, either as a column value in a\n table or an attribute value in a structured type.\n <P>\n Because an SQL <code>REF</code> value is a logical pointer to an\n SQL structured type, a <code>Ref</code> object is by default also a logical\n pointer. Thus, retrieving an SQL <code>REF</code> value as\n a <code>Ref</code> object does not materialize\n the attributes of the structured type on the client.\n <P>\n A <code>Ref</code> object can be stored in the database using the \n <code>PreparedStatement.setRef</code> method.\n <p>\n All methods on the <code>Ref</code> interface must be fully implemented if the \n JDBC driver supports the data type.\n \n @see Struct\n @since 1.2\n"
14607,method,java/sql/Ref/getBaseTypeName/," Retrieves the fully-qualified SQL name of the SQL structured type that\n this <code>Ref</code> object references.\n \n @return the fully-qualified SQL name of the referenced SQL structured type \n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14608,method,java/sql/Ref/getObject/Map," Retrieves the referenced object and maps it to a Java type\n using the given type map.\n\n @param map a <code>java.util.Map</code> object that contains \n        the mapping to use (the fully-qualified name of the SQL\n        structured type being referenced and the class object for\n        <code>SQLData</code> implementation to which the SQL\n        structured type will be mapped)\n @return  a Java <code>Object</code> that is the custom mapping for \n          the SQL structured type to which this <code>Ref</code>\n          object refers\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n @see #setObject\n"
14609,method,java/sql/Ref/getObject/," Retrieves the SQL structured type instance referenced by\n this <code>Ref</code> object.  If the connection's type map has an entry\n for the structured type, the instance will be custom mapped to\n the Java class indicated in the type map.  Otherwise, the\n structured type instance will be mapped to a <code>Struct</code> object.\n\n @return  a Java <code>Object</code> that is the mapping for \n          the SQL structured type to which this <code>Ref</code>\n          object refers\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n @see #setObject\n"
14610,method,java/sql/Ref/setObject/Object," Sets the structured type value that this <code>Ref</code>\n object references to the given instance of <code>Object</code>.\n The driver converts this to an SQL structured type when it\n sends it to the database.\n\n @param value an <code>Object</code> representing the SQL \n        structured type instance that this\n        <code>Ref</code> object will reference\n @exception SQLException if a database access error occurs\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n @see #getObject()\n @see #getObject(Map)\n @see PreparedStatement#setObject(int, Object)\n @see CallableStatement#setObject(String, Object)\n"
14613,method,java/sql/PreparedStatement/executeUpdate/," Executes the SQL statement in this <code>PreparedStatement</code> object,\n which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n <code>DELETE</code>; or an SQL statement that returns nothing, \n such as a DDL statement.\n\n @return either (1) the row count for SQL Data Manipulation Language (DML) statements\n         or (2) 0 for SQL statements that return nothing\n @exception SQLException if a database access error occurs;\n this method is called on a closed  <code>PreparedStatement</code> \n or the SQL\n            statement returns a <code>ResultSet</code> object\n"
14615,method,java/sql/PreparedStatement/setBoolean/int;boolean," Sets the designated parameter to the given Java <code>boolean</code> value.\n The driver converts this\n to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; \n if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14616,method,java/sql/PreparedStatement/setByte/int;byte," Sets the designated parameter to the given Java <code>byte</code> value.  \n The driver converts this\n to an SQL <code>TINYINT</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14617,method,java/sql/PreparedStatement/setShort/int;short," Sets the designated parameter to the given Java <code>short</code> value. \n The driver converts this\n to an SQL <code>SMALLINT</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or\n this method is called on a closed <code>PreparedStatement</code>\n"
14618,method,java/sql/PreparedStatement/setInt/int;int," Sets the designated parameter to the given Java <code>int</code> value.  \n The driver converts this\n to an SQL <code>INTEGER</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14619,method,java/sql/PreparedStatement/setLong/int;long," Sets the designated parameter to the given Java <code>long</code> value. \n The driver converts this\n to an SQL <code>BIGINT</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14620,method,java/sql/PreparedStatement/setFloat/int;float," Sets the designated parameter to the given Java <code>float</code> value. \n The driver converts this\n to an SQL <code>REAL</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14621,method,java/sql/PreparedStatement/setDouble/int;double," Sets the designated parameter to the given Java <code>double</code> value.  \n The driver converts this\n to an SQL <code>DOUBLE</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14622,method,java/sql/PreparedStatement/setBigDecimal/int;BigDecimal," Sets the designated parameter to the given <code>java.math.BigDecimal</code> value.  \n The driver converts this to an SQL <code>NUMERIC</code> value when\n it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14623,method,java/sql/PreparedStatement/setString/int;String," Sets the designated parameter to the given Java <code>String</code> value. \n The driver converts this\n to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value\n (depending on the argument's\n size relative to the driver's limits on <code>VARCHAR</code> values)\n when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14624,method,java/sql/PreparedStatement/setBytes/int;byte[]," Sets the designated parameter to the given Java array of bytes.  The driver converts\n this to an SQL <code>VARBINARY</code> or <code>LONGVARBINARY</code>\n (depending on the argument's size relative to the driver's limits on\n <code>VARBINARY</code> values) when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value \n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14625,method,java/sql/PreparedStatement/setDate/int;Date," Sets the designated parameter to the given <code>java.sql.Date</code> value\n using the default time zone of the virtual machine that is running\n the application. \n The driver converts this\n to an SQL <code>DATE</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14626,method,java/sql/PreparedStatement/setTime/int;Time," Sets the designated parameter to the given <code>java.sql.Time</code> value.  \n The driver converts this\n to an SQL <code>TIME</code> value when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14627,method,java/sql/PreparedStatement/setTimestamp/int;Timestamp," Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.  \n The driver\n converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the\n database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value \n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>     "
14628,method,java/sql/PreparedStatement/setAsciiStream/int;InputStream;int," Sets the designated parameter to the given input stream, which will have \n the specified number of bytes.\n When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code>. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the Java input stream that contains the ASCII parameter value\n @param length the number of bytes in the stream \n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14630,method,java/sql/PreparedStatement/setBinaryStream/int;InputStream;int," Sets the designated parameter to the given input stream, which will have \n the specified number of bytes.\n When a very large binary value is input to a <code>LONGVARBINARY</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code> object. The data will be read from the \n stream as needed until end-of-file is reached.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the java input stream which contains the binary parameter value\n @param length the number of bytes in the stream \n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14631,method,java/sql/PreparedStatement/clearParameters/," Clears the current parameter values immediately.\n <P>In general, parameter values remain in force for repeated use of a\n statement. Setting a parameter value automatically clears its\n previous value.  However, in some cases it is useful to immediately\n release the resources used by the current parameter values; this can\n be done by calling the method <code>clearParameters</code>.\n\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n"
14632,method,java/sql/PreparedStatement/setObject/int;Object;int," Sets the value of the designated parameter with the given object.\n This method is like the method <code>setObject</code>\n above, except that it assumes a scale of zero.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the object containing the input parameter value\n @param targetSqlType the SQL type (as defined in java.sql.Types) to be \n                      sent to the database\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is\n a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>, \n <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>, \n <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n or  <code>STRUCT</code> data type and the JDBC driver does not support\n this data type\n @see Types\n"
14635,method,java/sql/PreparedStatement/addBatch/," Adds a set of parameters to this <code>PreparedStatement</code>\n object's batch of commands.\n \n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @see Statement#addBatch\n @since 1.2\n"
14636,method,java/sql/PreparedStatement/setCharacterStream/int;Reader;int," Sets the designated parameter to the given <code>Reader</code>\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param reader the <code>java.io.Reader</code> object that contains the \n        Unicode data\n @param length the number of characters in the stream \n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @since 1.2\n"
14637,method,java/sql/PreparedStatement/setRef/int;Ref," Sets the designated parameter to the given\n  <code>REF(&lt;structured-type&gt;)</code> value.\n The driver converts this to an SQL <code>REF</code> value when it\n sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x an SQL <code>REF</code> value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.2\n"
14638,method,java/sql/PreparedStatement/setBlob/int;Blob," Sets the designated parameter to the given <code>java.sql.Blob</code> object.\n The driver converts this to an SQL <code>BLOB</code> value when it\n sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.2\n"
14639,method,java/sql/PreparedStatement/setClob/int;Clob," Sets the designated parameter to the given <code>java.sql.Clob</code> object.\n The driver converts this to an SQL <code>CLOB</code> value when it\n sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.2\n"
14640,method,java/sql/PreparedStatement/setArray/int;Array," Sets the designated parameter to the given <code>java.sql.Array</code> object.\n The driver converts this to an SQL <code>ARRAY</code> value when it\n sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x an <code>Array</code> object that maps an SQL <code>ARRAY</code> value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.2\n"
14641,method,java/sql/PreparedStatement/getMetaData/," Retrieves a <code>ResultSetMetaData</code> object that contains\n information about the columns of the <code>ResultSet</code> object\n that will be returned when this <code>PreparedStatement</code> object \n is executed.\n <P>\n Because a <code>PreparedStatement</code> object is precompiled, it is\n possible to know about the <code>ResultSet</code> object that it will\n return without having to execute it.  Consequently, it is possible\n to invoke the method <code>getMetaData</code> on a\n <code>PreparedStatement</code> object rather than waiting to execute\n it and then invoking the <code>ResultSet.getMetaData</code> method\n on the <code>ResultSet</code> object that is returned.\n <P>\n <B>NOTE:</B> Using this method may be expensive for some drivers due\n to the lack of underlying DBMS support.\n\n @return the description of a <code>ResultSet</code> object's columns or\n         <code>null</code> if the driver cannot return a\n         <code>ResultSetMetaData</code> object\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
14642,method,java/sql/PreparedStatement/setDate/int;Date;Calendar," Sets the designated parameter to the given <code>java.sql.Date</code> value,\n using the given <code>Calendar</code> object.  The driver uses\n the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,\n which the driver then sends to the database.  With \n a <code>Calendar</code> object, the driver can calculate the date\n taking into account a custom timezone.  If no\n <code>Calendar</code> object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the date\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @since 1.2\n"
14643,method,java/sql/PreparedStatement/setTime/int;Time;Calendar," Sets the designated parameter to the given <code>java.sql.Time</code> value,\n using the given <code>Calendar</code> object.  The driver uses\n the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,\n which the driver then sends to the database.  With \n a <code>Calendar</code> object, the driver can calculate the time\n taking into account a custom timezone.  If no\n <code>Calendar</code> object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the time\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @since 1.2\n"
14644,method,java/sql/PreparedStatement/setTimestamp/int;Timestamp;Calendar," Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,\n using the given <code>Calendar</code> object.  The driver uses\n the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,\n which the driver then sends to the database.  With a\n  <code>Calendar</code> object, the driver can calculate the timestamp\n taking into account a custom timezone.  If no\n <code>Calendar</code> object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value \n @param cal the <code>Calendar</code> object the driver will use\n            to construct the timestamp\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @since 1.2\n"
14646,method,java/sql/PreparedStatement/setURL/int;URL," Sets the designated parameter to the given <code>java.net.URL</code> value. \n The driver converts this to an SQL <code>DATALINK</code> value\n when it sends it to the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the <code>java.net.URL</code> object to be set\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.4\n"
14647,method,java/sql/PreparedStatement/getParameterMetaData/," Retrieves the number, types and properties of this \n <code>PreparedStatement</code> object's parameters.\n\n @return a <code>ParameterMetaData</code> object that contains information\n         about the number, types and properties for each \n  parameter marker of this <code>PreparedStatement</code> object\n @exception SQLException if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @see ParameterMetaData\n @since 1.4\n"
14648,method,java/sql/PreparedStatement/setRowId/int;RowId," Sets the designated parameter to the given <code>java.sql.RowId</code> object. The\n driver converts this to a SQL <code>ROWID</code> value when it sends it\n to the database\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the parameter value\n @throws SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n\n @since 1.6\n"
14649,method,java/sql/PreparedStatement/setNString/int;String," Sets the designated paramter to the given <code>String</code> object.\n The driver converts this to a SQL <code>NCHAR</code> or\n <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n (depending on the argument's\n size relative to the driver's limits on <code>NVARCHAR</code> values)\n when it sends it to the database.\n\n @param parameterIndex of the first parameter is 1, the second is 2, ...\n @param value the parameter value\n @throws SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; if a database access error occurs; or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.6\n"
14650,method,java/sql/PreparedStatement/setNCharacterStream/int;Reader;long," Sets the designated parameter to a <code>Reader</code> object. The\n <code>Reader</code> reads the data till end-of-file is reached. The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n @param parameterIndex of the first parameter is 1, the second is 2, ...\n @param value the parameter value\n @param length the number of characters in the parameter data.\n @throws SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; if a database access error occurs; or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.6\n"
14651,method,java/sql/PreparedStatement/setNClob/int;NClob," Sets the designated parameter to a <code>java.sql.NClob</code> object. The driver converts this to a\n SQL <code>NCLOB</code> value when it sends it to the database.\n @param parameterIndex of the first parameter is 1, the second is 2, ...\n @param value the parameter value\n @throws SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; if a database access error occurs; or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.6\n"
14655,method,java/sql/PreparedStatement/setSQLXML/int;SQLXML," Sets the designated parameter to the given <code>java.sql.SQLXML</code> object.\n The driver converts this to an\n SQL <code>XML</code> value when it sends it to the database.\n <p>\n\n @param parameterIndex index of the first parameter is 1, the second is 2, ...\n @param xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value\n @throws SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs; \n  this method is called on a closed <code>PreparedStatement</code> \n or the <code>java.xml.transform.Result</code>,\n  <code>Writer</code> or <code>OutputStream</code> has not been closed for \n the <code>SQLXML</code> object \n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n\n @since 1.6\n"
14657,method,java/sql/PreparedStatement/setAsciiStream/int;InputStream;long," Sets the designated parameter to the given input stream, which will have \n the specified number of bytes.\n When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code>. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the Java input stream that contains the ASCII parameter value\n @param length the number of bytes in the stream \n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @since 1.6\n"
14658,method,java/sql/PreparedStatement/setBinaryStream/int;InputStream;long," Sets the designated parameter to the given input stream, which will have \n the specified number of bytes.\n When a very large binary value is input to a <code>LONGVARBINARY</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code> object. The data will be read from the \n stream as needed until end-of-file is reached.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the java input stream which contains the binary parameter value\n @param length the number of bytes in the stream \n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @since 1.6\n"
14659,method,java/sql/PreparedStatement/setCharacterStream/int;Reader;long," Sets the designated parameter to the given <code>Reader</code>\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param reader the <code>java.io.Reader</code> object that contains the \n        Unicode data\n @param length the number of characters in the stream \n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @since 1.6\n"
14660,method,java/sql/PreparedStatement/setAsciiStream/int;InputStream," Sets the designated parameter to the given input stream.\n When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code>. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>setAsciiStream</code> which takes a length parameter. \n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the Java input stream that contains the ASCII parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.6\n"
14661,method,java/sql/PreparedStatement/setBinaryStream/int;InputStream," Sets the designated parameter to the given input stream.\n When a very large binary value is input to a <code>LONGVARBINARY</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code> object. The data will be read from the \n stream as needed until end-of-file is reached.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>setBinaryStream</code> which takes a length parameter. \n\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @param x the java input stream which contains the binary parameter value\n @exception SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.6\n"
14665,method,java/sql/PreparedStatement/setBlob/int;InputStream," Sets the designated parameter to a <code>InputStream</code> object. \n This method differs from the <code>setBinaryStream (int, InputStream)</code>\n method because it informs the driver that the parameter value should be\n sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n the driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>setBlob</code> which takes a length parameter.\n\n @param parameterIndex index of the first parameter is 1,\n the second is 2, ...\n @param inputStream An object that contains the data to set the parameter\n value to.\n @throws SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; if a database access error occurs; \n this method is called on a closed <code>PreparedStatement</code> or\n if parameterIndex does not correspond\n to a parameter marker in the SQL statement,  \n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n\n @since 1.6\n"
14666,method,java/sql/PreparedStatement/setNClob/int;Reader," Sets the designated parameter to a <code>Reader</code> object.  \n This method differs from the <code>setCharacterStream (int, Reader)</code> method\n because it informs the driver that the parameter value should be sent to\n the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>setNClob</code> which takes a length parameter.\n\n @param parameterIndex index of the first parameter is 1, the second is 2, ...\n @param reader An object that contains the data to set the parameter value to.\n @throws SQLException if parameterIndex does not correspond to a parameter\n marker in the SQL statement; \n if the driver does not support national character sets;\n if the driver can detect that a data conversion\n  error could occur;  if a database access error occurs or \n this method is called on a closed <code>PreparedStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n\n @since 1.6\n"
14667,interface,java/sql/ParameterMetaData," An object that can be used to get information about the types \n and properties for each parameter marker in a \n <code>PreparedStatement</code> object. For some queries and driver \n implementations, the data that would be returned by a <code>ParameterMetaData</code> \n object may not be available until the <code>PreparedStatement</code> has \n been executed.\n<p>\nSome driver implementations may not be able to provide information about the \ntypes and properties for each parameter marker in a <code>CallableStatement</code> \nobject.\n\n @since 1.4\n"
14668,method,java/sql/ParameterMetaData/getParameterCount/," Retrieves the number of parameters in the <code>PreparedStatement</code> \n object for which this <code>ParameterMetaData</code> object contains\n information.\n\n @return the number of parameters\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14669,method,java/sql/ParameterMetaData/isNullable/int," Retrieves whether null values are allowed in the designated parameter.\n\n @param param the first parameter is 1, the second is 2, ...\n @return the nullability status of the given parameter; one of \n        <code>ParameterMetaData.parameterNoNulls</code>, \n        <code>ParameterMetaData.parameterNullable</code>, or \n        <code>ParameterMetaData.parameterNullableUnknown</code>\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14671,method,java/sql/ParameterMetaData/getPrecision/int," Retrieves the designated parameter's specified column size.\n  \n <P>The returned value represents the maximum column size for the given parameter. \n For numeric data, this is the maximum precision.  For character data, this is the length in characters. \n For datetime datatypes, this is the length in characters of the String representation (assuming the \n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, \n this is the length in bytes. 0 is returned for data types where the\n column size is not applicable.\n\n @param param the first parameter is 1, the second is 2, ...\n @return precision\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14672,method,java/sql/ParameterMetaData/getScale/int," Retrieves the designated parameter's number of digits to right of the decimal point.\n 0 is returned for data types where the scale is not applicable.\n\n @param param the first parameter is 1, the second is 2, ...\n @return scale\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14673,method,java/sql/ParameterMetaData/getParameterType/int," Retrieves the designated parameter's SQL type.\n\n @param param the first parameter is 1, the second is 2, ...\n @return SQL type from <code>java.sql.Types</code>\n @exception SQLException if a database access error occurs\n @since 1.4\n @see Types\n"
14674,method,java/sql/ParameterMetaData/getParameterTypeName/int," Retrieves the designated parameter's database-specific type name.\n\n @param param the first parameter is 1, the second is 2, ...\n @return type the name used by the database. If the parameter type is\n a user-defined type, then a fully-qualified type name is returned.\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14676,method,java/sql/ParameterMetaData/getParameterMode/int," Retrieves the designated parameter's mode.\n\n @param param the first parameter is 1, the second is 2, ...\n @return mode of the parameter; one of \n        <code>ParameterMetaData.parameterModeIn</code>,\n        <code>ParameterMetaData.parameterModeOut</code>, or\n        <code>ParameterMetaData.parameterModeInOut</code>\n        <code>ParameterMetaData.parameterModeUnknown</code>.\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14684,interface,java/sql/NClob," The mapping in the Java<sup><font size=-2>TM</font></sup> programming language\n for the SQL <code>NCLOB</code> type.\n An SQL <code>NCLOB</code> is a built-in type\n that stores a Character Large Object using the National Character Set\n  as a column value in a row of  a database table.\n <P>The <code>NClob</code> interface extends the <code>Clob</code> interface\n which provides provides methods for getting the\n length of an SQL <code>NCLOB</code> value,\n for materializing a <code>NCLOB</code> value on the client, and for\n searching for a substring or <code>NCLOB</code> object within a\n <code>NCLOB</code> value. A <code>NClob</code> object, just like a <code>Clob</code> object, is valid for the duration\n of the transaction in which it was created.\n Methods in the interfaces {@link ResultSet},\n {@link CallableStatement}, and {@link PreparedStatement}, such as\n <code>getNClob</code> and <code>setNClob</code> allow a programmer to\n access an SQL <code>NCLOB</code> value.  In addition, this interface\n has methods for updating a <code>NCLOB</code> value.\n <p>\n All methods on the <code>NClob</code> interface must be fully implemented if the \n JDBC driver supports the data type.\n\n @since 1.6\n"
14685,class,java/sql/DriverPropertyInfo," <p>Driver properties for making a connection. The\n <code>DriverPropertyInfo</code> class is of interest only to advanced programmers\n who need to interact with a Driver via the method\n <code>getDriverProperties</code> to discover\n and supply properties for connections.\n"
14688,field,java/sql/DriverPropertyInfo/description," A brief description of the property, which may be null.\n"
14690,field,java/sql/DriverPropertyInfo/value," The <code>value</code> field specifies the current value of \n the property, based on a combination of the information\n supplied to the method <code>getPropertyInfo</code>, the\n Java environment, and the driver-supplied default values.  This field\n may be null if no value is known.\n"
14691,field,java/sql/DriverPropertyInfo/choices," An array of possible values if the value for the field \n <code>DriverPropertyInfo.value</code> may be selected\n from a particular set of values; otherwise null.\n"
14694,method,java/sql/DriverManager/setLogWriter/PrintWriter," Sets the logging/tracing <code>PrintWriter</code> object\n that is used by the <code>DriverManager</code> and all drivers.\n <P>\n There is a minor versioning problem created by the introduction\n of the method <code>setLogWriter</code>.  The \n method <code>setLogWriter</code> cannot create a <code>PrintStream</code> object\n that will be returned by <code>getLogStream</code>---the Java platform does\n not provide a backward conversion.  As a result, a new application\n that uses <code>setLogWriter</code> and also uses a JDBC 1.0 driver that uses\n <code>getLogStream</code> will likely not see debugging information written \n by that driver.\n<P>\n Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks\n to see that there is an <code>SQLPermission</code> object before setting\n the logging stream.  If a <code>SecurityManager</code> exists and its\n <code>checkPermission</code> method denies setting the log writer, this\n method throws a <code>java.lang.SecurityException</code>.\n\n @param out the new logging/tracing <code>PrintStream</code> object;\n      <code>null</code> to disable logging and tracing\n @throws SecurityException\n    if a security manager exists and its\n    <code>checkPermission</code> method denies\n    setting the log writer\n\n @see SecurityManager#checkPermission\n @see #getLogWriter\n @since 1.2\n"
14696,method,java/sql/DriverManager/getConnection/String;String;String," Attempts to establish a connection to the given database URL.\n The <code>DriverManager</code> attempts to select an appropriate driver from\n the set of registered JDBC drivers.\n\n @param url a database url of the form \n <code>jdbc:<em>subprotocol</em>:<em>subname</em></code>\n @param user the database user on whose behalf the connection is being\n   made\n @param password the user's password\n @return a connection to the URL \n @exception SQLException if a database access error occurs\n"
14697,method,java/sql/DriverManager/getConnection/String," Attempts to establish a connection to the given database URL.\n The <code>DriverManager</code> attempts to select an appropriate driver from\n the set of registered JDBC drivers.\n\n @param url a database url of the form \n  <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>\n @return a connection to the URL \n @exception SQLException if a database access error occurs\n"
14698,method,java/sql/DriverManager/getDriver/String," Attempts to locate a driver that understands the given URL.\n The <code>DriverManager</code> attempts to select an appropriate driver from\n the set of registered JDBC drivers. \n\n @param url a database URL of the form \n     <code>jdbc:<em>subprotocol</em>:<em>subname</em></code>\n @return a <code>Driver</code> object representing a driver\n that can connect to the given URL \n @exception SQLException if a database access error occurs\n"
14700,method,java/sql/DriverManager/deregisterDriver/Driver," Drops a driver from the <code>DriverManager</code>'s list. \n  Applets can only deregister drivers from their own classloaders.\n\n @param driver the JDBC Driver to drop \n @exception SQLException if a database access error occurs\n"
14701,method,java/sql/DriverManager/getDrivers/," Retrieves an Enumeration with all of the currently loaded JDBC drivers\n to which the current caller has access.\n\n <P><B>Note:</B> The classname of a driver can be found using\n <CODE>d.getClass().getName()</CODE>\n\n @return the list of JDBC Drivers loaded by the caller's class loader\n"
14704,method,java/sql/DriverManager/setLogStream/PrintStream," Sets the logging/tracing PrintStream that is used\n by the <code>DriverManager</code>\n and all drivers.\n<P>\n In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks\n to see that there is an <code>SQLPermission</code> object before setting\n the logging stream.  If a <code>SecurityManager</code> exists and its\n <code>checkPermission</code> method denies setting the log writer, this\n method throws a <code>java.lang.SecurityException</code>.\n\n @param out the new logging/tracing PrintStream; to disable, set to <code>null</code>\n @deprecated\n @throws SecurityException if a security manager exists and its\n    <code>checkPermission</code> method denies setting the log stream\n\n @see SecurityManager#checkPermission\n @see #getLogStream\n"
14709,method,java/sql/Driver/acceptsURL/String," Retrieves whether the driver thinks that it can open a connection\n to the given URL.  Typically drivers will return <code>true</code> if they\n understand the subprotocol specified in the URL and <code>false</code> if\n they do not.\n\n @param url the URL of the database\n @return <code>true</code> if this driver understands the given URL;\n         <code>false</code> otherwise  \n @exception SQLException if a database access error occurs\n"
14711,method,java/sql/Driver/getMajorVersion/," Retrieves the driver's major version number. Initially this should be 1.\n\n @return this driver's major version number\n"
14712,method,java/sql/Driver/getMinorVersion/," Gets the driver's minor version number. Initially this should be 0.\n @return this driver's minor version number\n"
14714,class,java/sql/Date," <P>A thin wrapper around a millisecond value that allows\n JDBC to identify this as an SQL <code>DATE</code> value.  A \n milliseconds value represents the number of milliseconds that \n have passed since January 1, 1970 00:00:00.000 GMT.\n <p>\n To conform with the definition of SQL <code>DATE</code>, the \n millisecond values wrapped by a <code>java.sql.Date</code> instance \n must be 'normalized' by setting the \n hours, minutes, seconds, and milliseconds to zero in the particular\n time zone with which the instance is associated.\n"
14715,method,java/sql/Date/setTime/long," Sets an existing <code>Date</code> object \n using the given milliseconds time value. \n If the given milliseconds value contains time information, \n the driver will set the time components to the\n time in the default time zone (the time zone of the Java virtual\n machine running the application) that corresponds to zero GMT.\n\n @param date milliseconds since January 1, 1970, 00:00:00 GMT not\n        to exceed the milliseconds representation for the year 8099.\n        A negative number indicates the number of milliseconds\n        before January 1, 1970, 00:00:00 GMT.\n"
14725,method,java/sql/Date/Date/long," Constructs a <code>Date</code> object using the given milliseconds \n time value.  If the given milliseconds value contains time \n information, the driver will set the time components to the\n time in the default time zone (the time zone of the Java virtual\n machine running the application) that corresponds to zero GMT.\n\n @param date milliseconds since January 1, 1970, 00:00:00 GMT not\n        to exceed the milliseconds representation for the year 8099.\n        A negative number indicates the number of milliseconds\n        before January 1, 1970, 00:00:00 GMT.\n"
14727,method,java/sql/DatabaseMetaData/allProceduresAreCallable/," Retrieves whether the current user can call all the procedures \n returned by the method <code>getProcedures</code>.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14728,method,java/sql/DatabaseMetaData/allTablesAreSelectable/," Retrieves whether the current user can use all the tables returned \n by the method <code>getTables</code> in a <code>SELECT</code> \n statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14729,method,java/sql/DatabaseMetaData/getURL/," Retrieves the URL for this DBMS.\n\n @return the URL for this DBMS or <code>null</code> if it cannot be \n          generated\n @exception SQLException if a database access error occurs\n"
14730,method,java/sql/DatabaseMetaData/getUserName/," Retrieves the user name as known to this database.\n\n @return the database user name\n @exception SQLException if a database access error occurs\n"
14731,method,java/sql/DatabaseMetaData/isReadOnly/," Retrieves whether this database is in read-only mode.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14732,method,java/sql/DatabaseMetaData/nullsAreSortedHigh/," Retrieves whether <code>NULL</code> values are sorted high.\n Sorted high means that <code>NULL</code> values\n sort higher than any other value in a domain.  In an ascending order,\n if this method returns <code>true</code>,  <code>NULL</code> values\n will appear at the end. By contrast, the method \n <code>nullsAreSortedAtEnd</code> indicates whether <code>NULL</code> values\n are sorted at the end regardless of sort order.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14733,method,java/sql/DatabaseMetaData/nullsAreSortedLow/," Retrieves whether <code>NULL</code> values are sorted low.\n Sorted low means that <code>NULL</code> values\n sort lower than any other value in a domain.  In an ascending order,\n if this method returns <code>true</code>,  <code>NULL</code> values\n will appear at the beginning. By contrast, the method \n <code>nullsAreSortedAtStart</code> indicates whether <code>NULL</code> values\n are sorted at the beginning regardless of sort order.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14734,method,java/sql/DatabaseMetaData/nullsAreSortedAtStart/," Retrieves whether <code>NULL</code> values are sorted at the start regardless \n of sort order.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14735,method,java/sql/DatabaseMetaData/nullsAreSortedAtEnd/," Retrieves whether <code>NULL</code> values are sorted at the end regardless of \n sort order.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14736,method,java/sql/DatabaseMetaData/getDatabaseProductName/," Retrieves the name of this database product.\n\n @return database product name\n @exception SQLException if a database access error occurs\n"
14737,method,java/sql/DatabaseMetaData/getDatabaseProductVersion/," Retrieves the version number of this database product.\n\n @return database version number\n @exception SQLException if a database access error occurs\n"
14738,method,java/sql/DatabaseMetaData/getDriverName/," Retrieves the name of this JDBC driver.\n\n @return JDBC driver name\n @exception SQLException if a database access error occurs\n"
14739,method,java/sql/DatabaseMetaData/getDriverVersion/," Retrieves the version number of this JDBC driver as a <code>String</code>.\n\n @return JDBC driver version\n @exception SQLException if a database access error occurs\n"
14742,method,java/sql/DatabaseMetaData/usesLocalFiles/," Retrieves whether this database stores tables in a local file.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14743,method,java/sql/DatabaseMetaData/usesLocalFilePerTable/," Retrieves whether this database uses a file for each table.\n\n @return <code>true</code> if this database uses a local file for each table;\n         <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14744,method,java/sql/DatabaseMetaData/supportsMixedCaseIdentifiers/," Retrieves whether this database treats mixed case unquoted SQL identifiers as\n case sensitive and as a result stores them in mixed case.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14745,method,java/sql/DatabaseMetaData/storesUpperCaseIdentifiers/," Retrieves whether this database treats mixed case unquoted SQL identifiers as\n case insensitive and stores them in upper case.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14746,method,java/sql/DatabaseMetaData/storesLowerCaseIdentifiers/," Retrieves whether this database treats mixed case unquoted SQL identifiers as\n case insensitive and stores them in lower case.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14747,method,java/sql/DatabaseMetaData/storesMixedCaseIdentifiers/," Retrieves whether this database treats mixed case unquoted SQL identifiers as\n case insensitive and stores them in mixed case.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14748,method,java/sql/DatabaseMetaData/supportsMixedCaseQuotedIdentifiers/," Retrieves whether this database treats mixed case quoted SQL identifiers as\n case sensitive and as a result stores them in mixed case.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14749,method,java/sql/DatabaseMetaData/storesUpperCaseQuotedIdentifiers/," Retrieves whether this database treats mixed case quoted SQL identifiers as\n case insensitive and stores them in upper case.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14750,method,java/sql/DatabaseMetaData/storesLowerCaseQuotedIdentifiers/," Retrieves whether this database treats mixed case quoted SQL identifiers as\n case insensitive and stores them in lower case.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14751,method,java/sql/DatabaseMetaData/storesMixedCaseQuotedIdentifiers/," Retrieves whether this database treats mixed case quoted SQL identifiers as\n case insensitive and stores them in mixed case.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14752,method,java/sql/DatabaseMetaData/getIdentifierQuoteString/," Retrieves the string used to quote SQL identifiers.\n This method returns a space " " if identifier quoting is not supported.\n\n @return the quoting string or a space if quoting is not supported\n @exception SQLException if a database access error occurs\n"
14753,method,java/sql/DatabaseMetaData/getSQLKeywords/," Retrieves a comma-separated list of all of this database's SQL keywords\n that are NOT also SQL:2003 keywords.\n\n @return the list of this database's keywords that are not also\n         SQL:2003 keywords\n @exception SQLException if a database access error occurs\n"
14754,method,java/sql/DatabaseMetaData/getNumericFunctions/," Retrieves a comma-separated list of math functions available with\n this database.  These are the Open /Open CLI math function names used in \n the JDBC function escape clause.\n\n @return the list of math functions supported by this database\n @exception SQLException if a database access error occurs\n"
14755,method,java/sql/DatabaseMetaData/getStringFunctions/," Retrieves a comma-separated list of string functions available with\n this database.  These are the  Open Group CLI string function names used \n in the JDBC function escape clause.\n\n @return the list of string functions supported by this database \n @exception SQLException if a database access error occurs\n"
14756,method,java/sql/DatabaseMetaData/getSystemFunctions/," Retrieves a comma-separated list of system functions available with\n this database.  These are the  Open Group CLI system function names used \n in the JDBC function escape clause.\n\n @return a list of system functions supported by this database\n @exception SQLException if a database access error occurs\n"
14757,method,java/sql/DatabaseMetaData/getTimeDateFunctions/," Retrieves a comma-separated list of the time and date functions available \n with this database.\n\n @return the list of time and date functions supported by this database\n @exception SQLException if a database access error occurs\n"
14758,method,java/sql/DatabaseMetaData/getSearchStringEscape/," Retrieves the string that can be used to escape wildcard characters.\n This is the string that can be used to escape '_' or '%' in\n the catalog search parameters that are a pattern (and therefore use one\n of the wildcard characters).\n\n <P>The '_' character represents any single character;\n the '%' character represents any sequence of zero or \n more characters.\n\n @return the string used to escape wildcard characters\n @exception SQLException if a database access error occurs\n"
14759,method,java/sql/DatabaseMetaData/getExtraNameCharacters/," Retrieves all the "extra" characters that can be used in unquoted\n identifier names (those beyond a-z, A-Z, 0-9 and _).\n\n @return the string containing the extra characters \n @exception SQLException if a database access error occurs\n"
14760,method,java/sql/DatabaseMetaData/supportsAlterTableWithAddColumn/," Retrieves whether this database supports <code>ALTER TABLE</code>\n with add column.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14761,method,java/sql/DatabaseMetaData/supportsAlterTableWithDropColumn/," Retrieves whether this database supports <code>ALTER TABLE</code>\n with drop column.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14762,method,java/sql/DatabaseMetaData/supportsColumnAliasing/," Retrieves whether this database supports column aliasing.\n\n <P>If so, the SQL AS clause can be used to provide names for\n computed columns or to provide alias names for columns as\n required.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14763,method,java/sql/DatabaseMetaData/nullPlusNonNullIsNull/," Retrieves whether this database supports concatenations between \n <code>NULL</code> and non-<code>NULL</code> values being \n <code>NULL</code>.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14764,method,java/sql/DatabaseMetaData/supportsConvert/," Retrieves whether this database supports the JDBC scalar function \n <code>CONVERT</code> for the conversion of one JDBC type to another.\n The JDBC types are the generic SQL data types defined \n in <code>java.sql.Types</code>.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14765,method,java/sql/DatabaseMetaData/supportsConvert/int;int," Retrieves whether this database supports the JDBC scalar function \n <code>CONVERT</code> for conversions between the JDBC types <i>fromType</i>\n and <i>toType</i>.  The JDBC types are the generic SQL data types defined \n in <code>java.sql.Types</code>.\n\n @param fromType the type to convert from; one of the type codes from\n        the class <code>java.sql.Types</code>\n @param toType the type to convert to; one of the type codes from \n        the class <code>java.sql.Types</code>\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @see Types\n"
14766,method,java/sql/DatabaseMetaData/supportsTableCorrelationNames/," Retrieves whether this database supports table correlation names.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14767,method,java/sql/DatabaseMetaData/supportsDifferentTableCorrelationNames/," Retrieves whether, when table correlation names are supported, they \n are restricted to being different from the names of the tables.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14768,method,java/sql/DatabaseMetaData/supportsExpressionsInOrderBy/," Retrieves whether this database supports expressions in \n <code>ORDER BY</code> lists.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14769,method,java/sql/DatabaseMetaData/supportsOrderByUnrelated/," Retrieves whether this database supports using a column that is\n not in the <code>SELECT</code> statement in an\n <code>ORDER BY</code> clause.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14770,method,java/sql/DatabaseMetaData/supportsGroupBy/," Retrieves whether this database supports some form of \n <code>GROUP BY</code> clause.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14771,method,java/sql/DatabaseMetaData/supportsGroupByUnrelated/," Retrieves whether this database supports using a column that is\n not in the <code>SELECT</code> statement in a\n <code>GROUP BY</code> clause.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14772,method,java/sql/DatabaseMetaData/supportsGroupByBeyondSelect/," Retrieves whether this database supports using columns not included in\n the <code>SELECT</code> statement in a <code>GROUP BY</code> clause \n provided that all of the columns in the <code>SELECT</code> statement\n are included in the <code>GROUP BY</code> clause.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14773,method,java/sql/DatabaseMetaData/supportsLikeEscapeClause/," Retrieves whether this database supports specifying a\n <code>LIKE</code> escape clause.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14774,method,java/sql/DatabaseMetaData/supportsMultipleResultSets/," Retrieves whether this database supports getting multiple \n <code>ResultSet</code> objects from a single call to the\n method <code>execute</code>.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14775,method,java/sql/DatabaseMetaData/supportsMultipleTransactions/," Retrieves whether this database allows having multiple \n transactions open at once (on different connections).\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14776,method,java/sql/DatabaseMetaData/supportsNonNullableColumns/," Retrieves whether columns in this database may be defined as non-nullable.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14777,method,java/sql/DatabaseMetaData/supportsMinimumSQLGrammar/," Retrieves whether this database supports the ODBC Minimum SQL grammar.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14778,method,java/sql/DatabaseMetaData/supportsCoreSQLGrammar/," Retrieves whether this database supports the ODBC Core SQL grammar.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14779,method,java/sql/DatabaseMetaData/supportsExtendedSQLGrammar/," Retrieves whether this database supports the ODBC Extended SQL grammar.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14780,method,java/sql/DatabaseMetaData/supportsANSI92EntryLevelSQL/," Retrieves whether this database supports the ANSI92 entry level SQL \n grammar.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14781,method,java/sql/DatabaseMetaData/supportsANSI92IntermediateSQL/," Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14782,method,java/sql/DatabaseMetaData/supportsANSI92FullSQL/," Retrieves whether this database supports the ANSI92 full SQL grammar supported.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14783,method,java/sql/DatabaseMetaData/supportsIntegrityEnhancementFacility/," Retrieves whether this database supports the SQL Integrity \n Enhancement Facility.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14784,method,java/sql/DatabaseMetaData/supportsOuterJoins/," Retrieves whether this database supports some form of outer join.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14785,method,java/sql/DatabaseMetaData/supportsFullOuterJoins/," Retrieves whether this database supports full nested outer joins.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14786,method,java/sql/DatabaseMetaData/supportsLimitedOuterJoins/," Retrieves whether this database provides limited support for outer \n joins.  (This will be <code>true</code> if the method \n <code>supportsFullOuterJoins</code> returns <code>true</code>).\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14787,method,java/sql/DatabaseMetaData/getSchemaTerm/," Retrieves the database vendor's preferred term for "schema".\n\n @return the vendor term for "schema"\n @exception SQLException if a database access error occurs\n"
14788,method,java/sql/DatabaseMetaData/getProcedureTerm/," Retrieves the database vendor's preferred term for "procedure".\n\n @return the vendor term for "procedure"\n @exception SQLException if a database access error occurs\n"
14789,method,java/sql/DatabaseMetaData/getCatalogTerm/," Retrieves the database vendor's preferred term for "catalog".\n\n @return the vendor term for "catalog"\n @exception SQLException if a database access error occurs\n"
14790,method,java/sql/DatabaseMetaData/isCatalogAtStart/," Retrieves whether a catalog appears at the start of a fully qualified \n table name.  If not, the catalog appears at the end.\n\n @return <code>true</code> if the catalog name appears at the beginning\n         of a fully qualified table name; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14792,method,java/sql/DatabaseMetaData/supportsSchemasInDataManipulation/," Retrieves whether a schema name can be used in a data manipulation statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14793,method,java/sql/DatabaseMetaData/supportsSchemasInProcedureCalls/," Retrieves whether a schema name can be used in a procedure call statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14794,method,java/sql/DatabaseMetaData/supportsSchemasInTableDefinitions/," Retrieves whether a schema name can be used in a table definition statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14795,method,java/sql/DatabaseMetaData/supportsSchemasInIndexDefinitions/," Retrieves whether a schema name can be used in an index definition statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14796,method,java/sql/DatabaseMetaData/supportsSchemasInPrivilegeDefinitions/," Retrieves whether a schema name can be used in a privilege definition statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14797,method,java/sql/DatabaseMetaData/supportsCatalogsInDataManipulation/," Retrieves whether a catalog name can be used in a data manipulation statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14798,method,java/sql/DatabaseMetaData/supportsCatalogsInProcedureCalls/," Retrieves whether a catalog name can be used in a procedure call statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14799,method,java/sql/DatabaseMetaData/supportsCatalogsInTableDefinitions/," Retrieves whether a catalog name can be used in a table definition statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14800,method,java/sql/DatabaseMetaData/supportsCatalogsInIndexDefinitions/," Retrieves whether a catalog name can be used in an index definition statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14801,method,java/sql/DatabaseMetaData/supportsCatalogsInPrivilegeDefinitions/," Retrieves whether a catalog name can be used in a privilege definition statement.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14802,method,java/sql/DatabaseMetaData/supportsPositionedDelete/," Retrieves whether this database supports positioned <code>DELETE</code>\n statements.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14803,method,java/sql/DatabaseMetaData/supportsPositionedUpdate/," Retrieves whether this database supports positioned <code>UPDATE</code>\n statements.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14804,method,java/sql/DatabaseMetaData/supportsSelectForUpdate/," Retrieves whether this database supports <code>SELECT FOR UPDATE</code>\n statements.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14805,method,java/sql/DatabaseMetaData/supportsStoredProcedures/," Retrieves whether this database supports stored procedure calls \n that use the stored procedure escape syntax.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14806,method,java/sql/DatabaseMetaData/supportsSubqueriesInComparisons/," Retrieves whether this database supports subqueries in comparison \n expressions.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14807,method,java/sql/DatabaseMetaData/supportsSubqueriesInExists/," Retrieves whether this database supports subqueries in \n <code>EXISTS</code> expressions.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14808,method,java/sql/DatabaseMetaData/supportsSubqueriesInIns/," Retrieves whether this database supports subqueries in \n <code>IN</code> expressions.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14809,method,java/sql/DatabaseMetaData/supportsSubqueriesInQuantifieds/," Retrieves whether this database supports subqueries in quantified \n expressions.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14810,method,java/sql/DatabaseMetaData/supportsCorrelatedSubqueries/," Retrieves whether this database supports correlated subqueries.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14811,method,java/sql/DatabaseMetaData/supportsUnion/," Retrieves whether this database supports SQL <code>UNION</code>.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14812,method,java/sql/DatabaseMetaData/supportsUnionAll/," Retrieves whether this database supports SQL <code>UNION ALL</code>.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14813,method,java/sql/DatabaseMetaData/supportsOpenCursorsAcrossCommit/," Retrieves whether this database supports keeping cursors open \n across commits. \n \n @return <code>true</code> if cursors always remain open;\n       <code>false</code> if they might not remain open\n @exception SQLException if a database access error occurs\n"
14814,method,java/sql/DatabaseMetaData/supportsOpenCursorsAcrossRollback/," Retrieves whether this database supports keeping cursors open \n across rollbacks.\n \n @return <code>true</code> if cursors always remain open;\n       <code>false</code> if they might not remain open\n @exception SQLException if a database access error occurs\n"
14815,method,java/sql/DatabaseMetaData/supportsOpenStatementsAcrossCommit/," Retrieves whether this database supports keeping statements open \n across commits.\n \n @return <code>true</code> if statements always remain open;\n       <code>false</code> if they might not remain open\n @exception SQLException if a database access error occurs\n"
14816,method,java/sql/DatabaseMetaData/supportsOpenStatementsAcrossRollback/," Retrieves whether this database supports keeping statements open \n across rollbacks.\n \n @return <code>true</code> if statements always remain open;\n       <code>false</code> if they might not remain open\n @exception SQLException if a database access error occurs\n"
14817,method,java/sql/DatabaseMetaData/getMaxBinaryLiteralLength/," Retrieves the maximum number of hex characters this database allows in an \n inline binary literal.\n\n @return max the maximum length (in hex characters) for a binary literal;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14818,method,java/sql/DatabaseMetaData/getMaxCharLiteralLength/," Retrieves the maximum number of characters this database allows \n for a character literal.\n\n @return the maximum number of characters allowed for a character literal;\n      a result of zero means that there is no limit or the limit is \n      not known\n @exception SQLException if a database access error occurs\n"
14819,method,java/sql/DatabaseMetaData/getMaxColumnNameLength/," Retrieves the maximum number of characters this database allows\n for a column name.\n\n @return the maximum number of characters allowed for a column name;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14820,method,java/sql/DatabaseMetaData/getMaxColumnsInGroupBy/," Retrieves the maximum number of columns this database allows in a \n <code>GROUP BY</code> clause.\n\n @return the maximum number of columns allowed;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14821,method,java/sql/DatabaseMetaData/getMaxColumnsInIndex/," Retrieves the maximum number of columns this database allows in an index.\n\n @return the maximum number of columns allowed;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14822,method,java/sql/DatabaseMetaData/getMaxColumnsInOrderBy/," Retrieves the maximum number of columns this database allows in an \n <code>ORDER BY</code> clause.\n\n @return the maximum number of columns allowed;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14823,method,java/sql/DatabaseMetaData/getMaxColumnsInSelect/," Retrieves the maximum number of columns this database allows in a \n <code>SELECT</code> list.\n\n @return the maximum number of columns allowed;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14824,method,java/sql/DatabaseMetaData/getMaxColumnsInTable/," Retrieves the maximum number of columns this database allows in a table.\n\n @return the maximum number of columns allowed;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14825,method,java/sql/DatabaseMetaData/getMaxConnections/," Retrieves the maximum number of concurrent connections to this\n database that are possible.\n\n @return the maximum number of active connections possible at one time;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14826,method,java/sql/DatabaseMetaData/getMaxCursorNameLength/," Retrieves the maximum number of characters that this database allows in a\n cursor name.\n\n @return the maximum number of characters allowed in a cursor name;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14827,method,java/sql/DatabaseMetaData/getMaxIndexLength/," Retrieves the maximum number of bytes this database allows for an \n index, including all of the parts of the index.\n\n @return the maximum number of bytes allowed; this limit includes the \n      composite of all the constituent parts of the index;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14828,method,java/sql/DatabaseMetaData/getMaxSchemaNameLength/," Retrieves the maximum number of characters that this database allows in a\n schema name.\n\n @return the maximum number of characters allowed in a schema name;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14829,method,java/sql/DatabaseMetaData/getMaxProcedureNameLength/," Retrieves the maximum number of characters that this database allows in a\n procedure name.\n\n @return the maximum number of characters allowed in a procedure name;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14830,method,java/sql/DatabaseMetaData/getMaxCatalogNameLength/," Retrieves the maximum number of characters that this database allows in a\n catalog name.\n\n @return the maximum number of characters allowed in a catalog name;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14831,method,java/sql/DatabaseMetaData/getMaxRowSize/," Retrieves the maximum number of bytes this database allows in\n a single row.\n\n @return the maximum number of bytes allowed for a row; a result of \n         zero means that there is no limit or the limit is not known\n @exception SQLException if a database access error occurs\n"
14832,method,java/sql/DatabaseMetaData/doesMaxRowSizeIncludeBlobs/," Retrieves whether the return value for the method \n <code>getMaxRowSize</code> includes the SQL data types \n <code>LONGVARCHAR</code> and <code>LONGVARBINARY</code>.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14833,method,java/sql/DatabaseMetaData/getMaxStatementLength/," Retrieves the maximum number of characters this database allows in\n an SQL statement.\n\n @return the maximum number of characters allowed for an SQL statement;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14834,method,java/sql/DatabaseMetaData/getMaxStatements/," Retrieves the maximum number of active statements to this database\n that can be open at the same time.\n\n @return the maximum number of statements that can be open at one time;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14835,method,java/sql/DatabaseMetaData/getMaxTableNameLength/," Retrieves the maximum number of characters this database allows in\n a table name.\n\n @return the maximum number of characters allowed for a table name;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14836,method,java/sql/DatabaseMetaData/getMaxTablesInSelect/," Retrieves the maximum number of tables this database allows in a\n <code>SELECT</code> statement.\n\n @return the maximum number of tables allowed in a <code>SELECT</code> \n         statement; a result of zero means that there is no limit or \n         the limit is not known\n @exception SQLException if a database access error occurs\n"
14837,method,java/sql/DatabaseMetaData/getMaxUserNameLength/," Retrieves the maximum number of characters this database allows in\n a user name.\n\n @return the maximum number of characters allowed for a user name;\n      a result of zero means that there is no limit or the limit \n      is not known\n @exception SQLException if a database access error occurs\n"
14838,method,java/sql/DatabaseMetaData/getDefaultTransactionIsolation/," Retrieves this database's default transaction isolation level.  The\n possible values are defined in <code>java.sql.Connection</code>.\n\n @return the default isolation level \n @exception SQLException if a database access error occurs\n @see Connection\n"
14840,method,java/sql/DatabaseMetaData/supportsTransactionIsolationLevel/int," Retrieves whether this database supports the given transaction isolation level.\n\n @param level one of the transaction isolation levels defined in \n         <code>java.sql.Connection</code>\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n @see Connection\n"
14841,method,java/sql/DatabaseMetaData/supportsDataDefinitionAndDataManipulationTransactions/," Retrieves whether this database supports both data definition and \n data manipulation statements within a transaction.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14842,method,java/sql/DatabaseMetaData/supportsDataManipulationTransactionsOnly/," Retrieves whether this database supports only data manipulation \n statements within a transaction.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n"
14843,method,java/sql/DatabaseMetaData/dataDefinitionCausesTransactionCommit/," Retrieves whether a data definition statement within a transaction forces\n the transaction to commit.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14844,method,java/sql/DatabaseMetaData/dataDefinitionIgnoredInTransactions/," Retrieves whether this database ignores a data definition statement \n within a transaction.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n"
14848,method,java/sql/DatabaseMetaData/getSchemas/," Retrieves the schema names available in this database.  The results\n are ordered by <code>TABLE_CATALOG</code> and \n <code>TABLE_SCHEM</code>.\n\n <P>The schema columns are:\n  <OL>\n	<LI><B>TABLE_SCHEM</B> String => schema name\n  <LI><B>TABLE_CATALOG</B> String => catalog name (may be <code>null</code>)\n  </OL>\n\n @return a <code>ResultSet</code> object in which each row is a \n         schema description \n @exception SQLException if a database access error occurs\n\n"
14849,method,java/sql/DatabaseMetaData/getCatalogs/," Retrieves the catalog names available in this database.  The results\n are ordered by catalog name.\n\n <P>The catalog column is:\n  <OL>\n	<LI><B>TABLE_CAT</B> String => catalog name\n  </OL>\n\n @return a <code>ResultSet</code> object in which each row has a \n         single <code>String</code> column that is a catalog name \n @exception SQLException if a database access error occurs\n"
14850,method,java/sql/DatabaseMetaData/getTableTypes/," Retrieves the table types available in this database.  The results\n are ordered by table type.\n\n <P>The table type is:\n  <OL>\n	<LI><B>TABLE_TYPE</B> String => table type.  Typical types are "TABLE",\n			"VIEW",	"SYSTEM TABLE", "GLOBAL TEMPORARY", \n			"LOCAL TEMPORARY", "ALIAS", "SYNONYM".\n  </OL>\n\n @return a <code>ResultSet</code> object in which each row has a \n         single <code>String</code> column that is a table type \n @exception SQLException if a database access error occurs\n"
14860,method,java/sql/DatabaseMetaData/getTypeInfo/," Retrieves a description of all the data types supported by\n this database. They are ordered by DATA_TYPE and then by how\n closely the data type maps to the corresponding JDBC SQL type.\n\n <P>If the database supports SQL distinct types, then getTypeInfo() will return\n a single row with a TYPE_NAME of DISTINCT and a DATA_TYPE of Types.DISTINCT.\n If the database supports SQL structured types, then getTypeInfo() will return\n a single row with a TYPE_NAME of STRUCT and a DATA_TYPE of Types.STRUCT.\n\n <P>If SQL distinct or structured types are supported, then information on the\n individual types may be obtained from the getUDTs() method.\n\n\n\n <P>Each type description has the following columns:\n  <OL>\n	<LI><B>TYPE_NAME</B> String => Type name\n	<LI><B>DATA_TYPE</B> int => SQL data type from java.sql.Types\n	<LI><B>PRECISION</B> int => maximum precision\n	<LI><B>LITERAL_PREFIX</B> String => prefix used to quote a literal \n      (may be <code>null</code>)\n	<LI><B>LITERAL_SUFFIX</B> String => suffix used to quote a literal \n     (may be <code>null</code>)\n	<LI><B>CREATE_PARAMS</B> String => parameters used in creating \n      the type (may be <code>null</code>)\n	<LI><B>NULLABLE</B> short => can you use NULL for this type.\n      <UL>\n      <LI> typeNoNulls - does not allow NULL values\n      <LI> typeNullable - allows NULL values\n      <LI> typeNullableUnknown - nullability unknown\n      </UL>\n	<LI><B>CASE_SENSITIVE</B> boolean=> is it case sensitive.\n	<LI><B>SEARCHABLE</B> short => can you use "WHERE" based on this type:\n      <UL>\n      <LI> typePredNone - No support\n      <LI> typePredChar - Only supported with WHERE .. LIKE\n      <LI> typePredBasic - Supported except for WHERE .. LIKE\n      <LI> typeSearchable - Supported for all WHERE ..\n      </UL>\n	<LI><B>UNSIGNED_ATTRIBUTE</B> boolean => is it unsigned.\n	<LI><B>FIXED_PREC_SCALE</B> boolean => can it be a money value.\n	<LI><B>AUTO_INCREMENT</B> boolean => can it be used for an \n      auto-increment value.\n	<LI><B>LOCAL_TYPE_NAME</B> String => localized version of type name \n      (may be <code>null</code>)\n	<LI><B>MINIMUM_SCALE</B> short => minimum scale supported\n	<LI><B>MAXIMUM_SCALE</B> short => maximum scale supported\n	<LI><B>SQL_DATA_TYPE</B> int => unused\n	<LI><B>SQL_DATETIME_SUB</B> int => unused\n	<LI><B>NUM_PREC_RADIX</B> int => usually 2 or 10\n  </OL>\n\n <p>The PRECISION column represents the maximum column size that the server supports for the given datatype. \n For numeric data, this is the maximum precision.  For character data, this is the length in characters. \n For datetime datatypes, this is the length in characters of the String representation (assuming the \n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, \n this is the length in bytes. Null is returned for data types where the\n column size is not applicable.\n   \n @return a <code>ResultSet</code> object in which each row is an SQL \n         type description \n @exception SQLException if a database access error occurs\n"
14862,method,java/sql/DatabaseMetaData/supportsResultSetType/int," Retrieves whether this database supports the given result set type.\n\n @param type defined in <code>java.sql.ResultSet</code>\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n @see Connection\n @since 1.2\n"
14863,method,java/sql/DatabaseMetaData/supportsResultSetConcurrency/int;int," Retrieves whether this database supports the given concurrency type \n in combination with the given result set type.\n\n @param type defined in <code>java.sql.ResultSet</code>\n @param concurrency type defined in <code>java.sql.ResultSet</code>\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n @see Connection\n @since 1.2\n"
14864,method,java/sql/DatabaseMetaData/ownUpdatesAreVisible/int,"\n Retrieves whether for the given type of <code>ResultSet</code> object,\n the result set's own updates are visible.\n\n @param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @return <code>true</code> if updates are visible for the given result set type;\n        <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14865,method,java/sql/DatabaseMetaData/ownDeletesAreVisible/int," Retrieves whether a result set's own deletes are visible.\n\n @param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @return <code>true</code> if deletes are visible for the given result set type;\n        <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14867,method,java/sql/DatabaseMetaData/othersUpdatesAreVisible/int," Retrieves whether updates made by others are visible.\n\n @param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @return <code>true</code> if updates made by others\n        are visible for the given result set type;\n        <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14868,method,java/sql/DatabaseMetaData/othersDeletesAreVisible/int," Retrieves whether deletes made by others are visible.\n\n @param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @return <code>true</code> if deletes made by others\n        are visible for the given result set type;\n        <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14869,method,java/sql/DatabaseMetaData/othersInsertsAreVisible/int," Retrieves whether inserts made by others are visible.\n\n @param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @return <code>true</code> if inserts made by others\n         are visible for the given result set type;\n         <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14870,method,java/sql/DatabaseMetaData/updatesAreDetected/int," Retrieves whether or not a visible row update can be detected by \n calling the method <code>ResultSet.rowUpdated</code>.\n\n @param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @return <code>true</code> if changes are detected by the result set type;\n         <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14871,method,java/sql/DatabaseMetaData/deletesAreDetected/int," Retrieves whether or not a visible row delete can be detected by \n calling the method <code>ResultSet.rowDeleted</code>.  If the method\n <code>deletesAreDetected</code> returns <code>false</code>, it means that\n deleted rows are removed from the result set.\n\n @param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @return <code>true</code> if deletes are detected by the given result set type;\n         <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14872,method,java/sql/DatabaseMetaData/insertsAreDetected/int," Retrieves whether or not a visible row insert can be detected\n by calling the method <code>ResultSet.rowInserted</code>.\n\n @param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @return <code>true</code> if changes are detected by the specified result\n         set type; <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14873,method,java/sql/DatabaseMetaData/supportsBatchUpdates/," Retrieves whether this database supports batch updates.\n\n @return <code>true</code> if this database supports batch upcates;\n         <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14875,method,java/sql/DatabaseMetaData/getConnection/," Retrieves the connection that produced this metadata object.\n <P>\n @return the connection that produced this metadata object\n @exception SQLException if a database access error occurs\n @since 1.2\n"
14876,method,java/sql/DatabaseMetaData/supportsSavepoints/," Retrieves whether this database supports savepoints.\n\n @return <code>true</code> if savepoints are supported; \n         <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14877,method,java/sql/DatabaseMetaData/supportsNamedParameters/," Retrieves whether this database supports named parameters to callable \n statements.\n\n @return <code>true</code> if named parameters are supported; \n         <code>false</code> otherwise\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14878,method,java/sql/DatabaseMetaData/supportsMultipleOpenResults/," Retrieves whether it is possible to have multiple <code>ResultSet</code> objects\n returned from a <code>CallableStatement</code> object\n simultaneously.\n\n @return <code>true</code> if a <code>CallableStatement</code> object\n         can return multiple <code>ResultSet</code> objects\n         simultaneously; <code>false</code> otherwise\n @exception SQLException if a datanase access error occurs\n @since 1.4\n"
14881,method,java/sql/DatabaseMetaData/getSuperTables/String;String;String," Retrieves a description of the table hierarchies defined in a particular \n schema in this database.\n\n <P>Only supertable information for tables matching the catalog, schema\n and table name are returned. The table name parameter may be a fully-\n qualified name, in which case, the catalog and schemaPattern parameters\n are ignored. If a table does not have a super table, it is not listed here.\n Supertables have to be defined in the same catalog and schema as the \n sub tables. Therefore, the type description does not need to include\n this information for the supertable.\n\n <P>Each type description has the following columns:\n  <OL>\n  <LI><B>TABLE_CAT</B> String => the type's catalog (may be <code>null</code>)\n  <LI><B>TABLE_SCHEM</B> String => type's schema (may be <code>null</code>)\n  <LI><B>TABLE_NAME</B> String => type name\n  <LI><B>SUPERTABLE_NAME</B> String => the direct super type's name\n  </OL>\n\n <P><B>Note:</B> If the driver does not support type hierarchies, an \n empty result set is returned.\n\n @param catalog a catalog name; "" retrieves those without a catalog;\n        <code>null</code> means drop catalog name from the selection criteria\n @param schemaPattern a schema name pattern; "" retrieves those \n        without a schema\n @param tableNamePattern a table name pattern; may be a fully-qualified\n        name\n @return a <code>ResultSet</code> object in which each row is a type description\n @throws SQLException if a database access error occurs\n @see #getSearchStringEscape \n @since 1.4\n"
14883,method,java/sql/DatabaseMetaData/supportsResultSetHoldability/int," Retrieves whether this database supports the given result set holdability.\n\n @param holdability one of the following constants:\n          <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n          <code>ResultSet.CLOSE_CURSORS_AT_COMMIT<code>\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n @see Connection\n @since 1.4\n"
14884,method,java/sql/DatabaseMetaData/getResultSetHoldability/," Retrieves this database's default holdability for <code>ResultSet</code>\n objects.\n\n @return the default holdability; either \n         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14885,method,java/sql/DatabaseMetaData/getDatabaseMajorVersion/," Retrieves the major version number of the underlying database.\n\n @return the underlying database's major version\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14886,method,java/sql/DatabaseMetaData/getDatabaseMinorVersion/," Retrieves the minor version number of the underlying database.\n\n @return underlying database's minor version\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14887,method,java/sql/DatabaseMetaData/getJDBCMajorVersion/," Retrieves the major JDBC version number for this\n driver.\n \n @return JDBC version major number\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14888,method,java/sql/DatabaseMetaData/getJDBCMinorVersion/," Retrieves the minor JDBC version number for this\n driver.\n \n @return JDBC version minor number\n @exception SQLException if a database access error occurs\n @since 1.4\n"
14889,method,java/sql/DatabaseMetaData/getSQLStateType/," Indicates whether the SQLSTATE returned by <code>SQLException.getSQLState</code>\n is X/Open (now known as Open Group) SQL CLI or SQL:2003.\n @return the type of SQLSTATE; one of:\n        sqlStateXOpen or\n        sqlStateSQL\n @throws SQLException if a database access error occurs \n @since 1.4\n"
14890,method,java/sql/DatabaseMetaData/locatorsUpdateCopy/," Indicates whether updates made to a LOB are made on a copy or directly \n to the LOB.\n @return <code>true</code> if updates are made to a copy of the LOB;\n         <code>false</code> if updates are made directly to the LOB\n @throws SQLException if a database access error occurs\n @since 1.4\n"
14891,method,java/sql/DatabaseMetaData/supportsStatementPooling/," Retrieves whether this database supports statement pooling.\n\n @return <code>true</code> if so; <code>false</code> otherwise\n @throws SQLExcpetion if a database access error occurs\n @since 1.4\n"
14892,method,java/sql/DatabaseMetaData/getRowIdLifetime/," Indicates whether or not this data source supports the SQL <code>ROWID</code> type,\n and if so  the lifetime for which a <code>RowId</code> object remains valid. \n <p>\n The returned int values have the following relationship: \n <pre>\n     ROWID_UNSUPPORTED < ROWID_VALID_OTHER < ROWID_VALID_TRANSACTION\n         < ROWID_VALID_SESSION < ROWID_VALID_FOREVER\n </pre>\n so conditional logic such as \n <pre>\n     if (metadata.getRowIdLifetime() > DatabaseMetaData.ROWID_VALID_TRANSACTION)\n </pre>\n can be used. Valid Forever means valid across all Sessions, and valid for \n a Session means valid across all its contained Transactions. \n\n @return the status indicating the lifetime of a <code>RowId</code>\n @throws SQLException if a database access error occurs\n @since 1.6\n"
14894,method,java/sql/DatabaseMetaData/supportsStoredFunctionsUsingCallSyntax/," Retrieves whether this database supports invoking user-defined or vendor functions \n using the stored procedure escape syntax.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n @since 1.6\n"
14895,method,java/sql/DatabaseMetaData/autoCommitFailureClosesAllResultSets/," Retrieves whether a <code>SQLException</code> while autoCommit is <code>true</code> inidcates \n that all open ResultSets are closed, even ones that are holdable.  When a <code>SQLException</code> occurs while\n autocommit is <code>true</code>, it is vendor specific whether the JDBC driver responds with a commit operation, a \n rollback operation, or by doing neither a commit nor a rollback.  A potential result of this difference\n is in whether or not holdable ResultSets are closed.\n\n @return <code>true</code> if so; <code>false</code> otherwise \n @exception SQLException if a database access error occurs\n @since 1.6\n"
14896,method,java/sql/DatabaseMetaData/getClientInfoProperties/," Retrieves a list of the client info properties \n that the driver supports.  The result set contains the following columns\n <p>\n <ol>\n <li><b>NAME</b> String=> The name of the client info property<br>\n <li><b>MAX_LEN</b> int=> The maximum length of the value for the property<br>\n <li><b>DEFAULT_VALUE</b> String=> The default value of the property<br>\n <li><b>DESCRIPTION</b> String=> A description of the property.  This will typically \n 						contain information as to where this property is \n 						stored in the database.\n </ol>\n <p>\n The <code>ResultSet</code> is sorted by the NAME column\n <p>\n @return	A <code>ResultSet</code> object; each row is a supported client info\n property\n <p>\n  @exception SQLException if a database access error occurs\n <p>\n @since 1.6\n"
14914,field,java/sql/DatabaseMetaData/bestRowTemporary," Indicates that the scope of the best row identifier is\n very temporary, lasting only while the\n row is being used.\n <P>\n A possible value for the column\n <code>SCOPE</code>\n in the <code>ResultSet</code> object\n returned by the method <code>getBestRowIdentifier</code>.\n"
14915,field,java/sql/DatabaseMetaData/bestRowTransaction," Indicates that the scope of the best row identifier is\n the remainder of the current transaction.\n <P>\n A possible value for the column\n <code>SCOPE</code>\n in the <code>ResultSet</code> object\n returned by the method <code>getBestRowIdentifier</code>.\n"
14916,field,java/sql/DatabaseMetaData/bestRowSession," Indicates that the scope of the best row identifier is\n the remainder of the current session.\n <P>\n A possible value for the column\n <code>SCOPE</code>\n in the <code>ResultSet</code> object\n returned by the method <code>getBestRowIdentifier</code>.\n"
14917,field,java/sql/DatabaseMetaData/bestRowUnknown," Indicates that the best row identifier may or may not be a pseudo column.\n <P>\n A possible value for the column\n <code>PSEUDO_COLUMN</code>\n in the <code>ResultSet</code> object\n returned by the method <code>getBestRowIdentifier</code>.\n"
14918,field,java/sql/DatabaseMetaData/bestRowNotPseudo," Indicates that the best row identifier is NOT a pseudo column.\n <P>\n A possible value for the column\n <code>PSEUDO_COLUMN</code>\n in the <code>ResultSet</code> object\n returned by the method <code>getBestRowIdentifier</code>.\n"
14919,field,java/sql/DatabaseMetaData/bestRowPseudo," Indicates that the best row identifier is a pseudo column.\n <P>\n A possible value for the column\n <code>PSEUDO_COLUMN</code>\n in the <code>ResultSet</code> object\n returned by the method <code>getBestRowIdentifier</code>.\n"
14920,field,java/sql/DatabaseMetaData/versionColumnUnknown," Indicates that this version column may or may not be a pseudo column.\n <P>\n A possible value for the column\n <code>PSEUDO_COLUMN</code>\n in the <code>ResultSet</code> object\n returned by the method <code>getVersionColumns</code>.\n"
14924,field,java/sql/DatabaseMetaData/importedKeyRestrict," For the column <code>UPDATE_RULE</code>, indicates that\n a primary key may not be updated if it has been imported by\n another table as a foreign key.\n For the column <code>DELETE_RULE</code>, indicates that\n a primary key may not be deleted if it has been imported by\n another table as a foreign key.\n <P>\n A possible value for the columns <code>UPDATE_RULE</code>\n and <code>DELETE_RULE</code> in the\n <code>ResultSet</code> objects returned by the methods\n <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n and <code>getCrossReference</code>.\n"
14935,field,java/sql/DatabaseMetaData/typePredChar," Indicates that the data type \n can be only be used in <code>WHERE</code> search clauses \n that  use <code>LIKE</code> predicates.\n <P>\n A possible value for column <code>SEARCHABLE</code> in the\n <code>ResultSet</code> object returned by the method\n <code>getTypeInfo</code>.\n"
14936,field,java/sql/DatabaseMetaData/typePredBasic," Indicates that the data type can be only be used in <code>WHERE</code> \n search clauses \n that do not use <code>LIKE</code> predicates.\n <P>\n A possible value for column <code>SEARCHABLE</code> in the\n <code>ResultSet</code> object returned by the method\n <code>getTypeInfo</code>.\n"
14960,class,java/sql/DataTruncation," An exception  thrown as a <code>DataTruncation</code> exception\n (on writes) or reported as a \n <code>DataTruncation</code> warning (on reads)\n  when a data values is unexpectedly truncated for reasons other than its having\n  execeeded <code>MaxFieldSize</code>.\n\n <P>The SQLstate for a <code>DataTruncation</code> during read is <code>01004</code>.\n <P>The SQLstate for a <code>DataTruncation</code> during write is <code>22001</code>.\n"
14961,method,java/sql/DataTruncation/getIndex/," Retrieves the index of the column or parameter that was truncated.\n\n <P>This may be -1 if the column or parameter index is unknown, in \n which case the <code>parameter</code> and <code>read</code> fields should be ignored.\n\n @return the index of the truncated paramter or column value\n"
14964,method,java/sql/DataTruncation/getDataSize/," Gets the number of bytes of data that should have been transferred.\n This number may be approximate if data conversions were being\n performed.  The value may be <code>-1</code> if the size is unknown.\n\n @return the number of bytes of data that should have been transferred\n"
14965,method,java/sql/DataTruncation/getTransferSize/," Gets the number of bytes of data actually transferred.\n The value may be <code>-1</code> if the size is unknown.\n\n @return the number of bytes of data actually transferred\n"
14966,method,java/sql/DataTruncation/DataTruncation/int;boolean;boolean;int;int," Creates a <code>DataTruncation</code> object\n with the SQLState initialized\n to 01004 when <code>read</code> is set to <code>true</code> and 22001\n when <code>read</code> is set to <code>false</code>, \n the reason set to "Data truncation", the\n vendor code set to 0, and\n the other fields set to the given values.\n The <code>cause</code> is not initialized, and may subsequently be \n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n\n @param index The index of the parameter or column value\n @param parameter true if a parameter value was truncated\n @param read true if a read was truncated\n @param dataSize the original size of the data\n @param transferSize the size after truncation\n"
14967,method,java/sql/DataTruncation/DataTruncation/int;boolean;boolean;int;int;Throwable," Creates a <code>DataTruncation</code> object\n with the SQLState initialized\n to 01004 when <code>read</code> is set to <code>true</code> and 22001\n when <code>read</code> is set to <code>false</code>, \n the reason set to "Data truncation", the\n vendor code set to 0, and\n the other fields set to the given values.\n <p>\n\n @param index The index of the parameter or column value\n @param parameter true if a parameter value was truncated\n @param read true if a read was truncated\n @param dataSize the original size of the data\n @param transferSize the size after truncation\n @param cause the underlying reason for this <code>DataTruncation</code> \n (which is saved for later retrieval by the <code>getCause()</code> method);\n may be null indicating the cause is non-existent or unknown.\n\n @since 1.6\n"
14969,method,java/sql/Connection/createStatement/," Creates a <code>Statement</code> object for sending\n SQL statements to the database.\n SQL statements without parameters are normally\n executed using <code>Statement</code> objects. If the same SQL statement \n is executed many times, it may be more efficient to use a \n <code>PreparedStatement</code> object.\n <P>\n Result sets created using the returned <code>Statement</code>\n object will by default be type <code>TYPE_FORWARD_ONLY</code>\n and have a concurrency level of <code>CONCUR_READ_ONLY</code>. \n The holdability of the created result sets can be determined by \n calling {@link #getHoldability}.\n\n @return a new default <code>Statement</code> object \n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n"
14970,method,java/sql/Connection/prepareStatement/String," Creates a <code>PreparedStatement</code> object for sending\n parameterized SQL statements to the database.\n <P>\n A SQL statement with or without IN parameters can be\n pre-compiled and stored in a <code>PreparedStatement</code> object. This\n object can then be used to efficiently execute this statement\n multiple times.\n\n <P><B>Note:</B> This method is optimized for handling\n parametric SQL statements that benefit from precompilation. If\n the driver supports precompilation,\n the method <code>prepareStatement</code> will send\n the statement to the database for precompilation. Some drivers\n may not support precompilation. In this case, the statement may\n not be sent to the database until the <code>PreparedStatement</code> \n object is executed.  This has no direct effect on users; however, it does\n affect which methods throw certain <code>SQLException</code> objects.\n <P>\n Result sets created using the returned <code>PreparedStatement</code>\n object will by default be type <code>TYPE_FORWARD_ONLY</code>\n and have a concurrency level of <code>CONCUR_READ_ONLY</code>. \n The holdability of the created result sets can be determined by \n calling {@link #getHoldability}.\n\n @param sql an SQL statement that may contain one or more '?' IN\n parameter placeholders\n @return a new default <code>PreparedStatement</code> object containing the\n pre-compiled SQL statement \n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n"
14971,method,java/sql/Connection/prepareCall/String," Creates a <code>CallableStatement</code> object for calling\n database stored procedures.\n The <code>CallableStatement</code> object provides\n methods for setting up its IN and OUT parameters, and\n methods for executing the call to a stored procedure.\n\n <P><B>Note:</B> This method is optimized for handling stored\n procedure call statements. Some drivers may send the call\n statement to the database when the method <code>prepareCall</code>\n is done; others\n may wait until the <code>CallableStatement</code> object\n is executed. This has no\n direct effect on users; however, it does affect which method\n throws certain SQLExceptions.\n <P>\n Result sets created using the returned <code>CallableStatement</code>\n object will by default be type <code>TYPE_FORWARD_ONLY</code>\n and have a concurrency level of <code>CONCUR_READ_ONLY</code>. \n The holdability of the created result sets can be determined by \n calling {@link #getHoldability}.\n\n @param sql an SQL statement that may contain one or more '?'\n parameter placeholders. Typically this statement is specified using JDBC\n call escape syntax.\n @return a new default <code>CallableStatement</code> object containing the\n pre-compiled SQL statement \n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n"
14972,method,java/sql/Connection/nativeSQL/String," Converts the given SQL statement into the system's native SQL grammar.\n A driver may convert the JDBC SQL grammar into its system's\n native SQL grammar prior to sending it. This method returns the\n native form of the statement that the driver would have sent.\n\n @param sql an SQL statement that may contain one or more '?'\n parameter placeholders\n @return the native form of this statement\n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n"
14973,method,java/sql/Connection/setAutoCommit/boolean," Sets this connection's auto-commit mode to the given state.\n If a connection is in auto-commit mode, then all its SQL\n statements will be executed and committed as individual\n transactions.  Otherwise, its SQL statements are grouped into\n transactions that are terminated by a call to either\n the method <code>commit</code> or the method <code>rollback</code>.\n By default, new connections are in auto-commit\n mode.\n <P>\n The commit occurs when the statement completes. The time when the statement \n completes depends on the type of SQL Statement:\n <ul>\n <li>For DML statements, such as Insert, Update or Delete, and DDL statements, \n the statement is complete as soon as it has finished executing.\n <li>For Select statements, the statement is complete when the associated result \n set is closed.\n <li>For <code>CallableStatement</code> objects or for statements that return \n multiple results, the statement is complete \n when all of the associated result sets have been closed, and all update \n counts and output parameters have been retrieved.\n</ul>\n <P>\n <B>NOTE:</B>  If this method is called during a transaction and the \n auto-commit mode is changed, the transaction is committed.  If\n <code>setAutoCommit</code> is called and the auto-commit mode is \n not changed, the call is a no-op.\n\n @param autoCommit <code>true</code> to enable auto-commit mode; \n         <code>false</code> to disable it\n @exception SQLException if a database access error occurs,\n  setAutoCommit(true) is called while participating in a distributed transaction, \n or this method is called on a closed connection\n @see #getAutoCommit\n"
14974,method,java/sql/Connection/getAutoCommit/," Retrieves the current auto-commit mode for this <code>Connection</code>\n object.\n\n @return the current state of this <code>Connection</code> object's \n         auto-commit mode\n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n @see #setAutoCommit \n"
14978,method,java/sql/Connection/isClosed/," Retrieves whether this <code>Connection</code> object has been\n closed.  A connection is closed if the method <code>close</code>\n has been called on it or if certain fatal errors have occurred.\n This method is guaranteed to return <code>true</code> only when\n it is called after the method <code>Connection.close</code> has\n been called.\n <P>\n This method generally cannot be called to determine whether a\n connection to a database is valid or invalid.  A typical client\n can determine that a connection is invalid by catching any\n exceptions that might be thrown when an operation is attempted.\n\n @return <code>true</code> if this <code>Connection</code> object \n         is closed; <code>false</code> if it is still open\n @exception SQLException if a database access error occurs\n"
14979,method,java/sql/Connection/getMetaData/," Retrieves a <code>DatabaseMetaData</code> object that contains\n metadata about the database to which this\n <code>Connection</code> object represents a connection.\n The metadata includes information about the database's\n tables, its supported SQL grammar, its stored\n procedures, the capabilities of this connection, and so on.\n\n @return a <code>DatabaseMetaData</code> object for this \n         <code>Connection</code> object\n @exception  SQLException if a database access error occurs \n or this method is called on a closed connection\n"
14980,method,java/sql/Connection/setReadOnly/boolean," Puts this connection in read-only mode as a hint to the driver to enable \n database optimizations.\n\n <P><B>Note:</B> This method cannot be called during a transaction.\n\n @param readOnly <code>true</code> enables read-only mode; \n        <code>false</code> disables it\n @exception SQLException if a database access error occurs, this\n  method is called on a closed connection or this\n            method is called during a transaction\n"
14981,method,java/sql/Connection/isReadOnly/," Retrieves whether this <code>Connection</code> \n object is in read-only mode.\n\n @return <code>true</code> if this <code>Connection</code> object\n         is read-only; <code>false</code> otherwise\n @exception SQLException SQLException if a database access error occurs \n or this method is called on a closed connection\n"
14982,method,java/sql/Connection/setCatalog/String," Sets the given catalog name in order to select 	\n a subspace of this <code>Connection</code> object's database \n in which to work.\n <P>\n If the driver does not support catalogs, it will\n silently ignore this request.\n\n @param catalog the name of a catalog (subspace in this \n        <code>Connection</code> object's database) in which to work\n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n @see #getCatalog\n"
14983,method,java/sql/Connection/getCatalog/," Retrieves this <code>Connection</code> object's current catalog name.\n\n @return the current catalog name or <code>null</code> if there is none\n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n @see #setCatalog\n"
14984,method,java/sql/Connection/setTransactionIsolation/int," Attempts to change the transaction isolation level for this\n <code>Connection</code> object to the one given.\n The constants defined in the interface <code>Connection</code>\n are the possible transaction isolation levels.\n <P>\n <B>Note:</B> If this method is called during a transaction, the result\n is implementation-defined.\n\n @param level one of the following <code>Connection</code> constants:\n        <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,\n        <code>Connection.TRANSACTION_READ_COMMITTED</code>,\n        <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or\n        <code>Connection.TRANSACTION_SERIALIZABLE</code>.\n        (Note that <code>Connection.TRANSACTION_NONE</code> cannot be used \n        because it specifies that transactions are not supported.)\n @exception SQLException if a database access error occurs, this \n method is called on a closed connection \n            or the given parameter is not one of the <code>Connection</code>\n            constants\n @see DatabaseMetaData#supportsTransactionIsolationLevel \n @see #getTransactionIsolation\n"
14985,method,java/sql/Connection/getTransactionIsolation/," Retrieves this <code>Connection</code> object's current \n transaction isolation level.\n\n @return the current transaction isolation level, which will be one\n         of the following constants:\n        <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>, \n        <code>Connection.TRANSACTION_READ_COMMITTED</code>,\n        <code>Connection.TRANSACTION_REPEATABLE_READ</code>, \n        <code>Connection.TRANSACTION_SERIALIZABLE</code>, or\n        <code>Connection.TRANSACTION_NONE</code>.\n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n @see #setTransactionIsolation\n"
14986,method,java/sql/Connection/getWarnings/," Retrieves the first warning reported by calls on this \n <code>Connection</code> object.  If there is more than one\n warning, subsequent warnings will be chained to the first one\n and can be retrieved by calling the method\n <code>SQLWarning.getNextWarning</code> on the warning \n that was retrieved previously.\n <P>\n This method may not be\n called on a closed connection; doing so will cause an\n <code>SQLException</code> to be thrown.\n\n <P><B>Note:</B> Subsequent warnings will be chained to this\n SQLWarning.\n\n @return the first <code>SQLWarning</code> object or <code>null</code>\n         if there are none \n @exception SQLException if a database access error occurs or\n            this method is called on a closed connection\n @see SQLWarning\n"
14988,method,java/sql/Connection/createStatement/int;int," Creates a <code>Statement</code> object that will generate\n <code>ResultSet</code> objects with the given type and concurrency.\n This method is the same as the <code>createStatement</code> method\n above, but it allows the default result set\n type and concurrency to be overridden. \n The holdability of the created result sets can be determined by \n calling {@link #getHoldability}.\n\n @param resultSetType a result set type; one of \n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @param resultSetConcurrency a concurrency type; one of\n        <code>ResultSet.CONCUR_READ_ONLY</code> or\n        <code>ResultSet.CONCUR_UPDATABLE</code>\n @return a new <code>Statement</code> object that will generate\n         <code>ResultSet</code> objects with the given type and\n         concurrency\n @exception SQLException if a database access error occurs, this \n method is called on a closed connection \n         or the given parameters are not <code>ResultSet</code> \n         constants indicating type and concurrency\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method or this method is not supported for the specified result \n set type and result set concurrency.\n @since 1.2\n"
14989,method,java/sql/Connection/prepareStatement/String;int;int,"\n Creates a <code>PreparedStatement</code> object that will generate\n <code>ResultSet</code> objects with the given type and concurrency.\n This method is the same as the <code>prepareStatement</code> method\n above, but it allows the default result set\n type and concurrency to be overridden. \n The holdability of the created result sets can be determined by \n calling {@link #getHoldability}.\n\n @param sql a <code>String</code> object that is the SQL statement to\n            be sent to the database; may contain one or more '?' IN\n            parameters\n @param resultSetType a result set type; one of \n         <code>ResultSet.TYPE_FORWARD_ONLY</code>, \n         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @param resultSetConcurrency a concurrency type; one of\n         <code>ResultSet.CONCUR_READ_ONLY</code> or\n         <code>ResultSet.CONCUR_UPDATABLE</code>\n @return a new PreparedStatement object containing the\n pre-compiled SQL statement that will produce <code>ResultSet</code>\n objects with the given type and concurrency\n @exception SQLException if a database access error occurs, this \n method is called on a closed connection \n         or the given parameters are not <code>ResultSet</code> \n         constants indicating type and concurrency\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method or this method is not supported for the specified result \n set type and result set concurrency.\n @since 1.2\n"
14990,method,java/sql/Connection/prepareCall/String;int;int," Creates a <code>CallableStatement</code> object that will generate\n <code>ResultSet</code> objects with the given type and concurrency.\n This method is the same as the <code>prepareCall</code> method\n above, but it allows the default result set\n type and concurrency to be overridden. \n The holdability of the created result sets can be determined by \n calling {@link #getHoldability}.\n\n @param sql a <code>String</code> object that is the SQL statement to\n            be sent to the database; may contain on or more '?' parameters\n @param resultSetType a result set type; one of \n         <code>ResultSet.TYPE_FORWARD_ONLY</code>, \n         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @param resultSetConcurrency a concurrency type; one of\n         <code>ResultSet.CONCUR_READ_ONLY</code> or\n         <code>ResultSet.CONCUR_UPDATABLE</code>\n @return a new <code>CallableStatement</code> object containing the\n pre-compiled SQL statement that will produce <code>ResultSet</code>\n objects with the given type and concurrency\n @exception SQLException if a database access error occurs, this method \n is called on a closed connection \n         or the given parameters are not <code>ResultSet</code> \n         constants indicating type and concurrency\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method or this method is not supported for the specified result \n set type and result set concurrency.\n @since 1.2\n"
14991,method,java/sql/Connection/getTypeMap/," Retrieves the <code>Map</code> object associated with this \n <code>Connection</code> object.\n Unless the application has added an entry, the type map returned \n will be empty.\n\n @return the <code>java.util.Map</code> object associated \n         with this <code>Connection</code> object\n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n @see #setTypeMap\n"
14992,method,java/sql/Connection/setTypeMap/Map," Installs the given <code>TypeMap</code> object as the type map for\n this <code>Connection</code> object.  The type map will be used for the\n custom mapping of SQL structured types and distinct types.\n\n @param map the <code>java.util.Map</code> object to install\n        as the replacement for this <code>Connection</code>\n        object's default type map\n @exception SQLException if a database access error occurs, this \n method is called on a closed connection or\n        the given parameter is not a <code>java.util.Map</code> \n        object\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n @see #getTypeMap\n"
14993,method,java/sql/Connection/setHoldability/int," Changes the default holdability of <code>ResultSet</code> objects\n created using this <code>Connection</code> object to the given\n holdability.  The default holdability of <code>ResultSet</code> objects\n can be be determined by invoking \n {@link DatabaseMetaData#getResultSetHoldability}.\n\n @param holdability a <code>ResultSet</code> holdability constant; one of\n        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n @throws SQLException if a database access occurs, this method is called\n on a closed connection, or the given parameter\n         is not a <code>ResultSet</code> constant indicating holdability\n @exception SQLFeatureNotSupportedException if the given holdability is not supported\n @see #getHoldability\n @see DatabaseMetaData#getResultSetHoldability\n @see ResultSet\n @since 1.4\n"
14994,method,java/sql/Connection/getHoldability/," Retrieves the current holdability of <code>ResultSet</code> objects\n created using this <code>Connection</code> object.\n\n @return the holdability, one of\n        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n @throws SQLException if a database access error occurs \n or this method is called on a closed connection\n @see #setHoldability\n @see DatabaseMetaData#getResultSetHoldability\n @see ResultSet\n @since 1.4\n"
14995,method,java/sql/Connection/setSavepoint/," Creates an unnamed savepoint in the current transaction and \n returns the new <code>Savepoint</code> object that represents it.\n\n<p> if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created \nsavepoint.\n\n @return the new <code>Savepoint</code> object\n @exception SQLException if a database access error occurs,\n this method is called while participating in a distributed transaction,\n this method is called on a closed connection \n            or this <code>Connection</code> object is currently in\n            auto-commit mode\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see Savepoint\n @since 1.4\n"
14996,method,java/sql/Connection/setSavepoint/String," Creates a savepoint with the given name in the current transaction\n and returns the new <code>Savepoint</code> object that represents it.\n\n <p> if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created \nsavepoint.\n\n @param name a <code>String</code> containing the name of the savepoint\n @return the new <code>Savepoint</code> object\n @exception SQLException if a database access error occurs,\n this method is called while participating in a distributed transaction, \n this method is called on a closed connection \n            or this <code>Connection</code> object is currently in\n            auto-commit mode\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see Savepoint\n @since 1.4\n"
14998,method,java/sql/Connection/releaseSavepoint/Savepoint," Removes the specified <code>Savepoint</code>  and subsequent <code>Savepoint</code> objects from the current \n transaction. Any reference to the savepoint after it have been removed \n will cause an <code>SQLException</code> to be thrown.\n\n @param savepoint the <code>Savepoint</code> object to be removed\n @exception SQLException if a database access error occurs, this \n  method is called on a closed connection or\n            the given <code>Savepoint</code> object is not a valid \n            savepoint in the current transaction\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
14999,method,java/sql/Connection/createStatement/int;int;int," Creates a <code>Statement</code> object that will generate\n <code>ResultSet</code> objects with the given type, concurrency,\n and holdability.\n This method is the same as the <code>createStatement</code> method\n above, but it allows the default result set\n type, concurrency, and holdability to be overridden.\n\n @param resultSetType one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.TYPE_FORWARD_ONLY</code>, \n         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @param resultSetConcurrency one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.CONCUR_READ_ONLY</code> or\n         <code>ResultSet.CONCUR_UPDATABLE</code>\n @param resultSetHoldability one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n @return a new <code>Statement</code> object that will generate\n         <code>ResultSet</code> objects with the given type,\n         concurrency, and holdability\n @exception SQLException if a database access error occurs, this \n method is called on a closed connection \n            or the given parameters are not <code>ResultSet</code> \n            constants indicating type, concurrency, and holdability\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method or this method is not supported for the specified result \n set type, result set holdability and result set concurrency.\n @see ResultSet\n @since 1.4\n"
15000,method,java/sql/Connection/prepareStatement/String;int;int;int," Creates a <code>PreparedStatement</code> object that will generate\n <code>ResultSet</code> objects with the given type, concurrency,\n and holdability.\n <P>\n This method is the same as the <code>prepareStatement</code> method\n above, but it allows the default result set\n type, concurrency, and holdability to be overridden.\n\n @param sql a <code>String</code> object that is the SQL statement to\n            be sent to the database; may contain one or more '?' IN\n            parameters\n @param resultSetType one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.TYPE_FORWARD_ONLY</code>, \n         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @param resultSetConcurrency one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.CONCUR_READ_ONLY</code> or\n         <code>ResultSet.CONCUR_UPDATABLE</code>\n @param resultSetHoldability one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n @return a new <code>PreparedStatement</code> object, containing the\n         pre-compiled SQL statement, that will generate\n         <code>ResultSet</code> objects with the given type,\n         concurrency, and holdability\n @exception SQLException if a database access error occurs, this \n method is called on a closed connection \n            or the given parameters are not <code>ResultSet</code> \n            constants indicating type, concurrency, and holdability\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method or this method is not supported for the specified result \n set type, result set holdability and result set concurrency.\n @see ResultSet\n @since 1.4\n"
15001,method,java/sql/Connection/prepareCall/String;int;int;int," Creates a <code>CallableStatement</code> object that will generate\n <code>ResultSet</code> objects with the given type and concurrency.\n This method is the same as the <code>prepareCall</code> method\n above, but it allows the default result set\n type, result set concurrency type and holdability to be overridden.\n\n @param sql a <code>String</code> object that is the SQL statement to\n            be sent to the database; may contain on or more '?' parameters\n @param resultSetType one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.TYPE_FORWARD_ONLY</code>, \n         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n @param resultSetConcurrency one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.CONCUR_READ_ONLY</code> or\n         <code>ResultSet.CONCUR_UPDATABLE</code>\n @param resultSetHoldability one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n @return a new <code>CallableStatement</code> object, containing the\n         pre-compiled SQL statement, that will generate\n         <code>ResultSet</code> objects with the given type,\n         concurrency, and holdability\n @exception SQLException if a database access error occurs, this \n method is called on a closed connection \n            or the given parameters are not <code>ResultSet</code> \n            constants indicating type, concurrency, and holdability\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method or this method is not supported for the specified result \n set type, result set holdability and result set concurrency.\n @see ResultSet\n @since 1.4\n"
15003,method,java/sql/Connection/prepareStatement/String;int[]," Creates a default <code>PreparedStatement</code> object capable\n of returning the auto-generated keys designated by the given array.\n This array contains the indexes of the columns in the target\n table that contain the auto-generated keys that should be made\n available.  The driver will ignore the array if the SQL statement\n is not an <code>INSERT</code> statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n<p>\n An SQL statement with or without IN parameters can be\n pre-compiled and stored in a <code>PreparedStatement</code> object. This\n object can then be used to efficiently execute this statement\n multiple times.\n <P>\n <B>Note:</B> This method is optimized for handling\n parametric SQL statements that benefit from precompilation. If\n the driver supports precompilation,\n the method <code>prepareStatement</code> will send\n the statement to the database for precompilation. Some drivers\n may not support precompilation. In this case, the statement may\n not be sent to the database until the <code>PreparedStatement</code> \n object is executed.  This has no direct effect on users; however, it does\n affect which methods throw certain SQLExceptions.\n <P>\n Result sets created using the returned <code>PreparedStatement</code>\n object will by default be type <code>TYPE_FORWARD_ONLY</code>\n and have a concurrency level of <code>CONCUR_READ_ONLY</code>. \n The holdability of the created result sets can be determined by \n calling {@link #getHoldability}.\n\n @param sql an SQL statement that may contain one or more '?' IN\n        parameter placeholders\n @param columnIndexes an array of column indexes indicating the columns\n        that should be returned from the inserted row or rows \n @return a new <code>PreparedStatement</code> object, containing the\n         pre-compiled statement, that is capable of returning the\n         auto-generated keys designated by the given array of column\n         indexes\n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n\n @since 1.4\n"
15004,method,java/sql/Connection/prepareStatement/String;String[]," Creates a default <code>PreparedStatement</code> object capable\n of returning the auto-generated keys designated by the given array.\n This array contains the names of the columns in the target\n table that contain the auto-generated keys that should be returned.\n The driver will ignore the array if the SQL statement\n is not an <code>INSERT</code> statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n <P>\n An SQL statement with or without IN parameters can be\n pre-compiled and stored in a <code>PreparedStatement</code> object. This\n object can then be used to efficiently execute this statement\n multiple times.\n <P>\n <B>Note:</B> This method is optimized for handling\n parametric SQL statements that benefit from precompilation. If\n the driver supports precompilation,\n the method <code>prepareStatement</code> will send\n the statement to the database for precompilation. Some drivers\n may not support precompilation. In this case, the statement may\n not be sent to the database until the <code>PreparedStatement</code> \n object is executed.  This has no direct effect on users; however, it does\n affect which methods throw certain SQLExceptions.\n <P>\n Result sets created using the returned <code>PreparedStatement</code>\n object will by default be type <code>TYPE_FORWARD_ONLY</code>\n and have a concurrency level of <code>CONCUR_READ_ONLY</code>. \n The holdability of the created result sets can be determined by \n calling {@link #getHoldability}.\n\n @param sql an SQL statement that may contain one or more '?' IN\n        parameter placeholders\n @param columnNames an array of column names indicating the columns\n        that should be returned from the inserted row or rows \n @return a new <code>PreparedStatement</code> object, containing the\n         pre-compiled statement, that is capable of returning the\n         auto-generated keys designated by the given array of column\n         names\n @exception SQLException if a database access error occurs \n or this method is called on a closed connection\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n\n @since 1.4\n"
15005,method,java/sql/Connection/createClob/," Constructs an object that implements the <code>Clob</code> interface. The object\n returned initially contains no data.  The <code>setAsciiStream</code>,\n <code>setCharacterStream</code> and <code>setString</code> methods of \n the <code>Clob</code> interface may be used to add data to the <code>Clob</code>.\n @return An object that implements the <code>Clob</code> interface\n @throws SQLException if an object that implements the\n <code>Clob</code> interface can not be constructed, this method is \n called on a closed connection or a database access error occurs.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this data type\n\n @since 1.6\n"
15006,method,java/sql/Connection/createBlob/," Constructs an object that implements the <code>Blob</code> interface. The object\n returned initially contains no data.  The <code>setBinaryStream</code> and\n <code>setBytes</code> methods of the <code>Blob</code> interface may be used to add data to\n the <code>Blob</code>.\n @return  An object that implements the <code>Blob</code> interface\n @throws SQLException if an object that implements the\n <code>Blob</code> interface can not be constructed, this method is \n called on a closed connection or a database access error occurs.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this data type\n\n @since 1.6\n"
15007,method,java/sql/Connection/createNClob/," Constructs an object that implements the <code>NClob</code> interface. The object\n returned initially contains no data.  The <code>setAsciiStream</code>,\n <code>setCharacterStream</code> and <code>setString</code> methods of the <code>NClob</code> interface may\n be used to add data to the <code>NClob</code>.\n @return An object that implements the <code>NClob</code> interface\n @throws SQLException if an object that implements the\n <code>NClob</code> interface can not be constructed, this method is \n called on a closed connection or a database access error occurs.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this data type\n\n @since 1.6\n"
15008,method,java/sql/Connection/createSQLXML/," Constructs an object that implements the <code>SQLXML</code> interface. The object\n returned initially contains no data. The <code>createXmlStreamWriter</code> object and\n <code>setString</code> method of the <code>SQLXML</code> interface may be used to add data to the <code>SQLXML</code>\n object.\n @return An object that implements the <code>SQLXML</code> interface\n @throws SQLException if an object that implements the <code>SQLXML</code> interface can not\n be constructed, this method is \n called on a closed connection or a database access error occurs.\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this data type\n @since 1.6\n"
15011,method,java/sql/Connection/setClientInfo/Properties," Sets the value of the connection's client info properties.  The \n <code>Properties</code> object contains the names and values of the client info \n properties to be set.  The set of client info properties contained in \n the properties list replaces the current set of client info properties \n on the connection.  If a property that is currently set on the \n connection is not present in the properties list, that property is \n cleared.  Specifying an empty properties list will clear all of the \n properties on the connection.  See <code>setClientInfo (String, String)</code> for \n more information.\n <p>  \n If an error occurs in setting any of the client info properties, a \n <code>SQLClientInfoException</code> is thrown. The <code>SQLClientInfoException</code>\n contains information indicating which client info properties were not set. \n The state of the client information is unknown because \n some databases do not allow multiple client info properties to be set \n atomically.  For those databases, one or more properties may have been \n set before the error occurred.\n <p>\n \n @param properties		the list of client info properties to set\n <p>\n @see java.sql.Connection#setClientInfo(String, String) setClientInfo(String, String)\n @since 1.6\n <p>\n @throws SQLClientInfoException if the database server returns an error while \n 			setting the clientInfo values on the database server or this method \n is called on a closed connection \n <p>\n"
15012,method,java/sql/Connection/getClientInfo/String," Returns the value of the client info property specified by name.  This \n method may return null if the specified client info property has not \n been set and does not have a default value.  This method will also \n return null if the specified client info property name is not supported \n by the driver.\n <p>\n Applications may use the <code>DatabaseMetaData.getClientInfoProperties</code>\n method to determine the client info properties supported by the driver.\n <p>\n @param name		The name of the client info property to retrieve\n <p>\n @return 			The value of the client info property specified\n <p>\n @throws SQLException		if the database server returns an error when \n 							fetching the client info value from the database \nor this method is called on a closed connection\n <p>\n @since 1.6\n <p>\n @see java.sql.DatabaseMetaData#getClientInfoProperties\n"
15013,method,java/sql/Connection/getClientInfo/," Returns a list containing the name and current value of each client info \n property supported by the driver.  The value of a client info property \n may be null if the property has not been set and does not have a \n default value.\n <p>\n @return	A <code>Properties</code> object that contains the name and current value of \n 			each of the client info properties supported by the driver.  \n <p>\n @throws 	SQLException if the database server returns an error when \n 			fetching the client info values from the database\n or this method is called on a closed connection\n <p>\n @since 1.6\n"
15014,method,java/sql/Connection/createArrayOf/String;Object[]," Factory method for creating Array objects.\n<p>\n <b>Note: </b>When <code>createArrayOf</code> is used to create an array object \n that maps to a primitive data type, then it is implementation-defined \n whether the <code>Array</code> object is an array of that primitive \n data type or an array of <code>Object</code>.\n <p>\n <b>Note: </b>The JDBC driver is responsible for mapping the elements \n <code>Object</code> array to the default JDBC SQL type defined in \n java.sql.Types for the given class of <code>Object</code>. The default \n mapping is specified in Appendix B of the JDBC specification.  If the\n resulting JDBC type is not the appropriate type for the given typeName then \n it is implementation defined whether an <code>SQLException</code> is \n thrown or the driver supports the resulting conversion.\n\n @param typeName the SQL name of the type the elements of the array map to. The typeName is a\n database-specific name which may be the name of a built-in type, a user-defined type or a standard  SQL type supported by this database. This\n  is the value returned by <code>Array.getBaseTypeName</code>\n @param elements the elements that populate the returned object\n @return an Array object whose elements map to the specified SQL type\n @throws SQLException if a database error occurs, the JDBC type is not\n  appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type\n @since 1.6\n"
15015,method,java/sql/Connection/createStruct/String;Object[]," Factory method for creating Struct objects.\n\n @param typeName the SQL type name of the SQL structured type that this <code>Struct</code> \n object maps to. The typeName is the name of  a user-defined type that\n has been defined for this database. It is the value returned by\n <code>Struct.getSQLTypeName</code>.\n\n @param attributes the attributes that populate the returned object\n  @return a Struct object that maps to the given SQL type and is populated with the given attributes\n @throws SQLException if a database error occurs, the typeName is null or this method is called on a closed connection\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type\n @since 1.6\n"
15017,field,java/sql/Connection/TRANSACTION_READ_UNCOMMITTED," A constant indicating that\n dirty reads, non-repeatable reads and phantom reads can occur.\n This level allows a row changed by one transaction to be read\n by another transaction before any changes in that row have been\n committed (a "dirty read").  If any of the changes are rolled back, \n the second transaction will have retrieved an invalid row.\n"
15018,field,java/sql/Connection/TRANSACTION_READ_COMMITTED," A constant indicating that\n dirty reads are prevented; non-repeatable reads and phantom\n reads can occur.  This level only prohibits a transaction\n from reading a row with uncommitted changes in it.\n"
15020,field,java/sql/Connection/TRANSACTION_SERIALIZABLE," A constant indicating that\n dirty reads, non-repeatable reads and phantom reads are prevented.\n This level includes the prohibitions in\n <code>TRANSACTION_REPEATABLE_READ</code> and further prohibits the \n situation where one transaction reads all rows that satisfy\n a <code>WHERE</code> condition, a second transaction inserts a row that\n satisfies that <code>WHERE</code> condition, and the first transaction\n rereads for the same condition, retrieving the additional\n "phantom" row in the second read.\n"
15021,interface,java/sql/Clob," The mapping in the Java<sup><font size=-2>TM</font></sup> programming language \n for the SQL <code>CLOB</code> type.\n An SQL <code>CLOB</code> is a built-in type\n that stores a Character Large Object as a column value in a row of\n a database table.\n By default drivers implement a <code>Clob</code> object using an SQL\n <code>locator(CLOB)</code>, which means that a <code>Clob</code> object \n contains a logical pointer to the SQL <code>CLOB</code> data rather than\n the data itself. A <code>Clob</code> object is valid for the duration\n of the transaction in which it was created.\n <P>The <code>Clob</code> interface provides methods for getting the\n length of an SQL <code>CLOB</code> (Character Large Object) value,\n for materializing a <code>CLOB</code> value on the client, and for\n searching for a substring or <code>CLOB</code> object within a\n <code>CLOB</code> value.\n Methods in the interfaces {@link ResultSet},\n {@link CallableStatement}, and {@link PreparedStatement}, such as\n <code>getClob</code> and <code>setClob</code> allow a programmer to\n access an SQL <code>CLOB</code> value.  In addition, this interface\n has methods for updating a <code>CLOB</code> value.\n <p>\n All methods on the <code>Clob</code> interface must be fully implemented if the \n JDBC driver supports the data type.\n \n @since 1.2\n"
15022,method,java/sql/Clob/length/," Retrieves the number of characters \n in the <code>CLOB</code> value\n designated by this <code>Clob</code> object.\n\n @return length of the <code>CLOB</code> in characters\n @exception SQLException if there is an error accessing the\n            length of the <code>CLOB</code> value\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15024,method,java/sql/Clob/getCharacterStream/," Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>\n object as a <code>java.io.Reader</code> object (or as a stream of\n characters).\n\n @return a <code>java.io.Reader</code> object containing the \n         <code>CLOB</code> data\n @exception SQLException if there is an error accessing the \n            <code>CLOB</code> value\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setCharacterStream\n @since 1.2\n"
15025,method,java/sql/Clob/getAsciiStream/," Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>\n object as an ascii stream.\n\n @return a <code>java.io.InputStream</code> object containing the \n         <code>CLOB</code> data\n @exception SQLException if there is an error accessing the \n            <code>CLOB</code> value\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setAsciiStream\n @since 1.2\n"
15026,method,java/sql/Clob/position/String;long,"\n Retrieves the character position at which the specified substring \n <code>searchstr</code> appears in the SQL <code>CLOB</code> value\n represented by this <code>Clob</code> object.  The search \n begins at position <code>start</code>.\n\n @param searchstr the substring for which to search \n @param start the position at which to begin searching; the first position\n              is 1\n @return the position at which the substring appears or -1 if it is not\n         present; the first position is 1\n @exception SQLException if there is an error accessing the       \n            <code>CLOB</code> value or if pos is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15027,method,java/sql/Clob/position/Clob;long,"\n Retrieves the character position at which the specified  \n <code>Clob</code> object <code>searchstr</code> appears in this \n <code>Clob</code> object.  The search begins at position \n <code>start</code>.\n\n @param searchstr the <code>Clob</code> object for which to search\n @param start the position at which to begin searching; the first\n              position is 1\n @return the position at which the <code>Clob</code> object appears \n              or -1 if it is not present; the first position is 1\n @exception SQLException if there is an error accessing the \n            <code>CLOB</code> value or if start is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15028,method,java/sql/Clob/setString/long;String," Writes the given Java <code>String</code> to the <code>CLOB</code>\n value that this <code>Clob</code> object designates at the position \n <code>pos</code>. The string will overwrite the existing characters \n in the <code>Clob</code> object starting at the position \n <code>pos</code>.  If the end of the <code>Clob</code> value is reached \n while writing the given string, then the length of the <code>Clob</code> \n value will be increased to accomodate the extra characters.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>CLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param pos the position at which to start writing to the <code>CLOB</code>\n         value that this <code>Clob</code> object represents;\n The first position is 1\n @param str the string to be written to the <code>CLOB</code>\n        value that this <code>Clob</code> designates\n @return the number of characters written\n @exception SQLException if there is an error accessing the \n            <code>CLOB</code> value or if pos is less than 1\n\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15029,method,java/sql/Clob/setString/long;String;int;int," Writes <code>len</code> characters of <code>str</code>, starting \n at character <code>offset</code>, to the <code>CLOB</code> value\n that this <code>Clob</code> represents.  The string will overwrite the existing characters \n in the <code>Clob</code> object starting at the position \n <code>pos</code>.  If the end of the <code>Clob</code> value is reached \n while writing the given string, then the length of the <code>Clob</code> \n value will be increased to accomodate the extra characters.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>CLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param pos the position at which to start writing to this\n        <code>CLOB</code> object; The first position  is 1\n @param str the string to be written to the <code>CLOB</code> \n        value that this <code>Clob</code> object represents\n @param offset the offset into <code>str</code> to start reading\n        the characters to be written\n @param len the number of characters to be written\n @return the number of characters written\n @exception SQLException if there is an error accessing the \n            <code>CLOB</code> value or if pos is less than 1\n\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15030,method,java/sql/Clob/setAsciiStream/long," Retrieves a stream to be used to write Ascii characters to the\n <code>CLOB</code> value that this <code>Clob</code> object represents, \n starting at position <code>pos</code>.  Characters written to the stream \n will overwrite the existing characters \n in the <code>Clob</code> object starting at the position \n <code>pos</code>.  If the end of the <code>Clob</code> value is reached \n while writing characters to the stream, then the length of the <code>Clob</code> \n value will be increased to accomodate the extra characters.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>CLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param pos the position at which to start writing to this\n        <code>CLOB</code> object; The first position is 1\n @return the stream to which ASCII encoded characters can be written\n @exception SQLException if there is an error accessing the \n            <code>CLOB</code> value or if pos is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getAsciiStream\n\n @since 1.4\n"
15031,method,java/sql/Clob/setCharacterStream/long," Retrieves a stream to be used to write a stream of Unicode characters \n to the <code>CLOB</code> value that this <code>Clob</code> object\n represents, at position <code>pos</code>. Characters written to the stream \n will overwrite the existing characters \n in the <code>Clob</code> object starting at the position \n <code>pos</code>.  If the end of the <code>Clob</code> value is reached \n while writing characters to the stream, then the length of the <code>Clob</code> \n value will be increased to accomodate the extra characters.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>CLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param  pos the position at which to start writing to the\n        <code>CLOB</code> value; The first position is 1\n\n @return a stream to which Unicode encoded characters can be written\n @exception SQLException if there is an error accessing the \n            <code>CLOB</code> value or if pos is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getCharacterStream\n\n @since 1.4\n"
15032,method,java/sql/Clob/truncate/long," Truncates the <code>CLOB</code> value that this <code>Clob</code> \n designates to have a length of <code>len</code> \n characters.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>CLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param len the length, in characters, to which the <code>CLOB</code> value\n        should be truncated\n @exception SQLException if there is an error accessing the \n            <code>CLOB</code> value or if len is less than 0\n\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15035,class,java/sql/ClientInfoStatus," Enumeration for status of the reason that a property could not be set\n via a call to <code>Connection.setClientInfo</code>\n @since 1.6\n"
15046,method,java/sql/CallableStatement/getString/int," Retrieves the value of the designated JDBC <code>CHAR</code>, \n <code>VARCHAR</code>, or <code>LONGVARCHAR</code> parameter as a \n <code>String</code> in the Java programming language.\n <p>\n For the fixed-length type JDBC <code>CHAR</code>,\n the <code>String</code> object\n returned has exactly the same value the SQL\n <code>CHAR</code> value had in the\n database, including any padding added by the database.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n and so on\n @return the parameter value. If the value is SQL <code>NULL</code>, \n         the result \n         is <code>null</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setString\n"
15047,method,java/sql/CallableStatement/getBoolean/int," Retrieves the value of the designated JDBC <code>BIT</code>\n or <code>BOOLEAN</code> parameter as a \n <code>boolean</code> in the Java programming language.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, \n         the result is <code>false</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setBoolean\n"
15048,method,java/sql/CallableStatement/getByte/int," Retrieves the value of the designated JDBC <code>TINYINT</code> parameter \n as a <code>byte</code> in the Java programming language.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>0</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setByte\n"
15050,method,java/sql/CallableStatement/getInt/int," Retrieves the value of the designated JDBC <code>INTEGER</code> parameter \n as an <code>int</code> in the Java programming language.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>0</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setInt\n"
15051,method,java/sql/CallableStatement/getLong/int," Retrieves the value of the designated JDBC <code>BIGINT</code> parameter \n as a <code>long</code> in the Java programming language.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>0</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setLong\n"
15052,method,java/sql/CallableStatement/getFloat/int," Retrieves the value of the designated JDBC <code>FLOAT</code> parameter \n as a <code>float</code> in the Java programming language.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>0</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setFloat\n"
15053,method,java/sql/CallableStatement/getDouble/int," Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>\n in the Java programming language.\n @param parameterIndex the first parameter is 1, the second is 2,\n        and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>0</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setDouble\n"
15054,method,java/sql/CallableStatement/getBigDecimal/int;int,"\n Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a \n <code>java.math.BigDecimal</code> object with <i>scale</i> digits to\n the right of the decimal point.\n @param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n @param scale the number of digits to the right of the decimal point \n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>. \n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @deprecated use <code>getBigDecimal(int parameterIndex)</code>\n             or <code>getBigDecimal(String parameterName)</code>\n @see #setBigDecimal\n"
15055,method,java/sql/CallableStatement/getBytes/int," Retrieves the value of the designated JDBC <code>BINARY</code> or \n <code>VARBINARY</code> parameter as an array of <code>byte</code> \n values in the Java programming language.\n @param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setBytes\n"
15056,method,java/sql/CallableStatement/getDate/int," Retrieves the value of the designated JDBC <code>DATE</code> parameter as a \n <code>java.sql.Date</code> object.\n @param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setDate\n"
15057,method,java/sql/CallableStatement/getTime/int," Retrieves the value of the designated JDBC <code>TIME</code> parameter as a \n <code>java.sql.Time</code> object.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setTime\n"
15058,method,java/sql/CallableStatement/getTimestamp/int," Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a \n <code>java.sql.Timestamp</code> object.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setTimestamp\n"
15059,method,java/sql/CallableStatement/getObject/int," Retrieves the value of the designated parameter as an <code>Object</code> \n in the Java programming language. If the value is an SQL <code>NULL</code>,\n the driver returns a Java <code>null</code>.\n <p>\n This method returns a Java object whose type corresponds to the JDBC\n type that was registered for this parameter using the method\n <code>registerOutParameter</code>.  By registering the target JDBC\n type as <code>java.sql.Types.OTHER</code>, this method can be used\n to read database-specific abstract data types.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n @return A <code>java.lang.Object</code> holding the OUT parameter value\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see Types \n @see #setObject\n"
15060,method,java/sql/CallableStatement/getBigDecimal/int," Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a \n <code>java.math.BigDecimal</code> object with as many digits to the\n right of the decimal point as the value contains.\n @param parameterIndex the first parameter is 1, the second is 2,\n and so on\n @return the parameter value in full precision.  If the value is \n SQL <code>NULL</code>, the result is <code>null</code>. \n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setBigDecimal\n @since 1.2\n"
15062,method,java/sql/CallableStatement/getRef/int," Retrieves the value of the designated JDBC <code>REF(&lt;structured-type&gt;)</code>\n parameter as a {@link java.sql.Ref} object in the Java programming language.\n @param parameterIndex the first parameter is 1, the second is 2, \n and so on\n @return the parameter value as a <code>Ref</code> object in the\n Java programming language.  If the value was SQL <code>NULL</code>, the value\n <code>null</code> is returned.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15064,method,java/sql/CallableStatement/getClob/int," Retrieves the value of the designated JDBC <code>CLOB</code> parameter as a\n <code>java.sql.Clob</code> object in the Java programming language.\n @param parameterIndex the first parameter is 1, the second is 2, and\n so on\n @return the parameter value as a <code>Clob</code> object in the\n Java programming language.  If the value was SQL <code>NULL</code>, the\n value <code>null</code> is returned.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15065,method,java/sql/CallableStatement/getArray/int,"\n Retrieves the value of the designated JDBC <code>ARRAY</code> parameter as an\n {@link java.sql.Array} object in the Java programming language.\n @param parameterIndex the first parameter is 1, the second is 2, and \n so on\n @return the parameter value as an <code>Array</code> object in\n the Java programming language.  If the value was SQL <code>NULL</code>, the\n value <code>null</code> is returned.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15066,method,java/sql/CallableStatement/getDate/int;Calendar," Retrieves the value of the designated JDBC <code>DATE</code> parameter as a \n <code>java.sql.Date</code> object, using\n the given <code>Calendar</code> object\n to construct the date.\n With a <code>Calendar</code> object, the driver\n can calculate the date taking into account a custom timezone and locale.\n If no <code>Calendar</code> object is specified, the driver uses the\n default timezone and locale.\n\n @param parameterIndex the first parameter is 1, the second is 2, \n and so on\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the date\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setDate\n @since 1.2\n"
15067,method,java/sql/CallableStatement/getTime/int;Calendar," Retrieves the value of the designated JDBC <code>TIME</code> parameter as a \n <code>java.sql.Time</code> object, using\n the given <code>Calendar</code> object\n to construct the time.\n With a <code>Calendar</code> object, the driver\n can calculate the time taking into account a custom timezone and locale.\n If no <code>Calendar</code> object is specified, the driver uses the\n default timezone and locale.\n\n @param parameterIndex the first parameter is 1, the second is 2,\n and so on\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the time\n @return the parameter value; if the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setTime\n @since 1.2\n"
15068,method,java/sql/CallableStatement/getTimestamp/int;Calendar," Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a\n <code>java.sql.Timestamp</code> object, using\n the given <code>Calendar</code> object to construct\n the <code>Timestamp</code> object.\n With a <code>Calendar</code> object, the driver\n can calculate the timestamp taking into account a custom timezone and locale.\n If no <code>Calendar</code> object is specified, the driver uses the\n default timezone and locale.\n\n\n @param parameterIndex the first parameter is 1, the second is 2, \n and so on\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the timestamp\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #setTimestamp\n @since 1.2\n"
15073,method,java/sql/CallableStatement/getURL/int," Retrieves the value of the designated JDBC <code>DATALINK</code> parameter as a\n <code>java.net.URL</code> object.\n \n @param parameterIndex the first parameter is 1, the second is 2,...\n @return a <code>java.net.URL</code> object that represents the \n         JDBC <code>DATALINK</code> value used as the designated\n         parameter\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs, \n this method is called on a closed <code>CallableStatement</code>, \n            or if the URL being returned is\n            not a valid URL on the Java platform\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setURL\n @since 1.4\n"
15074,method,java/sql/CallableStatement/setURL/String;URL," Sets the designated parameter to the given <code>java.net.URL</code> object.\n The driver converts this to an SQL <code>DATALINK</code> value when\n it sends it to the database.\n\n @param parameterName the name of the parameter\n @param val the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs;\n this method is called on a closed <code>CallableStatement</code> \n            or if a URL is malformed\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getURL\n @since 1.4\n"
15076,method,java/sql/CallableStatement/setBoolean/String;boolean," Sets the designated parameter to the given Java <code>boolean</code> value.\n The driver converts this\n to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @see #getBoolean\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15077,method,java/sql/CallableStatement/setByte/String;byte," Sets the designated parameter to the given Java <code>byte</code> value.  \n The driver converts this\n to an SQL <code>TINYINT</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getByte\n @since 1.4\n"
15078,method,java/sql/CallableStatement/setShort/String;short," Sets the designated parameter to the given Java <code>short</code> value. \n The driver converts this\n to an SQL <code>SMALLINT</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getShort\n @since 1.4\n"
15079,method,java/sql/CallableStatement/setInt/String;int," Sets the designated parameter to the given Java <code>int</code> value.  \n The driver converts this\n to an SQL <code>INTEGER</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getInt\n @since 1.4\n"
15080,method,java/sql/CallableStatement/setLong/String;long," Sets the designated parameter to the given Java <code>long</code> value. \n The driver converts this\n to an SQL <code>BIGINT</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getLong\n @since 1.4\n"
15081,method,java/sql/CallableStatement/setFloat/String;float," Sets the designated parameter to the given Java <code>float</code> value. \n The driver converts this\n to an SQL <code>FLOAT</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getFloat\n @since 1.4\n"
15083,method,java/sql/CallableStatement/setBigDecimal/String;BigDecimal," Sets the designated parameter to the given\n <code>java.math.BigDecimal</code> value.  \n The driver converts this to an SQL <code>NUMERIC</code> value when\n it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getBigDecimal\n @since 1.4\n"
15084,method,java/sql/CallableStatement/setString/String;String," Sets the designated parameter to the given Java <code>String</code> value. \n The driver converts this\n to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value\n (depending on the argument's\n size relative to the driver's limits on <code>VARCHAR</code> values)\n when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getString\n @since 1.4\n"
15085,method,java/sql/CallableStatement/setBytes/String;byte[]," Sets the designated parameter to the given Java array of bytes.  \n The driver converts this to an SQL <code>VARBINARY</code> or \n <code>LONGVARBINARY</code> (depending on the argument's size relative \n to the driver's limits on <code>VARBINARY</code> values) when it sends \n it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value \n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getBytes\n @since 1.4\n"
15086,method,java/sql/CallableStatement/setDate/String;Date," Sets the designated parameter to the given <code>java.sql.Date</code> value\n using the default time zone of the virtual machine that is running\n the application.  \n The driver converts this\n to an SQL <code>DATE</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getDate\n @since 1.4\n"
15087,method,java/sql/CallableStatement/setTime/String;Time," Sets the designated parameter to the given <code>java.sql.Time</code> value.  \n The driver converts this\n to an SQL <code>TIME</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getTime\n @since 1.4\n"
15088,method,java/sql/CallableStatement/setTimestamp/String;Timestamp," Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.  \n The driver\n converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the\n database.\n\n @param parameterName the name of the parameter\n @param x the parameter value \n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getTimestamp\n @since 1.4\n"
15090,method,java/sql/CallableStatement/setBinaryStream/String;InputStream;int," Sets the designated parameter to the given input stream, which will have \n the specified number of bytes.\n When a very large binary value is input to a <code>LONGVARBINARY</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code> object. The data will be read from the stream\n as needed until end-of-file is reached.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterName the name of the parameter\n @param x the java input stream which contains the binary parameter value\n @param length the number of bytes in the stream \n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15092,method,java/sql/CallableStatement/setObject/String;Object;int," Sets the value of the designated parameter with the given object.\n This method is like the method <code>setObject</code>\n above, except that it assumes a scale of zero.\n\n @param parameterName the name of the parameter\n @param x the object containing the input parameter value\n @param targetSqlType the SQL type (as defined in java.sql.Types) to be \n                      sent to the database\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is\n a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>, \n <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>, \n <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n or  <code>STRUCT</code> data type and the JDBC driver does not support\n this data type\n @see #getObject\n @since 1.4\n"
15094,method,java/sql/CallableStatement/setCharacterStream/String;Reader;int," Sets the designated parameter to the given <code>Reader</code>\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterName the name of the parameter\n @param reader the <code>java.io.Reader</code> object that\n        contains the UNICODE data used as the designated parameter\n @param length the number of characters in the stream \n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15095,method,java/sql/CallableStatement/setDate/String;Date;Calendar," Sets the designated parameter to the given <code>java.sql.Date</code> value,\n using the given <code>Calendar</code> object.  The driver uses\n the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,\n which the driver then sends to the database.  With a\n a <code>Calendar</code> object, the driver can calculate the date\n taking into account a custom timezone.  If no\n <code>Calendar</code> object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the date\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getDate\n @since 1.4\n"
15096,method,java/sql/CallableStatement/setTime/String;Time;Calendar," Sets the designated parameter to the given <code>java.sql.Time</code> value,\n using the given <code>Calendar</code> object.  The driver uses\n the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,\n which the driver then sends to the database.  With a\n a <code>Calendar</code> object, the driver can calculate the time\n taking into account a custom timezone.  If no\n <code>Calendar</code> object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the time\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getTime\n @since 1.4\n"
15097,method,java/sql/CallableStatement/setTimestamp/String;Timestamp;Calendar," Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,\n using the given <code>Calendar</code> object.  The driver uses\n the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,\n which the driver then sends to the database.  With a\n a <code>Calendar</code> object, the driver can calculate the timestamp\n taking into account a custom timezone.  If no\n <code>Calendar</code> object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application.\n\n @param parameterName the name of the parameter\n @param x the parameter value \n @param cal the <code>Calendar</code> object the driver will use\n            to construct the timestamp\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getTimestamp\n @since 1.4\n"
15099,method,java/sql/CallableStatement/getString/String," Retrieves the value of a JDBC <code>CHAR</code>, <code>VARCHAR</code>, \n or <code>LONGVARCHAR</code> parameter as a <code>String</code> in \n the Java programming language.\n <p>\n For the fixed-length type JDBC <code>CHAR</code>,\n the <code>String</code> object\n returned has exactly the same value the SQL\n <code>CHAR</code> value had in the\n database, including any padding added by the database.\n @param parameterName the name of the parameter\n @return the parameter value. If the value is SQL <code>NULL</code>, the result \n is <code>null</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setString\n @since 1.4\n"
15100,method,java/sql/CallableStatement/getBoolean/String," Retrieves the value of a JDBC <code>BIT</code> or <code>BOOLEAN</code>\n parameter as a\n <code>boolean</code> in the Java programming language.\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>false</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setBoolean\n @since 1.4\n"
15101,method,java/sql/CallableStatement/getByte/String," Retrieves the value of a JDBC <code>TINYINT</code> parameter as a <code>byte</code> \n in the Java programming language.\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>0</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setByte\n @since 1.4\n"
15102,method,java/sql/CallableStatement/getShort/String," Retrieves the value of a JDBC <code>SMALLINT</code> parameter as a <code>short</code>\n in the Java programming language.\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>0</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setShort\n @since 1.4\n"
15103,method,java/sql/CallableStatement/getInt/String," Retrieves the value of a JDBC <code>INTEGER</code> parameter as an <code>int</code>\n in the Java programming language.\n\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, \n         the result is <code>0</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setInt\n @since 1.4\n"
15104,method,java/sql/CallableStatement/getLong/String," Retrieves the value of a JDBC <code>BIGINT</code> parameter as a <code>long</code>\n in the Java programming language.\n\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, \n         the result is <code>0</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setLong\n @since 1.4\n"
15105,method,java/sql/CallableStatement/getFloat/String," Retrieves the value of a JDBC <code>FLOAT</code> parameter as a <code>float</code>\n in the Java programming language.\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, \n         the result is <code>0</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setFloat\n @since 1.4\n"
15106,method,java/sql/CallableStatement/getDouble/String," Retrieves the value of a JDBC <code>DOUBLE</code> parameter as a <code>double</code>\n in the Java programming language.\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, \n         the result is <code>0</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setDouble\n @since 1.4\n"
15107,method,java/sql/CallableStatement/getBytes/String," Retrieves the value of a JDBC <code>BINARY</code> or <code>VARBINARY</code> \n parameter as an array of <code>byte</code> values in the Java\n programming language.\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result is \n  <code>null</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setBytes\n @since 1.4\n"
15108,method,java/sql/CallableStatement/getDate/String," Retrieves the value of a JDBC <code>DATE</code> parameter as a \n <code>java.sql.Date</code> object. \n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>null</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setDate\n @since 1.4\n"
15109,method,java/sql/CallableStatement/getTime/String," Retrieves the value of a JDBC <code>TIME</code> parameter as a \n <code>java.sql.Time</code> object.\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>null</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setTime\n @since 1.4\n"
15110,method,java/sql/CallableStatement/getTimestamp/String," Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a \n <code>java.sql.Timestamp</code> object.\n @param parameterName the name of the parameter\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result \n is <code>null</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setTimestamp\n @since 1.4\n"
15111,method,java/sql/CallableStatement/getObject/String," Retrieves the value of a parameter as an <code>Object</code> in the Java \n programming language. If the value is an SQL <code>NULL</code>, the \n driver returns a Java <code>null</code>.\n <p>\n This method returns a Java object whose type corresponds to the JDBC\n type that was registered for this parameter using the method\n <code>registerOutParameter</code>.  By registering the target JDBC\n type as <code>java.sql.Types.OTHER</code>, this method can be used\n to read database-specific abstract data types.\n @param parameterName the name of the parameter\n @return A <code>java.lang.Object</code> holding the OUT parameter value.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see Types\n @see #setObject\n @since 1.4\n"
15112,method,java/sql/CallableStatement/getBigDecimal/String," Retrieves the value of a JDBC <code>NUMERIC</code> parameter as a \n <code>java.math.BigDecimal</code> object with as many digits to the\n right of the decimal point as the value contains.\n @param parameterName the name of the parameter\n @return the parameter value in full precision.  If the value is \n SQL <code>NULL</code>, the result is <code>null</code>. \n @exception SQLExceptionif parameterName does not correspond to a named \n parameter;  if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setBigDecimal\n @since 1.4\n"
15113,method,java/sql/CallableStatement/getObject/String;Map," Returns an object representing the value of OUT parameter \n <code>parameterName</code> and uses <code>map</code> for the custom\n mapping of the parameter value.\n <p>\n This method returns a Java object whose type corresponds to the\n JDBC type that was registered for this parameter using the method\n <code>registerOutParameter</code>.  By registering the target\n JDBC type as <code>java.sql.Types.OTHER</code>, this method can\n be used to read database-specific abstract data types.  \n @param parameterName the name of the parameter\n @param map the mapping from SQL type names to Java classes\n @return a <code>java.lang.Object</code> holding the OUT parameter value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setObject\n @since 1.4\n"
15114,method,java/sql/CallableStatement/getRef/String," Retrieves the value of a JDBC <code>REF(&lt;structured-type&gt;)</code>\n parameter as a {@link java.sql.Ref} object in the Java programming language.\n\n @param parameterName the name of the parameter\n @return the parameter value as a <code>Ref</code> object in the\n         Java programming language.  If the value was SQL <code>NULL</code>, \n         the value <code>null</code> is returned.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15115,method,java/sql/CallableStatement/getBlob/String," Retrieves the value of a JDBC <code>BLOB</code> parameter as a\n {@link java.sql.Blob} object in the Java programming language.\n\n @param parameterName the name of the parameter\n @return the parameter value as a <code>Blob</code> object in the\n         Java programming language.  If the value was SQL <code>NULL</code>, \n         the value <code>null</code> is returned.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15116,method,java/sql/CallableStatement/getClob/String," Retrieves the value of a JDBC <code>CLOB</code> parameter as a\n <code>java.sql.Clob</code> object in the Java programming language.\n @param parameterName the name of the parameter\n @return the parameter value as a <code>Clob</code> object in the\n         Java programming language.  If the value was SQL <code>NULL</code>, \n         the value <code>null</code> is returned.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15117,method,java/sql/CallableStatement/getArray/String," Retrieves the value of a JDBC <code>ARRAY</code> parameter as an\n {@link java.sql.Array} object in the Java programming language.\n\n @param parameterName the name of the parameter\n @return the parameter value as an <code>Array</code> object in\n         Java programming language.  If the value was SQL <code>NULL</code>, \n         the value <code>null</code> is returned.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15118,method,java/sql/CallableStatement/getDate/String;Calendar," Retrieves the value of a JDBC <code>DATE</code> parameter as a \n <code>java.sql.Date</code> object, using\n the given <code>Calendar</code> object\n to construct the date.\n With a <code>Calendar</code> object, the driver\n can calculate the date taking into account a custom timezone and locale.\n If no <code>Calendar</code> object is specified, the driver uses the\n default timezone and locale.\n\n @param parameterName the name of the parameter\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the date\n @return the parameter value.  If the value is SQL <code>NULL</code>, \n the result is <code>null</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setDate\n @since 1.4\n"
15119,method,java/sql/CallableStatement/getTime/String;Calendar," Retrieves the value of a JDBC <code>TIME</code> parameter as a \n <code>java.sql.Time</code> object, using\n the given <code>Calendar</code> object\n to construct the time.\n With a <code>Calendar</code> object, the driver\n can calculate the time taking into account a custom timezone and locale.\n If no <code>Calendar</code> object is specified, the driver uses the\n default timezone and locale.\n\n @param parameterName the name of the parameter\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the time\n @return the parameter value; if the value is SQL <code>NULL</code>, the result is \n <code>null</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setTime\n @since 1.4\n"
15120,method,java/sql/CallableStatement/getTimestamp/String;Calendar," Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a\n <code>java.sql.Timestamp</code> object, using\n the given <code>Calendar</code> object to construct\n the <code>Timestamp</code> object.\n With a <code>Calendar</code> object, the driver\n can calculate the timestamp taking into account a custom timezone and locale.\n If no <code>Calendar</code> object is specified, the driver uses the\n default timezone and locale.\n\n\n @param parameterName the name of the parameter\n @param cal the <code>Calendar</code> object the driver will use\n            to construct the timestamp\n @return the parameter value.  If the value is SQL <code>NULL</code>, the result is \n <code>null</code>.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setTimestamp\n @since 1.4\n"
15121,method,java/sql/CallableStatement/getURL/String," Retrieves the value of a JDBC <code>DATALINK</code> parameter as a\n <code>java.net.URL</code> object.\n\n @param parameterName the name of the parameter\n @return the parameter value as a <code>java.net.URL</code> object in the\n Java programming language.  If the value was SQL <code>NULL</code>, the\n value <code>null</code> is returned.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs,\n this method is called on a closed <code>CallableStatement</code>, \n            or if there is a problem with the URL\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setURL\n @since 1.4\n"
15122,method,java/sql/CallableStatement/getRowId/int," Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a  \n <code>java.sql.RowId</code> object.  \n\n @param parameterIndex the first parameter is 1, the second is 2,...\n @return a <code>RowId</code> object that represents the JDBC <code>ROWID</code>\n     value is used as the designated parameter. If the parameter contains\n a SQL <code>NULL</code>, then a <code>null</code> value is returned.\n @throws SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15123,method,java/sql/CallableStatement/getRowId/String," Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a  \n <code>java.sql.RowId</code> object.  \n\n @param parameterName the name of the parameter\n @return a <code>RowId</code> object that represents the JDBC <code>ROWID</code>\n     value is used as the designated parameter. If the parameter contains\n a SQL <code>NULL</code>, then a <code>null</code> value is returned.\n @throws SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15124,method,java/sql/CallableStatement/setRowId/String;RowId," Sets the designated parameter to the given <code>java.sql.RowId</code> object. The\n driver converts this to a SQL <code>ROWID</code> when it sends it to the\n database.\n\n @param parameterName the name of the parameter\n @param x the parameter value\n @throws SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15126,method,java/sql/CallableStatement/setNCharacterStream/String;Reader;long," Sets the designated parameter to a <code>Reader</code> object. The\n <code>Reader</code> reads the data till end-of-file is reached. The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n @param parameterName the name of the parameter to be set\n @param value the parameter value\n @param length the number of characters in the parameter data.\n @throws SQLException if parameterName does not correspond to a named \n parameter; if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15127,method,java/sql/CallableStatement/setNClob/String;NClob," Sets the designated parameter to a <code>java.sql.NClob</code> object. The object\n implements the <code>java.sql.NClob</code> interface. This <code>NClob</code>\n object maps to a SQL <code>NCLOB</code>.\n @param parameterName the name of the parameter to be set\n @param value the parameter value\n @throws SQLException if parameterName does not correspond to a named \n parameter; if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15131,method,java/sql/CallableStatement/getNClob/int," Retrieves the value of the designated JDBC <code>NCLOB</code> parameter as a\n <code>java.sql.NClob</code> object in the Java programming language.\n \n @param parameterIndex the first parameter is 1, the second is 2, and\n so on\n @return the parameter value as a <code>NClob</code> object in the\n Java programming language.  If the value was SQL <code>NULL</code>, the\n value <code>null</code> is returned.\n @exception SQLException if the parameterIndex is not valid; \n if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15132,method,java/sql/CallableStatement/getNClob/String," Retrieves the value of a JDBC <code>NCLOB</code> parameter as a\n <code>java.sql.NClob</code> object in the Java programming language.\n @param parameterName the name of the parameter\n @return the parameter value as a <code>NClob</code> object in the\n         Java programming language.  If the value was SQL <code>NULL</code>, \n         the value <code>null</code> is returned.\n @exception SQLException if parameterName does not correspond to a named \n parameter; if the driver does not support national\n         character sets;  if the driver can detect that a data conversion\n  error could occur; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15133,method,java/sql/CallableStatement/setSQLXML/String;SQLXML," Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an\n <code>SQL XML</code> value when it sends it to the database.\n\n @param parameterName the name of the parameter\n @param xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n @throws SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs; \n this method is called on a closed <code>CallableStatement</code> or \n the <code>java.xml.transform.Result</code>,\n  <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n\n @since 1.6\n"
15134,method,java/sql/CallableStatement/getSQLXML/int," Retrieves the value of the designated <code>SQL XML</code> parameter as a\n <code>java.sql.SQLXML</code> object in the Java programming language.\n @param parameterIndex index of the first parameter is 1, the second is 2, ...\n @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n @throws SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15135,method,java/sql/CallableStatement/getSQLXML/String," Retrieves the value of the designated <code>SQL XML</code> parameter as a\n <code>java.sql.SQLXML</code> object in the Java programming language.\n @param parameterName the name of the parameter\n @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n @throws SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15136,method,java/sql/CallableStatement/getNString/int," Retrieves the value of the designated <code>NCHAR</code>,\n <code>NVARCHAR</code>\n or <code>LONGNVARCHAR</code> parameter as\n a <code>String</code> in the Java programming language.\n  <p>\n For the fixed-length type JDBC <code>NCHAR</code>,\n the <code>String</code> object\n returned has exactly the same value the SQL\n <code>NCHAR</code> value had in the\n database, including any padding added by the database.\n\n @param parameterIndex index of the first parameter is 1, the second is 2, ...\n @return a <code>String</code> object that maps an \n <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n @see #setNString\n"
15137,method,java/sql/CallableStatement/getNString/String,"  Retrieves the value of the designated <code>NCHAR</code>,\n <code>NVARCHAR</code>\n or <code>LONGNVARCHAR</code> parameter as\n a <code>String</code> in the Java programming language.\n <p>\n For the fixed-length type JDBC <code>NCHAR</code>,\n the <code>String</code> object\n returned has exactly the same value the SQL\n <code>NCHAR</code> value had in the\n database, including any padding added by the database.\n\n @param parameterName the name of the parameter\n @return a <code>String</code> object that maps an \n <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n @exception SQLException if parameterName does not correspond to a named \n parameter; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6 \n @see #setNString\n"
15138,method,java/sql/CallableStatement/getNCharacterStream/int," Retrieves the value of the designated parameter as a\n <code>java.io.Reader</code> object in the Java programming language.\n It is intended for use when\n accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> parameters.\n\n @return a <code>java.io.Reader</code> object that contains the parameter\n value; if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language.\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @exception SQLException if the parameterIndex is not valid; \n if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15139,method,java/sql/CallableStatement/getNCharacterStream/String," Retrieves the value of the designated parameter as a\n <code>java.io.Reader</code> object in the Java programming language.\n It is intended for use when\n accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> parameters.\n \n @param parameterName the name of the parameter\n @return a <code>java.io.Reader</code> object that contains the parameter\n value; if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15140,method,java/sql/CallableStatement/getCharacterStream/int," Retrieves the value of the designated parameter as a\n <code>java.io.Reader</code> object in the Java programming language.\n\n @return a <code>java.io.Reader</code> object that contains the parameter\n value; if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language.\n @param parameterIndex the first parameter is 1, the second is 2, ...\n @exception SQLException if the parameterIndex is not valid; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @since 1.6\n"
15141,method,java/sql/CallableStatement/getCharacterStream/String," Retrieves the value of the designated parameter as a\n <code>java.io.Reader</code> object in the Java programming language.\n \n @param parameterName the name of the parameter\n @return a <code>java.io.Reader</code> object that contains the parameter\n value; if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15142,method,java/sql/CallableStatement/setBlob/String;Blob," Sets the designated parameter to the given <code>java.sql.Blob</code> object.\n The driver converts this to an SQL <code>BLOB</code> value when it\n sends it to the database.\n\n @param parameterName the name of the parameter\n @param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15143,method,java/sql/CallableStatement/setClob/String;Clob," Sets the designated parameter to the given <code>java.sql.Clob</code> object.\n The driver converts this to an SQL <code>CLOB</code> value when it\n sends it to the database.\n\n @param parameterName the name of the parameter\n @param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15144,method,java/sql/CallableStatement/setAsciiStream/String;InputStream;long," Sets the designated parameter to the given input stream, which will have \n the specified number of bytes.\n When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code>. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterName the name of the parameter\n @param x the Java input stream that contains the ASCII parameter value\n @param length the number of bytes in the stream \n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15145,method,java/sql/CallableStatement/setBinaryStream/String;InputStream;long," Sets the designated parameter to the given input stream, which will have \n the specified number of bytes.\n When a very large binary value is input to a <code>LONGVARBINARY</code>\n parameter, it may be more practical to send it via a\n <code>java.io.InputStream</code> object. The data will be read from the stream\n as needed until end-of-file is reached.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterName the name of the parameter\n @param x the java input stream which contains the binary parameter value\n @param length the number of bytes in the stream \n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15146,method,java/sql/CallableStatement/setCharacterStream/String;Reader;long," Sets the designated parameter to the given <code>Reader</code>\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n\n @param parameterName the name of the parameter\n @param reader the <code>java.io.Reader</code> object that\n        contains the UNICODE data used as the designated parameter\n @param length the number of characters in the stream \n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15149,method,java/sql/CallableStatement/setCharacterStream/String;Reader," Sets the designated parameter to the given <code>Reader</code>\n object.\n When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n <P><B>Note:</B> This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>setCharacterStream</code> which takes a length parameter. \n\n @param parameterName the name of the parameter\n @param reader the <code>java.io.Reader</code> object that contains the \n        Unicode data\n @exception SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.6\n"
15151,method,java/sql/CallableStatement/setClob/String;Reader," Sets the designated parameter to a <code>Reader</code> object. \n This method differs from the <code>setCharacterStream (int, Reader)</code> method\n because it informs the driver that the parameter value should be sent to\n the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n \n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>setClob</code> which takes a length parameter.\n\n @param parameterName the name of the parameter\n @param reader An object that contains the data to set the parameter value to.\n @throws SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or this method is called on\n a closed <code>CallableStatement</code>\n\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n @since 1.6\n"
15152,method,java/sql/CallableStatement/setBlob/String;InputStream," Sets the designated parameter to a <code>InputStream</code> object. \n This method differs from the <code>setBinaryStream (int, InputStream)</code>\n method because it informs the driver that the parameter value should be\n sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n the driver may have to do extra work to determine whether the parameter\n data should be send to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>setBlob</code> which takes a length parameter.\n\n @param parameterName the name of the parameter\n @param inputStream An object that contains the data to set the parameter\n value to.\n @throws SQLException if parameterName does not correspond to a named \n parameter; if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n\n @since 1.6\n"
15153,method,java/sql/CallableStatement/setNClob/String;Reader," Sets the designated parameter to a <code>Reader</code> object.  \n This method differs from the <code>setCharacterStream (int, Reader)</code> method\n because it informs the driver that the parameter value should be sent to\n the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n <P><B>Note:</B> Consult your JDBC driver documentation to determine if \n it might be more efficient to use a version of \n <code>setNClob</code> which takes a length parameter.\n\n @param parameterName the name of the parameter\n @param reader An object that contains the data to set the parameter value to.\n @throws SQLException if parameterName does not correspond to a named \n parameter; if the driver does not support national character sets;\n if the driver can detect that a data conversion\n  error could occur;  if a database access error occurs or \n this method is called on a closed <code>CallableStatement</code>\n @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n\n @since 1.6\n"
15154,interface,java/sql/Blob," The representation (mapping) in\n the Java<sup><font size=-2>TM</font></sup> programming\n language of an SQL \n <code>BLOB</code> value.  An SQL <code>BLOB</code> is a built-in type \n that stores a Binary Large Object as a column value in a row of \n a database table. By default drivers implement <code>Blob</code> using\n an SQL <code>locator(BLOB)</code>, which means that a\n <code>Blob</code> object contains a logical pointer to the\n SQL <code>BLOB</code> data rather than the data itself.\n A <code>Blob</code> object is valid for the duration of the\n transaction in which is was created.\n \n <P>Methods in the interfaces {@link ResultSet}, \n {@link CallableStatement}, and {@link PreparedStatement}, such as\n <code>getBlob</code> and <code>setBlob</code> allow a programmer to \n access an SQL <code>BLOB</code> value.\n The <code>Blob</code> interface provides methods for getting the\n length of an SQL <code>BLOB</code> (Binary Large Object) value,\n for materializing a <code>BLOB</code> value on the client, and for\n determining the position of a pattern of bytes within a \n <code>BLOB</code> value. In addition, this interface has methods for updating\n a <code>BLOB</code> value.\n <p>\n All methods on the <code>Blob</code> interface must be fully implemented if the \n JDBC driver supports the data type.\n\n @since 1.2\n"
15157,method,java/sql/Blob/getBinaryStream/," Retrieves the <code>BLOB</code> value designated by this\n <code>Blob</code> instance as a stream.\n\n @return a stream containing the <code>BLOB</code> data\n @exception SQLException if there is an error accessing the\n            <code>BLOB</code> value\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #setBinaryStream\n @since 1.2\n"
15158,method,java/sql/Blob/position/byte[];long,"\n Retrieves the byte position at which the specified byte array\n <code>pattern</code> begins within the <code>BLOB</code>\n value that this <code>Blob</code> object represents.  The\n search for <code>pattern</code> begins at position\n <code>start</code>.  \n\n @param pattern the byte array for which to search\n @param start the position at which to begin searching; the\n        first position is 1\n @return the position at which the pattern appears, else -1\n @exception SQLException if there is an error accessing the \n <code>BLOB</code> or if start is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15159,method,java/sql/Blob/position/Blob;long,"\n Retrieves the byte position in the <code>BLOB</code> value\n designated by this <code>Blob</code> object at which \n <code>pattern</code> begins.  The search begins at position\n <code>start</code>.\n\n @param pattern the <code>Blob</code> object designating\n the <code>BLOB</code> value for which to search\n @param start the position in the <code>BLOB</code> value\n        at which to begin searching; the first position is 1\n @return the position at which the pattern begins, else -1\n @exception SQLException if there is an error accessing the\n            <code>BLOB</code> value or if start is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15160,method,java/sql/Blob/setBytes/long;byte[]," Writes the given array of bytes to the <code>BLOB</code> value that\n this <code>Blob</code> object represents, starting at position \n <code>pos</code>, and returns the number of bytes written.\n The array of bytes will overwrite the existing bytes \n in the <code>Blob</code> object starting at the position \n <code>pos</code>.  If the end of the <code>Blob</code> value is reached \n while writing the array of bytes, then the length of the <code>Blob</code> \n value will be increased to accomodate the extra bytes.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>BLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param pos the position in the <code>BLOB</code> object at which\n        to start writing; the first position is 1\n @param bytes the array of bytes to be written to the <code>BLOB</code>\n        value that this <code>Blob</code> object represents\n @return the number of bytes written\n @exception SQLException if there is an error accessing the\n            <code>BLOB</code> value or if pos is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getBytes\n @since 1.4\n"
15161,method,java/sql/Blob/setBytes/long;byte[];int;int," Writes all or part of the given <code>byte</code> array to the\n <code>BLOB</code> value that this <code>Blob</code> object represents\n and returns the number of bytes written.\n Writing starts at position <code>pos</code> in the <code>BLOB</code>\n value; <code>len</code> bytes from the given byte array are written.\n The array of bytes will overwrite the existing bytes \n in the <code>Blob</code> object starting at the position \n <code>pos</code>.  If the end of the <code>Blob</code> value is reached \n while writing the array of bytes, then the length of the <code>Blob</code> \n value will be increased to accomodate the extra bytes.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>BLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param pos the position in the <code>BLOB</code> object at which\n        to start writing; the first position is 1\n @param bytes the array of bytes to be written to this <code>BLOB</code>\n        object\n @param offset the offset into the array <code>bytes</code> at which\n        to start reading the bytes to be set\n @param len the number of bytes to be written to the <code>BLOB</code>\n        value from the array of bytes <code>bytes</code>\n @return the number of bytes written\n @exception SQLException if there is an error accessing the\n            <code>BLOB</code> value or if pos is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getBytes\n @since 1.4\n"
15162,method,java/sql/Blob/setBinaryStream/long," Retrieves a stream that can be used to write to the <code>BLOB</code> \n value that this <code>Blob</code> object represents.  The stream begins\n at position <code>pos</code>.\n The  bytes written to the stream will overwrite the existing bytes \n in the <code>Blob</code> object starting at the position \n <code>pos</code>.  If the end of the <code>Blob</code> value is reached \n while writing to the stream, then the length of the <code>Blob</code> \n value will be increased to accomodate the extra bytes.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>BLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param pos the position in the <code>BLOB</code> value at which\n        to start writing; the first position is 1\n @return a <code>java.io.OutputStream</code> object to which data can \n         be written\n @exception SQLException if there is an error accessing the\n            <code>BLOB</code> value or if pos is less than 1\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @see #getBinaryStream\n @since 1.4\n"
15163,method,java/sql/Blob/truncate/long," Truncates the <code>BLOB</code> value that this <code>Blob</code>\n object represents to be <code>len</code> bytes in length.\n <p>\n <b>Note:</b> If the value specified for <code>pos</code>\n is greater then the length+1 of the <code>BLOB</code> value then the \n behavior is undefined. Some JDBC drivers may throw a \n <code>SQLException</code> while other drivers may support this \n operation.\n\n @param len the length, in bytes, to which the <code>BLOB</code> value\n        that this <code>Blob</code> object represents should be truncated\n @exception SQLException if there is an error accessing the\n            <code>BLOB</code> value or if len is less than 0\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.4\n"
15166,class,java/sql/BatchUpdateException," The subclass of {@link SQLException} thrown when an error\n occurs during a batch update operation.  In addition to the\n information provided by {@link SQLException}, a \n <code>BatchUpdateException</code> provides the update\n counts for all commands that were executed successfully during the\n batch update, that is, all commands that were executed before the error \n occurred.  The order of elements in an array of update counts\n corresponds to the order in which commands were added to the batch.\n <P>\n After a command in a batch update fails to execute properly\n and a <code>BatchUpdateException</code> is thrown, the driver\n may or may not continue to process the remaining commands in\n the batch.  If the driver continues processing after a failure,\n the array returned by the method \n <code>BatchUpdateException.getUpdateCounts</code> will have \n an element for every command in the batch rather than only\n elements for the commands that executed successfully before \n the error.  In the case where the driver continues processing\n commands, the array element for any command\n that failed is <code>Statement.EXECUTE_FAILED</code>.\n <P>\n @since 1.2\n"
15167,method,java/sql/BatchUpdateException/getUpdateCounts/," Retrieves the update count for each update statement in the batch\n update that executed successfully before this exception occurred.\n A driver that implements batch updates may or may not continue to\n process the remaining commands in a batch when one of the commands\n fails to execute properly. If the driver continues processing commands,\n the array returned by this method will have as many elements as\n there are commands in the batch; otherwise, it will contain an\n update count for each command that executed successfully before\n the <code>BatchUpdateException</code> was thrown.\n<P>\n The possible return values for this method were modified for\n the Java 2 SDK, Standard Edition, version 1.3.  This was done to\n accommodate the new option of continuing to process commands\n in a batch update after a <code>BatchUpdateException</code> object\n has been thrown.\n\n @return an array of <code>int</code> containing the update counts\n for the updates that were executed successfully before this error\n occurred.  Or, if the driver continues to process commands after an\n error, one of the following for every command in the batch:\n <OL>\n <LI>an update count\n  <LI><code>Statement.SUCCESS_NO_INFO</code> to indicate that the command\n     executed successfully but the number of rows affected is unknown\n  <LI><code>Statement.EXECUTE_FAILED</code> to indicate that the command \n     failed to execute successfully\n </OL>\n @since 1.3\n"
15168,method,java/sql/BatchUpdateException/BatchUpdateException/String;String;int;int[]," Constructs a <code>BatchUpdateException</code> object initialized with a given\n <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code> and\n <code>updateCounts</code>.\n The <code>cause</code> is not initialized, and may subsequently be \n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n\n @param reason a description of the error \n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode an exception code used by a particular\n database vendor\n @param updateCounts an array of <code>int</code>, with each element\n indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n @since 1.2\n"
15169,method,java/sql/BatchUpdateException/BatchUpdateException/String;String;int[]," Constructs a <code>BatchUpdateException</code> object initialized with a given\n <code>reason</code>, <code>SQLState</code> and\n <code>updateCounts</code>. \n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n is intialized to 0.\n <p>\n\n @param reason a description of the exception \n @param SQLState an XOPEN or SQL:2003 code identifying the exception \n @param updateCounts an array of <code>int</code>, with each element  \n indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n @since 1.2\n"
15170,method,java/sql/BatchUpdateException/BatchUpdateException/String;int[]," Constructs a <code>BatchUpdateException</code> object initialized with a given\n <code>reason</code> and <code>updateCounts</code>.\n The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.  The \n <code>SQLState</code> is initialized to <code>null</code>\n and the vender code is initialized to 0.\n <p>\n\n\n @param reason a description of the exception \n @param updateCounts an array of <code>int</code>, with each element\n indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n @since 1.2\n"
15171,method,java/sql/BatchUpdateException/BatchUpdateException/int[]," Constructs a <code>BatchUpdateException</code> object initialized with a given\n <code>updateCounts</code>.\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method. The  <code>reason</code>\n and <code>SQLState</code> are initialized to null and the vendor code\n is initialized to 0.\n <p>\n\n @param updateCounts an array of <code>int</code>, with each element\n indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n @since 1.2\n"
15172,method,java/sql/BatchUpdateException/BatchUpdateException/," Constructs a <code>BatchUpdateException</code> object.\n The <code>reason</code>, <code>SQLState</code> and <code>updateCounts</code>\n  are initialized to <code>null</code> and the vendor code is initialized to 0.\n The <code>cause</code> is not initialized, and may subsequently be \n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n <p>\n\n @since 1.2\n"
15173,method,java/sql/BatchUpdateException/BatchUpdateException/Throwable," Constructs a <code>BatchUpdateException</code> object initialized with\n  a given <code>cause</code>.\n The <code>SQLState</code> and <code>updateCounts</code>\n are initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n  <code>cause!=null</code>.\n @param cause the underlying reason for this <code>SQLException</code>\n (which is saved for later retrieval by the <code>getCause()</code> method); \n may be null indicating the cause is non-existent or unknown.\n @since 1.6\n"
15174,method,java/sql/BatchUpdateException/BatchUpdateException/int[];Throwable," Constructs a <code>BatchUpdateException</code> object initialized with a\n given <code>cause</code> and <code>updateCounts</code>.\n The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n\n @param updateCounts an array of <code>int</code>, with each element\n indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n @param cause the underlying reason for this <code>SQLException</code>\n (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n the cause is non-existent or unknown.\n @since 1.6\n"
15175,method,java/sql/BatchUpdateException/BatchUpdateException/String;int[];Throwable," Constructs a <code>BatchUpdateException</code> object initialized with \n a given <code>reason</code>, <code>cause</code>\n and <code>updateCounts</code>. The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n @param reason a description of the exception\n @param updateCounts an array of <code>int</code>, with each element\nindicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); \n may be null indicating\n the cause is non-existent or unknown.\n @since 1.6\n"
15176,method,java/sql/BatchUpdateException/BatchUpdateException/String;String;int[];Throwable," Constructs a <code>BatchUpdateException</code> object initialized with\n a given <code>reason</code>, <code>SQLState</code>,<code>cause</code>, and\n <code>updateCounts</code>. The vendor code is initialized to 0.     \n\n @param reason a description of the exception\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param updateCounts an array of <code>int</code>, with each element\n indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); \n may be null indicating\n the cause is non-existent or unknown.\n @since 1.6\n"
15177,method,java/sql/BatchUpdateException/BatchUpdateException/String;String;int;int[];Throwable," Constructs a <code>BatchUpdateException</code> object initialized with\n a given <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n <code>cause</code> and <code>updateCounts</code>.\n\n @param reason a description of the error\n @param SQLState an XOPEN or SQL:2003 code identifying the exception\n @param vendorCode an exception code used by a particular\n database vendor\n @param updateCounts an array of <code>int</code>, with each element\nindicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method);\n may be null indicating\n the cause is non-existent or unknown.\n @since 1.6\n"
15179,method,java/sql/Array/getBaseTypeName/," Retrieves the SQL type name of the elements in \n the array designated by this <code>Array</code> object.\n If the elements are a built-in type, it returns\n the database-specific type name of the elements. \n If the elements are a user-defined type (UDT),\n this method returns the fully-qualified SQL type name.\n\n @return a <code>String</code> that is the database-specific\n name for a built-in base type; or the fully-qualified SQL type\n name for a base type that is a UDT\n @exception SQLException if an error occurs while attempting\n to access the type name\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15180,method,java/sql/Array/getBaseType/," Retrieves the JDBC type of the elements in the array designated\n by this <code>Array</code> object.\n\n @return a constant from the class {@link java.sql.Types} that is\n the type code for the elements in the array designated by this\n <code>Array</code> object\n @exception SQLException if an error occurs while attempting\n to access the base type \n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15181,method,java/sql/Array/getArray/," Retrieves the contents of the SQL <code>ARRAY</code> value designated \n by this\n <code>Array</code> object in the form of an array in the Java\n programming language. This version of the method <code>getArray</code>\n uses the type map associated with the connection for customizations of \n the type mappings.\n <p>\n <strong>Note:</strong> When <code>getArray</code> is used to materialize \n a base type that maps to a primitive data type, then it is \n implementation-defined whether the array returned is an array of \n that primitive data type or an array of <code>Object</code>.\n\n @return an array in the Java programming language that contains \n the ordered elements of the SQL <code>ARRAY</code> value\n designated by this <code>Array</code> object\n @exception SQLException if an error occurs while attempting to\n access the array\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15182,method,java/sql/Array/getArray/Map," Retrieves the contents of the SQL <code>ARRAY</code> value designated by this \n <code>Array</code> object.\n This method uses \n the specified <code>map</code> for type map customizations\n unless the base type of the array does not match a user-defined \n type in <code>map</code>, in which case it \n uses the standard mapping. This version of the method\n <code>getArray</code> uses either the given type map or the standard mapping;\n it never uses the type map associated with the connection.\n <p>\n <strong>Note:</strong> When <code>getArray</code> is used to materialize \n a base type that maps to a primitive data type, then it is \n implementation-defined whether the array returned is an array of \n that primitive data type or an array of <code>Object</code>.\n\n @param map a <code>java.util.Map</code> object that contains mappings\n            of SQL type names to classes in the Java programming language\n @return an array in the Java programming language that contains the ordered \n         elements of the SQL array designated by this object\n @exception SQLException if an error occurs while attempting to \n                         access the array\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15183,method,java/sql/Array/getArray/long;int," Retrieves a slice of the SQL <code>ARRAY</code>\n value designated by this <code>Array</code> object, beginning with the\n specified <code>index</code> and containing up to <code>count</code> \n successive elements of the SQL array.  This method uses the type map\n associated with the connection for customizations of the type mappings.\n <p>\n <strong>Note:</strong> When <code>getArray</code> is used to materialize \n a base type that maps to a primitive data type, then it is \n implementation-defined whether the array returned is an array of \n that primitive data type or an array of <code>Object</code>.\n\n @param index the array index of the first element to retrieve;\n              the first element is at index 1\n @param count the number of successive SQL array elements to retrieve\n @return an array containing up to <code>count</code> consecutive elements \n of the SQL array, beginning with element <code>index</code>\n @exception SQLException if an error occurs while attempting to\n access the array\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15184,method,java/sql/Array/getArray/long;int;Map," Retreives a slice of the SQL <code>ARRAY</code> value \n designated by this <code>Array</code> object, beginning with the specified\n <code>index</code> and containing up to <code>count</code>\n successive elements of the SQL array.  \n <P>\n This method uses \n the specified <code>map</code> for type map customizations\n unless the base type of the array does not match a user-defined \n type in <code>map</code>, in which case it \n uses the standard mapping. This version of the method\n <code>getArray</code> uses either the given type map or the standard mapping;\n it never uses the type map associated with the connection.\n <p>\n <strong>Note:</strong> When <code>getArray</code> is used to materialize \n a base type that maps to a primitive data type, then it is \n implementation-defined whether the array returned is an array of \n that primitive data type or an array of <code>Object</code>.\n\n @param index the array index of the first element to retrieve;\n              the first element is at index 1\n @param count the number of successive SQL array elements to \n retrieve\n @param map a <code>java.util.Map</code> object\n that contains SQL type names and the classes in\n the Java programming language to which they are mapped\n @return an array containing up to <code>count</code>\n consecutive elements of the SQL <code>ARRAY</code> value designated by this\n <code>Array</code> object, beginning with element \n <code>index</code>\n @exception SQLException if an error occurs while attempting to\n access the array\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15185,method,java/sql/Array/getResultSet/," Retrieves a result set that contains the elements of the SQL \n <code>ARRAY</code> value\n designated by this <code>Array</code> object.  If appropriate,\n the elements of the array are mapped using the connection's type \n map; otherwise, the standard mapping is used.\n <p>\n The result set contains one row for each array element, with\n two columns in each row.  The second column stores the element\n value; the first column stores the index into the array for \n that element (with the first array element being at index 1). \n The rows are in ascending order corresponding to\n the order of the indices.\n\n @return a {@link ResultSet} object containing one row for each\n of the elements in the array designated by this <code>Array</code>\n object, with the rows in ascending order based on the indices.\n @exception SQLException if an error occurs while attempting to\n access the array\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15186,method,java/sql/Array/getResultSet/Map," Retrieves a result set that contains the elements of the SQL \n <code>ARRAY</code> value designated by this <code>Array</code> object.\n This method uses \n the specified <code>map</code> for type map customizations\n unless the base type of the array does not match a user-defined \n type in <code>map</code>, in which case it \n uses the standard mapping. This version of the method\n <code>getResultSet</code> uses either the given type map or the standard mapping;\n it never uses the type map associated with the connection.\n <p>\n The result set contains one row for each array element, with\n two columns in each row.  The second column stores the element\n value; the first column stores the index into the array for \n that element (with the first array element being at index 1). \n The rows are in ascending order corresponding to\n the order of the indices.\n\n @param map contains the mapping of SQL user-defined types to \n classes in the Java programming language\n @return a <code>ResultSet</code> object containing one row for each\n of the elements in the array designated by this <code>Array</code>\n object, with the rows in ascending order based on the indices.\n @exception SQLException if an error occurs while attempting to\n access the array\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15188,method,java/sql/Array/getResultSet/long;int;Map," Retrieves a result set holding the elements of the subarray that\n starts at index <code>index</code> and contains up to\n <code>count</code> successive elements.\n This method uses \n the specified <code>map</code> for type map customizations\n unless the base type of the array does not match a user-defined \n type in <code>map</code>, in which case it \n uses the standard mapping. This version of the method\n <code>getResultSet</code> uses either the given type map or the standard mapping;\n it never uses the type map associated with the connection.\n <P>\n The result set has one row for each element of the SQL array\n designated by this object, with the first row containing the\n element at index <code>index</code>.  The result set has   \n up to <code>count</code> rows in ascending order based on the\n indices.  Each row has two columns:  The second column stores  \n the element value; the first column stroes the index into the\n array for that element.\n\n @param index the array index of the first element to retrieve;\n              the first element is at index 1\n @param count the number of successive SQL array elements to retrieve\n @param map the <code>Map</code> object that contains the mapping\n of SQL type names to classes in the Java(tm) programming language\n @return a <code>ResultSet</code> object containing up to               \n <code>count</code> consecutive elements of the SQL array\n designated by this <code>Array</code> object, starting at\n index <code>index</code>.\n @exception SQLException if an error occurs while attempting to\n access the array\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.2\n"
15189,method,java/sql/Array/free/," This method frees the <code>Array</code> object and releases the resources that \n it holds. The object is invalid once the <code>free</code>\n method is called.\n<p>\n After <code>free</code> has been called, any attempt to invoke a\n method other than <code>free</code> will result in a <code>SQLException</code> \n being thrown.  If <code>free</code> is called multiple times, the subsequent\n calls to <code>free</code> are treated as a no-op.\n<p>\n \n @throws SQLException if an error occurs releasing\n the Array's resources\n @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n this method\n @since 1.6\n"
15191,method,java/applet/AudioClip/play/," Starts playing this audio clip. Each time this method is called,\n the clip is restarted from the beginning.\n"
15194,interface,java/applet/AppletStub," When an applet is first created, an applet stub is attached to it\n using the applet's <code>setStub</code> method. This stub\n serves as the interface between the applet and the browser\n environment or applet viewer environment in which the application\n is running.\n\n @author 	Arthur van Hoff\n @version     1.28, 03/23/10\n @see         java.applet.Applet#setStub(java.applet.AppletStub)\n @since       JDK1.0\n"
15195,method,java/applet/AppletStub/isActive/," Determines if the applet is active. An applet is active just\n before its <code>start</code> method is called. It becomes\n inactive just before its <code>stop</code> method is called.\n\n @return  <code>true</code> if the applet is active;\n          <code>false</code> otherwise.\n"
15198,method,java/applet/AppletStub/getParameter/String," Returns the value of the named parameter in the HTML tag. For\n example, if an applet is specified as\n <blockquote><pre>\n &lt;applet code="Clock" width=50 height=50&gt;\n &lt;param name=Color value="blue"&gt;\n &lt;/applet&gt;\n </pre></blockquote>\n <p>\n then a call to <code>getParameter("Color")</code> returns the\n value <code>"blue"</code>.\n\n @param   name   a parameter name.\n @return  the value of the named parameter,\n or <tt>null</tt> if not set.\n"
15200,method,java/applet/AppletStub/appletResize/int;int," Called when the applet wants to be resized.\n\n @param   width    the new requested width for the applet.\n @param   height   the new requested height for the applet.\n"
15206,method,java/applet/AppletContext/showDocument/URL," Requests that the browser or applet viewer show the Web page \n indicated by the <code>url</code> argument. The browser or \n applet viewer determines which window or frame to display the \n Web page. This method may be ignored by applet contexts that \n are not browsers.\n\n @param   url   an absolute URL giving the location of the document.\n"
15212,class,java/applet/Applet," An applet is a small program that is intended not to be run on\n its own, but rather to be embedded inside another application.\n <p>\n The <code>Applet</code> class must be the superclass of any\n applet that is to be embedded in a Web page or viewed by the Java\n Applet Viewer. The <code>Applet</code> class provides a standard\n interface between applets and their environment.\n\n @author      Arthur van Hoff\n @author      Chris Warth\n @version     1.84, 03/23/10\n @since       JDK1.0\n"
15213,method,java/applet/Applet/setStub/AppletStub," Sets this applet's stub. This is done automatically by the system.\n <p>If there is a security manager, its <code> checkPermission </code>\n method is called with the\n <code>AWTPermission("setAppletStub")</code>\n permission if a stub has already been set.\n @param   stub   the new stub.\n @exception SecurityException if the caller cannot set the stub\n"
15214,method,java/applet/Applet/isActive/," Determines if this applet is active. An applet is marked active\n just before its <code>start</code> method is called. It becomes\n inactive just before its <code>stop</code> method is called.\n\n @return  <code>true</code> if the applet is active;\n          <code>false</code> otherwise.\n @see     java.applet.Applet#start()\n @see     java.applet.Applet#stop()\n"
15217,method,java/applet/Applet/getParameter/String," Returns the value of the named parameter in the HTML tag. For\n example, if this applet is specified as\n <blockquote><pre>\n &lt;applet code="Clock" width=50 height=50&gt;\n &lt;param name=Color value="blue"&gt;\n &lt;/applet&gt;\n </pre></blockquote>\n <p>\n then a call to <code>getParameter("Color")</code> returns the\n value <code>"blue"</code>.\n <p>\n The <code>name</code> argument is case insensitive.\n\n @param   name   a parameter name.\n @return  the value of the named parameter,\n          or <code>null</code> if not set.\n"
15232,method,java/applet/Applet/init/," Called by the browser or applet viewer to inform\n this applet that it has been loaded into the system. It is always\n called before the first time that the <code>start</code> method is\n called.\n <p>\n A subclass of <code>Applet</code> should override this method if\n it has initialization to perform. For example, an applet with\n threads would use the <code>init</code> method to create the\n threads and the <code>destroy</code> method to kill them.\n <p>\n The implementation of this method provided by the\n <code>Applet</code> class does nothing.\n\n @see     java.applet.Applet#destroy()\n @see     java.applet.Applet#start()\n @see     java.applet.Applet#stop()\n"
15234,method,java/applet/Applet/stop/," Called by the browser or applet viewer to inform\n this applet that it should stop its execution. It is called when\n the Web page that contains this applet has been replaced by\n another page, and also just before the applet is to be destroyed.\n <p>\n A subclass of <code>Applet</code> should override this method if\n it has any operation that it wants to perform each time the Web\n page containing it is no longer visible. For example, an applet\n with animation might want to use the <code>start</code> method to\n resume animation, and the <code>stop</code> method to suspend the\n animation.\n <p>\n The implementation of this method provided by the\n <code>Applet</code> class does nothing.\n\n @see     java.applet.Applet#destroy()\n @see     java.applet.Applet#init()\n"
15235,method,java/applet/Applet/destroy/," Called by the browser or applet viewer to inform\n this applet that it is being reclaimed and that it should destroy\n any resources that it has allocated. The <code>stop</code> method\n will always be called before <code>destroy</code>.\n <p>\n A subclass of <code>Applet</code> should override this method if\n it has any operation that it wants to perform before it is\n destroyed. For example, an applet with threads would use the\n <code>init</code> method to create the threads and the\n <code>destroy</code> method to kill them.\n <p>\n The implementation of this method provided by the\n <code>Applet</code> class does nothing.\n\n @see     java.applet.Applet#init()\n @see     java.applet.Applet#start()\n @see     java.applet.Applet#stop()\n"
15236,method,java/applet/Applet/getAccessibleContext/," Gets the AccessibleContext associated with this Applet. \n For applets, the AccessibleContext takes the form of an \n AccessibleApplet. \n A new AccessibleApplet instance is created if necessary.\n\n @return an AccessibleApplet that serves as the \n         AccessibleContext of this Applet\n @since 1.3\n"
15242,class,java/net/UnknownServiceException," Thrown to indicate that an unknown service exception has \n occurred. Either the MIME type returned by a URL connection does \n not make sense, or the application is attempting to write to a \n read-only URL connection. \n\n @author  unascribed\n @version 1.16, 03/23/10\n @since   JDK1.0\n"
15250,class,java/net/URLStreamHandler," The abstract class <code>URLStreamHandler</code> is the common\n superclass for all stream protocol handlers. A stream protocol\n handler knows how to make a connection for a particular protocol\n type, such as <code>http</code>, <code>ftp</code>, or\n <code>gopher</code>.\n <p>\n In most cases, an instance of a <code>URLStreamHandler</code>\n subclass is not created directly by an application. Rather, the\n first time a protocol name is encountered when constructing a\n <code>URL</code>, the appropriate stream protocol handler is\n automatically loaded.\n\n @author  James Gosling\n @version 1.74, 03/23/10\n @see     java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)\n @since   JDK1.0\n"
15259,method,java/net/URLStreamHandler/hostsEqual/URL;URL," Compares the host components of two URLs.\n @param u1 the URL of the first host to compare \n @param u2 the URL of the second host to compare \n @return	<tt>true</tt> if and only if they \n are equal, <tt>false</tt> otherwise.\n @since 1.3\n"
15261,method,java/net/URLStreamHandler/setURL/URL;String;String;int;String;String;String;String;String," Sets the fields of the <code>URL</code> argument to the indicated values.\n Only classes derived from URLStreamHandler are supposed to be able\n to call the set method on a URL.\n\n @param   u         the URL to modify.\n @param   protocol  the protocol name.\n @param   host      the remote host value for the URL.\n @param   port      the port on the remote machine.\n @param   authority the authority part for the URL.\n @param   userInfo the userInfo part of the URL.\n @param   path      the path component of the URL. \n @param   query     the query part for the URL.\n @param   ref       the reference.\n @exception	SecurityException	if the protocol handler of the URL is \n					different from this one\n @see     java.net.URL#set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)\n @since 1.3\n"
15262,method,java/net/URLStreamHandler/setURL/URL;String;String;int;String;String," Sets the fields of the <code>URL</code> argument to the indicated values.\n Only classes derived from URLStreamHandler are supposed to be able\n to call the set method on a URL.\n\n @param   u         the URL to modify.\n @param   protocol  the protocol name. This value is ignored since 1.2.\n @param   host      the remote host value for the URL.\n @param   port      the port on the remote machine.\n @param   file      the file.\n @param   ref       the reference.\n @exception	SecurityException	if the protocol handler of the URL is \n					different from this one\n @deprecated Use setURL(URL, String, String, int, String, String, String,\n             String);\n"
15265,method,java/net/URLEncoder/encode/String," Translates a string into <code>x-www-form-urlencoded</code>\n format. This method uses the platform's default encoding\n as the encoding scheme to obtain the bytes for unsafe characters.\n\n @param   s   <code>String</code> to be translated.\n @deprecated The resulting string may vary depending on the platform's\n             default encoding. Instead, use the encode(String,String)\n             method to specify the encoding.\n @return  the translated <code>String</code>.\n"
15268,method,java/net/URLDecoder/decode/String," Decodes a <code>x-www-form-urlencoded</code> string.\n The platform's default encoding is used to determine what characters \n are represented by any consecutive sequences of the form \n "<code>%<i>xy</i></code>".\n @param s the <code>String</code> to decode\n @deprecated The resulting string may vary depending on the platform's\n          default encoding. Instead, use the decode(String,String) method\n          to specify the encoding.\n @return the newly decoded <code>String</code>\n"
15271,class,java/net/URLConnection," The abstract class <code>URLConnection</code> is the superclass\n of all classes that represent a communications link between the\n application and a URL. Instances of this class can be used both to\n read from and to write to the resource referenced by the URL. In\n general, creating a connection to a URL is a multistep process:\n <p>\n <center><table border=2 summary="Describes the process of creating a connection to a URL: openConnection() and connect() over time.">\n <tr><th><code>openConnection()</code></th>\n     <th><code>connect()</code></th></tr>\n <tr><td>Manipulate parameters that affect the connection to the remote\n         resource.</td>\n     <td>Interact with the resource; query header fields and\n         contents.</td></tr>\n </table>\n ----------------------------&gt;\n <br>time</center>\n\n <ol>\n <li>The connection object is created by invoking the\n     <code>openConnection</code> method on a URL.\n <li>The setup parameters and general request properties are manipulated.\n <li>The actual connection to the remote object is made, using the\n    <code>connect</code> method.\n <li>The remote object becomes available. The header fields and the contents\n     of the remote object can be accessed.\n </ol>\n <p>\n The setup parameters are modified using the following methods:\n <ul>\n   <li><code>setAllowUserInteraction</code>\n   <li><code>setDoInput</code>\n   <li><code>setDoOutput</code>\n   <li><code>setIfModifiedSince</code>\n   <li><code>setUseCaches</code>\n </ul>\n <p>\n and the general request properties are modified using the method:\n <ul>\n   <li><code>setRequestProperty</code>\n </ul>\n <p>\n Default values for the <code>AllowUserInteraction</code> and\n <code>UseCaches</code> parameters can be set using the methods\n <code>setDefaultAllowUserInteraction</code> and\n <code>setDefaultUseCaches</code>.\n <p>\n Each of the above <code>set</code> methods has a corresponding\n <code>get</code> method to retrieve the value of the parameter or\n general request property. The specific parameters and general\n request properties that are applicable are protocol specific. \n <p>\n The following methods are used to access the header fields and \n the contents after the connection is made to the remote object:\n <ul>\n   <li><code>getContent</code>\n   <li><code>getHeaderField</code>\n   <li><code>getInputStream</code>\n   <li><code>getOutputStream</code>\n </ul>\n <p>\n Certain header fields are accessed frequently. The methods:\n <ul>\n   <li><code>getContentEncoding</code>\n   <li><code>getContentLength</code>\n   <li><code>getContentType</code>\n   <li><code>getDate</code>\n   <li><code>getExpiration</code>\n   <li><code>getLastModifed</code>\n </ul>\n <p>\n provide convenient access to these fields. The \n <code>getContentType</code> method is used by the \n <code>getContent</code> method to determine the type of the remote \n object; subclasses may find it convenient to override the \n <code>getContentType</code> method. \n <p>\n In the common case, all of the pre-connection parameters and \n general request properties can be ignored: the pre-connection \n parameters and request properties default to sensible values. For\n most clients of this interface, there are only two interesting\n methods: <code>getInputStream</code> and <code>getContent</code>,\n which are mirrored in the <code>URL</code> class by convenience methods.\n <p>\n More information on the request properties and header fields of\n an <code>http</code> connection can be found at:\n <blockquote><pre>\n <a href="http://www.ietf.org/rfc/rfc2068.txt">http://www.ietf.org/rfc/rfc2068.txt</a>\n </pre></blockquote>\n\n Note about <code>fileNameMap</code>: In versions prior to JDK 1.1.6, \n field <code>fileNameMap</code> of <code>URLConnection</code> was public.\n In JDK 1.1.6 and later, <code>fileNameMap</code> is private; accessor \n and mutator methods {@link #getFileNameMap() getFileNameMap} and \n {@link #setFileNameMap(java.net.FileNameMap) setFileNameMap} are added\n to access it.  This change is also described on the <a href=\n "http://java.sun.com/products/jdk/1.2/compatibility.html">\n Compatibility</a> page.\n\n Invoking the <tt>close()</tt> methods on the <tt>InputStream</tt> or <tt>OutputStream</tt> of an \n <tt>URLConnection</tt> after a request may free network resources associated with this \n instance, unless particular protocol specifications specify different behaviours \n for it.\n\n @author  James Gosling\n @version 1.107, 03/23/10\n @see     java.net.URL#openConnection()\n @see     java.net.URLConnection#connect()\n @see     java.net.URLConnection#getContent()\n @see     java.net.URLConnection#getContentEncoding()\n @see     java.net.URLConnection#getContentLength()\n @see     java.net.URLConnection#getContentType()\n @see     java.net.URLConnection#getDate()\n @see     java.net.URLConnection#getExpiration()\n @see     java.net.URLConnection#getHeaderField(int)\n @see     java.net.URLConnection#getHeaderField(java.lang.String)\n @see     java.net.URLConnection#getInputStream()\n @see     java.net.URLConnection#getLastModified()\n @see     java.net.URLConnection#getOutputStream()\n @see     java.net.URLConnection#setAllowUserInteraction(boolean)\n @see     java.net.URLConnection#setDefaultUseCaches(boolean)\n @see     java.net.URLConnection#setDoInput(boolean)\n @see     java.net.URLConnection#setDoOutput(boolean)\n @see     java.net.URLConnection#setIfModifiedSince(long)\n @see     java.net.URLConnection#setRequestProperty(java.lang.String, java.lang.String)\n @see     java.net.URLConnection#setUseCaches(boolean)\n @since   JDK1.0\n"
15273,method,java/net/URLConnection/setFileNameMap/FileNameMap," Sets the FileNameMap.\n <p>\n If there is a security manager, this method first calls\n the security manager's <code>checkSetFactory</code> method \n to ensure the operation is allowed. \n This could result in a SecurityException.\n\n @param map the FileNameMap to be set\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkSetFactory</code> method doesn't allow the operation.\n @see        SecurityManager#checkSetFactory\n @see #getFileNameMap()\n @since 1.2\n"
15274,method,java/net/URLConnection/connect/," Opens a communications link to the resource referenced by this \n URL, if such a connection has not already been established. \n <p>\n If the <code>connect</code> method is called when the connection \n has already been opened (indicated by the <code>connected</code> \n field having the value <code>true</code>), the call is ignored. \n <p>\n URLConnection objects go through two phases: first they are\n created, then they are connected.  After being created, and\n before being connected, various options can be specified\n (e.g., doInput and UseCaches).  After connecting, it is an\n error to try to set them.  Operations that depend on being\n connected, like getContentLength, will implicitly perform the\n connection, if necessary.\n\n @throws SocketTimeoutException if the timeout expires before\n               the connection can be established\n @exception  IOException  if an I/O error occurs while opening the\n               connection.\n @see java.net.URLConnection#connected\n @see #getConnectTimeout()\n @see #setConnectTimeout(int)\n"
15275,method,java/net/URLConnection/setConnectTimeout/int," Sets a specified timeout value, in milliseconds, to be used\n when opening a communications link to the resource referenced\n by this URLConnection.  If the timeout expires before the\n connection can be established, a\n java.net.SocketTimeoutException is raised. A timeout of zero is\n interpreted as an infinite timeout.\n\n <p> Some non-standard implmentation of this method may ignore\n the specified timeout. To see the connect timeout set, please\n call getConnectTimeout().\n\n @param timeout an <code>int</code> that specifies the connect\n               timeout value in milliseconds\n @throws IllegalArgumentException if the timeout parameter is negative\n\n @see #getConnectTimeout()\n @see #connect()\n @since 1.5\n"
15277,method,java/net/URLConnection/setReadTimeout/int," Sets the read timeout to a specified timeout, in\n milliseconds. A non-zero value specifies the timeout when\n reading from Input stream when a connection is established to a\n resource. If the timeout expires before there is data available\n for read, a java.net.SocketTimeoutException is raised. A\n timeout of zero is interpreted as an infinite timeout.\n\n<p> Some non-standard implementation of this method ignores the\n specified timeout. To see the read timeout set, please call\n getReadTimeout().\n\n @param timeout an <code>int</code> that specifies the timeout\n value to be used in milliseconds\n @throws IllegalArgumentException if the timeout parameter is negative\n\n @see #getReadTimeout()\n @see InputStream#read()\n @since 1.5\n"
15286,method,java/net/URLConnection/getHeaderField/String," Returns the value of the named header field.\n <p>\n If called on a connection that sets the same header multiple times\n with possibly different values, only the last value is returned.\n \n\n @param   name   the name of a header field.\n @return  the value of the named header field, or <code>null</code>\n          if there is no such field in the header.\n"
15288,method,java/net/URLConnection/getHeaderFieldInt/String;int," Returns the value of the named field parsed as a number.\n <p>\n This form of <code>getHeaderField</code> exists because some \n connection types (e.g., <code>http-ng</code>) have pre-parsed \n headers. Classes for that connection type can override this method \n and short-circuit the parsing. \n\n @param   name      the name of the header field.\n @param   Default   the default value.\n @return  the value of the named field, parsed as an integer. The\n          <code>Default</code> value is returned if the field is\n          missing or malformed.\n"
15295,method,java/net/URLConnection/getInputStream/," Returns an input stream that reads from this open connection.\n\n A SocketTimeoutException can be thrown when reading from the\n returned input stream if the read timeout expires before data\n is available for read.\n\n @return     an input stream that reads from this open connection.\n @exception  IOException              if an I/O error occurs while\n               creating the input stream.\n @exception  UnknownServiceException  if the protocol does not support\n               input.\n @see #setReadTimeout(int)\n @see #getReadTimeout()\n"
15296,method,java/net/URLConnection/getOutputStream/," Returns an output stream that writes to this connection.\n\n @return     an output stream that writes to this connection.\n @exception  IOException              if an I/O error occurs while\n               creating the output stream.\n @exception  UnknownServiceException  if the protocol does not support\n               output.\n"
15313,method,java/net/URLConnection/addRequestProperty/String;String," Adds a general request property specified by a\n key-value pair.  This method will not overwrite\n existing values associated with the same key.\n\n @param   key     the keyword by which the request is known\n                  (e.g., "<code>accept</code>").\n @param   value  the value associated with it.\n @throws IllegalStateException if already connected\n @throws NullPointerException if key is null\n @see #getRequestProperties()\n @since 1.4\n"
15319,method,java/net/URLConnection/guessContentTypeFromName/String," Tries to determine the content type of an object, based \n on the specified "file" component of a URL.\n This is a convenience method that can be used by \n subclasses that override the <code>getContentType</code> method. \n\n @param   fname   a filename.\n @return  a guess as to what the content type of the object is,\n          based upon its file name.\n @see     java.net.URLConnection#getContentType()\n"
15320,method,java/net/URLConnection/guessContentTypeFromStream/InputStream," Tries to determine the type of an input stream based on the \n characters at the beginning of the input stream. This method can \n be used by subclasses that override the \n <code>getContentType</code> method. \n <p>\n Ideally, this routine would not be needed. But many \n <code>http</code> servers return the incorrect content type; in \n addition, there are many nonstandard extensions. Direct inspection \n of the bytes to determine the content type is often more accurate \n than believing the content type claimed by the <code>http</code> server.\n\n @param      is   an input stream that supports marks.\n @return     a guess at the content type, or <code>null</code> if none\n             can be determined.\n @exception  IOException  if an I/O error occurs while reading the\n               input stream.\n @see        java.io.InputStream#mark(int)\n @see        java.io.InputStream#markSupported()\n @see        java.net.URLConnection#getContentType()\n"
15325,field,java/net/URLConnection/allowUserInteraction," If <code>true</code>, this <code>URL</code> is being examined in \n a context in which it makes sense to allow user interactions such \n as popping up an authentication dialog. If <code>false</code>, \n then no user interaction is allowed. \n <p>\n The value of this field can be set by the \n <code>setAllowUserInteraction</code> method.\n Its value is returned by the \n <code>getAllowUserInteraction</code> method.\n Its default value is the value of the argument in the last invocation \n of the <code>setDefaultAllowUserInteraction</code> method. \n\n @see     java.net.URLConnection#getAllowUserInteraction()\n @see     java.net.URLConnection#setAllowUserInteraction(boolean)\n @see     java.net.URLConnection#setDefaultAllowUserInteraction(boolean)\n"
15326,field,java/net/URLConnection/useCaches," If <code>true</code>, the protocol is allowed to use caching \n whenever it can. If <code>false</code>, the protocol must always \n try to get a fresh copy of the object. \n <p>\n This field is set by the <code>setUseCaches</code> method. Its \n value is returned by the <code>getUseCaches</code> method.\n <p>\n Its default value is the value given in the last invocation of the \n <code>setDefaultUseCaches</code> method. \n\n @see     java.net.URLConnection#setUseCaches(boolean)\n @see     java.net.URLConnection#getUseCaches()\n @see     java.net.URLConnection#setDefaultUseCaches(boolean)\n"
15327,field,java/net/URLConnection/ifModifiedSince," Some protocols support skipping the fetching of the object unless \n the object has been modified more recently than a certain time. \n <p>\n A nonzero value gives a time as the number of milliseconds since \n January 1, 1970, GMT. The object is fetched only if it has been \n modified more recently than that time. \n <p>\n This variable is set by the <code>setIfModifiedSince</code> \n method. Its value is returned by the \n <code>getIfModifiedSince</code> method.\n <p>\n The default value of this field is <code>0</code>, indicating \n that the fetching must always occur. \n\n @see     java.net.URLConnection#getIfModifiedSince()\n @see     java.net.URLConnection#setIfModifiedSince(long)\n"
15333,method,java/net/URLClassLoader/definePackage/String;Manifest;URL," Defines a new package by name in this ClassLoader. The attributes\n contained in the specified Manifest will be used to obtain package\n version and sealing information. For sealed packages, the additional\n URL specifies the code source URL from which the package was loaded.\n\n @param name  the package name\n @param man   the Manifest containing package version and sealing\n              information\n @param url   the code source url for the package, or null if none\n @exception   IllegalArgumentException if the package name duplicates\n              an existing package either in this class loader or one\n              of its ancestors\n @return the newly defined Package object\n"
15337,method,java/net/URLClassLoader/newInstance/URL[];ClassLoader," Creates a new instance of URLClassLoader for the specified\n URLs and parent class loader. If a security manager is\n installed, the <code>loadClass</code> method of the URLClassLoader\n returned by this method will invoke the\n <code>SecurityManager.checkPackageAccess</code> method before\n loading the class.\n\n @param urls the URLs to search for classes and resources\n @param parent the parent class loader for delegation\n @return the resulting class loader\n"
15338,method,java/net/URLClassLoader/newInstance/URL[]," Creates a new instance of URLClassLoader for the specified\n URLs and default parent class loader. If a security manager is\n installed, the <code>loadClass</code> method of the URLClassLoader\n returned by this method will invoke the\n <code>SecurityManager.checkPackageAccess</code> before\n loading the class.\n\n @param urls the URLs to search for classes and resources\n @return the resulting class loader\n"
15340,method,java/net/URLClassLoader/URLClassLoader/URL[]," Constructs a new URLClassLoader for the specified URLs using the\n default delegation parent <code>ClassLoader</code>. The URLs will\n be searched in the order specified for classes and resources after\n first searching in the parent class loader. Any URL that ends with\n a '/' is assumed to refer to a directory. Otherwise, the URL is\n assumed to refer to a JAR file which will be downloaded and opened\n as needed.\n\n <p>If there is a security manager, this method first\n calls the security manager's <code>checkCreateClassLoader</code> method\n to ensure creation of a class loader is allowed.\n \n @param urls the URLs from which to load classes and resources\n\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkCreateClassLoader</code> method doesn't allow \n             creation of a class loader.\n @see SecurityManager#checkCreateClassLoader\n"
15341,method,java/net/URLClassLoader/URLClassLoader/URL[];ClassLoader;URLStreamHandlerFactory," Constructs a new URLClassLoader for the specified URLs, parent\n class loader, and URLStreamHandlerFactory. The parent argument\n will be used as the parent class loader for delegation. The\n factory argument will be used as the stream handler factory to\n obtain protocol handlers when creating new jar URLs.\n\n <p>If there is a security manager, this method first\n calls the security manager's <code>checkCreateClassLoader</code> method\n to ensure creation of a class loader is allowed.\n\n @param urls the URLs from which to load classes and resources\n @param parent the parent class loader for delegation\n @param factory the URLStreamHandlerFactory to use when creating URLs\n\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkCreateClassLoader</code> method doesn't allow \n             creation of a class loader.\n @see SecurityManager#checkCreateClassLoader\n"
15343,method,java/net/URL/set/String;String;int;String;String," Sets the fields of the URL. This is not a public method so that\n only URLStreamHandlers can modify URL fields. URLs are\n otherwise constant.\n\n @param protocol the name of the protocol to use\n @param host the name of the host\n       @param port the port number on the host\n @param file the file on the host\n @param ref the internal reference in the URL\n"
15344,method,java/net/URL/set/String;String;int;String;String;String;String;String," Sets the specified 8 fields of the URL. This is not a public method so\n that only URLStreamHandlers can modify URL fields. URLs are otherwise\n constant.\n\n @param protocol the name of the protocol to use\n @param host the name of the host\n @param port the port number on the host\n @param authority the authority part for the url\n @param userInfo the username and password\n @param path the file on the host\n @param ref the internal reference in the URL\n @param query the query part of this URL\n @since 1.3\n"
15358,method,java/net/URL/toString/," Constructs a string representation of this <code>URL</code>. The\n string is created by calling the <code>toExternalForm</code>\n method of the stream protocol handler for this object.\n\n @return  a string representation of this object.\n @see     java.net.URL#URL(java.lang.String, java.lang.String, int,\n			java.lang.String)\n @see     java.net.URLStreamHandler#toExternalForm(java.net.URL)\n"
15359,method,java/net/URL/toExternalForm/," Constructs a string representation of this <code>URL</code>. The\n string is created by calling the <code>toExternalForm</code>\n method of the stream protocol handler for this object.\n\n @return  a string representation of this object.\n @see     java.net.URL#URL(java.lang.String, java.lang.String,\n			int, java.lang.String)\n @see     java.net.URLStreamHandler#toExternalForm(java.net.URL)\n"
15360,method,java/net/URL/toURI/," Returns a {@link java.net.URI} equivalent to this URL.\n This method functions in the same way as <code>new URI (this.toString())</code>.\n <p>Note, any URL instance that complies with RFC 2396 can be converted \n to a URI. However, some URLs that are not strictly in compliance \n can not be converted to a URI.\n\n @exception URISyntaxException if this URL is not formatted strictly according to\n		  to RFC2396 and cannot be converted to a URI.\n\n @return    a URI instance equivalent to this URL.\n @since 1.5\n"
15361,method,java/net/URL/openConnection/," Returns a <code>URLConnection</code> object that represents a\n connection to the remote object referred to by the <code>URL</code>.\n\n <p>A new connection is opened every time by calling the\n <code>openConnection</code> method of the protocol handler for\n this URL.\n\n <p>If for the URL's protocol (such as HTTP or JAR), there\n exists a public, specialized URLConnection subclass belonging\n to one of the following packages or one of their subpackages:\n java.lang, java.io, java.util, java.net, the connection\n returned will be of that subclass. For example, for HTTP an\n HttpURLConnection will be returned, and for JAR a\n JarURLConnection will be returned.\n\n @return     a <code>URLConnection</code> to the URL.\n @exception  IOException  if an I/O exception occurs.\n @see        java.net.URL#URL(java.lang.String, java.lang.String,\n             int, java.lang.String)\n @see        java.net.URLConnection\n @see java.net.URLStreamHandler#openConnection(java.net.URL)\n"
15366,method,java/net/URL/setURLStreamHandlerFactory/URLStreamHandlerFactory," Sets an application's <code>URLStreamHandlerFactory</code>.\n This method can be called at most once in a given Java Virtual\n Machine.\n\n<p> The <code>URLStreamHandlerFactory</code> instance is used to\nconstruct a stream protocol handler from a protocol name.\n\n <p> If there is a security manager, this method first calls\n the security manager's <code>checkSetFactory</code> method\n to ensure the operation is allowed.\n This could result in a SecurityException.\n\n @param      fac   the desired factory.\n @exception  Error  if the application has already set a factory.\n @exception  SecurityException  if a security manager exists and its\n             <code>checkSetFactory</code> method doesn't allow\n		   the operation.\n @see        java.net.URL#URL(java.lang.String, java.lang.String,\n             int, java.lang.String)\n @see        java.net.URLStreamHandlerFactory\n @see        SecurityManager#checkSetFactory\n"
15368,method,java/net/URL/URL/String;String;String," Creates a URL from the specified <code>protocol</code>\n name, <code>host</code> name, and <code>file</code> name. The\n default port for the specified protocol is used.\n <p>\n This method is equivalent to calling the four-argument\n constructor with the arguments being <code>protocol</code>,\n <code>host</code>, <code>-1</code>, and <code>file</code>.\n\n No validation of the inputs is performed by this constructor.\n\n @param      protocol   the name of the protocol to use.\n @param      host       the name of the host.\n @param      file       the file on the host.\n @exception  MalformedURLException  if an unknown protocol is specified.\n @see        java.net.URL#URL(java.lang.String, java.lang.String,\n			int, java.lang.String)\n"
15370,method,java/net/URL/URL/String," Creates a <code>URL</code> object from the <code>String</code>\n representation.\n <p>\n This constructor is equivalent to a call to the two-argument\n constructor with a <code>null</code> first argument.\n\n @param      spec   the <code>String</code> to parse as a URL.\n @exception  MalformedURLException  If the string specifies an\n               unknown protocol.\n @see        java.net.URL#URL(java.net.URL, java.lang.String)\n"
15371,method,java/net/URL/URL/URL;String," Creates a URL by parsing the given spec within a specified context.\n\n The new URL is created from the given context URL and the spec\n argument as described in\n RFC2396 &quot;Uniform Resource Identifiers : Generic * Syntax&quot; :\n <blockquote><pre>\n          &lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;\n </pre></blockquote>\n The reference is parsed into the scheme, authority, path, query and\n fragment parts. If the path component is empty and the scheme,\n authority, and query components are undefined, then the new URL is a\n reference to the current document. Otherwise, the fragment and query\n parts present in the spec are used in the new URL.\n <p>\n If the scheme component is defined in the given spec and does not match\n the scheme of the context, then the new URL is created as an absolute\n URL based on the spec alone. Otherwise the scheme component is inherited\n from the context URL.\n <p>\n If the authority component is present in the spec then the spec is\n treated as absolute and the spec authority and path will replace the\n context authority and path. If the authority component is absent in the\n spec then the authority of the new URL will be inherited from the\n context.\n <p>\n If the spec's path component begins with a slash character\n &quot;/&quot; then the\n path is treated as absolute and the spec path replaces the context path.\n <p>\n Otherwise, the path is treated as a relative path and is appended to the\n context path, as described in RFC2396. Also, in this case, \n the path is canonicalized through the removal of directory \n changes made by occurences of &quot;..&quot; and &quot;.&quot;.\n <p>\n For a more detailed description of URL parsing, refer to RFC2396.\n\n @param      context   the context in which to parse the specification.\n @param      spec      the <code>String</code> to parse as a URL.\n @exception  MalformedURLException  if no protocol is specified, or an\n               unknown protocol is found.\n @see        java.net.URL#URL(java.lang.String, java.lang.String,\n			int, java.lang.String)\n @see        java.net.URLStreamHandler\n @see        java.net.URLStreamHandler#parseURL(java.net.URL,\n			java.lang.String, int, int)\n"
15376,method,java/net/URISyntaxException/getIndex/," Returns an index into the input string of the position at which the\n parse error occurred, or <tt>-1</tt> if this position is not known.\n\n @return  The error index\n"
15377,method,java/net/URISyntaxException/getMessage/," Returns a string describing the parse error.  The resulting string\n consists of the reason string followed by a colon character\n (<tt>':'</tt>), a space, and the input string.  If the error index is\n defined then the string <tt>" at index "</tt> followed by the index, in\n decimal, is inserted after the reason string and before the colon\n character.\n\n @return  A string describing the parse error\n"
15378,method,java/net/URISyntaxException/URISyntaxException/String;String;int," Constructs an instance from the given input string, reason, and error\n index.\n\n @param  input   The input string\n @param  reason  A string explaining why the input could not be parsed\n @param  index   The index at which the parse error occurred,\n                 or <tt>-1</tt> if the index is not known\n\n @throws  NullPointerException\n          If either the input or reason strings are <tt>null</tt>\n\n @throws  IllegalArgumentException\n          If the error index is less than <tt>-1</tt>\n"
15379,method,java/net/URISyntaxException/URISyntaxException/String;String," Constructs an instance from the given input string and reason.  The\n resulting object will have an error index of <tt>-1</tt>.\n\n @param  input   The input string\n @param  reason  A string explaining why the input could not be parsed\n\n @throws  NullPointerException\n          If either the input or reason strings are <tt>null</tt>\n"
15384,method,java/net/URI/resolve/URI," Resolves the given URI against this URI.\n\n <p> If the given URI is already absolute, or if this URI is opaque, then\n the given URI is returned.\n\n <p><a name="resolve-frag"></a> If the given URI's fragment component is\n defined, its path component is empty, and its scheme, authority, and\n query components are undefined, then a URI with the given fragment but\n with all other components equal to those of this URI is returned.  This\n allows a URI representing a standalone fragment reference, such as\n <tt>"#foo"</tt>, to be usefully resolved against a base URI.\n\n <p> Otherwise this method constructs a new hierarchical URI in a manner\n consistent with <a\n href="http://www.ietf.org/rfc/rfc2396.txt">RFC&nbsp;2396</a>,\n section&nbsp;5.2; that is: </p>\n\n <ol>\n\n   <li><p> A new URI is constructed with this URI's scheme and the given\n   URI's query and fragment components. </p></li>\n\n   <li><p> If the given URI has an authority component then the new URI's\n   authority and path are taken from the given URI. </p></li>\n\n   <li><p> Otherwise the new URI's authority component is copied from\n   this URI, and its path is computed as follows: </p></li>\n\n   <ol type=a>\n\n     <li><p> If the given URI's path is absolute then the new URI's path\n     is taken from the given URI. </p></li>\n\n     <li><p> Otherwise the given URI's path is relative, and so the new\n     URI's path is computed by resolving the path of the given URI\n     against the path of this URI.  This is done by concatenating all but\n     the last segment of this URI's path, if any, with the given URI's\n     path and then normalizing the result as if by invoking the {@link\n     #normalize() normalize} method. </p></li>\n\n   </ol>\n\n </ol>\n\n <p> The result of this method is absolute if, and only if, either this\n URI is absolute or the given URI is absolute.  </p>\n\n @param  uri  The URI to be resolved against this URI\n @return The resulting URI\n\n @throws  NullPointerException\n          If <tt>uri</tt> is <tt>null</tt>\n"
15385,method,java/net/URI/resolve/String," Constructs a new URI by parsing the given string and then resolving it\n against this URI.\n\n <p> This convenience method works as if invoking it were equivalent to\n evaluating the expression <tt>{@link #resolve(java.net.URI)\n resolve}(URI.{@link #create(String) create}(str))</tt>. </p>\n\n @param  str   The string to be parsed into a URI\n @return The resulting URI\n\n @throws  NullPointerException\n          If <tt>str</tt> is <tt>null</tt>\n\n @throws  IllegalArgumentException\n          If the given string violates RFC&nbsp;2396\n"
15387,method,java/net/URI/toURL/," Constructs a URL from this URI.\n\n <p> This convenience method works as if invoking it were equivalent to\n evaluating the expression <tt>new&nbsp;URL(this.toString())</tt> after\n first checking that this URI is absolute. </p>\n\n @return  A URL constructed from this URI\n\n @throws  IllegalArgumentException\n          If this URL is not absolute\n\n @throws  MalformedURLException\n          If a protocol handler for the URL could not be found,\n          or if some other error occurred while constructing the URL\n"
15388,method,java/net/URI/getScheme/," Returns the scheme component of this URI.\n\n <p> The scheme component of a URI, if defined, only contains characters\n in the <i>alphanum</i> category and in the string <tt>"-.+"</tt>.  A\n scheme always starts with an <i>alpha</i> character. <p>\n\n The scheme component of a URI cannot contain escaped octets, hence this\n method does not perform any decoding.\n\n @return  The scheme component of this URI,\n          or <tt>null</tt> if the scheme is undefined\n"
15389,method,java/net/URI/isAbsolute/," Tells whether or not this URI is absolute.\n\n <p> A URI is absolute if, and only if, it has a scheme component. </p>\n\n @return  <tt>true</tt> if, and only if, this URI is absolute\n"
15390,method,java/net/URI/isOpaque/," Tells whether or not this URI is opaque.\n\n <p> A URI is opaque if, and only if, it is absolute and its\n scheme-specific part does not begin with a slash character ('/').\n An opaque URI has a scheme, a scheme-specific part, and possibly\n a fragment; all other components are undefined. </p>\n\n @return  <tt>true</tt> if, and only if, this URI is opaque\n"
15393,method,java/net/URI/getRawAuthority/," Returns the raw authority component of this URI.\n\n <p> The authority component of a URI, if defined, only contains the\n commercial-at character (<tt>'@'</tt>) and characters in the\n <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, and <i>other</i>\n categories.  If the authority is server-based then it is further\n constrained to have valid user-information, host, and port\n components. </p>\n\n @return  The raw authority component of this URI,\n          or <tt>null</tt> if the authority is undefined\n"
15395,method,java/net/URI/getRawUserInfo/," Returns the raw user-information component of this URI.\n\n <p> The user-information component of a URI, if defined, only contains\n characters in the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, and\n <i>other</i> categories. </p>\n\n @return  The raw user-information component of this URI,\n          or <tt>null</tt> if the user information is undefined\n"
15397,method,java/net/URI/getHost/," Returns the host component of this URI.\n\n <p> The host component of a URI, if defined, will have one of the\n following forms: </p>\n\n <ul type=disc>\n\n   <li><p> A domain name consisting of one or more <i>labels</i>\n   separated by period characters (<tt>'.'</tt>), optionally followed by\n   a period character.  Each label consists of <i>alphanum</i> characters\n   as well as hyphen characters (<tt>'-'</tt>), though hyphens never\n   occur as the first or last characters in a label. The rightmost\n   label of a domain name consisting of two or more labels, begins\n   with an <i>alpha</i> character. </li>\n\n   <li><p> A dotted-quad IPv4 address of the form\n   <i>digit</i><tt>+.</tt><i>digit</i><tt>+.</tt><i>digit</i><tt>+.</tt><i>digit</i><tt>+</tt>,\n   where no <i>digit</i> sequence is longer than three characters and no\n   sequence has a value larger than 255. </p></li>\n\n   <li><p> An IPv6 address enclosed in square brackets (<tt>'['</tt> and\n   <tt>']'</tt>) and consisting of hexadecimal digits, colon characters\n   (<tt>':'</tt>), and possibly an embedded IPv4 address.  The full\n   syntax of IPv6 addresses is specified in <a\n   href="http://www.ietf.org/rfc/rfc2373.txt"><i>RFC&nbsp;2373: IPv6\n   Addressing Architecture</i></a>.  </p></li>\n\n </ul>\n\n The host component of a URI cannot contain escaped octets, hence this\n method does not perform any decoding.\n\n @return  The host component of this URI,\n          or <tt>null</tt> if the host is undefined\n"
15399,method,java/net/URI/getRawPath/," Returns the raw path component of this URI.\n\n <p> The path component of a URI, if defined, only contains the slash\n character (<tt>'/'</tt>), the commercial-at character (<tt>'@'</tt>),\n and characters in the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>,\n and <i>other</i> categories. </p>\n\n @return  The path component of this URI,\n          or <tt>null</tt> if the path is undefined\n"
15401,method,java/net/URI/getRawQuery/," Returns the raw query component of this URI.\n\n <p> The query component of a URI, if defined, only contains legal URI\n characters. </p>\n\n @return  The raw query component of this URI,\n          or <tt>null</tt> if the query is undefined\n"
15403,method,java/net/URI/getRawFragment/," Returns the raw fragment component of this URI.\n\n <p> The fragment component of a URI, if defined, only contains legal URI\n characters. </p>\n\n @return  The raw fragment component of this URI,\n          or <tt>null</tt> if the fragment is undefined\n"
15408,method,java/net/URI/toString/," Returns the content of this URI as a string.\n\n <p> If this URI was created by invoking one of the constructors in this\n class then a string equivalent to the original input string, or to the\n string computed from the originally-given components, as appropriate, is\n returned.  Otherwise this URI was created by normalization, resolution,\n or relativization, and so a string is constructed from this URI's\n components according to the rules specified in <a\n href="http://www.ietf.org/rfc/rfc2396.txt">RFC&nbsp;2396</a>,\n section&nbsp;5.2, step&nbsp;7. </p>\n\n @return  The string form of this URI\n"
15409,method,java/net/URI/toASCIIString/," Returns the content of this URI as a US-ASCII string.\n\n <p> If this URI does not contain any characters in the <i>other</i>\n category then an invocation of this method will return the same value as\n an invocation of the {@link #toString() toString} method.  Otherwise\n this method works as if by invoking that method and then <a\n href="#encode">encoding</a> the result.  </p>\n\n @return  The string form of this URI, encoded as needed\n          so that it only contains characters in the US-ASCII\n          charset\n"
15413,method,java/net/URI/URI/String;String;String;String," Constructs a hierarchical URI from the given components.\n\n <p> A component may be left undefined by passing <tt>null</tt>.\n\n <p> This convenience constructor works as if by invoking the\n seven-argument constructor as follows:\n\n <blockquote><tt>\n new&nbsp;{@link #URI(String, String, String, int, String, String, String)\n URI}(scheme,&nbsp;null,&nbsp;host,&nbsp;-1,&nbsp;path,&nbsp;null,&nbsp;fragment);\n </tt></blockquote>\n\n @param   scheme    Scheme name\n @param   host      Host name\n @param   path      Path\n @param   fragment  Fragment\n\n @throws  URISyntaxException\n          If the URI string constructed from the given components\n          violates RFC&nbsp;2396\n"
15414,method,java/net/URI/URI/String;String;String," Constructs a URI from the given components.\n\n <p> A component may be left undefined by passing <tt>null</tt>.\n\n <p> This constructor first builds a URI in string form using the given\n components as follows:  </p>\n\n <ol>\n\n   <li><p> Initially, the result string is empty.  </p></li>\n\n   <li><p> If a scheme is given then it is appended to the result,\n   followed by a colon character (<tt>':'</tt>).  </p></li>\n\n   <li><p> If a scheme-specific part is given then it is appended.  Any\n   character that is not a <a href="#legal-chars">legal URI character</a>\n   is <a href="#quote">quoted</a>.  </p></li>\n\n   <li><p> Finally, if a fragment is given then a hash character\n   (<tt>'#'</tt>) is appended to the string, followed by the fragment.\n   Any character that is not a legal URI character is quoted.  </p></li>\n\n </ol>\n\n <p> The resulting URI string is then parsed in order to create the new\n URI instance as if by invoking the {@link #URI(String)} constructor;\n this may cause a {@link URISyntaxException} to be thrown.  </p>\n\n @param   scheme    Scheme name\n @param   ssp       Scheme-specific part\n @param   fragment  Fragment\n\n @throws  URISyntaxException\n          If the URI string constructed from the given components\n          violates RFC&nbsp;2396\n"
15419,method,java/net/SocketPermission/implies/Permission," Checks if this socket permission object "implies" the \n specified permission.\n <P>\n More specifically, this method first ensures that all of the following\n are true (and returns false if any of them are not):<p>\n <ul>\n <li> <i>p</i> is an instanceof SocketPermission,<p>\n <li> <i>p</i>'s actions are a proper subset of this\n object's actions, and<p>\n <li> <i>p</i>'s port range is included in this port range. Note:\n port range is ignored when p only contains the action, 'resolve'.<p>\n </ul>\n \n Then <code>implies</code> checks each of the following, in order,\n and for each returns true if the stated condition is true:<p>\n <ul>\n <li> If this object was initialized with a single IP address and one of <i>p</i>'s \n IP addresses is equal to this object's IP address.<p>\n <li>If this object is a wildcard domain (such as *.sun.com), and\n <i>p</i>'s canonical name (the name without any preceding *)\n ends with this object's canonical host name. For example, *.sun.com\n implies *.eng.sun.com..<p>\n <li>If this object was not initialized with a single IP address, and one of this\n object's IP addresses equals one of <i>p</i>'s IP addresses.<p>\n <li>If this canonical name equals <i>p</i>'s canonical name.<p>\n </ul>\n \n If none of the above are true, <code>implies</code> returns false.\n @param p the permission to check against.\n\n @return true if the specified permission is implied by this object,\n false if not.  \n"
15420,method,java/net/SocketPermission/equals/Object," Checks two SocketPermission objects for equality. \n <P>\n @param obj the object to test for equality with this object.\n \n @return true if <i>obj</i> is a SocketPermission, and has the\n  same hostname, port range, and actions as this\n  SocketPermission object. However, port range will be ignored\n  in the comparison if <i>obj</i> only contains the action, 'resolve'.\n"
15424,method,java/net/SocketPermission/SocketPermission/String;String," Creates a new SocketPermission object with the specified actions.\n The host is expressed as a DNS name, or as a numerical IP address.\n Optionally, a port or a portrange may be supplied (separated\n from the DNS name or IP address by a colon).\n <p>\n To specify the local machine, use "localhost" as the <i>host</i>.\n Also note: An empty <i>host</i> String ("") is equivalent to "localhost".\n <p>\n The <i>actions</i> parameter contains a comma-separated list of the\n actions granted for the specified host (and port(s)). Possible actions are\n "connect", "listen", "accept", "resolve", or \n any combination of those. "resolve" is automatically added\n when any of the other three are specified.\n <p>\n Examples of SocketPermission instantiation are the following: \n <pre>\n    nr = new SocketPermission("www.catalog.com", "connect");\n    nr = new SocketPermission("www.sun.com:80", "connect");\n    nr = new SocketPermission("*.sun.com", "connect");\n    nr = new SocketPermission("*.edu", "resolve");\n    nr = new SocketPermission("204.160.241.0", "connect");\n    nr = new SocketPermission("localhost:1024-65535", "listen");\n    nr = new SocketPermission("204.160.241.0:1024-65535", "connect");\n </pre>\n \n @param host the hostname or IPaddress of the computer, optionally\n including a colon followed by a port or port range. \n @param action the action string.\n"
15428,field,java/net/SocketOptions/TCP_NODELAY," Disable Nagle's algorithm for this connection.  Written data\n to the network is not buffered pending acknowledgement of\n previously written data.\n<P>\n Valid for TCP only: SocketImpl.\n <P>\n @see Socket#setTcpNoDelay\n @see Socket#getTcpNoDelay\n"
15430,field,java/net/SocketOptions/SO_REUSEADDR,"Sets SO_REUSEADDR for a socket.  This is used only for MulticastSockets\n in java, and it is set by default for MulticastSockets.\n <P>\n Valid for: DatagramSocketImpl\n"
15431,field,java/net/SocketOptions/SO_BROADCAST," Sets SO_BROADCAST for a socket. This option enables and disables \n the ability of the process to send broadcast messages. It is supported\n for only datagram sockets and only on networks that support\n the concept of a broadcast message (e.g. Ethernet, token ring, etc.),\n and it is set by default for DatagramSockets.\n @since 1.4\n"
15433,field,java/net/SocketOptions/IP_MULTICAST_IF2,"Same as above. This option is introduced so that the behaviour \n  with IP_MULTICAST_IF will be kept the same as before, while\n  this new option can support setting outgoing interfaces with either \n  IPv4 and IPv6 addresses.\n\n  NOTE: make sure there is no conflict with this\n @see MulticastSocket#setNetworkInterface(NetworkInterface)\n @see MulticastSocket#getNetworkInterface()\n @since 1.4\n"
15436,field,java/net/SocketOptions/SO_LINGER," Specify a linger-on-close timeout.  This option disables/enables\n immediate return from a <B>close()</B> of a TCP Socket.  Enabling\n this option with a non-zero Integer <I>timeout</I> means that a\n <B>close()</B> will block pending the transmission and acknowledgement\n of all data written to the peer, at which point the socket is closed\n <I>gracefully</I>.  Upon reaching the linger timeout, the socket is\n closed <I>forcefully</I>, with a TCP RST. Enabling the option with a\n timeout of zero does a forceful close immediately. If the specified\n timeout value exceeds 65,535 it will be reduced to 65,535.\n <P>\n Valid only for TCP: SocketImpl\n \n @see Socket#setSoLinger\n @see Socket#getSoLinger\n"
15438,field,java/net/SocketOptions/SO_SNDBUF," Set a hint the size of the underlying buffers used by the\n platform for outgoing network I/O. When used in set, this is a\n suggestion to the kernel from the application about the size of\n buffers to use for the data to be sent over the socket. When\n used in get, this must return the size of the buffer actually\n used by the platform when sending out data on this socket.\n\n Valid for all sockets: SocketImpl, DatagramSocketImpl\n\n @see Socket#setSendBufferSize\n @see Socket#getSendBufferSize\n @see DatagramSocket#setSendBufferSize\n @see DatagramSocket#getSendBufferSize\n"
15439,field,java/net/SocketOptions/SO_RCVBUF," Set a hint the size of the underlying buffers used by the\n platform for incoming network I/O. When used in set, this is a\n suggestion to the kernel from the application about the size of\n buffers to use for the data to be received over the\n socket. When used in get, this must return the size of the\n buffer actually used by the platform when receiving in data on\n this socket.\n\n Valid for all sockets: SocketImpl, DatagramSocketImpl\n\n @see Socket#setReceiveBufferSize\n @see Socket#getReceiveBufferSize\n @see DatagramSocket#setReceiveBufferSize\n @see DatagramSocket#getReceiveBufferSize\n"
15440,field,java/net/SocketOptions/SO_KEEPALIVE," When the keepalive option is set for a TCP socket and no data\n has been exchanged across the socket in either direction for \n 2 hours (NOTE: the actual value is implementation dependent),\n TCP automatically sends a keepalive probe to the peer. This probe is a \n TCP segment to which the peer must respond. \n One of three responses is expected:\n 1. The peer responds with the expected ACK. The application is not \n    notified (since everything is OK). TCP will send another probe \n    following another 2 hours of inactivity.\n 2. The peer responds with an RST, which tells the local TCP that\n    the peer host has crashed and rebooted. The socket is closed.\n 3. There is no response from the peer. The socket is closed. \n\n The purpose of this option is to detect if the peer host crashes. \n\n Valid only for TCP socket: SocketImpl\n\n @see Socket#setKeepAlive\n @see Socket#getKeepAlive\n"
15444,class,java/net/SocketImpl," The abstract class <code>SocketImpl</code> is a common superclass \n of all classes that actually implement sockets. It is used to \n create both client and server sockets. \n <p>\n A "plain" socket implements these methods exactly as \n described, without attempting to go through a firewall or proxy. \n\n @author  unascribed\n @version 1.46, 03/23/10\n @since   JDK1.0\n"
15445,method,java/net/SocketImpl/create/boolean," Creates either a stream or a datagram socket. \n\n @param      stream   if <code>true</code>, create a stream socket;\n                      otherwise, create a datagram socket.\n @exception  IOException  if an I/O error occurs while creating the\n               socket.\n"
15446,method,java/net/SocketImpl/connect/String;int," Connects this socket to the specified port on the named host. \n\n @param      host   the name of the remote host.\n @param      port   the port number.\n @exception  IOException  if an I/O error occurs when connecting to the\n               remote host.\n"
15447,method,java/net/SocketImpl/connect/InetAddress;int," Connects this socket to the specified port number on the specified host.\n\n @param      address   the IP address of the remote host.\n @param      port      the port number.\n @exception  IOException  if an I/O error occurs when attempting a\n               connection.\n"
15448,method,java/net/SocketImpl/connect/SocketAddress;int," Connects this socket to the specified port number on the specified host.\n A timeout of zero is interpreted as an infinite timeout. The connection\n will then block until established or an error occurs.\n\n @param      address   the Socket address of the remote host.\n @param	  timeout  the timeout value, in milliseconds, or zero for no timeout.\n @exception  IOException  if an I/O error occurs when attempting a\n               connection.\n @since 1.4\n"
15450,method,java/net/SocketImpl/listen/int," Sets the maximum queue length for incoming connection indications \n (a request to connect) to the <code>count</code> argument. If a \n connection indication arrives when the queue is full, the \n connection is refused. \n\n @param      backlog   the maximum length of the queue.\n @exception  IOException  if an I/O error occurs when creating the queue.\n"
15451,method,java/net/SocketImpl/accept/SocketImpl," Accepts a connection. \n\n @param      s   the accepted connection.\n @exception  IOException  if an I/O error occurs when accepting the\n               connection.\n"
15452,method,java/net/SocketImpl/getInputStream/," Returns an input stream for this socket.\n\n @return     a stream for reading from this socket.\n @exception  IOException  if an I/O error occurs when creating the\n               input stream.\n"
15453,method,java/net/SocketImpl/getOutputStream/," Returns an output stream for this socket.\n\n @return     an output stream for writing to this socket.\n @exception  IOException  if an I/O error occurs when creating the\n               output stream.\n"
15454,method,java/net/SocketImpl/available/," Returns the number of bytes that can be read from this socket\n without blocking.\n\n @return     the number of bytes that can be read from this socket\n             without blocking.\n @exception  IOException  if an I/O error occurs when determining the\n               number of bytes available.\n"
15455,method,java/net/SocketImpl/close/," Closes this socket. \n\n @exception  IOException  if an I/O error occurs when closing this socket.\n"
15456,method,java/net/SocketImpl/shutdownInput/," Places the input stream for this socket at "end of stream".\n Any data sent to this socket is acknowledged and then\n silently discarded.\n\n If you read from a socket input stream after invoking \n shutdownInput() on the socket, the stream will return EOF.\n\n @exception IOException if an I/O error occurs when shutting down this\n socket.\n @see java.net.Socket#shutdownOutput()\n @see java.net.Socket#close()\n @see java.net.Socket#setSoLinger(boolean, int)\n @since 1.3\n"
15457,method,java/net/SocketImpl/shutdownOutput/," Disables the output stream for this socket.\n For a TCP socket, any previously written data will be sent\n followed by TCP's normal connection termination sequence.\n\n If you write to a socket output stream after invoking \n shutdownOutput() on the socket, the stream will throw \n an IOException.\n\n @exception IOException if an I/O error occurs when shutting down this\n socket.\n @see java.net.Socket#shutdownInput()\n @see java.net.Socket#close()\n @see java.net.Socket#setSoLinger(boolean, int)\n @since 1.3\n"
15461,method,java/net/SocketImpl/supportsUrgentData/," Returns whether or not this SocketImpl supports sending \n urgent data. By default, false is returned\n unless the method is overridden in a sub-class\n\n @return  true if urgent data supported\n @see     java.net.SocketImpl#address\n @since 1.4\n"
15462,method,java/net/SocketImpl/sendUrgentData/int," Send one byte of urgent data on the socket.\n The byte to be sent is the low eight bits of the parameter\n @param data The byte of data to send\n @exception IOException if there is an error\n  sending the data.\n @since 1.4\n"
15465,method,java/net/SocketImpl/setPerformancePreferences/int;int;int," Sets performance preferences for this socket.\n\n <p> Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n <p> Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences. Negative\n values represent a lower priority than positive values. If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n <tt>(1, 0, 0)</tt>.  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values <tt>(0, 1, 2)</tt>.\n\n By default, this method does nothing, unless it is overridden in a\n a sub-class.\n\n @param  connectionTime\n         An <tt>int</tt> expressing the relative importance of a short\n         connection time\n\n @param  latency\n         An <tt>int</tt> expressing the relative importance of low\n         latency\n\n @param  bandwidth\n         An <tt>int</tt> expressing the relative importance of high\n         bandwidth\n  \n @since 1.5\n"
15471,class,java/net/SocketException," Thrown to indicate that there is an error in the underlying \n protocol, such as a TCP error. \n\n @author  Jonathan Payne\n @version 1.19, 03/23/10\n @since   JDK1.0\n"
15474,class,java/net/SocketAddress,"\n This class represents a Socket Address with no protocol attachment.\n As an abstract class, it is meant to be subclassed with a specific, \n protocol dependent, implementation.\n <p>\n It provides an immutable object used by sockets for binding, connecting, or\n as returned values.\n\n @see	java.net.Socket\n @see	java.net.ServerSocket\n @since 1.4\n"
15476,class,java/net/Socket," This class implements client sockets (also called just\n "sockets"). A socket is an endpoint for communication\n between two machines.\n <p>\n The actual work of the socket is performed by an instance of the\n <code>SocketImpl</code> class. An application, by changing\n the socket factory that creates the socket implementation,\n can configure itself to create sockets appropriate to the local\n firewall.\n\n @author  unascribed\n @version 1.115, 09/05/07\n @see     java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n @see     java.net.SocketImpl\n @see     java.nio.channels.SocketChannel\n @since   JDK1.0\n"
15478,method,java/net/Socket/connect/SocketAddress;int," Connects this socket to the server with a specified timeout value.\n A timeout of zero is interpreted as an infinite timeout. The connection\n will then block until established or an error occurs.\n\n @param	endpoint the <code>SocketAddress</code>\n @param	timeout  the timeout value to be used in milliseconds.\n @throws	IOException if an error occurs during the connection\n @throws	SocketTimeoutException if timeout expires before connecting\n @throws  java.nio.channels.IllegalBlockingModeException\n          if this socket has an associated channel,\n          and the channel is in non-blocking mode\n @throws  IllegalArgumentException if endpoint is null or is a\n          SocketAddress subclass not supported by this socket\n @since 1.4\n @spec JSR-51\n"
15479,method,java/net/Socket/bind/SocketAddress," Binds the socket to a local address.\n <P>\n If the address is <code>null</code>, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n\n @param	bindpoint the <code>SocketAddress</code> to bind to\n @throws	IOException if the bind operation fails, or if the socket\n			   is already bound.\n @throws  IllegalArgumentException if bindpoint is a\n          SocketAddress subclass not supported by this socket\n\n @since	1.4\n @see #isBound\n"
15486,method,java/net/Socket/getChannel/," Returns the unique {@link java.nio.channels.SocketChannel SocketChannel}\n object associated with this socket, if any.\n\n <p> A socket will have a channel if, and only if, the channel itself was\n created via the {@link java.nio.channels.SocketChannel#open\n SocketChannel.open} or {@link\n java.nio.channels.ServerSocketChannel#accept ServerSocketChannel.accept}\n methods.\n\n @return  the socket channel associated with this socket,\n          or <tt>null</tt> if this socket was not created\n          for a channel\n\n @since 1.4\n @spec JSR-51\n"
15487,method,java/net/Socket/getInputStream/," Returns an input stream for this socket.\n\n <p> If this socket has an associated channel then the resulting input\n stream delegates all of its operations to the channel.  If the channel\n is in non-blocking mode then the input stream's <tt>read</tt> operations\n will throw an {@link java.nio.channels.IllegalBlockingModeException}.\n\n <p>Under abnormal conditions the underlying connection may be\n broken by the remote host or the network software (for example\n a connection reset in the case of TCP connections). When a\n broken connection is detected by the network software the\n following applies to the returned input stream :-\n\n <ul>\n\n   <li><p>The network software may discard bytes that are buffered\n   by the socket. Bytes that aren't discarded by the network \n   software can be read using {@link java.io.InputStream#read read}.\n\n   <li><p>If there are no bytes buffered on the socket, or all\n   buffered bytes have been consumed by  \n   {@link java.io.InputStream#read read}, then all subsequent\n   calls to {@link java.io.InputStream#read read} will throw an \n   {@link java.io.IOException IOException}. \n\n   <li><p>If there are no bytes buffered on the socket, and the\n   socket has not been closed using {@link #close close}, then\n   {@link java.io.InputStream#available available} will\n   return <code>0</code>.\n\n </ul>\n\n <p> Closing the returned {@link java.io.InputStream InputStream}\n will close the associated socket.\n\n @return     an input stream for reading bytes from this socket.\n @exception  IOException  if an I/O error occurs when creating the\n             input stream, the socket is closed, the socket is\n             not connected, or the socket input has been shutdown\n             using {@link #shutdownInput()}\n\n @revised 1.4\n @spec JSR-51\n"
15488,method,java/net/Socket/getOutputStream/," Returns an output stream for this socket.\n\n <p> If this socket has an associated channel then the resulting output\n stream delegates all of its operations to the channel.  If the channel\n is in non-blocking mode then the output stream's <tt>write</tt>\n operations will throw an {@link\n java.nio.channels.IllegalBlockingModeException}.\n\n <p> Closing the returned {@link java.io.OutputStream OutputStream}\n will close the associated socket.\n\n @return     an output stream for writing bytes to this socket.\n @exception  IOException  if an I/O error occurs when creating the\n               output stream or if the socket is not connected.\n @revised 1.4\n @spec JSR-51\n"
15489,method,java/net/Socket/setTcpNoDelay/boolean," Enable/disable TCP_NODELAY (disable/enable Nagle's algorithm).\n\n @param on <code>true</code> to enable TCP_NODELAY, \n <code>false</code> to disable.\n\n @exception SocketException if there is an error \n in the underlying protocol, such as a TCP error.\n \n @since   JDK1.1\n\n @see #getTcpNoDelay()\n"
15490,method,java/net/Socket/getTcpNoDelay/," Tests if TCP_NODELAY is enabled.\n\n @return a <code>boolean</code> indicating whether or not TCP_NODELAY is enabled.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @since   JDK1.1\n @see #setTcpNoDelay(boolean)\n"
15491,method,java/net/Socket/setSoLinger/boolean;int," Enable/disable SO_LINGER with the specified linger time in seconds. \n The maximum timeout value is platform specific.\n\n The setting only affects socket close.\n \n @param on     whether or not to linger on.\n @param linger how long to linger for, if on is true.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @exception IllegalArgumentException if the linger value is negative.\n @since JDK1.1\n @see #getSoLinger()\n"
15492,method,java/net/Socket/getSoLinger/," Returns setting for SO_LINGER. -1 returns implies that the\n option is disabled.\n\n The setting only affects socket close.\n\n @return the setting for SO_LINGER.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @since   JDK1.1\n @see #setSoLinger(boolean, int)\n"
15493,method,java/net/Socket/sendUrgentData/int," Send one byte of urgent data on the socket. The byte to be sent is the lowest eight\n bits of the data parameter. The urgent byte is\n sent after any preceding writes to the socket OutputStream\n and before any future writes to the OutputStream.\n @param data The byte of data to send\n @exception IOException if there is an error\n  sending the data.\n @since 1.4\n"
15495,method,java/net/Socket/getOOBInline/," Tests if OOBINLINE is enabled.\n\n @return a <code>boolean</code> indicating whether or not OOBINLINE is enabled.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @since   1.4\n @see #setOOBInline(boolean)\n"
15497,method,java/net/Socket/getSoTimeout/," Returns setting for SO_TIMEOUT.  0 returns implies that the\n option is disabled (i.e., timeout of infinity).\n @return the setting for SO_TIMEOUT\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @since   JDK1.1\n @see #setSoTimeout(int)\n"
15499,method,java/net/Socket/getSendBufferSize/," Get value of the SO_SNDBUF option for this <tt>Socket</tt>, \n that is the buffer size used by the platform \n for output on this <tt>Socket</tt>.\n @return the value of the SO_SNDBUF option for this <tt>Socket</tt>.\n\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n\n @see #setSendBufferSize(int)\n @since 1.2\n"
15501,method,java/net/Socket/getReceiveBufferSize/," Gets the value of the SO_RCVBUF option for this <tt>Socket</tt>, \n that is the buffer size used by the platform for \n input on this <tt>Socket</tt>.\n\n @return the value of the SO_RCVBUF option for this <tt>Socket</tt>.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @see #setReceiveBufferSize(int)\n @since 1.2\n"
15502,method,java/net/Socket/setKeepAlive/boolean," Enable/disable SO_KEEPALIVE.\n \n @param on     whether or not to have socket keep alive turned on.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @since 1.3 \n @see #getKeepAlive()\n"
15503,method,java/net/Socket/getKeepAlive/," Tests if SO_KEEPALIVE is enabled.\n\n @return a <code>boolean</code> indicating whether or not SO_KEEPALIVE is enabled.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @since   1.3\n @see #setKeepAlive(boolean)\n"
15505,method,java/net/Socket/getTrafficClass/," Gets traffic class or type-of-service in the IP header\n for packets sent from this Socket\n <p>\n As the underlying network implementation may ignore the\n traffic class or type-of-service set using {@link #setTrafficClass(int)}\n this method may return a different value than was previously\n set using the {@link #setTrafficClass(int)} method on this Socket.\n\n @return the traffic class or type-of-service already set\n @throws SocketException if there is an error obtaining the\n traffic class or type-of-service value.\n @since 1.4\n @see #setTrafficClass(int)\n"
15507,method,java/net/Socket/getReuseAddress/," Tests if SO_REUSEADDR is enabled.\n\n @return a <code>boolean</code> indicating whether or not SO_REUSEADDR is enabled.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @since   1.4\n @see #setReuseAddress(boolean)\n"
15509,method,java/net/Socket/shutdownInput/," Places the input stream for this socket at "end of stream".\n Any data sent to the input stream side of the socket is acknowledged\n and then silently discarded.\n <p>\n If you read from a socket input stream after invoking \n shutdownInput() on the socket, the stream will return EOF.\n\n @exception IOException if an I/O error occurs when shutting down this\n socket.\n\n @since 1.3\n @see java.net.Socket#shutdownOutput()\n @see java.net.Socket#close()\n @see java.net.Socket#setSoLinger(boolean, int)\n @see #isInputShutdown\n"
15510,method,java/net/Socket/shutdownOutput/," Disables the output stream for this socket.\n For a TCP socket, any previously written data will be sent\n followed by TCP's normal connection termination sequence.\n\n If you write to a socket output stream after invoking \n shutdownOutput() on the socket, the stream will throw \n an IOException.\n\n @exception IOException if an I/O error occurs when shutting down this\n socket.\n\n @since 1.3\n @see java.net.Socket#shutdownInput()\n @see java.net.Socket#close()\n @see java.net.Socket#setSoLinger(boolean, int)\n @see #isOutputShutdown\n"
15517,method,java/net/Socket/setSocketImplFactory/SocketImplFactory," Sets the client socket implementation factory for the\n application. The factory can be specified only once.\n <p>\n When an application creates a new client socket, the socket\n implementation factory's <code>createSocketImpl</code> method is\n called to create the actual socket implementation.\n <p>\n Passing <code>null</code> to the method is a no-op unless the factory\n was already set.\n <p>If there is a security manager, this method first calls\n the security manager's <code>checkSetFactory</code> method \n to ensure the operation is allowed. \n This could result in a SecurityException.\n\n @param      fac   the desired factory.\n @exception  IOException  if an I/O error occurs when setting the\n               socket factory.\n @exception  SocketException  if the factory is already defined.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkSetFactory</code> method doesn't allow the operation.\n @see        java.net.SocketImplFactory#createSocketImpl()\n @see        SecurityManager#checkSetFactory\n"
15518,method,java/net/Socket/setPerformancePreferences/int;int;int," Sets performance preferences for this socket.\n\n <p> Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n <p> Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences. Negative\n values represent a lower priority than positive values. If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n <tt>(1, 0, 0)</tt>.  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values <tt>(0, 1, 2)</tt>.\n\n <p> Invoking this method after this socket has been connected\n will have no effect.\n\n @param  connectionTime\n         An <tt>int</tt> expressing the relative importance of a short\n         connection time\n\n @param  latency\n         An <tt>int</tt> expressing the relative importance of low\n         latency\n\n @param  bandwidth\n         An <tt>int</tt> expressing the relative importance of high\n         bandwidth\n  \n @since 1.5\n"
15520,method,java/net/Socket/Socket/Proxy," Creates an unconnected socket, specifying the type of proxy, if any,\n that should be used regardless of any other settings.\n <P>\n If there is a security manager, its <code>checkConnect</code> method\n is called with the proxy host address and port number\n as its arguments. This could result in a SecurityException.\n <P>\n Examples: \n <UL> <LI><code>Socket s = new Socket(Proxy.NO_PROXY);</code> will create\n a plain socket ignoring any other proxy configuration.</LI>\n <LI><code>Socket s = new Socket(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress("socks.mydom.com", 1080)));</code>\n will create a socket connecting through the specified SOCKS proxy\n server.</LI>\n </UL>\n\n @param proxy a {@link java.net.Proxy Proxy} object specifying what kind\n		    of proxying should be used.\n @throws IllegalArgumentException if the proxy is of an invalid type \n		or <code>null</code>.\n @throws SecurityException if a security manager is present and\n				 permission to connect to the proxy is\n				 denied.\n @see java.net.ProxySelector\n @see java.net.Proxy\n\n @since   1.5\n"
15521,method,java/net/Socket/Socket/SocketImpl," Creates an unconnected Socket with a user-specified\n SocketImpl.\n <P>\n @param impl an instance of a <B>SocketImpl</B>\n the subclass wishes to use on the Socket.\n\n @exception SocketException if there is an error in the underlying protocol,     \n such as a TCP error. \n @since   JDK1.1\n"
15522,method,java/net/Socket/Socket/String;int," Creates a stream socket and connects it to the specified port\n number on the named host.\n <p>\n If the specified host is <tt>null</tt> it is the equivalent of\n specifying the address as <tt>{@link java.net.InetAddress#getByName InetAddress.getByName}(null)</tt>.\n In other words, it is equivalent to specifying an address of the \n loopback interface. </p>\n <p>\n If the application has specified a server socket factory, that\n factory's <code>createSocketImpl</code> method is called to create\n the actual socket implementation. Otherwise a "plain" socket is created.\n <p>\n If there is a security manager, its\n <code>checkConnect</code> method is called\n with the host address and <code>port</code> \n as its arguments. This could result in a SecurityException.\n\n @param      host   the host name, or <code>null</code> for the loopback address.\n @param      port   the port number.\n\n @exception  UnknownHostException if the IP address of \n the host could not be determined.\n\n @exception  IOException  if an I/O error occurs when creating the socket.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkConnect</code> method doesn't allow the operation.\n @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n @see        java.net.SocketImpl\n @see        java.net.SocketImplFactory#createSocketImpl()\n @see        SecurityManager#checkConnect\n"
15523,method,java/net/Socket/Socket/InetAddress;int," Creates a stream socket and connects it to the specified port\n number at the specified IP address.\n <p>\n If the application has specified a socket factory, that factory's\n <code>createSocketImpl</code> method is called to create the\n actual socket implementation. Otherwise a "plain" socket is created.\n <p>\n If there is a security manager, its\n <code>checkConnect</code> method is called\n with the host address and <code>port</code> \n as its arguments. This could result in a SecurityException.\n \n @param      address   the IP address.\n @param      port      the port number.\n @exception  IOException  if an I/O error occurs when creating the socket.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkConnect</code> method doesn't allow the operation.\n @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n @see        java.net.SocketImpl\n @see        java.net.SocketImplFactory#createSocketImpl()\n @see        SecurityManager#checkConnect\n"
15524,method,java/net/Socket/Socket/String;int;InetAddress;int," Creates a socket and connects it to the specified remote host on\n the specified remote port. The Socket will also bind() to the local\n address and port supplied.\n <p>\n If the specified host is <tt>null</tt> it is the equivalent of\n specifying the address as <tt>{@link java.net.InetAddress#getByName InetAddress.getByName}(null)</tt>.\n In other words, it is equivalent to specifying an address of the \n loopback interface. </p>\n <p>\n If there is a security manager, its\n <code>checkConnect</code> method is called\n with the host address and <code>port</code> \n as its arguments. This could result in a SecurityException.\n \n @param host the name of the remote host, or <code>null</code> for the loopback address.\n @param port the remote port\n @param localAddr the local address the socket is bound to\n @param localPort the local port the socket is bound to\n @exception  IOException  if an I/O error occurs when creating the socket.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkConnect</code> method doesn't allow the operation.\n @see        SecurityManager#checkConnect\n @since   JDK1.1\n"
15525,method,java/net/Socket/Socket/InetAddress;int;InetAddress;int," Creates a socket and connects it to the specified remote address on\n the specified remote port. The Socket will also bind() to the local\n address and port supplied.\n <p>\n If there is a security manager, its\n <code>checkConnect</code> method is called\n with the host address and <code>port</code> \n as its arguments. This could result in a SecurityException.\n \n @param address the remote address\n @param port the remote port\n @param localAddr the local address the socket is bound to\n @param localPort the local port the socket is bound to\n @exception  IOException  if an I/O error occurs when creating the socket.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkConnect</code> method doesn't allow the operation.\n @see        SecurityManager#checkConnect\n @since   JDK1.1\n"
15526,method,java/net/Socket/Socket/String;int;boolean," Creates a stream socket and connects it to the specified port\n number on the named host.\n <p>\n If the specified host is <tt>null</tt> it is the equivalent of\n specifying the address as <tt>{@link java.net.InetAddress#getByName InetAddress.getByName}(null)</tt>.\n In other words, it is equivalent to specifying an address of the \n loopback interface. </p>\n <p>\n If the stream argument is <code>true</code>, this creates a\n stream socket. If the stream argument is <code>false</code>, it\n creates a datagram socket.\n <p>\n If the application has specified a server socket factory, that\n factory's <code>createSocketImpl</code> method is called to create\n the actual socket implementation. Otherwise a "plain" socket is created.\n <p>\n If there is a security manager, its\n <code>checkConnect</code> method is called\n with the host address and <code>port</code> \n as its arguments. This could result in a SecurityException.\n <p>\n If a UDP socket is used, TCP/IP related socket options will not apply.\n\n @param      host     the host name, or <code>null</code> for the loopback address.\n @param      port     the port number.\n @param      stream   a <code>boolean</code> indicating whether this is\n                      a stream socket or a datagram socket.\n @exception  IOException  if an I/O error occurs when creating the socket.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkConnect</code> method doesn't allow the operation.\n @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n @see        java.net.SocketImpl\n @see        java.net.SocketImplFactory#createSocketImpl()\n @see        SecurityManager#checkConnect\n @deprecated Use DatagramSocket instead for UDP transport.\n"
15527,method,java/net/Socket/Socket/InetAddress;int;boolean," Creates a socket and connects it to the specified port number at\n the specified IP address.\n <p>\n If the stream argument is <code>true</code>, this creates a\n stream socket. If the stream argument is <code>false</code>, it\n creates a datagram socket.\n <p>\n If the application has specified a server socket factory, that\n factory's <code>createSocketImpl</code> method is called to create\n the actual socket implementation. Otherwise a "plain" socket is created.\n \n <p>If there is a security manager, its\n <code>checkConnect</code> method is called\n with <code>host.getHostAddress()</code> and <code>port</code> \n as its arguments. This could result in a SecurityException.\n <p>\n If UDP socket is used, TCP/IP related socket options will not apply.\n\n @param      host     the IP address.\n @param      port      the port number.\n @param      stream    if <code>true</code>, create a stream socket;\n                       otherwise, create a datagram socket.\n @exception  IOException  if an I/O error occurs when creating the socket.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkConnect</code> method doesn't allow the operation.\n @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n @see        java.net.SocketImpl\n @see        java.net.SocketImplFactory#createSocketImpl()\n @see        SecurityManager#checkConnect\n @deprecated Use DatagramSocket instead for UDP transport.\n"
15529,method,java/net/ServerSocket/bind/SocketAddress,"\n Binds the <code>ServerSocket</code> to a specific address\n (IP address and port number).\n <p>\n If the address is <code>null</code>, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n <p>\n @param	endpoint	The IP address & port number to bind to.\n @throws	IOException if the bind operation fails, or if the socket\n			   is already bound.\n @throws	SecurityException	if a <code>SecurityManager</code> is present and\n its <code>checkListen</code> method doesn't allow the operation.\n @throws  IllegalArgumentException if endpoint is a\n          SocketAddress subclass not supported by this socket\n @since 1.4\n"
15534,method,java/net/ServerSocket/accept/," Listens for a connection to be made to this socket and accepts \n it. The method blocks until a connection is made. \n\n <p>A new Socket <code>s</code> is created and, if there \n is a security manager, \n the security manager's <code>checkAccept</code> method is called\n with <code>s.getInetAddress().getHostAddress()</code> and\n <code>s.getPort()</code>\n as its arguments to ensure the operation is allowed. \n This could result in a SecurityException.\n \n @exception  IOException  if an I/O error occurs when waiting for a\n               connection.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkAccept</code> method doesn't allow the operation.\n @exception  SocketTimeoutException if a timeout was previously set with setSoTimeout and\n             the timeout has been reached.\n @exception  java.nio.channels.IllegalBlockingModeException\n             if this socket has an associated channel, the channel is in\n             non-blocking mode, and there is no connection ready to be\n             accepted\n\n @return the new Socket\n @see SecurityManager#checkAccept\n @revised 1.4\n @spec JSR-51\n"
15536,method,java/net/ServerSocket/close/," Closes this socket. \n \n Any thread currently blocked in {@link #accept()} will throw\n a {@link SocketException}.\n\n <p> If this socket has an associated channel then the channel is closed\n as well.\n\n @exception  IOException  if an I/O error occurs when closing the socket.\n @revised 1.4\n @spec JSR-51\n"
15537,method,java/net/ServerSocket/getChannel/," Returns the unique {@link java.nio.channels.ServerSocketChannel} object\n associated with this socket, if any.\n\n <p> A server socket will have a channel if, and only if, the channel\n itself was created via the {@link\n java.nio.channels.ServerSocketChannel#open ServerSocketChannel.open}\n method.\n\n @return  the server-socket channel associated with this socket,\n          or <tt>null</tt> if this socket was not created\n          for a channel\n\n @since 1.4\n @spec JSR-51\n"
15541,method,java/net/ServerSocket/getSoTimeout/,"\n Retrieve setting for SO_TIMEOUT.  0 returns implies that the\n option is disabled (i.e., timeout of infinity).\n @return the SO_TIMEOUT value\n @exception IOException if an I/O error occurs\n @since   JDK1.1\n @see #setSoTimeout(int)\n"
15545,method,java/net/ServerSocket/setSocketFactory/SocketImplFactory," Sets the server socket implementation factory for the \n application. The factory can be specified only once. \n <p>\n When an application creates a new server socket, the socket \n implementation factory's <code>createSocketImpl</code> method is \n called to create the actual socket implementation. \n <p>\n Passing <code>null</code> to the method is a no-op unless the factory\n was already set.\n <p>\n If there is a security manager, this method first calls\n the security manager's <code>checkSetFactory</code> method \n to ensure the operation is allowed. \n This could result in a SecurityException.\n\n @param      fac   the desired factory.\n @exception  IOException  if an I/O error occurs when setting the\n               socket factory.\n @exception  SocketException  if the factory has already been defined.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkSetFactory</code> method doesn't allow the operation.\n @see        java.net.SocketImplFactory#createSocketImpl()\n @see        SecurityManager#checkSetFactory\n"
15547,method,java/net/ServerSocket/getReceiveBufferSize/," Gets the value of the SO_RCVBUF option for this <tt>ServerSocket</tt>, \n that is the proposed buffer size that will be used for Sockets accepted\n from this <tt>ServerSocket</tt>.\n \n <p>Note, the value actually set in the accepted socket is determined by\n calling {@link Socket#getReceiveBufferSize()}.\n @return the value of the SO_RCVBUF option for this <tt>Socket</tt>.\n @exception SocketException if there is an error\n in the underlying protocol, such as a TCP error. \n @see #setReceiveBufferSize(int)\n @since 1.4\n"
15549,method,java/net/ServerSocket/ServerSocket/," Creates an unbound server socket.\n\n @exception IOException IO error when opening the socket.\n @revised 1.4\n"
15550,method,java/net/ServerSocket/ServerSocket/int," Creates a server socket, bound to the specified port. A port of \n <code>0</code> creates a socket on any free port. \n <p>\n The maximum queue length for incoming connection indications (a \n request to connect) is set to <code>50</code>. If a connection \n indication arrives when the queue is full, the connection is refused.\n <p>\n If the application has specified a server socket factory, that \n factory's <code>createSocketImpl</code> method is called to create \n the actual socket implementation. Otherwise a "plain" socket is created.\n <p>\n If there is a security manager, \n its <code>checkListen</code> method is called\n with the <code>port</code> argument\n as its argument to ensure the operation is allowed. \n This could result in a SecurityException.\n\n\n @param      port  the port number, or <code>0</code> to use any\n                   free port.\n \n @exception  IOException  if an I/O error occurs when opening the socket.\n @exception  SecurityException\n if a security manager exists and its <code>checkListen</code> \n method doesn't allow the operation.\n \n @see        java.net.SocketImpl\n @see        java.net.SocketImplFactory#createSocketImpl()\n @see        java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)\n @see        SecurityManager#checkListen\n"
15555,method,java/net/SecureCacheResponse/getLocalCertificateChain/," Returns the certificate chain that were sent to the server during\n handshaking of the original connection that retrieved the\n network resource.  Note: This method is useful only\n when using certificate-based cipher suites.\n\n @return an immutable List of Certificate representing the\n           certificate chain that was sent to the server. If no\n           certificate chain was sent, null will be returned.\n @see #getLocalPrincipal()\n"
15556,method,java/net/SecureCacheResponse/getServerCertificateChain/," Returns the server's certificate chain, which was established as\n part of defining the session in the original connection that\n retrieved the network resource, from cache.  Note: This method\n can be used only when using certificate-based cipher suites;\n using it with non-certificate-based cipher suites, such as\n Kerberos, will throw an SSLPeerUnverifiedException.\n\n @return an immutable List of Certificate representing the server's\n         certificate chain.\n @throws SSLPeerUnverifiedException if the peer is not verified.\n @see #getPeerPrincipal()\n"
15560,class,java/net/ResponseCache," Represents implementations of URLConnection caches. An instance of\n such a class can be registered with the system by doing\n ResponseCache.setDefault(ResponseCache), and the system will call\n this object in order to:\n\n    <ul><li>store resource data which has been retrieved from an\n            external source into the cache</li>\n         <li>try to fetch a requested resource that may have been\n            stored in the cache</li>\n    </ul>\n\n The ResponseCache implementation decides which resources\n should be cached, and for how long they should be cached. If a\n request resource cannot be retrieved from the cache, then the\n protocol handlers will fetch the resource from its original\n location.\n\n The settings for URLConnection#useCaches controls whether the\n protocol is allowed to use a cached response.\n\n For more information on HTTP caching, see <a\n href="http://www.ietf.org/rfc/rfc2616.txt""><i>RFC&nbsp;2616: Hypertext\n Transfer Protocol -- HTTP/1.1</i></a>\n\n @version 1.1, 03/09/22\n @author Yingxian Wang\n @since 1.5\n"
15562,method,java/net/ResponseCache/setDefault/ResponseCache," Sets (or unsets) the system-wide cache.\n\n Note: non-standard procotol handlers may ignore this setting.\n\n @param responseCache The response cache, or\n		<code>null</code> to unset the cache.\n\n @throws  SecurityException\n          If a security manager has been installed and it denies\n {@link NetPermission}<tt>("setResponseCache")</tt>\n\n @see #getDefault()\n @since 1.5\n"
15563,method,java/net/ResponseCache/get/URI;String;Map," Retrieve the cached response based on the requesting uri,\n request method and request headers. Typically this method is\n called by the protocol handler before it sends out the request\n to get the network resource. If a cached response is returned,\n that resource is used instead.\n\n @param uri a <code>URI</code> used to reference the requested\n            network resource\n @param rqstMethod a <code>String</code> representing the request\n            method\n @param rqstHeaders - a Map from request header\n            field names to lists of field values representing\n            the current request headers\n @return a <code>CacheResponse</code> instance if available\n          from cache, or null otherwise\n @throws	IOException if an I/O error occurs \n @throws  IllegalArgumentException if any one of the arguments is null\n\n @see     java.net.URLConnection#setUseCaches(boolean)\n @see     java.net.URLConnection#getUseCaches()\n @see     java.net.URLConnection#setDefaultUseCaches(boolean)\n @see     java.net.URLConnection#getDefaultUseCaches()\n"
15568,method,java/net/ProxySelector/setDefault/ProxySelector," Sets (or unsets) the system-wide proxy selector.\n\n Note: non-standard protocol handlers may ignore this setting.\n\n @param ps The HTTP proxy selector, or\n		<code>null</code> to unset the proxy selector.\n\n @throws  SecurityException\n          If a security manager has been installed and it denies\n {@link NetPermission}<tt>("setProxySelector")</tt>\n\n @see #getDefault()\n @since 1.5\n"
15569,method,java/net/ProxySelector/select/URI," Selects all the applicable proxies based on the protocol to\n access the resource with and a destination address to access\n the resource at.\n The format of the URI is defined as follow:\n <UL>\n <LI>http URI for http connections</LI>\n <LI>https URI for https connections\n <LI>ftp URI for ftp connections</LI>\n <LI><code>socket://host:port</code><br>\n     for tcp client sockets connections</LI>\n </UL>\n\n @param	uri\n		The URI that a connection is required to\n\n @return	a List of Proxies. Each element in the\n		the List is of type \n          {@link java.net.Proxy Proxy};\n          when no proxy is available, the list will\n          contain one element of type\n          {@link java.net.Proxy Proxy}\n          that represents a direct connection.\n @throws IllegalArgumentException if either argument is null\n"
15570,method,java/net/ProxySelector/connectFailed/URI;SocketAddress;IOException," Called to indicate that a connection could not be established\n to a proxy/socks server. An implementation of this method can\n temporarily remove the proxies or reorder the sequence of\n proxies returned by select(String, String), using the address\n and they kind of IOException given.\n\n @param   uri\n          The URI that the proxy at sa failed to serve.\n @param	sa\n		The socket address of the proxy/SOCKS server\n\n @param	ioe\n		The I/O exception thrown when the connect failed.\n @throws IllegalArgumentException if either argument is null\n"
15575,method,java/net/Proxy/toString/," Constructs a string representation of this Proxy.\n This String is constructed by calling toString() on its type\n and concatenating " @ " and the toString() result from its address\n if its type is not <code>DIRECT</code>.\n\n @return  a string representation of this object.\n"
15576,method,java/net/Proxy/equals/Object," Compares this object against the specified object.\n The result is <code>true</code> if and only if the argument is\n not <code>null</code> and it represents the same proxy as\n this object.\n <p>\n Two instances of <code>Proxy</code> represent the same\n address if both the SocketAddresses and type are equal.\n\n @param   obj   the object to compare against.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see java.net.InetSocketAddress#equals(java.lang.Object)\n"
15586,class,java/net/ProtocolException," Thrown to indicate that there is an error in the underlying \n protocol, such as a TCP error. \n\n @author  Chris Warth\n @version 1.18, 03/23/10\n @since   JDK1.0\n"
15594,method,java/net/PasswordAuthentication/getPassword/," Returns the user password.\n\n <p> Note that this method returns a reference to the password. It is\n the caller's responsibility to zero out the password information after\n it is no longer needed.\n\n @return the password\n"
15595,method,java/net/PasswordAuthentication/PasswordAuthentication/String;char[]," Creates a new <code>PasswordAuthentication</code> object from the given\n user name and password.\n\n <p> Note that the given user password is cloned before it is stored in\n the new <code>PasswordAuthentication</code> object.\n\n @param userName the user name\n @param password the user's password\n"
15596,class,java/net/NoRouteToHostException," Signals that an error occurred while attempting to connect a\n socket to a remote address and port.  Typically, the remote\n host cannot be reached because of an intervening firewall, or\n if an intermediate router is down.\n\n @since   JDK1.1\n"
15597,method,java/net/NoRouteToHostException/NoRouteToHostException/String," Constructs a new NoRouteToHostException with the specified detail \n message as to why the remote host cannot be reached.\n A detail message is a String that gives a specific \n description of this error.\n @param msg the detail message\n"
15601,method,java/net/NetworkInterface/getInetAddresses/," Convenience method to return an Enumeration with all or a\n subset of the InetAddresses bound to this network interface.\n <p>\n If there is a security manager, its <code>checkConnect</code> \n method is called for each InetAddress. Only InetAddresses where\n the <code>checkConnect</code> doesn't throw a SecurityException\n will be returned in the Enumeration.\n @return an Enumeration object with all or a subset of the InetAddresses\n bound to this network interface\n"
15602,method,java/net/NetworkInterface/getInterfaceAddresses/," Get a List of all or a subset of the <code>InterfaceAddresses</code>\n of this network interface.\n <p>\n If there is a security manager, its <code>checkConnect</code> \n method is called with the InetAddress for each InterfaceAddress.\n Only InterfaceAddresses where the <code>checkConnect</code> doesn't throw\n a SecurityException will be returned in the List.\n\n @return a <code>List</code> object with all or a subset of the\n	       InterfaceAddresss of this network interface\n @since 1.6\n"
15606,method,java/net/NetworkInterface/getByName/String," Searches for the network interface with the specified name.\n\n @param   name \n		The name of the network interface.\n\n @return  A <tt>NetworkInterface</tt> with the specified name,\n          or <tt>null</tt> if there is no network interface\n		with the specified name.\n\n @throws	SocketException  \n	        If an I/O error occurs.\n\n @throws  NullPointerException\n		If the specified name is <tt>null</tt>.\n"
15608,method,java/net/NetworkInterface/getNetworkInterfaces/," Returns all the interfaces on this machine. Returns null if no\n network interfaces could be found on this machine.\n \n NOTE: can use getNetworkInterfaces()+getInetAddresses() \n       to obtain all IP addresses for this node\n\n @return an Enumeration of NetworkInterfaces found on this machine\n @exception  SocketException  if an I/O error occurs.\n"
15609,method,java/net/NetworkInterface/isUp/," Returns whether a network interface is up and running.\n\n @return	<code>true</code> if the interface is up and running.\n @exception	SocketException if an I/O error occurs.\n @since 1.6\n"
15610,method,java/net/NetworkInterface/isLoopback/," Returns whether a network interface is a loopback interface.\n\n @return	<code>true</code> if the interface is a loopback interface.\n @exception	SocketException if an I/O error occurs.\n @since 1.6\n"
15611,method,java/net/NetworkInterface/isPointToPoint/," Returns whether a network interface is a point to point interface.\n A typical point to point interface would be a PPP connection through\n a modem.\n\n @return	<code>true</code> if the interface is a point to point\n		interface.\n @exception	SocketException if an I/O error occurs.\n @since 1.6\n"
15612,method,java/net/NetworkInterface/supportsMulticast/," Returns whether a network interface supports multicasting or not.\n\n @return	<code>true</code> if the interface supports Multicasting.\n @exception	SocketException if an I/O error occurs.\n @since 1.6\n"
15613,method,java/net/NetworkInterface/getHardwareAddress/," Returns the hardware address (usually MAC) of the interface if it\n has one and if it can be accessed given the current privileges.\n\n @return	a byte array containing the address or <code>null</code> if\n		the address doesn't exist or is not accessible.\n @exception	SocketException if an I/O error occurs.\n @since 1.6\n"
15614,method,java/net/NetworkInterface/getMTU/," Returns the Maximum Transmission Unit (MTU) of this interface.\n \n @return the value of the MTU for that interface.\n @exception	SocketException if an I/O error occurs.\n @since 1.6\n"
15615,method,java/net/NetworkInterface/isVirtual/," Returns whether this interface is a virtual interface (also called\n subinterface).\n Virtual interfaces are, on some systems, interfaces created as a child\n of a physical interface and given different settings (like address or\n MTU). Usually the name of the interface will the name of the parent\n followed by a colon (:) and a number identifying the child since there\n can be several virtual interfaces attached to a single physical\n interface.\n\n @return <code>true</code> if this interface is a virtual interface.\n @since 1.6\n"
15616,method,java/net/NetworkInterface/equals/Object," Compares this object against the specified object.\n The result is <code>true</code> if and only if the argument is\n not <code>null</code> and it represents the same NetworkInterface\n as this object.\n <p>\n Two instances of <code>NetworkInterface</code> represent the same \n NetworkInterface if both name and addrs are the same for both.\n\n @param   obj   the object to compare against.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see     java.net.InetAddress#getAddress()\n"
15619,class,java/net/NetPermission," This class is for various network permissions.\n A NetPermission contains a name (also referred to as a "target name") but\n no actions list; you either have the named permission\n or you don't.\n <P>\n The target name is the name of the network permission (see below). The naming\n convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a ".", or by itself, to\n signify a wildcard match. For example: "foo.*" or "*" is valid,\n "*foo" or "a*b" is not valid.\n <P>\n The following table lists all the possible NetPermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n <P>\n\n <table border=1 cellpadding=5 summary="Permission target name, what the permission allows, and associated risks">\n <tr>\n <th>Permission Target Name</th>\n <th>What the Permission Allows</th>\n <th>Risks of Allowing this Permission</th>\n </tr>\n\n <tr>\n   <td>setDefaultAuthenticator</td>\n   <td>The ability to set the\n way authentication information is retrieved when\n a proxy or HTTP server asks for authentication</td>\n   <td>Malicious\n code can set an authenticator that monitors and steals user\n authentication input as it retrieves the input from the user.</td>\n </tr>\n\n <tr>\n   <td>requestPasswordAuthentication</td>\n   <td>The ability\n to ask the authenticator registered with the system for\n a password</td>\n   <td>Malicious code may steal this password.</td>\n </tr>\n\n <tr>\n   <td>specifyStreamHandler</td>\n   <td>The ability\n to specify a stream handler when constructing a URL</td>\n   <td>Malicious code may create a URL with resources that it would\nnormally not have access to (like file:/foo/fum/), specifying a\nstream handler that gets the actual bytes from someplace it does \nhave access to. Thus it might be able to trick the system into\ncreating a ProtectionDomain/CodeSource for a class even though\nthat class really didn't come from that location.</td>\n </tr>\n\n <tr> \n   <td>setProxySelector</td>\n   <td>The ability to set the proxy selector used to make decisions\n   on which proxies to use when making network connections.</td>\n   <td>Malicious code can set a ProxySelector that directs network\n   traffic to an arbitrary network host.</td>\n </tr>\n\n <tr> \n   <td>getProxySelector</td>\n   <td>The ability to get the proxy selector used to make decisions\n   on which proxies to use when making network connections.</td>\n   <td>Malicious code can get a ProxySelector to discover proxy\n   hosts and ports on internal networks, which could then become\n   targets for attack.</td>\n </tr>\n\n <tr> \n   <td>setCookieHandler</td>\n   <td>The ability to set the cookie handler that processes highly\n   security sensitive cookie information for an Http session.</td>\n   <td>Malicious code can set a cookie handler to obtain access to\n   highly security sensitive cookie information. Some web servers\n   use cookies to save user private information such as access\n   control information, or to track user browsing habit.</td>\n   </tr>\n\n <tr> \n   <td>getCookieHandler</td>\n   <td>The ability to get the cookie handler that processes highly\n   security sensitive cookie information for an Http session.</td>\n   <td>Malicious code can get a cookie handler to obtain access to\n   highly security sensitive cookie information. Some web servers\n   use cookies to save user private information such as access\n   control information, or to track user browsing habit.</td>\n   </tr>\n\n <tr> \n   <td>setResponseCache</td>\n   <td>The ability to set the response cache that provides access to\n   a local response cache.</td>\n   <td>Malicious code getting access to the local response cache\n   could access security sensitive information, or create false\n   entries in the response cache.</td>\n   </tr>\n\n <tr> \n   <td>getResponseCache</td>\n   <td>The ability to get the response cache that provides\n   access to a local response cache.</td>\n   <td>Malicious code getting access to the local response cache\n   could access security sensitive information.</td>\n   </tr>\n\n </table>\n\n @see java.security.BasicPermission\n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n @see java.lang.SecurityManager\n\n @version 1.52 10/03/23\n\n @author Marianne Mueller\n @author Roland Schemers\n"
15620,method,java/net/NetPermission/NetPermission/String," Creates a new NetPermission with the specified name.\n The name is the symbolic name of the NetPermission, such as\n "setDefaultAuthenticator", etc. An asterisk\n may appear at the end of the name, following a ".", or by itself, to\n signify a wildcard match.\n\n @param name the name of the NetPermission.\n\n @throws NullPointerException if <code>name</code> is <code>null</code>.\n @throws IllegalArgumentException if <code>name</code> is empty.\n"
15627,method,java/net/MulticastSocket/joinGroup/InetAddress," Joins a multicast group. Its behavior may be affected by\n <code>setInterface</code> or <code>setNetworkInterface</code>.\n \n <p>If there is a security manager, this method first\n calls its <code>checkMulticast</code> method\n with the <code>mcastaddr</code> argument\n as its argument.\n \n @param mcastaddr is the multicast address to join\n \n @exception IOException if there is an error joining\n or when the address is not a multicast address.\n @exception  SecurityException  if a security manager exists and its  \n <code>checkMulticast</code> method doesn't allow the join.\n \n @see SecurityManager#checkMulticast(InetAddress)\n"
15628,method,java/net/MulticastSocket/leaveGroup/InetAddress," Leave a multicast group. Its behavior may be affected by\n <code>setInterface</code> or <code>setNetworkInterface</code>.\n \n <p>If there is a security manager, this method first\n calls its <code>checkMulticast</code> method\n with the <code>mcastaddr</code> argument\n as its argument.\n \n @param mcastaddr is the multicast address to leave\n @exception IOException if there is an error leaving\n or when the address is not a multicast address.\n @exception  SecurityException  if a security manager exists and its  \n <code>checkMulticast</code> method doesn't allow the operation.\n \n @see SecurityManager#checkMulticast(InetAddress)\n"
15631,method,java/net/MulticastSocket/setInterface/InetAddress," Set the multicast network interface used by methods\n whose behavior would be affected by the value of the\n network interface. Useful for multihomed hosts.\n @param inf the InetAddress\n @exception SocketException if there is an error in \n the underlying protocol, such as a TCP error. \n @see #getInterface()\n"
15632,method,java/net/MulticastSocket/getInterface/," Retrieve the address of the network interface used for\n multicast packets.\n \n @return An <code>InetAddress</code> representing\n  the address of the network interface used for \n  multicast packets.\n\n @exception SocketException if there is an error in \n the underlying protocol, such as a TCP error.\n \n @see #setInterface(java.net.InetAddress)\n"
15633,method,java/net/MulticastSocket/setNetworkInterface/NetworkInterface," Specify the network interface for outgoing multicast datagrams \n sent on this socket.\n\n @param netIf the interface\n @exception SocketException if there is an error in \n the underlying protocol, such as a TCP error. \n @see #getNetworkInterface()\n @since 1.4\n"
15634,method,java/net/MulticastSocket/getNetworkInterface/," Get the multicast network interface set.\n\n @exception SocketException if there is an error in \n the underlying protocol, such as a TCP error. \n @return the multicast <code>NetworkInterface</code> currently set\n @see #setNetworkInterface(NetworkInterface)\n @since 1.4\n"
15635,method,java/net/MulticastSocket/setLoopbackMode/boolean," Disable/Enable local loopback of multicast datagrams\n The option is used by the platform's networking code as a hint \n for setting whether multicast data will be looped back to \n the local socket.\n\n <p>Because this option is a hint, applications that want to\n verify what loopback mode is set to should call \n {@link #getLoopbackMode()}\n @param disable <code>true</code> to disable the LoopbackMode\n @throws SocketException if an error occurs while setting the value\n @since 1.4\n @see #getLoopbackMode\n"
15636,method,java/net/MulticastSocket/getLoopbackMode/," Get the setting for local loopback of multicast datagrams.\n\n @throws SocketException  if an error occurs while getting the value\n @return true if the LoopbackMode has been disabled\n @since 1.4\n @see #setLoopbackMode\n"
15638,method,java/net/MulticastSocket/MulticastSocket/," Create a multicast socket.\n \n <p>If there is a security manager, \n its <code>checkListen</code> method is first called\n with 0 as its argument to ensure the operation is allowed. \n This could result in a SecurityException.\n <p>\n When the socket is created the \n {@link DatagramSocket#setReuseAddress(boolean)} method is \n called to enable the SO_REUSEADDR socket option. \n\n @exception IOException if an I/O exception occurs\n while creating the MulticastSocket\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkListen</code> method doesn't allow the operation.\n @see SecurityManager#checkListen\n @see java.net.DatagramSocket#setReuseAddress(boolean) \n"
15639,method,java/net/MulticastSocket/MulticastSocket/int," Create a multicast socket and bind it to a specific port.\n \n <p>If there is a security manager, \n its <code>checkListen</code> method is first called\n with the <code>port</code> argument\n as its argument to ensure the operation is allowed. \n This could result in a SecurityException.\n <p>\n When the socket is created the\n {@link DatagramSocket#setReuseAddress(boolean)} method is\n called to enable the SO_REUSEADDR socket option. \n \n @param port port to use\n @exception IOException if an I/O exception occurs\n while creating the MulticastSocket\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkListen</code> method doesn't allow the operation.\n @see SecurityManager#checkListen\n @see java.net.DatagramSocket#setReuseAddress(boolean) \n"
15640,method,java/net/MulticastSocket/MulticastSocket/SocketAddress," Create a MulticastSocket bound to the specified socket address.\n <p>\n Or, if the address is <code>null</code>, create an unbound socket.\n <p>\n <p>If there is a security manager, \n its <code>checkListen</code> method is first called\n with the SocketAddress port as its argument to ensure the operation is allowed. \n This could result in a SecurityException.\n <p>\n When the socket is created the\n {@link DatagramSocket#setReuseAddress(boolean)} method is\n called to enable the SO_REUSEADDR socket option. \n\n @param bindaddr Socket address to bind to, or <code>null</code> for\n                 an unbound socket.\n @exception IOException if an I/O exception occurs\n while creating the MulticastSocket\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkListen</code> method doesn't allow the operation.\n @see SecurityManager#checkListen\n @see java.net.DatagramSocket#setReuseAddress(boolean) \n\n @since 1.4\n"
15654,field,java/net/JarURLConnection/jarFileURLConnection," The connection to the JAR file URL, if the connection has been\n initiated. This should be set by connect.\n"
15657,method,java/net/InterfaceAddress/getBroadcast/," Returns an <code>InetAddress</code> for the brodcast address\n for this InterfaceAddress.\n <p>\n Only IPv4 networks have broadcast address therefore, in the case\n of an IPv6 network, <code>null</code> will be returned.\n\n @return the <code>InetAddress</code> representing the broadcast\n         address or <code>null</code> if there is no broadcast address.\n"
15659,method,java/net/InterfaceAddress/equals/Object," Compares this object against the specified object.\n The result is <code>true</code> if and only if the argument is\n not <code>null</code> and it represents the same interface address as\n this object.\n <p>\n Two instances of <code>InterfaceAddress</code> represent the same\n address if the InetAddress, the prefix length and the broadcast are\n the same for both.\n\n @param   obj   the object to compare against.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see     java.net.InterfaceAddress#hashCode()\n"
15662,class,java/net/InetSocketAddress,"\n This class implements an IP Socket Address (IP address + port number)\n It can also be a pair (hostname + port number), in which case an attempt\n will be made to resolve the hostname. If resolution fails then the address\n is said to be <I>unresolved</I> but can still be used on some circumstances\n like connecting through a proxy.\n <p>\n It provides an immutable object used by sockets for binding, connecting, or\n as returned values.\n <p>\n The <i>wildcard</i> is a special local IP address. It usually means "any"\n and can only be used for <code>bind</code> operations.\n\n @see	java.net.Socket\n @see	java.net.ServerSocket\n @since 1.4\n"
15668,method,java/net/InetSocketAddress/toString/," Constructs a string representation of this InetSocketAddress.\n This String is constructed by calling toString() on the InetAddress\n and concatenating the port number (with a colon). If the address\n is unresolved then the part before the colon will only contain the hostname.\n\n @return  a string representation of this object.\n"
15669,method,java/net/InetSocketAddress/equals/Object," Compares this object against the specified object.\n The result is <code>true</code> if and only if the argument is\n not <code>null</code> and it represents the same address as\n this object.\n <p>\n Two instances of <code>InetSocketAddress</code> represent the same\n address if both the InetAddresses (or hostnames if it is unresolved) and port\n numbers are equal.\n If both addresses are unresolved, then the hostname & the port number\n are compared.\n\n @param   obj   the object to compare against.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see java.net.InetAddress#equals(java.lang.Object)\n"
15671,method,java/net/InetSocketAddress/InetSocketAddress/int," Creates a socket address where the IP address is the wildcard address\n and the port number a specified value.\n <p>\n A valid port value is between 0 and 65535.\n A port number of <code>zero</code> will let the system pick up an\n ephemeral port in a <code>bind</code> operation.\n <p>\n @param	port	The port number\n @throws IllegalArgumentException if the port parameter is outside the specified\n range of valid port values. \n"
15672,method,java/net/InetSocketAddress/InetSocketAddress/InetAddress;int,"\n Creates a socket address from an IP address and a port number.\n <p>\n A valid port value is between 0 and 65535.\n A port number of <code>zero</code> will let the system pick up an\n ephemeral port in a <code>bind</code> operation.\n <P>\n A <code>null</code> address will assign the <i>wildcard</i> address.\n <p>\n @param	addr	The IP address\n @param	port	The port number\n @throws IllegalArgumentException if the port parameter is outside the specified\n range of valid port values.\n"
15692,method,java/net/InetAddress/equals/Object," Compares this object against the specified object.\n The result is <code>true</code> if and only if the argument is\n not <code>null</code> and it represents the same IP address as\n this object.\n <p>\n Two instances of <code>InetAddress</code> represent the same IP\n address if the length of the byte arrays returned by\n <code>getAddress</code> is the same for both, and each of the\n array components is the same for the byte arrays.\n\n @param   obj   the object to compare against.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see     java.net.InetAddress#getAddress()\n"
15695,method,java/net/InetAddress/getByName/String," Determines the IP address of a host, given the host's name.\n\n <p> The host name can either be a machine name, such as\n "<code>java.sun.com</code>", or a textual representation of its\n IP address. If a literal IP address is supplied, only the\n validity of the address format is checked.\n\n <p> For <code>host</code> specified in literal IPv6 address,\n either the form defined in RFC 2732 or the literal IPv6 address\n format defined in RFC 2373 is accepted. IPv6 scoped addresses are also\n supported. See <a href="Inet6Address.html#scoped">here</a> for a description of IPv6\n scoped addresses.\n\n <p> If the host is <tt>null</tt> then an <tt>InetAddress</tt>\n representing an address of the loopback interface is returned.\n See <a href="http://www.ietf.org/rfc/rfc3330.txt">RFC&nbsp;3330</a>\n section&nbsp;2 and <a href="http://www.ietf.org/rfc/rfc2373.txt">RFC&nbsp;2373</a>\n section&nbsp;2.5.3. </p>\n\n @param      host   the specified host, or <code>null</code>.\n @return     an IP address for the given host name.\n @exception  UnknownHostException  if no IP address for the\n               <code>host</code> could be found, or if a scope_id was specified\n		     for a global IPv6 address.\n @exception  SecurityException if a security manager exists\n             and its checkConnect method doesn't allow the operation\n"
15696,method,java/net/InetAddress/getAllByName/String," Given the name of a host, returns an array of its IP addresses,\n based on the configured name service on the system.\n \n <p> The host name can either be a machine name, such as\n "<code>java.sun.com</code>", or a textual representation of its IP\n address. If a literal IP address is supplied, only the\n validity of the address format is checked.\n\n <p> For <code>host</code> specified in <i>literal IPv6 address</i>,\n either the form defined in RFC 2732 or the literal IPv6 address\n format defined in RFC 2373 is accepted. A literal IPv6 address may\n also be qualified by appending a scoped zone identifier or scope_id.\n The syntax and usage of scope_ids is described \n <a href="Inet6Address.html#scoped">here</a>.\n <p> If the host is <tt>null</tt> then an <tt>InetAddress</tt>\n representing an address of the loopback interface is returned.\n See <a href="http://www.ietf.org/rfc/rfc3330.txt">RFC&nbsp;3330</a>\n section&nbsp;2 and <a href="http://www.ietf.org/rfc/rfc2373.txt">RFC&nbsp;2373</a>\n section&nbsp;2.5.3. </p>\n\n <p> If there is a security manager and <code>host</code> is not \n null and <code>host.length() </code> is not equal to zero, the\n security manager's\n <code>checkConnect</code> method is called\n with the hostname and <code>-1</code> \n as its arguments to see if the operation is allowed.\n\n @param      host   the name of the host, or <code>null</code>.\n @return     an array of all the IP addresses for a given host name.\n \n @exception  UnknownHostException  if no IP address for the\n               <code>host</code> could be found, or if a scope_id was specified\n		     for a global IPv6 address.\n @exception  SecurityException  if a security manager exists and its  \n               <code>checkConnect</code> method doesn't allow the operation.\n \n @see SecurityManager#checkConnect\n"
15698,method,java/net/InetAddress/getLocalHost/," Returns the local host.\n\n <p>If there is a security manager, its\n <code>checkConnect</code> method is called\n with the local host name and <code>-1</code> \n as its arguments to see if the operation is allowed. \n If the operation is not allowed, an InetAddress representing\n the loopback address is returned.\n\n @return     the IP address of the local host.\n \n @exception  UnknownHostException  if no IP address for the\n               <code>host</code> could be found.\n \n @see SecurityManager#checkConnect\n"
15699,class,java/net/Inet6Address," This class represents an Internet Protocol version 6 (IPv6) address.\n Defined by <a href="http://www.ietf.org/rfc/rfc2373.txt">\n <i>RFC&nbsp;2373: IP Version 6 Addressing Architecture</i></a>.\n\n <h4> <A NAME="format">Textual representation of IP addresses</a> </h4>\n\n Textual representation of IPv6 address used as input to methods\n takes one of the following forms:\n \n <ol>\n   <li><p> <A NAME="lform">The preferred form</a> is x:x:x:x:x:x:x:x,\n   where the 'x's are\n   the hexadecimal values of the eight 16-bit pieces of the\n   address. This is the full form.  For example,\n\n   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">\n   <tr><td><tt>1080:0:0:0:8:800:200C:417A</tt><td></tr>\n   </table></blockquote>\n\n   <p> Note that it is not necessary to write the leading zeros in\n   an individual field. However, there must be at least one numeral\n   in every field, except as described below.</li>\n\n   <li><p> Due to some methods of allocating certain styles of IPv6\n   addresses, it will be common for addresses to contain long\n   strings of zero bits. In order to make writing addresses\n   containing zero bits easier, a special syntax is available to\n   compress the zeros. The use of "::" indicates multiple groups\n   of 16-bits of zeros. The "::" can only appear once in an address.\n   The "::" can also be used to compress the leading and/or trailing\n   zeros in an address. For example,\n\n   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">\n   <tr><td><tt>1080::8:800:200C:417A</tt><td></tr>\n   </table></blockquote>\n\n   <li><p> An alternative form that is sometimes more convenient\n   when dealing with a mixed environment of IPv4 and IPv6 nodes is\n   x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values\n   of the six high-order 16-bit pieces of the address, and the 'd's\n   are the decimal values of the four low-order 8-bit pieces of the\n   standard IPv4 representation address, for example,\n\n   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">\n   <tr><td><tt>::FFFF:129.144.52.38</tt><td></tr>\n   <tr><td><tt>::129.144.52.38</tt><td></tr>\n   </table></blockquote>\n\n   <p> where "::FFFF:d.d.d.d" and "::d.d.d.d" are, respectively, the\n   general forms of an IPv4-mapped IPv6 address and an\n   IPv4-compatible IPv6 address. Note that the IPv4 portion must be\n   in the "d.d.d.d" form. The following forms are invalid:\n\n   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">\n   <tr><td><tt>::FFFF:d.d.d</tt><td></tr>\n   <tr><td><tt>::FFFF:d.d</tt><td></tr>\n   <tr><td><tt>::d.d.d</tt><td></tr>\n   <tr><td><tt>::d.d</tt><td></tr>\n   </table></blockquote>\n\n   <p> The following form:\n\n   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">\n   <tr><td><tt>::FFFF:d</tt><td></tr>\n   </table></blockquote>\n\n   <p> is valid, however it is an unconventional representation of\n   the IPv4-compatible IPv6 address,\n\n   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">\n   <tr><td><tt>::255.255.0.d</tt><td></tr>\n   </table></blockquote>\n\n   <p> while "::d" corresponds to the general IPv6 address\n   "0:0:0:0:0:0:0:d".</li>\n </ol>\n\n <p> For methods that return a textual representation as output\n value, the full form is used. Inet6Address will return the full\n form because it is unambiguous when used in combination with other\n textual data.\n\n <h4> Special IPv6 address </h4>\n\n <blockquote>\n <table cellspacing=2 summary="Description of IPv4-mapped address"> <tr><th valign=top><i>IPv4-mapped address</i></th>\n         <td>Of the form::ffff:w.x.y.z, this IPv6 address is used to\n         represent an IPv4 address. It allows the native program to\n         use the same address data structure and also the same\n         socket when communicating with both IPv4 and IPv6 nodes.\n\n         <p>In InetAddress and Inet6Address, it is used for internal\n         representation; it has no functional role. Java will never\n         return an IPv4-mapped address.  These classes can take an\n         IPv4-mapped address as input, both in byte array and text\n         representation. However, it will be converted into an IPv4\n         address.</td></tr>\n </table></blockquote>\n <p>\n <h4> <A NAME="scoped">Textual representation of IPv6 scoped addresses</a> </h4>\n <p>\n The textual representation of IPv6 addresses as described above can be extended\n to specify IPv6 scoped addresses. This extension to the basic addressing architecture\n is described in [draft-ietf-ipngwg-scoping-arch-04.txt].\n <p>\n Because link-local and site-local addresses are non-global, it is possible that different hosts\n may have the same destination address and may be reachable through different interfaces on the\n same originating system. In this case, the originating system is said to be connected\n to multiple zones of the same scope. In order to disambiguate which is the intended destination\n zone, it is possible to append a zone identifier (or <i>scope_id</i>) to an IPv6 address.\n <p>\n The general format for specifying the <i>scope_id</i> is the following:\n <p><blockquote><i>IPv6-address</i>%<i>scope_id</i></blockquote>\n <p> The IPv6-address is a literal IPv6 address as described above.\n The <i>scope_id</i> refers to an interface on the local system, and it can be specified\n in two ways.\n <p><ol><li><i>As a numeric identifier.</i> This must be a positive integer that identifies the\n particular interface and scope as understood by the system. Usually, the numeric\n values can be determined through administration tools on the system. Each interface may\n have multiple values, one for each scope. If the scope is unspecified, then the default value\n used is zero.</li><p>\n <li><i>As a string.</i> This must be the exact string that is returned by \n {@link java.net.NetworkInterface#getName()} for the particular interface in question. \n When an Inet6Address is created in this way, the numeric scope-id is determined at the time\n the object is created by querying the relevant NetworkInterface.</li>\n </ol><p>\n Note also, that the numeric <i>scope_id</i> can be retrieved from Inet6Address instances returned from the\n NetworkInterface class. This can be used to find out the current scope ids configured on the system.\n @since 1.4\n"
15700,method,java/net/Inet6Address/getByAddress/String;byte[];NetworkInterface," Create an Inet6Address in the exact manner of {@link InetAddress#getByAddress(String,byte[])}\n except that the IPv6 scope_id is set to the value corresponding to the given interface \n for the address type specified in <code>addr</code>. \n The call will fail with an UnknownHostException if the given interface does not have a numeric\n scope_id assigned for the given address type (eg. link-local or site-local).\n See <a href="Inet6Address.html#scoped">here</a> for a description of IPv6\n scoped addresses.\n\n @param host the specified host\n @param addr the raw IP address in network byte order\n @param nif an interface this address must be associated with.\n @return  an Inet6Address object created from the raw IP address.\n @exception  UnknownHostException  if IP address is of illegal length, or if the interface\n		does not have a numeric scope_id assigned for the given address type.\n\n @since 1.5\n"
15717,method,java/net/Inet6Address/equals/Object," Compares this object against the specified object.\n The result is <code>true</code> if and only if the argument is\n not <code>null</code> and it represents the same IP address as\n this object.\n <p>\n Two instances of <code>InetAddress</code> represent the same IP\n address if the length of the byte arrays returned by\n <code>getAddress</code> is the same for both, and each of the\n array components is the same for the byte arrays.\n\n @param   obj   the object to compare against.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see     java.net.InetAddress#getAddress()\n"
15719,class,java/net/Inet4Address," This class represents an Internet Protocol version 4 (IPv4) address.\n Defined by <a href="http://www.ietf.org/rfc/rfc790.txt">\n <i>RFC&nbsp;790: Assigned Numbers</i></a>,\n <a href="http://www.ietf.org/rfc/rfc1918.txt">\n <i>RFC&nbsp;1918: Address Allocation for Private Internets</i></a>,\n and <a href="http://www.ietf.org/rfc/rfc2365.txt"><i>RFC&nbsp;2365:\n Administratively Scoped IP Multicast</i></a>\n\n <h4> <A NAME="format">Textual representation of IP addresses</a> </h4>\n\n Textual representation of IPv4 address used as input to methods\n takes one of the following forms:\n\n <blockquote><table cellpadding=0 cellspacing=0 summary="layout">\n <tr><td><tt>d.d.d.d</tt></td></tr>\n <tr><td><tt>d.d.d</tt></td></tr>\n <tr><td><tt>d.d</tt></td></tr>\n <tr><td><tt>d</tt></td></tr>\n </table></blockquote>\n\n <p> When four parts are specified, each is interpreted as a byte of\n data and assigned, from left to right, to the four bytes of an IPv4\n address.\n\n <p> When a three part address is specified, the last part is\n interpreted as a 16-bit quantity and placed in the right most two\n bytes of the network address. This makes the three part address\n format convenient for specifying Class B net- work addresses as\n 128.net.host.\n\n <p> When a two part address is supplied, the last part is\n interpreted as a 24-bit quantity and placed in the right most three\n bytes of the network address. This makes the two part address\n format convenient for specifying Class A network addresses as\n net.host.\n\n <p> When only one part is given, the value is stored directly in\n the network address without any byte rearrangement.\n\n <p> For methods that return a textual representation as output\n value, the first form, i.e. a dotted-quad string, is used.\n\n <h4> The Scope of a Multicast Address </h4>\n \n Historically the IPv4 TTL field in the IP header has doubled as a\n multicast scope field: a TTL of 0 means node-local, 1 means\n link-local, up through 32 means site-local, up through 64 means\n region-local, up through 128 means continent-local, and up through\n 255 are global. However, the administrative scoping is preferred.\n Please refer to <a href="http://www.ietf.org/rfc/rfc2365.txt">\n <i>RFC&nbsp;2365: Administratively Scoped IP Multicast</i></a>\n @since 1.4\n"
15733,method,java/net/Inet4Address/equals/Object," Compares this object against the specified object.\n The result is <code>true</code> if and only if the argument is\n not <code>null</code> and it represents the same IP address as\n this object.\n <p>\n Two instances of <code>InetAddress</code> represent the same IP\n address if the length of the byte arrays returned by\n <code>getAddress</code> is the same for both, and each of the\n array components is the same for the byte arrays.\n\n @param   obj   the object to compare against.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see     java.net.InetAddress#getAddress()\n"
15735,method,java/net/IDN/toASCII/String;int," Translates a string from Unicode to ASCII Compatible Encoding (ACE),\n as defined by the ToASCII operation of <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>.\n\n <p>ToASCII operation can fail. ToASCII fails if any step of it fails.\n If ToASCII operation fails, an IllegalArgumentException will be thrown.\n In this case, the input string should not be used in an internationalized domain name.\n\n <p> A label is an individual part of a domain name. The original ToASCII operation,\n as defined in RFC 3490, only operates on a single label. This method can handle\n both label and entire domain name, by assuming that labels in a domain name are\n always separated by dots. The following characters are recognized as dots:\n &#0092;u002E (full stop), &#0092;u3002 (ideographic full stop), &#0092;uFF0E (fullwidth full stop),\n and &#0092;uFF61 (halfwidth ideographic full stop). if dots are\n used as label separators, this method also changes all of them to &#0092;u002E (full stop)\n in output translated string.\n\n @param input     the string to be processed\n @param flag      process flag; can be 0 or any logical OR of possible flags\n\n @return          the translated <tt>String</tt>\n\n @throws IllegalArgumentException   if the input string doesn't conform to RFC 3490 specification\n"
15736,method,java/net/IDN/toASCII/String," Translates a string from Unicode to ASCII Compatible Encoding (ACE),\n as defined by the ToASCII operation of <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>.\n\n <p> This convenience method works as if by invoking the\n two-argument counterpart as follows:\n <blockquote><tt>\n {@link #toASCII(String, int) toASCII}(input,&nbsp;0);\n </tt></blockquote>\n\n @param input     the string to be processed\n\n @return          the translated <tt>String</tt>\n\n @throws IllegalArgumentException   if the input string doesn't conform to RFC 3490 specification\n"
15738,method,java/net/IDN/toUnicode/String," Translates a string from ASCII Compatible Encoding (ACE) to Unicode,\n as defined by the ToUnicode operation of <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>.\n\n <p> This convenience method works as if by invoking the\n two-argument counterpart as follows:\n <blockquote><tt>\n {@link #toUnicode(String, int) toUnicode}(input,&nbsp;0);\n </tt></blockquote>\n\n @param input     the string to be processed\n\n @return          the translated <tt>String</tt>\n"
15741,class,java/net/HttpURLConnection," A URLConnection with support for HTTP-specific features. See\n <A HREF="http://www.w3.org/pub/WWW/Protocols/"> the spec </A> for\n details.\n <p>\n \n Each HttpURLConnection instance is used to make a single request  \n but the underlying network connection to the HTTP server may be\n transparently shared by other instances. Calling the close() methods\n on the InputStream or OutputStream of an HttpURLConnection\n after a request may free network resources associated with this\n instance but has no effect on any shared persistent connection.\n Calling the disconnect() method may close the underlying socket\n if a persistent connection is otherwise idle at that time.\n \n @see     java.net.HttpURLConnection#disconnect()\n @since JDK1.1\n"
15742,method,java/net/HttpURLConnection/getHeaderFieldKey/int," Returns the key for the <code>n</code><sup>th</sup> header field.\n Some implementations may treat the <code>0</code><sup>th</sup> \n header field as special, i.e. as the status line returned by the HTTP\n server. In this case, {@link #getHeaderField(int) getHeaderField(0)} returns the status \n line, but <code>getHeaderFieldKey(0)</code> returns null.\n\n @param   n   an index, where n >=0.\n @return  the key for the <code>n</code><sup>th</sup> header field,\n          or <code>null</code> if the key does not exist.\n"
15745,method,java/net/HttpURLConnection/getHeaderField/int," Returns the value for the <code>n</code><sup>th</sup> header field. \n Some implementations may treat the <code>0</code><sup>th</sup> \n header field as special, i.e. as the status line returned by the HTTP\n server. \n <p>\n This method can be used in conjunction with the \n {@link #getHeaderFieldKey getHeaderFieldKey} method to iterate through all \n the headers in the message. \n\n @param   n   an index, where n>=0.\n @return  the value of the <code>n</code><sup>th</sup> header field,\n		or <code>null</code> if the value does not exist.\n @see     java.net.HttpURLConnection#getHeaderFieldKey(int)\n"
15746,method,java/net/HttpURLConnection/setFollowRedirects/boolean," Sets whether HTTP redirects  (requests with response code 3xx) should \n be automatically followed by this class.  True by default.  Applets\n cannot change this variable.\n <p>\n If there is a security manager, this method first calls\n the security manager's <code>checkSetFactory</code> method \n to ensure the operation is allowed. \n This could result in a SecurityException.\n \n @param set a <code>boolean</code> indicating whether or not\n to follow HTTP redirects.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkSetFactory</code> method doesn't \n             allow the operation.\n @see        SecurityManager#checkSetFactory\n @see #getFollowRedirects()\n"
15747,method,java/net/HttpURLConnection/getFollowRedirects/," Returns a <code>boolean</code> indicating\n whether or not HTTP redirects (3xx) should\n be automatically followed.\n\n @return <code>true</code> if HTTP redirects should\n be automatically followed, <tt>false</tt> if not.\n @see #setFollowRedirects(boolean)\n"
15748,method,java/net/HttpURLConnection/setInstanceFollowRedirects/boolean," Sets whether HTTP redirects (requests with response code 3xx) should\n be automatically followed by this <code>HttpURLConnection</code> \n instance.\n <p>\n The default value comes from followRedirects, which defaults to\n true.\n\n @param followRedirects a <code>boolean</code> indicating \n whether or not to follow HTTP redirects.\n\n @see    java.net.HttpURLConnection#instanceFollowRedirects\n @see #getInstanceFollowRedirects\n @since 1.3\n"
15750,method,java/net/HttpURLConnection/setRequestMethod/String," Set the method for the URL request, one of:\n <UL>\n  <LI>GET\n  <LI>POST\n  <LI>HEAD\n  <LI>OPTIONS\n  <LI>PUT\n  <LI>DELETE\n  <LI>TRACE\n </UL> are legal, subject to protocol restrictions.  The default\n method is GET.\n \n @param method the HTTP method\n @exception ProtocolException if the method cannot be reset or if\n              the requested method isn't valid for HTTP.\n @see #getRequestMethod()\n"
15752,method,java/net/HttpURLConnection/getResponseCode/," Gets the status code from an HTTP response message.\n For example, in the case of the following status lines:\n <PRE>\n HTTP/1.0 200 OK\n HTTP/1.0 401 Unauthorized\n </PRE>\n It will return 200 and 401 respectively.\n Returns -1 if no code can be discerned\n from the response (i.e., the response is not valid HTTP).\n @throws IOException if an error occurred connecting to the server.\n @return the HTTP Status-Code, or -1\n"
15753,method,java/net/HttpURLConnection/getResponseMessage/," Gets the HTTP response message, if any, returned along with the\n response code from a server.  From responses like:\n <PRE>\n HTTP/1.0 200 OK\n HTTP/1.0 404 Not Found\n </PRE>\n Extracts the Strings "OK" and "Not Found" respectively.\n Returns null if none could be discerned from the responses \n (the result was not valid HTTP).\n @throws IOException if an error occurred connecting to the server.\n @return the HTTP response message, or <code>null</code>\n"
15758,method,java/net/HttpURLConnection/getErrorStream/," Returns the error stream if the connection failed\n but the server sent useful data nonetheless. The\n typical example is when an HTTP server responds\n with a 404, which will cause a FileNotFoundException \n to be thrown in connect, but the server sent an HTML\n help page with suggestions as to what to do.\n\n <p>This method will not cause a connection to be initiated.  If\n the connection was not connected, or if the server did not have\n an error while connecting or if the server had an error but\n no error data was sent, this method will return null. This is\n the default.\n\n @return an error stream if any, null if there have been no\n errors, the connection is not connected or the server sent no\n useful data.\n"
15763,field,java/net/HttpURLConnection/responseCode," An <code>int</code> representing the three digit HTTP Status-Code.\n <ul>\n <li> 1xx: Informational\n <li> 2xx: Success\n <li> 3xx: Redirection\n <li> 4xx: Client Error\n <li> 5xx: Server Error\n </ul>\n"
15781,field,java/net/HttpURLConnection/HTTP_PAYMENT_REQUIRED," HTTP Status-Code 402: Payment Required.\n"
15786,field,java/net/HttpURLConnection/HTTP_PROXY_AUTH," HTTP Status-Code 407: Proxy Authentication Required.\n"
15790,field,java/net/HttpURLConnection/HTTP_LENGTH_REQUIRED," HTTP Status-Code 411: Length Required.\n"
15795,field,java/net/HttpURLConnection/HTTP_SERVER_ERROR," HTTP Status-Code 500: Internal Server Error. \n @deprecated   it is misplaced and shouldn't have existed.\n"
15796,field,java/net/HttpURLConnection/HTTP_INTERNAL_ERROR,"\n HTTP Status-Code 500: Internal Server Error. \n"
15805,method,java/net/HttpRetryException/getLocation/," Returns the value of the Location header field if the\n error resulted from redirection.\n\n @return The location string\n"
15808,class,java/net/HttpCookie," An HttpCookie object represents an http cookie, which carries state\n information between server and user agent. Cookie is widely adopted\n to create stateful sessions.\n\n <p>There are 3 http cookie specifications:\n <blockquote>\n   Netscape draft<br>\n   RFC 2109 - <a href="http://www.ietf.org/rfc/rfc2109.txt">\n <i>http://www.ietf.org/rfc/rfc2109.txt</i></a><br>\n   RFC 2965 - <a href="http://www.ietf.org/rfc/rfc2965.txt">\n <i>http://www.ietf.org/rfc/rfc2965.txt</i></a>\n </blockquote>\n\n <p>HttpCookie class can accept all these 3 forms of syntax.\n\n @version 1.7, 10/03/23\n @author Edward Wang\n @since 1.6\n"
15813,method,java/net/HttpCookie/setCommentURL/String,"\n Specifies a comment url that describes a cookie's purpose.\n The comment url is useful if the browser presents the cookie\n to the user. Comment url is RFC 2965 only.\n\n @param purpose           a <code>String</code> specifying the comment url\n                          to display to the user\n\n @see #getCommentURL\n\n"
15815,method,java/net/HttpCookie/setDiscard/boolean," Specify whether user agent should discard the cookie unconditionally.\n This is RFC 2965 only attribute.\n\n @param discard   <tt>true</tt> indicates to discard cookie unconditionally\n\n @see #getDiscard\n"
15817,method,java/net/HttpCookie/setPortlist/String," Specify the portlist of the cookie, which restricts the port(s)\n to which a cookie may be sent back in a Cookie header.\n\n @param ports     a <tt>String</tt> specify the port list, which is\n                  comma seperated series of digits\n @see #getPortlist\n"
15819,method,java/net/HttpCookie/setDomain/String,"\n Specifies the domain within which this cookie should be presented.\n\n <p>The form of the domain name is specified by RFC 2965. A domain\n name begins with a dot (<code>.foo.com</code>) and means that\n the cookie is visible to servers in a specified Domain Name System\n (DNS) zone (for example, <code>www.foo.com</code>, but not\n <code>a.b.foo.com</code>). By default, cookies are only returned\n to the server that sent them.\n\n\n @param pattern           a <code>String</code> containing the domain name\n                          within which this cookie is visible;\n                          form is according to RFC 2965\n\n @see #getDomain\n\n"
15821,method,java/net/HttpCookie/setMaxAge/long," Sets the maximum age of the cookie in seconds.\n\n <p>A positive value indicates that the cookie will expire\n after that many seconds have passed. Note that the value is\n the <i>maximum</i> age when the cookie will expire, not the cookie's\n current age.\n\n <p>A negative value means\n that the cookie is not stored persistently and will be deleted\n when the Web browser exits. A zero value causes the cookie\n to be deleted.\n\n @param expiry            an integer specifying the maximum age of the\n                          cookie in seconds; if zero, the cookie\n                          should be discarded immediately;\n                          otherwise, the cookie's max age is unspecified.\n\n @see #getMaxAge\n\n"
15825,method,java/net/HttpCookie/setSecure/boolean," Indicates whether the cookie should only be sent using a secure protocol,\n such as HTTPS or SSL.\n\n <p>The default value is <code>false</code>.\n\n @param flag      If <code>true</code>, the cookie can only be sent over\n                  a secure protocol like https.\n                  If <code>false</code>, it can be sent over any protocol.\n\n @see #getSecure\n\n"
15826,method,java/net/HttpCookie/getSecure/," Returns <code>true</code> if sending this cookie should be\n restricted to a secure protocol, or <code>false</code> if the\n it can be sent using any protocol.\n\n @return          <code>false</code> if the cookie can be sent over\n                  any standard protocol; otherwise, <code>true</code>\n\n @see #setSecure\n\n"
15827,method,java/net/HttpCookie/getName/," Returns the name of the cookie. The name cannot be changed after\n creation.\n\n @return          a <code>String</code> specifying the cookie's name\n\n"
15834,method,java/net/HttpCookie/equals/Object," Test the equality of two http cookies.\n\n <p> The result is <tt>true</tt> only if two cookies\n come from same domain (case-insensitive),\n have same name (case-insensitive),\n and have same path (case-sensitive).\n\n @return          <tt>true</tt> if 2 http cookies equal to each other;\n                  otherwise, <tt>false</tt>\n"
15838,interface,java/net/FileNameMap," A simple interface which provides a mechanism to map\n between a file name and a MIME type string.\n\n @version 	1.16, 03/23/10\n @author  Steven B. Byrne\n @since   JDK1.1\n"
15843,method,java/net/DatagramSocketImpl/create/," Creates a datagram socket.\n @exception SocketException if there is an error in the \n underlying protocol, such as a TCP error. \n"
15844,method,java/net/DatagramSocketImpl/bind/int;InetAddress," Binds a datagram socket to a local port and address.\n @param lport the local port\n @param laddr the local address\n @exception SocketException if there is an error in the\n underlying protocol, such as a TCP error.\n"
15845,method,java/net/DatagramSocketImpl/send/DatagramPacket," Sends a datagram packet. The packet contains the data and the\n destination address to send the packet to.\n @param p the packet to be sent.\n @exception IOException if an I/O exception occurs while sending the \n datagram packet.\n @exception  PortUnreachableException may be thrown if the socket is connected\n to a currently unreachable destination. Note, there is no guarantee that \n the exception will be thrown.\n"
15846,method,java/net/DatagramSocketImpl/connect/InetAddress;int," Connects a datagram socket to a remote destination. This associates the remote\n address with the local socket so that datagrams may only be sent to this destination\n and received from this destination. This may be overridden to call a native\n system connect. \n\n <p>If the remote destination to which the socket is connected does not\n exist, or is otherwise unreachable, and if an ICMP destination unreachable\n packet has been received for that address, then a subsequent call to \n send or receive may throw a PortUnreachableException. \n Note, there is no guarantee that the exception will be thrown.\n @param address the remote InetAddress to connect to\n @param port the remote port number\n @exception   SocketException may be thrown if the socket cannot be\n connected to the remote destination\n @since 1.4\n"
15848,method,java/net/DatagramSocketImpl/peek/InetAddress," Peek at the packet to see who it is from. Updates the specified <code>InetAddress</code>\n to the address which the packet came from.\n @param i an InetAddress object \n @return the port number which the packet came from.\n @exception IOException if an I/O exception occurs\n @exception  PortUnreachableException may be thrown if the socket is connected\n       to a currently unreachable destination. Note, there is no guarantee that the\n       exception will be thrown.\n"
15849,method,java/net/DatagramSocketImpl/peekData/DatagramPacket," Peek at the packet to see who it is from. The data is copied into the specified\n <code>DatagramPacket</code>. The data is returned,\n but not consumed, so that a subsequent peekData/receive operation \n will see the same data.\n @param p the Packet Received.\n @return the port number which the packet came from.\n @exception IOException if an I/O exception occurs\n @exception  PortUnreachableException may be thrown if the socket is connected\n       to a currently unreachable destination. Note, there is no guarantee that the\n       exception will be thrown.\n @since 1.4\n"
15850,method,java/net/DatagramSocketImpl/receive/DatagramPacket," Receive the datagram packet.\n @param p the Packet Received.\n @exception IOException if an I/O exception occurs\n while receiving the datagram packet.\n @exception  PortUnreachableException may be thrown if the socket is connected\n       to a currently unreachable destination. Note, there is no guarantee that the\n       exception will be thrown.\n"
15865,class,java/net/DatagramSocket," This class represents a socket for sending and receiving datagram packets.\n\n <p>A datagram socket is the sending or receiving point for a packet\n delivery service. Each packet sent or received on a datagram socket\n is individually addressed and routed. Multiple packets sent from\n one machine to another may be routed differently, and may arrive in\n any order.\n\n <p>UDP broadcasts sends are always enabled on a DatagramSocket.\n In order to receive broadcast packets a DatagramSocket\n should be bound to the wildcard address. In some\n implementations, broadcast packets may also be received when\n a DatagramSocket is bound to a more specific address.\n <p>\n Example:\n <code>\n		DatagramSocket s = new DatagramSocket(null);\n		s.bind(new InetSocketAddress(8888));\n </code>\n Which is equivalent to:\n <code>\n		DatagramSocket s = new DatagramSocket(8888);\n </code>\n Both cases will create a DatagramSocket able to receive broadcasts on\n UDP port 8888.\n\n @author  Pavani Diwanji\n @version 1.103, 03/23/10\n @see     java.net.DatagramPacket\n @see     java.nio.channels.DatagramChannel\n @since JDK1.0\n"
15866,method,java/net/DatagramSocket/bind/SocketAddress," Binds this DatagramSocket to a specific address & port.\n <p>\n If the address is <code>null</code>, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n<p>\n @param	addr The address & port to bind to.\n @throws	SocketException if any error happens during the bind, or if the\n		socket is already bound.\n @throws	SecurityException  if a security manager exists and its  \n             <code>checkListen</code> method doesn't allow the operation.\n @throws IllegalArgumentException if addr is a SocketAddress subclass\n         not supported by this socket.\n @since 1.4\n"
15867,method,java/net/DatagramSocket/connect/InetAddress;int,"\n Connects the socket to a remote address for this socket. When a\n socket is connected to a remote address, packets may only be\n sent to or received from that address. By default a datagram\n socket is not connected.\n\n <p>If the remote destination to which the socket is connected does not\n exist, or is otherwise unreachable, and if an ICMP destination unreachable\n packet has been received for that address, then a subsequent call to \n send or receive may throw a PortUnreachableException. Note, there is no \n guarantee that the exception will be thrown.\n\n <p>A caller's permission to send and receive datagrams to a\n given host and port are checked at connect time. When a socket\n is connected, receive and send <b>will not\n perform any security checks</b> on incoming and outgoing\n packets, other than matching the packet's and the socket's\n address and port. On a send operation, if the packet's address\n is set and the packet's address and the socket's address do not\n match, an IllegalArgumentException will be thrown. A socket\n connected to a multicast address may only be used to send packets.\n\n @param address the remote address for the socket\n\n @param port the remote port for the socket.\n\n @exception IllegalArgumentException if the address is null,\n or the port is out of range.\n\n @exception SecurityException if the caller is not allowed to\n send datagrams to and receive datagrams from the address and port.\n\n @see #disconnect\n @see #send\n @see #receive \n"
15868,method,java/net/DatagramSocket/connect/SocketAddress," Connects this socket to a remote socket address (IP address + port number).\n <p>\n @param	addr	The remote address.\n @throws	SocketException if the connect fails\n @throws	IllegalArgumentException if addr is null or addr is a SocketAddress\n		subclass not supported by this socket\n @since 1.4\n @see #connect\n"
15876,method,java/net/DatagramSocket/send/DatagramPacket," Sends a datagram packet from this socket. The\n <code>DatagramPacket</code> includes information indicating the\n data to be sent, its length, the IP address of the remote host,\n and the port number on the remote host.\n\n <p>If there is a security manager, and the socket is not currently\n connected to a remote address, this method first performs some\n security checks. First, if <code>p.getAddress().isMulticastAddress()</code>\n is true, this method calls the\n security manager's <code>checkMulticast</code> method\n with <code>p.getAddress()</code> as its argument.\n If the evaluation of that expression is false,\n this method instead calls the security manager's \n <code>checkConnect</code> method with arguments\n <code>p.getAddress().getHostAddress()</code> and\n <code>p.getPort()</code>. Each call to a security manager method\n could result in a SecurityException if the operation is not allowed.\n \n @param      p   the <code>DatagramPacket</code> to be sent.\n \n @exception  IOException  if an I/O error occurs.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkMulticast</code> or <code>checkConnect</code> \n             method doesn't allow the send.\n @exception  PortUnreachableException may be thrown if the socket is connected\n             to a currently unreachable destination. Note, there is no \n 		   guarantee that the exception will be thrown.\n @exception  java.nio.channels.IllegalBlockingModeException\n             if this socket has an associated channel,\n             and the channel is in non-blocking mode.\n \n @see        java.net.DatagramPacket\n @see        SecurityManager#checkMulticast(InetAddress)\n @see        SecurityManager#checkConnect\n @revised 1.4\n @spec JSR-51\n"
15878,method,java/net/DatagramSocket/getLocalAddress/," Gets the local address to which the socket is bound.\n\n <p>If there is a security manager, its\n <code>checkConnect</code> method is first called\n with the host address and <code>-1</code>\n as its arguments to see if the operation is allowed.\n\n @see SecurityManager#checkConnect\n @return  the local address to which the socket is bound, or\n		an <code>InetAddress</code> representing any local\n		address if either the socket is not bound, or\n		the security manager <code>checkConnect</code>\n		method does not allow the operation\n @since   1.1\n"
15881,method,java/net/DatagramSocket/getSoTimeout/," Retrieve setting for SO_TIMEOUT.  0 returns implies that the\n option is disabled (i.e., timeout of infinity).\n\n @return the setting for SO_TIMEOUT\n @throws SocketException if there is an error in the underlying protocol, such as an UDP error.\n @since   JDK1.1\n @see #setSoTimeout(int)\n"
15883,method,java/net/DatagramSocket/getSendBufferSize/," Get value of the SO_SNDBUF option for this <tt>DatagramSocket</tt>, that is the\n buffer size used by the platform for output on this <tt>DatagramSocket</tt>.\n\n @return the value of the SO_SNDBUF option for this <tt>DatagramSocket</tt>\n @exception SocketException if there is an error in \n the underlying protocol, such as an UDP error.\n @see #setSendBufferSize\n"
15885,method,java/net/DatagramSocket/getReceiveBufferSize/," Get value of the SO_RCVBUF option for this <tt>DatagramSocket</tt>, that is the\n buffer size used by the platform for input on this <tt>DatagramSocket</tt>.\n\n @return the value of the SO_RCVBUF option for this <tt>DatagramSocket</tt>\n @exception SocketException if there is an error in the underlying protocol, such as an UDP error.\n @see #setReceiveBufferSize(int)\n"
15886,method,java/net/DatagramSocket/setReuseAddress/boolean," Enable/disable the SO_REUSEADDR socket option.\n <p>\n For UDP sockets it may be necessary to bind more than one\n socket to the same socket address. This is typically for the\n purpose of receiving multicast packets\n (See {@link java.net.MulticastSocket}). The\n <tt>SO_REUSEADDR</tt> socket option allows multiple\n sockets to be bound to the same socket address if the\n <tt>SO_REUSEADDR</tt> socket option is enabled prior\n to binding the socket using {@link #bind(SocketAddress)}.\n <p>\n Note: This functionality is not supported by all existing platforms,\n so it is implementation specific whether this option will be ignored\n or not. However, if it is not supported then\n {@link #getReuseAddress()} will always return <code>false</code>.\n <p>\n When a <tt>DatagramSocket</tt> is created the initial setting\n of <tt>SO_REUSEADDR</tt> is disabled.\n <p>\n The behaviour when <tt>SO_REUSEADDR</tt> is enabled or\n disabled after a socket is bound (See {@link #isBound()})\n is not defined.\n \n @param on  whether to enable or disable the \n @exception SocketException if an error occurs enabling or\n            disabling the <tt>SO_RESUEADDR</tt> socket option,\n	   	  or the socket is closed.\n @since 1.4\n @see #getReuseAddress()     \n @see #bind(SocketAddress)     \n @see #isBound()\n @see #isClosed()\n"
15887,method,java/net/DatagramSocket/getReuseAddress/," Tests if SO_REUSEADDR is enabled.\n\n @return a <code>boolean</code> indicating whether or not SO_REUSEADDR is enabled.\n @exception SocketException if there is an error\n in the underlying protocol, such as an UDP error. \n @since   1.4\n @see #setReuseAddress(boolean)\n"
15888,method,java/net/DatagramSocket/setBroadcast/boolean," Enable/disable SO_BROADCAST.\n @param on     whether or not to have broadcast turned on.\n @exception SocketException if there is an error\n in the underlying protocol, such as an UDP error.\n @since 1.4\n @see #getBroadcast()\n"
15889,method,java/net/DatagramSocket/getBroadcast/," Tests if SO_BROADCAST is enabled.\n @return a <code>boolean</code> indicating whether or not SO_BROADCAST is enabled.\n @exception SocketException if there is an error\n in the underlying protocol, such as an UDP error.\n @since 1.4\n @see #setBroadcast(boolean)\n"
15891,method,java/net/DatagramSocket/getTrafficClass/," Gets traffic class or type-of-service in the IP datagram \n header for packets sent from this DatagramSocket.\n <p>\n As the underlying network implementation may ignore the\n traffic class or type-of-service set using {@link #setTrafficClass(int)}\n this method may return a different value than was previously\n set using the {@link #setTrafficClass(int)} method on this \n DatagramSocket.\n\n @return the traffic class or type-of-service already set\n @throws SocketException if there is an error obtaining the\n traffic class or type-of-service value.\n @since 1.4\n @see #setTrafficClass(int)\n"
15892,method,java/net/DatagramSocket/close/," Closes this datagram socket.\n <p>\n Any thread currently blocked in {@link #receive} upon this socket\n will throw a {@link SocketException}.\n\n <p> If this socket has an associated channel then the channel is closed\n as well.\n\n @revised 1.4\n @spec JSR-51\n"
15894,method,java/net/DatagramSocket/getChannel/," Returns the unique {@link java.nio.channels.DatagramChannel} object\n associated with this datagram socket, if any.\n\n <p> A datagram socket will have a channel if, and only if, the channel\n itself was created via the {@link java.nio.channels.DatagramChannel#open\n DatagramChannel.open} method.\n\n @return  the datagram channel associated with this datagram socket,\n          or <tt>null</tt> if this socket was not created for a channel\n\n @since 1.4\n @spec JSR-51\n"
15895,method,java/net/DatagramSocket/setDatagramSocketImplFactory/DatagramSocketImplFactory," Sets the datagram socket implementation factory for the\n application. The factory can be specified only once.\n <p>\n When an application creates a new datagram socket, the socket\n implementation factory's <code>createDatagramSocketImpl</code> method is\n called to create the actual datagram socket implementation.\n <p>\n Passing <code>null</code> to the method is a no-op unless the factory\n was already set.\n \n <p>If there is a security manager, this method first calls\n the security manager's <code>checkSetFactory</code> method \n to ensure the operation is allowed. \n This could result in a SecurityException.\n\n @param      fac   the desired factory.\n @exception  IOException  if an I/O error occurs when setting the\n              datagram socket factory.\n @exception  SocketException  if the factory is already defined.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkSetFactory</code> method doesn't allow the \n     operation.\n @see        \n     java.net.DatagramSocketImplFactory#createDatagramSocketImpl()\n @see       SecurityManager#checkSetFactory\n @since 1.3\n"
15896,method,java/net/DatagramSocket/DatagramSocket/," Constructs a datagram socket and binds it to any available port\n on the local host machine.  The socket will be bound to the wildcard\n address, an IP address chosen by the kernel.\n \n <p>If there is a security manager, \n its <code>checkListen</code> method is first called\n with 0 as its argument to ensure the operation is allowed. \n This could result in a SecurityException.\n\n @exception  SocketException  if the socket could not be opened,\n               or the socket could not bind to the specified local port.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkListen</code> method doesn't allow the operation.\n \n @see SecurityManager#checkListen\n"
15897,method,java/net/DatagramSocket/DatagramSocket/DatagramSocketImpl," Creates an unbound datagram socket with the specified\n DatagramSocketImpl.\n\n @param impl an instance of a <B>DatagramSocketImpl</B>\n        the subclass wishes to use on the DatagramSocket.\n @since   1.4\n"
15898,method,java/net/DatagramSocket/DatagramSocket/SocketAddress," Creates a datagram socket, bound to the specified local\n socket address.\n <p>\n If, if the address is <code>null</code>, creates an unbound socket.\n <p>\n <p>If there is a security manager, \n its <code>checkListen</code> method is first called\n with the port from the socket address\n as its argument to ensure the operation is allowed. \n This could result in a SecurityException.\n \n @param bindaddr local socket address to bind, or <code>null</code>\n		       for an unbound socket.\n \n @exception  SocketException  if the socket could not be opened,\n               or the socket could not bind to the specified local port.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkListen</code> method doesn't allow the operation.\n \n @see SecurityManager#checkListen\n @since   1.4\n"
15899,method,java/net/DatagramSocket/DatagramSocket/int," Constructs a datagram socket and binds it to the specified port\n on the local host machine.  The socket will be bound to the wildcard\n address, an IP address chosen by the kernel.\n \n <p>If there is a security manager, \n its <code>checkListen</code> method is first called\n with the <code>port</code> argument\n as its argument to ensure the operation is allowed. \n This could result in a SecurityException.\n\n @param      port port to use.\n @exception  SocketException  if the socket could not be opened,\n               or the socket could not bind to the specified local port.\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkListen</code> method doesn't allow the operation.\n \n @see SecurityManager#checkListen\n"
15920,interface,java/net/CookieStore," A CookieStore object represents a storage for cookie. Can store and retrieve\n cookies.\n\n <p>{@link CookieManager} will call <tt>CookieStore.add</tt> to save cookies\n for every incoming HTTP response, and call <tt>CookieStore.get</tt> to\n retrieve cookie for every outgoing HTTP request. A CookieStore\n is responsible for removing HttpCookie instances which have expired.\n\n @version 1.4, 10/03/23\n @author Edward Wang\n @since 1.6\n"
15921,method,java/net/CookieStore/add/URI;HttpCookie," Adds one HTTP cookie to the store. This is called for every\n incoming HTTP response.\n\n <p>A cookie to store may or may not be associated with an URI. If it\n is not associated with an URI, the cookie's domain and path attribute\n will indicate where it comes from. If it is associated with an URI and\n its domain and path attribute are not speicifed, given URI will indicate\n where this cookie comes from.\n\n <p>If a cookie corresponding to the given URI already exists,\n then it is replaced with the new one.\n\n @param uri       the uri this cookie associated with.\n                  if <tt>null</tt>, this cookie will not be associated\n                  with an URI\n @param cookie    the cookie to store\n\n @throws NullPointerException if <tt>cookie</tt> is <tt>null</tt>\n\n @see #get\n\n"
15922,method,java/net/CookieStore/get/URI," Retrieve cookies associated with given URI, or whose domain matches the\n given URI. Only cookies that have not expired are returned.\n This is called for every outgoing HTTP request.\n\n @return          an immutable list of HttpCookie,\n                  return empty list if no cookies match the given URI\n\n @throws NullPointerException if <tt>uri</tt> is <tt>null</tt>\n\n @see #add\n\n"
15926,method,java/net/CookieStore/removeAll/," Remove all cookies in this cookie store.\n\n @return          <tt>true</tt> if this store changed as a result of the call\n"
15927,interface,java/net/CookiePolicy," CookiePolicy implementations decide which cookies should be accepted\n and which should be rejected. Three pre-defined policy implementations\n are provided, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER.\n\n <p>See RFC 2965 sec. 3.3 & 7 for more detail.\n\n @version %I%, %E%\n @author Edward Wang\n @since 1.6\n"
15928,method,java/net/CookiePolicy/shouldAccept/URI;HttpCookie," Will be called to see whether or not this cookie should be accepted.\n\n @param uri       the URI to consult accept policy with\n @param cookie    the HttpCookie object in question\n @return          <tt>true</tt> if this cookie should be accepted;\n                  otherwise, <tt>false</tt>\n"
15931,field,java/net/CookiePolicy/ACCEPT_ORIGINAL_SERVER," One pre-defined policy which only accepts cookies from original server.\n"
15932,class,java/net/CookieManager," CookieManager provides a concrete implementation of {@link CookieHandler},\n which separates the storage of cookies from the policy surrounding accepting\n and rejecting cookies. A CookieManager is initialized with a {@link CookieStore}\n which manages storage, and a {@link CookiePolicy} object, which makes\n policy decisions on cookie acceptance/rejection.\n\n <p> The HTTP cookie management in java.net package looks like:\n <blockquote>\n <pre>\n                  use\n CookieHandler <------- HttpURLConnection\n       ^\n       | impl\n       |         use\n CookieManager -------> CookiePolicy\n             |   use\n             |--------> HttpCookie\n             |              ^\n             |              | use\n             |   use        |\n             |--------> CookieStore\n                            ^\n                            | impl\n                            |\n                  Internal in-memory implementation\n </pre>\n <ul>\n   <li>\n     CookieHandler is at the core of cookie management. User can call\n     CookieHandler.setDefault to set a concrete CookieHanlder implementation\n     to be used.\n   </li>\n   <li>\n     CookiePolicy.shouldAccept will be called by CookieManager.put to see whether\n     or not one cookie should be accepted and put into cookie store. User can use\n     any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and\n     ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation\n     and tell CookieManager to use it.\n   </li>\n   <li>\n     CookieStore is the place where any accepted HTTP cookie is stored in.\n     If not specified when created, a CookieManager instance will use an internal\n     in-memory implementation. Or user can implements one and tell CookieManager\n     to use it.\n   </li>\n   <li>\n     Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI)\n     are used by CookieManager. Others are for completeness and might be needed\n     by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieSotre.\n   </li>\n </ul>\n </blockquote>\n\n <p>There're various ways user can hook up his own HTTP cookie management behavior, e.g.\n <blockquote>\n <ul>\n   <li>Use CookieHandler.setDefault to set a brand new {@link CookieHandler} implementation\n   <li>Let CookieManager be the default {@link CookieHandler} implementation,\n       but implement user's own {@link CookieStore} and {@link CookiePolicy}\n       and tell default CookieManager to use them:\n     <blockquote><pre>\n       // this should be done at the beginning of an HTTP session\n       CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy()));\n     </pre></blockquote>\n   <li>Let CookieManager be the default {@link CookieHandler} implementation, but\n       use customized {@link CookiePolicy}:\n     <blockquote><pre>\n       // this should be done at the beginning of an HTTP session\n       CookieHandler.setDefault(new CookieManager());\n       // this can be done at any point of an HTTP session\n       ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy());\n     </pre></blockquote>\n </ul>\n </blockquote>\n\n <p>The implementation conforms to <a href="http://www.ietf.org/rfc/rfc2965.txt">RFC 2965</a>, section 3.3.\n\n @version %I%, %E%\n @see CookiePolicy\n @author Edward Wang\n @since 1.6\n"
15933,method,java/net/CookieManager/setCookiePolicy/CookiePolicy," To set the cookie policy of this cookie manager.\n\n <p> A instance of <tt>CookieManager</tt> will have\n cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always\n can call this method to set another cookie policy.\n\n @param cookiePolicy      the cookie policy. Can be <tt>null</tt>, which\n                          has no effects on current cookie policy.\n"
15938,method,java/net/CookieManager/CookieManager/CookieStore;CookiePolicy," Create a new cookie manager with specified cookie store and cookie policy.\n\n @param store     a <tt>CookieStore</tt> to be used by cookie manager.\n                  if <tt>null</tt>, cookie manager will use a default one,\n                  which is an in-memory CookieStore implmentation.\n @param cookiePolicy      a <tt>CookiePolicy</tt> instance\n                          to be used by cookie manager as policy callback.\n                          if <tt>null</tt>, ACCEPT_ORIGINAL_SERVER will\n                          be used.\n"
15939,class,java/net/CookieHandler," A CookieHandler object provides a callback mechanism to hook up a\n HTTP state management policy implementation into the HTTP protocol\n handler. The HTTP state management mechanism specifies a way to\n create a stateful session with HTTP requests and responses.\n\n <p>A system-wide CookieHandler that to used by the HTTP protocol\n handler can be registered by doing a\n CookieHandler.setDefault(CookieHandler). The currently registered\n CookieHandler can be retrieved by calling\n CookieHandler.getDefault().\n\n For more information on HTTP state management, see <a\n href="http://www.ietf.org/rfc/rfc2965.txt""><i>RFC&nbsp;2965: HTTP\n State Management Mechanism</i></a>\n\n @version 1.4, 03/08/09\n @author Yingxian Wang\n @since 1.5\n"
15941,method,java/net/CookieHandler/setDefault/CookieHandler," Sets (or unsets) the system-wide cookie handler.\n \n Note: non-standard http protocol handlers may ignore this setting.\n\n @param cHandler The HTTP cookie handler, or\n       <code>null</code> to unset.\n @throws SecurityException\n       If a security manager has been installed and it denies\n {@link NetPermission}<tt>("setCookieHandler")</tt>\n @see #getDefault()\n"
15943,method,java/net/CookieHandler/put/URI;Map," Sets all the applicable cookies, examples are response header\n fields that are named Set-Cookie2, present in the response\n headers into a cookie cache.\n\n @param uri a <code>URI</code> where the cookies come from\n @param responseHeaders an immutable map from field names to\n            lists of field values representing the response\n            header fields returned\n @throws	IOException if an I/O error occurs \n @throws  IllegalArgumentException if either argument is null\n @see #get(URI, Map)\n"
15946,method,java/net/ContentHandlerFactory/createContentHandler/String," Creates a new <code>ContentHandler</code> to read an object from\n a <code>URLStreamHandler</code>.\n\n @param   mimetype   the MIME type for which a content handler is desired.\n\n @return  a new <code>ContentHandler</code> to read an object from a\n          <code>URLStreamHandler</code>.\n @see     java.net.ContentHandler\n @see     java.net.URLStreamHandler\n"
15948,method,java/net/ContentHandler/getContent/URLConnection,"\n Given a URL connect stream positioned at the beginning of the \n representation of an object, this method reads that stream and \n creates an object from it. \n\n @param      urlc   a URL connection.\n @return     the object read by the <code>ContentHandler</code>.\n @exception  IOException  if an I/O error occurs while reading the object.\n"
15951,class,java/net/ConnectException," Signals that an error occurred while attempting to connect a\n socket to a remote address and port.  Typically, the connection\n was refused remotely (e.g., no process is listening on the \n remote address/port).\n\n @since   JDK1.1\n"
15952,method,java/net/ConnectException/ConnectException/String," Constructs a new ConnectException with the specified detail \n message as to why the connect error occurred.\n A detail message is a String that gives a specific \n description of this error.\n @param msg the detail message\n"
15955,method,java/net/CacheResponse/getHeaders/," Returns the response headers as a Map.\n\n @return An immutable Map from response header field names to\n         lists of field values. The status line has null as its\n         field name.\n @throws IOException if an I/O error occurs\n            while getting the response headers\n"
15956,method,java/net/CacheResponse/getBody/," Returns the response body as an InputStream.\n\n @return an InputStream from which the response body can\n         be accessed\n @throws IOException if an I/O error occurs while\n         getting the response body\n"
15958,class,java/net/CacheRequest," Represents channels for storing resources in the\n ResponseCache. Instances of such a class provide an\n OutputStream object which is called by protocol handlers to\n store the resource data into the cache, and also an abort() method\n which allows a cache store operation to be interrupted and\n abandoned. If an IOException is encountered while reading the\n response or writing to the cache, the current cache store operation\n will be aborted.\n\n @version 1.1, 03/09/22\n @author Yingxian Wang\n @since 1.5\n"
15959,method,java/net/CacheRequest/getBody/," Returns an OutputStream to which the response body can be\n written.\n\n @return an OutputStream to which the response body can\n         be written\n @throws IOException if an I/O error occurs while\n         writing the response body\n"
15962,class,java/net/BindException," Signals that an error occurred while attempting to bind a\n socket to a local address and port.  Typically, the port is\n in use, or the requested local address could not be assigned.\n\n @since   JDK1.1\n"
15963,method,java/net/BindException/BindException/String," Constructs a new BindException with the specified detail \n message as to why the bind error occurred.\n A detail message is a String that gives a specific \n description of this error.\n @param msg the detail message\n"
15966,method,java/net/Authenticator/setDefault/Authenticator," Sets the authenticator that will be used by the networking code\n when a proxy or an HTTP server asks for authentication.\n <p>\n First, if there is a security manager, its <code>checkPermission</code> \n method is called with a \n <code>NetPermission("setDefaultAuthenticator")</code> permission.\n This may result in a java.lang.SecurityException. \n\n @param	a	The authenticator to be set. If a is <code>null</code> then\n			any previously set authenticator is removed.\n\n @throws SecurityException\n        if a security manager exists and its \n        <code>checkPermission</code> method doesn't allow \n        setting the default authenticator.\n\n @see SecurityManager#checkPermission\n @see java.net.NetPermission\n"
15967,method,java/net/Authenticator/requestPasswordAuthentication/InetAddress;int;String;String;String," Ask the authenticator that has been registered with the system\n for a password.\n <p>\n First, if there is a security manager, its <code>checkPermission</code> \n method is called with a \n <code>NetPermission("requestPasswordAuthentication")</code> permission.\n This may result in a java.lang.SecurityException. \n\n @param addr The InetAddress of the site requesting authorization,\n             or null if not known.\n @param port the port for the requested connection\n @param protocol The protocol that's requesting the connection\n          ({@link java.net.Authenticator#getRequestingProtocol()})\n @param prompt A prompt string for the user\n @param scheme The authentication scheme\n\n @return The username/password, or null if one can't be gotten.\n\n @throws SecurityException\n        if a security manager exists and its \n        <code>checkPermission</code> method doesn't allow \n        the password authentication request.\n\n @see SecurityManager#checkPermission\n @see java.net.NetPermission\n"
15968,method,java/net/Authenticator/requestPasswordAuthentication/String;InetAddress;int;String;String;String," Ask the authenticator that has been registered with the system\n for a password. This is the preferred method for requesting a password\n because the hostname can be provided in cases where the InetAddress\n is not available.\n <p>\n First, if there is a security manager, its <code>checkPermission</code> \n method is called with a \n <code>NetPermission("requestPasswordAuthentication")</code> permission.\n This may result in a java.lang.SecurityException. \n\n @param host The hostname of the site requesting authentication.\n @param addr The InetAddress of the site requesting authentication,\n             or null if not known. \n @param port the port for the requested connection.\n @param protocol The protocol that's requesting the connection\n          ({@link java.net.Authenticator#getRequestingProtocol()})\n @param prompt A prompt string for the user which identifies the authentication realm.\n @param scheme The authentication scheme\n\n @return The username/password, or null if one can't be gotten.\n\n @throws SecurityException\n        if a security manager exists and its \n        <code>checkPermission</code> method doesn't allow \n        the password authentication request.\n\n @see SecurityManager#checkPermission\n @see java.net.NetPermission\n @since 1.4\n"
15969,method,java/net/Authenticator/requestPasswordAuthentication/String;InetAddress;int;String;String;String;URL;RequestorType," Ask the authenticator that has been registered with the system\n for a password.\n <p>\n First, if there is a security manager, its <code>checkPermission</code> \n method is called with a \n <code>NetPermission("requestPasswordAuthentication")</code> permission.\n This may result in a java.lang.SecurityException. \n\n @param host The hostname of the site requesting authentication.\n @param addr The InetAddress of the site requesting authorization,\n             or null if not known.\n @param port the port for the requested connection\n @param protocol The protocol that's requesting the connection\n          ({@link java.net.Authenticator#getRequestingProtocol()})\n @param prompt A prompt string for the user\n @param scheme The authentication scheme\n @param url The requesting URL that caused the authentication\n @param reqType The type (server or proxy) of the entity requesting\n		    authentication.\n\n @return The username/password, or null if one can't be gotten.\n\n @throws SecurityException\n        if a security manager exists and its \n        <code>checkPermission</code> method doesn't allow \n        the password authentication request.\n\n @see SecurityManager#checkPermission\n @see java.net.NetPermission\n\n @since 1.5\n"
15986,method,java/util/WeakHashMap/size/," Returns the number of key-value mappings in this map.\n This result is a snapshot, and may not reflect unprocessed\n entries that will be removed before next attempted access\n because they are no longer referenced.\n"
15987,method,java/util/WeakHashMap/isEmpty/," Returns <tt>true</tt> if this map contains no key-value mappings.\n This result is a snapshot, and may not reflect unprocessed\n entries that will be removed before next attempted access\n because they are no longer referenced.\n"
15988,method,java/util/WeakHashMap/get/Object," Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.\n\n @see #put(Object, Object)\n"
15992,method,java/util/WeakHashMap/remove/Object," Removes the mapping for a key from this weak hash map if it is present.\n More formally, if this map contains a mapping from key <tt>k</tt> to\n value <tt>v</tt> such that <code>(key==null ?  k==null :\n key.equals(k))</code>, that mapping is removed.  (The map can contain\n at most one such mapping.)\n\n <p>Returns the value to which this map previously associated the key,\n or <tt>null</tt> if the map contained no mapping for the key.  A\n return value of <tt>null</tt> does not <i>necessarily</i> indicate\n that the map contained no mapping for the key; it's also possible\n that the map explicitly mapped the key to <tt>null</tt>.\n\n <p>The map will not contain a mapping for the specified key once the\n call returns.\n\n @param key key whose mapping is to be removed from the map\n @return the previous value associated with <tt>key</tt>, or\n         <tt>null</tt> if there was no mapping for <tt>key</tt>\n"
15993,method,java/util/WeakHashMap/clear/," Removes all of the mappings from this map.\n The map will be empty after this call returns.\n"
16005,method,java/util/Vector/ensureCapacity/int," Increases the capacity of this vector, if necessary, to ensure\n that it can hold at least the number of components specified by\n the minimum capacity argument.\n\n <p>If the current capacity of this vector is less than\n {@code minCapacity}, then its capacity is increased by replacing its\n internal data array, kept in the field {@code elementData}, with a\n larger one.  The size of the new data array will be the old size plus\n {@code capacityIncrement}, unless the value of\n {@code capacityIncrement} is less than or equal to zero, in which case\n the new capacity will be twice the old capacity; but if this new size\n is still smaller than {@code minCapacity}, then the new capacity will\n be {@code minCapacity}.\n\n @param minCapacity the desired minimum capacity\n"
16009,method,java/util/Vector/isEmpty/," Tests if this vector has no components.\n\n @return  {@code true} if and only if this vector has\n          no components, that is, its size is zero;\n          {@code false} otherwise.\n"
16011,method,java/util/Vector/contains/Object," Returns {@code true} if this vector contains the specified element.\n More formally, returns {@code true} if and only if this vector\n contains at least one element {@code e} such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this vector is to be tested\n @return {@code true} if this vector contains the specified element\n"
16034,method,java/util/Vector/clear/," Removes all of the elements from this Vector.  The Vector will\n be empty after this call returns (unless it throws an exception).\n\n @since 1.2\n"
16036,method,java/util/Vector/addAll/Collection," Appends all of the elements in the specified Collection to the end of\n this Vector, in the order that they are returned by the specified\n Collection's Iterator.  The behavior of this operation is undefined if\n the specified Collection is modified while the operation is in progress.\n (This implies that the behavior of this call is undefined if the\n specified Collection is this Vector, and this Vector is nonempty.)\n\n @param c elements to be inserted into this Vector\n @return {@code true} if this Vector changed as a result of the call\n @throws NullPointerException if the specified collection is null\n @since 1.2\n"
16037,method,java/util/Vector/removeAll/Collection," Removes from this Vector all of its elements that are contained in the\n specified Collection.\n\n @param c a collection of elements to be removed from the Vector\n @return true if this Vector changed as a result of the call\n @throws ClassCastException if the types of one or more elements\n         in this vector are incompatible with the specified\n         collection (optional)\n @throws NullPointerException if this vector contains one or more null\n         elements and the specified collection does not support null\n         elements (optional), or if the specified collection is null\n @since 1.2\n"
16038,method,java/util/Vector/retainAll/Collection," Retains only the elements in this Vector that are contained in the\n specified Collection.  In other words, removes from this Vector all\n of its elements that are not contained in the specified Collection.\n\n @param c a collection of elements to be retained in this Vector\n          (all other elements are removed)\n @return true if this Vector changed as a result of the call\n @throws ClassCastException if the types of one or more elements\n         in this vector are incompatible with the specified\n         collection (optional)\n @throws NullPointerException if this vector contains one or more null\n         elements and the specified collection does not support null\n         elements (optional), or if the specified collection is null\n @since 1.2\n"
16039,method,java/util/Vector/addAll/int;Collection," Inserts all of the elements in the specified Collection into this\n Vector at the specified position.  Shifts the element currently at\n that position (if any) and any subsequent elements to the right\n (increases their indices).  The new elements will appear in the Vector\n in the order that they are returned by the specified Collection's\n iterator.\n\n @param index index at which to insert the first element from the\n              specified collection\n @param c elements to be inserted into this Vector\n @return {@code true} if this Vector changed as a result of the call\n @throws ArrayIndexOutOfBoundsException if the index is out of range\n         ({@code index < 0 || index > size()})\n @throws NullPointerException if the specified collection is null\n @since 1.2\n"
16040,method,java/util/Vector/equals/Object," Compares the specified Object with this Vector for equality.  Returns\n true if and only if the specified Object is also a List, both Lists\n have the same size, and all corresponding pairs of elements in the two\n Lists are <em>equal</em>.  (Two elements {@code e1} and\n {@code e2} are <em>equal</em> if {@code (e1==null ? e2==null :\n e1.equals(e2))}.)  In other words, two Lists are defined to be\n equal if they contain the same elements in the same order.\n\n @param o the Object to be compared for equality with this Vector\n @return true if the specified Object is equal to this Vector\n"
16043,method,java/util/Vector/subList/int;int," Returns a view of the portion of this List between fromIndex,\n inclusive, and toIndex, exclusive.  (If fromIndex and toIndex are\n equal, the returned List is empty.)  The returned List is backed by this\n List, so changes in the returned List are reflected in this List, and\n vice-versa.  The returned List supports all of the optional List\n operations supported by this List.\n\n <p>This method eliminates the need for explicit range operations (of\n the sort that commonly exist for arrays).   Any operation that expects\n a List can be used as a range operation by operating on a subList view\n instead of a whole List.  For example, the following idiom\n removes a range of elements from a List:\n <pre>\n	    list.subList(from, to).clear();\n </pre>\n Similar idioms may be constructed for indexOf and lastIndexOf,\n and all of the algorithms in the Collections class can be applied to\n a subList.\n\n <p>The semantics of the List returned by this method become undefined if\n the backing list (i.e., this List) is <i>structurally modified</i> in\n any way other than via the returned List.  (Structural modifications are\n those that change the size of the List, or otherwise perturb it in such\n a fashion that iterations in progress may yield incorrect results.)\n\n @param fromIndex low endpoint (inclusive) of the subList\n @param toIndex high endpoint (exclusive) of the subList\n @return a view of the specified range within this List\n @throws IndexOutOfBoundsException if an endpoint index value is out of range\n         {@code (fromIndex < 0 || toIndex > size)}\n @throws IllegalArgumentException if the endpoint indices are out of order\n	       {@code (fromIndex > toIndex)}\n"
16044,method,java/util/Vector/removeRange/int;int," Removes from this List all of the elements whose index is between\n fromIndex, inclusive and toIndex, exclusive.  Shifts any succeeding\n elements to the left (reduces their index).\n This call shortens the ArrayList by (toIndex - fromIndex) elements.  (If\n toIndex==fromIndex, this operation has no effect.)\n\n @param fromIndex index of first element to be removed\n @param toIndex index after last element to be removed\n"
16060,class,java/util/UUID," \n A class that represents an immutable universally unique identifier (UUID). \n A UUID represents a 128-bit value.\n\n <p>There exist different variants of these global identifiers. The methods\n of this class are for manipulating the Leach-Salz variant, although the\n constructors allow the creation of any variant of UUID (described below).\n \n <p>The layout of a variant 2 (Leach-Salz) UUID is as follows:\n\n The most significant long consists of the following unsigned fields:\n <pre>\n 0xFFFFFFFF00000000 time_low\n 0x00000000FFFF0000 time_mid\n 0x000000000000F000 version\n 0x0000000000000FFF time_hi\n </pre>\n The least significant long consists of the following unsigned fields:\n <pre>\n 0xC000000000000000 variant\n 0x3FFF000000000000 clock_seq\n 0x0000FFFFFFFFFFFF node\n </pre>\n\n <p>The variant field contains a value which identifies the layout of\n the <tt>UUID</tt>. The bit layout described above is valid only for\n a <tt>UUID</tt> with a variant value of 2, which indicates the\n Leach-Salz variant.\n\n <p>The version field holds a value that describes the type of this\n <tt>UUID</tt>. There are four different basic types of UUIDs: time-based,\n DCE security, name-based, and randomly generated UUIDs. These types\n have a version value of 1, 2, 3 and 4, respectively.\n \n <p>For more information including algorithms used to create <tt>UUID</tt>s,\n see <a href="http://www.ietf.org/rfc/rfc4122.txt">\n <i>RFC&nbsp;4122: A Universally Unique IDentifier (UUID) URN\n Namespace</i></a>, section 4.2 &quot;Algorithms for Creating a Time-Based\n UUID&quot;.\n\n @version 1.19, 03/23/10\n @since   1.5\n"
16061,method,java/util/UUID/randomUUID/," Static factory to retrieve a type 4 (pseudo randomly generated) UUID.\n\n The <code>UUID</code> is generated using a cryptographically strong\n pseudo random number generator.\n\n @return  a randomly generated <tt>UUID</tt>.\n"
16068,method,java/util/UUID/timestamp/," The timestamp value associated with this UUID.\n\n <p>The 60 bit timestamp value is constructed from the time_low,\n time_mid, and time_hi fields of this <tt>UUID</tt>. The resulting \n timestamp is measured in 100-nanosecond units since midnight, \n October 15, 1582 UTC.<p>\n\n The timestamp value is only meaningful in a time-based UUID, which\n has version type 1. If this <tt>UUID</tt> is not a time-based UUID then\n this method throws UnsupportedOperationException.\n \n @throws UnsupportedOperationException if this UUID is not a \n         version 1 UUID.\n"
16069,method,java/util/UUID/clockSequence/," The clock sequence value associated with this UUID.\n\n <p>The 14 bit clock sequence value is constructed from the clock\n sequence field of this UUID. The clock sequence field is used to\n guarantee temporal uniqueness in a time-based UUID.<p>\n\n The  clockSequence value is only meaningful in a time-based UUID, which\n has version type 1. If this UUID is not a time-based UUID then\n this method throws UnsupportedOperationException.\n \n @return  the clock sequence of this <tt>UUID</tt>.\n @throws UnsupportedOperationException if this UUID is not a \n         version 1 UUID.\n"
16070,method,java/util/UUID/node/," The node value associated with this UUID.\n\n <p>The 48 bit node value is constructed from the node field of\n this UUID. This field is intended to hold the IEEE 802 address \n of the machine that generated this UUID to guarantee spatial\n uniqueness.<p>\n\n The node value is only meaningful in a time-based UUID, which\n has version type 1. If this UUID is not a time-based UUID then\n this method throws UnsupportedOperationException.\n \n @return  the node value of this <tt>UUID</tt>.\n @throws UnsupportedOperationException if this UUID is not a\n         version 1 UUID.\n"
16073,method,java/util/UUID/equals/Object," Compares this object to the specified object.  The result is\n <tt>true</tt> if and only if the argument is not\n <tt>null</tt>, is a <tt>UUID</tt> object, has the same variant,\n and contains the same value, bit for bit, as this <tt>UUID</tt>.\n\n @param   obj   the object to compare with.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n"
16082,method,java/util/TreeSet/contains/Object," Returns {@code true} if this set contains the specified element.\n More formally, returns {@code true} if and only if this set\n contains an element {@code e} such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o object to be checked for containment in this set\n @return {@code true} if this set contains the specified element\n @throws ClassCastException if the specified object cannot be compared\n         with the elements currently in the set\n @throws NullPointerException if the specified element is null\n         and this set uses natural ordering, or its comparator\n         does not permit null elements\n"
16083,method,java/util/TreeSet/add/Object," Adds the specified element to this set if it is not already present.\n More formally, adds the specified element {@code e} to this set if\n the set contains no element {@code e2} such that\n <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns {@code false}.\n\n @param e element to be added to this set\n @return {@code true} if this set did not already contain the specified\n         element\n @throws ClassCastException if the specified object cannot be compared\n         with the elements currently in this set\n @throws NullPointerException if the specified element is null\n         and this set uses natural ordering, or its comparator\n         does not permit null elements\n"
16084,method,java/util/TreeSet/remove/Object," Removes the specified element from this set if it is present.\n More formally, removes an element {@code e} such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,\n if this set contains such an element.  Returns {@code true} if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)\n\n @param o object to be removed from this set, if present\n @return {@code true} if this set contained the specified element\n @throws ClassCastException if the specified object cannot be compared\n         with the elements currently in this set\n @throws NullPointerException if the specified element is null\n         and this set uses natural ordering, or its comparator\n         does not permit null elements\n"
16085,method,java/util/TreeSet/clear/," Removes all of the elements from this set.\n The set will be empty after this call returns.\n"
16086,method,java/util/TreeSet/addAll/Collection," Adds all of the elements in the specified collection to this set.\n\n @param c collection containing elements to be added to this set\n @return {@code true} if this set changed as a result of the call\n @throws ClassCastException if the elements provided cannot be compared\n         with the elements currently in the set\n @throws NullPointerException if the specified collection is null or\n         if any element is null and this set uses natural ordering, or\n         its comparator does not permit null elements\n"
16087,method,java/util/TreeSet/subSet/Object;boolean;Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromElement} or {@code toElement}\n         is null and this set uses natural ordering, or its comparator\n         does not permit null elements\n @throws IllegalArgumentException {@inheritDoc}\n @since 1.6\n"
16088,method,java/util/TreeSet/headSet/Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code toElement} is null and\n         this set uses natural ordering, or its comparator does\n         not permit null elements\n @throws IllegalArgumentException {@inheritDoc}\n @since 1.6\n"
16089,method,java/util/TreeSet/tailSet/Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromElement} is null and\n         this set uses natural ordering, or its comparator does\n         not permit null elements\n @throws IllegalArgumentException {@inheritDoc}\n @since 1.6\n"
16090,method,java/util/TreeSet/subSet/Object;Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromElement} or\n         {@code toElement} is null and this set uses natural ordering,\n         or its comparator does not permit null elements\n @throws IllegalArgumentException {@inheritDoc}\n"
16091,method,java/util/TreeSet/headSet/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code toElement} is null\n         and this set uses natural ordering, or its comparator does\n         not permit null elements\n @throws IllegalArgumentException {@inheritDoc}\n"
16092,method,java/util/TreeSet/tailSet/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromElement} is null\n         and this set uses natural ordering, or its comparator does\n         not permit null elements\n @throws IllegalArgumentException {@inheritDoc}\n"
16094,method,java/util/TreeSet/first/," @throws NoSuchElementException {@inheritDoc}\n"
16095,method,java/util/TreeSet/last/," @throws NoSuchElementException {@inheritDoc}\n"
16096,method,java/util/TreeSet/lower/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n         and this set uses natural ordering, or its comparator\n         does not permit null elements\n @since 1.6\n"
16097,method,java/util/TreeSet/floor/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n         and this set uses natural ordering, or its comparator\n         does not permit null elements\n @since 1.6\n"
16098,method,java/util/TreeSet/ceiling/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n         and this set uses natural ordering, or its comparator\n         does not permit null elements\n @since 1.6\n"
16099,method,java/util/TreeSet/higher/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n         and this set uses natural ordering, or its comparator\n         does not permit null elements\n @since 1.6\n"
16111,method,java/util/TreeMap/get/Object," Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code key} compares\n equal to {@code k} according to the map's ordering, then this\n method returns {@code v}; otherwise it returns {@code null}.\n (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.\n\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n"
16113,method,java/util/TreeMap/firstKey/," @throws NoSuchElementException {@inheritDoc}\n"
16114,method,java/util/TreeMap/lastKey/," @throws NoSuchElementException {@inheritDoc}\n"
16117,method,java/util/TreeMap/remove/Object," Removes the mapping for this key from this TreeMap if present.\n\n @param  key key for which mapping should be removed\n @return the previous value associated with <tt>key</tt>, or\n         <tt>null</tt> if there was no mapping for <tt>key</tt>.\n         (A <tt>null</tt> return can also indicate that the map\n         previously associated <tt>null</tt> with <tt>key</tt>.)\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n"
16124,method,java/util/TreeMap/lowerEntry/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @since 1.6\n"
16125,method,java/util/TreeMap/lowerKey/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @since 1.6\n"
16126,method,java/util/TreeMap/floorEntry/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @since 1.6\n"
16127,method,java/util/TreeMap/floorKey/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @since 1.6\n"
16128,method,java/util/TreeMap/ceilingEntry/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @since 1.6\n"
16129,method,java/util/TreeMap/ceilingKey/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @since 1.6\n"
16130,method,java/util/TreeMap/higherEntry/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @since 1.6\n"
16131,method,java/util/TreeMap/higherKey/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @since 1.6\n"
16138,method,java/util/TreeMap/subMap/Object;boolean;Object;boolean," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException if <tt>fromKey</tt> or <tt>toKey</tt> is\n         null and this map uses natural ordering, or its comparator\n         does not permit null keys\n @throws IllegalArgumentException {@inheritDoc}\n @since 1.6\n"
16139,method,java/util/TreeMap/headMap/Object;boolean," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException if <tt>toKey</tt> is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @throws IllegalArgumentException {@inheritDoc}\n @since 1.6\n"
16140,method,java/util/TreeMap/tailMap/Object;boolean," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException if <tt>fromKey</tt> is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @throws IllegalArgumentException {@inheritDoc}\n @since 1.6\n"
16141,method,java/util/TreeMap/subMap/Object;Object," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException if <tt>fromKey</tt> or <tt>toKey</tt> is\n         null and this map uses natural ordering, or its comparator\n         does not permit null keys\n @throws IllegalArgumentException {@inheritDoc}\n"
16142,method,java/util/TreeMap/headMap/Object," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException if <tt>toKey</tt> is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @throws IllegalArgumentException {@inheritDoc}\n"
16143,method,java/util/TreeMap/tailMap/Object," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException if <tt>fromKey</tt> is null\n         and this map uses natural ordering, or its comparator\n         does not permit null keys\n @throws IllegalArgumentException {@inheritDoc}\n"
16148,class,java/util/TooManyListenersException," <p>\n The <code> TooManyListenersException </code> Exception is used as part of\n the Java Event model to annotate and implement a unicast special case of\n a multicast Event Source.\n </p>\n <p>\n The presence of a "throws TooManyListenersException" clause on any given\n concrete implementation of the normally multicast "void addXyzEventListener"\n event listener registration pattern is used to annotate that interface as\n implementing a unicast Listener special case, that is, that one and only\n one Listener may be registered on the particular event listener source\n concurrently.\n </p>\n\n @see java.util.EventObject\n @see java.util.EventListener\n \n @version 1.15 10/03/23\n @author Laurence P. G. Cable\n @since  JDK1.1\n"
16153,method,java/util/TimerTask/cancel/," Cancels this timer task.  If the task has been scheduled for one-time\n execution and has not yet run, or has not yet been scheduled, it will\n never run.  If the task has been scheduled for repeated execution, it\n will never run again.  (If the task is running when this call occurs,\n the task will run to completion, but will never run again.)\n\n <p>Note that calling this method from within the <tt>run</tt> method of\n a repeating timer task absolutely guarantees that the timer task will\n not run again.\n\n <p>This method may be called repeatedly; the second and subsequent \n calls have no effect.\n\n @return true if this task is scheduled for one-time execution and has\n         not yet run, or this task is scheduled for repeated execution.\n         Returns false if the task was scheduled for one-time execution\n         and has already run, or if the task was never scheduled, or if\n         the task was already cancelled.  (Loosely speaking, this method\n         returns <tt>true</tt> if it prevents one or more scheduled\n         executions from taking place.)\n"
16154,method,java/util/TimerTask/scheduledExecutionTime/," Returns the <i>scheduled</i> execution time of the most recent\n <i>actual</i> execution of this task.  (If this method is invoked\n while task execution is in progress, the return value is the scheduled\n execution time of the ongoing task execution.)\n\n <p>This method is typically invoked from within a task's run method, to\n determine whether the current execution of the task is sufficiently\n timely to warrant performing the scheduled activity:\n <pre>\n   public void run() {\n       if (System.currentTimeMillis() - scheduledExecutionTime() >=\n           MAX_TARDINESS)\n               return;  // Too late; skip this execution.\n       // Perform the task\n   }\n </pre>\n This method is typically <i>not</i> used in conjunction with\n <i>fixed-delay execution</i> repeating tasks, as their scheduled\n execution times are allowed to drift over time, and so are not terribly\n significant.\n\n @return the time at which the most recent execution of this task was\n         scheduled to occur, in the format returned by Date.getTime().\n         The return value is undefined if the task has yet to commence\n         its first execution.\n @see Date#getTime()\n"
16156,class,java/util/Timer," A facility for threads to schedule tasks for future execution in a\n background thread.  Tasks may be scheduled for one-time execution, or for\n repeated execution at regular intervals.\n\n <p>Corresponding to each <tt>Timer</tt> object is a single background\n thread that is used to execute all of the timer's tasks, sequentially.\n Timer tasks should complete quickly.  If a timer task takes excessive time\n to complete, it "hogs" the timer's task execution thread.  This can, in\n turn, delay the execution of subsequent tasks, which may "bunch up" and\n execute in rapid succession when (and if) the offending task finally\n completes.\n\n <p>After the last live reference to a <tt>Timer</tt> object goes away\n <i>and</i> all outstanding tasks have completed execution, the timer's task\n execution thread terminates gracefully (and becomes subject to garbage\n collection).  However, this can take arbitrarily long to occur.  By\n default, the task execution thread does not run as a <i>daemon thread</i>,\n so it is capable of keeping an application from terminating.  If a caller\n wants to terminate a timer's task execution thread rapidly, the caller\n should invoke the timer's <tt>cancel</tt> method.\n\n <p>If the timer's task execution thread terminates unexpectedly, for\n example, because its <tt>stop</tt> method is invoked, any further\n attempt to schedule a task on the timer will result in an\n <tt>IllegalStateException</tt>, as if the timer's <tt>cancel</tt>\n method had been invoked.\n\n <p>This class is thread-safe: multiple threads can share a single\n <tt>Timer</tt> object without the need for external synchronization.\n\n <p>This class does <i>not</i> offer real-time guarantees: it schedules\n tasks using the <tt>Object.wait(long)</tt> method.\n\n <p>Implementation note: This class scales to large numbers of concurrently\n scheduled tasks (thousands should present no problem).  Internally,\n it uses a binary heap to represent its task queue, so the cost to schedule\n a task is O(log n), where n is the number of concurrently scheduled tasks.\n\n <p>Implementation note: All constructors start a timer thread.\n\n @author  Josh Bloch\n @version 1.20, 03/23/10\n @see     TimerTask\n @see     Object#wait(long)\n @since   1.3\n"
16157,method,java/util/Timer/schedule/TimerTask;long," Schedules the specified task for execution after the specified delay.\n\n @param task  task to be scheduled.\n @param delay delay in milliseconds before task is to be executed.\n @throws IllegalArgumentException if <tt>delay</tt> is negative, or\n         <tt>delay + System.currentTimeMillis()</tt> is negative.\n @throws IllegalStateException if task was already scheduled or\n         cancelled, or timer was cancelled.\n"
16158,method,java/util/Timer/schedule/TimerTask;Date," Schedules the specified task for execution at the specified time.  If\n the time is in the past, the task is scheduled for immediate execution.\n\n @param task task to be scheduled.\n @param time time at which task is to be executed.\n @throws IllegalArgumentException if <tt>time.getTime()</tt> is negative.\n @throws IllegalStateException if task was already scheduled or\n         cancelled, timer was cancelled, or timer thread terminated.\n"
16161,method,java/util/Timer/scheduleAtFixedRate/TimerTask;long;long," Schedules the specified task for repeated <i>fixed-rate execution</i>,\n beginning after the specified delay.  Subsequent executions take place\n at approximately regular intervals, separated by the specified period.\n\n <p>In fixed-rate execution, each execution is scheduled relative to the\n scheduled execution time of the initial execution.  If an execution is\n delayed for any reason (such as garbage collection or other background\n activity), two or more executions will occur in rapid succession to\n "catch up."  In the long run, the frequency of execution will be\n exactly the reciprocal of the specified period (assuming the system\n clock underlying <tt>Object.wait(long)</tt> is accurate).\n\n <p>Fixed-rate execution is appropriate for recurring activities that\n are sensitive to <i>absolute</i> time, such as ringing a chime every\n hour on the hour, or running scheduled maintenance every day at a\n particular time.  It is also appropriate for recurring activities\n where the total time to perform a fixed number of executions is\n important, such as a countdown timer that ticks once every second for\n ten seconds.  Finally, fixed-rate execution is appropriate for\n scheduling multiple repeating timer tasks that must remain synchronized\n with respect to one another.\n\n @param task   task to be scheduled.\n @param delay  delay in milliseconds before task is to be executed.\n @param period time in milliseconds between successive task executions.\n @throws IllegalArgumentException if <tt>delay</tt> is negative, or\n         <tt>delay + System.currentTimeMillis()</tt> is negative.\n @throws IllegalStateException if task was already scheduled or\n         cancelled, timer was cancelled, or timer thread terminated.\n"
16162,method,java/util/Timer/scheduleAtFixedRate/TimerTask;Date;long," Schedules the specified task for repeated <i>fixed-rate execution</i>,\n beginning at the specified time. Subsequent executions take place at\n approximately regular intervals, separated by the specified period.\n\n <p>In fixed-rate execution, each execution is scheduled relative to the\n scheduled execution time of the initial execution.  If an execution is\n delayed for any reason (such as garbage collection or other background\n activity), two or more executions will occur in rapid succession to\n "catch up."  In the long run, the frequency of execution will be\n exactly the reciprocal of the specified period (assuming the system\n clock underlying <tt>Object.wait(long)</tt> is accurate).\n\n <p>Fixed-rate execution is appropriate for recurring activities that\n are sensitive to <i>absolute</i> time, such as ringing a chime every\n hour on the hour, or running scheduled maintenance every day at a\n particular time.  It is also appropriate for recurring activities\n where the total time to perform a fixed number of executions is\n important, such as a countdown timer that ticks once every second for\n ten seconds.  Finally, fixed-rate execution is appropriate for\n scheduling multiple repeating timer tasks that must remain synchronized\n with respect to one another.\n\n @param task   task to be scheduled.\n @param firstTime First time at which task is to be executed.\n @param period time in milliseconds between successive task executions.\n @throws IllegalArgumentException if <tt>time.getTime()</tt> is negative.\n @throws IllegalStateException if task was already scheduled or\n         cancelled, timer was cancelled, or timer thread terminated.\n"
16163,method,java/util/Timer/cancel/," Terminates this timer, discarding any currently scheduled tasks.\n Does not interfere with a currently executing task (if it exists).\n Once a timer has been terminated, its execution thread terminates\n gracefully, and no more tasks may be scheduled on it.\n\n <p>Note that calling this method from within the run method of a\n timer task that was invoked by this timer absolutely guarantees that\n the ongoing task execution is the last task execution that will ever\n be performed by this timer.\n\n <p>This method may be called repeatedly; the second and subsequent\n calls have no effect.\n"
16164,method,java/util/Timer/purge/," Removes all cancelled tasks from this timer's task queue.  <i>Calling\n this method has no effect on the behavior of the timer</i>, but\n eliminates the references to the cancelled tasks from the queue.\n If there are no external references to these tasks, they become\n eligible for garbage collection.\n\n <p>Most programs will have no need to call this method.\n It is designed for use by the rare application that cancels a large\n number of tasks.  Calling this method trades time for space: the\n runtime of the method may be proportional to n + c log n, where n\n is the number of tasks in the queue and c is the number of cancelled\n tasks.\n\n <p>Note that it is permissible to call this method from within a\n a task scheduled on this timer.\n\n @return the number of tasks removed from the queue.\n @since 1.5\n"
16165,method,java/util/Timer/Timer/," Creates a new timer.  The associated thread does <i>not</i> run as\n a daemon.\n\n @see Thread\n @see #cancel()\n"
16166,method,java/util/Timer/Timer/boolean," Creates a new timer whose associated thread may be specified to\n run as a daemon.  A daemon thread is called for if the timer will\n be used to schedule repeating "maintenance activities", which must\n be performed as long as the application is running, but should not\n prolong the lifetime of the application.\n\n @param isDaemon true if the associated thread should run as a daemon.\n\n @see Thread\n @see #cancel()\n"
16167,method,java/util/Timer/Timer/String," Creates a new timer whose associated thread has the specified name.\n The associated thread does <i>not</i> run as a daemon.\n\n @param name the name of the associated thread\n @throws NullPointerException if name is null\n @see Thread#getName()\n @see Thread#isDaemon()\n @since 1.5\n"
16168,method,java/util/Timer/Timer/String;boolean," Creates a new timer whose associated thread has the specified name,\n and may be specified to run as a daemon.\n\n @param name the name of the associated thread\n @param isDaemon true if the associated thread should run as a daemon\n @throws NullPointerException if name is null\n @see Thread#getName()\n @see Thread#isDaemon()\n @since 1.5\n"
16170,method,java/util/TimeZone/getOffset/int;int;int;int;int;int," Gets the time zone offset, for current date, modified in case of\n daylight savings. This is the offset to add to UTC to get local time.\n <p>\n This method returns a historically correct offset if an\n underlying <code>TimeZone</code> implementation subclass\n supports historical Daylight Saving Time schedule and GMT\n offset changes.\n\n @param era the era of the given date.\n @param year the year in the given date.\n @param month the month in the given date.\n Month is 0-based. e.g., 0 for January.\n @param day the day-in-month of the given date.\n @param dayOfWeek the day-of-week of the given date.\n @param milliseconds the milliseconds in day in <em>standard</em>\n local time.\n\n @return the offset in milliseconds to add to GMT to get local time.\n\n @see Calendar#ZONE_OFFSET\n @see Calendar#DST_OFFSET\n"
16171,method,java/util/TimeZone/getOffset/long," Returns the offset of this time zone from UTC at the specified\n date. If Daylight Saving Time is in effect at the specified\n date, the offset value is adjusted with the amount of daylight\n saving.\n <p>\n This method returns a historically correct offset value if an\n underlying TimeZone implementation subclass supports historical\n Daylight Saving Time schedule and GMT offset changes.\n\n @param date the date represented in milliseconds since January 1, 1970 00:00:00 GMT\n @return the amount of time in milliseconds to add to UTC to get local time.\n\n @see Calendar#ZONE_OFFSET\n @see Calendar#DST_OFFSET\n @since 1.4\n"
16172,method,java/util/TimeZone/setRawOffset/int," Sets the base time zone offset to GMT.\n This is the offset to add to UTC to get local time.\n <p>\n If an underlying <code>TimeZone</code> implementation subclass\n supports historical GMT offset changes, the specified GMT\n offset is set as the latest GMT offset and the difference from\n the known latest GMT offset value is used to adjust all\n historical GMT offset values.\n\n @param offsetMillis the given base time zone offset to GMT.\n"
16173,method,java/util/TimeZone/getRawOffset/," Returns the amount of time in milliseconds to add to UTC to get\n standard time in this time zone. Because this value is not\n affected by daylight saving time, it is called <I>raw\n offset</I>.\n <p>\n If an underlying <code>TimeZone</code> implementation subclass\n supports historical GMT offset changes, the method returns the\n raw offset value of the current date. In Honolulu, for example,\n its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and\n this method always returns -36000000 milliseconds (i.e., -10\n hours).\n\n @return the amount of raw offset time in milliseconds to add to UTC.\n @see Calendar#ZONE_OFFSET\n"
16180,method,java/util/TimeZone/getDSTSavings/," Returns the amount of time to be added to local standard time\n to get local wall clock time.\n <p>\n The default implementation always returns 3600000 milliseconds\n (i.e., one hour) if this time zone observes Daylight Saving\n Time. Otherwise, 0 (zero) is returned.\n <p>\n If an underlying TimeZone implementation subclass supports\n historical Daylight Saving Time changes, this method returns\n the known latest daylight saving value.\n\n @return the amount of saving time in milliseconds\n @since 1.4\n"
16181,method,java/util/TimeZone/useDaylightTime/," Queries if this time zone uses daylight savings time.\n <p>\n If an underlying <code>TimeZone</code> implementation subclass\n supports historical Daylight Saving Time schedule changes, the\n method refers to the latest Daylight Saving Time schedule\n information.\n\n @return true if this time zone uses daylight savings time,\n false, otherwise.\n"
16186,method,java/util/TimeZone/getDefault/," Gets the default <code>TimeZone</code> for this host.\n The source of the default <code>TimeZone</code> \n may vary with implementation.\n @return a default <code>TimeZone</code>.\n @see #setDefault\n"
16188,method,java/util/TimeZone/hasSameRules/TimeZone," Returns true if this zone has the same rule and offset as another zone.\n That is, if this zone differs only in ID, if at all.  Returns false\n if the other zone is null.\n @param other the <code>TimeZone</code> object to be compared with\n @return true if the other zone is not null and is the same as this one,\n with the possible exception of the ID\n @since 1.2\n"
16190,method,java/util/TimeZone/TimeZone/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
16194,method,java/util/StringTokenizer/hasMoreTokens/," Tests if there are more tokens available from this tokenizer's string. \n If this method returns <tt>true</tt>, then a subsequent call to \n <tt>nextToken</tt> with no argument will successfully return a token.\n\n @return  <code>true</code> if and only if there is at least one token \n          in the string after the current position; <code>false</code> \n          otherwise.\n"
16196,method,java/util/StringTokenizer/nextToken/String," Returns the next token in this string tokenizer's string. First, \n the set of characters considered to be delimiters by this \n <tt>StringTokenizer</tt> object is changed to be the characters in \n the string <tt>delim</tt>. Then the next token in the string\n after the current position is returned. The current position is \n advanced beyond the recognized token.  The new delimiter set \n remains the default after this call. \n\n @param      delim   the new delimiters.\n @return     the next token, after switching to the new delimiter set.\n @exception  NoSuchElementException  if there are no more tokens in this\n               tokenizer's string.\n @exception NullPointerException if delim is <CODE>null</CODE>\n"
16199,method,java/util/StringTokenizer/countTokens/," Calculates the number of times that this tokenizer's \n <code>nextToken</code> method can be called before it generates an \n exception. The current position is not advanced.\n\n @return  the number of tokens remaining in the string using the current\n          delimiter set.\n @see     java.util.StringTokenizer#nextToken()\n"
16200,method,java/util/StringTokenizer/StringTokenizer/String;String;boolean," Constructs a string tokenizer for the specified string. All  \n characters in the <code>delim</code> argument are the delimiters \n for separating tokens. \n <p>\n If the <code>returnDelims</code> flag is <code>true</code>, then \n the delimiter characters are also returned as tokens. Each \n delimiter is returned as a string of length one. If the flag is \n <code>false</code>, the delimiter characters are skipped and only \n serve as separators between tokens. \n <p>\n Note that if <tt>delim</tt> is <tt>null</tt>, this constructor does\n not throw an exception. However, trying to invoke other methods on the\n resulting <tt>StringTokenizer</tt> may result in a \n <tt>NullPointerException</tt>.\n\n @param   str            a string to be parsed.\n @param   delim          the delimiters.\n @param   returnDelims   flag indicating whether to return the delimiters\n                         as tokens.\n @exception NullPointerException if str is <CODE>null</CODE>\n"
16201,method,java/util/StringTokenizer/StringTokenizer/String;String," Constructs a string tokenizer for the specified string. The \n characters in the <code>delim</code> argument are the delimiters \n for separating tokens. Delimiter characters themselves will not \n be treated as tokens.\n <p>\n Note that if <tt>delim</tt> is <tt>null</tt>, this constructor does\n not throw an exception. However, trying to invoke other methods on the\n resulting <tt>StringTokenizer</tt> may result in a\n <tt>NullPointerException</tt>.\n\n @param   str     a string to be parsed.\n @param   delim   the delimiters.\n @exception NullPointerException if str is <CODE>null</CODE>\n"
16207,method,java/util/Stack/empty/," Tests if this stack is empty.\n\n @return  <code>true</code> if and only if this stack contains\n          no items; <code>false</code> otherwise.\n"
16208,method,java/util/Stack/search/Object," Returns the 1-based position where an object is on this stack.\n If the object <tt>o</tt> occurs as an item in this stack, this\n method returns the distance from the top of the stack of the\n occurrence nearest the top of the stack; the topmost item on the\n stack is considered to be at distance <tt>1</tt>. The <tt>equals</tt>\n method is used to compare <tt>o</tt> to the\n items in this stack.\n\n @param   o   the desired object.\n @return  the 1-based position from the top of the stack where\n          the object is located; the return value <code>-1</code>\n          indicates that the object is not on the stack.\n"
16227,class,java/util/SimpleTimeZone," <code>SimpleTimeZone</code> is a concrete subclass of <code>TimeZone</code>\n that represents a time zone for use with a Gregorian calendar.\n The class holds an offset from GMT, called <em>raw offset</em>, and start\n and end rules for a daylight saving time schedule.  Since it only holds\n single values for each, it cannot handle historical changes in the offset\n from GMT and the daylight saving schedule, except that the {@link\n #setStartYear setStartYear} method can specify the year when the daylight\n saving time schedule starts in effect.\n <p>\n To construct a <code>SimpleTimeZone</code> with a daylight saving time\n schedule, the schedule can be described with a set of rules,\n <em>start-rule</em> and <em>end-rule</em>. A day when daylight saving time\n starts or ends is specified by a combination of <em>month</em>,\n <em>day-of-month</em>, and <em>day-of-week</em> values. The <em>month</em>\n value is represented by a Calendar {@link Calendar#MONTH MONTH} field\n value, such as {@link Calendar#MARCH}. The <em>day-of-week</em> value is\n represented by a Calendar {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value,\n such as {@link Calendar#SUNDAY SUNDAY}. The meanings of value combinations\n are as follows.\n\n <ul>\n <li><b>Exact day of month</b><br>\n To specify an exact day of month, set the <em>month</em> and\n <em>day-of-month</em> to an exact value, and <em>day-of-week</em> to zero. For\n example, to specify March 1, set the <em>month</em> to {@link Calendar#MARCH\n MARCH}, <em>day-of-month</em> to 1, and <em>day-of-week</em> to 0.</li>\n\n <li><b>Day of week on or after day of month</b><br>\n To specify a day of week on or after an exact day of month, set the\n <em>month</em> to an exact month value, <em>day-of-month</em> to the day on\n or after which the rule is applied, and <em>day-of-week</em> to a negative {@link\n Calendar#DAY_OF_WEEK DAY_OF_WEEK} field value. For example, to specify the\n second Sunday of April, set <em>month</em> to {@link Calendar#APRIL APRIL},\n <em>day-of-month</em> to 8, and <em>day-of-week</em> to <code>-</code>{@link\n Calendar#SUNDAY SUNDAY}.</li>\n\n <li><b>Day of week on or before day of month</b><br>\n To specify a day of the week on or before an exact day of the month, set\n <em>day-of-month</em> and <em>day-of-week</em> to a negative value. For\n example, to specify the last Wednesday on or before the 21st of March, set\n <em>month</em> to {@link Calendar#MARCH MARCH}, <em>day-of-month</em> is -21\n and <em>day-of-week</em> is <code>-</code>{@link Calendar#WEDNESDAY WEDNESDAY}. </li>\n\n <li><b>Last day-of-week of month</b><br>\n To specify, the last day-of-week of the month, set <em>day-of-week</em> to a\n {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value and <em>day-of-month</em> to\n -1. For example, to specify the last Sunday of October, set <em>month</em>\n to {@link Calendar#OCTOBER OCTOBER}, <em>day-of-week</em> to {@link\n Calendar#SUNDAY SUNDAY} and <em>day-of-month</em> to -1.  </li>\n\n </ul>\n The time of the day at which daylight saving time starts or ends is\n specified by a millisecond value within the day. There are three kinds of\n <em>mode</em>s to specify the time: {@link #WALL_TIME}, {@link\n #STANDARD_TIME} and {@link #UTC_TIME}. For example, if daylight\n saving time ends\n at 2:00 am in the wall clock time, it can be specified by 7200000\n milliseconds in the {@link #WALL_TIME} mode. In this case, the wall clock time\n for an <em>end-rule</em> means the same thing as the daylight time.\n <p>\n The following are examples of parameters for constructing time zone objects.\n <pre><code>\n      // Base GMT offset: -8:00\n      // DST starts:      at 2:00am in standard time\n      //                  on the first Sunday in April\n      // DST ends:        at 2:00am in daylight time\n      //                  on the last Sunday in October\n      // Save:            1 hour\n      SimpleTimeZone(-28800000,\n                     "America/Los_Angeles",\n                     Calendar.APRIL, 1, -Calendar.SUNDAY,\n                     7200000,\n                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                     7200000,\n                     3600000)\n\n      // Base GMT offset: +1:00\n      // DST starts:      at 1:00am in UTC time\n      //                  on the last Sunday in March\n      // DST ends:        at 1:00am in UTC time\n      //                  on the last Sunday in October\n      // Save:            1 hour\n      SimpleTimeZone(3600000,\n                     "Europe/Paris",\n                     Calendar.MARCH, -1, Calendar.SUNDAY,\n                     3600000, SimpleTimeZone.UTC_TIME,\n                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                     3600000, SimpleTimeZone.UTC_TIME,\n                     3600000)\n </code></pre>\n These parameter rules are also applicable to the set rule methods, such as\n <code>setStartRule</code>.\n\n @since 1.1\n @see      Calendar\n @see      GregorianCalendar\n @see      TimeZone\n @version  1.54 03/23/10\n @author   David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu\n"
16229,method,java/util/SimpleTimeZone/setStartRule/int;int;int;int," Sets the daylight saving time start rule. For example, if daylight saving\n time starts on the first Sunday in April at 2 am in local wall clock\n time, you can set the start rule by calling:\n <pre><code>setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);</code></pre>\n\n @param startMonth      The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 0 for January).\n @param startDay        The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter.\n @param startDayOfWeek  The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter.\n @param startTime       The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.\n @exception IllegalArgumentException if the <code>startMonth</code>, <code>startDay</code>,\n <code>startDayOfWeek</code>, or <code>startTime</code> parameters are out of range\n"
16231,method,java/util/SimpleTimeZone/setStartRule/int;int;int;int;boolean," Sets the daylight saving time start rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th.\n\n @param startMonth      The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 0 for January).\n @param startDay        The day of the month on which the daylight saving time starts.\n @param startDayOfWeek  The daylight saving time starting day-of-week.\n @param startTime       The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.\n @param after           If true, this rule selects the first <code>dayOfWeek</code> on or\n                        <em>after</em> <code>dayOfMonth</code>.  If false, this rule\n                        selects the last <code>dayOfWeek</code> on or <em>before</em>\n                        <code>dayOfMonth</code>.\n @exception IllegalArgumentException if the <code>startMonth</code>, <code>startDay</code>,\n <code>startDayOfWeek</code>, or <code>startTime</code> parameters are out of range\n @since 1.2\n"
16232,method,java/util/SimpleTimeZone/setEndRule/int;int;int;int," Sets the daylight saving time end rule. For example, if daylight saving time\n ends on the last Sunday in October at 2 am in wall clock time,\n you can set the end rule by calling:\n <code>setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);</code>\n\n @param endMonth        The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).\n @param endDay          The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter.\n @param endDayOfWeek    The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter.\n @param endTime         The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case.\n @exception IllegalArgumentException if the <code>endMonth</code>, <code>endDay</code>,\n <code>endDayOfWeek</code>, or <code>endTime</code> parameters are out of range\n"
16234,method,java/util/SimpleTimeZone/setEndRule/int;int;int;int;boolean," Sets the daylight saving time end rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th.\n\n @param endMonth        The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).\n @param endDay          The day of the month on which the daylight saving time ends.\n @param endDayOfWeek    The daylight saving time ending day-of-week.\n @param endTime         The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case.\n @param after           If true, this rule selects the first <code>endDayOfWeek</code> on\n                        or <em>after</em> <code>endDay</code>.  If false, this rule\n                        selects the last <code>endDayOfWeek</code> on or before\n                        <code>endDay</code> of the month.\n @exception IllegalArgumentException the <code>endMonth</code>, <code>endDay</code>,\n <code>endDayOfWeek</code>, or <code>endTime</code> parameters are out of range\n @since 1.2\n"
16249,method,java/util/SimpleTimeZone/SimpleTimeZone/int;String;int;int;int;int;int;int;int;int," Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n Both <code>startTime</code> and <code>endTime</code> are specified to be\n represented in the wall clock time. The amount of daylight saving is\n assumed to be 3600000 milliseconds (i.e., one hour). This constructor is\n equivalent to:\n <pre><code>\n     SimpleTimeZone(rawOffset,\n                    ID,\n                    startMonth,\n                    startDay,\n                    startDayOfWeek,\n                    startTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    endMonth,\n                    endDay,\n                    endDayOfWeek,\n                    endTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    3600000)\n </code></pre>\n\n @param rawOffset       The given base time zone offset from GMT.\n @param ID              The time zone ID which is given to this object.\n @param startMonth      The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 0\n                        for January).\n @param startDay        The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter.\n @param startDayOfWeek  The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter.\n @param startTime       The daylight saving time starting time in local wall clock\n                        time (in milliseconds within the day), which is local\n                        standard time in this case.\n @param endMonth        The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).\n @param endDay          The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter.\n @param endDayOfWeek    The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter.\n @param endTime         The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case.\n @exception IllegalArgumentException if the month, day, dayOfWeek, or time\n parameters are out of range for the start or end rule\n"
16250,method,java/util/SimpleTimeZone/SimpleTimeZone/int;String;int;int;int;int;int;int;int;int;int," Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n Both <code>startTime</code> and <code>endTime</code> are assumed to be\n represented in the wall clock time. This constructor is equivalent to:\n <pre><code>\n     SimpleTimeZone(rawOffset,\n                    ID,\n                    startMonth,\n                    startDay,\n                    startDayOfWeek,\n                    startTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    endMonth,\n                    endDay,\n                    endDayOfWeek,\n                    endTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    dstSavings)\n </code></pre>\n\n @param rawOffset       The given base time zone offset from GMT.\n @param ID              The time zone ID which is given to this object.\n @param startMonth      The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 0 for January).\n @param startDay        The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter.\n @param startDayOfWeek  The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter.\n @param startTime       The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.\n @param endMonth        The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).\n @param endDay          The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter.\n @param endDayOfWeek    The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter.\n @param endTime         The daylight saving ending time in local wall clock time,\n                        which is local daylight time in this case.\n @param dstSavings      The amount of time in milliseconds saved during\n                        daylight saving time.\n @exception IllegalArgumentException if the month, day, dayOfWeek, or time\n parameters are out of range for the start or end rule\n @since 1.2\n"
16258,method,java/util/Set/contains/Object," Returns <tt>true</tt> if this set contains the specified element.\n More formally, returns <tt>true</tt> if and only if this set\n contains an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this set is to be tested\n @return <tt>true</tt> if this set contains the specified element\n @throws ClassCastException if the type of the specified element\n         is incompatible with this set (optional)\n @throws NullPointerException if the specified element is null and this\n         set does not permit null elements (optional)\n"
16265,method,java/util/Set/addAll/Collection," Adds all of the elements in the specified collection to this set if\n they're not already present (optional operation).  If the specified\n collection is also a set, the <tt>addAll</tt> operation effectively\n modifies this set so that its value is the <i>union</i> of the two\n sets.  The behavior of this operation is undefined if the specified\n collection is modified while the operation is in progress.\n\n @param  c collection containing elements to be added to this set\n @return <tt>true</tt> if this set changed as a result of the call\n\n @throws UnsupportedOperationException if the <tt>addAll</tt> operation\n         is not supported by this set\n @throws ClassCastException if the class of an element of the\n         specified collection prevents it from being added to this set\n @throws NullPointerException if the specified collection contains one\n         or more null elements and this set does not permit null\n         elements, or if the specified collection is null\n @throws IllegalArgumentException if some property of an element of the\n         specified collection prevents it from being added to this set\n @see #add(Object)\n"
16266,method,java/util/Set/retainAll/Collection," Retains only the elements in this set that are contained in the\n specified collection (optional operation).  In other words, removes\n from this set all of its elements that are not contained in the\n specified collection.  If the specified collection is also a set, this\n operation effectively modifies this set so that its value is the\n <i>intersection</i> of the two sets.\n\n @param  c collection containing elements to be retained in this set\n @return <tt>true</tt> if this set changed as a result of the call\n @throws UnsupportedOperationException if the <tt>retainAll</tt> operation\n         is not supported by this set\n @throws ClassCastException if the class of an element of this set\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this set contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n"
16267,method,java/util/Set/removeAll/Collection," Removes from this set all of its elements that are contained in the\n specified collection (optional operation).  If the specified\n collection is also a set, this operation effectively modifies this\n set so that its value is the <i>asymmetric set difference</i> of\n the two sets.\n\n @param  c collection containing elements to be removed from this set\n @return <tt>true</tt> if this set changed as a result of the call\n @throws UnsupportedOperationException if the <tt>removeAll</tt> operation\n         is not supported by this set\n @throws ClassCastException if the class of an element of this set\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this set contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n @see #contains(Object)\n"
16268,method,java/util/Set/clear/," Removes all of the elements from this set (optional operation).\n The set will be empty after this call returns.\n\n @throws UnsupportedOperationException if the <tt>clear</tt> method\n         is not supported by this set\n"
16270,method,java/util/Set/hashCode/," Returns the hash code value for this set.  The hash code of a set is\n defined to be the sum of the hash codes of the elements in the set,\n where the hash code of a <tt>null</tt> element is defined to be zero.\n This ensures that <tt>s1.equals(s2)</tt> implies that\n <tt>s1.hashCode()==s2.hashCode()</tt> for any two sets <tt>s1</tt>\n and <tt>s2</tt>, as required by the general contract of\n {@link Object#hashCode}.\n\n @return the hash code value for this set\n @see Object#equals(Object)\n @see Set#equals(Object)\n"
16272,method,java/util/ServiceLoader/reload/," Clear this loader's provider cache so that all providers will be\n reloaded.\n\n <p> After invoking this method, subsequent invocations of the {@link\n #iterator() iterator} method will lazily look up and instantiate\n providers from scratch, just as is done by a newly-created loader.\n\n <p> This method is intended for use in situations in which new providers\n can be installed into a running Java virtual machine.\n"
16275,method,java/util/ServiceLoader/load/Class," Creates a new service loader for the given service type, using the\n current thread's {@linkplain java.lang.Thread#getContextClassLoader\n context class loader}.\n\n <p> An invocation of this convenience method of the form\n\n <blockquote><pre>\n ServiceLoader.load(<i>service</i>)</pre></blockquote>\n\n is equivalent to\n\n <blockquote><pre>\n ServiceLoader.load(<i>service</i>,\n                    Thread.currentThread().getContextClassLoader())</pre></blockquote>\n\n @param  service\n         The interface or abstract class representing the service\n\n @return A new service loader\n"
16276,method,java/util/ServiceLoader/loadInstalled/Class," Creates a new service loader for the given service type, using the\n extension class loader.\n\n <p> This convenience method simply locates the extension class loader,\n call it <tt><i>extClassLoader</i></tt>, and then returns\n\n <blockquote><pre>\n ServiceLoader.load(<i>service</i>, <i>extClassLoader</i>)</pre></blockquote>\n\n <p> If the extension class loader cannot be found then the system class\n loader is used; if there is no system class loader then the bootstrap\n class loader is used.\n\n <p> This method is intended for use when only installed providers are\n desired.  The resulting service will only find and load providers that\n have been installed into the current Java virtual machine; providers on\n the application's class path will be ignored.\n\n @param  service\n         The interface or abstract class representing the service\n\n @return A new service loader\n"
16278,class,java/util/ServiceConfigurationError," Error thrown when something goes wrong while loading a service provider.\n \n <p> This error will be thrown in the following situations:\n\n <ul>\n\n   <li> The format of a provider-configuration file violates the <a\n   href="ServiceLoader.html#format">specification</a>; </li>\n\n   <li> An {@link java.io.IOException IOException} occurs while reading a\n   provider-configuration file; </li>\n\n   <li> A concrete provider class named in a provider-configuration file\n   cannot be found; </li>\n\n   <li> A concrete provider class is not a subclass of the service class;\n   </li>\n\n   <li> A concrete provider class cannot be instantiated; or\n\n   <li> Some other kind of error occurs. </li>\n\n </ul>\n\n\n @author Mark Reinhold\n @version 1.6, 10/03/23\n @since 1.6\n"
16281,class,java/util/Scanner," A simple text scanner which can parse primitive types and strings using\n regular expressions.\n\n <p>A <code>Scanner</code> breaks its input into tokens using a \n delimiter pattern, which by default matches whitespace. The resulting \n tokens may then be converted into values of different types using the \n various <tt>next</tt> methods.\n\n <p>For example, this code allows a user to read a number from \n <tt>System.in</tt>:\n <blockquote><pre>\n     Scanner sc = new Scanner(System.in);\n     int i = sc.nextInt();\n </pre></blockquote>\n\n <p>As another example, this code allows <code>long</code> types to be\n assigned from entries in a file <code>myNumbers</code>:\n <blockquote><pre>\n      Scanner sc = new Scanner(new File("myNumbers"));\n      while (sc.hasNextLong()) {\n          long aLong = sc.nextLong();\n      }</pre></blockquote>\n\n <p>The scanner can also use delimiters other than whitespace. This \n example reads several items in from a string:\n<blockquote><pre>\n     String input = "1 fish 2 fish red fish blue fish";\n     Scanner s = new Scanner(input).useDelimiter("\\s*fish\\s*");\n     System.out.println(s.nextInt());\n     System.out.println(s.nextInt());\n     System.out.println(s.next());\n     System.out.println(s.next());\n     s.close(); </pre></blockquote>\n <p>\n prints the following output:\n <blockquote><pre>\n     1\n     2\n     red\n     blue </pre></blockquote>\n\n <p>The same output can be generated with this code, which uses a regular\n expression to parse all four tokens at once:\n<blockquote><pre>\n     String input = "1 fish 2 fish red fish blue fish";\n     Scanner s = new Scanner(input);\n     s.findInLine("(\\d+) fish (\\d+) fish (\\w+) fish (\\w+)");\n     MatchResult result = s.match();\n     for (int i=1; i<=result.groupCount(); i++)\n         System.out.println(result.group(i));\n     s.close(); </pre></blockquote>\n\n <p>The <a name="default-delimiter">default whitespace delimiter</a> used \n by a scanner is as recognized by {@link java.lang.Character}.{@link\n java.lang.Character#isWhitespace(char) isWhitespace}. The {@link #reset}\n method will reset the value of the scanner's delimiter to the default\n whitespace delimiter regardless of whether it was previously changed.\n \n <p>A scanning operation may block waiting for input.\n\n <p>The {@link #next} and {@link #hasNext} methods and their \n primitive-type companion methods (such as {@link #nextInt} and \n {@link #hasNextInt}) first skip any input that matches the delimiter\n pattern, and then attempt to return the next token. Both <tt>hasNext</tt>\n and <tt>next</tt> methods may block waiting for further input.  Whether a\n <tt>hasNext</tt> method blocks has no connection to whether or not its\n associated <tt>next</tt> method will block.\n\n <p> The {@link #findInLine}, {@link #findWithinHorizon}, and {@link #skip}\n methods operate independently of the delimiter pattern. These methods will \n attempt to match the specified pattern with no regard to delimiters in the \n input and thus can be used in special circumstances where delimiters are \n not relevant. These methods may block waiting for more input.\n\n <p>When a scanner throws an {@link InputMismatchException}, the scanner\n will not pass the token that caused the exception, so that it may be\n retrieved or skipped via some other method.\n\n <p>Depending upon the type of delimiting pattern, empty tokens may be\n returned. For example, the pattern <tt>"\\s+"</tt> will return no empty \n tokens since it matches multiple instances of the delimiter. The delimiting \n pattern <tt>"\\s"</tt> could return empty tokens since it only passes one \n space at a time.\n\n <p> A scanner can read text from any object which implements the {@link\n java.lang.Readable} interface.  If an invocation of the underlying\n readable's {@link java.lang.Readable#read} method throws an {@link\n java.io.IOException} then the scanner assumes that the end of the input\n has been reached.  The most recent <tt>IOException</tt> thrown by the\n underlying readable can be retrieved via the {@link #ioException} method.\n\n <p>When a <code>Scanner</code> is closed, it will close its input source\n if the source implements the {@link java.io.Closeable} interface.\n\n <p>A <code>Scanner</code> is not safe for multithreaded use without\n external synchronization.\n\n <p>Unless otherwise mentioned, passing a <code>null</code> parameter into\n any method of a <code>Scanner</code> will cause a\n <code>NullPointerException</code> to be thrown.\n\n <p>A scanner will default to interpreting numbers as decimal unless a\n different radix has been set by using the {@link #useRadix} method. The\n {@link #reset} method will reset the value of the scanner's radix to\n <code>10</code> regardless of whether it was previously changed.\n\n <a name="localized-numbers">\n <h4> Localized numbers </h4>\n\n <p> An instance of this class is capable of scanning numbers in the standard\n formats as well as in the formats of the scanner's locale. A scanner's \n <a name="initial-locale">initial locale </a>is the value returned by the {@link\n java.util.Locale#getDefault} method; it may be changed via the {@link\n #useLocale} method. The {@link #reset} method will reset the value of the\n scanner's locale to the initial locale regardless of whether it was\n previously changed.\n\n <p>The localized formats are defined in terms of the following parameters, \n which for a particular locale are taken from that locale's {@link\n java.text.DecimalFormat DecimalFormat} object, <tt>df</tt>, and its and\n {@link java.text.DecimalFormatSymbols DecimalFormatSymbols} object,\n <tt>dfs</tt>.\n\n <blockquote><table>\n <tr><td valign="top"><i>LocalGroupSeparator&nbsp;&nbsp;</i></td>\n     <td valign="top">The character used to separate thousands groups,\n                      <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link\n                      java.text.DecimalFormatSymbols#getGroupingSeparator\n                      getGroupingSeparator()}</td></tr>\n <tr><td valign="top"><i>LocalDecimalSeparator&nbsp;&nbsp;</i></td>\n     <td valign="top">The character used for the decimal point,\n                      <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link\n                      java.text.DecimalFormatSymbols#getDecimalSeparator\n                      getDecimalSeparator()}</td></tr>\n <tr><td valign="top"><i>LocalPositivePrefix&nbsp;&nbsp;</i></td>\n     <td valign="top">The string that appears before a positive number (may\n                      be empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link\n                      java.text.DecimalFormat#getPositivePrefix\n                      getPositivePrefix()}</td></tr>\n <tr><td valign="top"><i>LocalPositiveSuffix&nbsp;&nbsp;</i></td>\n     <td valign="top">The string that appears after a positive number (may be\n                      empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link\n                      java.text.DecimalFormat#getPositiveSuffix\n                      getPositiveSuffix()}</td></tr>\n <tr><td valign="top"><i>LocalNegativePrefix&nbsp;&nbsp;</i></td>\n     <td valign="top">The string that appears before a negative number (may\n                      be empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link\n                      java.text.DecimalFormat#getNegativePrefix\n                      getNegativePrefix()}</td></tr>\n <tr><td valign="top"><i>LocalNegativeSuffix&nbsp;&nbsp;</i></td>\n     <td valign="top">The string that appears after a negative number (may be\n                      empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link\n                      java.text.DecimalFormat#getNegativeSuffix\n                      getNegativeSuffix()}</td></tr>\n <tr><td valign="top"><i>LocalNaN&nbsp;&nbsp;</i></td>\n     <td valign="top">The string that represents not-a-number for\n                      floating-point values,\n                      <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link\n                      java.text.DecimalFormatSymbols#getNaN\n                      getNaN()}</td></tr>\n <tr><td valign="top"><i>LocalInfinity&nbsp;&nbsp;</i></td>\n     <td valign="top">The string that represents infinity for floating-point\n                      values, <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link\n                      java.text.DecimalFormatSymbols#getInfinity\n                      getInfinity()}</td></tr>\n </table></blockquote>\n \n <a name="number-syntax">\n <h4> Number syntax </h4>\n\n <p> The strings that can be parsed as numbers by an instance of this class\n are specified in terms of the following regular-expression grammar, where\n Rmax is the highest digit in the radix being used (for example, Rmax is 9\n in base 10).\n\n <p>\n <table cellspacing=0 cellpadding=0 align=center>\n \n   <tr><td valign=top align=right><i>NonASCIIDigit</i>&nbsp;&nbsp;::</td>\n       <td valign=top>= A non-ASCII character c for which\n            {@link java.lang.Character#isDigit Character.isDigit}<tt>(c)</tt>\n                        returns&nbsp;true</td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td align=right><i>Non0Digit</i>&nbsp;&nbsp;::</td>\n   <td><tt>= [1-</tt><i>Rmax</i><tt>] | </tt><i>NonASCIIDigit</i></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td align=right><i>Digit</i>&nbsp;&nbsp;::</td>\n   <td><tt>= [0-</tt><i>Rmax</i><tt>] | </tt><i>NonASCIIDigit</i></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td valign=top align=right><i>GroupedNumeral</i>&nbsp;&nbsp;::</td>\n       <td valign=top>\n         <table cellpadding=0 cellspacing=0>\n           <tr><td><tt>= (&nbsp;</tt></td>\n               <td><i>Non0Digit</i><tt>\n                   </tt><i>Digit</i><tt>?\n                   </tt><i>Digit</i><tt>?</tt></td></tr>\n           <tr><td></td>\n               <td><tt>(&nbsp;</tt><i>LocalGroupSeparator</i><tt>\n                         </tt><i>Digit</i><tt>\n                         </tt><i>Digit</i><tt>\n                         </tt><i>Digit</i><tt> )+ )</tt></td></tr>\n         </table></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td align=right><i>Numeral</i>&nbsp;&nbsp;::</td>\n       <td><tt>= ( ( </tt><i>Digit</i><tt>+ )\n               | </tt><i>GroupedNumeral</i><tt> )</tt></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td valign=top align=right>\n         <a name="Integer-regex"><i>Integer</i>&nbsp;&nbsp;::</td>\n       <td valign=top><tt>= ( [-+]? ( </tt><i>Numeral</i><tt>\n                               ) )</tt></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalPositivePrefix</i><tt> </tt><i>Numeral</i><tt>\n                      </tt><i>LocalPositiveSuffix</i></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalNegativePrefix</i><tt> </tt><i>Numeral</i><tt>\n                 </tt><i>LocalNegativeSuffix</i></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td align=right><i>DecimalNumeral</i>&nbsp;&nbsp;::</td>\n       <td><tt>= </tt><i>Numeral</i></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>Numeral</i><tt>\n                 </tt><i>LocalDecimalSeparator</i><tt>\n                 </tt><i>Digit</i><tt>*</tt></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalDecimalSeparator</i><tt>\n                 </tt><i>Digit</i><tt>+</tt></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td align=right><i>Exponent</i>&nbsp;&nbsp;::</td>\n       <td><tt>= ( [eE] [+-]? </tt><i>Digit</i><tt>+ )</tt></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td align=right>\n         <a name="Decimal-regex"><i>Decimal</i>&nbsp;&nbsp;::</td>\n       <td><tt>= ( [-+]? </tt><i>DecimalNumeral</i><tt>\n                         </tt><i>Exponent</i><tt>? )</tt></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalPositivePrefix</i><tt>\n                 </tt><i>DecimalNumeral</i><tt>\n                 </tt><i>LocalPositiveSuffix</i>\n                 </tt><i>Exponent</i><tt>?</td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalNegativePrefix</i><tt>\n                 </tt><i>DecimalNumeral</i><tt>\n                 </tt><i>LocalNegativeSuffix</i>\n                 </tt><i>Exponent</i><tt>?</td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td align=right><i>HexFloat</i>&nbsp;&nbsp;::</td>\n       <td><tt>= [-+]? 0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+\n                 ([pP][-+]?[0-9]+)?</tt></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>NonNumber</i>&nbsp;&nbsp;::</td>\n       <td valign=top><tt>= NaN\n                          | </tt><i>LocalNan</i><tt>\n                          | Infinity\n                          | </tt><i>LocalInfinity</i></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>SignedNonNumber</i>&nbsp;&nbsp;::</td>\n       <td><tt>= ( [-+]? </tt><i>NonNumber</i><tt> )</tt></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalPositivePrefix</i><tt>\n                 </tt><i>NonNumber</i><tt>\n                 </tt><i>LocalPositiveSuffix</i></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalNegativePrefix</i><tt>\n                 </tt><i>NonNumber</i><tt>\n                 </tt><i>LocalNegativeSuffix</i></td></tr>\n \n   <tr><td>&nbsp;</td></tr>\n \n   <tr><td valign=top align=right>\n         <a name="Float-regex"><i>Float</i>&nbsp;&nbsp;::</td>\n       <td valign=top><tt>= </tt><i>Decimal</i><tt></td></tr>\n       <tr><td></td>\n           <td><tt>| </tt><i>HexFloat</i><tt></td></tr>\n       <tr><td></td>\n           <td><tt>| </tt><i>SignedNonNumber</i><tt></td></tr>\n \n </table>\n </center>\n\n <p> Whitespace is not significant in the above regular expressions.\n\n @version 1.28, 03/23/10 \n @since   1.5\n"
16282,method,java/util/Scanner/close/," Closes this scanner.\n\n <p> If this scanner has not yet been closed then if its underlying\n {@linkplain java.lang.Readable readable} also implements the {@link\n java.io.Closeable} interface then the readable's <tt>close</tt> method\n will be invoked.  If this scanner is already closed then invoking this\n method will have no effect.\n \n <p>Attempting to perform search operations after a scanner has\n been closed will result in an {@link IllegalStateException}.\n\n"
16286,method,java/util/Scanner/useDelimiter/String," Sets this scanner's delimiting pattern to a pattern constructed from\n the specified <code>String</code>.\n\n <p> An invocation of this method of the form \n <tt>useDelimiter(pattern)</tt> behaves in exactly the same way as the\n invocation <tt>useDelimiter(Pattern.compile(pattern))</tt>.\n\n <p> Invoking the {@link #reset} method will set the scanner's delimiter\n to the <a href= "#default-delimiter">default</a>.\n\n @param pattern A string specifying a delimiting pattern\n @return this scanner\n"
16288,method,java/util/Scanner/useLocale/Locale," Sets this scanner's locale to the specified locale.\n\n <p>A scanner's locale affects many elements of its default\n primitive matching regular expressions; see \n <a href= "#localized-numbers">localized numbers</a> above.\n\n <p>Invoking the {@link #reset} method will set the scanner's locale to\n the <a href= "#initial-locale">initial locale</a>.\n\n @param locale A string specifying the locale to use\n @return this scanner\n"
16290,method,java/util/Scanner/useRadix/int," Sets this scanner's default radix to the specified radix.\n\n <p>A scanner's radix affects elements of its default\n number matching regular expressions; see \n <a href= "#localized-numbers">localized numbers</a> above.\n\n <p>If the radix is less than <code>Character.MIN_RADIX</code>\n or greater than <code>Character.MAX_RADIX</code>, then an\n <code>IllegalArgumentException</code> is thrown.\n\n <p>Invoking the {@link #reset} method will set the scanner's radix to\n <code>10</code>.\n\n @param radix The radix to use when scanning numbers\n @return this scanner\n @throws IllegalArgumentException if radix is out of range\n"
16291,method,java/util/Scanner/match/," Returns the match result of the last scanning operation performed\n by this scanner. This method throws <code>IllegalStateException</code>\n if no match has been performed, or if the last match was\n not successful.\n\n <p>The various <code>next</code>methods of <code>Scanner</code>\n make a match result available if they complete without throwing an\n exception. For instance, after an invocation of the {@link #nextInt}\n method that returned an int, this method returns a \n <code>MatchResult</code> for the search of the\n <a href="#Integer-regex"><i>Integer</i></a> regular expression\n defined above. Similarly the {@link #findInLine}, \n {@link #findWithinHorizon}, and {@link #skip} methods will make a\n match available if they succeed.\n\n @return a match result for the last match operation\n @throws IllegalStateException  If no match result is available\n"
16292,method,java/util/Scanner/toString/," <p>Returns the string representation of this <code>Scanner</code>. The\n string representation of a <code>Scanner</code> contains information\n that may be useful for debugging. The exact format is unspecified.\n\n @return  The string representation of this scanner\n"
16293,method,java/util/Scanner/hasNext/," Returns true if this scanner has another token in its input.\n This method may block while waiting for input to scan.\n The scanner does not advance past any input.\n\n @return true if and only if this scanner has another token\n @throws IllegalStateException if this scanner is closed\n @see java.util.Iterator\n"
16294,method,java/util/Scanner/next/," Finds and returns the next complete token from this scanner.\n A complete token is preceded and followed by input that matches\n the delimiter pattern. This method may block while waiting for input \n to scan, even if a previous invocation of {@link #hasNext} returned \n <code>true</code>.\n\n @return the next token\n @throws NoSuchElementException if no more tokens are available\n @throws IllegalStateException if this scanner is closed\n @see java.util.Iterator\n"
16295,method,java/util/Scanner/remove/," The remove operation is not supported by this implementation of\n <code>Iterator</code>.\n\n @throws UnsupportedOperationException if this method is invoked.\n @see java.util.Iterator\n"
16296,method,java/util/Scanner/hasNext/String," Returns true if the next token matches the pattern constructed from the \n specified string. The scanner does not advance past any input.\n\n <p> An invocation of this method of the form <tt>hasNext(pattern)</tt>\n behaves in exactly the same way as the invocation \n <tt>hasNext(Pattern.compile(pattern))</tt>.\n\n @param pattern a string specifying the pattern to scan\n @return true if and only if this scanner has another token matching\n         the specified pattern\n @throws IllegalStateException if this scanner is closed\n"
16297,method,java/util/Scanner/next/String," Returns the next token if it matches the pattern constructed from the \n specified string.  If the match is successful, the scanner advances \n past the input that matched the pattern.\n\n <p> An invocation of this method of the form <tt>next(pattern)</tt>\n behaves in exactly the same way as the invocation \n <tt>next(Pattern.compile(pattern))</tt>.\n\n @param pattern a string specifying the pattern to scan\n @return the next token\n @throws NoSuchElementException if no such tokens are available\n @throws IllegalStateException if this scanner is closed\n"
16298,method,java/util/Scanner/hasNext/Pattern," Returns true if the next complete token matches the specified pattern.\n A complete token is prefixed and postfixed by input that matches\n the delimiter pattern. This method may block while waiting for input.\n The scanner does not advance past any input.\n\n @param pattern the pattern to scan for\n @return true if and only if this scanner has another token matching\n         the specified pattern\n @throws IllegalStateException if this scanner is closed\n"
16299,method,java/util/Scanner/next/Pattern," Returns the next token if it matches the specified pattern. This \n method may block while waiting for input to scan, even if a previous\n invocation of {@link #hasNext(Pattern)} returned <code>true</code>. \n If the match is successful, the scanner advances past the input that \n matched the pattern.\n\n @param pattern the pattern to scan for\n @return the next token\n @throws NoSuchElementException if no more tokens are available\n @throws IllegalStateException if this scanner is closed\n"
16300,method,java/util/Scanner/hasNextLine/," Returns true if there is another line in the input of this scanner.\n This method may block while waiting for input. The scanner does not \n advance past any input.\n\n @return true if and only if this scanner has another line of input\n @throws IllegalStateException if this scanner is closed\n"
16301,method,java/util/Scanner/nextLine/," Advances this scanner past the current line and returns the input\n that was skipped.\n\n This method returns the rest of the current line, excluding any line\n separator at the end. The position is set to the beginning of the next \n line.\n\n <p>Since this method continues to search through the input looking\n for a line separator, it may buffer all of the input searching for\n the line to skip if no line separators are present.\n\n @return the line that was skipped\n @throws NoSuchElementException if no line was found\n @throws IllegalStateException if this scanner is closed\n"
16302,method,java/util/Scanner/findInLine/String," Attempts to find the next occurrence of a pattern constructed from the\n specified string, ignoring delimiters.\n\n <p>An invocation of this method of the form <tt>findInLine(pattern)</tt>\n behaves in exactly the same way as the invocation \n <tt>findInLine(Pattern.compile(pattern))</tt>.\n\n @param pattern a string specifying the pattern to search for\n @return the text that matched the specified pattern\n @throws IllegalStateException if this scanner is closed\n"
16303,method,java/util/Scanner/findInLine/Pattern," Attempts to find the next occurrence of the specified pattern ignoring\n delimiters. If the pattern is found before the next line separator, the\n scanner advances past the input that matched and returns the string that\n matched the pattern.\n If no such pattern is detected in the input up to the next line\n separator, then <code>null</code> is returned and the scanner's \n position is unchanged. This method may block waiting for input that \n matches the pattern.\n\n <p>Since this method continues to search through the input looking\n for the specified pattern, it may buffer all of the input searching for\n the desired token if no line separators are present.\n\n @param pattern the pattern to scan for\n @return the text that matched the specified pattern\n @throws IllegalStateException if this scanner is closed\n"
16304,method,java/util/Scanner/findWithinHorizon/String;int," Attempts to find the next occurrence of a pattern constructed from the\n specified string, ignoring delimiters.\n\n <p>An invocation of this method of the form \n <tt>findWithinHorizon(pattern)</tt> behaves in exactly the same way as \n the invocation \n <tt>findWithinHorizon(Pattern.compile(pattern, horizon))</tt>.\n\n @param pattern a string specifying the pattern to search for\n @return the text that matched the specified pattern\n @throws IllegalStateException if this scanner is closed\n @throws IllegalArgumentException if horizon is negative\n"
16305,method,java/util/Scanner/findWithinHorizon/Pattern;int," Attempts to find the next occurrence of the specified pattern.\n\n <p>This method searches through the input up to the specified\n search horizon, ignoring delimiters. If the pattern is found the \n scanner advances past the input that matched and returns the string \n that matched the pattern. If no such pattern is detected then the \n null is returned and the scanner's position remains unchanged. This \n method may block waiting for input that matches the pattern.\n\n <p>A scanner will never search more than <code>horizon</code> code\n points beyond its current position. Note that a match may be clipped\n by the horizon; that is, an arbitrary match result may have been \n different if the horizon had been larger. The scanner treats the\n horizon as a transparent, non-anchoring bound (see {@link \n Matcher#useTransparentBounds} and {@link Matcher#useAnchoringBounds}).\n\n <p>If horizon is <code>0</code>, then the horizon is ignored and\n this method continues to search through the input looking for the \n specified pattern without bound. In this case it may buffer all of\n the input searching for the pattern.\n\n <p>If horizon is negative, then an IllegalArgumentException is\n thrown.\n\n @param pattern the pattern to scan for\n @return the text that matched the specified pattern\n @throws IllegalStateException if this scanner is closed\n @throws IllegalArgumentException if horizon is negative\n"
16306,method,java/util/Scanner/skip/Pattern," Skips input that matches the specified pattern, ignoring delimiters.\n This method will skip input if an anchored match of the specified\n pattern succeeds.\n\n <p>If a match to the specified pattern is not found at the\n current position, then no input is skipped and a \n <tt>NoSuchElementException</tt> is thrown.\n\n <p>Since this method seeks to match the specified pattern starting at\n the scanner's current position, patterns that can match a lot of\n input (".*", for example) may cause the scanner to buffer a large\n amount of input.\n\n <p>Note that it is possible to skip something without risking a\n <code>NoSuchElementException</code> by using a pattern that can\n match nothing, e.g., <code>sc.skip("[ \t]*")</code>.\n\n @param pattern a string specifying the pattern to skip over\n @return this scanner\n @throws NoSuchElementException if the specified pattern is not found\n @throws IllegalStateException if this scanner is closed\n"
16307,method,java/util/Scanner/skip/String," Skips input that matches a pattern constructed from the specified\n string.\n\n <p> An invocation of this method of the form <tt>skip(pattern)</tt>\n behaves in exactly the same way as the invocation \n <tt>skip(Pattern.compile(pattern))</tt>.\n\n @param pattern a string specifying the pattern to skip over\n @return this scanner\n @throws IllegalStateException if this scanner is closed\n"
16308,method,java/util/Scanner/hasNextBoolean/," Returns true if the next token in this scanner's input can be\n interpreted as a boolean value using a case insensitive pattern \n created from the string "true|false".  The scanner does not\n advance past the input that matched.\n\n @return true if and only if this scanner's next token is a valid\n         boolean value\n @throws IllegalStateException if this scanner is closed\n"
16310,method,java/util/Scanner/hasNextByte/," Returns true if the next token in this scanner's input can be\n interpreted as a byte value in the default radix using the \n {@link #nextByte} method. The scanner does not advance past any input.\n\n @return true if and only if this scanner's next token is a valid\n         byte value\n @throws IllegalStateException if this scanner is closed\n"
16311,method,java/util/Scanner/hasNextByte/int," Returns true if the next token in this scanner's input can be\n interpreted as a byte value in the specified radix using the \n {@link #nextByte} method. The scanner does not advance past any input.\n\n @param radix the radix used to interpret the token as a byte value\n @return true if and only if this scanner's next token is a valid\n         byte value\n @throws IllegalStateException if this scanner is closed\n"
16312,method,java/util/Scanner/nextByte/," Scans the next token of the input as a <tt>byte</tt>.\n\n <p> An invocation of this method of the form \n <tt>nextByte()</tt> behaves in exactly the same way as the\n invocation <tt>nextByte(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.\n\n @return the <tt>byte</tt> scanned from the input\n @throws InputMismatchException\n         if the next token does not match the <i>Integer</i>\n         regular expression, or is out of range\n @throws NoSuchElementException if input is exhausted\n @throws IllegalStateException if this scanner is closed\n"
16314,method,java/util/Scanner/hasNextShort/," Returns true if the next token in this scanner's input can be\n interpreted as a short value in the default radix using the \n {@link #nextShort} method. The scanner does not advance past any input.\n\n @return true if and only if this scanner's next token is a valid\n         short value in the default radix\n @throws IllegalStateException if this scanner is closed\n"
16315,method,java/util/Scanner/hasNextShort/int," Returns true if the next token in this scanner's input can be\n interpreted as a short value in the specified radix using the \n {@link #nextShort} method. The scanner does not advance past any input.\n\n @param radix the radix used to interpret the token as a short value\n @return true if and only if this scanner's next token is a valid\n         short value in the specified radix\n @throws IllegalStateException if this scanner is closed\n"
16316,method,java/util/Scanner/nextShort/," Scans the next token of the input as a <tt>short</tt>.\n\n <p> An invocation of this method of the form \n <tt>nextShort()</tt> behaves in exactly the same way as the\n invocation <tt>nextShort(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.\n\n @return the <tt>short</tt> scanned from the input\n @throws InputMismatchException\n         if the next token does not match the <i>Integer</i>\n         regular expression, or is out of range\n @throws NoSuchElementException if input is exhausted\n @throws IllegalStateException if this scanner is closed\n"
16318,method,java/util/Scanner/hasNextInt/," Returns true if the next token in this scanner's input can be\n interpreted as an int value in the default radix using the \n {@link #nextInt} method. The scanner does not advance past any input.\n\n @return true if and only if this scanner's next token is a valid\n         int value\n @throws IllegalStateException if this scanner is closed\n"
16319,method,java/util/Scanner/hasNextInt/int," Returns true if the next token in this scanner's input can be\n interpreted as an int value in the specified radix using the \n {@link #nextInt} method. The scanner does not advance past any input.\n\n @param radix the radix used to interpret the token as an int value\n @return true if and only if this scanner's next token is a valid\n         int value\n @throws IllegalStateException if this scanner is closed\n"
16320,method,java/util/Scanner/nextInt/," Scans the next token of the input as an <tt>int</tt>.\n\n <p> An invocation of this method of the form \n <tt>nextInt()</tt> behaves in exactly the same way as the\n invocation <tt>nextInt(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.\n\n @return the <tt>int</tt> scanned from the input\n @throws InputMismatchException\n         if the next token does not match the <i>Integer</i>\n         regular expression, or is out of range\n @throws NoSuchElementException if input is exhausted\n @throws IllegalStateException if this scanner is closed\n"
16322,method,java/util/Scanner/hasNextLong/," Returns true if the next token in this scanner's input can be\n interpreted as a long value in the default radix using the \n {@link #nextLong} method. The scanner does not advance past any input.\n\n @return true if and only if this scanner's next token is a valid\n         long value\n @throws IllegalStateException if this scanner is closed\n"
16323,method,java/util/Scanner/hasNextLong/int," Returns true if the next token in this scanner's input can be\n interpreted as a long value in the specified radix using the \n {@link #nextLong} method. The scanner does not advance past any input.\n\n @param radix the radix used to interpret the token as a long value\n @return true if and only if this scanner's next token is a valid\n         long value\n @throws IllegalStateException if this scanner is closed\n"
16324,method,java/util/Scanner/nextLong/," Scans the next token of the input as a <tt>long</tt>.\n\n <p> An invocation of this method of the form \n <tt>nextLong()</tt> behaves in exactly the same way as the\n invocation <tt>nextLong(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.\n\n @return the <tt>long</tt> scanned from the input\n @throws InputMismatchException\n         if the next token does not match the <i>Integer</i>\n         regular expression, or is out of range\n @throws NoSuchElementException if input is exhausted\n @throws IllegalStateException if this scanner is closed\n"
16326,method,java/util/Scanner/hasNextFloat/," Returns true if the next token in this scanner's input can be\n interpreted as a float value using the {@link #nextFloat} \n method. The scanner does not advance past any input.\n\n @return true if and only if this scanner's next token is a valid\n         float value\n @throws IllegalStateException if this scanner is closed\n"
16328,method,java/util/Scanner/hasNextDouble/," Returns true if the next token in this scanner's input can be\n interpreted as a double value using the {@link #nextDouble} \n method. The scanner does not advance past any input.\n\n @return true if and only if this scanner's next token is a valid\n         double value\n @throws IllegalStateException if this scanner is closed\n"
16330,method,java/util/Scanner/hasNextBigInteger/," Returns true if the next token in this scanner's input can be\n interpreted as a <code>BigInteger</code> in the default radix using the \n {@link #nextBigInteger} method. The scanner does not advance past any \n input.\n\n @return true if and only if this scanner's next token is a valid\n         <code>BigInteger</code>\n @throws IllegalStateException if this scanner is closed\n"
16331,method,java/util/Scanner/hasNextBigInteger/int," Returns true if the next token in this scanner's input can be\n interpreted as a <code>BigInteger</code> in the specified radix using \n the {@link #nextBigInteger} method. The scanner does not advance past \n any input.\n\n @param radix the radix used to interpret the token as an integer\n @return true if and only if this scanner's next token is a valid\n         <code>BigInteger</code>\n @throws IllegalStateException if this scanner is closed\n"
16332,method,java/util/Scanner/nextBigInteger/," Scans the next token of the input as a {@link java.math.BigInteger\n BigInteger}.\n\n <p> An invocation of this method of the form \n <tt>nextBigInteger()</tt> behaves in exactly the same way as the\n invocation <tt>nextBigInteger(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.\n\n @return the <tt>BigInteger</tt> scanned from the input\n @throws InputMismatchException\n         if the next token does not match the <i>Integer</i>\n         regular expression, or is out of range\n @throws NoSuchElementException if the input is exhausted\n @throws IllegalStateException if this scanner is closed\n"
16334,method,java/util/Scanner/hasNextBigDecimal/," Returns true if the next token in this scanner's input can be\n interpreted as a <code>BigDecimal</code> using the \n {@link #nextBigDecimal} method. The scanner does not advance past any \n input.\n\n @return true if and only if this scanner's next token is a valid\n         <code>BigDecimal</code>\n @throws IllegalStateException if this scanner is closed\n"
16336,method,java/util/Scanner/reset/," Resets this scanner.\n\n <p> Resetting a scanner discards all of its explicit state\n information which may have been changed by invocations of {@link\n #useDelimiter}, {@link #useLocale}, or {@link #useRadix}.\n\n <p> An invocation of this method of the form\n <tt>scanner.reset()</tt> behaves in exactly the same way as the\n invocation\n\n <blockquote><pre>\n   scanner.useDelimiter("\\p{javaWhitespace}+")\n          .useLocale(Locale.getDefault())\n          .useRadix(10);\n </pre></blockquote>\n\n @return this scanner\n\n @since 1.6\n"
16346,method,java/util/ResourceBundle/getString/String," Gets a string for the given key from this resource bundle or one of its parents.\n Calling this method is equivalent to calling\n <blockquote>\n <code>(String) {@link #getObject(java.lang.String) getObject}(key)</code>.\n </blockquote>\n\n @param key the key for the desired string\n @exception NullPointerException if <code>key</code> is <code>null</code>\n @exception MissingResourceException if no object for the given key can be found\n @exception ClassCastException if the object found for the given key is not a string\n @return the string for the given key\n"
16347,method,java/util/ResourceBundle/getStringArray/String," Gets a string array for the given key from this resource bundle or one of its parents.\n Calling this method is equivalent to calling\n <blockquote>\n <code>(String[]) {@link #getObject(java.lang.String) getObject}(key)</code>.\n </blockquote>\n\n @param key the key for the desired string array\n @exception NullPointerException if <code>key</code> is <code>null</code>\n @exception MissingResourceException if no object for the given key can be found\n @exception ClassCastException if the object found for the given key is not a string array\n @return the string array for the given key\n"
16348,method,java/util/ResourceBundle/getObject/String," Gets an object for the given key from this resource bundle or one of its parents.\n This method first tries to obtain the object from this resource bundle using\n {@link #handleGetObject(java.lang.String) handleGetObject}.\n If not successful, and the parent resource bundle is not null,\n it calls the parent's <code>getObject</code> method.\n If still not successful, it throws a MissingResourceException.\n\n @param key the key for the desired object\n @exception NullPointerException if <code>key</code> is <code>null</code>\n @exception MissingResourceException if no object for the given key can be found\n @return the object for the given key\n"
16349,method,java/util/ResourceBundle/getLocale/," Returns the locale of this resource bundle. This method can be used after a\n call to getBundle() to determine whether the resource bundle returned really\n corresponds to the requested locale or is a fallback.\n\n @return the locale of this resource bundle\n"
16351,method,java/util/ResourceBundle/getBundle/String," Gets a resource bundle using the specified base name, the default locale,\n and the caller's class loader. Calling this method is equivalent to calling\n <blockquote>\n <code>getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader())</code>,\n </blockquote>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.\n See {@link #getBundle(String, Locale, ClassLoader) getBundle}\n for a complete description of the search and instantiation strategy.\n\n @param baseName the base name of the resource bundle, a fully qualified class name\n @exception java.lang.NullPointerException\n     if <code>baseName</code> is <code>null</code>\n @exception MissingResourceException\n     if no resource bundle for the specified base name can be found\n @return a resource bundle for the given base name and the default locale\n"
16352,method,java/util/ResourceBundle/getBundle/String;Control," Returns a resource bundle using the specified base name, the\n default locale and the specified control. Calling this method\n is equivalent to calling\n <pre>\n getBundle(baseName, Locale.getDefault(),\n           this.getClass().getClassLoader(), control),\n </pre>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.  See {@link\n #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n complete description of the resource bundle loading process with a\n <code>ResourceBundle.Control</code>.\n\n @param baseName\n        the base name of the resource bundle, a fully qualified class\n        name\n @param control\n        the control which gives information for the resource bundle\n        loading process\n @return a resource bundle for the given base name and the default\n        locale\n @exception NullPointerException\n        if <code>baseName</code> or <code>control</code> is\n        <code>null</code>\n @exception MissingResourceException\n        if no resource bundle for the specified base name can be found\n @exception IllegalArgumentException\n        if the given <code>control</code> doesn't perform properly\n        (e.g., <code>control.getCandidateLocales</code> returns null.) \n        Note that validation of <code>control</code> is performed as\n        needed.\n @since 1.6\n"
16353,method,java/util/ResourceBundle/getBundle/String;Locale," Gets a resource bundle using the specified base name and locale,\n and the caller's class loader. Calling this method is equivalent to calling\n <blockquote>\n <code>getBundle(baseName, locale, this.getClass().getClassLoader())</code>,\n </blockquote>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.\n See {@link #getBundle(String, Locale, ClassLoader) getBundle}\n for a complete description of the search and instantiation strategy.\n\n @param baseName\n        the base name of the resource bundle, a fully qualified class name\n @param locale\n        the locale for which a resource bundle is desired\n @exception NullPointerException\n        if <code>baseName</code> or <code>locale</code> is <code>null</code>\n @exception MissingResourceException\n        if no resource bundle for the specified base name can be found\n @return a resource bundle for the given base name and locale\n"
16354,method,java/util/ResourceBundle/getBundle/String;Locale;Control," Returns a resource bundle using the specified base name, target\n locale and control, and the caller's class loader. Calling this\n method is equivalent to calling\n <pre>\n getBundle(baseName, targetLocale, this.getClass().getClassLoader(),\n           control),\n </pre>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.  See {@link\n #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n complete description of the resource bundle loading process with a\n <code>ResourceBundle.Control</code>.\n\n @param baseName\n        the base name of the resource bundle, a fully qualified\n        class name\n @param targetLocale\n        the locale for which a resource bundle is desired\n @param control\n        the control which gives information for the resource\n        bundle loading process\n @return a resource bundle for the given base name and a\n        <code>Locale</code> in <code>locales</code>\n @exception NullPointerException\n        if <code>baseName</code>, <code>locales</code> or\n        <code>control</code> is <code>null</code>\n @exception MissingResourceException\n        if no resource bundle for the specified base name in any\n        of the <code>locales</code> can be found.\n @exception IllegalArgumentException\n        if the given <code>control</code> doesn't perform properly\n        (e.g., <code>control.getCandidateLocales</code> returns null.) \n        Note that validation of <code>control</code> is performed as\n        needed.\n @since 1.6\n"
16357,method,java/util/ResourceBundle/clearCache/," Removes all resource bundles from the cache that have been loaded\n using the caller's class loader.\n\n @since 1.6\n @see ResourceBundle.Control#getTimeToLive(String,Locale)\n"
16359,method,java/util/ResourceBundle/handleGetObject/String," Gets an object for the given key from this resource bundle.\n Returns null if this resource bundle does not contain an\n object for the given key.\n\n @param key the key for the desired object\n @exception NullPointerException if <code>key</code> is <code>null</code>\n @return the object for the given key, or null\n"
16364,method,java/util/ResourceBundle/ResourceBundle/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
16371,method,java/util/ResourceBundle/Control/getFallbackLocale/String;Locale," Returns a <code>Locale</code> to be used as a fallback locale for\n further resource bundle searches by the\n <code>ResourceBundle.getBundle</code> factory method. This method\n is called from the factory method every time when no resulting\n resource bundle has been found for <code>baseName</code> and\n <code>locale</code>, where locale is either the parameter for\n <code>ResourceBundle.getBundle</code> or the previous fallback\n locale returned by this method.\n\n <p>The method returns <code>null</code> if no further fallback\n search is desired.\n\n <p>The default implementation returns the {@linkplain\n Locale#getDefault() default <code>Locale</code>} if the given\n <code>locale</code> isn't the default one.  Otherwise,\n <code>null</code> is returned.\n\n @param baseName\n        the base name of the resource bundle, a fully\n        qualified class name for which\n        <code>ResourceBundle.getBundle</code> has been\n        unable to find any resource bundles (except for the\n        base bundle)\n @param locale\n        the <code>Locale</code> for which\n        <code>ResourceBundle.getBundle</code> has been\n        unable to find any resource bundles (except for the\n        base bundle)\n @return a <code>Locale</code> for the fallback search,\n        or <code>null</code> if no further fallback search\n        is desired.\n @exception NullPointerException\n        if <code>baseName</code> or <code>locale</code>\n        is <code>null</code>\n"
16374,method,java/util/ResourceBundle/Control/needsReload/String;Locale;String;ClassLoader;ResourceBundle;long," Determines if the expired <code>bundle</code> in the cache needs\n to be reloaded based on the loading time given by\n <code>loadTime</code> or some other criteria. The method returns\n <code>true</code> if reloading is required; <code>false</code>\n otherwise. <code>loadTime</code> is a millisecond offset since\n the <a href="Calendar.html#Epoch"> <code>Calendar</code>\n Epoch</a>.\n\n The calling <code>ResourceBundle.getBundle</code> factory method\n calls this method on the <code>ResourceBundle.Control</code>\n instance used for its current invocation, not on the instance\n used in the invocation that originally loaded the resource\n bundle.\n\n <p>The default implementation compares <code>loadTime</code> and\n the last modified time of the source data of the resource\n bundle. If it's determined that the source data has been modified\n since <code>loadTime</code>, <code>true</code> is\n returned. Otherwise, <code>false</code> is returned. This\n implementation assumes that the given <code>format</code> is the\n same string as its file suffix if it's not one of the default\n formats, <code>"java.class"</code> or\n <code>"java.properties"</code>.\n\n @param baseName\n        the base bundle name of the resource bundle, a\n        fully qualified class name\n @param locale\n        the locale for which the resource bundle\n        should be instantiated\n @param format\n        the resource bundle format to be loaded\n @param loader\n        the <code>ClassLoader</code> to use to load the bundle\n @param bundle\n        the resource bundle instance that has been expired\n        in the cache\n @param loadTime\n        the time when <code>bundle</code> was loaded and put\n        in the cache\n @return <code>true</code> if the expired bundle needs to be\n        reloaded; <code>false</code> otherwise.\n @exception NullPointerException\n        if <code>baseName</code>, <code>locale</code>,\n        <code>format</code>, <code>loader</code>, or\n        <code>bundle</code> is <code>null</code>\n"
16375,method,java/util/ResourceBundle/Control/toBundleName/String;Locale," Converts the given <code>baseName</code> and <code>locale</code>\n to the bundle name. This method is called from the default\n implementation of the {@link #newBundle(String, Locale, String,\n ClassLoader, boolean) newBundle} and {@link #needsReload(String,\n Locale, String, ClassLoader, ResourceBundle, long) needsReload}\n methods.\n\n <p>This implementation returns the following value:\n <pre>\n     baseName + "_" + language + "_" + country + "_" + variant\n </pre>\n where <code>language</code>, <code>country</code> and\n <code>variant</code> are the language, country and variant values\n of <code>locale</code>, respectively. Final component values that\n are empty Strings are omitted along with the preceding '_'. If\n all of the values are empty strings, then <code>baseName</code>\n is returned.\n\n <p>For example, if <code>baseName</code> is\n <code>"baseName"</code> and <code>locale</code> is\n <code>Locale("ja",&nbsp;"",&nbsp;"XX")</code>, then\n <code>"baseName_ja_&thinsp;_XX"</code> is returned. If the given\n locale is <code>Locale("en")</code>, then\n <code>"baseName_en"</code> is returned.\n\n <p>Overriding this method allows applications to use different\n conventions in the organization and packaging of localized\n resources.\n\n @param baseName\n        the base name of the resource bundle, a fully\n        qualified class name\n @param locale\n        the locale for which a resource bundle should be\n        loaded\n @return the bundle name for the resource bundle\n @exception NullPointerException\n        if <code>baseName</code> or <code>locale</code>\n        is <code>null</code>\n"
16376,method,java/util/ResourceBundle/Control/toResourceName/String;String," Converts the given <code>bundleName</code> to the form required\n by the {@link ClassLoader#getResource ClassLoader.getResource}\n method by replacing all occurrences of <code>'.'</code> in\n <code>bundleName</code> with <code>'/'</code> and appending a\n <code>'.'</code> and the given file <code>suffix</code>. For\n example, if <code>bundleName</code> is\n <code>"foo.bar.MyResources_ja_JP"</code> and <code>suffix</code>\n is <code>"properties"</code>, then\n <code>"foo/bar/MyResources_ja_JP.properties"</code> is returned.\n\n @param bundleName\n        the bundle name\n @param suffix\n        the file type suffix\n @return the converted resource name\n @exception NullPointerException\n         if <code>bundleName</code> or <code>suffix</code>\n         is <code>null</code>\n"
16377,method,java/util/ResourceBundle/Control/ResourceBundle/Control/," Sole constructor. (For invocation by subclass constructors,\n typically implicit.)\n"
16379,field,java/util/ResourceBundle/Control/FORMAT_CLASS," The class-only format <code>List</code> containing\n <code>"java.class"</code>. This <code>List</code> is {@linkplain\n Collections#unmodifiableList(List) unmodifiable}.\n\n @see #getFormats(String)\n"
16380,field,java/util/ResourceBundle/Control/FORMAT_PROPERTIES," The properties-only format <code>List</code> containing\n <code>"java.properties"</code>. This <code>List</code> is\n {@linkplain Collections#unmodifiableList(List) unmodifiable}.\n\n @see #getFormats(String)\n"
16385,method,java/util/Random/setSeed/long," Sets the seed of this random number generator using a single\n {@code long} seed. The general contract of {@code setSeed} is\n that it alters the state of this random number generator object\n so as to be in exactly the same state as if it had just been\n created with the argument {@code seed} as a seed. The method\n {@code setSeed} is implemented by class {@code Random} by\n atomically updating the seed to\n  <pre>{@code (seed ^ 0x5DEECE66DL) & ((1L << 48) - 1)}</pre>\n and clearing the {@code haveNextNextGaussian} flag used by {@link\n #nextGaussian}.\n\n <p>The implementation of {@code setSeed} by class {@code Random}\n happens to use only 48 bits of the given seed. In general, however,\n an overriding method may use all 64 bits of the {@code long}\n argument as a seed value.\n\n @param seed the initial seed\n"
16389,method,java/util/Random/nextInt/int," Returns a pseudorandom, uniformly distributed {@code int} value\n between 0 (inclusive) and the specified value (exclusive), drawn from\n this random number generator's sequence.  The general contract of\n {@code nextInt} is that one {@code int} value in the specified range\n is pseudorandomly generated and returned.  All {@code n} possible\n {@code int} values are produced with (approximately) equal\n probability.  The method {@code nextInt(int n)} is implemented by\n class {@code Random} as if by:\n  <pre> {@code\n public int nextInt(int n) {\n   if (n <= 0)\n     throw new IllegalArgumentException("n must be positive");\n\n   if ((n & -n) == n)  // i.e., n is a power of 2\n     return (int)((n * (long)next(31)) >> 31);\n\n   int bits, val;\n   do {\n       bits = next(31);\n       val = bits % n;\n   } while (bits - val + (n-1) < 0);\n   return val;\n }}</pre>\n\n <p>The hedge "approximately" is used in the foregoing description only\n because the next method is only approximately an unbiased source of\n independently chosen bits.  If it were a perfect source of randomly\n chosen bits, then the algorithm shown would choose {@code int}\n values from the stated range with perfect uniformity.\n <p>\n The algorithm is slightly tricky.  It rejects values that would result\n in an uneven distribution (due to the fact that 2^31 is not divisible\n by n). The probability of a value being rejected depends on n.  The\n worst case is n=2^30+1, for which the probability of a reject is 1/2,\n and the expected number of iterations before the loop terminates is 2.\n <p>\n The algorithm treats the case where n is a power of two specially: it\n returns the correct number of high-order bits from the underlying\n pseudo-random number generator.  In the absence of special treatment,\n the correct number of <i>low-order</i> bits would be returned.  Linear\n congruential pseudo-random number generators such as the one\n implemented by this class are known to have short periods in the\n sequence of values of their low-order bits.  Thus, this special case\n greatly increases the length of the sequence of values returned by\n successive calls to this method if n is a small power of two.\n\n @param n the bound on the random number to be returned.  Must be\n	      positive.\n @return the next pseudorandom, uniformly distributed {@code int}\n         value between {@code 0} (inclusive) and {@code n} (exclusive)\n         from this random number generator's sequence\n @exception IllegalArgumentException if n is not positive\n @since 1.2\n"
16390,method,java/util/Random/nextLong/," Returns the next pseudorandom, uniformly distributed {@code long}\n value from this random number generator's sequence. The general\n contract of {@code nextLong} is that one {@code long} value is\n pseudorandomly generated and returned.\n\n <p>The method {@code nextLong} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public long nextLong() {\n   return ((long)next(32) << 32) + next(32);\n }}</pre>\n\n Because class {@code Random} uses a seed with only 48 bits,\n this algorithm will not return all possible {@code long} values.\n\n @return the next pseudorandom, uniformly distributed {@code long}\n         value from this random number generator's sequence\n"
16392,method,java/util/Random/nextFloat/," Returns the next pseudorandom, uniformly distributed {@code float}\n value between {@code 0.0} and {@code 1.0} from this random\n number generator's sequence.\n\n <p>The general contract of {@code nextFloat} is that one\n {@code float} value, chosen (approximately) uniformly from the\n range {@code 0.0f} (inclusive) to {@code 1.0f} (exclusive), is\n pseudorandomly generated and returned. All 2<font\n size="-1"><sup>24</sup></font> possible {@code float} values\n of the form <i>m&nbsp;x&nbsp</i>2<font\n size="-1"><sup>-24</sup></font>, where <i>m</i> is a positive\n integer less than 2<font size="-1"><sup>24</sup> </font>, are\n produced with (approximately) equal probability.\n\n <p>The method {@code nextFloat} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public float nextFloat() {\n   return next(24) / ((float)(1 << 24));\n }}</pre>\n\n <p>The hedge "approximately" is used in the foregoing description only\n because the next method is only approximately an unbiased source of\n independently chosen bits. If it were a perfect source of randomly\n chosen bits, then the algorithm shown would choose {@code float}\n values from the stated range with perfect uniformity.<p>\n [In early versions of Java, the result was incorrectly calculated as:\n  <pre> {@code\n   return next(30) / ((float)(1 << 30));}</pre>\n This might seem to be equivalent, if not better, but in fact it\n introduced a slight nonuniformity because of the bias in the rounding\n of floating-point numbers: it was slightly more likely that the\n low-order bit of the significand would be 0 than that it would be 1.]\n\n @return the next pseudorandom, uniformly distributed {@code float}\n         value between {@code 0.0} and {@code 1.0} from this\n         random number generator's sequence\n"
16393,method,java/util/Random/nextDouble/," Returns the next pseudorandom, uniformly distributed\n {@code double} value between {@code 0.0} and\n {@code 1.0} from this random number generator's sequence.\n\n <p>The general contract of {@code nextDouble} is that one\n {@code double} value, chosen (approximately) uniformly from the\n range {@code 0.0d} (inclusive) to {@code 1.0d} (exclusive), is\n pseudorandomly generated and returned.\n\n <p>The method {@code nextDouble} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public double nextDouble() {\n   return (((long)next(26) << 27) + next(27))\n     / (double)(1L << 53);\n }}</pre>\n\n <p>The hedge "approximately" is used in the foregoing description only\n because the {@code next} method is only approximately an unbiased\n source of independently chosen bits. If it were a perfect source of\n randomly chosen bits, then the algorithm shown would choose\n {@code double} values from the stated range with perfect uniformity.\n <p>[In early versions of Java, the result was incorrectly calculated as:\n  <pre> {@code\n   return (((long)next(27) << 27) + next(27))\n     / (double)(1L << 54);}</pre>\n This might seem to be equivalent, if not better, but in fact it\n introduced a large nonuniformity because of the bias in the rounding\n of floating-point numbers: it was three times as likely that the\n low-order bit of the significand would be 0 than that it would be 1!\n This nonuniformity probably doesn't matter much in practice, but we\n strive for perfection.]\n\n @return the next pseudorandom, uniformly distributed {@code double}\n         value between {@code 0.0} and {@code 1.0} from this\n         random number generator's sequence\n @see Math#random\n"
16394,method,java/util/Random/nextGaussian/," Returns the next pseudorandom, Gaussian ("normally") distributed\n {@code double} value with mean {@code 0.0} and standard\n deviation {@code 1.0} from this random number generator's sequence.\n <p>\n The general contract of {@code nextGaussian} is that one\n {@code double} value, chosen from (approximately) the usual\n normal distribution with mean {@code 0.0} and standard deviation\n {@code 1.0}, is pseudorandomly generated and returned.\n\n <p>The method {@code nextGaussian} is implemented by class\n {@code Random} as if by a threadsafe version of the following:\n  <pre> {@code\n private double nextNextGaussian;\n private boolean haveNextNextGaussian = false;\n\n public double nextGaussian() {\n   if (haveNextNextGaussian) {\n     haveNextNextGaussian = false;\n     return nextNextGaussian;\n   } else {\n     double v1, v2, s;\n     do {\n       v1 = 2 * nextDouble() - 1;   // between -1.0 and 1.0\n       v2 = 2 * nextDouble() - 1;   // between -1.0 and 1.0\n       s = v1 * v1 + v2 * v2;\n     } while (s >= 1 || s == 0);\n     double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);\n     nextNextGaussian = v2 * multiplier;\n     haveNextNextGaussian = true;\n     return v1 * multiplier;\n   }\n }}</pre>\n This uses the <i>polar method</i> of G. E. P. Box, M. E. Muller, and\n G. Marsaglia, as described by Donald E. Knuth in <i>The Art of\n Computer Programming</i>, Volume 3: <i>Seminumerical Algorithms</i>,\n section 3.4.1, subsection C, algorithm P. Note that it generates two\n independent values at the cost of only one call to {@code StrictMath.log}\n and one call to {@code StrictMath.sqrt}.\n\n @return the next pseudorandom, Gaussian ("normally") distributed\n         {@code double} value with mean {@code 0.0} and\n         standard deviation {@code 1.0} from this random number\n         generator's sequence\n"
16395,method,java/util/Random/Random/," Creates a new random number generator. This constructor sets\n the seed of the random number generator to a value very likely\n to be distinct from any other invocation of this constructor.\n"
16396,method,java/util/Random/Random/long," Creates a new random number generator using a single {@code long} seed.\n The seed is the initial value of the internal state of the pseudorandom\n number generator which is maintained by method {@link #next}.\n\n <p>The invocation {@code new Random(seed)} is equivalent to:\n  <pre> {@code\n Random rnd = new Random();\n rnd.setSeed(seed);}</pre>\n\n @param seed the initial seed\n @see   #setSeed(long)\n"
16398,method,java/util/Queue/add/Object," Inserts the specified element into this queue if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt>\n if no space is currently available.\n\n @param e the element to add\n @return <tt>true</tt> (as specified by {@link Collection#add})\n @throws IllegalStateException if the element cannot be added at this\n         time due to capacity restrictions\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this queue\n @throws NullPointerException if the specified element is null and\n         this queue does not permit null elements\n @throws IllegalArgumentException if some property of this element\n         prevents it from being added to this queue\n"
16400,method,java/util/Queue/remove/," Retrieves and removes the head of this queue.  This method differs\n from {@link #poll poll} only in that it throws an exception if this\n queue is empty.\n\n @return the head of this queue\n @throws NoSuchElementException if this queue is empty\n"
16402,method,java/util/Queue/element/," Retrieves, but does not remove, the head of this queue.  This method\n differs from {@link #peek peek} only in that it throws an exception\n if this queue is empty.\n\n @return the head of this queue\n @throws NoSuchElementException if this queue is empty\n"
16407,method,java/util/PropertyResourceBundle/handleKeySet/," Returns a <code>Set</code> of the keys contained\n <em>only</em> in this <code>ResourceBundle</code>.\n\n @return a <code>Set</code> of the keys contained only in this\n         <code>ResourceBundle</code>\n @since 1.6\n @see #keySet()\n"
16409,method,java/util/PropertyResourceBundle/PropertyResourceBundle/Reader," Creates a property resource bundle from a {@link java.io.Reader\n Reader}.  Unlike the constructor\n {@link #PropertyResourceBundle(java.io.InputStream) PropertyResourceBundle(InputStream)}, \n there is no limitation as to the encoding of the input property file.\n\n @param reader a Reader that represents a property file to\n        read from.\n @throws IOException if an I/O error occurs\n @throws NullPointerException if <code>reader</code> is null\n @since 1.6\n"
16410,class,java/util/PropertyPermission," This class is for property permissions.\n\n <P>\n The name is the name of the property ("java.home",\n "os.name", etc). The naming\n convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a ".", or by itself, to\n signify a wildcard match. For example: "java.*" or "*" is valid,\n "*java" or "a*b" is not valid.\n <P>\n <P>\n The actions to be granted are passed to the constructor in a string containing\n a list of zero or more comma-separated keywords. The possible keywords are\n "read" and "write". Their meaning is defined as follows:\n <P>\n <DL>\n    <DT> read\n    <DD> read permission. Allows <code>System.getProperty</code> to\n         be called.\n    <DT> write\n    <DD> write permission. Allows <code>System.setProperty</code> to\n         be called.\n </DL>\n <P>\n The actions string is converted to lowercase before processing.\n <P>\n Care should be taken before granting code permission to access\n certain system properties.  For example, granting permission to\n access the "java.home" system property gives potentially malevolent\n code sensitive information about the system environment (the Java\n installation directory).  Also, granting permission to access\n the "user.name" and "user.home" system properties gives potentially\n malevolent code sensitive information about the user environment\n (the user's account name and home directory).\n\n @see java.security.BasicPermission\n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n @see java.lang.SecurityManager\n\n @version 1.36 10/03/23\n\n @author Roland Schemers\n @since 1.2\n\n @serial exclude\n"
16413,method,java/util/PropertyPermission/hashCode/," Returns the hash code value for this object.\n The hash code used is the hash code of this permissions name, that is,\n <code>getName().hashCode()</code>, where <code>getName</code> is\n from the Permission superclass.\n\n @return a hash code value for this object.\n"
16414,method,java/util/PropertyPermission/getActions/," Returns the "canonical string representation" of the actions.\n That is, this method always returns present actions in the following order:\n read, write. For example, if this PropertyPermission object\n allows both write and read actions, a call to <code>getActions</code>\n will return the string "read,write".\n\n @return the canonical string representation of the actions.\n"
16416,method,java/util/PropertyPermission/PropertyPermission/String;String," Creates a new PropertyPermission object with the specified name.\n The name is the name of the system property, and\n <i>actions</i> contains a comma-separated list of the\n desired actions granted on the property. Possible actions are\n "read" and "write".\n\n @param name the name of the PropertyPermission.\n @param actions the actions string.\n\n @throws NullPointerException if <code>name</code> is <code>null</code>.\n @throws IllegalArgumentException if <code>name</code> is empty or if\n <code>actions</code> is invalid.\n"
16418,method,java/util/Properties/setProperty/String;String," Calls the <tt>Hashtable</tt> method <code>put</code>. Provided for\n parallelism with the <tt>getProperty</tt> method. Enforces use of\n strings for property keys and values. The value returned is the\n result of the <tt>Hashtable</tt> call to <code>put</code>.\n\n @param key the key to be placed into this property list.\n @param value the value corresponding to <tt>key</tt>.\n @return     the previous value of the specified key in this property\n             list, or <code>null</code> if it did not have one.\n @see #getProperty\n @since    1.2\n"
16420,method,java/util/Properties/load/InputStream," Reads a property list (key and element pairs) from the input\n byte stream. The input stream is in a simple line-oriented\n format as specified in\n {@link #load(java.io.Reader) load(Reader)} and is assumed to use\n the ISO 8859-1 character encoding; that is each byte is one Latin1\n character. Characters not in Latin1, and certain special characters,\n are represented in keys and elements using\n <a href="http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.3">Unicode escapes</a>.\n <p>\n The specified stream remains open after this method returns.\n\n @param      inStream   the input stream.\n @exception  IOException  if an error occurred when reading from the\n             input stream.\n @throws	   IllegalArgumentException if the input stream contains a\n 		   malformed Unicode escape sequence.\n @since 1.2\n"
16421,method,java/util/Properties/save/OutputStream;String," Calls the <code>store(OutputStream out, String comments)</code> method\n and suppresses IOExceptions that were thrown.\n\n @deprecated This method does not throw an IOException if an I/O error\n occurs while saving the property list.  The preferred way to save a\n properties list is via the <code>store(OutputStream out, \n String comments)</code> method or the \n <code>storeToXML(OutputStream os, String comment)</code> method.\n\n @param   out      an output stream.\n @param   comments   a description of the property list.\n @exception  ClassCastException  if this <code>Properties</code> object\n             contains any keys or values that are not \n             <code>Strings</code>.\n"
16422,method,java/util/Properties/store/Writer;String," Writes this property list (key and element pairs) in this\n <code>Properties</code> table to the output character stream in a \n format suitable for using the {@link #load(java.io.Reader) load(Reader)}\n method.\n <p>\n Properties from the defaults table of this <code>Properties</code>\n table (if any) are <i>not</i> written out by this method.\n <p>\n If the comments argument is not null, then an ASCII <code>#</code>\n character, the comments string, and a line separator are first written\n to the output stream. Thus, the <code>comments</code> can serve as an\n identifying comment. Any one of a line feed ('\n'), a carriage\n return ('\r'), or a carriage return followed immediately by a line feed\n in comments is replaced by a line separator generated by the <code>Writer</code>\n and if the next character in comments is not character <code>#</code> or \n character <code>!</code> then an ASCII <code>#</code> is written out \n after that line separator.\n <p>\n Next, a comment line is always written, consisting of an ASCII\n <code>#</code> character, the current date and time (as if produced\n by the <code>toString</code> method of <code>Date</code> for the\n current time), and a line separator as generated by the <code>Writer</code>.\n <p>\n Then every entry in this <code>Properties</code> table is\n written out, one per line. For each entry the key string is\n written, then an ASCII <code>=</code>, then the associated\n element string. For the key, all space characters are\n written with a preceding <code>\</code> character.  For the\n element, leading space characters, but not embedded or trailing\n space characters, are written with a preceding <code>\</code>\n character. The key and element characters <code>#</code>,\n <code>!</code>, <code>=</code>, and <code>:</code> are written\n with a preceding backslash to ensure that they are properly loaded.\n <p>\n After the entries have been written, the output stream is flushed.  \n The output stream remains open after this method returns.\n <p>\n\n @param   writer      an output character stream writer.\n @param   comments   a description of the property list.\n @exception  IOException if writing this property list to the specified\n             output stream throws an <tt>IOException</tt>.\n @exception  ClassCastException  if this <code>Properties</code> object\n             contains any keys or values that are not <code>Strings</code>.\n @exception  NullPointerException  if <code>writer</code> is null.\n @since 1.6\n"
16423,method,java/util/Properties/store/OutputStream;String," Writes this property list (key and element pairs) in this\n <code>Properties</code> table to the output stream in a format suitable\n for loading into a <code>Properties</code> table using the\n {@link #load(InputStream) load(InputStream)} method.\n <p>\n Properties from the defaults table of this <code>Properties</code>\n table (if any) are <i>not</i> written out by this method.\n <p>\n This method outputs the comments, properties keys and values in \n the same format as specified in\n {@link #store(java.io.Writer, java.lang.String) store(Writer)},\n with the following differences:\n <ul>\n <li>The stream is written using the ISO 8859-1 character encoding.\n\n <li>Characters not in Latin-1 in the comments are written as \n <code>&#92;u</code><i>xxxx</i> for their appropriate unicode \n hexadecimal value <i>xxxx</i>. \n \n <li>Characters less than <code>&#92;u0020</code> and characters greater\n than <code>&#92;u007E</code> in property keys or values are written\n as <code>&#92;u</code><i>xxxx</i> for the appropriate hexadecimal\n value <i>xxxx</i>. \n </ul>\n <p>\n After the entries have been written, the output stream is flushed.  \n The output stream remains open after this method returns.\n <p>\n @param   out      an output stream.\n @param   comments   a description of the property list.\n @exception  IOException if writing this property list to the specified\n             output stream throws an <tt>IOException</tt>.\n @exception  ClassCastException  if this <code>Properties</code> object\n             contains any keys or values that are not <code>Strings</code>.\n @exception  NullPointerException  if <code>out</code> is null.\n @since 1.2\n"
16425,method,java/util/Properties/storeToXML/OutputStream;String," Emits an XML document representing all of the properties contained\n in this table.\n\n <p> An invocation of this method of the form <tt>props.storeToXML(os,\n comment)</tt> behaves in exactly the same way as the invocation\n <tt>props.storeToXML(os, comment, "UTF-8");</tt>.\n\n @param os the output stream on which to emit the XML document.\n @param comment a description of the property list, or <code>null</code>\n        if no comment is desired.\n @throws IOException if writing to the specified output stream\n         results in an <tt>IOException</tt>.\n @throws NullPointerException if <code>os</code> is null.\n @throws ClassCastException  if this <code>Properties</code> object\n         contains any keys or values that are not \n         <code>Strings</code>.\n @see    #loadFromXML(InputStream)\n @since 1.5\n"
16431,method,java/util/Properties/list/PrintStream," Prints this property list out to the specified output stream.\n This method is useful for debugging.\n\n @param   out   an output stream.\n @throws  ClassCastException if any key in this property list\n          is not a string. \n"
16432,method,java/util/Properties/list/PrintWriter," Prints this property list out to the specified output stream.\n This method is useful for debugging.\n\n @param   out   an output stream.\n @throws  ClassCastException if any key in this property list\n          is not a string. \n @since   JDK1.1\n"
16440,method,java/util/PriorityQueue/remove/Object," Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.  Returns {@code true} if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call).\n\n @param o element to be removed from this queue, if present\n @return {@code true} if this queue changed as a result of the call\n"
16441,method,java/util/PriorityQueue/contains/Object," Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.\n\n @param o object to be checked for containment in this queue\n @return {@code true} if this queue contains the specified element\n"
16443,method,java/util/PriorityQueue/toArray/Object[]," Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n <p>If the queue fits in the specified array with room to spare\n (i.e., the array has more elements than the queue), the element in\n the array immediately following the end of the collection is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.\n\n @param a the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.\n @return an array containing all of the elements in this queue\n @throws ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this queue\n @throws NullPointerException if the specified array is null\n"
16446,method,java/util/PriorityQueue/clear/," Removes all of the elements from this priority queue.\n The queue will be empty after this call returns.\n"
16456,method,java/util/Observer/update/Observable;Object," This method is called whenever the observed object is changed. An\n application calls an <tt>Observable</tt> object's\n <code>notifyObservers</code> method to have all the object's\n observers notified of the change.\n\n @param   o     the observable object.\n @param   arg   an argument passed to the <code>notifyObservers</code>\n                 method.\n"
16460,method,java/util/Observable/notifyObservers/," If this object has changed, as indicated by the \n <code>hasChanged</code> method, then notify all of its observers \n and then call the <code>clearChanged</code> method to \n indicate that this object has no longer changed. \n <p>\n Each observer has its <code>update</code> method called with two\n arguments: this observable object and <code>null</code>. In other \n words, this method is equivalent to:\n <blockquote><tt>\n notifyObservers(null)</tt></blockquote>\n\n @see     java.util.Observable#clearChanged()\n @see     java.util.Observable#hasChanged()\n @see     java.util.Observer#update(java.util.Observable, java.lang.Object)\n"
16461,method,java/util/Observable/notifyObservers/Object," If this object has changed, as indicated by the \n <code>hasChanged</code> method, then notify all of its observers \n and then call the <code>clearChanged</code> method to indicate \n that this object has no longer changed. \n <p>\n Each observer has its <code>update</code> method called with two\n arguments: this observable object and the <code>arg</code> argument.\n\n @param   arg   any object.\n @see     java.util.Observable#clearChanged()\n @see     java.util.Observable#hasChanged()\n @see     java.util.Observer#update(java.util.Observable, java.lang.Object)\n"
16464,method,java/util/Observable/clearChanged/," Indicates that this object has no longer changed, or that it has \n already notified all of its observers of its most recent change, \n so that the <tt>hasChanged</tt> method will now return <tt>false</tt>. \n This method is called automatically by the \n <code>notifyObservers</code> methods. \n\n @see     java.util.Observable#notifyObservers()\n @see     java.util.Observable#notifyObservers(java.lang.Object)\n"
16465,method,java/util/Observable/hasChanged/," Tests if this object has changed. \n\n @return  <code>true</code> if and only if the <code>setChanged</code> \n          method has been called more recently than the \n          <code>clearChanged</code> method on this object; \n          <code>false</code> otherwise.\n @see     java.util.Observable#clearChanged()\n @see     java.util.Observable#setChanged()\n"
16469,method,java/util/NoSuchElementException/NoSuchElementException/," Constructs a <code>NoSuchElementException</code> with <tt>null</tt> \n as its error message string.\n"
16470,method,java/util/NoSuchElementException/NoSuchElementException/String," Constructs a <code>NoSuchElementException</code>, saving a reference \n to the error message string <tt>s</tt> for later retrieval by the \n <tt>getMessage</tt> method.\n\n @param   s   the detail message.\n"
16472,method,java/util/NavigableSet/lower/Object," Returns the greatest element in this set strictly less than the\n given element, or {@code null} if there is no such element.\n\n @param e the value to match\n @return the greatest element less than {@code e},\n         or {@code null} if there is no such element\n @throws ClassCastException if the specified element cannot be\n         compared with the elements currently in the set\n @throws NullPointerException if the specified element is null\n         and this set does not permit null elements\n"
16484,method,java/util/NavigableSet/subSet/Object;Object," {@inheritDoc}\n\n <p>Equivalent to {@code subSet(fromElement, true, toElement, false)}.\n\n @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
16485,method,java/util/NavigableSet/headSet/Object," {@inheritDoc}\n\n <p>Equivalent to {@code headSet(toElement, false)}.\n\n @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\nna     "
16486,method,java/util/NavigableSet/tailSet/Object," {@inheritDoc}\n\n <p>Equivalent to {@code tailSet(fromElement, true)}.\n\n @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
16488,method,java/util/NavigableMap/lowerEntry/Object," Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or {@code null} if there is\n no such key.\n\n @param key the key\n @return an entry with the greatest key less than {@code key},\n         or {@code null} if there is no such key\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if the specified key is null\n         and this map does not permit null keys\n"
16494,method,java/util/NavigableMap/higherEntry/Object," Returns a key-value mapping associated with the least key\n strictly greater than the given key, or {@code null} if there\n is no such key.\n\n @param key the key\n @return an entry with the least key greater than {@code key},\n         or {@code null} if there is no such key\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if the specified key is null\n         and this map does not permit null keys\n"
16506,method,java/util/NavigableMap/subMap/Object;Object," {@inheritDoc}\n\n <p>Equivalent to {@code subMap(fromKey, true, toKey, false)}.\n\n @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
16507,method,java/util/NavigableMap/headMap/Object," {@inheritDoc}\n\n <p>Equivalent to {@code headMap(toKey, false)}.\n\n @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
16508,method,java/util/NavigableMap/tailMap/Object," {@inheritDoc}\n\n <p>Equivalent to {@code tailMap(fromKey, true)}.\n\n @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
16513,class,java/util/MissingFormatWidthException," Unchecked exception thrown when the format width is required.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to anyg\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.\n\n @version 	1.4, 03/23/10\n @since 1.5\n"
16524,method,java/util/Map/containsKey/Object," Returns <tt>true</tt> if this map contains a mapping for the specified\n key.  More formally, returns <tt>true</tt> if and only if\n this map contains a mapping for a key <tt>k</tt> such that\n <tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be\n at most one such mapping.)\n\n @param key key whose presence in this map is to be tested\n @return <tt>true</tt> if this map contains a mapping for the specified\n         key\n @throws ClassCastException if the key is of an inappropriate type for\n         this map (optional)\n @throws NullPointerException if the specified key is null and this map\n         does not permit null keys (optional)\n"
16526,method,java/util/Map/get/Object," Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n <p>If this map permits null values, then a return value of\n {@code null} does not <i>necessarily</i> indicate that the map\n contains no mapping for the key; it's also possible that the map\n explicitly maps the key to {@code null}.  The {@link #containsKey\n containsKey} operation may be used to distinguish these two cases.\n\n @param key the key whose associated value is to be returned\n @return the value to which the specified key is mapped, or\n         {@code null} if this map contains no mapping for the key\n @throws ClassCastException if the key is of an inappropriate type for\n         this map (optional)\n @throws NullPointerException if the specified key is null and this map\n         does not permit null keys (optional)\n"
16527,method,java/util/Map/put/Object;Object," Associates the specified value with the specified key in this map\n (optional operation).  If the map previously contained a mapping for\n the key, the old value is replaced by the specified value.  (A map\n <tt>m</tt> is said to contain a mapping for a key <tt>k</tt> if and only\n if {@link #containsKey(Object) m.containsKey(k)} would return\n <tt>true</tt>.)\n\n @param key key with which the specified value is to be associated\n @param value value to be associated with the specified key\n @return the previous value associated with <tt>key</tt>, or\n         <tt>null</tt> if there was no mapping for <tt>key</tt>.\n         (A <tt>null</tt> return can also indicate that the map\n         previously associated <tt>null</tt> with <tt>key</tt>,\n         if the implementation supports <tt>null</tt> values.)\n @throws UnsupportedOperationException if the <tt>put</tt> operation\n         is not supported by this map\n @throws ClassCastException if the class of the specified key or value\n         prevents it from being stored in this map\n @throws NullPointerException if the specified key or value is null\n         and this map does not permit null keys or values\n @throws IllegalArgumentException if some property of the specified key\n         or value prevents it from being stored in this map\n"
16528,method,java/util/Map/remove/Object," Removes the mapping for a key from this map if it is present\n (optional operation).   More formally, if this map contains a mapping\n from key <tt>k</tt> to value <tt>v</tt> such that\n <code>(key==null ?  k==null : key.equals(k))</code>, that mapping\n is removed.  (The map can contain at most one such mapping.)\n\n <p>Returns the value to which this map previously associated the key,\n or <tt>null</tt> if the map contained no mapping for the key.\n\n <p>If this map permits null values, then a return value of\n <tt>null</tt> does not <i>necessarily</i> indicate that the map\n contained no mapping for the key; it's also possible that the map\n explicitly mapped the key to <tt>null</tt>.\n\n <p>The map will not contain a mapping for the specified key once the\n call returns.\n\n @param key key whose mapping is to be removed from the map\n @return the previous value associated with <tt>key</tt>, or\n         <tt>null</tt> if there was no mapping for <tt>key</tt>.\n @throws UnsupportedOperationException if the <tt>remove</tt> operation\n         is not supported by this map\n @throws ClassCastException if the key is of an inappropriate type for\n         this map (optional)\n @throws NullPointerException if the specified key is null and this\n         map does not permit null keys (optional)\n"
16529,method,java/util/Map/putAll/Map," Copies all of the mappings from the specified map to this map\n (optional operation).  The effect of this call is equivalent to that\n of calling {@link #put(Object,Object) put(k, v)} on this map once\n for each mapping from key <tt>k</tt> to value <tt>v</tt> in the\n specified map.  The behavior of this operation is undefined if the\n specified map is modified while the operation is in progress.\n\n @param m mappings to be stored in this map\n @throws UnsupportedOperationException if the <tt>putAll</tt> operation\n         is not supported by this map\n @throws ClassCastException if the class of a key or value in the\n         specified map prevents it from being stored in this map\n @throws NullPointerException if the specified map is null, or if\n         this map does not permit null keys or values, and the\n         specified map contains null keys or values\n @throws IllegalArgumentException if some property of a key or value in\n         the specified map prevents it from being stored in this map\n"
16530,method,java/util/Map/clear/," Removes all of the mappings from this map (optional operation).\n The map will be empty after this call returns.\n\n @throws UnsupportedOperationException if the <tt>clear</tt> operation\n         is not supported by this map\n"
16535,method,java/util/Map/hashCode/," Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map's\n <tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt>\n implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two maps\n <tt>m1</tt> and <tt>m2</tt>, as required by the general contract of\n {@link Object#hashCode}.\n\n @return the hash code value for this map\n @see Map.Entry#hashCode()\n @see Object#equals(Object)\n @see #equals(Object)\n"
16541,method,java/util/Map/Entry/hashCode/," Returns the hash code value for this map entry.  The hash code\n of a map entry <tt>e</tt> is defined to be: <pre>\n     (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^\n     (e.getValue()==null ? 0 : e.getValue().hashCode())\n </pre>\n This ensures that <tt>e1.equals(e2)</tt> implies that\n <tt>e1.hashCode()==e2.hashCode()</tt> for any two Entries\n <tt>e1</tt> and <tt>e2</tt>, as required by the general\n contract of <tt>Object.hashCode</tt>.\n\n @return the hash code value for this map entry\n @see Object#hashCode()\n @see Object#equals(Object)\n @see #equals(Object)\n"
16547,method,java/util/Locale/getISOLanguages/," Returns a list of all 2-letter language codes defined in ISO 639.\n Can be used to create Locales.\n [NOTE:  ISO 639 is not a stable standard-- some languages' codes have changed.\n The list this function returns includes both the new and the old codes for the\n languages whose codes have changed.]\n"
16548,method,java/util/Locale/getLanguage/," Returns the language code for this locale, which will either be the empty string\n or a lowercase ISO 639 code.\n <p>NOTE:  ISO 639 is not a stable standard-- some languages' codes have changed.\n Locale's constructor recognizes both the new and the old codes for the languages\n whose codes have changed, but this function always returns the old code.  If you \n want to check for a specific language whose code has changed, don't do <pre> \n if (locale.getLanguage().equals("he")) \n    ... \n </pre>Instead, do<pre> \n if (locale.getLanguage().equals(new Locale("he", "", "").getLanguage())) \n    ...</pre>\n @see #getDisplayLanguage\n"
16562,method,java/util/Locale/clone/," Overrides Cloneable\n"
16563,method,java/util/Locale/hashCode/," Override hashCode.\n Since Locales are often used in hashtables, caches the value\n for speed.\n"
16565,method,java/util/Locale/Locale/String;String;String," Construct a locale from language, country, variant.\n NOTE:  ISO 639 is not a stable standard; some of the language codes it defines\n (specifically iw, ji, and in) have changed.  This constructor accepts both the\n old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other \n API on Locale will return only the OLD codes. \n @param language lowercase two-letter ISO-639 code.\n @param country uppercase two-letter ISO-3166 code.\n @param variant vendor and browser specific code. See class description.\n @exception NullPointerException thrown if any argument is null.\n"
16566,method,java/util/Locale/Locale/String;String," Construct a locale from language, country.\n NOTE:  ISO 639 is not a stable standard; some of the language codes it defines\n (specifically iw, ji, and in) have changed.  This constructor accepts both the\n old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other \n API on Locale will return only the OLD codes. \n @param language lowercase two-letter ISO-639 code.\n @param country uppercase two-letter ISO-3166 code.\n @exception NullPointerException thrown if either argument is null.\n"
16567,method,java/util/Locale/Locale/String," Construct a locale from a language code.\n NOTE:  ISO 639 is not a stable standard; some of the language codes it defines\n (specifically iw, ji, and in) have changed.  This constructor accepts both the\n old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other \n API on Locale will return only the OLD codes. \n @param language lowercase two-letter ISO-639 code.\n @exception NullPointerException thrown if argument is null.\n @since 1.4\n"
16593,method,java/util/ListResourceBundle/handleKeySet/," Returns a <code>Set</code> of the keys contained\n <em>only</em> in this <code>ResourceBundle</code>.\n\n @return a <code>Set</code> of the keys contained only in this\n         <code>ResourceBundle</code>\n @since 1.6\n @see #keySet()\n"
16595,method,java/util/ListResourceBundle/ListResourceBundle/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
16596,interface,java/util/ListIterator,"\n An iterator for lists that allows the programmer\n to traverse the list in either direction, modify\n the list during iteration, and obtain the iterator's\n current position in the list. A <TT>ListIterator</TT>\n has no current element; its <I>cursor position</I> always\n lies between the element that would be returned by a call\n to <TT>previous()</TT> and the element that would be\n returned by a call to <TT>next()</TT>.\n An iterator for a list of length <tt>n</tt> has <tt>n+1</tt> possible\n cursor positions, as illustrated by the carets (<tt>^</tt>) below:\n <PRE>\n                      Element(0)   Element(1)   Element(2)   ... Element(n-1)\n cursor positions:  ^            ^            ^            ^                  ^\n </PRE>\n Note that the {@link #remove} and {@link #set(Object)} methods are\n <i>not</i> defined in terms of the cursor position;  they are defined to\n operate on the last element returned by a call to {@link #next} or {@link\n #previous()}.\n <P>\n This interface is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @author  Josh Bloch\n @version 1.29, 03/23/10\n @see Collection\n @see List\n @see Iterator\n @see Enumeration\n @see List#listIterator()\n @since   1.2\n"
16598,method,java/util/ListIterator/next/," Returns the next element in the list.  This method may be called\n repeatedly to iterate through the list, or intermixed with calls to\n <tt>previous</tt> to go back and forth.  (Note that alternating calls\n to <tt>next</tt> and <tt>previous</tt> will return the same element\n repeatedly.)\n\n @return the next element in the list.\n @exception NoSuchElementException if the iteration has no next element.\n"
16601,method,java/util/ListIterator/nextIndex/," Returns the index of the element that would be returned by a subsequent\n call to <tt>next</tt>. (Returns list size if the list iterator is at the\n end of the list.)\n\n @return the index of the element that would be returned by a subsequent\n 	       call to <tt>next</tt>, or list size if list iterator is at end\n	       of list.\n"
16602,method,java/util/ListIterator/previousIndex/," Returns the index of the element that would be returned by a subsequent\n call to <tt>previous</tt>. (Returns -1 if the list iterator is at the\n beginning of the list.)\n\n @return the index of the element that would be returned by a subsequent\n 	       call to <tt>previous</tt>, or -1 if list iterator is at\n	       beginning of list.\n"
16603,method,java/util/ListIterator/remove/," Removes from the list the last element that was returned by\n <tt>next</tt> or <tt>previous</tt> (optional operation).  This call can\n only be made once per call to <tt>next</tt> or <tt>previous</tt>.  It\n can be made only if <tt>ListIterator.add</tt> has not been called after\n the last call to <tt>next</tt> or <tt>previous</tt>.\n\n @exception UnsupportedOperationException if the <tt>remove</tt>\n            operation is not supported by this list iterator.\n @exception IllegalStateException neither <tt>next</tt> nor\n            <tt>previous</tt> have been called, or <tt>remove</tt> or\n            <tt>add</tt> have been called after the last call to\n            <tt>next</tt> or <tt>previous</tt>.\n"
16604,method,java/util/ListIterator/set/Object," Replaces the last element returned by <tt>next</tt> or\n <tt>previous</tt> with the specified element (optional operation).\n This call can be made only if neither <tt>ListIterator.remove</tt> nor\n <tt>ListIterator.add</tt> have been called after the last call to\n <tt>next</tt> or <tt>previous</tt>.\n\n @param e the element with which to replace the last element returned by\n          <tt>next</tt> or <tt>previous</tt>.\n @exception UnsupportedOperationException if the <tt>set</tt> operation\n 		  is not supported by this list iterator.\n @exception ClassCastException if the class of the specified element\n 		  prevents it from being added to this list.\n @exception IllegalArgumentException if some aspect of the specified\n		  element prevents it from being added to this list.\n @exception IllegalStateException if neither <tt>next</tt> nor\n	          <tt>previous</tt> have been called, or <tt>remove</tt> or\n		  <tt>add</tt> have been called after the last call to\n 		  <tt>next</tt> or <tt>previous</tt>.\n"
16605,method,java/util/ListIterator/add/Object," Inserts the specified element into the list (optional operation).  The\n element is inserted immediately before the next element that would be\n returned by <tt>next</tt>, if any, and after the next element that\n would be returned by <tt>previous</tt>, if any.  (If the list contains\n no elements, the new element becomes the sole element on the list.)\n The new element is inserted before the implicit cursor: a subsequent\n call to <tt>next</tt> would be unaffected, and a subsequent call to\n <tt>previous</tt> would return the new element.  (This call increases\n by one the value that would be returned by a call to <tt>nextIndex</tt>\n or <tt>previousIndex</tt>.)\n\n @param e the element to insert.\n @exception UnsupportedOperationException if the <tt>add</tt> method is\n 		  not supported by this list iterator.\n\n @exception ClassCastException if the class of the specified element\n 		  prevents it from being added to this list.\n\n @exception IllegalArgumentException if some aspect of this element\n            prevents it from being added to this list.\n"
16609,method,java/util/List/contains/Object," Returns <tt>true</tt> if this list contains the specified element.\n More formally, returns <tt>true</tt> if and only if this list contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this list is to be tested\n @return <tt>true</tt> if this list contains the specified element\n @throws ClassCastException if the type of the specified element\n         is incompatible with this list (optional)\n @throws NullPointerException if the specified element is null and this\n         list does not permit null elements (optional)\n"
16612,method,java/util/List/toArray/Object[]," Returns an array containing all of the elements in this list in\n proper sequence (from first to last element); the runtime type of\n the returned array is that of the specified array.  If the list fits\n in the specified array, it is returned therein.  Otherwise, a new\n array is allocated with the runtime type of the specified array and\n the size of this list.\n\n <p>If the list fits in the specified array with room to spare (i.e.,\n the array has more elements than the list), the element in the array\n immediately following the end of the list is set to <tt>null</tt>.\n (This is useful in determining the length of the list <i>only</i> if\n the caller knows that the list does not contain any null elements.)\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a list known to contain only strings.\n The following code can be used to dump the list into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.\n\n @param a the array into which the elements of this list are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.\n @return an array containing the elements of this list\n @throws ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this list\n @throws NullPointerException if the specified array is null\n"
16614,method,java/util/List/remove/Object," Removes the first occurrence of the specified element from this list,\n if it is present (optional operation).  If this list does not contain\n the element, it is unchanged.  More formally, removes the element with\n the lowest index <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>\n (if such an element exists).  Returns <tt>true</tt> if this list\n contained the specified element (or equivalently, if this list changed\n as a result of the call).\n\n @param o element to be removed from this list, if present\n @return <tt>true</tt> if this list contained the specified element\n @throws ClassCastException if the type of the specified element\n         is incompatible with this list (optional)\n @throws NullPointerException if the specified element is null and this\n         list does not permit null elements (optional)\n @throws UnsupportedOperationException if the <tt>remove</tt> operation\n         is not supported by this list\n"
16616,method,java/util/List/addAll/Collection," Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the specified\n collection's iterator (optional operation).  The behavior of this\n operation is undefined if the specified collection is modified while\n the operation is in progress.  (Note that this will occur if the\n specified collection is this list, and it's nonempty.)\n\n @param c collection containing elements to be added to this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws UnsupportedOperationException if the <tt>addAll</tt> operation\n         is not supported by this list\n @throws ClassCastException if the class of an element of the specified\n         collection prevents it from being added to this list\n @throws NullPointerException if the specified collection contains one\n         or more null elements and this list does not permit null\n         elements, or if the specified collection is null\n @throws IllegalArgumentException if some property of an element of the\n         specified collection prevents it from being added to this list\n @see #add(Object)\n"
16617,method,java/util/List/addAll/int;Collection," Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).  Shifts the\n element currently at that position (if any) and any subsequent\n elements to the right (increases their indices).  The new elements\n will appear in this list in the order that they are returned by the\n specified collection's iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress.  (Note that this will occur if the specified\n collection is this list, and it's nonempty.)\n\n @param index index at which to insert the first element from the\n              specified collection\n @param c collection containing elements to be added to this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws UnsupportedOperationException if the <tt>addAll</tt> operation\n         is not supported by this list\n @throws ClassCastException if the class of an element of the specified\n         collection prevents it from being added to this list\n @throws NullPointerException if the specified collection contains one\n         or more null elements and this list does not permit null\n         elements, or if the specified collection is null\n @throws IllegalArgumentException if some property of an element of the\n         specified collection prevents it from being added to this list\n @throws IndexOutOfBoundsException if the index is out of range\n         (<tt>index &lt; 0 || index &gt; size()</tt>)\n"
16618,method,java/util/List/removeAll/Collection," Removes from this list all of its elements that are contained in the\n specified collection (optional operation).\n\n @param c collection containing elements to be removed from this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws UnsupportedOperationException if the <tt>removeAll</tt> operation\n         is not supported by this list\n @throws ClassCastException if the class of an element of this list\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this list contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n @see #contains(Object)\n"
16619,method,java/util/List/retainAll/Collection," Retains only the elements in this list that are contained in the\n specified collection (optional operation).  In other words, removes\n from this list all the elements that are not contained in the specified\n collection.\n\n @param c collection containing elements to be retained in this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws UnsupportedOperationException if the <tt>retainAll</tt> operation\n         is not supported by this list\n @throws ClassCastException if the class of an element of this list\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this list contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n @see #contains(Object)\n"
16620,method,java/util/List/clear/," Removes all of the elements from this list (optional operation).\n The list will be empty after this call returns.\n\n @throws UnsupportedOperationException if the <tt>clear</tt> operation\n         is not supported by this list\n"
16621,method,java/util/List/equals/Object," Compares the specified object with this list for equality.  Returns\n <tt>true</tt> if and only if the specified object is also a list, both\n lists have the same size, and all corresponding pairs of elements in\n the two lists are <i>equal</i>.  (Two elements <tt>e1</tt> and\n <tt>e2</tt> are <i>equal</i> if <tt>(e1==null ? e2==null :\n e1.equals(e2))</tt>.)  In other words, two lists are defined to be\n equal if they contain the same elements in the same order.  This\n definition ensures that the equals method works properly across\n different implementations of the <tt>List</tt> interface.\n\n @param o the object to be compared for equality with this list\n @return <tt>true</tt> if the specified object is equal to this list\n"
16630,method,java/util/List/listIterator/int," Returns a list iterator of the elements in this list (in proper\n sequence), starting at the specified position in this list.\n The specified index indicates the first element that would be\n returned by an initial call to {@link ListIterator#next next}.\n An initial call to {@link ListIterator#previous previous} would\n return the element with the specified index minus one.\n\n @param index index of first element to be returned from the\n              list iterator (by a call to the <tt>next</tt> method)\n @return a list iterator of the elements in this list (in proper\n         sequence), starting at the specified position in this list\n @throws IndexOutOfBoundsException if the index is out of range\n         (<tt>index &lt; 0 || index &gt; size()</tt>)\n"
16639,method,java/util/LinkedList/contains/Object," Returns <tt>true</tt> if this list contains the specified element.\n More formally, returns <tt>true</tt> if and only if this list contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this list is to be tested\n @return <tt>true</tt> if this list contains the specified element\n"
16642,method,java/util/LinkedList/remove/Object," Removes the first occurrence of the specified element from this list,\n if it is present.  If this list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>\n (if such an element exists).  Returns <tt>true</tt> if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call).\n\n @param o element to be removed from this list, if present\n @return <tt>true</tt> if this list contained the specified element\n"
16643,method,java/util/LinkedList/addAll/Collection," Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the specified\n collection's iterator.  The behavior of this operation is undefined if\n the specified collection is modified while the operation is in\n progress.  (Note that this will occur if the specified collection is\n this list, and it's nonempty.)\n\n @param c collection containing elements to be added to this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws NullPointerException if the specified collection is null\n"
16644,method,java/util/LinkedList/addAll/int;Collection," Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in the list in the order that they are returned by the\n specified collection's iterator.\n\n @param index index at which to insert the first element\n              from the specified collection\n @param c collection containing elements to be added to this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws IndexOutOfBoundsException {@inheritDoc}\n @throws NullPointerException if the specified collection is null\n"
16646,method,java/util/LinkedList/get/int," Returns the element at the specified position in this list.\n\n @param index index of the element to return\n @return the element at the specified position in this list\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
16647,method,java/util/LinkedList/set/int;Object," Replaces the element at the specified position in this list with the\n specified element.\n\n @param index index of the element to replace\n @param element element to be stored at the specified position\n @return the element previously at the specified position\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
16648,method,java/util/LinkedList/add/int;Object," Inserts the specified element at the specified position in this list.\n Shifts the element currently at that position (if any) and any\n subsequent elements to the right (adds one to their indices).\n\n @param index index at which the specified element is to be inserted\n @param element element to be inserted\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
16649,method,java/util/LinkedList/remove/int," Removes the element at the specified position in this list.  Shifts any\n subsequent elements to the left (subtracts one from their indices).\n Returns the element that was removed from the list.\n\n @param index the index of the element to be removed\n @return the element previously at the specified position\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
16667,method,java/util/LinkedList/listIterator/int," Returns a list-iterator of the elements in this list (in proper\n sequence), starting at the specified position in the list.\n Obeys the general contract of <tt>List.listIterator(int)</tt>.<p>\n\n The list-iterator is <i>fail-fast</i>: if the list is structurally\n modified at any time after the Iterator is created, in any way except\n through the list-iterator's own <tt>remove</tt> or <tt>add</tt>\n methods, the list-iterator will throw a\n <tt>ConcurrentModificationException</tt>.  Thus, in the face of\n concurrent modification, the iterator fails quickly and cleanly, rather\n than risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.\n\n @param index index of the first element to be returned from the\n              list-iterator (by a call to <tt>next</tt>)\n @return a ListIterator of the elements in this list (in proper\n         sequence), starting at the specified position in the list\n @throws IndexOutOfBoundsException {@inheritDoc}\n @see List#listIterator(int)\n"
16681,method,java/util/LinkedHashMap/get/Object," Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.\n"
16682,method,java/util/LinkedHashMap/clear/," Removes all of the mappings from this map.\n The map will be empty after this call returns.\n"
16689,interface,java/util/Iterator," An iterator over a collection.  Iterator takes the place of Enumeration in\n the Java collections framework.  Iterators differ from enumerations in two\n ways: <ul>\n	<li> Iterators allow the caller to remove elements from the\n	     underlying collection during the iteration with well-defined\n 	     semantics.\n	<li> Method names have been improved.\n </ul><p>\n\n This interface is a member of the \n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @author  Josh Bloch\n @version 1.28, 03/23/10\n @see Collection\n @see ListIterator\n @see Enumeration\n @since 1.2\n"
16692,method,java/util/Iterator/remove/," \n Removes from the underlying collection the last element returned by the\n iterator (optional operation).  This method can be called only once per\n call to <tt>next</tt>.  The behavior of an iterator is unspecified if\n the underlying collection is modified while the iteration is in\n progress in any way other than by calling this method.\n\n @exception UnsupportedOperationException if the <tt>remove</tt>\n		  operation is not supported by this Iterator.\n\n @exception IllegalStateException if the <tt>next</tt> method has not\n		  yet been called, or the <tt>remove</tt> method has already\n		  been called after the last call to the <tt>next</tt>\n		  method.\n"
16693,class,java/util/InvalidPropertiesFormatException," Thrown to indicate that an operation could not complete because\n the input did not conform to the appropriate XML document type\n for a collection of properties, as per the {@link Properties} \n specification.<p>\n \n Note, that although InvalidPropertiesFormatException inherits Serializable\n interface from Exception, it is not intended to be Serializable. Appropriate\n serialization methods are implemented to throw NotSerializableException.\n\n @version 1.5 10/03/23\n @see     Properties\n @since   1.5\n @serial exclude\n"
16697,method,java/util/InputMismatchException/InputMismatchException/," Constructs an <code>InputMismatchException</code> with <tt>null</tt> \n as its error message string.\n"
16698,method,java/util/InputMismatchException/InputMismatchException/String," Constructs an <code>InputMismatchException</code>, saving a reference \n to the error message string <tt>s</tt> for later retrieval by the \n <tt>getMessage</tt> method.\n\n @param   s   the detail message.\n"
16724,method,java/util/IdentityHashMap/get/Object," Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key == k)},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.\n\n @see #put(Object, Object)\n"
16730,method,java/util/IdentityHashMap/clear/," Removes all of the mappings from this map.\n The map will be empty after this call returns.\n"
16731,method,java/util/IdentityHashMap/equals/Object," Compares the specified object with this map for equality.  Returns\n <tt>true</tt> if the given object is also a map and the two maps\n represent identical object-reference mappings.  More formally, this\n map is equal to another map <tt>m</tt> if and only if\n <tt>this.entrySet().equals(m.entrySet())</tt>.\n\n <p><b>Owing to the reference-equality-based semantics of this map it is\n possible that the symmetry and transitivity requirements of the\n <tt>Object.equals</tt> contract may be violated if this map is compared\n to a normal map.  However, the <tt>Object.equals</tt> contract is\n guaranteed to hold among <tt>IdentityHashMap</tt> instances.</b>\n\n @param  o object to be compared for equality with this map\n @return <tt>true</tt> if the specified object is equal to this map\n @see Object#equals(Object)\n"
16732,method,java/util/IdentityHashMap/hashCode/," Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map's\n <tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt>\n implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two\n <tt>IdentityHashMap</tt> instances <tt>m1</tt> and <tt>m2</tt>, as\n required by the general contract of {@link Object#hashCode}.\n\n <p><b>Owing to the reference-equality-based semantics of the\n <tt>Map.Entry</tt> instances in the set returned by this map's\n <tt>entrySet</tt> method, it is possible that the contractual\n requirement of <tt>Object.hashCode</tt> mentioned in the previous\n paragraph will be violated if one of the two objects being compared is\n an <tt>IdentityHashMap</tt> instance and the other is a normal map.</b>\n\n @return the hash code value for this map\n @see Object#equals(Object)\n @see #equals(Object)\n"
16736,method,java/util/IdentityHashMap/entrySet/," Returns a {@link Set} view of the mappings contained in this map.\n Each element in the returned set is a reference-equality-based\n <tt>Map.Entry</tt>.  The set is backed by the map, so changes\n to the map are reflected in the set, and vice-versa.  If the\n map is modified while an iteration over the set is in progress,\n the results of the iteration are undefined.  The set supports\n element removal, which removes the corresponding mapping from\n the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt>\n methods.  It does not support the <tt>add</tt> or\n <tt>addAll</tt> methods.\n\n <p>Like the backing map, the <tt>Map.Entry</tt> objects in the set\n returned by this method define key and value equality as\n reference-equality rather than object-equality.  This affects the\n behavior of the <tt>equals</tt> and <tt>hashCode</tt> methods of these\n <tt>Map.Entry</tt> objects.  A reference-equality based <tt>Map.Entry\n e</tt> is equal to an object <tt>o</tt> if and only if <tt>o</tt> is a\n <tt>Map.Entry</tt> and <tt>e.getKey()==o.getKey() &amp;&amp;\n e.getValue()==o.getValue()</tt>.  To accommodate these equals\n semantics, the <tt>hashCode</tt> method returns\n <tt>System.identityHashCode(e.getKey()) ^\n System.identityHashCode(e.getValue())</tt>.\n\n <p><b>Owing to the reference-equality-based semantics of the\n <tt>Map.Entry</tt> instances in the set returned by this method,\n it is possible that the symmetry and transitivity requirements of\n the {@link Object#equals(Object)} contract may be violated if any of\n the entries in the set is compared to a normal map entry, or if\n the set returned by this method is compared to a set of normal map\n entries (such as would be returned by a call to this method on a normal\n map).  However, the <tt>Object.equals</tt> contract is guaranteed to\n hold among identity-based map entries, and among sets of such entries.\n </b>\n\n @return a set view of the identity-mappings contained in this map\n"
16738,method,java/util/IdentityHashMap/IdentityHashMap/int," Constructs a new, empty map with the specified expected maximum size.\n Putting more than the expected number of key-value mappings into\n the map may cause the internal data structure to grow, which may be\n somewhat time-consuming.\n\n @param expectedMaxSize the expected maximum size of the map\n @throws IllegalArgumentException if <tt>expectedMaxSize</tt> is negative\n"
16745,method,java/util/Hashtable/contains/Object," Tests if some key maps into the specified value in this hashtable.\n This operation is more expensive than the {@link #containsKey\n containsKey} method.\n\n <p>Note that this method is identical in functionality to\n {@link #containsValue containsValue}, (which is part of the\n {@link Map} interface in the collections framework).\n\n @param      value   a value to search for\n @return     <code>true</code> if and only if some key maps to the\n             <code>value</code> argument in this hashtable as\n             determined by the <tt>equals</tt> method;\n             <code>false</code> otherwise.\n @exception  NullPointerException  if the value is <code>null</code>\n"
16746,method,java/util/Hashtable/containsValue/Object," Returns true if this hashtable maps one or more keys to this value.\n\n <p>Note that this method is identical in functionality to {@link\n #contains contains} (which predates the {@link Map} interface).\n\n @param value value whose presence in this hashtable is to be tested\n @return <tt>true</tt> if this map maps one or more keys to the\n         specified value\n @throws NullPointerException  if the value is <code>null</code>\n @since 1.2\n"
16747,method,java/util/Hashtable/containsKey/Object," Tests if the specified object is a key in this hashtable.\n\n @param   key   possible key\n @return  <code>true</code> if and only if the specified object\n          is a key in this hashtable, as determined by the\n          <tt>equals</tt> method; <code>false</code> otherwise.\n @throws  NullPointerException  if the key is <code>null</code>\n @see     #contains(Object)\n"
16749,method,java/util/Hashtable/rehash/," Increases the capacity of and internally reorganizes this\n hashtable, in order to accommodate and access its entries more\n efficiently.  This method is called automatically when the\n number of keys in the hashtable exceeds this hashtable's capacity\n and load factor.\n"
16750,method,java/util/Hashtable/put/Object;Object," Maps the specified <code>key</code> to the specified\n <code>value</code> in this hashtable. Neither the key nor the\n value can be <code>null</code>. <p>\n\n The value can be retrieved by calling the <code>get</code> method\n with a key that is equal to the original key.\n\n @param      key     the hashtable key\n @param      value   the value\n @return     the previous value of the specified key in this hashtable,\n             or <code>null</code> if it did not have one\n @exception  NullPointerException  if the key or value is\n               <code>null</code>\n @see     Object#equals(Object)\n @see     #get(Object)\n"
16766,method,java/util/HashSet/iterator/," Returns an iterator over the elements in this set.  The elements\n are returned in no particular order.\n\n @return an Iterator over the elements in this set\n @see ConcurrentModificationException\n"
16769,method,java/util/HashSet/contains/Object," Returns <tt>true</tt> if this set contains the specified element.\n More formally, returns <tt>true</tt> if and only if this set\n contains an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this set is to be tested\n @return <tt>true</tt> if this set contains the specified element\n"
16770,method,java/util/HashSet/add/Object," Adds the specified element to this set if it is not already present.\n More formally, adds the specified element <tt>e</tt> to this set if\n this set contains no element <tt>e2</tt> such that\n <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns <tt>false</tt>.\n\n @param e element to be added to this set\n @return <tt>true</tt> if this set did not already contain the specified\n element\n"
16771,method,java/util/HashSet/remove/Object," Removes the specified element from this set if it is present.\n More formally, removes an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,\n if this set contains such an element.  Returns <tt>true</tt> if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)\n\n @param o object to be removed from this set, if present\n @return <tt>true</tt> if the set contained the specified element\n"
16772,method,java/util/HashSet/clear/," Removes all of the elements from this set.\n The set will be empty after this call returns.\n"
16781,method,java/util/HashMap/get/Object," Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.\n\n @see #put(Object, Object)\n"
16786,method,java/util/HashMap/clear/," Removes all of the mappings from this map.\n The map will be empty after this call returns.\n"
16796,class,java/util/GregorianCalendar," <code>GregorianCalendar</code> is a concrete subclass of\n <code>Calendar</code> and provides the standard calendar system\n used by most of the world.\n\n <p> <code>GregorianCalendar</code> is a hybrid calendar that\n supports both the Julian and Gregorian calendar systems with the\n support of a single discontinuity, which corresponds by default to\n the Gregorian date when the Gregorian calendar was instituted\n (October 15, 1582 in some countries, later in others).  The cutover\n date may be changed by the caller by calling {@link\n #setGregorianChange(Date) setGregorianChange()}.\n\n <p>\n Historically, in those countries which adopted the Gregorian calendar first,\n October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models\n this correctly.  Before the Gregorian cutover, <code>GregorianCalendar</code>\n implements the Julian calendar.  The only difference between the Gregorian\n and the Julian calendar is the leap year rule. The Julian calendar specifies\n leap years every four years, whereas the Gregorian calendar omits century\n years which are not divisible by 400.\n\n <p>\n <code>GregorianCalendar</code> implements <em>proleptic</em> Gregorian and\n Julian calendars. That is, dates are computed by extrapolating the current\n rules indefinitely far backward and forward in time. As a result,\n <code>GregorianCalendar</code> may be used for all years to generate\n meaningful and consistent results. However, dates obtained using\n <code>GregorianCalendar</code> are historically accurate only from March 1, 4\n AD onward, when modern Julian calendar rules were adopted.  Before this date,\n leap year rules were applied irregularly, and before 45 BC the Julian\n calendar did not even exist.\n\n <p>\n Prior to the institution of the Gregorian calendar, New Year's Day was\n March 25. To avoid confusion, this calendar always uses January 1. A manual\n adjustment may be made if desired for dates that are prior to the Gregorian\n changeover and which fall between January 1 and March 24.\n\n <p>Values calculated for the <code>WEEK_OF_YEAR</code> field range from 1 to\n 53.  Week 1 for a year is the earliest seven day period starting on\n <code>getFirstDayOfWeek()</code> that contains at least\n <code>getMinimalDaysInFirstWeek()</code> days from that year.  It thus\n depends on the values of <code>getMinimalDaysInFirstWeek()</code>,\n <code>getFirstDayOfWeek()</code>, and the day of the week of January 1.\n Weeks between week 1 of one year and week 1 of the following year are\n numbered sequentially from 2 to 52 or 53 (as needed).\n\n <p>For example, January 1, 1998 was a Thursday.  If\n <code>getFirstDayOfWeek()</code> is <code>MONDAY</code> and\n <code>getMinimalDaysInFirstWeek()</code> is 4 (these are the values\n reflecting ISO 8601 and many national standards), then week 1 of 1998 starts\n on December 29, 1997, and ends on January 4, 1998.  If, however,\n <code>getFirstDayOfWeek()</code> is <code>SUNDAY</code>, then week 1 of 1998\n starts on January 4, 1998, and ends on January 10, 1998; the first three days\n of 1998 then are part of week 53 of 1997.\n\n <p>Values calculated for the <code>WEEK_OF_MONTH</code> field range from 0\n to 6.  Week 1 of a month (the days with <code>WEEK_OF_MONTH =\n 1</code>) is the earliest set of at least\n <code>getMinimalDaysInFirstWeek()</code> contiguous days in that month,\n ending on the day before <code>getFirstDayOfWeek()</code>.  Unlike\n week 1 of a year, week 1 of a month may be shorter than 7 days, need\n not start on <code>getFirstDayOfWeek()</code>, and will not include days of\n the previous month.  Days of a month before week 1 have a\n <code>WEEK_OF_MONTH</code> of 0.\n\n <p>For example, if <code>getFirstDayOfWeek()</code> is <code>SUNDAY</code>\n and <code>getMinimalDaysInFirstWeek()</code> is 4, then the first week of\n January 1998 is Sunday, January 4 through Saturday, January 10.  These days\n have a <code>WEEK_OF_MONTH</code> of 1.  Thursday, January 1 through\n Saturday, January 3 have a <code>WEEK_OF_MONTH</code> of 0.  If\n <code>getMinimalDaysInFirstWeek()</code> is changed to 3, then January 1\n through January 3 have a <code>WEEK_OF_MONTH</code> of 1.\n\n <p>The <code>clear</code> methods set calendar field(s)\n undefined. <code>GregorianCalendar</code> uses the following\n default value for each calendar field if its value is undefined.\n\n <table cellpadding="0" cellspacing="3" border="0"\n	  summary="GregorianCalendar default field values" \n	  style="text-align: left; width: 66%;">\n   <tbody>\n     <tr>\n       <th style="vertical-align: top; background-color: rgb(204, 204, 255);\n	     text-align: center;">Field<br>\n       </th>\n       <th style="vertical-align: top; background-color: rgb(204, 204, 255);\n	     text-align: center;">Default Value<br>\n       </th>\n     </tr>\n     <tr>\n       <td style="vertical-align: middle;">\n		<code>ERA<br></code>\n	 </td>\n       <td style="vertical-align: middle;">\n		<code>AD<br></code>\n	 </td>\n     </tr>\n     <tr>\n       <td style="vertical-align: middle; background-color: rgb(238, 238, 255);">\n		<code>YEAR<br></code>\n	 </td>\n       <td style="vertical-align: middle; background-color: rgb(238, 238, 255);">\n		<code>1970<br></code>\n	 </td>\n     </tr>\n     <tr>\n       <td style="vertical-align: middle;">\n		<code>MONTH<br></code>\n	 </td>\n       <td style="vertical-align: middle;">\n		<code>JANUARY<br></code>\n	 </td>\n     </tr>\n     <tr>\n       <td style="vertical-align: top; background-color: rgb(238, 238, 255);">\n		<code>DAY_OF_MONTH<br></code>\n	 </td>\n       <td style="vertical-align: top; background-color: rgb(238, 238, 255);">\n		<code>1<br></code>\n	 </td>\n     </tr>\n     <tr>\n       <td style="vertical-align: middle;">\n		<code>DAY_OF_WEEK<br></code>\n	 </td>\n       <td style="vertical-align: middle;">\n		<code>the first day of week<br></code>\n	 </td>\n     </tr>\n     <tr>\n       <td style="vertical-align: top; background-color: rgb(238, 238, 255);">\n		<code>WEEK_OF_MONTH<br></code>\n       </td>\n       <td style="vertical-align: top; background-color: rgb(238, 238, 255);">\n		<code>0<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style="vertical-align: top;">\n		<code>DAY_OF_WEEK_IN_MONTH<br></code>\n       </td>\n       <td style="vertical-align: top;">\n		<code>1<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style="vertical-align: middle; background-color: rgb(238, 238, 255);">\n		<code>AM_PM<br></code>\n       </td>\n       <td style="vertical-align: middle; background-color: rgb(238, 238, 255);">\n		<code>AM<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style="vertical-align: middle;">\n		<code>HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND<br></code>\n       </td>\n       <td style="vertical-align: middle;">\n		<code>0<br></code>\n       </td>\n     </tr>\n   </tbody>\n </table>\n <br>Default values are not applicable for the fields not listed above.\n\n <p>\n <strong>Example:</strong>\n <blockquote>\n <pre>\n // get the supported ids for GMT-08:00 (Pacific Standard Time)\n String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);\n // if no ids were returned, something is wrong. get out.\n if (ids.length == 0)\n     System.exit(0);\n\n  // begin output\n System.out.println("Current Time");\n\n // create a Pacific Standard Time time zone\n SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);\n\n // set up rules for daylight savings time\n pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);\n pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);\n\n // create a GregorianCalendar with the Pacific Daylight time zone\n // and the current date and time\n Calendar calendar = new GregorianCalendar(pdt);\n Date trialTime = new Date();\n calendar.setTime(trialTime);\n\n // print out a bunch of interesting things\n System.out.println("ERA: " + calendar.get(Calendar.ERA));\n System.out.println("YEAR: " + calendar.get(Calendar.YEAR));\n System.out.println("MONTH: " + calendar.get(Calendar.MONTH));\n System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR));\n System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH));\n System.out.println("DATE: " + calendar.get(Calendar.DATE));\n System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH));\n System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR));\n System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK));\n System.out.println("DAY_OF_WEEK_IN_MONTH: "\n                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));\n System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM));\n System.out.println("HOUR: " + calendar.get(Calendar.HOUR));\n System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY));\n System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE));\n System.out.println("SECOND: " + calendar.get(Calendar.SECOND));\n System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND));\n System.out.println("ZONE_OFFSET: "\n                    + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));\n System.out.println("DST_OFFSET: "\n                    + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000)));\n\n System.out.println("Current Time, with hour reset to 3");\n calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override\n calendar.set(Calendar.HOUR, 3);\n System.out.println("ERA: " + calendar.get(Calendar.ERA));\n System.out.println("YEAR: " + calendar.get(Calendar.YEAR));\n System.out.println("MONTH: " + calendar.get(Calendar.MONTH));\n System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR));\n System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH));\n System.out.println("DATE: " + calendar.get(Calendar.DATE));\n System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH));\n System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR));\n System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK));\n System.out.println("DAY_OF_WEEK_IN_MONTH: "\n                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));\n System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM));\n System.out.println("HOUR: " + calendar.get(Calendar.HOUR));\n System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY));\n System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE));\n System.out.println("SECOND: " + calendar.get(Calendar.SECOND));\n System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND));\n System.out.println("ZONE_OFFSET: "\n        + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours\n System.out.println("DST_OFFSET: "\n        + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours\n </pre>\n </blockquote>\n\n @see          TimeZone\n @version      1.93\n @author David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu\n @since JDK1.1\n"
16800,method,java/util/GregorianCalendar/equals/Object," Compares this <code>GregorianCalendar</code> to the specified\n <code>Object</code>. The result is <code>true</code> if and\n only if the argument is a <code>GregorianCalendar</code> object\n that represents the same time value (millisecond offset from\n the <a href="Calendar.html#Epoch">Epoch</a>) under the same\n <code>Calendar</code> parameters and Gregorian change date as\n this object.\n\n @param obj the object to compare with.\n @return <code>true</code> if this object is equal to <code>obj</code>;\n <code>false</code> otherwise.\n @see Calendar#compareTo(Calendar)\n"
16802,method,java/util/GregorianCalendar/add/int;int," Adds the specified (signed) amount of time to the given calendar field,\n based on the calendar's rules.\n\n <p><em>Add rule 1</em>. The value of <code>field</code>\n after the call minus the value of <code>field</code> before the\n call is <code>amount</code>, modulo any overflow that has occurred in\n <code>field</code>. Overflow occurs when a field value exceeds its\n range and, as a result, the next larger field is incremented or\n decremented and the field value is adjusted back into its range.</p>\n\n <p><em>Add rule 2</em>. If a smaller field is expected to be\n invariant, but it is impossible for it to be equal to its\n prior value because of changes in its minimum or maximum after\n <code>field</code> is changed, then its value is adjusted to be as close\n as possible to its expected value. A smaller field represents a\n smaller unit of time. <code>HOUR</code> is a smaller field than\n <code>DAY_OF_MONTH</code>. No adjustment is made to smaller fields\n that are not expected to be invariant. The calendar system\n determines what fields are expected to be invariant.</p>\n\n @param field the calendar field.\n @param amount the amount of date or time to be added to the field.\n @exception IllegalArgumentException if <code>field</code> is\n <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,\n or if any calendar fields have out-of-range values in\n non-lenient mode.\n"
16803,method,java/util/GregorianCalendar/roll/int;boolean," Adds or subtracts (up/down) a single unit of time on the given time\n field without changing larger fields. \n <p>\n <em>Example</em>: Consider a <code>GregorianCalendar</code>\n originally set to December 31, 1999. Calling {@link #roll(int,boolean) roll(Calendar.MONTH, true)}\n sets the calendar to January 31, 1999.  The <code>YEAR</code> field is unchanged\n because it is a larger field than <code>MONTH</code>.</p>\n\n @param up indicates if the value of the specified calendar field is to be\n rolled up or rolled down. Use <code>true</code> if rolling up, <code>false</code> otherwise.\n @exception IllegalArgumentException if <code>field</code> is\n <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,\n or if any calendar fields have out-of-range values in\n non-lenient mode.\n @see #add(int,int)\n @see #set(int,int)\n"
16804,method,java/util/GregorianCalendar/roll/int;int," Adds a signed amount to the specified calendar field without changing larger fields.\n A negative roll amount means to subtract from field without changing \n larger fields. If the specified amount is 0, this method performs nothing.\n\n <p>This method calls {@link #complete()} before adding the\n amount so that all the calendar fields are normalized. If there\n is any calendar field having an out-of-range value in non-lenient mode, then an\n <code>IllegalArgumentException</code> is thrown.\n\n <p>\n <em>Example</em>: Consider a <code>GregorianCalendar</code>\n originally set to August 31, 1999. Calling <code>roll(Calendar.MONTH,\n 8)</code> sets the calendar to April 30, <strong>1999</strong>. Using a\n <code>GregorianCalendar</code>, the <code>DAY_OF_MONTH</code> field cannot\n be 31 in the month April. <code>DAY_OF_MONTH</code> is set to the closest possible\n value, 30. The <code>YEAR</code> field maintains the value of 1999 because it\n is a larger field than <code>MONTH</code>.\n <p>\n <em>Example</em>: Consider a <code>GregorianCalendar</code>\n originally set to Sunday June 6, 1999. Calling\n <code>roll(Calendar.WEEK_OF_MONTH, -1)</code> sets the calendar to\n Tuesday June 1, 1999, whereas calling\n <code>add(Calendar.WEEK_OF_MONTH, -1)</code> sets the calendar to\n Sunday May 30, 1999. This is because the roll rule imposes an\n additional constraint: The <code>MONTH</code> must not change when the\n <code>WEEK_OF_MONTH</code> is rolled. Taken together with add rule 1,\n the resultant date must be between Tuesday June 1 and Saturday June\n 5. According to add rule 2, the <code>DAY_OF_WEEK</code>, an invariant\n when changing the <code>WEEK_OF_MONTH</code>, is set to Tuesday, the\n closest possible value to Sunday (where Sunday is the first day of the\n week).</p>\n\n @param field the calendar field.\n @param amount the signed amount to add to <code>field</code>.\n @exception IllegalArgumentException if <code>field</code> is\n <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,\n or if any calendar fields have out-of-range values in\n non-lenient mode.\n @see #roll(int,boolean)\n @see #add(int,int)\n @see #set(int,int)\n @since 1.2\n"
16814,method,java/util/GregorianCalendar/computeFields/," Converts the time value (millisecond offset from the <a\n href="Calendar.html#Epoch">Epoch</a>) to calendar field values.\n The time is <em>not</em>\n recomputed first; to recompute the time, then the fields, call the\n <code>complete</code> method.\n\n @see Calendar#complete\n"
16823,field,java/util/GregorianCalendar/BC," Value of the <code>ERA</code> field indicating\n the period before the common era (before Christ), also known as BCE.\n The sequence of years at the transition from <code>BC</code> to <code>AD</code> is\n ..., 2 BC, 1 BC, 1 AD, 2 AD,...\n\n @see #ERA\n"
16828,method,java/util/Formatter/locale/," Returns the locale set by the construction of this formatter.\n\n <p> The {@link #format(java.util.Locale,String,Object...) format} method\n for this object which has a locale argument does not change this value.\n\n @return  <tt>null</tt> if no localization is applied, otherwise a\n          locale\n\n @throws  FormatterClosedException\n          If this formatter has been closed by invoking its {@link\n          #close()} method\n"
16829,method,java/util/Formatter/out/," Returns the destination for the output.\n\n @return  The destination for the output\n\n @throws  FormatterClosedException\n          If this formatter has been closed by invoking its {@link\n          #close()} method\n"
16830,method,java/util/Formatter/toString/," Returns the result of invoking <tt>toString()</tt> on the destination\n for the output.  For example, the following code formats text into a\n {@link StringBuilder} then retrieves the resultant string:\n\n <blockquote><pre>\n   Formatter f = new Formatter();\n   f.format("Last reboot at %tc", lastRebootDate);\n   String s = f.toString();\n   // -&gt; s == "Last reboot at Sat Jan 01 00:00:00 PST 2000"\n </pre></blockquote>\n\n <p> An invocation of this method behaves in exactly the same way as the\n invocation\n\n <pre>\n     out().toString() </pre>\n\n <p> Depending on the specification of <tt>toString</tt> for the {@link\n Appendable}, the returned string may or may not contain the characters\n written to the destination.  For instance, buffers typically return\n their contents in <tt>toString()</tt>, but streams cannot since the\n data is discarded.\n\n @return  The result of invoking <tt>toString()</tt> on the destination\n          for the output\n\n @throws  FormatterClosedException\n          If this formatter has been closed by invoking its {@link\n          #close()} method\n"
16831,method,java/util/Formatter/flush/," Flushes this formatter.  If the destination implements the {@link\n java.io.Flushable} interface, its <tt>flush</tt> method will be invoked.\n\n <p> Flushing a formatter writes any buffered output in the destination\n to the underlying stream.\n\n @throws  FormatterClosedException\n          If this formatter has been closed by invoking its {@link\n          #close()} method\n"
16832,method,java/util/Formatter/close/," Closes this formatter.  If the destination implements the {@link\n java.io.Closeable} interface, its <tt>close</tt> method will be invoked.\n\n <p> Closing a formatter allows it to release resources it may be holding\n (such as open files).  If the formatter is already closed, then invoking\n this method has no effect.\n\n <p> Attempting to invoke any methods except {@link #ioException()} in\n this formatter after it has been closed will result in a {@link\n FormatterClosedException}.\n"
16833,method,java/util/Formatter/ioException/," Returns the <tt>IOException</tt> last thrown by this formatter's {@link\n Appendable}.\n\n <p> If the destination's <tt>append()</tt> method never throws\n <tt>IOException</tt>, then this method will always return <tt>null</tt>.\n\n @return  The last exception thrown by the Appendable or <tt>null</tt> if\n          no such exception exists.\n"
16834,method,java/util/Formatter/format/String;Object[]," Writes a formatted string to this object's destination using the\n specified format string and arguments.  The locale used is the one\n defined during the construction of this formatter.\n\n @param  format\n         A format string as described in <a href="#syntax">Format string\n         syntax</a>.\n\n @param  args\n         Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href="http://java.sun.com/docs/books/vmspec/">Java\n         Virtual Machine Specification</a>.\n\n @throws  IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a href="#detail">Details</a>\n          section of the formatter class specification.\n\n @throws  FormatterClosedException\n          If this formatter has been closed by invoking its {@link\n          #close()} method\n\n @return  This formatter\n"
16836,method,java/util/Formatter/Formatter/," Constructs a new formatter.\n\n <p> The destination of the formatted output is a {@link StringBuilder}\n which may be retrieved by invoking {@link #out out()} and whose\n current content may be converted into a string by invoking {@link\n #toString toString()}.  The locale used is the {@linkplain\n Locale#getDefault() default locale} for this instance of the Java\n virtual machine.\n"
16838,method,java/util/Formatter/Formatter/Locale," Constructs a new formatter with the specified locale.\n\n <p> The destination of the formatted output is a {@link StringBuilder}\n which may be retrieved by invoking {@link #out out()} and whose current\n content may be converted into a string by invoking {@link #toString\n toString()}.\n\n @param  l\n         The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.\n"
16840,method,java/util/Formatter/Formatter/String," Constructs a new formatter with the specified file name.\n\n <p> The charset used is the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n <p> The locale used is the {@linkplain Locale#getDefault() default\n locale} for this instance of the Java virtual machine.\n\n @param  fileName\n         The name of the file to use as the destination of this\n         formatter.  If the file exists then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered.\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(fileName)} denies write\n          access to the file\n\n @throws  FileNotFoundException\n          If the given file name does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n"
16841,method,java/util/Formatter/Formatter/String;String," Constructs a new formatter with the specified file name and charset.\n\n <p> The locale used is the {@linkplain Locale#getDefault default\n locale} for this instance of the Java virtual machine.\n\n @param  fileName\n         The name of the file to use as the destination of this\n         formatter.  If the file exists then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered.\n\n @param  csn\n         The name of a supported {@linkplain java.nio.charset.Charset\n         charset}\n\n @throws  FileNotFoundException\n          If the given file name does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(fileName)} denies write\n          access to the file\n\n @throws  UnsupportedEncodingException\n          If the named charset is not supported\n"
16842,method,java/util/Formatter/Formatter/String;String;Locale," Constructs a new formatter with the specified file name, charset, and\n locale.\n\n @param  fileName\n         The name of the file to use as the destination of this\n         formatter.  If the file exists then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered.\n\n @param  csn\n         The name of a supported {@linkplain java.nio.charset.Charset\n         charset}\n\n @param  l\n         The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.\n\n @throws  FileNotFoundException\n          If the given file name does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(fileName)} denies write\n          access to the file\n\n @throws  UnsupportedEncodingException\n          If the named charset is not supported\n"
16843,method,java/util/Formatter/Formatter/File," Constructs a new formatter with the specified file.\n\n <p> The charset used is the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n <p> The locale used is the {@linkplain Locale#getDefault() default\n locale} for this instance of the Java virtual machine.\n\n @param  file\n         The file to use as the destination of this formatter.  If the\n         file exists then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered.\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(file.getPath())} denies\n          write access to the file\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n"
16844,method,java/util/Formatter/Formatter/File;String," Constructs a new formatter with the specified file and charset.\n\n <p> The locale used is the {@linkplain Locale#getDefault default\n locale} for this instance of the Java virtual machine.\n\n @param  file\n         The file to use as the destination of this formatter.  If the\n         file exists then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered.\n\n @param  csn\n         The name of a supported {@linkplain java.nio.charset.Charset\n         charset}\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(file.getPath())} denies\n          write access to the file\n\n @throws  UnsupportedEncodingException\n          If the named charset is not supported\n"
16845,method,java/util/Formatter/Formatter/File;String;Locale," Constructs a new formatter with the specified file, charset, and\n locale.\n\n @param  file\n         The file to use as the destination of this formatter.  If the\n         file exists then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered.\n\n @param  csn\n         The name of a supported {@linkplain java.nio.charset.Charset\n         charset}\n\n @param  l\n         The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.\n\n @throws  FileNotFoundException\n          If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file\n\n @throws  SecurityException\n          If a security manager is present and {@link\n          SecurityManager#checkWrite checkWrite(file.getPath())} denies\n          write access to the file\n\n @throws  UnsupportedEncodingException\n          If the named charset is not supported\n"
16856,field,java/util/FormattableFlags/LEFT_JUSTIFY," Left-justifies the output.  Spaces (<tt>'&#92;u0020'</tt>) will be added\n at the end of the converted value as required to fill the minimum width\n of the field.  If this flag is not set then the output will be\n right-justified.\n\n <p> This flag corresponds to <tt>'-'</tt> (<tt>'&#92;u002d'</tt>) in\n the format specifier.\n"
16858,field,java/util/FormattableFlags/ALTERNATE," Requires the output to use an alternate form.  The definition of the\n form is specified by the <tt>Formattable</tt>.\n\n <p> This flag corresponds to <tt>'#'</tt> (<tt>'&#92;u0023'</tt>) in\n the format specifier.\n"
16859,interface,java/util/Formattable," The <tt>Formattable</tt> interface must be implemented by any class that\n needs to perform custom formatting using the <tt>'s'</tt> conversion\n specifier of {@link java.util.Formatter}.  This interface allows basic\n control for formatting arbitrary objects.\n\n For example, the following class prints out different representations of a\n stock's name depending on the flags and length constraints:\n\n <blockquote><pre>\n   import java.nio.CharBuffer;\n   import java.util.Formatter;\n   import java.util.Formattable;\n   import java.util.Locale;\n   import static java.util.FormattableFlags.*;\n\n  ...\n \n   public class StockName implements Formattable {\n       private String symbol, companyName, frenchCompanyName;\n       public StockName(String symbol, String companyName,\n                        String frenchCompanyName) {\n           ...\n       }\n\n       ...\n\n       public void formatTo(Formatter fmt, int f, int width, int precision) {\n           StringBuilder sb = new StringBuilder();\n\n           // decide form of name \n           String name = companyName;\n           if (fmt.locale().equals(Locale.FRANCE))\n               name = frenchCompanyName;\n           boolean alternate = (f & ALTERNATE) == ALTERNATE;\n           boolean usesymbol = alternate || (precision != -1 && precision < 10);\n           String out = (usesymbol ? symbol : name);\n\n           // apply precision\n           if (precision == -1 || out.length() < precision) {\n               // write it all\n               sb.append(out);\n           } else {\n               sb.append(out.substring(0, precision - 1)).append('*');\n           }\n\n           // apply width and justification\n           int len = sb.length(); \n           if (len < width)\n               for (int i = 0; i < width - len; i++)\n                   if ((f & LEFT_JUSTIFY) == LEFT_JUSTIFY)\n                       sb.append(' ');\n                   else\n                       sb.insert(0, ' ');\n\n           fmt.format(sb.toString());\n       }\n\n       public String toString() {\n           return String.format("%s - %s", symbol, companyName);\n       }\n   }\n </pre></blockquote>\n\n <p> When used in conjunction with the {@link java.util.Formatter}, the above\n class produces the following output for various format strings.\n\n <blockquote><pre>\n   Formatter fmt = new Formatter();\n   StockName sn = new StockName("HUGE", "Huge Fruit, Inc.",\n                                "Fruit Titanesque, Inc.");\n   fmt.format("%s", sn);                   //   -> "Huge Fruit, Inc."\n   fmt.format("%s", sn.toString());        //   -> "HUGE - Huge Fruit, Inc."\n   fmt.format("%#s", sn);                  //   -> "HUGE"\n   fmt.format("%-10.8s", sn);              //   -> "HUGE      "\n   fmt.format("%.12s", sn);                //   -> "Huge Fruit,*"\n   fmt.format(Locale.FRANCE, "%25s", sn);  //   -> "   Fruit Titanesque, Inc." \n </pre></blockquote>\n\n <p> Formattables are not necessarily safe for multithreaded access.  Thread\n safety is optional and may be enforced by classes that extend and implement\n this interface. \n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to\n any method in this interface will cause a {@link\n NullPointerException} to be thrown.\n\n @version 	1.5, 03/23/10\n @since  1.5\n"
16860,method,java/util/Formattable/formatTo/Formatter;int;int;int," Formats the object using the provided {@link Formatter formatter}.\n\n @param  formatter\n         The {@link Formatter formatter}.  Implementing classes may call\n         {@link Formatter#out() formatter.out()} or {@link\n         Formatter#locale() formatter.locale()} to obtain the {@link\n         Appendable} or {@link Locale} used by this\n         <tt>formatter</tt> respectively. \n\n @param  flags\n         The flags modify the output format.  The value is interpreted as\n         a bitmask.  Any combination of the following flags may be set:\n         {@link FormattableFlags#LEFT_JUSTIFY}, {@link\n         FormattableFlags#UPPERCASE}, and {@link\n         FormattableFlags#ALTERNATE}.  If no flags are set, the default\n         formatting of the implementing class will apply.\n\n @param  width\n         The minimum number of characters to be written to the output.\n         If the length of the converted value is less than the\n         <tt>width</tt> then the output will be padded by\n         <tt>'&nbsp;&nbsp;'</tt> until the total number of characters\n         equals width.  The padding is at the beginning by default.  If\n         the {@link FormattableFlags#LEFT_JUSTIFY} flag is set then the\n         padding will be at the end.  If <tt>width</tt> is <tt>-1</tt>\n         then there is no minimum.\n\n @param  precision\n         The maximum number of characters to be written to the output.\n         The precision is applied before the width, thus the output will\n         be truncated to <tt>precision</tt> characters even if the\n         <tt>width</tt> is greater than the <tt>precision</tt>.  If\n         <tt>precision</tt> is <tt>-1</tt> then there is no explicit\n         limit on the number of characters.\n\n @throws  IllegalFormatException\n          If any of the parameters are invalid.  For specification of all\n          possible formatting errors, see the <a\n          href="../util/Formatter.html#detail">Details</a> section of the\n          formatter class specification.\n"
16866,class,java/util/EventObject," <p>\n The root class from which all event state objects shall be derived.\n <p>\n All Events are constructed with a reference to the object, the "source",\n that is logically deemed to be the object upon which the Event in question\n initially occurred upon.\n \n @since JDK1.1\n"
16874,interface,java/util/EventListener," A tagging interface that all event listener interfaces must extend.\n @since JDK1.1\n"
16875,interface,java/util/Enumeration," An object that implements the Enumeration interface generates a\n series of elements, one at a time. Successive calls to the\n <code>nextElement</code> method return successive elements of the\n series.\n <p>\n For example, to print all elements of a <tt>Vector&lt;E&gt;</tt> <i>v</i>:\n <pre>\n   for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();)\n       System.out.println(e.nextElement());</pre>\n <p>\n Methods are provided to enumerate through the elements of a\n vector, the keys of a hashtable, and the values in a hashtable.\n Enumerations are also used to specify the input streams to a\n <code>SequenceInputStream</code>.\n <p>\n NOTE: The functionality of this interface is duplicated by the Iterator\n interface.  In addition, Iterator adds an optional remove operation, and\n has shorter method names.  New implementations should consider using\n Iterator in preference to Enumeration.\n\n @see     java.util.Iterator\n @see     java.io.SequenceInputStream\n @see     java.util.Enumeration#nextElement()\n @see     java.util.Hashtable\n @see     java.util.Hashtable#elements()\n @see     java.util.Hashtable#keys()\n @see     java.util.Vector\n @see     java.util.Vector#elements()\n\n @author  Lee Boynton\n @version 1.25, 03/23/10\n @since   JDK1.0\n"
16876,method,java/util/Enumeration/hasMoreElements/," Tests if this enumeration contains more elements.\n\n @return  <code>true</code> if and only if this enumeration object\n           contains at least one more element to provide;\n          <code>false</code> otherwise.\n"
16896,method,java/util/EnumMap/get/Object," Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key == k)},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.\n"
16910,method,java/util/EmptyStackException/EmptyStackException/," Constructs a new <code>EmptyStackException</code> with <tt>null</tt> \n as its error message string.\n"
16917,method,java/util/Dictionary/isEmpty/," Tests if this dictionary maps no keys to value. The general contract \n for the <tt>isEmpty</tt> method is that the result is true if and only \n if this dictionary contains no entries. \n\n @return  <code>true</code> if this dictionary maps no keys to values;\n          <code>false</code> otherwise.\n"
16921,method,java/util/Dictionary/put/Object;Object," Maps the specified <code>key</code> to the specified \n <code>value</code> in this dictionary. Neither the key nor the \n value can be <code>null</code>.\n <p>\n If this dictionary already contains an entry for the specified \n <tt>key</tt>, the value already in this dictionary for that \n <tt>key</tt> is returned, after modifying the entry to contain the\n  new element. <p>If this dictionary does not already have an entry \n  for the specified <tt>key</tt>, an entry is created for the \n  specified <tt>key</tt> and <tt>value</tt>, and <tt>null</tt> is \n  returned.\n <p>\n The <code>value</code> can be retrieved by calling the \n <code>get</code> method with a <code>key</code> that is equal to \n the original <code>key</code>. \n\n @param      key     the hashtable key.\n @param      value   the value.\n @return     the previous value to which the <code>key</code> was mapped\n             in this dictionary, or <code>null</code> if the key did not\n             have a previous mapping.\n @exception  NullPointerException  if the <code>key</code> or\n               <code>value</code> is <code>null</code>.\n @see        java.lang.Object#equals(java.lang.Object)\n @see        java.util.Dictionary#get(java.lang.Object)\n"
16923,method,java/util/Dictionary/Dictionary/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
16925,method,java/util/Deque/addFirst/Object," Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions.\n When using a capacity-restricted deque, it is generally preferable to\n use method {@link #offerFirst}.\n\n @param e the element to add\n @throws IllegalStateException if the element cannot be added at this\n         time due to capacity restrictions\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
16927,method,java/util/Deque/offerFirst/Object," Inserts the specified element at the front of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n this method is generally preferable to the {@link #addFirst} method,\n which can fail to insert an element only by throwing an exception.\n\n @param e the element to add\n @return <tt>true</tt> if the element was added to this deque, else\n         <tt>false</tt>\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
16928,method,java/util/Deque/offerLast/Object," Inserts the specified element at the end of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n this method is generally preferable to the {@link #addLast} method,\n which can fail to insert an element only by throwing an exception.\n\n @param e the element to add\n @return <tt>true</tt> if the element was added to this deque, else\n         <tt>false</tt>\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
16929,method,java/util/Deque/removeFirst/," Retrieves and removes the first element of this deque.  This method\n differs from {@link #pollFirst pollFirst} only in that it throws an\n exception if this deque is empty.\n\n @return the head of this deque\n @throws NoSuchElementException if this deque is empty\n"
16930,method,java/util/Deque/removeLast/," Retrieves and removes the last element of this deque.  This method\n differs from {@link #pollLast pollLast} only in that it throws an\n exception if this deque is empty.\n\n @return the tail of this deque\n @throws NoSuchElementException if this deque is empty\n"
16933,method,java/util/Deque/getFirst/," Retrieves, but does not remove, the first element of this deque.\n\n This method differs from {@link #peekFirst peekFirst} only in that it\n throws an exception if this deque is empty.\n\n @return the head of this deque\n @throws NoSuchElementException if this deque is empty\n"
16934,method,java/util/Deque/getLast/," Retrieves, but does not remove, the last element of this deque.\n This method differs from {@link #peekLast peekLast} only in that it\n throws an exception if this deque is empty.\n\n @return the tail of this deque\n @throws NoSuchElementException if this deque is empty\n"
16937,method,java/util/Deque/removeFirstOccurrence/Object," Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if an element was removed as a result of this call\n @throws ClassCastException if the class of the specified element\n         is incompatible with this deque (optional)\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements (optional)\n"
16938,method,java/util/Deque/removeLastOccurrence/Object," Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if an element was removed as a result of this call\n @throws ClassCastException if the class of the specified element\n         is incompatible with this deque (optional)\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements (optional)\n"
16939,method,java/util/Deque/add/Object," Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an\n <tt>IllegalStateException</tt> if no space is currently available.\n When using a capacity-restricted deque, it is generally preferable to\n use {@link #offer(Object) offer}.\n\n <p>This method is equivalent to {@link #addLast}.\n\n @param e the element to add\n @return <tt>true</tt> (as specified by {@link Collection#add})\n @throws IllegalStateException if the element cannot be added at this\n         time due to capacity restrictions\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
16940,method,java/util/Deque/offer/Object," Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and <tt>false</tt> if no space is currently\n available.  When using a capacity-restricted deque, this method is\n generally preferable to the {@link #add} method, which can fail to\n insert an element only by throwing an exception.\n\n <p>This method is equivalent to {@link #offerLast}.\n\n @param e the element to add\n @return <tt>true</tt> if the element was added to this deque, else\n         <tt>false</tt>\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
16941,method,java/util/Deque/remove/," Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).\n This method differs from {@link #poll poll} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #removeFirst()}.\n\n @return the head of the queue represented by this deque\n @throws NoSuchElementException if this deque is empty\n"
16943,method,java/util/Deque/element/," Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from {@link #peek peek} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #getFirst()}.\n\n @return the head of the queue represented by this deque\n @throws NoSuchElementException if this deque is empty\n"
16945,method,java/util/Deque/push/Object," Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an\n <tt>IllegalStateException</tt> if no space is currently available.\n\n <p>This method is equivalent to {@link #addFirst}.\n\n @param e the element to push\n @throws IllegalStateException if the element cannot be added at this\n         time due to capacity restrictions\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
16947,method,java/util/Deque/remove/Object," Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n <p>This method is equivalent to {@link #removeFirstOccurrence}.\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if an element was removed as a result of this call\n @throws ClassCastException if the class of the specified element\n         is incompatible with this deque (optional)\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements (optional)\n"
16948,method,java/util/Deque/contains/Object," Returns <tt>true</tt> if this deque contains the specified element.\n More formally, returns <tt>true</tt> if and only if this deque contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this deque is to be tested\n @return <tt>true</tt> if this deque contains the specified element\n @throws ClassCastException if the type of the specified element\n         is incompatible with this deque (optional)\n @throws NullPointerException if the specified element is null and this\n         deque does not permit null elements (optional)\n"
16957,method,java/util/Date/setYear/int," Sets the year of this <tt>Date</tt> object to be the specified \n value plus 1900. This <code>Date</code> object is modified so \n that it represents a point in time within the specified year, \n with the month, date, hour, minute, and second the same as \n before, as interpreted in the local time zone. (Of course, if \n the date was February 29, for example, and the year is set to a \n non-leap year, then the new date will be treated as if it were \n on March 1.)\n\n @param   year    the year value.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(Calendar.YEAR, year + 1900)</code>.\n"
16958,method,java/util/Date/getMonth/," Returns a number representing the month that contains or begins \n with the instant in time represented by this <tt>Date</tt> object. \n The value returned is between <code>0</code> and <code>11</code>, \n with the value <code>0</code> representing January.\n\n @return  the month represented by this date.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.get(Calendar.MONTH)</code>.\n"
16960,method,java/util/Date/getDate/," Returns the day of the month represented by this <tt>Date</tt> object. \n The value returned is between <code>1</code> and <code>31</code> \n representing the day of the month that contains or begins with the \n instant in time represented by this <tt>Date</tt> object, as \n interpreted in the local time zone.\n\n @return  the day of the month represented by this date.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.get(Calendar.DAY_OF_MONTH)</code>.\n @deprecated\n"
16961,method,java/util/Date/setDate/int," Sets the day of the month of this <tt>Date</tt> object to the \n specified value. This <tt>Date</tt> object is modified so that \n it represents a point in time within the specified day of the \n month, with the year, month, hour, minute, and second the same \n as before, as interpreted in the local time zone. If the date \n was April 30, for example, and the date is set to 31, then it \n will be treated as if it were on May 1, because April has only \n 30 days.\n\n @param   date   the day of the month value between 1-31.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(Calendar.DAY_OF_MONTH, int date)</code>.\n"
16964,method,java/util/Date/setHours/int," Sets the hour of this <tt>Date</tt> object to the specified value. \n This <tt>Date</tt> object is modified so that it represents a point \n in time within the specified hour of the day, with the year, month, \n date, minute, and second the same as before, as interpreted in the \n local time zone.\n\n @param   hours   the hour value.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(Calendar.HOUR_OF_DAY, int hours)</code>.\n"
16965,method,java/util/Date/getMinutes/," Returns the number of minutes past the hour represented by this date, \n as interpreted in the local time zone. \n The value returned is between <code>0</code> and <code>59</code>.\n\n @return  the number of minutes past the hour represented by this date.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.get(Calendar.MINUTE)</code>.\n"
16966,method,java/util/Date/setMinutes/int," Sets the minutes of this <tt>Date</tt> object to the specified value. \n This <tt>Date</tt> object is modified so that it represents a point \n in time within the specified minute of the hour, with the year, month, \n date, hour, and second the same as before, as interpreted in the \n local time zone.\n\n @param   minutes   the value of the minutes.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(Calendar.MINUTE, int minutes)</code>.\n"
16968,method,java/util/Date/setSeconds/int," Sets the seconds of this <tt>Date</tt> to the specified value. \n This <tt>Date</tt> object is modified so that it represents a \n point in time within the specified second of the minute, with \n the year, month, date, hour, and minute the same as before, as \n interpreted in the local time zone.\n\n @param   seconds   the seconds value.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(Calendar.SECOND, int seconds)</code>. \n"
16970,method,java/util/Date/setTime/long," Sets this <code>Date</code> object to represent a point in time that is \n <code>time</code> milliseconds after January 1, 1970 00:00:00 GMT. \n\n @param   time   the number of milliseconds.\n"
16971,method,java/util/Date/before/Date," Tests if this date is before the specified date.\n\n @param   when   a date.\n @return  <code>true</code> if and only if the instant of time \n            represented by this <tt>Date</tt> object is strictly \n            earlier than the instant represented by <tt>when</tt>;\n          <code>false</code> otherwise.\n @exception NullPointerException if <code>when</code> is null.\n"
16972,method,java/util/Date/after/Date," Tests if this date is after the specified date.\n\n @param   when   a date.\n @return  <code>true</code> if and only if the instant represented \n          by this <tt>Date</tt> object is strictly later than the \n          instant represented by <tt>when</tt>; \n          <code>false</code> otherwise.\n @exception NullPointerException if <code>when</code> is null.\n"
16973,method,java/util/Date/equals/Object," Compares two dates for equality.\n The result is <code>true</code> if and only if the argument is \n not <code>null</code> and is a <code>Date</code> object that \n represents the same point in time, to the millisecond, as this object.\n <p>\n Thus, two <code>Date</code> objects are equal if and only if the \n <code>getTime</code> method returns the same <code>long</code> \n value for both. \n\n @param   obj   the object to compare with.\n @return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n @see     java.util.Date#getTime()\n"
16974,method,java/util/Date/compareTo/Date," Compares two Dates for ordering.\n\n @param   anotherDate   the <code>Date</code> to be compared.\n @return  the value <code>0</code> if the argument Date is equal to\n          this Date; a value less than <code>0</code> if this Date\n          is before the Date argument; and a value greater than\n      <code>0</code> if this Date is after the Date argument.\n @since   1.2\n @exception NullPointerException if <code>anotherDate</code> is null.\n"
16976,method,java/util/Date/toString/," Converts this <code>Date</code> object to a <code>String</code> \n of the form:\n <blockquote><pre>\n dow mon dd hh:mm:ss zzz yyyy</pre></blockquote>\n where:<ul>\n <li><tt>dow</tt> is the day of the week (<tt>Sun, Mon, Tue, Wed, \n     Thu, Fri, Sat</tt>).\n <li><tt>mon</tt> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun, \n     Jul, Aug, Sep, Oct, Nov, Dec</tt>).\n <li><tt>dd</tt> is the day of the month (<tt>01</tt> through \n     <tt>31</tt>), as two decimal digits.\n <li><tt>hh</tt> is the hour of the day (<tt>00</tt> through \n     <tt>23</tt>), as two decimal digits.\n <li><tt>mm</tt> is the minute within the hour (<tt>00</tt> through \n     <tt>59</tt>), as two decimal digits.\n <li><tt>ss</tt> is the second within the minute (<tt>00</tt> through \n     <tt>61</tt>, as two decimal digits.\n <li><tt>zzz</tt> is the time zone (and may reflect daylight saving \n     time). Standard time zone abbreviations include those \n     recognized by the method <tt>parse</tt>. If time zone \n     information is not available, then <tt>zzz</tt> is empty - \n     that is, it consists of no characters at all.\n <li><tt>yyyy</tt> is the year, as four decimal digits.\n </ul>\n\n @return  a string representation of this date. \n @see     java.util.Date#toLocaleString()\n @see     java.util.Date#toGMTString()\n"
16977,method,java/util/Date/toLocaleString/," Creates a string representation of this <tt>Date</tt> object in an \n implementation-dependent form. The intent is that the form should \n be familiar to the user of the Java application, wherever it may \n happen to be running. The intent is comparable to that of the \n "<code>%c</code>" format supported by the <code>strftime()</code> \n function of ISO&nbsp;C. \n\n @return  a string representation of this date, using the locale\n          conventions.\n @see     java.text.DateFormat\n @see     java.util.Date#toString()\n @see     java.util.Date#toGMTString()\n @deprecated As of JDK version 1.1,\n replaced by <code>DateFormat.format(Date date)</code>.\n"
16978,method,java/util/Date/toGMTString/," Creates a string representation of this <tt>Date</tt> object of \n the form:\n <blockquote<pre>\n d mon yyyy hh:mm:ss GMT</pre></blockquote>\n where:<ul>\n <li><i>d</i> is the day of the month (<tt>1</tt> through <tt>31</tt>), \n     as one or two decimal digits.\n <li><i>mon</i> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun, Jul, \n     Aug, Sep, Oct, Nov, Dec</tt>).\n <li><i>yyyy</i> is the year, as four decimal digits.\n <li><i>hh</i> is the hour of the day (<tt>00</tt> through <tt>23</tt>), \n     as two decimal digits.\n <li><i>mm</i> is the minute within the hour (<tt>00</tt> through \n     <tt>59</tt>), as two decimal digits.\n <li><i>ss</i> is the second within the minute (<tt>00</tt> through \n     <tt>61</tt>), as two decimal digits.\n <li><i>GMT</i> is exactly the ASCII letters "<tt>GMT</tt>" to indicate \n     Greenwich Mean Time.\n </ul><p>\n The result does not depend on the local time zone.\n \n @return  a string representation of this date, using the Internet GMT\n          conventions.\n @see     java.text.DateFormat\n @see     java.util.Date#toString()\n @see     java.util.Date#toLocaleString()\n @deprecated As of JDK version 1.1,\n replaced by <code>DateFormat.format(Date date)</code>, using a\n GMT <code>TimeZone</code>.\n"
16979,method,java/util/Date/getTimezoneOffset/," Returns the offset, measured in minutes, for the local time zone \n relative to UTC that is appropriate for the time represented by \n this <code>Date</code> object. \n <p>\n For example, in Massachusetts, five time zones west of Greenwich:\n <blockquote><pre>\n new Date(96, 1, 14).getTimezoneOffset() returns 300</pre></blockquote>\n because on February 14, 1996, standard time (Eastern Standard Time) \n is in use, which is offset five hours from UTC; but:\n <blockquote><pre>\n new Date(96, 5, 1).getTimezoneOffset() returns 240</pre></blockquote>\n because on June 1, 1996, daylight saving time (Eastern Daylight Time) \n is in use, which is offset only four hours from UTC.<p>\n This method produces the same result as if it computed:\n <blockquote><pre>\n (this.getTime() - UTC(this.getYear(), \n                       this.getMonth(), \n                       this.getDate(),\n                       this.getHours(), \n                       this.getMinutes(), \n                       this.getSeconds())) / (60 * 1000)\n </pre></blockquote>\n\n @return  the time-zone offset, in minutes, for the current time zone.\n @see     java.util.Calendar#ZONE_OFFSET\n @see     java.util.Calendar#DST_OFFSET\n @see     java.util.TimeZone#getDefault\n @deprecated As of JDK version 1.1,\n replaced by <code>-(Calendar.get(Calendar.ZONE_OFFSET) +\n Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)</code>.\n"
16982,method,java/util/Date/Date/int;int;int," Allocates a <code>Date</code> object and initializes it so that \n it represents midnight, local time, at the beginning of the day \n specified by the <code>year</code>, <code>month</code>, and \n <code>date</code> arguments. \n\n @param   year    the year minus 1900.\n @param   month   the month between 0-11.\n @param   date    the day of the month between 1-31.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(year + 1900, month, date)</code>\n or <code>GregorianCalendar(year + 1900, month, date)</code>.\n"
16983,method,java/util/Date/Date/int;int;int;int;int," Allocates a <code>Date</code> object and initializes it so that \n it represents the instant at the start of the minute specified by \n the <code>year</code>, <code>month</code>, <code>date</code>, \n <code>hrs</code>, and <code>min</code> arguments, in the local \n time zone. \n\n @param   year    the year minus 1900.\n @param   month   the month between 0-11.\n @param   date    the day of the month between 1-31.\n @param   hrs     the hours between 0-23.\n @param   min     the minutes between 0-59.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(year + 1900, month, date,\n hrs, min)</code> or <code>GregorianCalendar(year + 1900,\n month, date, hrs, min)</code>.\n"
16984,method,java/util/Date/Date/int;int;int;int;int;int," Allocates a <code>Date</code> object and initializes it so that \n it represents the instant at the start of the second specified \n by the <code>year</code>, <code>month</code>, <code>date</code>, \n <code>hrs</code>, <code>min</code>, and <code>sec</code> arguments, \n in the local time zone. \n\n @param   year    the year minus 1900.\n @param   month   the month between 0-11.\n @param   date    the day of the month between 1-31.\n @param   hrs     the hours between 0-23.\n @param   min     the minutes between 0-59.\n @param   sec     the seconds between 0-59.\n @see     java.util.Calendar\n @deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(year + 1900, month, date,\n hrs, min, sec)</code> or <code>GregorianCalendar(year + 1900,\n month, date, hrs, min, sec)</code>.\n"
16986,class,java/util/Currency," Represents a currency. Currencies are identified by their ISO 4217 currency\n codes. Visit the <a href="http://www.bsi-global.com/">\n BSi web site</a> for more information, including a table of\n currency codes.\n <p>\n The class is designed so that there's never more than one\n <code>Currency</code> instance for any given currency. Therefore, there's\n no public constructor. You obtain a <code>Currency</code> instance using\n the <code>getInstance</code> methods.\n\n @since 1.4\n"
16988,method,java/util/Currency/getInstance/Locale," Returns the <code>Currency</code> instance for the country of the\n given locale. The language and variant components of the locale\n are ignored. The result may vary over time, as countries change their\n currencies. For example, for the original member countries of the\n European Monetary Union, the method returns the old national currencies\n until December 31, 2001, and the Euro from January 1, 2002, local time\n of the respective countries.\n <p>\n The method returns <code>null</code> for territories that don't\n have a currency, such as Antarctica.\n\n @param locale the locale for whose country a <code>Currency</code>\n instance is needed\n @return the <code>Currency</code> instance for the country of the given\n locale, or null\n @exception NullPointerException if <code>locale</code> or its country\n code is null\n @exception IllegalArgumentException if the country of the given locale\n is not a supported ISO 3166 country code.\n"
16990,method,java/util/Currency/getSymbol/," Gets the symbol of this currency for the default locale.\n For example, for the US Dollar, the symbol is "$" if the default\n locale is the US, while for other locales it may be "US$". If no\n symbol can be determined, the ISO 4217 currency code is returned.\n\n @return the symbol of this currency for the default locale\n"
16991,method,java/util/Currency/getSymbol/Locale," Gets the symbol of this currency for the specified locale.\n For example, for the US Dollar, the symbol is "$" if the specified\n locale is the US, while for other locales it may be "US$". If no\n symbol can be determined, the ISO 4217 currency code is returned.\n\n @param locale the locale for which a display name for this currency is\n needed\n @return the symbol of this currency for the specified locale\n @exception NullPointerException if <code>locale</code> is null\n"
16995,method,java/util/ConcurrentModificationException/ConcurrentModificationException/," Constructs a ConcurrentModificationException with no\n detail message.\n"
16996,method,java/util/ConcurrentModificationException/ConcurrentModificationException/String," Constructs a <tt>ConcurrentModificationException</tt> with the\n specified detail message.\n\n @param message the detail message pertaining to this exception.\n"
17000,class,java/util/Collections," This class consists exclusively of static methods that operate on or return\n collections.  It contains polymorphic algorithms that operate on\n collections, "wrappers", which return a new collection backed by a\n specified collection, and a few other odds and ends.\n\n <p>The methods of this class all throw a <tt>NullPointerException</tt>\n if the collections or class objects provided to them are null.\n\n <p>The documentation for the polymorphic algorithms contained in this class\n generally includes a brief description of the <i>implementation</i>.  Such\n descriptions should be regarded as <i>implementation notes</i>, rather than\n parts of the <i>specification</i>.  Implementors should feel free to\n substitute other algorithms, so long as the specification itself is adhered\n to.  (For example, the algorithm used by <tt>sort</tt> does not have to be\n a mergesort, but it does have to be <i>stable</i>.)\n\n <p>The "destructive" algorithms contained in this class, that is, the\n algorithms that modify the collection on which they operate, are specified\n to throw <tt>UnsupportedOperationException</tt> if the collection does not\n support the appropriate mutation primitive(s), such as the <tt>set</tt>\n method.  These algorithms may, but are not required to, throw this\n exception if an invocation would have no effect on the collection.  For\n example, invoking the <tt>sort</tt> method on an unmodifiable list that is\n already sorted may or may not throw <tt>UnsupportedOperationException</tt>.\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @author  Josh Bloch\n @author  Neal Gafter\n @version 1.107, 03/23/10\n @see	    Collection\n @see	    Set\n @see	    List\n @see	    Map\n @since   1.2\n"
17006,method,java/util/Collections/shuffle/List," Randomly permutes the specified list using a default source of\n randomness.  All permutations occur with approximately equal\n likelihood.<p>\n\n The hedge "approximately" is used in the foregoing description because\n default source of randomness is only approximately an unbiased source\n of independently chosen bits. If it were a perfect source of randomly\n chosen bits, then the algorithm would choose permutations with perfect\n uniformity.<p>\n\n This implementation traverses the list backwards, from the last element\n up to the second, repeatedly swapping a randomly selected element into\n the "current position".  Elements are randomly selected from the\n portion of the list that runs from the first element to the current\n position, inclusive.<p>\n\n This method runs in linear time.  If the specified list does not\n implement the {@link RandomAccess} interface and is large, this\n implementation dumps the specified list into an array before shuffling\n it, and dumps the shuffled array back into the list.  This avoids the\n quadratic behavior that would result from shuffling a "sequential\n access" list in place.\n\n @param  list the list to be shuffled.\n @throws UnsupportedOperationException if the specified list or\n         its list-iterator does not support the <tt>set</tt> operation.\n"
17007,method,java/util/Collections/shuffle/List;Random," Randomly permute the specified list using the specified source of\n randomness.  All permutations occur with equal likelihood\n assuming that the source of randomness is fair.<p>\n\n This implementation traverses the list backwards, from the last element\n up to the second, repeatedly swapping a randomly selected element into\n the "current position".  Elements are randomly selected from the\n portion of the list that runs from the first element to the current\n position, inclusive.<p>\n\n This method runs in linear time.  If the specified list does not\n implement the {@link RandomAccess} interface and is large, this\n implementation dumps the specified list into an array before shuffling\n it, and dumps the shuffled array back into the list.  This avoids the\n quadratic behavior that would result from shuffling a "sequential\n access" list in place.\n\n @param  list the list to be shuffled.\n @param  rnd the source of randomness to use to shuffle the list.\n @throws UnsupportedOperationException if the specified list or its\n         list-iterator does not support the <tt>set</tt> operation.\n"
17008,method,java/util/Collections/swap/List;int;int," Swaps the elements at the specified positions in the specified list.\n (If the specified positions are equal, invoking this method leaves\n the list unchanged.)\n\n @param list The list in which to swap elements.\n @param i the index of one element to be swapped.\n @param j the index of the other element to be swapped.\n @throws IndexOutOfBoundsException if either <tt>i</tt> or <tt>j</tt>\n         is out of range (i &lt; 0 || i &gt;= list.size()\n         || j &lt; 0 || j &gt;= list.size()).\n @since 1.4\n"
17015,method,java/util/Collections/rotate/List;int," Rotates the elements in the specified list by the specified distance.\n After calling this method, the element at index <tt>i</tt> will be\n the element previously at index <tt>(i - distance)</tt> mod\n <tt>list.size()</tt>, for all values of <tt>i</tt> between <tt>0</tt>\n and <tt>list.size()-1</tt>, inclusive.  (This method has no effect on\n the size of the list.)\n\n <p>For example, suppose <tt>list</tt> comprises<tt> [t, a, n, k, s]</tt>.\n After invoking <tt>Collections.rotate(list, 1)</tt> (or\n <tt>Collections.rotate(list, -4)</tt>), <tt>list</tt> will comprise\n <tt>[s, t, a, n, k]</tt>.\n\n <p>Note that this method can usefully be applied to sublists to\n move one or more elements within a list while preserving the\n order of the remaining elements.  For example, the following idiom\n moves the element at index <tt>j</tt> forward to position\n <tt>k</tt> (which must be greater than or equal to <tt>j</tt>):\n <pre>\n     Collections.rotate(list.subList(j, k+1), -1);\n </pre>\n To make this concrete, suppose <tt>list</tt> comprises\n <tt>[a, b, c, d, e]</tt>.  To move the element at index <tt>1</tt>\n (<tt>b</tt>) forward two positions, perform the following invocation:\n <pre>\n     Collections.rotate(l.subList(1, 4), -1);\n </pre>\n The resulting list is <tt>[a, c, d, b, e]</tt>.\n\n <p>To move more than one element forward, increase the absolute value\n of the rotation distance.  To move elements backward, use a positive\n shift distance.\n\n <p>If the specified list is small or implements the {@link\n RandomAccess} interface, this implementation exchanges the first\n element into the location it should go, and then repeatedly exchanges\n the displaced element into the location it should go until a displaced\n element is swapped into the first element.  If necessary, the process\n is repeated on the second and successive elements, until the rotation\n is complete.  If the specified list is large and doesn't implement the\n <tt>RandomAccess</tt> interface, this implementation breaks the\n list into two sublist views around index <tt>-distance mod size</tt>.\n Then the {@link #reverse(List)} method is invoked on each sublist view,\n and finally it is invoked on the entire list.  For a more complete\n description of both algorithms, see Section 2.3 of Jon Bentley's\n <i>Programming Pearls</i> (Addison-Wesley, 1986).\n\n @param list the list to be rotated.\n @param distance the distance to rotate the list.  There are no\n        constraints on this value; it may be zero, negative, or\n        greater than <tt>list.size()</tt>.\n @throws UnsupportedOperationException if the specified list or\n         its list-iterator does not support the <tt>set</tt> operation.\n @since 1.4\n"
17019,method,java/util/Collections/unmodifiableCollection/Collection," Returns an unmodifiable view of the specified collection.  This method\n allows modules to provide users with "read-only" access to internal\n collections.  Query operations on the returned collection "read through"\n to the specified collection, and attempts to modify the returned\n collection, whether direct or via its iterator, result in an\n <tt>UnsupportedOperationException</tt>.<p>\n\n The returned collection does <i>not</i> pass the hashCode and equals\n operations through to the backing collection, but relies on\n <tt>Object</tt>'s <tt>equals</tt> and <tt>hashCode</tt> methods.  This\n is necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.<p>\n\n The returned collection will be serializable if the specified collection\n is serializable.\n\n @param  c the collection for which an unmodifiable view is to be\n	       returned.\n @return an unmodifiable view of the specified collection.\n"
17020,method,java/util/Collections/unmodifiableSet/Set," Returns an unmodifiable view of the specified set.  This method allows\n modules to provide users with "read-only" access to internal sets.\n Query operations on the returned set "read through" to the specified\n set, and attempts to modify the returned set, whether direct or via its\n iterator, result in an <tt>UnsupportedOperationException</tt>.<p>\n\n The returned set will be serializable if the specified set\n is serializable.\n\n @param  s the set for which an unmodifiable view is to be returned.\n @return an unmodifiable view of the specified set.\n"
17021,method,java/util/Collections/unmodifiableSortedSet/SortedSet," Returns an unmodifiable view of the specified sorted set.  This method\n allows modules to provide users with "read-only" access to internal\n sorted sets.  Query operations on the returned sorted set "read\n through" to the specified sorted set.  Attempts to modify the returned\n sorted set, whether direct, via its iterator, or via its\n <tt>subSet</tt>, <tt>headSet</tt>, or <tt>tailSet</tt> views, result in\n an <tt>UnsupportedOperationException</tt>.<p>\n\n The returned sorted set will be serializable if the specified sorted set\n is serializable.\n\n @param s the sorted set for which an unmodifiable view is to be\n        returned.\n @return an unmodifiable view of the specified sorted set.\n"
17022,method,java/util/Collections/unmodifiableList/List," Returns an unmodifiable view of the specified list.  This method allows\n modules to provide users with "read-only" access to internal\n lists.  Query operations on the returned list "read through" to the\n specified list, and attempts to modify the returned list, whether\n direct or via its iterator, result in an\n <tt>UnsupportedOperationException</tt>.<p>\n\n The returned list will be serializable if the specified list\n is serializable. Similarly, the returned list will implement\n {@link RandomAccess} if the specified list does.\n\n @param  list the list for which an unmodifiable view is to be returned.\n @return an unmodifiable view of the specified list.\n"
17023,method,java/util/Collections/unmodifiableMap/Map," Returns an unmodifiable view of the specified map.  This method\n allows modules to provide users with "read-only" access to internal\n maps.  Query operations on the returned map "read through"\n to the specified map, and attempts to modify the returned\n map, whether direct or via its collection views, result in an\n <tt>UnsupportedOperationException</tt>.<p>\n\n The returned map will be serializable if the specified map\n is serializable.\n\n @param  m the map for which an unmodifiable view is to be returned.\n @return an unmodifiable view of the specified map.\n"
17024,method,java/util/Collections/unmodifiableSortedMap/SortedMap," Returns an unmodifiable view of the specified sorted map.  This method\n allows modules to provide users with "read-only" access to internal\n sorted maps.  Query operations on the returned sorted map "read through"\n to the specified sorted map.  Attempts to modify the returned\n sorted map, whether direct, via its collection views, or via its\n <tt>subMap</tt>, <tt>headMap</tt>, or <tt>tailMap</tt> views, result in\n an <tt>UnsupportedOperationException</tt>.<p>\n\n The returned sorted map will be serializable if the specified sorted map\n is serializable.\n\n @param m the sorted map for which an unmodifiable view is to be\n        returned.\n @return an unmodifiable view of the specified sorted map.\n"
17031,method,java/util/Collections/checkedCollection/Collection;Class," Returns a dynamically typesafe view of the specified collection.  Any\n attempt to insert an element of the wrong type will result in an\n immediate <tt>ClassCastException</tt>.  Assuming a collection contains\n no incorrectly typed elements prior to the time a dynamically typesafe\n view is generated, and that all subsequent access to the collection\n takes place through the view, it is <i>guaranteed</i> that the\n collection cannot contain an incorrectly typed element.\n\n <p>The generics mechanism in the language provides compile-time\n (static) type checking, but it is possible to defeat this mechanism\n with unchecked casts.  Usually this is not a problem, as the compiler\n issues warnings on all such unchecked operations.  There are, however,\n times when static type checking alone is not sufficient.  For example,\n suppose a collection is passed to a third-party library and it is\n imperative that the library code not corrupt the collection by\n inserting an element of the wrong type.\n\n <p>Another use of dynamically typesafe views is debugging.  Suppose a\n program fails with a <tt>ClassCastException</tt>, indicating that an\n incorrectly typed element was put into a parameterized collection.\n Unfortunately, the exception can occur at any time after the erroneous\n element is inserted, so it typically provides little or no information\n as to the real source of the problem.  If the problem is reproducible,\n one can quickly determine its source by temporarily modifying the\n program to wrap the collection with a dynamically typesafe view.\n For example, this declaration:\n <pre>\n     Collection&lt;String&gt; c = new HashSet&lt;String&gt;();\n </pre>\n may be replaced temporarily by this one:\n <pre>\n     Collection&lt;String&gt; c = Collections.checkedCollection(\n         new HashSet&lt;String&gt;(), String.class);\n </pre>\n Running the program again will cause it to fail at the point where\n an incorrectly typed element is inserted into the collection, clearly\n identifying the source of the problem.  Once the problem is fixed, the\n modified declaration may be reverted back to the original.\n\n <p>The returned collection does <i>not</i> pass the hashCode and equals\n operations through to the backing collection, but relies on\n <tt>Object</tt>'s <tt>equals</tt> and <tt>hashCode</tt> methods.  This\n is necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.\n\n <p>The returned collection will be serializable if the specified\n collection is serializable.\n\n @param c the collection for which a dynamically typesafe view is to be\n             returned\n @param type the type of element that <tt>c</tt> is permitted to hold\n @return a dynamically typesafe view of the specified collection\n @since 1.5\n"
17032,method,java/util/Collections/checkedSet/Set;Class," Returns a dynamically typesafe view of the specified set.\n Any attempt to insert an element of the wrong type will result in\n an immediate <tt>ClassCastException</tt>.  Assuming a set contains\n no incorrectly typed elements prior to the time a dynamically typesafe\n view is generated, and that all subsequent access to the set\n takes place through the view, it is <i>guaranteed</i> that the\n set cannot contain an incorrectly typed element.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection checkedCollection}\n method.\n\n <p>The returned set will be serializable if the specified set is\n serializable.\n\n @param s the set for which a dynamically typesafe view is to be\n             returned\n @param type the type of element that <tt>s</tt> is permitted to hold\n @return a dynamically typesafe view of the specified set\n @since 1.5\n"
17033,method,java/util/Collections/checkedSortedSet/SortedSet;Class," Returns a dynamically typesafe view of the specified sorted set.  Any\n attempt to insert an element of the wrong type will result in an\n immediate <tt>ClassCastException</tt>.  Assuming a sorted set contains\n no incorrectly typed elements prior to the time a dynamically typesafe\n view is generated, and that all subsequent access to the sorted set\n takes place through the view, it is <i>guaranteed</i> that the sorted\n set cannot contain an incorrectly typed element.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection checkedCollection}\n method.\n\n <p>The returned sorted set will be serializable if the specified sorted\n set is serializable.\n\n @param s the sorted set for which a dynamically typesafe view is to be\n             returned\n @param type the type of element that <tt>s</tt> is permitted to hold\n @return a dynamically typesafe view of the specified sorted set\n @since 1.5\n"
17035,method,java/util/Collections/checkedMap/Map;Class;Class," Returns a dynamically typesafe view of the specified map.  Any attempt\n to insert a mapping whose key or value have the wrong type will result\n in an immediate <tt>ClassCastException</tt>.  Similarly, any attempt to\n modify the value currently associated with a key will result in an\n immediate <tt>ClassCastException</tt>, whether the modification is\n attempted directly through the map itself, or through a {@link\n Map.Entry} instance obtained from the map's {@link Map#entrySet()\n entry set} view.\n\n <p>Assuming a map contains no incorrectly typed keys or values\n prior to the time a dynamically typesafe view is generated, and\n that all subsequent access to the map takes place through the view\n (or one of its collection views), it is <i>guaranteed</i> that the\n map cannot contain an incorrectly typed key or value.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection checkedCollection}\n method.\n\n <p>The returned map will be serializable if the specified map is\n serializable.\n\n @param m the map for which a dynamically typesafe view is to be\n             returned\n @param keyType the type of key that <tt>m</tt> is permitted to hold\n @param valueType the type of value that <tt>m</tt> is permitted to hold\n @return a dynamically typesafe view of the specified map\n @since 1.5\n"
17036,method,java/util/Collections/checkedSortedMap/SortedMap;Class;Class," Returns a dynamically typesafe view of the specified sorted map.  Any\n attempt to insert a mapping whose key or value have the wrong type will\n result in an immediate <tt>ClassCastException</tt>.  Similarly, any\n attempt to modify the value currently associated with a key will result\n in an immediate <tt>ClassCastException</tt>, whether the modification\n is attempted directly through the map itself, or through a {@link\n Map.Entry} instance obtained from the map's {@link Map#entrySet() entry\n set} view.\n\n <p>Assuming a map contains no incorrectly typed keys or values\n prior to the time a dynamically typesafe view is generated, and\n that all subsequent access to the map takes place through the view\n (or one of its collection views), it is <i>guaranteed</i> that the\n map cannot contain an incorrectly typed key or value.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection checkedCollection}\n method.\n\n <p>The returned map will be serializable if the specified map is\n serializable.\n\n @param m the map for which a dynamically typesafe view is to be\n             returned\n @param keyType the type of key that <tt>m</tt> is permitted to hold\n @param valueType the type of value that <tt>m</tt> is permitted to hold\n @return a dynamically typesafe view of the specified map\n @since 1.5\n"
17037,method,java/util/Collections/emptySet/," Returns the empty set (immutable).  This set is serializable.\n Unlike the like-named field, this method is parameterized.\n\n <p>This example illustrates the type-safe way to obtain an empty set:\n <pre>\n     Set&lt;String&gt; s = Collections.emptySet();\n </pre>\n Implementation note:  Implementations of this method need not\n create a separate <tt>Set</tt> object for each call.   Using this\n method is likely to have comparable cost to using the like-named\n field.  (Unlike this method, the field does not provide type safety.)\n\n @see #EMPTY_SET\n @since 1.5\n"
17038,method,java/util/Collections/emptyList/," Returns the empty list (immutable).  This list is serializable.\n\n <p>This example illustrates the type-safe way to obtain an empty list:\n <pre>\n     List&lt;String&gt; s = Collections.emptyList();\n </pre>\n Implementation note:  Implementations of this method need not\n create a separate <tt>List</tt> object for each call.   Using this\n method is likely to have comparable cost to using the like-named\n field.  (Unlike this method, the field does not provide type safety.)\n\n @see #EMPTY_LIST\n @since 1.5\n"
17039,method,java/util/Collections/emptyMap/," Returns the empty map (immutable).  This map is serializable.\n\n <p>This example illustrates the type-safe way to obtain an empty set:\n <pre>\n     Map&lt;String, Date&gt; s = Collections.emptyMap();\n </pre>\n Implementation note:  Implementations of this method need not\n create a separate <tt>Map</tt> object for each call.   Using this\n method is likely to have comparable cost to using the like-named\n field.  (Unlike this method, the field does not provide type safety.)\n\n @see #EMPTY_MAP\n @since 1.5\n"
17040,method,java/util/Collections/singleton/Object," Returns an immutable set containing only the specified object.\n The returned set is serializable.\n\n @param o the sole object to be stored in the returned set.\n @return an immutable set containing only the specified object.\n"
17041,method,java/util/Collections/singletonList/Object," Returns an immutable list containing only the specified object.\n The returned list is serializable.\n\n @param o the sole object to be stored in the returned list.\n @return an immutable list containing only the specified object.\n @since 1.3\n"
17042,method,java/util/Collections/singletonMap/Object;Object," Returns an immutable map, mapping only the specified key to the\n specified value.  The returned map is serializable.\n\n @param key the sole key to be stored in the returned map.\n @param value the value to which the returned map maps <tt>key</tt>.\n @return an immutable map containing only the specified key-value\n         mapping.\n @since 1.3\n"
17045,method,java/util/Collections/reverseOrder/Comparator," Returns a comparator that imposes the reverse ordering of the specified\n comparator.  If the specified comparator is null, this method is\n equivalent to {@link #reverseOrder()} (in other words, it returns a\n comparator that imposes the reverse of the <i>natural ordering</i> on a\n collection of objects that implement the Comparable interface).\n\n <p>The returned comparator is serializable (assuming the specified\n comparator is also serializable or null).\n\n @return a comparator that imposes the reverse ordering of the\n     specified comparator.\n @since 1.5\n"
17046,method,java/util/Collections/enumeration/Collection," Returns an enumeration over the specified collection.  This provides\n interoperability with legacy APIs that require an enumeration\n as input.\n\n @param c the collection for which an enumeration is to be returned.\n @return an enumeration over the specified collection.\n @see Enumeration\n"
17047,method,java/util/Collections/list/Enumeration," Returns an array list containing the elements returned by the\n specified enumeration in the order they are returned by the\n enumeration.  This method provides interoperability between\n legacy APIs that return enumerations and new APIs that require\n collections.\n\n @param e enumeration providing elements for the returned\n          array list\n @return an array list containing the elements returned\n         by the specified enumeration.\n @since 1.4\n @see Enumeration\n @see ArrayList\n"
17049,method,java/util/Collections/disjoint/Collection;Collection," Returns <tt>true</tt> if the two specified collections have no\n elements in common.\n\n <p>Care must be exercised if this method is used on collections that\n do not comply with the general contract for <tt>Collection</tt>.\n Implementations may elect to iterate over either collection and test\n for containment in the other collection (or to perform any equivalent\n computation).  If either collection uses a nonstandard equality test\n (as does a {@link SortedSet} whose ordering is not <i>compatible with\n equals</i>, or the key set of an {@link IdentityHashMap}), both\n collections must use the same nonstandard equality test, or the\n result of this method is undefined.\n\n <p>Note that it is permissible to pass the same collection in both\n parameters, in which case the method will return true if and only if\n the collection is empty.\n\n @param c1 a collection\n @param c2 a collection\n @throws NullPointerException if either collection is null\n @since 1.5\n"
17050,method,java/util/Collections/addAll/Collection;Object[]," Adds all of the specified elements to the specified collection.\n Elements to be added may be specified individually or as an array.\n The behavior of this convenience method is identical to that of\n <tt>c.addAll(Arrays.asList(elements))</tt>, but this method is likely\n to run significantly faster under most implementations.\n\n <p>When elements are specified individually, this method provides a\n convenient way to add a few elements to an existing collection:\n <pre>\n     Collections.addAll(flavors, "Peaches 'n Plutonium", "Rocky Racoon");\n </pre>\n\n @param c the collection into which <tt>elements</tt> are to be inserted\n @param elements the elements to insert into <tt>c</tt>\n @return <tt>true</tt> if the collection changed as a result of the call\n @throws UnsupportedOperationException if <tt>c</tt> does not support\n         the <tt>add</tt> operation\n @throws NullPointerException if <tt>elements</tt> contains one or more\n         null values and <tt>c</tt> does not permit null elements, or\n         if <tt>c</tt> or <tt>elements</tt> are <tt>null</tt>\n @throws IllegalArgumentException if some property of a value in\n         <tt>elements</tt> prevents it from being added to <tt>c</tt>\n @see Collection#addAll(Collection)\n @since 1.5\n"
17052,method,java/util/Collections/asLifoQueue/Deque," Returns a view of a {@link Deque} as a Last-in-first-out (Lifo)\n {@link Queue}. Method <tt>add</tt> is mapped to <tt>push</tt>,\n <tt>remove</tt> is mapped to <tt>pop</tt> and so on. This\n view can be useful when you would like to use a method\n requiring a <tt>Queue</tt> but you need Lifo ordering.\n\n <p>Each method invocation on the queue returned by this method\n results in exactly one method invocation on the backing deque, with\n one exception.  The {@link Queue#addAll addAll} method is\n implemented as a sequence of {@link Deque#addFirst addFirst}\n invocations on the backing deque.\n\n @param deque the deque\n @return the queue\n @since  1.6\n"
17059,method,java/util/Collection/contains/Object," Returns <tt>true</tt> if this collection contains the specified element.\n More formally, returns <tt>true</tt> if and only if this collection\n contains at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this collection is to be tested\n @return <tt>true</tt> if this collection contains the specified\n         element\n @throws ClassCastException if the type of the specified element\n         is incompatible with this collection (optional)\n @throws NullPointerException if the specified element is null and this\n         collection does not permit null elements (optional)\n"
17064,method,java/util/Collection/remove/Object," Removes a single instance of the specified element from this\n collection, if it is present (optional operation).  More formally,\n removes an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>, if\n this collection contains one or more such elements.  Returns\n <tt>true</tt> if this collection contained the specified element (or\n equivalently, if this collection changed as a result of the call).\n\n @param o element to be removed from this collection, if present\n @return <tt>true</tt> if an element was removed as a result of this call\n @throws ClassCastException if the type of the specified element\n 	       is incompatible with this collection (optional)\n @throws NullPointerException if the specified element is null and this\n         collection does not permit null elements (optional)\n @throws UnsupportedOperationException if the <tt>remove</tt> operation\n         is not supported by this collection\n"
17067,method,java/util/Collection/removeAll/Collection," Removes all of this collection's elements that are also contained in the\n specified collection (optional operation).  After this call returns,\n this collection will contain no elements in common with the specified\n collection.\n\n @param c collection containing elements to be removed from this collection\n @return <tt>true</tt> if this collection changed as a result of the\n         call\n @throws UnsupportedOperationException if the <tt>removeAll</tt> method\n         is not supported by this collection\n @throws ClassCastException if the types of one or more elements\n         in this collection are incompatible with the specified\n         collection (optional)\n @throws NullPointerException if this collection contains one or more\n         null elements and the specified collection does not support\n         null elements (optional), or if the specified collection is null\n @see #remove(Object)\n @see #contains(Object)\n"
17068,method,java/util/Collection/retainAll/Collection," Retains only the elements in this collection that are contained in the\n specified collection (optional operation).  In other words, removes from\n this collection all of its elements that are not contained in the\n specified collection.\n\n @param c collection containing elements to be retained in this collection\n @return <tt>true</tt> if this collection changed as a result of the call\n @throws UnsupportedOperationException if the <tt>retainAll</tt> operation\n         is not supported by this collection\n @throws ClassCastException if the types of one or more elements\n         in this collection are incompatible with the specified\n         collection (optional)\n @throws NullPointerException if this collection contains one or more\n         null elements and the specified collection does not permit null\n         elements (optional), or if the specified collection is null\n @see #remove(Object)\n @see #contains(Object)\n"
17069,method,java/util/Collection/clear/," Removes all of the elements from this collection (optional operation).\n The collection will be empty after this method returns.\n\n @throws UnsupportedOperationException if the <tt>clear</tt> operation\n         is not supported by this collection\n"
17079,method,java/util/Calendar/computeFields/," Converts the current millisecond time value {@link #time}\n to calendar field values in {@link #fields fields[]}.\n This allows you to sync up the calendar field values with\n a new time that is set for the calendar.  The time is <em>not</em>\n recomputed first; to recompute the time, then the fields, call the\n {@link #complete()} method.\n\n @see #computeTime()\n"
17081,method,java/util/Calendar/setTime/Date," Sets this Calendar's time with the given <code>Date</code>.\n <p>\n Note: Calling <code>setTime()</code> with\n <code>Date(Long.MAX_VALUE)</code> or <code>Date(Long.MIN_VALUE)</code>\n may yield incorrect field values from <code>get()</code>.\n\n @param date the given Date.\n @see #getTime()\n @see #setTimeInMillis(long)\n"
17085,method,java/util/Calendar/internalGet/int," Returns the value of the given calendar field. This method does\n not involve normalization or validation of the field value.\n\n @param field the given calendar field.\n @return the value for the given calendar field.\n @see #get(int)\n"
17087,method,java/util/Calendar/set/int;int;int," Sets the values for the calendar fields <code>YEAR</code>,\n <code>MONTH</code>, and <code>DAY_OF_MONTH</code>.\n Previous values of other calendar fields are retained.  If this is not desired,\n call {@link #clear()} first.\n\n @param year the value used to set the <code>YEAR</code> calendar field.\n @param month the value used to set the <code>MONTH</code> calendar field.\n Month value is 0-based. e.g., 0 for January.\n @param date the value used to set the <code>DAY_OF_MONTH</code> calendar field.\n @see #set(int,int)\n @see #set(int,int,int,int,int)\n @see #set(int,int,int,int,int,int)\n"
17089,method,java/util/Calendar/set/int;int;int;int;int;int," Sets the values for the fields <code>YEAR</code>, <code>MONTH</code>,\n <code>DAY_OF_MONTH</code>, <code>HOUR</code>, <code>MINUTE</code>, and\n <code>SECOND</code>.\n Previous values of other fields are retained.  If this is not desired,\n call {@link #clear()} first.\n\n @param year the value used to set the <code>YEAR</code> calendar field.\n @param month the value used to set the <code>MONTH</code> calendar field.\n Month value is 0-based. e.g., 0 for January.\n @param date the value used to set the <code>DAY_OF_MONTH</code> calendar field.\n @param hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field.\n @param minute the value used to set the <code>MINUTE</code> calendar field.\n @param second the value used to set the <code>SECOND</code> calendar field.\n @see #set(int,int)\n @see #set(int,int,int)\n @see #set(int,int,int,int,int)\n"
17090,method,java/util/Calendar/clear/," Sets all the calendar field values and the time value\n (millisecond offset from the <a href="#Epoch">Epoch</a>) of\n this <code>Calendar</code> undefined. This means that {@link\n #isSet(int) isSet()} will return <code>false</code> for all the\n calendar fields, and the date and time calculations will treat\n the fields as if they had never been set. A\n <code>Calendar</code> implementation class may use its specific\n default field values for date/time calculations. For example,\n <code>GregorianCalendar</code> uses 1970 if the\n <code>YEAR</code> field value is undefined.\n\n @see #clear(int)\n"
17091,method,java/util/Calendar/clear/int," Sets the given calendar field value and the time value\n (millisecond offset from the <a href="#Epoch">Epoch</a>) of\n this <code>Calendar</code> undefined. This means that {@link\n #isSet(int) isSet(field)} will return <code>false</code>, and\n the date and time calculations will treat the field as if it\n had never been set. A <code>Calendar</code> implementation\n class may use the field's specific default value for date and\n time calculations.\n\n <p>The {@link #HOUR_OF_DAY}, {@link #HOUR} and {@link #AM_PM}\n fields are handled independently and the <a\n href="#time_resolution">the resolution rule for the time of\n day</a> is applied. Clearing one of the fields doesn't reset\n the hour of day value of this <code>Calendar</code>. Use {@link\n #set(int,int) set(Calendar.HOUR_OF_DAY, 0)} to reset the hour\n value.\n\n @param field the calendar field to be cleared.\n @see #clear()\n"
17092,method,java/util/Calendar/isSet/int," Determines if the given calendar field has a value set,\n including cases that the value has been set by internal fields\n calculations triggered by a <code>get</code> method call.\n\n @return <code>true</code> if the given calendar field has a value set;\n <code>false</code> otherwise.\n"
17093,method,java/util/Calendar/getDisplayName/int;int;Locale," Returns the string representation of the calendar\n <code>field</code> value in the given <code>style</code> and\n <code>locale</code>.  If no string representation is\n applicable, <code>null</code> is returned. This method calls\n {@link Calendar#get(int) get(field)} to get the calendar\n <code>field</code> value if the string representation is\n applicable to the given calendar <code>field</code>.\n\n <p>For example, if this <code>Calendar</code> is a\n <code>GregorianCalendar</code> and its date is 2005-01-01, then\n the string representation of the {@link #MONTH} field would be\n "January" in the long style in an English locale or "Jan" in\n the short style. However, no string representation would be\n available for the {@link #DAY_OF_MONTH} field, and this method\n would return <code>null</code>.\n\n <p>The default implementation supports the calendar fields for\n which a {@link DateFormatSymbols} has names in the given\n <code>locale</code>.\n\n @param field\n        the calendar field for which the string representation\n        is returned\n @param style\n        the style applied to the string representation; one of\n        {@link #SHORT} or {@link #LONG}.\n @param locale\n        the locale for the string representation\n @return the string representation of the given\n        <code>field</code> in the given <code>style</code>, or\n        <code>null</code> if no string representation is\n        applicable.\n @exception IllegalArgumentException\n        if <code>field</code> or <code>style</code> is invalid,\n        or if this <code>Calendar</code> is non-lenient and any\n        of the calendar fields have invalid values\n @exception NullPointerException\n        if <code>locale</code> is null\n @since 1.6\n"
17094,method,java/util/Calendar/getDisplayNames/int;int;Locale," Returns a <code>Map</code> containing all names of the calendar\n <code>field</code> in the given <code>style</code> and\n <code>locale</code> and their corresponding field values. For\n example, if this <code>Calendar</code> is a {@link\n GregorianCalendar}, the returned map would contain "Jan" to\n {@link #JANUARY}, "Feb" to {@link #FEBRUARY}, and so on, in the\n {@linkplain #SHORT short} style in an English locale.\n\n <p>The values of other calendar fields may be taken into\n account to determine a set of display names. For example, if\n this <code>Calendar</code> is a lunisolar calendar system and\n the year value given by the {@link #YEAR} field has a leap\n month, this method would return month names containing the leap\n month name, and month names are mapped to their values specific\n for the year.\n\n <p>The default implementation supports display names contained in\n a {@link DateFormatSymbols}. For example, if <code>field</code>\n is {@link #MONTH} and <code>style</code> is {@link\n #ALL_STYLES}, this method returns a <code>Map</code> containing\n all strings returned by {@link DateFormatSymbols#getShortMonths()}\n and {@link DateFormatSymbols#getMonths()}.\n\n @param field\n        the calendar field for which the display names are returned\n @param style\n        the style applied to the display names; one of {@link\n        #SHORT}, {@link #LONG}, or {@link #ALL_STYLES}.\n @param locale\n        the locale for the display names\n @return a <code>Map</code> containing all display names in\n        <code>style</code> and <code>locale</code> and their\n        field values, or <code>null</code> if no display names\n        are defined for <code>field</code>\n @exception IllegalArgumentException\n        if <code>field</code> or <code>style</code> is invalid,\n        or if this <code>Calendar</code> is non-lenient and any\n        of the calendar fields have invalid values\n @exception NullPointerException\n        if <code>locale</code> is null\n @since 1.6\n"
17095,method,java/util/Calendar/complete/," Fills in any unset fields in the calendar fields. First, the {@link\n #computeTime()} method is called if the time value (millisecond offset\n from the <a href="#Epoch">Epoch</a>) has not been calculated from\n calendar field values. Then, the {@link #computeFields()} method is\n called to calculate all calendar field values.\n"
17096,method,java/util/Calendar/equals/Object," Compares this <code>Calendar</code> to the specified\n <code>Object</code>.  The result is <code>true</code> if and only if\n the argument is a <code>Calendar</code> object of the same calendar\n system that represents the same time value (millisecond offset from the\n <a href="#Epoch">Epoch</a>) under the same\n <code>Calendar</code> parameters as this object.\n\n <p>The <code>Calendar</code> parameters are the values represented\n by the <code>isLenient</code>, <code>getFirstDayOfWeek</code>,\n <code>getMinimalDaysInFirstWeek</code> and <code>getTimeZone</code>\n methods. If there is any difference in those parameters\n between the two <code>Calendar</code>s, this method returns\n <code>false</code>.\n\n <p>Use the {@link #compareTo(Calendar) compareTo} method to\n compare only the time values.\n\n @param obj the object to compare with.\n @return <code>true</code> if this object is equal to <code>obj</code>;\n <code>false</code> otherwise.\n"
17098,method,java/util/Calendar/before/Object," Returns whether this <code>Calendar</code> represents a time\n before the time represented by the specified\n <code>Object</code>. This method is equivalent to:\n <pre><blockquote>\n         compareTo(when) < 0\n </blockquote></pre>\n if and only if <code>when</code> is a <code>Calendar</code>\n instance. Otherwise, the method returns <code>false</code>.\n\n @param when the <code>Object</code> to be compared\n @return <code>true</code> if the time of this\n <code>Calendar</code> is before the time represented by\n <code>when</code>; <code>false</code> otherwise.\n @see	#compareTo(Calendar)\n"
17099,method,java/util/Calendar/after/Object," Returns whether this <code>Calendar</code> represents a time\n after the time represented by the specified\n <code>Object</code>. This method is equivalent to:\n <pre><blockquote>\n         compareTo(when) > 0\n </blockquote></pre>\n if and only if <code>when</code> is a <code>Calendar</code>\n instance. Otherwise, the method returns <code>false</code>.\n\n @param when the <code>Object</code> to be compared\n @return <code>true</code> if the time of this <code>Calendar</code> is\n after the time represented by <code>when</code>; <code>false</code>\n otherwise.\n @see	#compareTo(Calendar)\n"
17100,method,java/util/Calendar/compareTo/Calendar," Compares the time values (millisecond offsets from the <a\n href="#Epoch">Epoch</a>) represented by two\n <code>Calendar</code> objects.\n\n @param anotherCalendar the <code>Calendar</code> to be compared.\n @return the value <code>0</code> if the time represented by the argument\n is equal to the time represented by this <code>Calendar</code>; a value\n less than <code>0</code> if the time of this <code>Calendar</code> is\n before the time represented by the argument; and a value greater than\n <code>0</code> if the time of this <code>Calendar</code> is after the\n time represented by the argument.\n @exception NullPointerException if the specified <code>Calendar</code> is\n            <code>null</code>.\n @exception IllegalArgumentException if the time value of the\n specified <code>Calendar</code> object can't be obtained due to\n any invalid calendar values.\n @since   1.5\n"
17101,method,java/util/Calendar/add/int;int," Adds or subtracts the specified amount of time to the given calendar field,\n based on the calendar's rules. For example, to subtract 5 days from\n the current time of the calendar, you can achieve it by calling:\n <p><code>add(Calendar.DAY_OF_MONTH, -5)</code>.\n\n @param field the calendar field.\n @param amount the amount of date or time to be added to the field.\n @see #roll(int,int)\n @see #set(int,int)\n"
17102,method,java/util/Calendar/roll/int;boolean," Adds or subtracts (up/down) a single unit of time on the given time \n field without changing larger fields. For example, to roll the current \n date up by one day, you can achieve it by calling:\n <p>roll(Calendar.DATE, true).\n When rolling on the year or Calendar.YEAR field, it will roll the year\n value in the range between 1 and the value returned by calling\n <code>getMaximum(Calendar.YEAR)</code>.\n When rolling on the month or Calendar.MONTH field, other fields like\n date might conflict and, need to be changed. For instance,\n rolling the month on the date 01/31/96 will result in 02/29/96.\n When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will\n roll the hour value in the range between 0 and 23, which is zero-based.\n\n @param field the time field.\n @param up indicates if the value of the specified time field is to be\n rolled up or rolled down. Use true if rolling up, false otherwise.\n @see Calendar#add(int,int)\n @see Calendar#set(int,int)\n"
17110,method,java/util/Calendar/setMinimalDaysInFirstWeek/int," Sets what the minimal days required in the first week of the year are;\n For example, if the first week is defined as one that contains the first\n day of the first month of a year, call this method with value 1. If it\n must be a full week, use value 7.\n\n @param value the given minimal days required in the first week\n of the year.\n @see #getMinimalDaysInFirstWeek()\n"
17122,field,java/util/Calendar/ERA," Field number for <code>get</code> and <code>set</code> indicating the\n era, e.g., AD or BC in the Julian calendar. This is a calendar-specific\n value; see subclass documentation.\n\n @see GregorianCalendar#AD\n @see GregorianCalendar#BC\n"
17123,field,java/util/Calendar/YEAR," Field number for <code>get</code> and <code>set</code> indicating the\n year. This is a calendar-specific value; see subclass documentation.\n"
17124,field,java/util/Calendar/MONTH," Field number for <code>get</code> and <code>set</code> indicating the\n month. This is a calendar-specific value. The first month of\n the year in the Gregorian and Julian calendars is\n <code>JANUARY</code> which is 0; the last depends on the number\n of months in a year.\n\n @see #JANUARY\n @see #FEBRUARY\n @see #MARCH\n @see #APRIL\n @see #MAY\n @see #JUNE\n @see #JULY\n @see #AUGUST\n @see #SEPTEMBER\n @see #OCTOBER\n @see #NOVEMBER\n @see #DECEMBER\n @see #UNDECIMBER\n"
17125,field,java/util/Calendar/WEEK_OF_YEAR," Field number for <code>get</code> and <code>set</code> indicating the\n week number within the current year.  The first week of the year, as\n defined by <code>getFirstDayOfWeek()</code> and\n <code>getMinimalDaysInFirstWeek()</code>, has value 1.  Subclasses define\n the value of <code>WEEK_OF_YEAR</code> for days before the first week of\n the year.\n\n @see #getFirstDayOfWeek\n @see #getMinimalDaysInFirstWeek\n"
17126,field,java/util/Calendar/WEEK_OF_MONTH," Field number for <code>get</code> and <code>set</code> indicating the\n week number within the current month.  The first week of the month, as\n defined by <code>getFirstDayOfWeek()</code> and\n <code>getMinimalDaysInFirstWeek()</code>, has value 1.  Subclasses define\n the value of <code>WEEK_OF_MONTH</code> for days before the first week of\n the month.\n\n @see #getFirstDayOfWeek\n @see #getMinimalDaysInFirstWeek\n"
17131,field,java/util/Calendar/DAY_OF_WEEK_IN_MONTH," Field number for <code>get</code> and <code>set</code> indicating the\n ordinal number of the day of the week within the current month. Together\n with the <code>DAY_OF_WEEK</code> field, this uniquely specifies a day\n within a month.  Unlike <code>WEEK_OF_MONTH</code> and\n <code>WEEK_OF_YEAR</code>, this field's value does <em>not</em> depend on\n <code>getFirstDayOfWeek()</code> or\n <code>getMinimalDaysInFirstWeek()</code>.  <code>DAY_OF_MONTH 1</code>\n through <code>7</code> always correspond to <code>DAY_OF_WEEK_IN_MONTH\n 1</code>; <code>8</code> through <code>14</code> correspond to\n <code>DAY_OF_WEEK_IN_MONTH 2</code>, and so on.\n <code>DAY_OF_WEEK_IN_MONTH 0</code> indicates the week before\n <code>DAY_OF_WEEK_IN_MONTH 1</code>.  Negative values count back from the\n end of the month, so the last Sunday of a month is specified as\n <code>DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1</code>.  Because\n negative values count backward they will usually be aligned differently\n within the month than positive values.  For example, if a month has 31\n days, <code>DAY_OF_WEEK_IN_MONTH -1</code> will overlap\n <code>DAY_OF_WEEK_IN_MONTH 5</code> and the end of <code>4</code>.\n\n @see #DAY_OF_WEEK\n @see #WEEK_OF_MONTH\n"
17132,field,java/util/Calendar/AM_PM," Field number for <code>get</code> and <code>set</code> indicating\n whether the <code>HOUR</code> is before or after noon.\n E.g., at 10:04:15.250 PM the <code>AM_PM</code> is <code>PM</code>.\n\n @see #AM\n @see #PM\n @see #HOUR\n"
17138,field,java/util/Calendar/ZONE_OFFSET," Field number for <code>get</code> and <code>set</code>\n indicating the raw offset from GMT in milliseconds.\n <p>\n This field reflects the correct GMT offset value of the time\n zone of this <code>Calendar</code> if the\n <code>TimeZone</code> implementation subclass supports\n historical GMT offset changes.\n"
17139,field,java/util/Calendar/DST_OFFSET," Field number for <code>get</code> and <code>set</code> indicating the\n daylight savings offset in milliseconds.\n <p>\n This field reflects the correct daylight saving offset value of\n the time zone of this <code>Calendar</code> if the\n <code>TimeZone</code> implementation subclass supports\n historical Daylight Saving Time schedule changes.\n"
17161,field,java/util/Calendar/AM," Value of the {@link #AM_PM} field indicating the\n period of the day from midnight to just before noon.\n"
17162,field,java/util/Calendar/PM," Value of the {@link #AM_PM} field indicating the\n period of the day from noon to just before midnight.\n"
17167,field,java/util/Calendar/isSet," The flags which tell if a specified calendar field for the calendar is set.\n A new object has no fields set.  After the first call to a method\n which generates the fields, they all remain set after that.\n This is an array of <code>FIELD_COUNT</code> booleans, with index values\n <code>ERA</code> through <code>DST_OFFSET</code>.\n @serial\n"
17168,field,java/util/Calendar/time," The currently set time for this calendar, expressed in milliseconds after\n January 1, 1970, 0:00:00 GMT.\n @see #isTimeSet\n @serial\n"
17171,class,java/util/BitSet," This class implements a vector of bits that grows as needed. Each\n component of the bit set has a <code>boolean</code> value. The\n bits of a <code>BitSet</code> are indexed by nonnegative integers.\n Individual indexed bits can be examined, set, or cleared. One\n <code>BitSet</code> may be used to modify the contents of another\n <code>BitSet</code> through logical AND, logical inclusive OR, and\n logical exclusive OR operations.\n <p>\n By default, all bits in the set initially have the value\n <code>false</code>.\n <p>\n Every bit set has a current size, which is the number of bits\n of space currently in use by the bit set. Note that the size is\n related to the implementation of a bit set, so it may change with\n implementation. The length of a bit set relates to logical length\n of a bit set and is defined independently of implementation.\n <p>\n Unless otherwise noted, passing a null parameter to any of the\n methods in a <code>BitSet</code> will result in a\n <code>NullPointerException</code>.\n\n <p>A <code>BitSet</code> is not safe for multithreaded use without\n external synchronization.\n\n @author  Arthur van Hoff\n @author  Michael McCloskey\n @author  Martin Buchholz\n @version 1.68, 03/23/10\n @since   JDK1.0\n"
17173,method,java/util/BitSet/flip/int;int," Sets each bit from the specified <tt>fromIndex</tt> (inclusive) to the\n specified <tt>toIndex</tt> (exclusive) to the complement of its current\n value.\n\n @param     fromIndex   index of the first bit to flip.\n @param     toIndex index after the last bit to flip.\n @exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,\n            or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is\n            larger than <tt>toIndex</tt>.\n @since   1.4\n"
17176,method,java/util/BitSet/set/int;int," Sets the bits from the specified <tt>fromIndex</tt> (inclusive) to the\n specified <tt>toIndex</tt> (exclusive) to <code>true</code>.\n\n @param     fromIndex   index of the first bit to be set.\n @param     toIndex index after the last bit to be set.\n @exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,\n            or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is\n            larger than <tt>toIndex</tt>.\n @since     1.4\n"
17177,method,java/util/BitSet/set/int;int;boolean," Sets the bits from the specified <tt>fromIndex</tt> (inclusive) to the\n specified <tt>toIndex</tt> (exclusive) to the specified value.\n\n @param     fromIndex   index of the first bit to be set.\n @param     toIndex index after the last bit to be set\n @param     value value to set the selected bits to\n @exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,\n            or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is\n            larger than <tt>toIndex</tt>.\n @since     1.4\n"
17179,method,java/util/BitSet/clear/int;int," Sets the bits from the specified <tt>fromIndex</tt> (inclusive) to the\n specified <tt>toIndex</tt> (exclusive) to <code>false</code>.\n\n @param     fromIndex   index of the first bit to be cleared.\n @param     toIndex index after the last bit to be cleared.\n @exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,\n            or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is\n            larger than <tt>toIndex</tt>.\n @since     1.4\n"
17182,method,java/util/BitSet/get/int;int," Returns a new <tt>BitSet</tt> composed of bits from this <tt>BitSet</tt>\n from <tt>fromIndex</tt> (inclusive) to <tt>toIndex</tt> (exclusive).\n\n @param     fromIndex   index of the first bit to include.\n @param     toIndex     index after the last bit to include.\n @return    a new <tt>BitSet</tt> from a range of this <tt>BitSet</tt>.\n @exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,\n            or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is\n            larger than <tt>toIndex</tt>.\n @since   1.4\n"
17183,method,java/util/BitSet/nextSetBit/int," Returns the index of the first bit that is set to <code>true</code>\n that occurs on or after the specified starting index. If no such\n bit exists then -1 is returned.\n\n To iterate over the <code>true</code> bits in a <code>BitSet</code>,\n use the following loop:\n\n <pre>\n for (int i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i+1)) {\n     // operate on index i here\n }</pre>\n\n @param   fromIndex the index to start checking from (inclusive).\n @return  the index of the next set bit.\n @throws  IndexOutOfBoundsException if the specified index is negative.\n @since   1.4\n"
17184,method,java/util/BitSet/nextClearBit/int," Returns the index of the first bit that is set to <code>false</code>\n that occurs on or after the specified starting index.\n\n @param   fromIndex the index to start checking from (inclusive).\n @return  the index of the next clear bit.\n @throws  IndexOutOfBoundsException if the specified index is negative.\n @since   1.4\n"
17189,method,java/util/BitSet/and/BitSet," Performs a logical <b>AND</b> of this target bit set with the\n argument bit set. This bit set is modified so that each bit in it\n has the value <code>true</code> if and only if it both initially\n had the value <code>true</code> and the corresponding bit in the\n bit set argument also had the value <code>true</code>.\n\n @param   set   a bit set.\n"
17190,method,java/util/BitSet/or/BitSet," Performs a logical <b>OR</b> of this bit set with the bit set\n argument. This bit set is modified so that a bit in it has the\n value <code>true</code> if and only if it either already had the\n value <code>true</code> or the corresponding bit in the bit set\n argument has the value <code>true</code>.\n\n @param   set   a bit set.\n"
17191,method,java/util/BitSet/xor/BitSet," Performs a logical <b>XOR</b> of this bit set with the bit set\n argument. This bit set is modified so that a bit in it has the\n value <code>true</code> if and only if one of the following\n statements holds:\n <ul>\n <li>The bit initially has the value <code>true</code>, and the\n     corresponding bit in the argument has the value <code>false</code>.\n <li>The bit initially has the value <code>false</code>, and the\n     corresponding bit in the argument has the value <code>true</code>.\n </ul>\n\n @param   set   a bit set.\n"
17193,method,java/util/BitSet/hashCode/," Returns a hash code value for this bit set. The hash code\n depends only on which bits have been set within this\n <code>BitSet</code>. The algorithm used to compute it may\n be described as follows.<p>\n Suppose the bits in the <code>BitSet</code> were to be stored\n in an array of <code>long</code> integers called, say,\n <code>words</code>, in such a manner that bit <code>k</code> is\n set in the <code>BitSet</code> (for nonnegative values of\n <code>k</code>) if and only if the expression\n <pre>((k&gt;&gt;6) &lt; words.length) && ((words[k&gt;&gt;6] & (1L &lt;&lt; (bit & 0x3F))) != 0)</pre>\n is true. Then the following definition of the <code>hashCode</code>\n method would be a correct implementation of the actual algorithm:\n <pre>\n public int hashCode() {\n      long h = 1234;\n      for (int i = words.length; --i &gt;= 0; ) {\n           h ^= words[i] * (i + 1);\n      }\n      return (int)((h &gt;&gt; 32) ^ h);\n }</pre>\n Note that the hash code values change if the set of bits is altered.\n <p>Overrides the <code>hashCode</code> method of <code>Object</code>.\n\n @return  a hash code value for this bit set.\n"
17196,method,java/util/BitSet/clone/," Cloning this <code>BitSet</code> produces a new <code>BitSet</code>\n that is equal to it.\n The clone of the bit set is another bit set that has exactly the\n same bits set to <code>true</code> as this bit set.\n\n <p>Overrides the <code>clone</code> method of <code>Object</code>.\n\n @return  a clone of this bit set.\n @see     java.util.BitSet#size()\n"
17197,method,java/util/BitSet/toString/," Returns a string representation of this bit set. For every index\n for which this <code>BitSet</code> contains a bit in the set\n state, the decimal representation of that index is included in\n the result. Such indices are listed in order from lowest to\n highest, separated by ",&nbsp;" (a comma and a space) and\n surrounded by braces, resulting in the usual mathematical\n notation for a set of integers.<p>\n Overrides the <code>toString</code> method of <code>Object</code>.\n <p>Example:\n <pre>\n BitSet drPepper = new BitSet();</pre>\n Now <code>drPepper.toString()</code> returns "<code>{}</code>".<p>\n <pre>\n drPepper.set(2);</pre>\n Now <code>drPepper.toString()</code> returns "<code>{2}</code>".<p>\n <pre>\n drPepper.set(4);\n drPepper.set(10);</pre>\n Now <code>drPepper.toString()</code> returns "<code>{2, 4, 10}</code>".\n\n @return  a string representation of this bit set.\n"
17200,class,java/util/Arrays," This class contains various methods for manipulating arrays (such as\n sorting and searching).  This class also contains a static factory\n that allows arrays to be viewed as lists.\n\n <p>The methods in this class all throw a <tt>NullPointerException</tt> if\n the specified array reference is null, except where noted.\n\n <p>The documentation for the methods contained in this class includes\n briefs description of the <i>implementations</i>.  Such descriptions should\n be regarded as <i>implementation notes</i>, rather than parts of the\n <i>specification</i>.  Implementors should feel free to substitute other\n algorithms, so long as the specification itself is adhered to.  (For\n example, the algorithm used by <tt>sort(Object[])</tt> does not have to be\n a mergesort, but it does have to be <i>stable</i>.)\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @author  Josh Bloch\n @author  Neal Gafter\n @author  John Rose\n @version 1.72, 03/23/10\n @since   1.2\n"
17201,method,java/util/Arrays/sort/long[]," Sorts the specified array of longs into ascending numerical order.\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n"
17202,method,java/util/Arrays/sort/long[];int;int," Sorts the specified range of the specified array of longs into\n ascending numerical order.  The range to be sorted extends from index\n <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.\n (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)\n\n <p>The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n @param fromIndex the index of the first element (inclusive) to be\n        sorted\n @param toIndex the index of the last element (exclusive) to be sorted\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n <tt>toIndex &gt; a.length</tt>\n"
17203,method,java/util/Arrays/sort/int[]," Sorts the specified array of ints into ascending numerical order.\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n"
17204,method,java/util/Arrays/sort/int[];int;int," Sorts the specified range of the specified array of ints into\n ascending numerical order.  The range to be sorted extends from index\n <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.\n (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>\n\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n @param fromIndex the index of the first element (inclusive) to be\n        sorted\n @param toIndex the index of the last element (exclusive) to be sorted\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17205,method,java/util/Arrays/sort/short[]," Sorts the specified array of shorts into ascending numerical order.\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n"
17206,method,java/util/Arrays/sort/short[];int;int," Sorts the specified range of the specified array of shorts into\n ascending numerical order.  The range to be sorted extends from index\n <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.\n (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>\n\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n @param fromIndex the index of the first element (inclusive) to be\n        sorted\n @param toIndex the index of the last element (exclusive) to be sorted\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17207,method,java/util/Arrays/sort/char[]," Sorts the specified array of chars into ascending numerical order.\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n"
17208,method,java/util/Arrays/sort/char[];int;int," Sorts the specified range of the specified array of chars into\n ascending numerical order.  The range to be sorted extends from index\n <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.\n (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>\n\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n @param fromIndex the index of the first element (inclusive) to be\n        sorted\n @param toIndex the index of the last element (exclusive) to be sorted\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17209,method,java/util/Arrays/sort/byte[]," Sorts the specified array of bytes into ascending numerical order.\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n"
17210,method,java/util/Arrays/sort/byte[];int;int," Sorts the specified range of the specified array of bytes into\n ascending numerical order.  The range to be sorted extends from index\n <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.\n (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>\n\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n @param fromIndex the index of the first element (inclusive) to be\n        sorted\n @param toIndex the index of the last element (exclusive) to be sorted\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17211,method,java/util/Arrays/sort/double[]," Sorts the specified array of doubles into ascending numerical order.\n <p>\n The <code>&lt;</code> relation does not provide a total order on\n all floating-point values; although they are distinct numbers\n <code>-0.0 == 0.0</code> is <code>true</code> and a NaN value\n compares neither less than, greater than, nor equal to any\n floating-point value, even itself.  To allow the sort to\n proceed, instead of using the <code>&lt;</code> relation to\n determine ascending numerical order, this method uses the total\n order imposed by {@link Double#compareTo}.  This ordering\n differs from the <code>&lt;</code> relation in that\n <code>-0.0</code> is treated as less than <code>0.0</code> and\n NaN is considered greater than any other floating-point value.\n For the purposes of sorting, all NaN values are considered\n equivalent and equal.\n <p>\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n"
17212,method,java/util/Arrays/sort/double[];int;int," Sorts the specified range of the specified array of doubles into\n ascending numerical order.  The range to be sorted extends from index\n <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.\n (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)\n <p>\n The <code>&lt;</code> relation does not provide a total order on\n all floating-point values; although they are distinct numbers\n <code>-0.0 == 0.0</code> is <code>true</code> and a NaN value\n compares neither less than, greater than, nor equal to any\n floating-point value, even itself.  To allow the sort to\n proceed, instead of using the <code>&lt;</code> relation to\n determine ascending numerical order, this method uses the total\n order imposed by {@link Double#compareTo}.  This ordering\n differs from the <code>&lt;</code> relation in that\n <code>-0.0</code> is treated as less than <code>0.0</code> and\n NaN is considered greater than any other floating-point value.\n For the purposes of sorting, all NaN values are considered\n equivalent and equal.\n <p>\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n @param fromIndex the index of the first element (inclusive) to be\n        sorted\n @param toIndex the index of the last element (exclusive) to be sorted\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17213,method,java/util/Arrays/sort/float[]," Sorts the specified array of floats into ascending numerical order.\n <p>\n The <code>&lt;</code> relation does not provide a total order on\n all floating-point values; although they are distinct numbers\n <code>-0.0f == 0.0f</code> is <code>true</code> and a NaN value\n compares neither less than, greater than, nor equal to any\n floating-point value, even itself.  To allow the sort to\n proceed, instead of using the <code>&lt;</code> relation to\n determine ascending numerical order, this method uses the total\n order imposed by {@link Float#compareTo}.  This ordering\n differs from the <code>&lt;</code> relation in that\n <code>-0.0f</code> is treated as less than <code>0.0f</code> and\n NaN is considered greater than any other floating-point value.\n For the purposes of sorting, all NaN values are considered\n equivalent and equal.\n <p>\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n"
17214,method,java/util/Arrays/sort/float[];int;int," Sorts the specified range of the specified array of floats into\n ascending numerical order.  The range to be sorted extends from index\n <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.\n (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)\n <p>\n The <code>&lt;</code> relation does not provide a total order on\n all floating-point values; although they are distinct numbers\n <code>-0.0f == 0.0f</code> is <code>true</code> and a NaN value\n compares neither less than, greater than, nor equal to any\n floating-point value, even itself.  To allow the sort to\n proceed, instead of using the <code>&lt;</code> relation to\n determine ascending numerical order, this method uses the total\n order imposed by {@link Float#compareTo}.  This ordering\n differs from the <code>&lt;</code> relation in that\n <code>-0.0f</code> is treated as less than <code>0.0f</code> and\n NaN is considered greater than any other floating-point value.\n For the purposes of sorting, all NaN values are considered\n equivalent and equal.\n <p>\n The sorting algorithm is a tuned quicksort, adapted from Jon\n L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",\n Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n 1993).  This algorithm offers n*log(n) performance on many data sets\n that cause other quicksorts to degrade to quadratic performance.\n\n @param a the array to be sorted\n @param fromIndex the index of the first element (inclusive) to be\n        sorted\n @param toIndex the index of the last element (exclusive) to be sorted\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17247,method,java/util/Arrays/fill/long[];int;int;long," Assigns the specified long value to each element of the specified\n range of the specified array of longs.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17249,method,java/util/Arrays/fill/int[];int;int;int," Assigns the specified int value to each element of the specified\n range of the specified array of ints.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17251,method,java/util/Arrays/fill/short[];int;int;short," Assigns the specified short value to each element of the specified\n range of the specified array of shorts.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17253,method,java/util/Arrays/fill/char[];int;int;char," Assigns the specified char value to each element of the specified\n range of the specified array of chars.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17255,method,java/util/Arrays/fill/byte[];int;int;byte," Assigns the specified byte value to each element of the specified\n range of the specified array of bytes.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17257,method,java/util/Arrays/fill/boolean[];int;int;boolean," Assigns the specified boolean value to each element of the specified\n range of the specified array of booleans.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17259,method,java/util/Arrays/fill/double[];int;int;double," Assigns the specified double value to each element of the specified\n range of the specified array of doubles.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17261,method,java/util/Arrays/fill/float[];int;int;float," Assigns the specified float value to each element of the specified\n range of the specified array of floats.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n"
17263,method,java/util/Arrays/fill/Object[];int;int;Object," Assigns the specified Object reference to each element of the specified\n range of the specified array of Objects.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n @param a the array to be filled\n @param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n @param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n @param val the value to be stored in all elements of the array\n @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>\n @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or\n	       <tt>toIndex &gt; a.length</tt>\n @throws ArrayStoreException if the specified value is not of a\n         runtime type that can be stored in the specified array\n"
17264,method,java/util/Arrays/copyOf/Object[];int," Copies the specified array, truncating or padding with nulls (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>null</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n The resulting array is of exactly the same class as the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with nulls\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17265,method,java/util/Arrays/copyOf/Object[];int;Class," Copies the specified array, truncating or padding with nulls (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>null</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n The resulting array is of the class <tt>newType</tt>.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @param newType the class of the copy to be returned\n @return a copy of the original array, truncated or padded with nulls\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @throws ArrayStoreException if an element copied from\n     <tt>original</tt> is not of a runtime type that can be stored in\n     an array of class <tt>newType</tt>\n @since 1.6\n"
17266,method,java/util/Arrays/copyOf/byte[];int," Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>(byte)0</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with zeros\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17267,method,java/util/Arrays/copyOf/short[];int," Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>(short)0</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with zeros\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17268,method,java/util/Arrays/copyOf/int[];int," Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>0</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with zeros\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17269,method,java/util/Arrays/copyOf/long[];int," Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>0L</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with zeros\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17270,method,java/util/Arrays/copyOf/char[];int," Copies the specified array, truncating or padding with null characters (if necessary)\n so the copy has the specified length.  For all indices that are valid\n in both the original array and the copy, the two arrays will contain\n identical values.  For any indices that are valid in the copy but not\n the original, the copy will contain <tt>'\\u000'</tt>.  Such indices\n will exist if and only if the specified length is greater than that of\n the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with null characters\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17271,method,java/util/Arrays/copyOf/float[];int," Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>0f</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with zeros\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17272,method,java/util/Arrays/copyOf/double[];int," Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>0d</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with zeros\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17273,method,java/util/Arrays/copyOf/boolean[];int," Copies the specified array, truncating or padding with <tt>false</tt> (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>false</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n\n @param original the array to be copied\n @param newLength the length of the copy to be returned\n @return a copy of the original array, truncated or padded with false elements\n     to obtain the specified length\n @throws NegativeArraySizeException if <tt>newLength</tt> is negative\n @throws NullPointerException if <tt>original</tt> is null\n @since 1.6\n"
17284,method,java/util/Arrays/asList/Object[]," Returns a fixed-size list backed by the specified array.  (Changes to\n the returned list "write through" to the array.)  This method acts\n as bridge between array-based and collection-based APIs, in\n combination with {@link Collection#toArray}.  The returned list is\n serializable and implements {@link RandomAccess}.\n\n <p>This method also provides a convenient way to create a fixed-size\n list initialized to contain several elements:\n <pre>\n     List&lt;String&gt; stooges = Arrays.asList("Larry", "Moe", "Curly");\n </pre>\n\n @param a the array by which the list will be backed\n @return a list view of the specified array\n"
17285,method,java/util/Arrays/hashCode/long[]," Returns a hash code based on the contents of the specified array.\n For any two <tt>long</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Long}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n @param a the array whose hash value to compute\n @return a content-based hash code for <tt>a</tt>\n @since 1.5\n"
17286,method,java/util/Arrays/hashCode/int[]," Returns a hash code based on the contents of the specified array.\n For any two non-null <tt>int</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Integer}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n @param a the array whose hash value to compute\n @return a content-based hash code for <tt>a</tt>\n @since 1.5\n"
17287,method,java/util/Arrays/hashCode/short[]," Returns a hash code based on the contents of the specified array.\n For any two <tt>short</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Short}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n @param a the array whose hash value to compute\n @return a content-based hash code for <tt>a</tt>\n @since 1.5\n"
17288,method,java/util/Arrays/hashCode/char[]," Returns a hash code based on the contents of the specified array.\n For any two <tt>char</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Character}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n @param a the array whose hash value to compute\n @return a content-based hash code for <tt>a</tt>\n @since 1.5\n"
17289,method,java/util/Arrays/hashCode/byte[]," Returns a hash code based on the contents of the specified array.\n For any two <tt>byte</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Byte}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n @param a the array whose hash value to compute\n @return a content-based hash code for <tt>a</tt>\n @since 1.5\n"
17290,method,java/util/Arrays/hashCode/boolean[]," Returns a hash code based on the contents of the specified array.\n For any two <tt>boolean</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Boolean}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n @param a the array whose hash value to compute\n @return a content-based hash code for <tt>a</tt>\n @since 1.5\n"
17291,method,java/util/Arrays/hashCode/float[]," Returns a hash code based on the contents of the specified array.\n For any two <tt>float</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Float}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n @param a the array whose hash value to compute\n @return a content-based hash code for <tt>a</tt>\n @since 1.5\n"
17292,method,java/util/Arrays/hashCode/double[]," Returns a hash code based on the contents of the specified array.\n For any two <tt>double</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Double}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n @param a the array whose hash value to compute\n @return a content-based hash code for <tt>a</tt>\n @since 1.5\n"
17293,method,java/util/Arrays/hashCode/Object[]," Returns a hash code based on the contents of the specified array.  If\n the array contains other arrays as elements, the hash code is based on\n their identities rather than their contents.  It is therefore\n acceptable to invoke this method on an array that contains itself as an\n element,  either directly or indirectly through one or more levels of\n arrays.\n\n <p>For any two arrays <tt>a</tt> and <tt>b</tt> such that\n <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is equal to the value that would\n be returned by <tt>Arrays.asList(a).hashCode()</tt>, unless <tt>a</tt>\n is <tt>null</tt>, in which case <tt>0</tt> is returned.\n\n @param a the array whose content-based hash code to compute\n @return a content-based hash code for <tt>a</tt>\n @see #deepHashCode(Object[])\n @since 1.5\n"
17294,method,java/util/Arrays/deepHashCode/Object[]," Returns a hash code based on the "deep contents" of the specified\n array.  If the array contains other arrays as elements, the\n hash code is based on their contents and so on, ad infinitum.\n It is therefore unacceptable to invoke this method on an array that\n contains itself as an element, either directly or indirectly through\n one or more levels of arrays.  The behavior of such an invocation is\n undefined.\n\n <p>For any two arrays <tt>a</tt> and <tt>b</tt> such that\n <tt>Arrays.deepEquals(a, b)</tt>, it is also the case that\n <tt>Arrays.deepHashCode(a) == Arrays.deepHashCode(b)</tt>.\n\n <p>The computation of the value returned by this method is similar to\n that of the value returned by {@link List#hashCode()} on a list\n containing the same elements as <tt>a</tt> in the same order, with one\n difference: If an element <tt>e</tt> of <tt>a</tt> is itself an array,\n its hash code is computed not by calling <tt>e.hashCode()</tt>, but as\n by calling the appropriate overloading of <tt>Arrays.hashCode(e)</tt>\n if <tt>e</tt> is an array of a primitive type, or as by calling\n <tt>Arrays.deepHashCode(e)</tt> recursively if <tt>e</tt> is an array\n of a reference type.  If <tt>a</tt> is <tt>null</tt>, this method\n returns 0.\n\n @param a the array whose deep-content-based hash code to compute\n @return a deep-content-based hash code for <tt>a</tt>\n @see #hashCode(Object[])\n @since 1.5\n"
17304,method,java/util/Arrays/toString/Object[]," Returns a string representation of the contents of the specified array.\n If the array contains other arrays as elements, they are converted to\n strings by the {@link Object#toString} method inherited from\n <tt>Object</tt>, which describes their <i>identities</i> rather than\n their contents.\n\n <p>The value returned by this method is equal to the value that would\n be returned by <tt>Arrays.asList(a).toString()</tt>, unless <tt>a</tt>\n is <tt>null</tt>, in which case <tt>"null"</tt> is returned.\n\n @param a the array whose string representation to return\n @return a string representation of <tt>a</tt>\n @see #deepToString(Object[])\n @since 1.5\n"
17305,method,java/util/Arrays/deepToString/Object[]," Returns a string representation of the "deep contents" of the specified\n array.  If the array contains other arrays as elements, the string\n representation contains their contents and so on.  This method is\n designed for converting multidimensional arrays to strings.\n\n <p>The string representation consists of a list of the array's\n elements, enclosed in square brackets (<tt>"[]"</tt>).  Adjacent\n elements are separated by the characters <tt>", "</tt> (a comma\n followed by a space).  Elements are converted to strings as by\n <tt>String.valueOf(Object)</tt>, unless they are themselves\n arrays.\n\n <p>If an element <tt>e</tt> is an array of a primitive type, it is\n converted to a string as by invoking the appropriate overloading of\n <tt>Arrays.toString(e)</tt>.  If an element <tt>e</tt> is an array of a\n reference type, it is converted to a string as by invoking\n this method recursively.\n\n <p>To avoid infinite recursion, if the specified array contains itself\n as an element, or contains an indirect reference to itself through one\n or more levels of arrays, the self-reference is converted to the string\n <tt>"[...]"</tt>.  For example, an array containing only a reference\n to itself would be rendered as <tt>"[[...]]"</tt>.\n\n <p>This method returns <tt>"null"</tt> if the specified array\n is <tt>null</tt>.\n\n @param a the array whose string representation to return\n @return a string representation of <tt>a</tt>\n @see #toString(Object[])\n @since 1.5\n"
17308,method,java/util/ArrayList/ensureCapacity/int," Increases the capacity of this <tt>ArrayList</tt> instance, if\n necessary, to ensure that it can hold at least the number of elements\n specified by the minimum capacity argument.\n\n @param   minCapacity   the desired minimum capacity\n"
17311,method,java/util/ArrayList/contains/Object," Returns <tt>true</tt> if this list contains the specified element.\n More formally, returns <tt>true</tt> if and only if this list contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this list is to be tested\n @return <tt>true</tt> if this list contains the specified element\n"
17316,method,java/util/ArrayList/toArray/Object[]," Returns an array containing all of the elements in this list in proper\n sequence (from first to last element); the runtime type of the returned\n array is that of the specified array.  If the list fits in the\n specified array, it is returned therein.  Otherwise, a new array is\n allocated with the runtime type of the specified array and the size of\n this list.\n\n <p>If the list fits in the specified array with room to spare\n (i.e., the array has more elements than the list), the element in\n the array immediately following the end of the collection is set to\n <tt>null</tt>.  (This is useful in determining the length of the\n list <i>only</i> if the caller knows that the list does not contain\n any null elements.)\n\n @param a the array into which the elements of the list are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.\n @return an array containing the elements of the list\n @throws ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this list\n @throws NullPointerException if the specified array is null\n"
17317,method,java/util/ArrayList/get/int," Returns the element at the specified position in this list.\n\n @param  index index of the element to return\n @return the element at the specified position in this list\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
17318,method,java/util/ArrayList/set/int;Object," Replaces the element at the specified position in this list with\n the specified element.\n\n @param index index of the element to replace\n @param element element to be stored at the specified position\n @return the element previously at the specified position\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
17320,method,java/util/ArrayList/add/int;Object," Inserts the specified element at the specified position in this\n list. Shifts the element currently at that position (if any) and\n any subsequent elements to the right (adds one to their indices).\n\n @param index index at which the specified element is to be inserted\n @param element element to be inserted\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
17321,method,java/util/ArrayList/remove/int," Removes the element at the specified position in this list.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).\n\n @param index the index of the element to be removed\n @return the element that was removed from the list\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
17322,method,java/util/ArrayList/remove/Object," Removes the first occurrence of the specified element from this list,\n if it is present.  If the list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>\n (if such an element exists).  Returns <tt>true</tt> if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call).\n\n @param o element to be removed from this list, if present\n @return <tt>true</tt> if this list contained the specified element\n"
17323,method,java/util/ArrayList/clear/," Removes all of the elements from this list.  The list will\n be empty after this call returns.\n"
17324,method,java/util/ArrayList/addAll/Collection," Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the\n specified collection's Iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the operation\n is in progress.  (This implies that the behavior of this call is\n undefined if the specified collection is this list, and this\n list is nonempty.)\n\n @param c collection containing elements to be added to this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws NullPointerException if the specified collection is null\n"
17325,method,java/util/ArrayList/addAll/int;Collection," Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in the list in the order that they are returned by the\n specified collection's iterator.\n\n @param index index at which to insert the first element from the\n              specified collection\n @param c collection containing elements to be added to this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws IndexOutOfBoundsException {@inheritDoc}\n @throws NullPointerException if the specified collection is null\n"
17326,method,java/util/ArrayList/removeRange/int;int," Removes from this list all of the elements whose index is between\n <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.\n Shifts any succeeding elements to the left (reduces their index).\n This call shortens the list by <tt>(toIndex - fromIndex)</tt> elements.\n (If <tt>toIndex==fromIndex</tt>, this operation has no effect.)\n\n @param fromIndex index of first element to be removed\n @param toIndex index after last element to be removed\n @throws IndexOutOfBoundsException if fromIndex or toIndex out of\n              range (fromIndex &lt; 0 || fromIndex &gt;= size() || toIndex\n              &gt; size() || toIndex &lt; fromIndex)\n"
17335,method,java/util/ArrayDeque/removeFirst/," @throws NoSuchElementException {@inheritDoc}\n"
17336,method,java/util/ArrayDeque/removeLast/," @throws NoSuchElementException {@inheritDoc}\n"
17339,method,java/util/ArrayDeque/getFirst/," @throws NoSuchElementException {@inheritDoc}\n"
17340,method,java/util/ArrayDeque/getLast/," @throws NoSuchElementException {@inheritDoc}\n"
17343,method,java/util/ArrayDeque/removeFirstOccurrence/Object," Removes the first occurrence of the specified element in this\n deque (when traversing the deque from head to tail).\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if the deque contained the specified element\n"
17344,method,java/util/ArrayDeque/removeLastOccurrence/Object," Removes the last occurrence of the specified element in this\n deque (when traversing the deque from head to tail).\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if the deque contained the specified element\n"
17347,method,java/util/ArrayDeque/remove/," Retrieves and removes the head of the queue represented by this deque.\n\n This method differs from {@link #poll poll} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #removeFirst}.\n\n @return the head of the queue represented by this deque\n @throws NoSuchElementException {@inheritDoc}\n"
17349,method,java/util/ArrayDeque/element/," Retrieves, but does not remove, the head of the queue represented by\n this deque.  This method differs from {@link #peek peek} only in\n that it throws an exception if this deque is empty.\n\n <p>This method is equivalent to {@link #getFirst}.\n\n @return the head of the queue represented by this deque\n @throws NoSuchElementException {@inheritDoc}\n"
17352,method,java/util/ArrayDeque/pop/," Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n <p>This method is equivalent to {@link #removeFirst()}.\n\n @return the element at the front of this deque (which is the top\n         of the stack represented by this deque)\n @throws NoSuchElementException {@inheritDoc}\n"
17355,method,java/util/ArrayDeque/iterator/," Returns an iterator over the elements in this deque.  The elements\n will be ordered from first (head) to last (tail).  This is the same\n order that elements would be dequeued (via successive calls to\n {@link #remove} or popped (via successive calls to {@link #pop}).\n\n @return an iterator over the elements in this deque\n"
17357,method,java/util/ArrayDeque/contains/Object," Returns <tt>true</tt> if this deque contains the specified element.\n More formally, returns <tt>true</tt> if and only if this deque contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n\n @param o object to be checked for containment in this deque\n @return <tt>true</tt> if this deque contains the specified element\n"
17358,method,java/util/ArrayDeque/remove/Object," Removes a single instance of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n <p>This method is equivalent to {@link #removeFirstOccurrence}.\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if this deque contained the specified element\n"
17359,method,java/util/ArrayDeque/clear/," Removes all of the elements from this deque.\n The deque will be empty after this call returns.\n"
17361,method,java/util/ArrayDeque/toArray/Object[]," Returns an array containing all of the elements in this deque in\n proper sequence (from first to last element); the runtime type of the\n returned array is that of the specified array.  If the deque fits in\n the specified array, it is returned therein.  Otherwise, a new array\n is allocated with the runtime type of the specified array and the\n size of this deque.\n\n <p>If this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n <tt>null</tt>.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.\n\n @param a the array into which the elements of the deque are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose\n @return an array containing all of the elements in this deque\n @throws ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this deque\n @throws NullPointerException if the specified array is null\n"
17368,method,java/util/AbstractSet/hashCode/," Returns the hash code value for this set.  The hash code of a set is\n defined to be the sum of the hash codes of the elements in the set,\n where the hash code of a <tt>null</tt> element is defined to be zero.\n This ensures that <tt>s1.equals(s2)</tt> implies that\n <tt>s1.hashCode()==s2.hashCode()</tt> for any two sets <tt>s1</tt>\n and <tt>s2</tt>, as required by the general contract of\n {@link Object#hashCode}.\n\n <p>This implementation iterates over the set, calling the\n <tt>hashCode</tt> method on each element in the set, and adding up\n the results.\n\n @return the hash code value for this set\n @see Object#equals(Object)\n @see Set#equals(Object)\n"
17369,method,java/util/AbstractSet/removeAll/Collection," Removes from this set all of its elements that are contained in the\n specified collection (optional operation).  If the specified\n collection is also a set, this operation effectively modifies this\n set so that its value is the <i>asymmetric set difference</i> of\n the two sets.\n\n <p>This implementation determines which is the smaller of this set\n and the specified collection, by invoking the <tt>size</tt>\n method on each.  If this set has fewer elements, then the\n implementation iterates over this set, checking each element\n returned by the iterator in turn to see if it is contained in\n the specified collection.  If it is so contained, it is removed\n from this set with the iterator's <tt>remove</tt> method.  If\n the specified collection has fewer elements, then the\n implementation iterates over the specified collection, removing\n from this set each element returned by the iterator, using this\n set's <tt>remove</tt> method.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the iterator returned by the\n <tt>iterator</tt> method does not implement the <tt>remove</tt> method.\n\n @param  c collection containing elements to be removed from this set\n @return <tt>true</tt> if this set changed as a result of the call\n @throws UnsupportedOperationException if the <tt>removeAll</tt> operation\n         is not supported by this set\n @throws ClassCastException if the class of an element of this set\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this set contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n @see #contains(Object)\n"
17370,method,java/util/AbstractSet/AbstractSet/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
17372,method,java/util/AbstractSequentialList/get/int," Returns the element at the specified position in this list.\n\n <p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  Then, it gets\n the element using <tt>ListIterator.next</tt> and returns it.\n\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
17373,method,java/util/AbstractSequentialList/set/int;Object," Replaces the element at the specified position in this list with the\n specified element (optional operation).\n\n <p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  Then, it gets\n the current element using <tt>ListIterator.next</tt> and replaces it\n with <tt>ListIterator.set</tt>.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator does not\n implement the <tt>set</tt> operation.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n @throws IndexOutOfBoundsException     {@inheritDoc}\n"
17374,method,java/util/AbstractSequentialList/add/int;Object," Inserts the specified element at the specified position in this list\n (optional operation).  Shifts the element currently at that position\n (if any) and any subsequent elements to the right (adds one to their\n indices).\n\n <p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  Then, it\n inserts the specified element with <tt>ListIterator.add</tt>.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator does not\n implement the <tt>add</tt> operation.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n @throws IndexOutOfBoundsException     {@inheritDoc}\n"
17375,method,java/util/AbstractSequentialList/remove/int," Removes the element at the specified position in this list (optional\n operation).  Shifts any subsequent elements to the left (subtracts one\n from their indices).  Returns the element that was removed from the\n list.\n\n <p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  Then, it removes\n the element with <tt>ListIterator.remove</tt>.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator does not\n implement the <tt>remove</tt> operation.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws IndexOutOfBoundsException     {@inheritDoc}\n"
17376,method,java/util/AbstractSequentialList/addAll/int;Collection," Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).  Shifts the\n element currently at that position (if any) and any subsequent\n elements to the right (increases their indices).  The new elements\n will appear in this list in the order that they are returned by the\n specified collection's iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress.  (Note that this will occur if the specified\n collection is this list, and it's nonempty.)\n\n <p>This implementation gets an iterator over the specified collection and\n a list iterator over this list pointing to the indexed element (with\n <tt>listIterator(index)</tt>).  Then, it iterates over the specified\n collection, inserting the elements obtained from the iterator into this\n list, one at a time, using <tt>ListIterator.add</tt> followed by\n <tt>ListIterator.next</tt> (to skip over the added element).\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator returned by\n the <tt>listIterator</tt> method does not implement the <tt>add</tt>\n operation.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n @throws IndexOutOfBoundsException     {@inheritDoc}\n"
17378,method,java/util/AbstractSequentialList/listIterator/int," Returns a list iterator over the elements in this list (in proper\n sequence).\n\n @param  index index of first element to be returned from the list\n         iterator (by a call to the <code>next</code> method)\n @return a list iterator over the elements in this list (in proper\n         sequence)\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
17379,method,java/util/AbstractSequentialList/AbstractSequentialList/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
17382,method,java/util/AbstractQueue/remove/," Retrieves and removes the head of this queue.  This method differs\n from {@link #poll poll} only in that it throws an exception if this\n queue is empty.\n\n <p>This implementation returns the result of <tt>poll</tt>\n unless the queue is empty.\n\n @return the head of this queue\n @throws NoSuchElementException if this queue is empty\n"
17383,method,java/util/AbstractQueue/element/," Retrieves, but does not remove, the head of this queue.  This method\n differs from {@link #peek peek} only in that it throws an exception if\n this queue is empty.\n\n <p>This implementation returns the result of <tt>peek</tt>\n unless the queue is empty.\n\n @return the head of this queue\n @throws NoSuchElementException if this queue is empty\n"
17384,method,java/util/AbstractQueue/clear/," Removes all of the elements from this queue.\n The queue will be empty after this call returns.\n\n <p>This implementation repeatedly invokes {@link #poll poll} until it\n returns <tt>null</tt>.\n"
17386,method,java/util/AbstractQueue/AbstractQueue/," Constructor for use by subclasses.\n"
17388,method,java/util/AbstractMap/size/," {@inheritDoc}\n\n <p>This implementation returns <tt>entrySet().size()</tt>.\n"
17389,method,java/util/AbstractMap/isEmpty/," {@inheritDoc}\n\n <p>This implementation returns <tt>size() == 0</tt>.\n"
17393,method,java/util/AbstractMap/put/Object;Object," {@inheritDoc}\n\n <p>This implementation always throws an\n <tt>UnsupportedOperationException</tt>.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
17395,method,java/util/AbstractMap/putAll/Map," {@inheritDoc}\n\n <p>This implementation iterates over the specified map's\n <tt>entrySet()</tt> collection, and calls this map's <tt>put</tt>\n operation once for each entry returned by the iteration.\n\n <p>Note that this implementation throws an\n <tt>UnsupportedOperationException</tt> if this map does not support\n the <tt>put</tt> operation and the specified map is nonempty.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
17396,method,java/util/AbstractMap/clear/," {@inheritDoc}\n\n <p>This implementation calls <tt>entrySet().clear()</tt>.\n\n <p>Note that this implementation throws an\n <tt>UnsupportedOperationException</tt> if the <tt>entrySet</tt>\n does not support the <tt>clear</tt> operation.\n\n @throws UnsupportedOperationException {@inheritDoc}\n"
17397,method,java/util/AbstractMap/keySet/," {@inheritDoc}\n\n <p>This implementation returns a set that subclasses {@link AbstractSet}.\n The subclass's iterator method returns a "wrapper object" over this\n map's <tt>entrySet()</tt> iterator.  The <tt>size</tt> method\n delegates to this map's <tt>size</tt> method and the\n <tt>contains</tt> method delegates to this map's\n <tt>containsKey</tt> method.\n\n <p>The set is created the first time this method is called,\n and returned in response to all subsequent calls.  No synchronization\n is performed, so there is a slight chance that multiple calls to this\n method will not all return the same set.\n"
17398,method,java/util/AbstractMap/values/," {@inheritDoc}\n\n <p>This implementation returns a collection that subclasses {@link\n AbstractCollection}.  The subclass's iterator method returns a\n "wrapper object" over this map's <tt>entrySet()</tt> iterator.\n The <tt>size</tt> method delegates to this map's <tt>size</tt>\n method and the <tt>contains</tt> method delegates to this map's\n <tt>containsValue</tt> method.\n\n <p>The collection is created the first time this method is called, and\n returned in response to all subsequent calls.  No synchronization is\n performed, so there is a slight chance that multiple calls to this\n method will not all return the same collection.\n"
17401,method,java/util/AbstractMap/hashCode/," Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map's\n <tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt>\n implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two maps\n <tt>m1</tt> and <tt>m2</tt>, as required by the general contract of\n {@link Object#hashCode}.\n\n <p>This implementation iterates over <tt>entrySet()</tt>, calling\n {@link Map.Entry#hashCode hashCode()} on each element (entry) in the\n set, and adding up the results.\n\n @return the hash code value for this map\n @see Map.Entry#hashCode()\n @see Object#equals(Object)\n @see Set#equals(Object)\n"
17404,method,java/util/AbstractMap/AbstractMap/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
17405,class,java/util/AbstractMap/SimpleEntry," An Entry maintaining a key and a value.  The value may be\n changed using the <tt>setValue</tt> method.  This class\n facilitates the process of building custom map\n implementations. For example, it may be convenient to return\n arrays of <tt>SimpleEntry</tt> instances in method\n <tt>Map.entrySet().toArray</tt>.\n\n @since 1.6\n"
17410,method,java/util/AbstractMap/SimpleEntry/hashCode/," Returns the hash code value for this map entry.  The hash code\n of a map entry {@code e} is defined to be: <pre>\n   (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^\n   (e.getValue()==null ? 0 : e.getValue().hashCode())</pre>\n This ensures that {@code e1.equals(e2)} implies that\n {@code e1.hashCode()==e2.hashCode()} for any two Entries\n {@code e1} and {@code e2}, as required by the general\n contract of {@link Object#hashCode}.\n\n @return the hash code value for this map entry\n @see    #equals\n"
17414,class,java/util/AbstractMap/SimpleImmutableEntry," An Entry maintaining an immutable key and value.  This class\n does not support method <tt>setValue</tt>.  This class may be\n convenient in methods that return thread-safe snapshots of\n key-value mappings.\n\n @since 1.6\n"
17419,method,java/util/AbstractMap/SimpleImmutableEntry/hashCode/," Returns the hash code value for this map entry.  The hash code\n of a map entry {@code e} is defined to be: <pre>\n   (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^\n   (e.getValue()==null ? 0 : e.getValue().hashCode())</pre>\n This ensures that {@code e1.equals(e2)} implies that\n {@code e1.hashCode()==e2.hashCode()} for any two Entries\n {@code e1} and {@code e2}, as required by the general\n contract of {@link Object#hashCode}.\n\n @return the hash code value for this map entry\n @see    #equals\n"
17425,method,java/util/AbstractList/get/int," {@inheritDoc}\n\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
17426,method,java/util/AbstractList/set/int;Object," {@inheritDoc}\n\n <p>This implementation always throws an\n {@code UnsupportedOperationException}.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n @throws IndexOutOfBoundsException     {@inheritDoc}\n"
17427,method,java/util/AbstractList/add/int;Object," {@inheritDoc}\n\n <p>This implementation always throws an\n {@code UnsupportedOperationException}.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n @throws IndexOutOfBoundsException     {@inheritDoc}\n"
17428,method,java/util/AbstractList/remove/int," {@inheritDoc}\n\n <p>This implementation always throws an\n {@code UnsupportedOperationException}.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws IndexOutOfBoundsException     {@inheritDoc}\n"
17429,method,java/util/AbstractList/indexOf/Object," {@inheritDoc}\n\n <p>This implementation first gets a list iterator (with\n {@code listIterator()}).  Then, it iterates over the list until the\n specified element is found or the end of the list is reached.\n\n @throws ClassCastException   {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
17430,method,java/util/AbstractList/lastIndexOf/Object," {@inheritDoc}\n\n <p>This implementation first gets a list iterator that points to the end\n of the list (with {@code listIterator(size())}).  Then, it iterates\n backwards over the list until the specified element is found, or the\n beginning of the list is reached.\n\n @throws ClassCastException   {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
17431,method,java/util/AbstractList/clear/," Removes all of the elements from this list (optional operation).\n The list will be empty after this call returns.\n\n <p>This implementation calls {@code removeRange(0, size())}.\n\n <p>Note that this implementation throws an\n {@code UnsupportedOperationException} unless {@code remove(int\n index)} or {@code removeRange(int fromIndex, int toIndex)} is\n overridden.\n\n @throws UnsupportedOperationException if the {@code clear} operation\n         is not supported by this list\n"
17433,method,java/util/AbstractList/iterator/," Returns an iterator over the elements in this list in proper sequence.\n\n <p>This implementation returns a straightforward implementation of the\n iterator interface, relying on the backing list's {@code size()},\n {@code get(int)}, and {@code remove(int)} methods.\n\n <p>Note that the iterator returned by this method will throw an\n {@code UnsupportedOperationException} in response to its\n {@code remove} method unless the list's {@code remove(int)} method is\n overridden.\n\n <p>This implementation can be made to throw runtime exceptions in the\n face of concurrent modification, as described in the specification\n for the (protected) {@code modCount} field.\n\n @return an iterator over the elements in this list in proper sequence\n\n @see #modCount\n"
17434,method,java/util/AbstractList/listIterator/," {@inheritDoc}\n\n <p>This implementation returns {@code listIterator(0)}.\n\n @see #listIterator(int)\n"
17435,method,java/util/AbstractList/listIterator/int," {@inheritDoc}\n\n <p>This implementation returns a straightforward implementation of the\n {@code ListIterator} interface that extends the implementation of the\n {@code Iterator} interface returned by the {@code iterator()} method.\n The {@code ListIterator} implementation relies on the backing list's\n {@code get(int)}, {@code set(int, E)}, {@code add(int, E)}\n and {@code remove(int)} methods.\n\n <p>Note that the list iterator returned by this implementation will\n throw an {@code UnsupportedOperationException} in response to its\n {@code remove}, {@code set} and {@code add} methods unless the\n list's {@code remove(int)}, {@code set(int, E)}, and\n {@code add(int, E)} methods are overridden.\n\n <p>This implementation can be made to throw runtime exceptions in the\n face of concurrent modification, as described in the specification for\n the (protected) {@code modCount} field.\n\n @throws IndexOutOfBoundsException {@inheritDoc}\n\n @see #modCount\n"
17436,method,java/util/AbstractList/subList/int;int," {@inheritDoc}\n\n <p>This implementation returns a list that subclasses\n {@code AbstractList}.  The subclass stores, in private fields, the\n offset of the subList within the backing list, the size of the subList\n (which can change over its lifetime), and the expected\n {@code modCount} value of the backing list.  There are two variants\n of the subclass, one of which implements {@code RandomAccess}.\n If this list implements {@code RandomAccess} the returned list will\n be an instance of the subclass that implements {@code RandomAccess}.\n\n <p>The subclass's {@code set(int, E)}, {@code get(int)},\n {@code add(int, E)}, {@code remove(int)}, {@code addAll(int,\n Collection)} and {@code removeRange(int, int)} methods all\n delegate to the corresponding methods on the backing abstract list,\n after bounds-checking the index and adjusting for the offset.  The\n {@code addAll(Collection c)} method merely returns {@code addAll(size,\n c)}.\n\n <p>The {@code listIterator(int)} method returns a "wrapper object"\n over a list iterator on the backing list, which is created with the\n corresponding method on the backing list.  The {@code iterator} method\n merely returns {@code listIterator()}, and the {@code size} method\n merely returns the subclass's {@code size} field.\n\n <p>All methods first check to see if the actual {@code modCount} of\n the backing list is equal to its expected value, and throw a\n {@code ConcurrentModificationException} if it is not.\n\n @throws IndexOutOfBoundsException endpoint index value out of range\n         {@code (fromIndex < 0 || toIndex > size)}\n @throws IllegalArgumentException if the endpoint indices are out of order\n         {@code (fromIndex > toIndex)}\n"
17437,method,java/util/AbstractList/equals/Object," Compares the specified object with this list for equality.  Returns\n {@code true} if and only if the specified object is also a list, both\n lists have the same size, and all corresponding pairs of elements in\n the two lists are <i>equal</i>.  (Two elements {@code e1} and\n {@code e2} are <i>equal</i> if {@code (e1==null ? e2==null :\n e1.equals(e2))}.)  In other words, two lists are defined to be\n equal if they contain the same elements in the same order.<p>\n\n This implementation first checks if the specified object is this\n list. If so, it returns {@code true}; if not, it checks if the\n specified object is a list. If not, it returns {@code false}; if so,\n it iterates over both lists, comparing corresponding pairs of elements.\n If any comparison returns {@code false}, this method returns\n {@code false}.  If either iterator runs out of elements before the\n other it returns {@code false} (as the lists are of unequal length);\n otherwise it returns {@code true} when the iterations complete.\n\n @param o the object to be compared for equality with this list\n @return {@code true} if the specified object is equal to this list\n"
17440,method,java/util/AbstractList/AbstractList/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
17445,method,java/util/AbstractCollection/isEmpty/," {@inheritDoc}\n\n <p>This implementation returns <tt>size() == 0</tt>.\n"
17446,method,java/util/AbstractCollection/contains/Object," {@inheritDoc}\n\n <p>This implementation iterates over the elements in the collection,\n checking each element in turn for equality with the specified element.\n\n @throws ClassCastException   {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
17447,method,java/util/AbstractCollection/toArray/," {@inheritDoc}\n\n <p>This implementation returns an array containing all the elements\n returned by this collection's iterator, in the same order, stored in\n consecutive elements of the array, starting with index {@code 0}.\n The length of the returned array is equal to the number of elements\n returned by the iterator, even if the size of this collection changes\n during iteration, as might happen if the collection permits\n concurrent modification during iteration.  The {@code size} method is\n called only as an optimization hint; the correct result is returned\n even if the iterator returns a different number of elements.\n\n <p>This method is equivalent to:\n\n  <pre> {@code\n List<E> list = new ArrayList<E>(size());\n for (E e : this)\n     list.add(e);\n return list.toArray();\n }</pre>\n"
17448,method,java/util/AbstractCollection/toArray/Object[]," {@inheritDoc}\n\n <p>This implementation returns an array containing all the elements\n returned by this collection's iterator in the same order, stored in\n consecutive elements of the array, starting with index {@code 0}.\n If the number of elements returned by the iterator is too large to\n fit into the specified array, then the elements are returned in a\n newly allocated array with length equal to the number of elements\n returned by the iterator, even if the size of this collection\n changes during iteration, as might happen if the collection permits\n concurrent modification during iteration.  The {@code size} method is\n called only as an optimization hint; the correct result is returned\n even if the iterator returns a different number of elements.\n\n <p>This method is equivalent to:\n\n  <pre> {@code\n List<E> list = new ArrayList<E>(size());\n for (E e : this)\n     list.add(e);\n return list.toArray(a);\n }</pre>\n\n @throws ArrayStoreException  {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
17449,method,java/util/AbstractCollection/add/Object," {@inheritDoc}\n\n <p>This implementation always throws an\n <tt>UnsupportedOperationException</tt>.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n @throws IllegalStateException         {@inheritDoc}\n"
17450,method,java/util/AbstractCollection/remove/Object," {@inheritDoc}\n\n <p>This implementation iterates over the collection looking for the\n specified element.  If it finds the element, it removes the element\n from the collection using the iterator's remove method.\n\n <p>Note that this implementation throws an\n <tt>UnsupportedOperationException</tt> if the iterator returned by this\n collection's iterator method does not implement the <tt>remove</tt>\n method and this collection contains the specified object.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n"
17451,method,java/util/AbstractCollection/containsAll/Collection," {@inheritDoc}\n\n <p>This implementation iterates over the specified collection,\n checking each element returned by the iterator in turn to see\n if it's contained in this collection.  If all elements are so\n contained <tt>true</tt> is returned, otherwise <tt>false</tt>.\n\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @see #contains(Object)\n"
17452,method,java/util/AbstractCollection/addAll/Collection," {@inheritDoc}\n\n <p>This implementation iterates over the specified collection, and adds\n each object returned by the iterator to this collection, in turn.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> unless <tt>add</tt> is\n overridden (assuming the specified collection is non-empty).\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n @throws IllegalStateException         {@inheritDoc}\n\n @see #add(Object)\n"
17453,method,java/util/AbstractCollection/removeAll/Collection," {@inheritDoc}\n\n <p>This implementation iterates over this collection, checking each\n element returned by the iterator in turn to see if it's contained\n in the specified collection.  If it's so contained, it's removed from\n this collection with the iterator's <tt>remove</tt> method.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the iterator returned by the\n <tt>iterator</tt> method does not implement the <tt>remove</tt> method\n and this collection contains one or more elements in common with the\n specified collection.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n\n @see #remove(Object)\n @see #contains(Object)\n"
17454,method,java/util/AbstractCollection/retainAll/Collection," {@inheritDoc}\n\n <p>This implementation iterates over this collection, checking each\n element returned by the iterator in turn to see if it's contained\n in the specified collection.  If it's not so contained, it's removed\n from this collection with the iterator's <tt>remove</tt> method.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the iterator returned by the\n <tt>iterator</tt> method does not implement the <tt>remove</tt> method\n and this collection contains one or more elements not present in the\n specified collection.\n\n @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n\n @see #remove(Object)\n @see #contains(Object)\n"
17457,method,java/util/AbstractCollection/AbstractCollection/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
17464,method,java/util/logging/StreamHandler/setOutputStream/OutputStream," Change the output stream.\n <P>\n If there is a current output stream then the <tt>Formatter</tt>'s \n tail string is written and the stream is flushed and closed.\n Then the output stream is replaced with the new output stream.\n\n @param out   New output stream.  May not be null.\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17466,method,java/util/logging/StreamHandler/publish/LogRecord," Format and publish a <tt>LogRecord</tt>.\n <p>\n The <tt>StreamHandler</tt> first checks if there is an <tt>OutputStream</tt>\n and if the given <tt>LogRecord</tt> has at least the required log level.\n If not it silently returns.  If so, it calls any associated\n <tt>Filter</tt> to check if the record should be published.  If so,\n it calls its <tt>Formatter</tt> to format the record and then writes \n the result to the current output stream.\n <p>\n If this is the first <tt>LogRecord</tt> to be written to a given\n <tt>OutputStream</tt>, the <tt>Formatter</tt>'s "head" string is \n written to the stream before the <tt>LogRecord</tt> is written.\n\n @param  record  description of the log event. A null record is\n                 silently ignored and is not published\n"
17472,class,java/util/logging/SocketHandler," Simple network logging <tt>Handler</tt>.\n <p>\n <tt>LogRecords</tt> are published to a network stream connection.  By default\n the <tt>XMLFormatter</tt> class is used for formatting.\n <p>\n <b>Configuration:</b>\n By default each <tt>SocketHandler</tt> is initialized using the following\n <tt>LogManager</tt> configuration properties.  If properties are not defined\n (or have invalid values) then the specified default values are used.\n <ul>\n <li>   java.util.logging.SocketHandler.level\n	  specifies the default level for the <tt>Handler</tt>\n	  (defaults to <tt>Level.ALL</tt>).\n <li>   java.util.logging.SocketHandler.filter\n 	  specifies the name of a <tt>Filter</tt> class to use\n	  (defaults to no <tt>Filter</tt>).\n <li>   java.util.logging.SocketHandler.formatter\n	  specifies the name of a <tt>Formatter</tt> class to use \n	  (defaults to <tt>java.util.logging.XMLFormatter</tt>).\n <li>   java.util.logging.SocketHandler.encoding \n	  the name of the character set encoding to use (defaults to\n	  the default platform encoding).\n <li>   java.util.logging.SocketHandler.host\n	  specifies the target host name to connect to (no default).\n <li>   java.util.logging.SocketHandler.port\n	  specifies the target TCP port to use (no default).\n </ul>\n <p>\n The output IO stream is buffered, but is flushed after each\n <tt>LogRecord</tt> is written.\n\n @version 1.20, 03/23/10\n @since 1.4\n"
17473,method,java/util/logging/SocketHandler/close/," Close this output stream.\n\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17475,method,java/util/logging/SocketHandler/SocketHandler/," Create a <tt>SocketHandler</tt>, using only <tt>LogManager</tt> properties\n (or their defaults).\n @throws IllegalArgumentException if the host or port are invalid or\n		are not specified as LogManager properties.\n @throws IOException if we are unable to connect to the target\n	       host and port.\n"
17481,method,java/util/logging/MemoryHandler/publish/LogRecord," Store a <tt>LogRecord</tt> in an internal buffer.\n <p>\n If there is a <tt>Filter</tt>, its <tt>isLoggable</tt>\n method is called to check if the given log record is loggable.\n If not we return.  Otherwise the given record is copied into\n an internal circular buffer.  Then the record's level property is\n compared with the <tt>pushLevel</tt>. If the given level is\n greater than or equal to the <tt>pushLevel</tt> then <tt>push</tt>\n is called to write all buffered records to the target output\n <tt>Handler</tt>.\n \n @param  record  description of the log event. A null record is\n                 silently ignored and is not published\n"
17484,method,java/util/logging/MemoryHandler/close/," Close the <tt>Handler</tt> and free all associated resources.\n This will also close the target <tt>Handler</tt>.\n\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17485,method,java/util/logging/MemoryHandler/setPushLevel/Level,"\n Set the <tt>pushLevel</tt>.  After a <tt>LogRecord</tt> is copied \n into our internal buffer, if its level is greater than or equal to\n the <tt>pushLevel</tt>, then <tt>push</tt> will be called.\n\n @param newLevel the new value of the <tt>pushLevel</tt>\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17490,class,java/util/logging/LoggingPermission," The permission which the SecurityManager will check when code\n that is running with a SecurityManager calls one of the logging\n control methods (such as Logger.setLevel).\n <p>\n Currently there is only one named LoggingPermission.  This is "control"\n and it grants the ability to control the logging configuration, for\n example by adding or removing Handlers, by adding or removing Filters,\n or by changing logging levels.\n <p>\n Programmers do not normally create LoggingPermission objects directly.\n Instead they are created by the security policy code based on reading\n the security policy file.\n\n\n @version 1.12, 03/23/10\n @since 1.4\n @see java.security.BasicPermission\n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n @see java.lang.SecurityManager\n\n"
17492,interface,java/util/logging/LoggingMXBean,"\n The management interface for the logging facility.\n\n <p>There is a single global instance of the <tt>LoggingMXBean</tt>.\n This instance is an \n <a href="../../lang/management/ManagementFactory.html#MXBean">MXBean</a>\n can be obtained by calling\n the {@link LogManager#getLoggingMXBean} method or from the \n {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>} method.\n\n <p>The {@link javax.management.ObjectName ObjectName} for uniquely \n identifying the <tt>LoggingMXBean</tt> within an MBeanServer is:\n <blockquote>\n    {@link LogManager#LOGGING_MXBEAN_NAME\n           <tt>java.util.logging:type=Logging</tt>}\n </blockquote>\n\n @see java.lang.management.ManagementFactory\n\n @author  Ron Mann \n @author  Mandy Chung\n @version 1.10, 03/23/10\n @since   1.5\n\n"
17493,method,java/util/logging/LoggingMXBean/getLoggerNames/,"\n Returns the list of currently registered loggers. This method\n calls {@link LogManager#getLoggerNames} and returns a list \n of the logger names.\n \n @return A list of <tt>String</tt> each of which is a\n         currently registered <tt>Logger</tt> name.\n"
17494,method,java/util/logging/LoggingMXBean/getLoggerLevel/String,"\n Gets the name of the log level associated with the specified logger.\n If the specified logger does not exist, <tt>null</tt> \n is returned. \n This method first finds the logger of the given name and \n then returns the name of the log level by calling:\n <blockquote>\n   {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};\n </blockquote>\n  \n <p>\n If the <tt>Level</tt> of the specified logger is <tt>null</tt>, \n which means that this logger's effective level is inherited \n from its parent, an empty string will be returned.\n \n @param loggerName The name of the <tt>Logger</tt> to be retrieved.\n\n @return The name of the log level of the specified logger; or\n         an empty string if the log level of the specified logger\n         is <tt>null</tt>.  If the specified logger does not\n         exist, <tt>null</tt> is returned.\n\n @see Logger#getLevel\n"
17500,method,java/util/logging/Logger/getAnonymousLogger/," Create an anonymous Logger.  The newly created Logger is not\n registered in the LogManager namespace.  There will be no\n access checks on updates to the logger.\n <p>\n This factory method is primarily intended for use from applets.\n Because the resulting Logger is anonymous it can be kept private\n by the creating class.  This removes the need for normal security\n checks, which in turn allows untrusted applet code to update\n the control state of the Logger.  For example an applet can do\n a setLevel or an addHandler on an anonymous Logger.\n <p>\n Even although the new logger is anonymous, it is configured\n to have the root logger ("") as its parent.  This means that\n by default it inherits its effective level and handlers\n from the root logger.\n <p>\n\n @return a newly created private Logger\n"
17502,method,java/util/logging/Logger/getResourceBundle/," Retrieve the localization resource bundle for this\n logger for the current default locale.  Note that if\n the result is null, then the Logger will use a resource \n bundle inherited from its parent.\n\n @return localization bundle (may be null)\n"
17503,method,java/util/logging/Logger/getResourceBundleName/," Retrieve the localization resource bundle name for this\n logger.  Note that if the result is null, then the Logger\n will use a resource bundle name inherited from its parent.\n\n @return localization bundle name (may be null)\n"
17504,method,java/util/logging/Logger/setFilter/Filter," Set a filter to control output on this Logger.\n <P>\n After passing the initial "level" check, the Logger will\n call this Filter to check if a log record should really\n be published.\n\n @param   newFilter  a filter object (may be null)\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission("control").\n"
17505,method,java/util/logging/Logger/getFilter/," Get the current filter for this Logger.\n\n @return  a filter object (may be null)\n"
17506,method,java/util/logging/Logger/log/LogRecord," Log a LogRecord.\n <p>\n All the other logging methods in this class call through\n this method to actually perform any logging.  Subclasses can\n override this single method to capture all log activity.\n\n @param record the LogRecord to be published\n"
17510,method,java/util/logging/Logger/log/Level;String;Throwable," Log a message, with associated Throwable information.\n <p>\n If the logger is currently enabled for the given message \n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.\n <p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n <p>\n @param	level   One of the message level identifiers, e.g. SEVERE\n @param   msg	The string message (or a key in the message catalog)\n @param   thrown  Throwable associated with log message.\n"
17514,method,java/util/logging/Logger/logp/Level;String;String;String;Throwable," Log a message, specifying source class and method,\n with associated Throwable information.\n <p>\n If the logger is currently enabled for the given message \n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.\n <p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n <p>\n @param	level   One of the message level identifiers, e.g. SEVERE\n @param   sourceClass    name of class that issued the logging request\n @param   sourceMethod   name of method that issued the logging request\n @param   msg	The string message (or a key in the message catalog)\n @param   thrown  Throwable associated with log message.\n"
17518,method,java/util/logging/Logger/logrb/Level;String;String;String;String;Throwable," Log a message, specifying source class, method, and resource bundle name,\n with associated Throwable information.\n <p>\n If the logger is currently enabled for the given message \n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.\n <p>\n The msg string is localized using the named resource bundle.  If the\n resource bundle name is null, or an empty String or invalid\n then the msg string is not localized.\n <p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n <p>\n @param	level   One of the message level identifiers, e.g. SEVERE\n @param   sourceClass    name of class that issued the logging request\n @param   sourceMethod   name of method that issued the logging request\n @param   bundleName     name of resource bundle to localize msg,\n                         can be null\n @param   msg	The string message (or a key in the message catalog)\n @param   thrown  Throwable associated with log message.\n"
17524,method,java/util/logging/Logger/throwing/String;String;Throwable," Log throwing an exception.\n <p>\n This is a convenience method to log that a method is\n terminating by throwing an exception.  The logging is done \n using the FINER level.\n <p>\n If the logger is currently enabled for the given message \n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.  The\n LogRecord's message is set to "THROW".\n <p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n <p>\n @param   sourceClass    name of class that issued the logging request\n @param   sourceMethod  name of the method.\n @param   thrown  The Throwable that is being thrown.\n"
17526,method,java/util/logging/Logger/warning/String," Log a WARNING message.\n <p>\n If the logger is currently enabled for the WARNING message \n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>\n @param   msg	The string message (or a key in the message catalog)\n"
17532,method,java/util/logging/Logger/setLevel/Level," Set the log level specifying which message levels will be\n logged by this logger.  Message levels lower than this\n value will be discarded.  The level value Level.OFF\n can be used to turn off logging.\n <p>\n If the new level is null, it means that this node should\n inherit its level from its nearest ancestor with a specific\n (non-null) level value.\n \n @param newLevel   the new value for the log level (may be null)\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission("control").\n"
17533,method,java/util/logging/Logger/getLevel/," Get the log Level that has been specified for this Logger.\n The result may be null, which means that this logger's\n effective level will be inherited from its parent.\n\n @return	this Logger's level\n"
17534,method,java/util/logging/Logger/isLoggable/Level," Check if a message of the given level would actually be logged\n by this logger.  This check is based on the Loggers effective level,\n which may be inherited from its parent.\n\n @param	level	a message logging level\n @return	true if the given message level is currently being logged.\n"
17536,method,java/util/logging/Logger/addHandler/Handler," Add a log Handler to receive logging messages.\n <p>\n By default, Loggers also send their output to their parent logger.\n Typically the root Logger is configured with a set of Handlers\n that essentially act as default handlers for all loggers.\n\n @param	handler	a logging Handler\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission("control").\n"
17537,method,java/util/logging/Logger/removeHandler/Handler," Remove a log Handler.\n <P>\n Returns silently if the given Handler is not found or is null\n \n @param	handler	a logging Handler\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission("control").\n"
17539,method,java/util/logging/Logger/setUseParentHandlers/boolean," Specify whether or not this logger should send its output\n to it's parent Logger.  This means that any LogRecords will\n also be written to the parent's Handlers, and potentially\n to its parent, recursively up the namespace.\n\n @param useParentHandlers   true if output is to be sent to the\n		logger's parent.\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission("control").\n"
17541,method,java/util/logging/Logger/getParent/," Return the parent for this Logger.\n <p>\n This method returns the nearest extant parent in the namespace.\n Thus if a Logger is called "a.b.c.d", and a Logger called "a.b"\n has been created but no logger "a.b.c" exists, then a call of\n getParent on the Logger "a.b.c.d" will return the Logger "a.b".\n <p>\n The result will be null if it is called on the root Logger\n in the namespace.\n \n @return nearest existing parent Logger \n"
17544,field,java/util/logging/Logger/GLOBAL_LOGGER_NAME," GLOBAL_LOGGER_NAME is a name for the global logger.\n This name is provided as a convenience to developers who are making\n casual use of the Logging package.  Developers who are making serious\n use of the logging package (for example in products) should create\n and use their own Logger objects, with appropriate names, so that\n logging can be controlled on a suitable per-Logger granularity.\n <p>\n The preferred way to get the global logger object is via the call\n <code>Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)</code>.\n @since 1.6\n"
17547,method,java/util/logging/LogRecord/getLoggerName/," Get the source Logger name's\n\n @return source logger name (may be null)\n"
17548,method,java/util/logging/LogRecord/setLoggerName/String," Set the source Logger name.\n\n @param name   the source logger name (may be null)\n"
17550,method,java/util/logging/LogRecord/setResourceBundle/ResourceBundle," Set the localization resource bundle.\n\n @param bundle  localization bundle (may be null)\n"
17552,method,java/util/logging/LogRecord/setResourceBundleName/String," Set the localization resource bundle name.\n\n @param name  localization bundle name (may be null)\n"
17557,method,java/util/logging/LogRecord/getSourceClassName/," Get the  name of the class that (allegedly) issued the logging request.\n <p>\n Note that this sourceClassName is not verified and may be spoofed.\n This information may either have been provided as part of the\n logging call, or it may have been inferred automatically by the\n logging framework.  In the latter case, the information may only\n be approximate and may in fact describe an earlier call on the\n stack frame.\n <p>\n May be null if no information could be obtained.\n\n @return the source class name\n"
17558,method,java/util/logging/LogRecord/setSourceClassName/String," Set the name of the class that (allegedly) issued the logging request.\n\n @param sourceClassName the source class name (may be null)\n"
17559,method,java/util/logging/LogRecord/getSourceMethodName/," Get the  name of the method that (allegedly) issued the logging request.\n <p>\n Note that this sourceMethodName is not verified and may be spoofed.\n This information may either have been provided as part of the\n logging call, or it may have been inferred automatically by the\n logging framework.  In the latter case, the information may only\n be approximate and may in fact describe an earlier call on the\n stack frame.\n <p>\n May be null if no information could be obtained.\n\n @return the source method name\n"
17560,method,java/util/logging/LogRecord/setSourceMethodName/String," Set the name of the method that (allegedly) issued the logging request.\n\n @param sourceMethodName the source method name (may be null)\n"
17561,method,java/util/logging/LogRecord/getMessage/," Get the "raw" log message, before localization or formatting.\n <p>\n May be null, which is equivalent to the empty string "".\n <p>\n This message may be either the final text or a localization key.\n <p>\n During formatting, if the source logger has a localization\n ResourceBundle and if that ResourceBundle has an entry for\n this message string, then the message string is replaced\n with the localized value.\n\n @return the raw message string\n"
17563,method,java/util/logging/LogRecord/getParameters/," Get the parameters to the log message.\n\n @return the log message parameters.  May be null if\n			there are no parameters.\n"
17564,method,java/util/logging/LogRecord/setParameters/Object[]," Set the parameters to the log message.\n\n @param parameters the log message parameters. (may be null)\n"
17565,method,java/util/logging/LogRecord/getThreadID/," Get an identifier for the thread where the message originated.\n <p>\n This is a thread identifier within the Java VM and may or\n may not map to any operating system ID.\n\n @return thread ID\n"
17566,method,java/util/logging/LogRecord/setThreadID/int," Set an identifier for the thread where the message originated.\n @param threadID 	the thread ID\n"
17569,method,java/util/logging/LogRecord/getThrown/," Get any throwable associated with the log record.\n <p>\n If the event involved an exception, this will be the\n exception object. Otherwise null.\n\n @return a throwable\n"
17570,method,java/util/logging/LogRecord/setThrown/Throwable," Set a throwable associated with the log event.\n\n @param thrown  a throwable (may be null)\n"
17571,method,java/util/logging/LogRecord/LogRecord/Level;String," Construct a LogRecord with the given level and message values.\n <p>\n The sequence property will be initialized with a new unique value.\n These sequence values are allocated in increasing order within a VM.\n <p>\n The millis property will be initialized to the current time.\n <p>\n The thread ID property will be initialized with a unique ID for\n the current thread.\n <p>\n All other properties will be initialized to "null". \n \n @param level  a logging level value\n @param msg  the raw non-localized logging message (may be null)\n"
17574,method,java/util/logging/LogManager/addPropertyChangeListener/PropertyChangeListener," Adds an event listener to be invoked when the logging\n properties are re-read. Adding multiple instances of\n the same event Listener results in multiple entries\n in the property event listener table.\n\n @param l  event listener\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission("control").\n @exception NullPointerException if the PropertyChangeListener is null.\n"
17577,method,java/util/logging/LogManager/getLogger/String," Method to find a named logger.\n <p>\n Note that since untrusted code may create loggers with\n arbitrary names this method should not be relied on to\n find Loggers for security sensitive logging.\n <p>\n @param name name of the logger \n @return  matching logger or null if none is found\n"
17578,method,java/util/logging/LogManager/getLoggerNames/," Get an enumeration of known logger names.\n <p>\n Note:  Loggers may be added dynamically as new classes are loaded.\n This method only reports on the loggers that are currently registered.\n <p>\n @return  enumeration of logger name strings\n"
17579,method,java/util/logging/LogManager/readConfiguration/," Reinitialize the logging properties and reread the logging configuration.\n <p>\n The same rules are used for locating the configuration properties\n as are used at startup.  So normally the logging properties will\n be re-read from the same file that was used at startup.\n <P>\n Any log level definitions in the new configuration file will be \n applied using Logger.setLevel(), if the target Logger exists.\n <p>\n A PropertyChangeEvent will be fired after the properties are read.\n \n @exception  SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission("control").\n @exception  IOException if there are IO problems reading the configuration.\n"
17580,method,java/util/logging/LogManager/reset/," Reset the logging configuration.\n <p>\n For all named loggers, the reset operation removes and closes\n all Handlers and (except for the root logger) sets the level\n to null.  The root logger's level is set to Level.INFO.\n\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission("control").\n"
17585,method,java/util/logging/LogManager/LogManager/,"\n Protected constructor.  This is protected so that container applications\n (such as J2EE containers) can subclass the object.  It is non-public as\n it is intended that there only be one LogManager object, whose value is\n retrieved by calling Logmanager.getLogManager.\n"
17592,method,java/util/logging/Level/intValue/," Get the integer value for this level.  This integer value\n can be used for efficient ordering comparisons between\n Level objects.\n @return the integer value for this level.\n"
17593,method,java/util/logging/Level/parse/String," Parse a level name string into a Level.\n <p>\n The argument string may consist of either a level name\n or an integer value.\n <p>\n For example:\n <ul>\n <li>	"SEVERE"\n <li>	"1000"\n </ul>\n @param  name   string to be parsed\n @throws NullPointerException if the name is null\n @throws IllegalArgumentException if the value is not valid. \n Valid values are integers between <CODE>Integer.MIN_VALUE</CODE> \n and <CODE>Integer.MAX_VALUE</CODE>, and all known level names. \n Known names are the levels defined by this class (i.e. <CODE>FINE</CODE>,\n <CODE>FINER</CODE>, <CODE>FINEST</CODE>), or created by this class with\n appropriate package access, or new levels defined or created\n by subclasses.\n\n @return The parsed value. Passing an integer that corresponds to a known name\n (eg 700) will return the associated name (eg <CODE>CONFIG</CODE>).\n Passing an integer that does not (eg 1) will return a new level name\n initialized to that value.\n"
17594,method,java/util/logging/Level/equals/Object," Compare two objects for value equality.\n @return true if and only if the two objects have the same level value.\n"
17602,field,java/util/logging/Level/CONFIG," CONFIG is a message level for static configuration messages.\n <p>\n CONFIG messages are intended to provide a variety of static\n configuration information, to assist in debugging problems\n that may be associated with particular configurations.\n For example, CONFIG message might include the CPU type,\n the graphics depth, the GUI look-and-feel, etc.\n This level is initialized to <CODE>700</CODE>. \n"
17604,field,java/util/logging/Level/FINER," FINER indicates a fairly detailed tracing message.\n By default logging calls for entering, returning, or throwing\n an exception are traced at this level.\n This level is initialized to <CODE>400</CODE>.\n"
17606,field,java/util/logging/Level/ALL," ALL indicates that all messages should be logged.\n This level is initialized to <CODE>Integer.MIN_VALUE</CODE>.\n"
17611,method,java/util/logging/Handler/setFormatter/Formatter," Set a <tt>Formatter</tt>.  This <tt>Formatter</tt> will be used \n to format <tt>LogRecords</tt> for this <tt>Handler</tt>.\n <p>\n Some <tt>Handlers</tt> may not use <tt>Formatters</tt>, in \n which case the <tt>Formatter</tt> will be remembered, but not used.\n <p>\n @param newFormatter the <tt>Formatter</tt> to use (may not be null)\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17612,method,java/util/logging/Handler/getFormatter/," Return the <tt>Formatter</tt> for this <tt>Handler</tt>.\n @return the <tt>Formatter</tt> (may be null).\n"
17614,method,java/util/logging/Handler/getEncoding/," Return the character encoding for this <tt>Handler</tt>.\n\n @return  The encoding name.  May be null, which indicates the\n	    	default encoding should be used.\n"
17615,method,java/util/logging/Handler/setFilter/Filter," Set a <tt>Filter</tt> to control output on this <tt>Handler</tt>.\n <P>\n For each call of <tt>publish</tt> the <tt>Handler</tt> will call\n this <tt>Filter</tt> (if it is non-null) to check if the\n <tt>LogRecord</tt> should be published or discarded.\n\n @param   newFilter  a <tt>Filter</tt> object (may be null)\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17616,method,java/util/logging/Handler/getFilter/," Get the current <tt>Filter</tt> for this <tt>Handler</tt>.\n\n @return  a <tt>Filter</tt> object (may be null)\n"
17618,method,java/util/logging/Handler/getErrorManager/," Retrieves the ErrorManager for this Handler.\n\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17619,method,java/util/logging/Handler/reportError/String;Exception;int," Protected convenience method to report an error to this Handler's\n ErrorManager.  Note that this method retrieves and uses the ErrorManager\n without doing a security check.  It can therefore be used in\n environments where the caller may be non-privileged.\n\n @param msg    a descriptive string (may be null)\n @param ex     an exception (may be null)\n @param code   an error code defined in ErrorManager\n"
17620,method,java/util/logging/Handler/setLevel/Level," Set the log level specifying which message levels will be\n logged by this <tt>Handler</tt>.  Message levels lower than this\n value will be discarded. \n <p>\n The intention is to allow developers to turn on voluminous\n logging, but to limit the messages that are sent to certain\n <tt>Handlers</tt>.\n \n @param newLevel   the new value for the log level\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17622,method,java/util/logging/Handler/isLoggable/LogRecord," Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.\n <p>\n This method checks if the <tt>LogRecord</tt> has an appropriate \n <tt>Level</tt> and  whether it satisfies any <tt>Filter</tt>.  It also\n may make other <tt>Handler</tt> specific checks that might prevent a\n handler from logging the <tt>LogRecord</tt>. It will return false if \n the <tt>LogRecord</tt> is Null.\n <p>\n @param record  a <tt>LogRecord</tt>\n @return true if the <tt>LogRecord</tt> would be logged.\n\n"
17623,method,java/util/logging/Handler/Handler/," Default constructor.  The resulting <tt>Handler</tt> has a log\n level of <tt>Level.ALL</tt>, no <tt>Formatter</tt>, and no \n <tt>Filter</tt>.  A default <tt>ErrorManager</tt> instance is installed\n as the <tt>ErrorManager</tt>.\n"
17626,method,java/util/logging/Formatter/getHead/Handler," Return the header string for a set of formatted records.\n <p>  \n This base class returns an empty string, but this may be\n overriden by subclasses.\n \n @param   h  The target handler (can be null)\n @return  header string\n"
17627,method,java/util/logging/Formatter/getTail/Handler," Return the tail string for a set of formatted records.\n <p>  \n This base class returns an empty string, but this may be\n overriden by subclasses.\n \n @param   h  The target handler (can be null)\n @return  tail string\n"
17628,method,java/util/logging/Formatter/formatMessage/LogRecord," Localize and format the message string from a log record.  This\n method is provided as a convenience for Formatter subclasses to\n use when they are performing formatting.\n <p>\n The message string is first localized to a format string using\n the record's ResourceBundle.  (If there is no ResourceBundle,\n or if the message key is not found, then the key is used as the\n format string.)  The format String uses java.text style\n formatting.\n <ul>\n <li>If there are no parameters, no formatter is used.\n <li>Otherwise, if the string contains "{0" then\n     java.text.MessageFormat  is used to format the string.\n <li>Otherwise no formatting is performed. \n </ul> \n <p>\n\n @param  record  the log record containing the raw message\n @return   a localized and formatted message\n"
17630,interface,java/util/logging/Filter," A Filter can be used to provide fine grain control over\n what is logged, beyond the control provided by log levels.\n <p>\n Each Logger and each Handler can have a filter associated with it.\n The Logger or Handler will call the isLoggable method to check\n if a given LogRecord should be published.  If isLoggable returns\n false, the LogRecord will be discarded.\n\n @version 1.7, 03/23/10\n @since 1.4\n"
17631,method,java/util/logging/Filter/isLoggable/LogRecord," Check if a given log record should be published.\n @param record  a LogRecord\n @return true if the log record should be published.\n"
17632,class,java/util/logging/FileHandler," Simple file logging <tt>Handler</tt>.\n <p>\n The <tt>FileHandler</tt> can either write to a specified file,\n or it can write to a rotating set of files.  \n <p>\n For a rotating set of files, as each file reaches a given size\n limit, it is closed, rotated out, and a new file opened.\n Successively older files are named by adding "0", "1", "2", \n etc into the base filename.\n <p>\n By default buffering is enabled in the IO libraries but each log\n record is flushed out when it is complete. \n <p>\n By default the <tt>XMLFormatter</tt> class is used for formatting.\n <p>\n <b>Configuration:</b>\n By default each <tt>FileHandler</tt> is initialized using the following\n <tt>LogManager</tt> configuration properties.  If properties are not defined\n (or have invalid values) then the specified default values are used.\n <ul>\n <li>   java.util.logging.FileHandler.level \n	  specifies the default level for the <tt>Handler</tt>\n	  (defaults to <tt>Level.ALL</tt>).\n <li>   java.util.logging.FileHandler.filter \n 	  specifies the name of a <tt>Filter</tt> class to use\n	  (defaults to no <tt>Filter</tt>).\n <li>   java.util.logging.FileHandler.formatter \n	  specifies the name of a <tt>Formatter</tt> class to use\n        (defaults to <tt>java.util.logging.XMLFormatter</tt>)\n <li>   java.util.logging.FileHandler.encoding \n	  the name of the character set encoding to use (defaults to\n	  the default platform encoding).\n <li>   java.util.logging.FileHandler.limit \n	  specifies an approximate maximum amount to write (in bytes)\n 	  to any one file.  If this is zero, then there is no limit.\n	  (Defaults to no limit).\n <li>   java.util.logging.FileHandler.count \n	  specifies how many output files to cycle through (defaults to 1).\n <li>   java.util.logging.FileHandler.pattern \n	  specifies a pattern for generating the output file name.  See\n        below for details. (Defaults to "%h/java%u.log").\n <li>   java.util.logging.FileHandler.append\n	  specifies whether the FileHandler should append onto\n        any existing files (defaults to false).\n </ul>\n <p>\n <p>\n A pattern consists of a string that includes the following special\n components that will be replaced at runtime:\n <ul>\n <li>    "/"    the local pathname separator \n <li>     "%t"   the system temporary directory\n <li>     "%h"   the value of the "user.home" system property\n <li>     "%g"   the generation number to distinguish rotated logs\n <li>     "%u"   a unique number to resolve conflicts\n <li>     "%%"   translates to a single percent sign "%"\n </ul>\n If no "%g" field has been specified and the file count is greater\n than one, then the generation number will be added to the end of\n the generated filename, after a dot.\n <p> \n Thus for example a pattern of "%t/java%g.log" with a count of 2\n would typically cause log files to be written on Solaris to \n /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they\n would be typically written to C:\TEMP\java0.log and C:\TEMP\java1.log\n <p> \n Generation numbers follow the sequence 0, 1, 2, etc.\n <p>\n Normally the "%u" unique field is set to 0.  However, if the <tt>FileHandler</tt>\n tries to open the filename and finds the file is currently in use by\n another process it will increment the unique number field and try\n again.  This will be repeated until <tt>FileHandler</tt> finds a file name that\n is  not currently in use. If there is a conflict and no "%u" field has\n been specified, it will be added at the end of the filename after a dot.\n (This will be after any automatically added generation number.)\n <p>\n Thus if three processes were all trying to log to fred%u.%g.txt then \n they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as\n the first file in their rotating sequences.\n <p>\n Note that the use of unique ids to avoid conflicts is only guaranteed\n to work reliably when using a local disk file system.\n\n @version 1.37, 03/23/10\n @since 1.4\n"
17634,method,java/util/logging/FileHandler/close/," Close all the files.\n\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n"
17635,method,java/util/logging/FileHandler/FileHandler/," Construct a default <tt>FileHandler</tt>.  This will be configured\n entirely from <tt>LogManager</tt> properties (or their default values).\n <p>\n @exception  IOException if there are IO problems opening the files.\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control"))</tt>.\n @exception  NullPointerException if pattern property is an empty String.\n"
17636,method,java/util/logging/FileHandler/FileHandler/String," Initialize a <tt>FileHandler</tt> to write to the given filename.\n <p>\n The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>\n properties (or their default values) except that the given pattern \n argument is used as the filename pattern, the file limit is\n set to no limit, and the file count is set to one.\n <p>\n There is no limit on the amount of data that may be written,\n so use this with care.\n\n @param pattern  the name of the output file\n @exception  IOException if there are IO problems opening the files.\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n @exception  IllegalArgumentException if pattern is an empty string\n"
17637,method,java/util/logging/FileHandler/FileHandler/String;boolean," Initialize a <tt>FileHandler</tt> to write to the given filename,\n with optional append.\n <p>\n The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>\n properties (or their default values) except that the given pattern \n argument is used as the filename pattern, the file limit is\n set to no limit, the file count is set to one, and the append\n mode is set to the given <tt>append</tt> argument.\n <p>\n There is no limit on the amount of data that may be written,\n so use this with care.\n\n @param pattern  the name of the output file\n @param append  specifies append mode\n @exception  IOException if there are IO problems opening the files.\n @exception  SecurityException  if a security manager exists and if\n             the caller does not have <tt>LoggingPermission("control")</tt>.\n @exception  IllegalArgumentException if pattern is an empty string\n"
17641,method,java/util/logging/ErrorManager/error/String;Exception;int," The error method is called when a Handler failure occurs.\n <p>\n This method may be overriden in subclasses.  The default\n behavior in this base class is that the first call is\n reported to System.err, and subsequent calls are ignored.\n\n @param msg    a descriptive string (may be null)\n @param ex     an exception (may be null)\n @param code   an error code defined in ErrorManager\n"
17651,method,java/util/logging/ConsoleHandler/close/," Override <tt>StreamHandler.close</tt> to do a flush but not\n to close the output stream.  That is, we do <b>not</b>\n close <tt>System.err</tt>.\n"
17654,method,java/util/prefs/PreferencesFactory/systemRoot/," Returns the system root preference node.  (Multiple calls on this\n method will return the same object reference.)\n"
17655,method,java/util/prefs/PreferencesFactory/userRoot/," Returns the user root preference node corresponding to the calling\n user.  In a server, the returned value will typically depend on\n some implicit client-context.\n"
17659,method,java/util/prefs/Preferences/userRoot/," Returns the root preference node for the calling user.\n\n @return the root preference node for the calling user.\n @throws SecurityException If a security manager is present and\n         it denies <tt>RuntimePermission("preferences")</tt>.\n @see    RuntimePermission\n"
17662,method,java/util/prefs/Preferences/get/String;String," Returns the value associated with the specified key in this preference\n node.  Returns the specified default if there is no value associated\n with the key, or the backing store is inaccessible.\n\n <p>Some implementations may store default values in their backing\n stores.  If there is no value associated with the specified key\n but there is such a <i>stored default</i>, it is returned in\n preference to the specified default.\n\n @param key key whose associated value is to be returned.\n @param def the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>.\n @return the value associated with <tt>key</tt>, or <tt>def</tt>\n         if no value is associated with <tt>key</tt>, or the backing\n         store is inaccessible.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.  (A \n         <tt>null</tt> value for <tt>def</tt> <i>is</i> permitted.)\n"
17663,method,java/util/prefs/Preferences/remove/String," Removes the value associated with the specified key in this preference\n node, if any.\n\n <p>If this implementation supports <i>stored defaults</i>, and there is\n such a default for the specified preference, the stored default will be\n "exposed" by this call, in the sense that it will be returned\n by a succeeding call to <tt>get</tt>.\n\n @param key key whose mapping is to be removed from the preference node.\n @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17664,method,java/util/prefs/Preferences/clear/," Removes all of the preferences (key-value associations) in this\n preference node.  This call has no effect on any descendants\n of this node.\n\n <p>If this implementation supports <i>stored defaults</i>, and this\n node in the preferences hierarchy contains any such defaults,\n the stored defaults will be "exposed" by this call, in the sense that\n they will be returned by succeeding calls to <tt>get</tt>.\n\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @see #removeNode()\n"
17675,method,java/util/prefs/Preferences/putByteArray/String;byte[]," Associates a string representing the specified byte array with the\n specified key in this preference node.  The associated string is\n the <i>Base64</i> encoding of the byte array, as defined in <a\n href=http://www.ietf.org/rfc/rfc2045.txt>RFC 2045</a>, Section 6.8,\n with one minor change: the string will consist solely of characters\n from the <i>Base64 Alphabet</i>; it will not contain any newline\n characters.  Note that the maximum length of the byte array is limited\n to three quarters of <tt>MAX_VALUE_LENGTH</tt> so that the length\n of the Base64 encoded String does not exceed <tt>MAX_VALUE_LENGTH</tt>.\n This method is intended for use in conjunction with\n {@link #getByteArray}.\n\n @param key key with which the string form of value is to be associated.\n @param value value whose string form is to be associated with key.\n @throws NullPointerException if key or value is <tt>null</tt>.\n @throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH\n         or if value.length exceeds MAX_VALUE_LENGTH*3/4.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @see #getByteArray(String,byte[])\n @see #get(String,String)\n"
17677,method,java/util/prefs/Preferences/keys/," Returns all of the keys that have an associated value in this\n preference node.  (The returned array will be of size zero if\n this node has no preferences.)\n\n <p>If the implementation supports <i>stored defaults</i> and there\n are any such defaults at this node that have not been overridden,\n by explicit preferences, the defaults are returned in the array in\n addition to any explicit preferences.\n\n @return an array of the keys that have an associated value in this\n         preference node.\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17681,method,java/util/prefs/Preferences/nodeExists/String,"\n Returns true if the named preference node exists in the same tree\n as this node.  Relative path names (which do not begin with the slash\n character <tt>('/')</tt>) are interpreted relative to this preference\n node.\n\n <p>If this node (or an ancestor) has already been removed with the \n {@link #removeNode()} method, it <i>is</i> legal to invoke this method,\n but only with the path name <tt>""</tt>; the invocation will return\n <tt>false</tt>.  Thus, the idiom <tt>p.nodeExists("")</tt> may be\n used to test whether <tt>p</tt> has been removed.\n\n @param pathName the path name of the node whose existence\n        is to be checked.\n @return true if the specified node exists.\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @throws IllegalArgumentException if the path name is invalid (i.e.,\n         it contains multiple consecutive slash characters, or ends\n         with a slash character and is more than one character long).\n @throws NullPointerException if path name is <tt>null</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method and\n         <tt>pathName</tt> is not the empty string (<tt>""</tt>).\n"
17688,method,java/util/prefs/Preferences/sync/," Ensures that future reads from this preference node and its\n descendants reflect any changes that were committed to the persistent\n store (from any VM) prior to the <tt>sync</tt> invocation.  As a\n side-effect, forces any changes in the contents of this preference node\n and its descendants to the persistent store, as if the <tt>flush</tt>\n method had been invoked on this node.\n\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @see    #flush()\n"
17696,method,java/util/prefs/Preferences/Preferences/," Sole constructor. (For invocation by subclass constructors, typically\n implicit.) \n"
17701,method,java/util/prefs/PreferenceChangeListener/preferenceChange/PreferenceChangeEvent," This method gets called when a preference is added, removed or when\n its value is changed.\n <p>\n @param evt A PreferenceChangeEvent object describing the event source \n   	and the preference that has changed.\n"
17708,method,java/util/prefs/NodeChangeListener/childAdded/NodeChangeEvent," This method gets called when a child node is added.\n\n @param evt A node change event object describing the parent\n            and child node.\n"
17709,method,java/util/prefs/NodeChangeListener/childRemoved/NodeChangeEvent," This method gets called when a child node is removed.\n\n @param evt A node change event object describing the parent\n            and child node.\n"
17722,method,java/util/prefs/AbstractPreferences/put/String;String," Implements the <tt>put</tt> method as per the specification in\n {@link Preferences#put(String,String)}.\n\n <p>This implementation checks that the key and value are legal,\n obtains this preference node's lock, checks that the node\n has not been removed, invokes {@link #putSpi(String,String)}, and if\n there are any preference change listeners, enqueues a notification\n event for processing by the event dispatch thread.\n\n @param key key with which the specified value is to be associated.\n @param value value to be associated with the specified key.\n @throws NullPointerException if key or value is <tt>null</tt>.\n @throws IllegalArgumentException if <tt>key.length()</tt> exceeds\n       <tt>MAX_KEY_LENGTH</tt> or if <tt>value.length</tt> exceeds\n       <tt>MAX_VALUE_LENGTH</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17723,method,java/util/prefs/AbstractPreferences/get/String;String," Implements the <tt>get</tt> method as per the specification in\n {@link Preferences#get(String,String)}.\n\n <p>This implementation first checks to see if <tt>key</tt> is\n <tt>null</tt> throwing a <tt>NullPointerException</tt> if this is\n the case.  Then it obtains this preference node's lock,\n checks that the node has not been removed, invokes {@link\n #getSpi(String)}, and returns the result, unless the <tt>getSpi</tt>\n invocation returns <tt>null</tt> or throws an exception, in which case\n this invocation returns <tt>def</tt>.\n\n @param key key whose associated value is to be returned.\n @param def the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>.\n @return the value associated with <tt>key</tt>, or <tt>def</tt>\n         if no value is associated with <tt>key</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @throws NullPointerException if key is <tt>null</tt>.  (A \n         <tt>null</tt> default <i>is</i> permitted.)\n"
17724,method,java/util/prefs/AbstractPreferences/remove/String," Implements the <tt>remove(String)</tt> method as per the specification\n in {@link Preferences#remove(String)}.\n\n <p>This implementation obtains this preference node's lock,\n checks that the node has not been removed, invokes\n {@link #removeSpi(String)} and if there are any preference\n change listeners, enqueues a notification event for processing by the\n event dispatch thread.\n\n @param key key whose mapping is to be removed from the preference node.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17725,method,java/util/prefs/AbstractPreferences/clear/," Implements the <tt>clear</tt> method as per the specification in\n {@link Preferences#clear()}.\n\n <p>This implementation obtains this preference node's lock,\n invokes {@link #keys()} to obtain an array of keys, and\n iterates over the array invoking {@link #remove(String)} on each key.\n\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17726,method,java/util/prefs/AbstractPreferences/putInt/String;int," Implements the <tt>putInt</tt> method as per the specification in\n {@link Preferences#putInt(String,int)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link Integer#toString(int)} and invokes {@link #put(String,String)}\n on the result.\n\n @param key key with which the string form of value is to be associated.\n @param value value whose string form is to be associated with key.\n @throws NullPointerException if key is <tt>null</tt>.\n @throws IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17727,method,java/util/prefs/AbstractPreferences/getInt/String;int," Implements the <tt>getInt</tt> method as per the specification in\n {@link Preferences#getInt(String,int)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, the implementation\n attempts to translate it to an <tt>int</tt> with\n {@link Integer#parseInt(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, <tt>def</tt> is returned.\n\n @param key key whose associated value is to be returned as an int.\n @param def the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as an int.\n @return the int value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         an int.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.\n"
17728,method,java/util/prefs/AbstractPreferences/putLong/String;long," Implements the <tt>putLong</tt> method as per the specification in\n {@link Preferences#putLong(String,long)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link Long#toString(long)} and invokes {@link #put(String,String)}\n on the result.\n\n @param key key with which the string form of value is to be associated.\n @param value value whose string form is to be associated with key.\n @throws NullPointerException if key is <tt>null</tt>.\n @throws IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17729,method,java/util/prefs/AbstractPreferences/getLong/String;long," Implements the <tt>getLong</tt> method as per the specification in\n {@link Preferences#getLong(String,long)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, the implementation\n attempts to translate it to a <tt>long</tt> with\n {@link Long#parseLong(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, <tt>def</tt> is returned.\n\n @param key key whose associated value is to be returned as a long.\n @param def the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a long.\n @return the long value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a long.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.\n"
17730,method,java/util/prefs/AbstractPreferences/putBoolean/String;boolean," Implements the <tt>putBoolean</tt> method as per the specification in\n {@link Preferences#putBoolean(String,boolean)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link String#valueOf(boolean)} and invokes {@link #put(String,String)}\n on the result.\n\n @param key key with which the string form of value is to be associated.\n @param value value whose string form is to be associated with key.\n @throws NullPointerException if key is <tt>null</tt>.\n @throws IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17731,method,java/util/prefs/AbstractPreferences/getBoolean/String;boolean," Implements the <tt>getBoolean</tt> method as per the specification in\n {@link Preferences#getBoolean(String,boolean)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, it is compared with\n <tt>"true"</tt> using {@link String#equalsIgnoreCase(String)}.  If the\n comparison returns <tt>true</tt>, this invocation returns\n <tt>true</tt>.  Otherwise, the original return value is compared with\n <tt>"false"</tt>, again using {@link String#equalsIgnoreCase(String)}.\n If the comparison returns <tt>true</tt>, this invocation returns\n <tt>false</tt>.  Otherwise, this invocation returns <tt>def</tt>.\n\n @param key key whose associated value is to be returned as a boolean.\n @param def the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a boolean.\n @return the boolean value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a boolean.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.\n"
17732,method,java/util/prefs/AbstractPreferences/putFloat/String;float," Implements the <tt>putFloat</tt> method as per the specification in\n {@link Preferences#putFloat(String,float)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link Float#toString(float)} and invokes {@link #put(String,String)}\n on the result.\n\n @param key key with which the string form of value is to be associated.\n @param value value whose string form is to be associated with key.\n @throws NullPointerException if key is <tt>null</tt>.\n @throws IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17733,method,java/util/prefs/AbstractPreferences/getFloat/String;float," Implements the <tt>getFloat</tt> method as per the specification in\n {@link Preferences#getFloat(String,float)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, the implementation\n attempts to translate it to an <tt>float</tt> with\n {@link Float#parseFloat(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, <tt>def</tt> is returned.\n\n @param key key whose associated value is to be returned as a float.\n @param def the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a float.\n @return the float value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a float.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.\n"
17734,method,java/util/prefs/AbstractPreferences/putDouble/String;double," Implements the <tt>putDouble</tt> method as per the specification in\n {@link Preferences#putDouble(String,double)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link Double#toString(double)} and invokes {@link #put(String,String)}\n on the result.\n\n @param key key with which the string form of value is to be associated.\n @param value value whose string form is to be associated with key.\n @throws NullPointerException if key is <tt>null</tt>.\n @throws IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17735,method,java/util/prefs/AbstractPreferences/getDouble/String;double," Implements the <tt>getDouble</tt> method as per the specification in\n {@link Preferences#getDouble(String,double)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, the implementation\n attempts to translate it to an <tt>double</tt> with\n {@link Double#parseDouble(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, <tt>def</tt> is returned.\n\n @param key key whose associated value is to be returned as a double.\n @param def the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a double.\n @return the double value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a double.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.\n"
17738,method,java/util/prefs/AbstractPreferences/keys/," Implements the <tt>keys</tt> method as per the specification in\n {@link Preferences#keys()}.\n\n <p>This implementation obtains this preference node's lock, checks that\n the node has not been removed and invokes {@link #keysSpi()}.\n\n @return an array of the keys that have an associated value in this\n         preference node.\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17739,method,java/util/prefs/AbstractPreferences/childrenNames/," Implements the <tt>children</tt> method as per the specification in\n {@link Preferences#childrenNames()}.\n\n <p>This implementation obtains this preference node's lock, checks that\n the node has not been removed, constructs a <tt>TreeSet</tt> initialized\n to the names of children already cached (the children in this node's\n "child-cache"), invokes {@link #childrenNamesSpi()}, and adds all of the\n returned child-names into the set.  The elements of the tree set are\n dumped into a <tt>String</tt> array using the <tt>toArray</tt> method,\n and this array is returned.\n\n @return the names of the children of this preference node.\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @see #cachedChildren()\n"
17741,method,java/util/prefs/AbstractPreferences/parent/," Implements the <tt>parent</tt> method as per the specification in\n {@link Preferences#parent()}.\n\n <p>This implementation obtains this preference node's lock, checks that\n the node has not been removed and returns the parent value that was\n passed to this node's constructor.\n\n @return the parent of this preference node.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17742,method,java/util/prefs/AbstractPreferences/node/String," Implements the <tt>node</tt> method as per the specification in\n {@link Preferences#node(String)}.\n\n <p>This implementation obtains this preference node's lock and checks\n that the node has not been removed.  If <tt>path</tt> is <tt>""</tt>,\n this node is returned; if <tt>path</tt> is <tt>"/"</tt>, this node's\n root is returned.  If the first character in <tt>path</tt> is \n not <tt>'/'</tt>, the implementation breaks <tt>path</tt> into\n tokens and recursively traverses the path from this node to the\n named node, "consuming" a name and a slash from <tt>path</tt> at\n each step of the traversal.  At each step, the current node is locked\n and the node's child-cache is checked for the named node.  If it is\n not found, the name is checked to make sure its length does not\n exceed <tt>MAX_NAME_LENGTH</tt>.  Then the {@link #childSpi(String)}\n method is invoked, and the result stored in this node's child-cache.\n If the newly created <tt>Preferences</tt> object's {@link #newNode}\n field is <tt>true</tt> and there are any node change listeners,\n a notification event is enqueued for processing by the event dispatch\n thread. \n\n <p>When there are no more tokens, the last value found in the\n child-cache or returned by <tt>childSpi</tt> is returned by this\n method.  If during the traversal, two <tt>"/"</tt> tokens occur\n consecutively, or the final token is <tt>"/"</tt> (rather than a name),\n an appropriate <tt>IllegalArgumentException</tt> is thrown.\n\n <p> If the first character of <tt>path</tt> is <tt>'/'</tt>\n (indicating an absolute path name) this preference node's\n lock is dropped prior to breaking <tt>path</tt> into tokens, and \n this method recursively traverses the path starting from the root\n (rather than starting from this node).  The traversal is otherwise\n identical to the one described for relative path names.  Dropping\n the lock on this node prior to commencing the traversal at the root\n node is essential to avoid the possibility of deadlock, as per the\n {@link #lock locking invariant}.\n\n @param path the path name of the preference node to return.\n @return the specified preference node.\n @throws IllegalArgumentException if the path name is invalid (i.e.,\n         it contains multiple consecutive slash characters, or ends\n         with a slash character and is more than one character long).\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n"
17744,method,java/util/prefs/AbstractPreferences/removeNode/,"\n Implements the <tt>removeNode()</tt> method as per the specification in\n {@link Preferences#removeNode()}.\n\n <p>This implementation checks to see that this node is the root; if so,\n it throws an appropriate exception.  Then, it locks this node's parent,\n and calls a recursive helper method that traverses the subtree rooted at\n this node.  The recursive method locks the node on which it was called,\n checks that it has not already been removed, and then ensures that all\n of its children are cached: The {@link #childrenNamesSpi()} method is\n invoked and each returned child name is checked for containment in the\n child-cache.  If a child is not already cached, the {@link\n #childSpi(String)} method is invoked to create a <tt>Preferences</tt>\n instance for it, and this instance is put into the child-cache.  Then\n the helper method calls itself recursively on each node contained in its\n child-cache.  Next, it invokes {@link #removeNodeSpi()}, marks itself\n as removed, and removes itself from its parent's child-cache.  Finally,\n if there are any node change listeners, it enqueues a notification\n event for processing by the event dispatch thread.\n\n <p>Note that the helper method is always invoked with all ancestors up\n to the "closest non-removed ancestor" locked.\n\n @throws IllegalStateException if this node (or an ancestor) has already\n         been removed with the {@link #removeNode()} method.\n @throws UnsupportedOperationException if this method is invoked on \n         the root node.\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n"
17752,method,java/util/prefs/AbstractPreferences/putSpi/String;String," Put the given key-value association into this preference node.  It is\n guaranteed that <tt>key</tt> and <tt>value</tt> are non-null and of\n legal length.  Also, it is guaranteed that this node has not been\n removed.  (The implementor needn't check for any of these things.)\n\n <p>This method is invoked with the lock on this node held.\n"
17754,method,java/util/prefs/AbstractPreferences/removeSpi/String," Remove the association (if any) for the specified key at this \n preference node.  It is guaranteed that <tt>key</tt> is non-null.\n Also, it is guaranteed that this node has not been removed.\n (The implementor needn't check for either of these things.)\n\n <p>This method is invoked with the lock on this node held.\n"
17755,method,java/util/prefs/AbstractPreferences/removeNodeSpi/,"\n Removes this preference node, invalidating it and any preferences that\n it contains.  The named child will have no descendants at the time this\n invocation is made (i.e., the {@link Preferences#removeNode()} method\n invokes this method repeatedly in a bottom-up fashion, removing each of\n a node's descendants before removing the node itself).\n\n <p>This method is invoked with the lock held on this node and its\n parent (and all ancestors that are being removed as a\n result of a single invocation to {@link Preferences#removeNode()}).\n\n <p>The removal of a node needn't become persistent until the\n <tt>flush</tt> method is invoked on this node (or an ancestor).\n\n <p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #removeNode()}\n invocation.\n\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n"
17756,method,java/util/prefs/AbstractPreferences/keysSpi/," Returns all of the keys that have an associated value in this\n preference node.  (The returned array will be of size zero if\n this node has no preferences.)  It is guaranteed that this node has not\n been removed.\n\n <p>This method is invoked with the lock on this node held.\n\n <p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #keys()} invocation.\n\n @return an array of the keys that have an associated value in this\n         preference node.\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n"
17757,method,java/util/prefs/AbstractPreferences/childrenNamesSpi/," Returns the names of the children of this preference node.  (The\n returned array will be of size zero if this node has no children.)\n This method need not return the names of any nodes already cached,\n but may do so without harm.\n\n <p>This method is invoked with the lock on this node held.\n\n <p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #childrenNames()}\n invocation.\n\n @return an array containing the names of the children of this\n         preference node.\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n"
17758,method,java/util/prefs/AbstractPreferences/getChild/String,"\n Returns the named child if it exists, or <tt>null</tt> if it does not.\n It is guaranteed that <tt>nodeName</tt> is non-null, non-empty,\n does not contain the slash character ('/'), and is no longer than\n {@link #MAX_NAME_LENGTH} characters.  Also, it is guaranteed\n that this node has not been removed.  (The implementor needn't check\n for any of these things if he chooses to override this method.)\n\n <p>Finally, it is guaranteed that the named node has not been returned\n by a previous invocation of this method or {@link #childSpi} after the\n last time that it was removed.  In other words, a cached value will\n always be used in preference to invoking this method.  (The implementor\n needn't maintain his own cache of previously returned children if he\n chooses to override this method.)\n\n <p>This implementation obtains this preference node's lock, invokes\n {@link #childrenNames()} to get an array of the names of this node's\n children, and iterates over the array comparing the name of each child\n with the specified node name.  If a child node has the correct name,\n the {@link #childSpi(String)} method is invoked and the resulting\n node is returned.  If the iteration completes without finding the\n specified name, <tt>null</tt> is returned.\n\n @param nodeName name of the child to be searched for.\n @return the named child if it exists, or null if it does not.\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n"
17761,method,java/util/prefs/AbstractPreferences/sync/," Implements the <tt>sync</tt> method as per the specification in\n {@link Preferences#sync()}.\n\n <p>This implementation calls a recursive helper method that locks this\n node, invokes syncSpi() on it, unlocks this node, and recursively\n invokes this method on each "cached child."  A cached child is a child\n of this node that has been created in this VM and not subsequently\n removed.  In effect, this method does a depth first traversal of the\n "cached subtree" rooted at this node, calling syncSpi() on each node in\n the subTree while only that node is locked. Note that syncSpi() is\n invoked top-down.\n\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @throws IllegalStateException if this node (or an ancestor) has been\n         removed with the {@link #removeNode()} method.\n @see #flush()\n"
17763,method,java/util/prefs/AbstractPreferences/flush/," Implements the <tt>flush</tt> method as per the specification in\n {@link Preferences#flush()}.\n\n <p>This implementation calls a recursive helper method that locks this\n node, invokes flushSpi() on it, unlocks this node, and recursively\n invokes this method on each "cached child."  A cached child is a child\n of this node that has been created in this VM and not subsequently\n removed.  In effect, this method does a depth first traversal of the\n "cached subtree" rooted at this node, calling flushSpi() on each node in\n the subTree while only that node is locked. Note that flushSpi() is\n invoked top-down.\n\n <p> If this method is invoked on a node that has been removed with \n the {@link #removeNode()} method, flushSpi() is invoked on this node, \n but not on others.\n\n @throws BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to \n         communicate with it.\n @see #flush()\n"
17765,method,java/util/prefs/AbstractPreferences/isRemoved/," Returns <tt>true</tt> iff this node (or an ancestor) has been\n removed with the {@link #removeNode()} method.  This method\n locks this node prior to returning the contents of the private\n field used to track this state.\n\n @return <tt>true</tt> iff this node (or an ancestor) has been\n       removed with the {@link #removeNode()} method.\n"
17770,field,java/util/prefs/AbstractPreferences/lock," An object whose monitor is used to lock this node.  This object\n is used in preference to the node itself to reduce the likelihood of\n intentional or unintentional denial of service due to a locked node.\n To avoid deadlock, a node is <i>never</i> locked by a thread that\n holds a lock on a descendant of that node.\n"
17774,class,java/util/concurrent/TimeUnit," A <tt>TimeUnit</tt> represents time durations at a given unit of\n granularity and provides utility methods to convert across units,\n and to perform timing and delay operations in these units.  A\n <tt>TimeUnit</tt> does not maintain time information, but only\n helps organize and use time representations that may be maintained\n separately across various contexts.  A nanosecond is defined as one\n thousandth of a microsecond, a microsecond as one thousandth of a\n millisecond, a millisecond as one thousandth of a second, a minute\n as sixty seconds, an hour as sixty minutes, and a day as twenty four\n hours.\n\n <p>A <tt>TimeUnit</tt> is mainly used to inform time-based methods\n how a given timing parameter should be interpreted. For example,\n the following code will timeout in 50 milliseconds if the {@link\n java.util.concurrent.locks.Lock lock} is not available:\n\n <pre>  Lock lock = ...;\n  if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ...\n </pre>\n while this code will timeout in 50 seconds:\n <pre>\n  Lock lock = ...;\n  if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ...\n </pre>\n\n Note however, that there is no guarantee that a particular timeout\n implementation will be able to notice the passage of time at the\n same granularity as the given <tt>TimeUnit</tt>.\n\n @since 1.5\n @author Doug Lea\n"
17785,method,java/util/concurrent/TimeUnit/timedWait/Object;long," Performs a timed <tt>Object.wait</tt> using this time unit.\n This is a convenience method that converts timeout arguments\n into the form required by the <tt>Object.wait</tt> method.\n\n <p>For example, you could implement a blocking <tt>poll</tt>\n method (see {@link BlockingQueue#poll BlockingQueue.poll})\n using:\n\n <pre>  public synchronized Object poll(long timeout, TimeUnit unit) throws InterruptedException {\n    while (empty) {\n      unit.timedWait(this, timeout);\n      ...\n    }\n  }</pre>\n\n @param obj the object to wait on\n @param timeout the maximum time to wait. If less than\n or equal to zero, do not wait at all.\n @throws InterruptedException if interrupted while waiting.\n @see Object#wait(long, int)\n"
17786,method,java/util/concurrent/TimeUnit/timedJoin/Thread;long," Performs a timed <tt>Thread.join</tt> using this time unit.\n This is a convenience method that converts time arguments into the\n form required by the <tt>Thread.join</tt> method.\n @param thread the thread to wait for\n @param timeout the maximum time to wait. If less than\n or equal to zero, do not wait at all.\n @throws InterruptedException if interrupted while waiting.\n @see Thread#join(long, int)\n"
17787,method,java/util/concurrent/TimeUnit/sleep/long," Performs a <tt>Thread.sleep</tt> using this unit.\n This is a convenience method that converts time arguments into the\n form required by the <tt>Thread.sleep</tt> method.\n @param timeout the minimum time to sleep. If less than\n or equal to zero, do not sleep at all.\n @throws InterruptedException if interrupted while sleeping.\n @see Thread#sleep\n"
17796,method,java/util/concurrent/ThreadPoolExecutor/execute/Runnable," Executes the given task sometime in the future.  The task\n may execute in a new thread or in an existing pooled thread.\n\n If the task cannot be submitted for execution, either because this\n executor has been shutdown or because its capacity has been reached,\n the task is handled by the current <tt>RejectedExecutionHandler</tt>.\n\n @param command the task to execute\n @throws RejectedExecutionException at discretion of\n <tt>RejectedExecutionHandler</tt>, if task cannot be accepted\n for execution\n @throws NullPointerException if command is null\n"
17797,method,java/util/concurrent/ThreadPoolExecutor/shutdown/," Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be\n accepted. Invocation has no additional effect if already shut\n down.\n @throws SecurityException if a security manager exists and\n shutting down this ExecutorService may manipulate threads that\n the caller is not permitted to modify because it does not hold\n {@link java.lang.RuntimePermission}<tt>("modifyThread")</tt>,\n or the security manager's <tt>checkAccess</tt> method denies access.\n"
17798,method,java/util/concurrent/ThreadPoolExecutor/shutdownNow/," Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution. These tasks are drained (removed)\n from the task queue upon return from this method.\n\n <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n cancels tasks via {@link Thread#interrupt}, so any task that\n fails to respond to interrupts may never terminate.\n\n @return list of tasks that never commenced execution\n @throws SecurityException if a security manager exists and\n shutting down this ExecutorService may manipulate threads that\n the caller is not permitted to modify because it does not hold\n {@link java.lang.RuntimePermission}<tt>("modifyThread")</tt>,\n or the security manager's <tt>checkAccess</tt> method denies access.\n"
17800,method,java/util/concurrent/ThreadPoolExecutor/isTerminating/," Returns true if this executor is in the process of terminating\n after <tt>shutdown</tt> or <tt>shutdownNow</tt> but has not\n completely terminated.  This method may be useful for\n debugging. A return of <tt>true</tt> reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, causing this executor not\n to properly terminate.\n @return true if terminating but not yet terminated\n"
17803,method,java/util/concurrent/ThreadPoolExecutor/finalize/," Invokes <tt>shutdown</tt> when this executor is no longer\n referenced.\n"
17804,method,java/util/concurrent/ThreadPoolExecutor/setThreadFactory/ThreadFactory," Sets the thread factory used to create new threads.\n\n @param threadFactory the new thread factory\n @throws NullPointerException if threadFactory is null\n @see #getThreadFactory\n"
17805,method,java/util/concurrent/ThreadPoolExecutor/getThreadFactory/," Returns the thread factory used to create new threads.\n\n @return the current thread factory\n @see #setThreadFactory\n"
17808,method,java/util/concurrent/ThreadPoolExecutor/setCorePoolSize/int," Sets the core number of threads.  This overrides any value set\n in the constructor.  If the new value is smaller than the\n current value, excess existing threads will be terminated when\n they next become idle. If larger, new threads will, if needed,\n be started to execute any queued tasks.\n\n @param corePoolSize the new core size\n @throws IllegalArgumentException if <tt>corePoolSize</tt>\n less than zero\n @see #getCorePoolSize\n"
17809,method,java/util/concurrent/ThreadPoolExecutor/getCorePoolSize/," Returns the core number of threads.\n\n @return the core number of threads\n @see #setCorePoolSize\n"
17810,method,java/util/concurrent/ThreadPoolExecutor/prestartCoreThread/," Starts a core thread, causing it to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed. This method will return <tt>false</tt>\n if all core threads have already been started.\n @return true if a thread was started\n"
17811,method,java/util/concurrent/ThreadPoolExecutor/prestartAllCoreThreads/," Starts all core threads, causing them to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed.\n @return the number of threads started\n"
17812,method,java/util/concurrent/ThreadPoolExecutor/allowsCoreThreadTimeOut/," Returns true if this pool allows core threads to time out and\n terminate if no tasks arrive within the keepAlive time, being\n replaced if needed when new tasks arrive. When true, the same\n keep-alive policy applying to non-core threads applies also to\n core threads. When false (the default), core threads are never\n terminated due to lack of incoming tasks.\n @return <tt>true</tt> if core threads are allowed to time out,\n else <tt>false</tt>\n\n @since 1.6\n"
17814,method,java/util/concurrent/ThreadPoolExecutor/setMaximumPoolSize/int," Sets the maximum allowed number of threads. This overrides any\n value set in the constructor. If the new value is smaller than\n the current value, excess existing threads will be\n terminated when they next become idle.\n\n @param maximumPoolSize the new maximum\n @throws IllegalArgumentException if the new maximum is\n         less than or equal to zero, or\n         less than the {@linkplain #getCorePoolSize core pool size}\n @see #getMaximumPoolSize\n"
17815,method,java/util/concurrent/ThreadPoolExecutor/getMaximumPoolSize/," Returns the maximum allowed number of threads.\n\n @return the maximum allowed number of threads\n @see #setMaximumPoolSize\n"
17816,method,java/util/concurrent/ThreadPoolExecutor/setKeepAliveTime/long;TimeUnit," Sets the time limit for which threads may remain idle before\n being terminated.  If there are more than the core number of\n threads currently in the pool, after waiting this amount of\n time without processing a task, excess threads will be\n terminated.  This overrides any value set in the constructor.\n @param time the time to wait.  A time value of zero will cause\n excess threads to terminate immediately after executing tasks.\n @param unit the time unit of the time argument\n @throws IllegalArgumentException if time less than zero or\n if time is zero and allowsCoreThreadTimeOut\n @see #getKeepAliveTime\n"
17817,method,java/util/concurrent/ThreadPoolExecutor/getKeepAliveTime/TimeUnit," Returns the thread keep-alive time, which is the amount of time\n that threads in excess of the core pool size may remain\n idle before being terminated.\n\n @param unit the desired time unit of the result\n @return the time limit\n @see #setKeepAliveTime\n"
17818,method,java/util/concurrent/ThreadPoolExecutor/getQueue/," Returns the task queue used by this executor. Access to the\n task queue is intended primarily for debugging and monitoring.\n This queue may be in active use.  Retrieving the task queue\n does not prevent queued tasks from executing.\n\n @return the task queue\n"
17819,method,java/util/concurrent/ThreadPoolExecutor/remove/Runnable," Removes this task from the executor's internal queue if it is\n present, thus causing it not to be run if it has not already\n started.\n\n <p> This method may be useful as one part of a cancellation\n scheme.  It may fail to remove tasks that have been converted\n into other forms before being placed on the internal queue. For\n example, a task entered using <tt>submit</tt> might be\n converted into a form that maintains <tt>Future</tt> status.\n However, in such cases, method {@link ThreadPoolExecutor#purge}\n may be used to remove those Futures that have been cancelled.\n\n @param task the task to remove\n @return true if the task was removed\n"
17820,method,java/util/concurrent/ThreadPoolExecutor/purge/," Tries to remove from the work queue all {@link Future}\n tasks that have been cancelled. This method can be useful as a\n storage reclamation operation, that has no other impact on\n functionality. Cancelled tasks are never executed, but may\n accumulate in work queues until worker threads can actively\n remove them. Invoking this method instead tries to remove them now.\n However, this method may fail to remove tasks in\n the presence of interference by other threads.\n"
17821,method,java/util/concurrent/ThreadPoolExecutor/getPoolSize/," Returns the current number of threads in the pool.\n\n @return the number of threads\n"
17822,method,java/util/concurrent/ThreadPoolExecutor/getActiveCount/," Returns the approximate number of threads that are actively\n executing tasks.\n\n @return the number of threads\n"
17823,method,java/util/concurrent/ThreadPoolExecutor/getLargestPoolSize/," Returns the largest number of threads that have ever\n simultaneously been in the pool.\n\n @return the number of threads\n"
17824,method,java/util/concurrent/ThreadPoolExecutor/getTaskCount/," Returns the approximate total number of tasks that have ever been\n scheduled for execution.  Because the states of tasks and\n threads may change dynamically during computation, the returned\n value is only an approximation.\n\n @return the number of tasks\n"
17825,method,java/util/concurrent/ThreadPoolExecutor/getCompletedTaskCount/," Returns the approximate total number of tasks that have\n completed execution. Because the states of tasks and threads\n may change dynamically during computation, the returned value\n is only an approximation, but one that does not ever decrease\n across successive calls.\n\n @return the number of tasks\n"
17829,method,java/util/concurrent/ThreadPoolExecutor/ThreadPoolExecutor/int;int;long;TimeUnit;BlockingQueue," Creates a new <tt>ThreadPoolExecutor</tt> with the given initial\n parameters and default thread factory and rejected execution handler.\n It may be more convenient to use one of the {@link Executors} factory\n methods instead of this general purpose constructor.\n\n @param corePoolSize the number of threads to keep in the\n pool, even if they are idle.\n @param maximumPoolSize the maximum number of threads to allow in the\n pool.\n @param keepAliveTime when the number of threads is greater than\n the core, this is the maximum time that excess idle threads\n will wait for new tasks before terminating.\n @param unit the time unit for the keepAliveTime\n argument.\n @param workQueue the queue to use for holding tasks before they\n are executed. This queue will hold only the <tt>Runnable</tt>\n tasks submitted by the <tt>execute</tt> method.\n @throws IllegalArgumentException if corePoolSize or\n keepAliveTime less than zero, or if maximumPoolSize less than or\n equal to zero, or if corePoolSize greater than maximumPoolSize.\n @throws NullPointerException if <tt>workQueue</tt> is null\n"
17830,method,java/util/concurrent/ThreadPoolExecutor/ThreadPoolExecutor/int;int;long;TimeUnit;BlockingQueue;ThreadFactory," Creates a new <tt>ThreadPoolExecutor</tt> with the given initial\n parameters and default rejected execution handler.\n\n @param corePoolSize the number of threads to keep in the\n pool, even if they are idle.\n @param maximumPoolSize the maximum number of threads to allow in the\n pool.\n @param keepAliveTime when the number of threads is greater than\n the core, this is the maximum time that excess idle threads\n will wait for new tasks before terminating.\n @param unit the time unit for the keepAliveTime\n argument.\n @param workQueue the queue to use for holding tasks before they\n are executed. This queue will hold only the <tt>Runnable</tt>\n tasks submitted by the <tt>execute</tt> method.\n @param threadFactory the factory to use when the executor\n creates a new thread.\n @throws IllegalArgumentException if corePoolSize or\n keepAliveTime less than zero, or if maximumPoolSize less than or\n equal to zero, or if corePoolSize greater than maximumPoolSize.\n @throws NullPointerException if <tt>workQueue</tt>\n or <tt>threadFactory</tt> are null.\n"
17831,method,java/util/concurrent/ThreadPoolExecutor/ThreadPoolExecutor/int;int;long;TimeUnit;BlockingQueue;RejectedExecutionHandler," Creates a new <tt>ThreadPoolExecutor</tt> with the given initial\n parameters and default thread factory.\n\n @param corePoolSize the number of threads to keep in the\n pool, even if they are idle.\n @param maximumPoolSize the maximum number of threads to allow in the\n pool.\n @param keepAliveTime when the number of threads is greater than\n the core, this is the maximum time that excess idle threads\n will wait for new tasks before terminating.\n @param unit the time unit for the keepAliveTime\n argument.\n @param workQueue the queue to use for holding tasks before they\n are executed. This queue will hold only the <tt>Runnable</tt>\n tasks submitted by the <tt>execute</tt> method.\n @param handler the handler to use when execution is blocked\n because the thread bounds and queue capacities are reached.\n @throws IllegalArgumentException if corePoolSize or\n keepAliveTime less than zero, or if maximumPoolSize less than or\n equal to zero, or if corePoolSize greater than maximumPoolSize.\n @throws NullPointerException if <tt>workQueue</tt>\n or <tt>handler</tt> are null.\n"
17832,method,java/util/concurrent/ThreadPoolExecutor/ThreadPoolExecutor/int;int;long;TimeUnit;BlockingQueue;ThreadFactory;RejectedExecutionHandler," Creates a new <tt>ThreadPoolExecutor</tt> with the given initial\n parameters.\n\n @param corePoolSize the number of threads to keep in the\n pool, even if they are idle.\n @param maximumPoolSize the maximum number of threads to allow in the\n pool.\n @param keepAliveTime when the number of threads is greater than\n the core, this is the maximum time that excess idle threads\n will wait for new tasks before terminating.\n @param unit the time unit for the keepAliveTime\n argument.\n @param workQueue the queue to use for holding tasks before they\n are executed. This queue will hold only the <tt>Runnable</tt>\n tasks submitted by the <tt>execute</tt> method.\n @param threadFactory the factory to use when the executor\n creates a new thread.\n @param handler the handler to use when execution is blocked\n because the thread bounds and queue capacities are reached.\n @throws IllegalArgumentException if corePoolSize or\n keepAliveTime less than zero, or if maximumPoolSize less than or\n equal to zero, or if corePoolSize greater than maximumPoolSize.\n @throws NullPointerException if <tt>workQueue</tt>\n or <tt>threadFactory</tt> or <tt>handler</tt> are null.\n"
17833,class,java/util/concurrent/ThreadPoolExecutor/CallerRunsPolicy," A handler for rejected tasks that runs the rejected task\n directly in the calling thread of the <tt>execute</tt> method,\n unless the executor has been shut down, in which case the task\n is discarded.\n"
17834,method,java/util/concurrent/ThreadPoolExecutor/CallerRunsPolicy/rejectedExecution/Runnable;ThreadPoolExecutor," Executes task r in the caller's thread, unless the executor\n has been shut down, in which case the task is discarded.\n @param r the runnable task requested to be executed\n @param e the executor attempting to execute this task\n"
17835,method,java/util/concurrent/ThreadPoolExecutor/CallerRunsPolicy/ThreadPoolExecutor/CallerRunsPolicy/," Creates a <tt>CallerRunsPolicy</tt>.\n"
17845,interface,java/util/concurrent/ThreadFactory," An object that creates new threads on demand.  Using thread factories\n removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},\n enabling applications to use special thread subclasses, priorities, etc.\n\n <p>\n The simplest implementation of this interface is just:\n <pre>\n class SimpleThreadFactory implements ThreadFactory {\n   public Thread newThread(Runnable r) {\n     return new Thread(r);\n   }\n }\n </pre>\n\n The {@link Executors#defaultThreadFactory} method provides a more\n useful simple implementation, that sets the created thread context\n to known values before returning it.\n @since 1.5\n @author Doug Lea\n"
17846,method,java/util/concurrent/ThreadFactory/newThread/Runnable," Constructs a new {@code Thread}.  Implementations may also initialize\n priority, name, daemon status, {@code ThreadGroup}, etc.\n\n @param r a runnable to be executed by new thread instance\n @return constructed thread, or {@code null} if the request to\n         create a thread is rejected\n"
17847,class,java/util/concurrent/SynchronousQueue," A {@linkplain BlockingQueue blocking queue} in which each insert\n operation must wait for a corresponding remove operation by another\n thread, and vice versa.  A synchronous queue does not have any\n internal capacity, not even a capacity of one.  You cannot\n <tt>peek</tt> at a synchronous queue because an element is only\n present when you try to remove it; you cannot insert an element\n (using any method) unless another thread is trying to remove it;\n you cannot iterate as there is nothing to iterate.  The\n <em>head</em> of the queue is the element that the first queued\n inserting thread is trying to add to the queue; if there is no such\n queued thread then no element is available for removal and\n <tt>poll()</tt> will return <tt>null</tt>.  For purposes of other\n <tt>Collection</tt> methods (for example <tt>contains</tt>), a\n <tt>SynchronousQueue</tt> acts as an empty collection.  This queue\n does not permit <tt>null</tt> elements.\n\n <p>Synchronous queues are similar to rendezvous channels used in\n CSP and Ada. They are well suited for handoff designs, in which an\n object running in one thread must sync up with an object running\n in another thread in order to hand it some information, event, or\n task.\n\n <p> This class supports an optional fairness policy for ordering\n waiting producer and consumer threads.  By default, this ordering\n is not guaranteed. However, a queue constructed with fairness set\n to <tt>true</tt> grants threads access in FIFO order.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @since 1.5\n @author Doug Lea and Bill Scherer and Michael Scott\n @param <E> the type of elements held in this collection\n"
17848,method,java/util/concurrent/SynchronousQueue/put/Object," Adds the specified element to this queue, waiting if necessary for\n another thread to receive it.\n\n @throws InterruptedException {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
17849,method,java/util/concurrent/SynchronousQueue/offer/Object;long;TimeUnit," Inserts the specified element into this queue, waiting if necessary\n up to the specified wait time for another thread to receive it.\n\n @return <tt>true</tt> if successful, or <tt>false</tt> if the\n         specified waiting time elapses before a consumer appears.\n @throws InterruptedException {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
17850,method,java/util/concurrent/SynchronousQueue/offer/Object," Inserts the specified element into this queue, if another thread is\n waiting to receive it.\n\n @param e the element to add\n @return <tt>true</tt> if the element was added to this queue, else\n         <tt>false</tt>\n @throws NullPointerException if the specified element is null\n"
17851,method,java/util/concurrent/SynchronousQueue/take/," Retrieves and removes the head of this queue, waiting if necessary\n for another thread to insert it.\n\n @return the head of this queue\n @throws InterruptedException {@inheritDoc}\n"
17852,method,java/util/concurrent/SynchronousQueue/poll/long;TimeUnit," Retrieves and removes the head of this queue, waiting\n if necessary up to the specified wait time, for another thread\n to insert it.\n\n @return the head of this queue, or <tt>null</tt> if the\n         specified waiting time elapses before an element is present.\n @throws InterruptedException {@inheritDoc}\n"
17853,method,java/util/concurrent/SynchronousQueue/poll/," Retrieves and removes the head of this queue, if another thread\n is currently making an element available.\n\n @return the head of this queue, or <tt>null</tt> if no\n         element is available.\n"
17854,method,java/util/concurrent/SynchronousQueue/isEmpty/," Always returns <tt>true</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n\n @return <tt>true</tt>\n"
17855,method,java/util/concurrent/SynchronousQueue/size/," Always returns zero.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n\n @return zero.\n"
17856,method,java/util/concurrent/SynchronousQueue/remainingCapacity/," Always returns zero.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n\n @return zero.\n"
17857,method,java/util/concurrent/SynchronousQueue/clear/," Does nothing.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n"
17858,method,java/util/concurrent/SynchronousQueue/contains/Object," Always returns <tt>false</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n\n @param o the element\n @return <tt>false</tt>\n"
17859,method,java/util/concurrent/SynchronousQueue/remove/Object," Always returns <tt>false</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n\n @param o the element to remove\n @return <tt>false</tt>\n"
17860,method,java/util/concurrent/SynchronousQueue/containsAll/Collection," Returns <tt>false</tt> unless the given collection is empty.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n\n @param c the collection\n @return <tt>false</tt> unless given collection is empty\n"
17861,method,java/util/concurrent/SynchronousQueue/removeAll/Collection," Always returns <tt>false</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n\n @param c the collection\n @return <tt>false</tt>\n"
17862,method,java/util/concurrent/SynchronousQueue/retainAll/Collection," Always returns <tt>false</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.\n\n @param c the collection\n @return <tt>false</tt>\n"
17863,method,java/util/concurrent/SynchronousQueue/peek/," Always returns <tt>null</tt>.\n A <tt>SynchronousQueue</tt> does not return elements\n unless actively waited on.\n\n @return <tt>null</tt>\n"
17867,method,java/util/concurrent/SynchronousQueue/drainTo/Collection," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
17868,method,java/util/concurrent/SynchronousQueue/drainTo/Collection;int," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
17869,method,java/util/concurrent/SynchronousQueue/SynchronousQueue/," Creates a <tt>SynchronousQueue</tt> with nonfair access policy.\n"
17870,method,java/util/concurrent/SynchronousQueue/SynchronousQueue/boolean," Creates a <tt>SynchronousQueue</tt> with the specified fairness policy.\n\n @param fair if true, waiting threads contend in FIFO order for\n        access; otherwise the order is unspecified.\n"
17872,method,java/util/concurrent/Semaphore/acquire/," Acquires a permit from this semaphore, blocking until one is\n available, or the thread is {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires a permit, if one is available and returns immediately,\n reducing the number of available permits by one.\n\n <p>If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n <ul>\n <li>Some other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for a permit,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n @throws InterruptedException if the current thread is interrupted\n"
17873,method,java/util/concurrent/Semaphore/acquireUninterruptibly/," Acquires a permit from this semaphore, blocking until one is\n available.\n\n <p>Acquires a permit, if one is available and returns immediately,\n reducing the number of available permits by one.\n\n <p>If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n some other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit.\n\n <p>If the current thread is {@linkplain Thread#interrupt interrupted}\n while waiting for a permit then it will continue to wait, but the\n time at which the thread is assigned a permit may change compared to\n the time it would have received the permit had no interruption\n occurred.  When the thread does return from this method its interrupt\n status will be set.\n"
17874,method,java/util/concurrent/Semaphore/tryAcquire/," Acquires a permit from this semaphore, only if one is available at the\n time of invocation.\n\n <p>Acquires a permit, if one is available and returns immediately,\n with the value {@code true},\n reducing the number of available permits by one.\n\n <p>If no permit is available then this method will return\n immediately with the value {@code false}.\n\n <p>Even when this semaphore has been set to use a\n fair ordering policy, a call to {@code tryAcquire()} <em>will</em>\n immediately acquire a permit if one is available, whether or not\n other threads are currently waiting.\n This &quot;barging&quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to honor\n the fairness setting, then use\n {@link #tryAcquire(long, TimeUnit) tryAcquire(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).\n\n @return {@code true} if a permit was acquired and {@code false}\n         otherwise\n"
17875,method,java/util/concurrent/Semaphore/tryAcquire/long;TimeUnit," Acquires a permit from this semaphore, if one becomes available\n within the given waiting time and the current thread has not\n been {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires a permit, if one is available and returns immediately,\n with the value {@code true},\n reducing the number of available permits by one.\n\n <p>If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of three things happens:\n <ul>\n <li>Some other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </ul>\n\n <p>If a permit is acquired then the value {@code true} is returned.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n to acquire a permit,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.\n\n @param timeout the maximum time to wait for a permit\n @param unit the time unit of the {@code timeout} argument\n @return {@code true} if a permit was acquired and {@code false}\n         if the waiting time elapsed before a permit was acquired\n @throws InterruptedException if the current thread is interrupted\n"
17876,method,java/util/concurrent/Semaphore/release/," Releases a permit, returning it to the semaphore.\n\n <p>Releases a permit, increasing the number of available permits by\n one.  If any threads are trying to acquire a permit, then one is\n selected and given the permit that was just released.  That thread\n is (re)enabled for thread scheduling purposes.\n\n <p>There is no requirement that a thread that releases a permit must\n have acquired that permit by calling {@link #acquire}.\n Correct usage of a semaphore is established by programming convention\n in the application.\n"
17877,method,java/util/concurrent/Semaphore/acquire/int," Acquires the given number of permits from this semaphore,\n blocking until all are available,\n or the thread is {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the given number of permits, if they are available,\n and returns immediately, reducing the number of available permits\n by the given amount.\n\n <p>If insufficient permits are available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n <ul>\n <li>Some other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for a permit,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n Any permits that were to be assigned to this thread are instead\n assigned to other threads trying to acquire permits, as if\n permits had been made available by a call to {@link #release()}.\n\n @param permits the number of permits to acquire\n @throws InterruptedException if the current thread is interrupted\n @throws IllegalArgumentException if {@code permits} is negative\n"
17878,method,java/util/concurrent/Semaphore/acquireUninterruptibly/int," Acquires the given number of permits from this semaphore,\n blocking until all are available.\n\n <p>Acquires the given number of permits, if they are available,\n and returns immediately, reducing the number of available permits\n by the given amount.\n\n <p>If insufficient permits are available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n some other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request.\n\n <p>If the current thread is {@linkplain Thread#interrupt interrupted}\n while waiting for permits then it will continue to wait and its\n position in the queue is not affected.  When the thread does return\n from this method its interrupt status will be set.\n\n @param permits the number of permits to acquire\n @throws IllegalArgumentException if {@code permits} is negative\n\n"
17879,method,java/util/concurrent/Semaphore/tryAcquire/int," Acquires the given number of permits from this semaphore, only\n if all are available at the time of invocation.\n\n <p>Acquires the given number of permits, if they are available, and\n returns immediately, with the value {@code true},\n reducing the number of available permits by the given amount.\n\n <p>If insufficient permits are available then this method will return\n immediately with the value {@code false} and the number of available\n permits is unchanged.\n\n <p>Even when this semaphore has been set to use a fair ordering\n policy, a call to {@code tryAcquire} <em>will</em>\n immediately acquire a permit if one is available, whether or\n not other threads are currently waiting.  This\n &quot;barging&quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to\n honor the fairness setting, then use {@link #tryAcquire(int,\n long, TimeUnit) tryAcquire(permits, 0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).\n\n @param permits the number of permits to acquire\n @return {@code true} if the permits were acquired and\n         {@code false} otherwise\n @throws IllegalArgumentException if {@code permits} is negative\n"
17880,method,java/util/concurrent/Semaphore/tryAcquire/int;long;TimeUnit," Acquires the given number of permits from this semaphore, if all\n become available within the given waiting time and the current\n thread has not been {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the given number of permits, if they are available and\n returns immediately, with the value {@code true},\n reducing the number of available permits by the given amount.\n\n <p>If insufficient permits are available then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n <ul>\n <li>Some other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </ul>\n\n <p>If the permits are acquired then the value {@code true} is returned.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n to acquire the permits,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n Any permits that were to be assigned to this thread, are instead\n assigned to other threads trying to acquire permits, as if\n the permits had been made available by a call to {@link #release()}.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.  Any permits that were to be assigned to this\n thread, are instead assigned to other threads trying to acquire\n permits, as if the permits had been made available by a call to\n {@link #release()}.\n\n @param permits the number of permits to acquire\n @param timeout the maximum time to wait for the permits\n @param unit the time unit of the {@code timeout} argument\n @return {@code true} if all permits were acquired and {@code false}\n         if the waiting time elapsed before all permits were acquired\n @throws InterruptedException if the current thread is interrupted\n @throws IllegalArgumentException if {@code permits} is negative\n"
17881,method,java/util/concurrent/Semaphore/release/int," Releases the given number of permits, returning them to the semaphore.\n\n <p>Releases the given number of permits, increasing the number of\n available permits by that amount.\n If any threads are trying to acquire permits, then one\n is selected and given the permits that were just released.\n If the number of available permits satisfies that thread's request\n then that thread is (re)enabled for thread scheduling purposes;\n otherwise the thread will wait until sufficient permits are available.\n If there are still permits available\n after this thread's request has been satisfied, then those permits\n are assigned in turn to other threads trying to acquire permits.\n\n <p>There is no requirement that a thread that releases a permit must\n have acquired that permit by calling {@link Semaphore#acquire acquire}.\n Correct usage of a semaphore is established by programming convention\n in the application.\n\n @param permits the number of permits to release\n @throws IllegalArgumentException if {@code permits} is negative\n"
17882,method,java/util/concurrent/Semaphore/availablePermits/," Returns the current number of permits available in this semaphore.\n\n <p>This method is typically used for debugging and testing purposes.\n\n @return the number of permits available in this semaphore\n"
17884,method,java/util/concurrent/Semaphore/reducePermits/int," Shrinks the number of available permits by the indicated\n reduction. This method can be useful in subclasses that use\n semaphores to track resources that become unavailable. This\n method differs from {@code acquire} in that it does not block\n waiting for permits to become available.\n\n @param reduction the number of permits to remove\n @throws IllegalArgumentException if {@code reduction} is negative\n"
17886,method,java/util/concurrent/Semaphore/hasQueuedThreads/," Queries whether any threads are waiting to acquire. Note that\n because cancellations may occur at any time, a {@code true}\n return does not guarantee that any other thread will ever\n acquire.  This method is designed primarily for use in\n monitoring of the system state.\n\n @return {@code true} if there may be other threads waiting to\n         acquire the lock\n"
17887,method,java/util/concurrent/Semaphore/getQueueLength/," Returns an estimate of the number of threads waiting to acquire.\n The value is only an estimate because the number of threads may\n change dynamically while this method traverses internal data\n structures.  This method is designed for use in monitoring of the\n system state, not for synchronization control.\n\n @return the estimated number of threads waiting for this lock\n"
17888,method,java/util/concurrent/Semaphore/getQueuedThreads/," Returns a collection containing threads that may be waiting to acquire.\n Because the actual set of threads may change dynamically while\n constructing this result, the returned collection is only a best-effort\n estimate.  The elements of the returned collection are in no particular\n order.  This method is designed to facilitate construction of\n subclasses that provide more extensive monitoring facilities.\n\n @return the collection of threads\n"
17894,method,java/util/concurrent/ScheduledThreadPoolExecutor/decorateTask/Runnable;RunnableScheduledFuture," Modifies or replaces the task used to execute a runnable.\n This method can be used to override the concrete\n class used for managing internal tasks.\n The default implementation simply returns the given task.\n\n @param runnable the submitted Runnable\n @param task the task created to execute the runnable\n @return a task that can execute the runnable\n @since 1.6\n"
17895,method,java/util/concurrent/ScheduledThreadPoolExecutor/decorateTask/Callable;RunnableScheduledFuture," Modifies or replaces the task used to execute a callable.\n This method can be used to override the concrete\n class used for managing internal tasks.\n The default implementation simply returns the given task.\n\n @param callable the submitted Callable\n @param task the task created to execute the callable\n @return a task that can execute the callable\n @since 1.6\n"
17900,method,java/util/concurrent/ScheduledThreadPoolExecutor/execute/Runnable," Executes command with zero required delay. This has effect\n equivalent to <tt>schedule(command, 0, anyUnit)</tt>.  Note\n that inspections of the queue and of the list returned by\n <tt>shutdownNow</tt> will access the zero-delayed\n {@link ScheduledFuture}, not the <tt>command</tt> itself.\n\n @param command the task to execute\n @throws RejectedExecutionException at discretion of\n <tt>RejectedExecutionHandler</tt>, if task cannot be accepted\n for execution because the executor has been shut down.\n @throws NullPointerException if command is null\n"
17904,method,java/util/concurrent/ScheduledThreadPoolExecutor/setContinueExistingPeriodicTasksAfterShutdownPolicy/boolean," Sets the policy on whether to continue executing existing periodic\n tasks even when this executor has been <tt>shutdown</tt>. In\n this case, these tasks will only terminate upon\n <tt>shutdownNow</tt>, or after setting the policy to\n <tt>false</tt> when already shutdown. This value is by default\n false.\n\n @param value if true, continue after shutdown, else don't.\n @see #getContinueExistingPeriodicTasksAfterShutdownPolicy\n"
17905,method,java/util/concurrent/ScheduledThreadPoolExecutor/getContinueExistingPeriodicTasksAfterShutdownPolicy/," Gets the policy on whether to continue executing existing\n periodic tasks even when this executor has been\n <tt>shutdown</tt>. In this case, these tasks will only\n terminate upon <tt>shutdownNow</tt> or after setting the policy\n to <tt>false</tt> when already shutdown. This value is by\n default false.\n\n @return true if will continue after shutdown\n @see #setContinueExistingPeriodicTasksAfterShutdownPolicy\n"
17907,method,java/util/concurrent/ScheduledThreadPoolExecutor/getExecuteExistingDelayedTasksAfterShutdownPolicy/," Gets the policy on whether to execute existing delayed\n tasks even when this executor has been <tt>shutdown</tt>. In\n this case, these tasks will only terminate upon\n <tt>shutdownNow</tt>, or after setting the policy to\n <tt>false</tt> when already shutdown. This value is by default\n true.\n\n @return true if will execute after shutdown\n @see #setExecuteExistingDelayedTasksAfterShutdownPolicy\n"
17909,method,java/util/concurrent/ScheduledThreadPoolExecutor/shutdownNow/," Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution.\n\n <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n cancels tasks via {@link Thread#interrupt}, so any task that\n fails to respond to interrupts may never terminate.\n\n @return list of tasks that never commenced execution.  Each\n element of this list is a {@link ScheduledFuture},\n including those tasks submitted using <tt>execute</tt>, which\n are for scheduling purposes used as the basis of a zero-delay\n <tt>ScheduledFuture</tt>.\n @throws SecurityException {@inheritDoc}\n"
17911,method,java/util/concurrent/ScheduledThreadPoolExecutor/ScheduledThreadPoolExecutor/int," Creates a new ScheduledThreadPoolExecutor with the given core\n pool size.\n\n @param corePoolSize the number of threads to keep in the pool,\n even if they are idle\n @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>\n"
17912,method,java/util/concurrent/ScheduledThreadPoolExecutor/ScheduledThreadPoolExecutor/int;ThreadFactory," Creates a new ScheduledThreadPoolExecutor with the given\n initial parameters.\n\n @param corePoolSize the number of threads to keep in the pool,\n even if they are idle\n @param threadFactory the factory to use when the executor\n creates a new thread\n @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>\n @throws NullPointerException if threadFactory is null\n"
17913,method,java/util/concurrent/ScheduledThreadPoolExecutor/ScheduledThreadPoolExecutor/int;RejectedExecutionHandler," Creates a new ScheduledThreadPoolExecutor with the given\n initial parameters.\n\n @param corePoolSize the number of threads to keep in the pool,\n even if they are idle\n @param handler the handler to use when execution is blocked\n because the thread bounds and queue capacities are reached\n @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>\n @throws NullPointerException if handler is null\n"
17914,method,java/util/concurrent/ScheduledThreadPoolExecutor/ScheduledThreadPoolExecutor/int;ThreadFactory;RejectedExecutionHandler," Creates a new ScheduledThreadPoolExecutor with the given\n initial parameters.\n\n @param corePoolSize the number of threads to keep in the pool,\n even if they are idle\n @param threadFactory the factory to use when the executor\n creates a new thread\n @param handler the handler to use when execution is blocked\n because the thread bounds and queue capacities are reached.\n @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>\n @throws NullPointerException if threadFactory or handler is null\n"
17916,interface,java/util/concurrent/ScheduledExecutorService," An {@link ExecutorService} that can schedule commands to run after a given\n delay, or to execute periodically.\n\n <p> The <tt>schedule</tt> methods create tasks with various delays\n and return a task object that can be used to cancel or check\n execution. The <tt>scheduleAtFixedRate</tt> and\n <tt>scheduleWithFixedDelay</tt> methods create and execute tasks\n that run periodically until cancelled.\n\n <p> Commands submitted using the {@link Executor#execute} and\n {@link ExecutorService} <tt>submit</tt> methods are scheduled with\n a requested delay of zero. Zero and negative delays (but not\n periods) are also allowed in <tt>schedule</tt> methods, and are\n treated as requests for immediate execution.\n\n <p>All <tt>schedule</tt> methods accept <em>relative</em> delays and\n periods as arguments, not absolute times or dates. It is a simple\n matter to transform an absolute time represented as a {@link\n java.util.Date} to the required form. For example, to schedule at\n a certain future <tt>date</tt>, you can use: <tt>schedule(task,\n date.getTime() - System.currentTimeMillis(),\n TimeUnit.MILLISECONDS)</tt>. Beware however that expiration of a\n relative delay need not coincide with the current <tt>Date</tt> at\n which the task is enabled due to network time synchronization\n protocols, clock drift, or other factors.\n\n The {@link Executors} class provides convenient factory methods for\n the ScheduledExecutorService implementations provided in this package.\n\n <h3>Usage Example</h3>\n\n Here is a class with a method that sets up a ScheduledExecutorService\n to beep every ten seconds for an hour:\n\n <pre>\n import static java.util.concurrent.TimeUnit.*;\n class BeeperControl {\n    private final ScheduledExecutorService scheduler =\n       Executors.newScheduledThreadPool(1);\n\n    public void beepForAnHour() {\n        final Runnable beeper = new Runnable() {\n                public void run() { System.out.println("beep"); }\n            };\n        final ScheduledFuture&lt;?&gt; beeperHandle =\n            scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);\n        scheduler.schedule(new Runnable() {\n                public void run() { beeperHandle.cancel(true); }\n            }, 60 * 60, SECONDS);\n    }\n }\n </pre>\n\n @since 1.5\n @author Doug Lea\n"
17917,method,java/util/concurrent/ScheduledExecutorService/schedule/Runnable;long;TimeUnit," Creates and executes a one-shot action that becomes enabled\n after the given delay.\n\n @param command the task to execute\n @param delay the time from now to delay execution\n @param unit the time unit of the delay parameter\n @return a ScheduledFuture representing pending completion of\n         the task and whose <tt>get()</tt> method will return\n         <tt>null</tt> upon completion\n @throws RejectedExecutionException if the task cannot be\n         scheduled for execution\n @throws NullPointerException if command is null\n"
17918,method,java/util/concurrent/ScheduledExecutorService/schedule/Callable;long;TimeUnit," Creates and executes a ScheduledFuture that becomes enabled after the\n given delay.\n\n @param callable the function to execute\n @param delay the time from now to delay execution\n @param unit the time unit of the delay parameter\n @return a ScheduledFuture that can be used to extract result or cancel\n @throws RejectedExecutionException if the task cannot be\n         scheduled for execution\n @throws NullPointerException if callable is null\n"
17919,method,java/util/concurrent/ScheduledExecutorService/scheduleAtFixedRate/Runnable;long;long;TimeUnit," Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the given\n period; that is executions will commence after\n <tt>initialDelay</tt> then <tt>initialDelay+period</tt>, then\n <tt>initialDelay + 2 * period</tt>, and so on.\n If any execution of the task\n encounters an exception, subsequent executions are suppressed.\n Otherwise, the task will only terminate via cancellation or\n termination of the executor.  If any execution of this task\n takes longer than its period, then subsequent executions\n may start late, but will not concurrently execute.\n\n @param command the task to execute\n @param initialDelay the time to delay first execution\n @param period the period between successive executions\n @param unit the time unit of the initialDelay and period parameters\n @return a ScheduledFuture representing pending completion of\n         the task, and whose <tt>get()</tt> method will throw an\n         exception upon cancellation\n @throws RejectedExecutionException if the task cannot be\n         scheduled for execution\n @throws NullPointerException if command is null\n @throws IllegalArgumentException if period less than or equal to zero\n"
17920,method,java/util/concurrent/ScheduledExecutorService/scheduleWithFixedDelay/Runnable;long;long;TimeUnit," Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the\n given delay between the termination of one execution and the\n commencement of the next.  If any execution of the task\n encounters an exception, subsequent executions are suppressed.\n Otherwise, the task will only terminate via cancellation or\n termination of the executor.\n\n @param command the task to execute\n @param initialDelay the time to delay first execution\n @param delay the delay between the termination of one\n execution and the commencement of the next\n @param unit the time unit of the initialDelay and delay parameters\n @return a ScheduledFuture representing pending completion of\n         the task, and whose <tt>get()</tt> method will throw an\n         exception upon cancellation\n @throws RejectedExecutionException if the task cannot be\n         scheduled for execution\n @throws NullPointerException if command is null\n @throws IllegalArgumentException if delay less than or equal to zero\n"
17922,method,java/util/concurrent/RunnableScheduledFuture/isPeriodic/," Returns true if this is a periodic task. A periodic task may\n re-run according to some schedule. A non-periodic task can be\n run only once.\n\n @return true if this task is periodic\n"
17925,interface,java/util/concurrent/RejectedExecutionHandler," A handler for tasks that cannot be executed by a {@link ThreadPoolExecutor}.\n\n @since 1.5\n @author Doug Lea\n"
17926,method,java/util/concurrent/RejectedExecutionHandler/rejectedExecution/Runnable;ThreadPoolExecutor," Method that may be invoked by a {@link ThreadPoolExecutor} when\n {@link ThreadPoolExecutor#execute execute} cannot accept a\n task.  This may occur when no more threads or queue slots are\n available because their bounds would be exceeded, or upon\n shutdown of the Executor.\n\n <p>In the absence of other alternatives, the method may throw\n an unchecked {@link RejectedExecutionException}, which will be\n propagated to the caller of {@code execute}.\n\n @param r the runnable task requested to be executed\n @param executor the executor attempting to execute this task\n @throws RejectedExecutionException if there is no remedy\n"
17928,method,java/util/concurrent/RejectedExecutionException/RejectedExecutionException/," Constructs a <tt>RejectedExecutionException</tt> with no detail message.\n The cause is not initialized, and may subsequently be\n initialized by a call to {@link #initCause(Throwable) initCause}.\n"
17929,method,java/util/concurrent/RejectedExecutionException/RejectedExecutionException/String," Constructs a <tt>RejectedExecutionException</tt> with the\n specified detail message. The cause is not initialized, and may\n subsequently be initialized by a call to {@link\n #initCause(Throwable) initCause}.\n\n @param message the detail message\n"
17932,class,java/util/concurrent/PriorityBlockingQueue," An unbounded {@linkplain BlockingQueue blocking queue} that uses\n the same ordering rules as class {@link PriorityQueue} and supplies\n blocking retrieval operations.  While this queue is logically\n unbounded, attempted additions may fail due to resource exhaustion\n (causing <tt>OutOfMemoryError</tt>). This class does not permit\n <tt>null</tt> elements.  A priority queue relying on {@linkplain\n Comparable natural ordering} also does not permit insertion of\n non-comparable objects (doing so results in\n <tt>ClassCastException</tt>).\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.  The Iterator provided in method {@link\n #iterator()} is <em>not</em> guaranteed to traverse the elements of\n the PriorityBlockingQueue in any particular order. If you need\n ordered traversal, consider using\n <tt>Arrays.sort(pq.toArray())</tt>.  Also, method <tt>drainTo</tt>\n can be used to <em>remove</em> some or all elements in priority\n order and place them in another collection.\n\n <p>Operations on this class make no guarantees about the ordering\n of elements with equal priority. If you need to enforce an\n ordering, you can define custom classes or comparators that use a\n secondary key to break ties in primary priority values.  For\n example, here is a class that applies first-in-first-out\n tie-breaking to comparable elements. To use it, you would insert a\n <tt>new FIFOEntry(anEntry)</tt> instead of a plain entry object.\n\n <pre>\n class FIFOEntry&lt;E extends Comparable&lt;? super E&gt;&gt;\n     implements Comparable&lt;FIFOEntry&lt;E&gt;&gt; {\n   final static AtomicLong seq = new AtomicLong();\n   final long seqNum;\n   final E entry;\n   public FIFOEntry(E entry) {\n     seqNum = seq.getAndIncrement();\n     this.entry = entry;\n   }\n   public E getEntry() { return entry; }\n   public int compareTo(FIFOEntry&lt;E&gt; other) {\n     int res = entry.compareTo(other.entry);\n     if (res == 0 &amp;&amp; other.entry != this.entry)\n       res = (seqNum &lt; other.seqNum ? -1 : 1);\n     return res;\n   }\n }</pre>\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @since 1.5\n @author Doug Lea\n @param <E> the type of elements held in this collection\n"
17935,method,java/util/concurrent/PriorityBlockingQueue/put/Object," Inserts the specified element into this priority queue. As the queue is\n unbounded this method will never block.\n\n @param e the element to add\n @throws ClassCastException if the specified element cannot be compared\n         with elements currently in the priority queue according to the\n         priority queue's ordering\n @throws NullPointerException if the specified element is null\n"
17936,method,java/util/concurrent/PriorityBlockingQueue/offer/Object;long;TimeUnit," Inserts the specified element into this priority queue. As the queue is\n unbounded this method will never block.\n\n @param e the element to add\n @param timeout This parameter is ignored as the method never blocks\n @param unit This parameter is ignored as the method never blocks\n @return <tt>true</tt>\n @throws ClassCastException if the specified element cannot be compared\n         with elements currently in the priority queue according to the\n         priority queue's ordering\n @throws NullPointerException if the specified element is null\n"
17944,method,java/util/concurrent/PriorityBlockingQueue/remove/Object," Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.  Returns {@code true} if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call).\n\n @param o element to be removed from this queue, if present\n @return <tt>true</tt> if this queue changed as a result of the call\n"
17945,method,java/util/concurrent/PriorityBlockingQueue/contains/Object," Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.\n\n @param o object to be checked for containment in this queue\n @return <tt>true</tt> if this queue contains the specified element\n"
17948,method,java/util/concurrent/PriorityBlockingQueue/drainTo/Collection," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
17949,method,java/util/concurrent/PriorityBlockingQueue/drainTo/Collection;int," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
17950,method,java/util/concurrent/PriorityBlockingQueue/clear/," Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.\n"
17952,method,java/util/concurrent/PriorityBlockingQueue/iterator/," Returns an iterator over the elements in this queue. The\n iterator does not return the elements in any particular order.\n The returned <tt>Iterator</tt> is a "weakly consistent"\n iterator that will never throw {@link\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.\n\n @return an iterator over the elements in this queue\n"
17957,class,java/util/concurrent/LinkedBlockingQueue," An optionally-bounded {@linkplain BlockingQueue blocking queue} based on\n linked nodes.\n This queue orders elements FIFO (first-in-first-out).\n The <em>head</em> of the queue is that element that has been on the\n queue the longest time.\n The <em>tail</em> of the queue is that element that has been on the\n queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n Linked queues typically have higher throughput than array-based queues but\n less predictable performance in most concurrent applications.\n\n <p> The optional capacity bound constructor argument serves as a\n way to prevent excessive queue expansion. The capacity, if unspecified,\n is equal to {@link Integer#MAX_VALUE}.  Linked nodes are\n dynamically created upon each insertion unless this would bring the\n queue above capacity.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @since 1.5\n @author Doug Lea\n @param <E> the type of elements held in this collection\n\n"
17959,method,java/util/concurrent/LinkedBlockingQueue/remainingCapacity/," Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this queue\n less the current <tt>size</tt> of this queue.\n\n <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting <tt>remainingCapacity</tt>\n because it may be the case that another thread is about to\n insert or remove an element.\n"
17960,method,java/util/concurrent/LinkedBlockingQueue/put/Object," Inserts the specified element at the tail of this queue, waiting if\n necessary for space to become available.\n\n @throws InterruptedException {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
17961,method,java/util/concurrent/LinkedBlockingQueue/offer/Object;long;TimeUnit," Inserts the specified element at the tail of this queue, waiting if\n necessary up to the specified wait time for space to become available.\n\n @return <tt>true</tt> if successful, or <tt>false</tt> if\n         the specified waiting time elapses before space is available.\n @throws InterruptedException {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
17967,method,java/util/concurrent/LinkedBlockingQueue/remove/Object," Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element <tt>e</tt> such\n that <tt>o.equals(e)</tt>, if this queue contains one or more such\n elements.\n Returns <tt>true</tt> if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n\n @param o element to be removed from this queue, if present\n @return <tt>true</tt> if this queue changed as a result of the call\n"
17971,method,java/util/concurrent/LinkedBlockingQueue/clear/," Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.\n"
17972,method,java/util/concurrent/LinkedBlockingQueue/drainTo/Collection," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
17973,method,java/util/concurrent/LinkedBlockingQueue/drainTo/Collection;int," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
17974,method,java/util/concurrent/LinkedBlockingQueue/iterator/," Returns an iterator over the elements in this queue in proper sequence.\n The returned <tt>Iterator</tt> is a "weakly consistent" iterator that\n will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n @return an iterator over the elements in this queue in proper sequence\n"
17979,method,java/util/concurrent/LinkedBlockingDeque/addFirst/Object," @throws IllegalStateException {@inheritDoc}\n @throws NullPointerException  {@inheritDoc}\n"
17980,method,java/util/concurrent/LinkedBlockingDeque/addLast/Object," @throws IllegalStateException {@inheritDoc}\n @throws NullPointerException  {@inheritDoc}\n"
17981,method,java/util/concurrent/LinkedBlockingDeque/offerFirst/Object," @throws NullPointerException {@inheritDoc}\n"
17982,method,java/util/concurrent/LinkedBlockingDeque/offerLast/Object," @throws NullPointerException {@inheritDoc}\n"
17983,method,java/util/concurrent/LinkedBlockingDeque/putFirst/Object," @throws NullPointerException {@inheritDoc}\n @throws InterruptedException {@inheritDoc}\n"
17984,method,java/util/concurrent/LinkedBlockingDeque/putLast/Object," @throws NullPointerException {@inheritDoc}\n @throws InterruptedException {@inheritDoc}\n"
17985,method,java/util/concurrent/LinkedBlockingDeque/offerFirst/Object;long;TimeUnit," @throws NullPointerException {@inheritDoc}\n @throws InterruptedException {@inheritDoc}\n"
17986,method,java/util/concurrent/LinkedBlockingDeque/offerLast/Object;long;TimeUnit," @throws NullPointerException {@inheritDoc}\n @throws InterruptedException {@inheritDoc}\n"
17987,method,java/util/concurrent/LinkedBlockingDeque/removeFirst/," @throws NoSuchElementException {@inheritDoc}\n"
17988,method,java/util/concurrent/LinkedBlockingDeque/removeLast/," @throws NoSuchElementException {@inheritDoc}\n"
17995,method,java/util/concurrent/LinkedBlockingDeque/getFirst/," @throws NoSuchElementException {@inheritDoc}\n"
17996,method,java/util/concurrent/LinkedBlockingDeque/getLast/," @throws NoSuchElementException {@inheritDoc}\n"
18001,method,java/util/concurrent/LinkedBlockingDeque/add/Object," Inserts the specified element at the end of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n it is generally preferable to use method {@link #offer(Object) offer}.\n\n <p>This method is equivalent to {@link #addLast}.\n\n @throws IllegalStateException if the element cannot be added at this\n         time due to capacity restrictions\n @throws NullPointerException if the specified element is null\n"
18003,method,java/util/concurrent/LinkedBlockingDeque/put/Object," @throws NullPointerException {@inheritDoc}\n @throws InterruptedException {@inheritDoc}\n"
18004,method,java/util/concurrent/LinkedBlockingDeque/offer/Object;long;TimeUnit," @throws NullPointerException {@inheritDoc}\n @throws InterruptedException {@inheritDoc}\n"
18005,method,java/util/concurrent/LinkedBlockingDeque/remove/," Retrieves and removes the head of the queue represented by this deque.\n This method differs from {@link #poll poll} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #removeFirst() removeFirst}.\n\n @return the head of the queue represented by this deque\n @throws NoSuchElementException if this deque is empty\n"
18009,method,java/util/concurrent/LinkedBlockingDeque/element/," Retrieves, but does not remove, the head of the queue represented by\n this deque.  This method differs from {@link #peek peek} only in that\n it throws an exception if this deque is empty.\n\n <p>This method is equivalent to {@link #getFirst() getFirst}.\n\n @return the head of the queue represented by this deque\n @throws NoSuchElementException if this deque is empty\n"
18011,method,java/util/concurrent/LinkedBlockingDeque/remainingCapacity/," Returns the number of additional elements that this deque can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this deque\n less the current <tt>size</tt> of this deque.\n\n <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting <tt>remainingCapacity</tt>\n because it may be the case that another thread is about to\n insert or remove an element.\n"
18012,method,java/util/concurrent/LinkedBlockingDeque/drainTo/Collection," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
18013,method,java/util/concurrent/LinkedBlockingDeque/drainTo/Collection;int," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
18014,method,java/util/concurrent/LinkedBlockingDeque/push/Object," @throws IllegalStateException {@inheritDoc}\n @throws NullPointerException  {@inheritDoc}\n"
18015,method,java/util/concurrent/LinkedBlockingDeque/pop/," @throws NoSuchElementException {@inheritDoc}\n"
18016,method,java/util/concurrent/LinkedBlockingDeque/remove/Object," Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n <p>This method is equivalent to\n {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if this deque changed as a result of the call\n"
18018,method,java/util/concurrent/LinkedBlockingDeque/contains/Object," Returns <tt>true</tt> if this deque contains the specified element.\n More formally, returns <tt>true</tt> if and only if this deque contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n\n @param o object to be checked for containment in this deque\n @return <tt>true</tt> if this deque contains the specified element\n"
18020,method,java/util/concurrent/LinkedBlockingDeque/toArray/Object[]," Returns an array containing all of the elements in this deque, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the deque fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this deque.\n\n <p>If this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n <tt>null</tt>.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.\n\n @param a the array into which the elements of the deque are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose\n @return an array containing all of the elements in this deque\n @throws ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this deque\n @throws NullPointerException if the specified array is null\n"
18022,method,java/util/concurrent/LinkedBlockingDeque/clear/," Atomically removes all of the elements from this deque.\n The deque will be empty after this call returns.\n"
18024,method,java/util/concurrent/LinkedBlockingDeque/descendingIterator/," Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n The returned <tt>Iterator</tt> is a "weakly consistent" iterator that\n will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n"
18028,class,java/util/concurrent/FutureTask," A cancellable asynchronous computation.  This class provides a base\n implementation of {@link Future}, with methods to start and cancel\n a computation, query to see if the computation is complete, and\n retrieve the result of the computation.  The result can only be\n retrieved when the computation has completed; the <tt>get</tt>\n method will block if the computation has not yet completed.  Once\n the computation has completed, the computation cannot be restarted\n or cancelled.\n\n <p>A <tt>FutureTask</tt> can be used to wrap a {@link Callable} or\n {@link java.lang.Runnable} object.  Because <tt>FutureTask</tt>\n implements <tt>Runnable</tt>, a <tt>FutureTask</tt> can be\n submitted to an {@link Executor} for execution.\n\n <p>In addition to serving as a standalone class, this class provides\n <tt>protected</tt> functionality that may be useful when creating\n customized task classes.\n\n @since 1.5\n @author Doug Lea\n @param <V> The result type returned by this FutureTask's <tt>get</tt> method\n"
18032,method,java/util/concurrent/FutureTask/get/," @throws CancellationException {@inheritDoc}\n"
18033,method,java/util/concurrent/FutureTask/get/long;TimeUnit," @throws CancellationException {@inheritDoc}\n"
18035,method,java/util/concurrent/FutureTask/set/Object," Sets the result of this Future to the given value unless\n this future has already been set or has been cancelled.\n This method is invoked internally by the <tt>run</tt> method\n upon successful completion of the computation.\n @param v the value\n"
18036,method,java/util/concurrent/FutureTask/setException/Throwable," Causes this future to report an <tt>ExecutionException</tt>\n with the given throwable as its cause, unless this Future has\n already been set or has been cancelled.\n This method is invoked internally by the <tt>run</tt> method\n upon failure of the computation.\n @param t the cause of failure\n"
18038,method,java/util/concurrent/FutureTask/runAndReset/," Executes the computation without setting its result, and then\n resets this Future to initial state, failing to do so if the\n computation encounters an exception or is cancelled.  This is\n designed for use with tasks that intrinsically execute more\n than once.\n @return true if successfully run and reset\n"
18039,method,java/util/concurrent/FutureTask/FutureTask/Callable," Creates a <tt>FutureTask</tt> that will upon running, execute the\n given <tt>Callable</tt>.\n\n @param  callable the callable task\n @throws NullPointerException if callable is null\n"
18041,interface,java/util/concurrent/Future," A <tt>Future</tt> represents the result of an asynchronous\n computation.  Methods are provided to check if the computation is\n complete, to wait for its completion, and to retrieve the result of\n the computation.  The result can only be retrieved using method\n <tt>get</tt> when the computation has completed, blocking if\n necessary until it is ready.  Cancellation is performed by the\n <tt>cancel</tt> method.  Additional methods are provided to\n determine if the task completed normally or was cancelled. Once a\n computation has completed, the computation cannot be cancelled.\n If you would like to use a <tt>Future</tt> for the sake\n of cancellability but not provide a usable result, you can\n declare types of the form <tt>Future&lt;?&gt;</tt> and\n return <tt>null</tt> as a result of the underlying task.\n\n <p>\n <b>Sample Usage</b> (Note that the following classes are all\n made-up.) <p>\n <pre>\n interface ArchiveSearcher { String search(String target); }\n class App {\n   ExecutorService executor = ...\n   ArchiveSearcher searcher = ...\n   void showSearch(final String target)\n       throws InterruptedException {\n     Future&lt;String&gt; future\n       = executor.submit(new Callable&lt;String&gt;() {\n         public String call() {\n             return searcher.search(target);\n         }});\n     displayOtherThings(); // do other things while searching\n     try {\n       displayText(future.get()); // use future\n     } catch (ExecutionException ex) { cleanup(); return; }\n   }\n }\n </pre>\n\n The {@link FutureTask} class is an implementation of <tt>Future</tt> that\n implements <tt>Runnable</tt>, and so may be executed by an <tt>Executor</tt>.\n For example, the above construction with <tt>submit</tt> could be replaced by:\n <pre>\n     FutureTask&lt;String&gt; future =\n       new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() {\n         public String call() {\n           return searcher.search(target);\n       }});\n     executor.execute(future);\n </pre>\n\n <p>Memory consistency effects: Actions taken by the asynchronous computation\n <a href="package-summary.html#MemoryVisibility"> <i>happen-before</i></a>\n actions following the corresponding {@code Future.get()} in another thread.\n\n @see FutureTask\n @see Executor\n @since 1.5\n @author Doug Lea\n @param <V> The result type returned by this Future's <tt>get</tt> method\n"
18042,method,java/util/concurrent/Future/cancel/boolean," Attempts to cancel execution of this task.  This attempt will\n fail if the task has already completed, has already been cancelled,\n or could not be cancelled for some other reason. If successful,\n and this task has not started when <tt>cancel</tt> is called,\n this task should never run.  If the task has already started,\n then the <tt>mayInterruptIfRunning</tt> parameter determines\n whether the thread executing this task should be interrupted in\n an attempt to stop the task.\n\n <p>After this method returns, subsequent calls to {@link #isDone} will\n always return <tt>true</tt>.  Subsequent calls to {@link #isCancelled}\n will always return <tt>true</tt> if this method returned <tt>true</tt>.\n\n @param mayInterruptIfRunning <tt>true</tt> if the thread executing this\n task should be interrupted; otherwise, in-progress tasks are allowed\n to complete\n @return <tt>false</tt> if the task could not be cancelled,\n typically because it has already completed normally;\n <tt>true</tt> otherwise\n"
18043,method,java/util/concurrent/Future/isCancelled/," Returns <tt>true</tt> if this task was cancelled before it completed\n normally.\n\n @return <tt>true</tt> if this task was cancelled before it completed\n"
18044,method,java/util/concurrent/Future/isDone/," Returns <tt>true</tt> if this task completed.\n\n Completion may be due to normal termination, an exception, or\n cancellation -- in all of these cases, this method will return\n <tt>true</tt>.\n\n @return <tt>true</tt> if this task completed\n"
18045,method,java/util/concurrent/Future/get/," Waits if necessary for the computation to complete, and then\n retrieves its result.\n\n @return the computed result\n @throws CancellationException if the computation was cancelled\n @throws ExecutionException if the computation threw an\n exception\n @throws InterruptedException if the current thread was interrupted\n while waiting\n"
18046,method,java/util/concurrent/Future/get/long;TimeUnit," Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.\n\n @param timeout the maximum time to wait\n @param unit the time unit of the timeout argument\n @return the computed result\n @throws CancellationException if the computation was cancelled\n @throws ExecutionException if the computation threw an\n exception\n @throws InterruptedException if the current thread was interrupted\n while waiting\n @throws TimeoutException if the wait timed out\n"
18047,class,java/util/concurrent/Executors," Factory and utility methods for {@link Executor}, {@link\n ExecutorService}, {@link ScheduledExecutorService}, {@link\n ThreadFactory}, and {@link Callable} classes defined in this\n package. This class supports the following kinds of methods:\n\n <ul>\n   <li> Methods that create and return an {@link ExecutorService}\n        set up with commonly useful configuration settings.\n   <li> Methods that create and return a {@link ScheduledExecutorService}\n        set up with commonly useful configuration settings.\n   <li> Methods that create and return a "wrapped" ExecutorService, that\n        disables reconfiguration by making implementation-specific methods\n        inaccessible.\n   <li> Methods that create and return a {@link ThreadFactory}\n        that sets newly created threads to a known state.\n   <li> Methods that create and return a {@link Callable}\n        out of other closure-like forms, so they can be used\n        in execution methods requiring <tt>Callable</tt>.\n </ul>\n\n @since 1.5\n @author Doug Lea\n"
18048,method,java/util/concurrent/Executors/newFixedThreadPool/int," Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue.  At any point, at most\n <tt>nThreads</tt> threads will be active processing tasks.\n If additional tasks are submitted when all threads are active,\n they will wait in the queue until a thread is available.\n If any thread terminates due to a failure during execution\n prior to shutdown, a new one will take its place if needed to\n execute subsequent tasks.  The threads in the pool will exist\n until it is explicitly {@link ExecutorService#shutdown shutdown}.\n\n @param nThreads the number of threads in the pool\n @return the newly created thread pool\n @throws IllegalArgumentException if <tt>nThreads &lt;= 0</tt>\n"
18049,method,java/util/concurrent/Executors/newFixedThreadPool/int;ThreadFactory," Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue, using the provided\n ThreadFactory to create new threads when needed.  At any point,\n at most <tt>nThreads</tt> threads will be active processing\n tasks.  If additional tasks are submitted when all threads are\n active, they will wait in the queue until a thread is\n available.  If any thread terminates due to a failure during\n execution prior to shutdown, a new one will take its place if\n needed to execute subsequent tasks.  The threads in the pool will\n exist until it is explicitly {@link ExecutorService#shutdown\n shutdown}.\n\n @param nThreads the number of threads in the pool\n @param threadFactory the factory to use when creating new threads\n @return the newly created thread pool\n @throws NullPointerException if threadFactory is null\n @throws IllegalArgumentException if <tt>nThreads &lt;= 0</tt>\n"
18050,method,java/util/concurrent/Executors/newSingleThreadExecutor/," Creates an Executor that uses a single worker thread operating\n off an unbounded queue. (Note however that if this single\n thread terminates due to a failure during execution prior to\n shutdown, a new one will take its place if needed to execute\n subsequent tasks.)  Tasks are guaranteed to execute\n sequentially, and no more than one task will be active at any\n given time. Unlike the otherwise equivalent\n <tt>newFixedThreadPool(1)</tt> the returned executor is\n guaranteed not to be reconfigurable to use additional threads.\n\n @return the newly created single-threaded Executor\n"
18051,method,java/util/concurrent/Executors/newSingleThreadExecutor/ThreadFactory," Creates an Executor that uses a single worker thread operating\n off an unbounded queue, and uses the provided ThreadFactory to\n create a new thread when needed. Unlike the otherwise\n equivalent <tt>newFixedThreadPool(1, threadFactory)</tt> the\n returned executor is guaranteed not to be reconfigurable to use\n additional threads.\n\n @param threadFactory the factory to use when creating new\n threads\n\n @return the newly created single-threaded Executor\n @throws NullPointerException if threadFactory is null\n"
18052,method,java/util/concurrent/Executors/newCachedThreadPool/," Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available.  These pools will typically improve the performance\n of programs that execute many short-lived asynchronous tasks.\n Calls to <tt>execute</tt> will reuse previously constructed\n threads if available. If no existing thread is available, a new\n thread will be created and added to the pool. Threads that have\n not been used for sixty seconds are terminated and removed from\n the cache. Thus, a pool that remains idle for long enough will\n not consume any resources. Note that pools with similar\n properties but different details (for example, timeout parameters)\n may be created using {@link ThreadPoolExecutor} constructors.\n\n @return the newly created thread pool\n"
18053,method,java/util/concurrent/Executors/newCachedThreadPool/ThreadFactory," Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available, and uses the provided\n ThreadFactory to create new threads when needed.\n @param threadFactory the factory to use when creating new threads\n @return the newly created thread pool\n @throws NullPointerException if threadFactory is null\n"
18056,method,java/util/concurrent/Executors/newScheduledThreadPool/int," Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically.\n @param corePoolSize the number of threads to keep in the pool,\n even if they are idle.\n @return a newly created scheduled thread pool\n @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>\n"
18057,method,java/util/concurrent/Executors/newScheduledThreadPool/int;ThreadFactory," Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically.\n @param corePoolSize the number of threads to keep in the pool,\n even if they are idle.\n @param threadFactory the factory to use when the executor\n creates a new thread.\n @return a newly created scheduled thread pool\n @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>\n @throws NullPointerException if threadFactory is null\n"
18060,method,java/util/concurrent/Executors/defaultThreadFactory/," Returns a default thread factory used to create new threads.\n This factory creates all new threads used by an Executor in the\n same {@link ThreadGroup}. If there is a {@link\n java.lang.SecurityManager}, it uses the group of {@link\n System#getSecurityManager}, else the group of the thread\n invoking this <tt>defaultThreadFactory</tt> method. Each new\n thread is created as a non-daemon thread with priority set to\n the smaller of <tt>Thread.NORM_PRIORITY</tt> and the maximum\n priority permitted in the thread group.  New threads have names\n accessible via {@link Thread#getName} of\n <em>pool-N-thread-M</em>, where <em>N</em> is the sequence\n number of this factory, and <em>M</em> is the sequence number\n of the thread created by this factory.\n @return a thread factory\n"
18061,method,java/util/concurrent/Executors/privilegedThreadFactory/," Returns a thread factory used to create new threads that\n have the same permissions as the current thread.\n This factory creates threads with the same settings as {@link\n Executors#defaultThreadFactory}, additionally setting the\n AccessControlContext and contextClassLoader of new threads to\n be the same as the thread invoking this\n <tt>privilegedThreadFactory</tt> method.  A new\n <tt>privilegedThreadFactory</tt> can be created within an\n {@link AccessController#doPrivileged} action setting the\n current thread's access control context to create threads with\n the selected permission settings holding within that action.\n\n <p> Note that while tasks running within such threads will have\n the same access control and class loader settings as the\n current thread, they need not have the same {@link\n java.lang.ThreadLocal} or {@link\n java.lang.InheritableThreadLocal} values. If necessary,\n particular values of thread locals can be set or reset before\n any task runs in {@link ThreadPoolExecutor} subclasses using\n {@link ThreadPoolExecutor#beforeExecute}. Also, if it is\n necessary to initialize worker threads to have the same\n InheritableThreadLocal settings as some other designated\n thread, you can create a custom ThreadFactory in which that\n thread waits for and services requests to create others that\n will inherit its values.\n\n @return a thread factory\n @throws AccessControlException if the current access control\n context does not have permission to both get and set context\n class loader.\n"
18062,method,java/util/concurrent/Executors/callable/Runnable;Object," Returns a {@link Callable} object that, when\n called, runs the given task and returns the given result.  This\n can be useful when applying methods requiring a\n <tt>Callable</tt> to an otherwise resultless action.\n @param task the task to run\n @param result the result to return\n @return a callable object\n @throws NullPointerException if task null\n"
18063,method,java/util/concurrent/Executors/callable/Runnable," Returns a {@link Callable} object that, when\n called, runs the given task and returns <tt>null</tt>.\n @param task the task to run\n @return a callable object\n @throws NullPointerException if task null\n"
18064,method,java/util/concurrent/Executors/callable/PrivilegedAction," Returns a {@link Callable} object that, when\n called, runs the given privileged action and returns its result.\n @param action the privileged action to run\n @return a callable object\n @throws NullPointerException if action null\n"
18065,method,java/util/concurrent/Executors/callable/PrivilegedExceptionAction," Returns a {@link Callable} object that, when\n called, runs the given privileged exception action and returns\n its result.\n @param action the privileged exception action to run\n @return a callable object\n @throws NullPointerException if action null\n"
18069,method,java/util/concurrent/ExecutorService/shutdown/," Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n\n @throws SecurityException if a security manager exists and\n         shutting down this ExecutorService may manipulate\n         threads that the caller is not permitted to modify\n         because it does not hold {@link\n         java.lang.RuntimePermission}<tt>("modifyThread")</tt>,\n         or the security manager's <tt>checkAccess</tt> method\n         denies access.\n"
18070,method,java/util/concurrent/ExecutorService/shutdownNow/," Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks that were\n awaiting execution.\n\n <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  For example, typical\n implementations will cancel via {@link Thread#interrupt}, so any\n task that fails to respond to interrupts may never terminate.\n\n @return list of tasks that never commenced execution\n @throws SecurityException if a security manager exists and\n         shutting down this ExecutorService may manipulate\n         threads that the caller is not permitted to modify\n         because it does not hold {@link\n         java.lang.RuntimePermission}<tt>("modifyThread")</tt>,\n         or the security manager's <tt>checkAccess</tt> method\n         denies access.\n"
18072,method,java/util/concurrent/ExecutorService/isTerminated/," Returns <tt>true</tt> if all tasks have completed following shut down.\n Note that <tt>isTerminated</tt> is never <tt>true</tt> unless\n either <tt>shutdown</tt> or <tt>shutdownNow</tt> was called first.\n\n @return <tt>true</tt> if all tasks have completed following shut down\n"
18073,method,java/util/concurrent/ExecutorService/awaitTermination/long;TimeUnit," Blocks until all tasks have completed execution after a shutdown\n request, or the timeout occurs, or the current thread is\n interrupted, whichever happens first.\n\n @param timeout the maximum time to wait\n @param unit the time unit of the timeout argument\n @return <tt>true</tt> if this executor terminated and\n         <tt>false</tt> if the timeout elapsed before termination\n @throws InterruptedException if interrupted while waiting\n"
18074,method,java/util/concurrent/ExecutorService/submit/Callable," Submits a value-returning task for execution and returns a\n Future representing the pending results of the task. The\n Future's <tt>get</tt> method will return the task's result upon\n successful completion.\n\n <p>\n If you would like to immediately block waiting\n for a task, you can use constructions of the form\n <tt>result = exec.submit(aCallable).get();</tt>\n\n <p> Note: The {@link Executors} class includes a set of methods\n that can convert some other common closure-like objects,\n for example, {@link java.security.PrivilegedAction} to\n {@link Callable} form so they can be submitted.\n\n @param task the task to submit\n @return a Future representing pending completion of the task\n @throws RejectedExecutionException if the task cannot be\n         scheduled for execution\n @throws NullPointerException if the task is null\n"
18077,method,java/util/concurrent/ExecutorService/invokeAll/Collection," Executes the given tasks, returning a list of Futures holding\n their status and results when all complete.\n {@link Future#isDone} is <tt>true</tt> for each\n element of the returned list.\n Note that a <em>completed</em> task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.\n\n @param tasks the collection of tasks\n @return A list of Futures representing the tasks, in the same\n         sequential order as produced by the iterator for the\n         given task list, each of which has completed.\n @throws InterruptedException if interrupted while waiting, in\n         which case unfinished tasks are cancelled.\n @throws NullPointerException if tasks or any of its elements are <tt>null</tt>\n @throws RejectedExecutionException if any task cannot be\n         scheduled for execution\n"
18078,method,java/util/concurrent/ExecutorService/invokeAll/Collection;long;TimeUnit," Executes the given tasks, returning a list of Futures holding\n their status and results\n when all complete or the timeout expires, whichever happens first.\n {@link Future#isDone} is <tt>true</tt> for each\n element of the returned list.\n Upon return, tasks that have not completed are cancelled.\n Note that a <em>completed</em> task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.\n\n @param tasks the collection of tasks\n @param timeout the maximum time to wait\n @param unit the time unit of the timeout argument\n @return a list of Futures representing the tasks, in the same\n         sequential order as produced by the iterator for the\n         given task list. If the operation did not time out,\n         each task will have completed. If it did time out, some\n         of these tasks will not have completed.\n @throws InterruptedException if interrupted while waiting, in\n         which case unfinished tasks are cancelled\n @throws NullPointerException if tasks, any of its elements, or\n         unit are <tt>null</tt>\n @throws RejectedExecutionException if any task cannot be scheduled\n         for execution\n"
18080,method,java/util/concurrent/ExecutorService/invokeAny/Collection;long;TimeUnit," Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do before the given timeout elapses.\n Upon normal or exceptional return, tasks that have not\n completed are cancelled.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.\n\n @param tasks the collection of tasks\n @param timeout the maximum time to wait\n @param unit the time unit of the timeout argument\n @return the result returned by one of the tasks.\n @throws InterruptedException if interrupted while waiting\n @throws NullPointerException if tasks, any of its elements, or\n         unit are <tt>null</tt>\n @throws TimeoutException if the given timeout elapses before\n         any task successfully completes\n @throws ExecutionException if no task successfully completes\n @throws RejectedExecutionException if tasks cannot be scheduled\n         for execution\n"
18081,class,java/util/concurrent/ExecutorCompletionService," A {@link CompletionService} that uses a supplied {@link Executor}\n to execute tasks.  This class arranges that submitted tasks are,\n upon completion, placed on a queue accessible using <tt>take</tt>.\n The class is lightweight enough to be suitable for transient use\n when processing groups of tasks.\n\n <p>\n\n <b>Usage Examples.</b>\n\n Suppose you have a set of solvers for a certain problem, each\n returning a value of some type <tt>Result</tt>, and would like to\n run them concurrently, processing the results of each of them that\n return a non-null value, in some method <tt>use(Result r)</tt>. You\n could write this as:\n\n <pre>\n   void solve(Executor e,\n              Collection&lt;Callable&lt;Result&gt;&gt; solvers)\n     throws InterruptedException, ExecutionException {\n       CompletionService&lt;Result&gt; ecs\n           = new ExecutorCompletionService&lt;Result&gt;(e);\n       for (Callable&lt;Result&gt; s : solvers)\n           ecs.submit(s);\n       int n = solvers.size();\n       for (int i = 0; i &lt; n; ++i) {\n           Result r = ecs.take().get();\n           if (r != null)\n               use(r);\n       }\n   }\n </pre>\n\n Suppose instead that you would like to use the first non-null result\n of the set of tasks, ignoring any that encounter exceptions,\n and cancelling all other tasks when the first one is ready:\n\n <pre>\n   void solve(Executor e,\n              Collection&lt;Callable&lt;Result&gt;&gt; solvers)\n     throws InterruptedException {\n       CompletionService&lt;Result&gt; ecs\n           = new ExecutorCompletionService&lt;Result&gt;(e);\n       int n = solvers.size();\n       List&lt;Future&lt;Result&gt;&gt; futures\n           = new ArrayList&lt;Future&lt;Result&gt;&gt;(n);\n       Result result = null;\n       try {\n           for (Callable&lt;Result&gt; s : solvers)\n               futures.add(ecs.submit(s));\n           for (int i = 0; i &lt; n; ++i) {\n               try {\n                   Result r = ecs.take().get();\n                   if (r != null) {\n                       result = r;\n                       break;\n                   }\n               } catch (ExecutionException ignore) {}\n           }\n       }\n       finally {\n           for (Future&lt;Result&gt; f : futures)\n               f.cancel(true);\n       }\n\n       if (result != null)\n           use(result);\n   }\n </pre>\n"
18089,interface,java/util/concurrent/Executor," An object that executes submitted {@link Runnable} tasks. This\n interface provides a way of decoupling task submission from the\n mechanics of how each task will be run, including details of thread\n use, scheduling, etc.  An <tt>Executor</tt> is normally used\n instead of explicitly creating threads. For example, rather than\n invoking <tt>new Thread(new(RunnableTask())).start()</tt> for each\n of a set of tasks, you might use:\n\n <pre>\n Executor executor = <em>anExecutor</em>;\n executor.execute(new RunnableTask1());\n executor.execute(new RunnableTask2());\n ...\n </pre>\n\n However, the <tt>Executor</tt> interface does not strictly\n require that execution be asynchronous. In the simplest case, an\n executor can run the submitted task immediately in the caller's\n thread:\n\n <pre>\n class DirectExecutor implements Executor {\n     public void execute(Runnable r) {\n         r.run();\n     }\n }</pre>\n\n More typically, tasks are executed in some thread other\n than the caller's thread.  The executor below spawns a new thread\n for each task.\n\n <pre>\n class ThreadPerTaskExecutor implements Executor {\n     public void execute(Runnable r) {\n         new Thread(r).start();\n     }\n }</pre>\n\n Many <tt>Executor</tt> implementations impose some sort of\n limitation on how and when tasks are scheduled.  The executor below\n serializes the submission of tasks to a second executor,\n illustrating a composite executor.\n\n <pre>\n class SerialExecutor implements Executor {\n     final Queue&lt;Runnable&gt; tasks = new ArrayDeque&lt;Runnable&gt;();\n     final Executor executor;\n     Runnable active;\n\n     SerialExecutor(Executor executor) {\n         this.executor = executor;\n     }\n\n     public synchronized void execute(final Runnable r) {\n         tasks.offer(new Runnable() {\n             public void run() {\n                 try {\n                     r.run();\n                 } finally {\n                     scheduleNext();\n                 }\n             }\n         });\n         if (active == null) {\n             scheduleNext();\n         }\n     }\n\n     protected synchronized void scheduleNext() {\n         if ((active = tasks.poll()) != null) {\n             executor.execute(active);\n         }\n     }\n }</pre>\n\n The <tt>Executor</tt> implementations provided in this package\n implement {@link ExecutorService}, which is a more extensive\n interface.  The {@link ThreadPoolExecutor} class provides an\n extensible thread pool implementation. The {@link Executors} class\n provides convenient factory methods for these Executors.\n\n <p>Memory consistency effects: Actions in a thread prior to\n submitting a {@code Runnable} object to an {@code Executor}\n <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>\n its execution begins, perhaps in another thread.\n\n @since 1.5\n @author Doug Lea\n"
18090,method,java/util/concurrent/Executor/execute/Runnable," Executes the given command at some time in the future.  The command\n may execute in a new thread, in a pooled thread, or in the calling\n thread, at the discretion of the <tt>Executor</tt> implementation.\n\n @param command the runnable task\n @throws RejectedExecutionException if this task cannot be\n accepted for execution.\n @throws NullPointerException if command is null\n"
18092,method,java/util/concurrent/ExecutionException/ExecutionException/," Constructs an <tt>ExecutionException</tt> with no detail message.\n The cause is not initialized, and may subsequently be\n initialized by a call to {@link #initCause(Throwable) initCause}.\n"
18093,method,java/util/concurrent/ExecutionException/ExecutionException/String," Constructs an <tt>ExecutionException</tt> with the specified detail\n message. The cause is not initialized, and may subsequently be\n initialized by a call to {@link #initCause(Throwable) initCause}.\n\n @param message the detail message\n"
18096,class,java/util/concurrent/Exchanger," A synchronization point at which threads can pair and swap elements\n within pairs.  Each thread presents some object on entry to the\n {@link #exchange exchange} method, matches with a partner thread,\n and receives its partner's object on return.  An Exchanger may be\n viewed as a bidirectional form of a {@link SynchronousQueue}.\n Exchangers may be useful in applications such as genetic algorithms\n and pipeline designs.\n\n <p><b>Sample Usage:</b>\n Here are the highlights of a class that uses an {@code Exchanger}\n to swap buffers between threads so that the thread filling the\n buffer gets a freshly emptied one when it needs it, handing off the\n filled one to the thread emptying the buffer.\n <pre>{@code\n class FillAndEmpty {\n   Exchanger<DataBuffer> exchanger = new Exchanger<DataBuffer>();\n   DataBuffer initialEmptyBuffer = ... a made-up type\n   DataBuffer initialFullBuffer = ...\n\n   class FillingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer = initialEmptyBuffer;\n       try {\n         while (currentBuffer != null) {\n           addToBuffer(currentBuffer);\n           if (currentBuffer.isFull())\n             currentBuffer = exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ... }\n     }\n   }\n\n   class EmptyingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer = initialFullBuffer;\n       try {\n         while (currentBuffer != null) {\n           takeFromBuffer(currentBuffer);\n           if (currentBuffer.isEmpty())\n             currentBuffer = exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ...}\n     }\n   }\n\n   void start() {\n     new Thread(new FillingLoop()).start();\n     new Thread(new EmptyingLoop()).start();\n   }\n }\n }</pre>\n\n <p>Memory consistency effects: For each pair of threads that\n successfully exchange objects via an {@code Exchanger}, actions\n prior to the {@code exchange()} in each thread\n <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>\n those subsequent to a return from the corresponding {@code exchange()}\n in the other thread.\n\n @since 1.5\n @author Doug Lea and Bill Scherer and Michael Scott\n @param <V> The type of objects that may be exchanged\n"
18097,method,java/util/concurrent/Exchanger/exchange/Object," Waits for another thread to arrive at this exchange point (unless\n the current thread is {@linkplain Thread#interrupt interrupted}),\n and then transfers the given object to it, receiving its object\n in return.\n\n <p>If another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n <p>If no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of two things happens:\n <ul>\n <li>Some other thread enters the exchange; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the current\n thread.\n </ul>\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for the exchange,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n @param x the object to exchange\n @return the object provided by the other thread\n @throws InterruptedException if the current thread was\n         interrupted while waiting\n"
18098,method,java/util/concurrent/Exchanger/exchange/Object;long;TimeUnit," Waits for another thread to arrive at this exchange point (unless\n the current thread is {@linkplain Thread#interrupt interrupted} or\n the specified waiting time elapses), and then transfers the given\n object to it, receiving its object in return.\n\n <p>If another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n <p>If no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of three things happens:\n <ul>\n <li>Some other thread enters the exchange; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </ul>\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for the exchange,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then {@link\n TimeoutException} is thrown.  If the time is less than or equal\n to zero, the method will not wait at all.\n\n @param x the object to exchange\n @param timeout the maximum time to wait\n @param unit the time unit of the <tt>timeout</tt> argument\n @return the object provided by the other thread\n @throws InterruptedException if the current thread was\n         interrupted while waiting\n @throws TimeoutException if the specified waiting time elapses\n         before another thread enters the exchange\n"
18102,class,java/util/concurrent/DelayQueue," An unbounded {@linkplain BlockingQueue blocking queue} of\n <tt>Delayed</tt> elements, in which an element can only be taken\n when its delay has expired.  The <em>head</em> of the queue is that\n <tt>Delayed</tt> element whose delay expired furthest in the\n past.  If no delay has expired there is no head and <tt>poll</tt>\n will return <tt>null</tt>. Expiration occurs when an element's\n <tt>getDelay(TimeUnit.NANOSECONDS)</tt> method returns a value less\n than or equal to zero.  Even though unexpired elements cannot be\n removed using <tt>take</tt> or <tt>poll</tt>, they are otherwise\n treated as normal elements. For example, the <tt>size</tt> method\n returns the count of both expired and unexpired elements.\n This queue does not permit null elements.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @since 1.5\n @author Doug Lea\n @param <E> the type of elements held in this collection\n"
18105,method,java/util/concurrent/DelayQueue/put/Delayed," Inserts the specified element into this delay queue. As the queue is\n unbounded this method will never block.\n\n @param e the element to add\n @throws NullPointerException {@inheritDoc}\n"
18108,method,java/util/concurrent/DelayQueue/take/," Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is available on this queue.\n\n @return the head of this queue\n @throws InterruptedException {@inheritDoc}\n"
18109,method,java/util/concurrent/DelayQueue/poll/long;TimeUnit," Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is available on this queue,\n or the specified wait time expires.\n\n @return the head of this queue, or <tt>null</tt> if the\n         specified waiting time elapses before an element with\n         an expired delay becomes available\n @throws InterruptedException {@inheritDoc}\n"
18112,method,java/util/concurrent/DelayQueue/drainTo/Collection," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
18113,method,java/util/concurrent/DelayQueue/drainTo/Collection;int," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
18114,method,java/util/concurrent/DelayQueue/clear/," Atomically removes all of the elements from this delay queue.\n The queue will be empty after this call returns.\n Elements with an unexpired delay are not waited for; they are\n simply discarded from the queue.\n"
18119,method,java/util/concurrent/DelayQueue/iterator/," Returns an iterator over all the elements (both expired and\n unexpired) in this queue. The iterator does not return the\n elements in any particular order.  The returned\n <tt>Iterator</tt> is a "weakly consistent" iterator that will\n never throw {@link ConcurrentModificationException}, and\n guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed\n to) reflect any modifications subsequent to construction.\n\n @return an iterator over the elements in this queue\n"
18122,class,java/util/concurrent/CyclicBarrier," A synchronization aid that allows a set of threads to all wait for\n each other to reach a common barrier point.  CyclicBarriers are\n useful in programs involving a fixed sized party of threads that\n must occasionally wait for each other. The barrier is called\n <em>cyclic</em> because it can be re-used after the waiting threads\n are released.\n\n <p>A <tt>CyclicBarrier</tt> supports an optional {@link Runnable} command\n that is run once per barrier point, after the last thread in the party\n arrives, but before any threads are released.\n This <em>barrier action</em> is useful\n for updating shared-state before any of the parties continue.\n\n <p><b>Sample usage:</b> Here is an example of\n  using a barrier in a parallel decomposition design:\n <pre>\n class Solver {\n   final int N;\n   final float[][] data;\n   final CyclicBarrier barrier;\n\n   class Worker implements Runnable {\n     int myRow;\n     Worker(int row) { myRow = row; }\n     public void run() {\n       while (!done()) {\n         processRow(myRow);\n\n         try {\n           barrier.await();\n         } catch (InterruptedException ex) {\n           return;\n         } catch (BrokenBarrierException ex) {\n           return;\n         }\n       }\n     }\n   }\n\n   public Solver(float[][] matrix) {\n     data = matrix;\n     N = matrix.length;\n     barrier = new CyclicBarrier(N,\n                                 new Runnable() {\n                                   public void run() {\n                                     mergeRows(...);\n                                   }\n                                 });\n     for (int i = 0; i < N; ++i)\n       new Thread(new Worker(i)).start();\n\n     waitUntilDone();\n   }\n }\n </pre>\n Here, each worker thread processes a row of the matrix then waits at the\n barrier until all rows have been processed. When all rows are processed\n the supplied {@link Runnable} barrier action is executed and merges the\n rows. If the merger\n determines that a solution has been found then <tt>done()</tt> will return\n <tt>true</tt> and each worker will terminate.\n\n <p>If the barrier action does not rely on the parties being suspended when\n it is executed, then any of the threads in the party could execute that\n action when it is released. To facilitate this, each invocation of\n {@link #await} returns the arrival index of that thread at the barrier.\n You can then choose which thread should execute the barrier action, for\n example:\n <pre>  if (barrier.await() == 0) {\n     // log the completion of this iteration\n   }</pre>\n\n <p>The <tt>CyclicBarrier</tt> uses an all-or-none breakage model\n for failed synchronization attempts: If a thread leaves a barrier\n point prematurely because of interruption, failure, or timeout, all\n other threads waiting at that barrier point will also leave\n abnormally via {@link BrokenBarrierException} (or\n {@link InterruptedException} if they too were interrupted at about\n the same time).\n\n <p>Memory consistency effects: Actions in a thread prior to calling\n {@code await()}\n <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>\n actions that are part of the barrier action, which in turn\n <i>happen-before</i> actions following a successful return from the\n corresponding {@code await()} in other threads.\n\n @since 1.5\n @see CountDownLatch\n\n @author Doug Lea\n"
18123,method,java/util/concurrent/CyclicBarrier/getParties/," Returns the number of parties required to trip this barrier.\n\n @return the number of parties required to trip this barrier\n"
18124,method,java/util/concurrent/CyclicBarrier/await/," Waits until all {@linkplain #getParties parties} have invoked\n <tt>await</tt> on this barrier.\n\n <p>If the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n <ul>\n <li>The last thread arrives; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n one of the other waiting threads; or\n <li>Some other thread times out while waiting for barrier; or\n <li>Some other thread invokes {@link #reset} on this barrier.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the barrier is {@link #reset} while any thread is waiting,\n or if the barrier {@linkplain #isBroken is broken} when\n <tt>await</tt> is invoked, or while any thread is waiting, then\n {@link BrokenBarrierException} is thrown.\n\n <p>If any thread is {@linkplain Thread#interrupt interrupted} while waiting,\n then all other waiting threads will throw\n {@link BrokenBarrierException} and the barrier is placed in the broken\n state.\n\n <p>If the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state.\n\n @return the arrival index of the current thread, where index\n         <tt>{@link #getParties()} - 1</tt> indicates the first\n         to arrive and zero indicates the last to arrive\n @throws InterruptedException if the current thread was interrupted\n         while waiting\n @throws BrokenBarrierException if <em>another</em> thread was\n         interrupted or timed out while the current thread was\n         waiting, or the barrier was reset, or the barrier was\n         broken when {@code await} was called, or the barrier\n         action (if present) failed due an exception.\n"
18125,method,java/util/concurrent/CyclicBarrier/await/long;TimeUnit," Waits until all {@linkplain #getParties parties} have invoked\n <tt>await</tt> on this barrier, or the specified waiting time elapses.\n\n <p>If the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n <ul>\n <li>The last thread arrives; or\n <li>The specified timeout elapses; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n one of the other waiting threads; or\n <li>Some other thread times out while waiting for barrier; or\n <li>Some other thread invokes {@link #reset} on this barrier.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then {@link TimeoutException}\n is thrown. If the time is less than or equal to zero, the\n method will not wait at all.\n\n <p>If the barrier is {@link #reset} while any thread is waiting,\n or if the barrier {@linkplain #isBroken is broken} when\n <tt>await</tt> is invoked, or while any thread is waiting, then\n {@link BrokenBarrierException} is thrown.\n\n <p>If any thread is {@linkplain Thread#interrupt interrupted} while\n waiting, then all other waiting threads will throw {@link\n BrokenBarrierException} and the barrier is placed in the broken\n state.\n\n <p>If the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state.\n\n @param timeout the time to wait for the barrier\n @param unit the time unit of the timeout parameter\n @return the arrival index of the current thread, where index\n         <tt>{@link #getParties()} - 1</tt> indicates the first\n         to arrive and zero indicates the last to arrive\n @throws InterruptedException if the current thread was interrupted\n         while waiting\n @throws TimeoutException if the specified timeout elapses\n @throws BrokenBarrierException if <em>another</em> thread was\n         interrupted or timed out while the current thread was\n         waiting, or the barrier was reset, or the barrier was broken\n         when {@code await} was called, or the barrier action (if\n         present) failed due an exception\n"
18127,method,java/util/concurrent/CyclicBarrier/reset/," Resets the barrier to its initial state.  If any parties are\n currently waiting at the barrier, they will return with a\n {@link BrokenBarrierException}. Note that resets <em>after</em>\n a breakage has occurred for other reasons can be complicated to\n carry out; threads need to re-synchronize in some other way,\n and choose one to perform the reset.  It may be preferable to\n instead create a new barrier for subsequent use.\n"
18128,method,java/util/concurrent/CyclicBarrier/getNumberWaiting/," Returns the number of parties currently waiting at the barrier.\n This method is primarily useful for debugging and assertions.\n\n @return the number of parties currently blocked in {@link #await}\n"
18129,method,java/util/concurrent/CyclicBarrier/CyclicBarrier/int;Runnable," Creates a new <tt>CyclicBarrier</tt> that will trip when the\n given number of parties (threads) are waiting upon it, and which\n will execute the given barrier action when the barrier is tripped,\n performed by the last thread entering the barrier.\n\n @param parties the number of threads that must invoke {@link #await}\n        before the barrier is tripped\n @param barrierAction the command to execute when the barrier is\n        tripped, or {@code null} if there is no action\n @throws IllegalArgumentException if {@code parties} is less than 1\n"
18130,method,java/util/concurrent/CyclicBarrier/CyclicBarrier/int," Creates a new <tt>CyclicBarrier</tt> that will trip when the\n given number of parties (threads) are waiting upon it, and\n does not perform a predefined action when the barrier is tripped.\n\n @param parties the number of threads that must invoke {@link #await}\n        before the barrier is tripped\n @throws IllegalArgumentException if {@code parties} is less than 1\n"
18132,method,java/util/concurrent/CountDownLatch/await/," Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is {@linkplain Thread#interrupt interrupted}.\n\n <p>If the current count is zero then this method returns immediately.\n\n <p>If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of two things happen:\n <ul>\n <li>The count reaches zero due to invocations of the\n {@link #countDown} method; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n @throws InterruptedException if the current thread is interrupted\n         while waiting\n"
18133,method,java/util/concurrent/CountDownLatch/await/long;TimeUnit," Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is {@linkplain Thread#interrupt interrupted},\n or the specified waiting time elapses.\n\n <p>If the current count is zero then this method returns immediately\n with the value {@code true}.\n\n <p>If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of three things happen:\n <ul>\n <li>The count reaches zero due to invocations of the\n {@link #countDown} method; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </ul>\n\n <p>If the count reaches zero then the method returns with the\n value {@code true}.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.\n\n @param timeout the maximum time to wait\n @param unit the time unit of the {@code timeout} argument\n @return {@code true} if the count reached zero and {@code false}\n         if the waiting time elapsed before the count reached zero\n @throws InterruptedException if the current thread is interrupted\n         while waiting\n"
18134,method,java/util/concurrent/CountDownLatch/countDown/," Decrements the count of the latch, releasing all waiting threads if\n the count reaches zero.\n\n <p>If the current count is greater than zero then it is decremented.\n If the new count is zero then all waiting threads are re-enabled for\n thread scheduling purposes.\n\n <p>If the current count equals zero then nothing happens.\n"
18135,method,java/util/concurrent/CountDownLatch/getCount/," Returns the current count.\n\n <p>This method is typically used for debugging and testing purposes.\n\n @return the current count\n"
18137,method,java/util/concurrent/CountDownLatch/CountDownLatch/int," Constructs a {@code CountDownLatch} initialized with the given count.\n\n @param count the number of times {@link #countDown} must be invoked\n        before threads can pass through {@link #await}\n @throws IllegalArgumentException if {@code count} is negative\n"
18138,class,java/util/concurrent/CopyOnWriteArraySet," A {@link java.util.Set} that uses an internal {@link CopyOnWriteArrayList}\n for all of its operations.  Thus, it shares the same basic properties:\n <ul>\n  <li>It is best suited for applications in which set sizes generally\n       stay small, read-only operations\n       vastly outnumber mutative operations, and you need\n       to prevent interference among threads during traversal.\n  <li>It is thread-safe.\n  <li>Mutative operations (<tt>add</tt>, <tt>set</tt>, <tt>remove</tt>, etc.)\n      are expensive since they usually entail copying the entire underlying\n      array.\n  <li>Iterators do not support the mutative <tt>remove</tt> operation.\n  <li>Traversal via iterators is fast and cannot encounter\n      interference from other threads. Iterators rely on\n      unchanging snapshots of the array at the time the iterators were\n      constructed.\n </ul>\n\n <p> <b>Sample Usage.</b> The following code sketch uses a\n copy-on-write set to maintain a set of Handler objects that\n perform some action upon state updates.\n\n <pre>\n class Handler { void handle(); ... }\n\n class X {\n    private final CopyOnWriteArraySet&lt;Handler&gt; handlers\n       = new CopyOnWriteArraySet&lt;Handler&gt;();\n    public void addHandler(Handler h) { handlers.add(h); }\n\n    private long internalState;\n    private synchronized void changeState() { internalState = ...; }\n\n    public void update() {\n       changeState();\n       for (Handler handler : handlers)\n          handler.handle();\n    }\n }\n </pre>\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @see CopyOnWriteArrayList\n @since 1.5\n @author Doug Lea\n @param <E> the type of elements held in this collection\n"
18141,method,java/util/concurrent/CopyOnWriteArraySet/contains/Object," Returns <tt>true</tt> if this set contains the specified element.\n More formally, returns <tt>true</tt> if and only if this set\n contains an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this set is to be tested\n @return <tt>true</tt> if this set contains the specified element\n"
18144,method,java/util/concurrent/CopyOnWriteArraySet/clear/," Removes all of the elements from this set.\n The set will be empty after this call returns.\n"
18145,method,java/util/concurrent/CopyOnWriteArraySet/remove/Object," Removes the specified element from this set if it is present.\n More formally, removes an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,\n if this set contains such an element.  Returns <tt>true</tt> if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)\n\n @param o object to be removed from this set, if present\n @return <tt>true</tt> if this set contained the specified element\n"
18146,method,java/util/concurrent/CopyOnWriteArraySet/add/Object," Adds the specified element to this set if it is not already present.\n More formally, adds the specified element <tt>e</tt> to this set if\n the set contains no element <tt>e2</tt> such that\n <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns <tt>false</tt>.\n\n @param e element to be added to this set\n @return <tt>true</tt> if this set did not already contain the specified\n         element\n"
18148,method,java/util/concurrent/CopyOnWriteArraySet/addAll/Collection," Adds all of the elements in the specified collection to this set if\n they're not already present.  If the specified collection is also a\n set, the <tt>addAll</tt> operation effectively modifies this set so\n that its value is the <i>union</i> of the two sets.  The behavior of\n this operation is undefined if the specified collection is modified\n while the operation is in progress.\n\n @param  c collection containing elements to be added to this set\n @return <tt>true</tt> if this set changed as a result of the call\n @throws NullPointerException if the specified collection is null\n @see #add(Object)\n"
18149,method,java/util/concurrent/CopyOnWriteArraySet/removeAll/Collection," Removes from this set all of its elements that are contained in the\n specified collection.  If the specified collection is also a set,\n this operation effectively modifies this set so that its value is the\n <i>asymmetric set difference</i> of the two sets.\n\n @param  c collection containing elements to be removed from this set\n @return <tt>true</tt> if this set changed as a result of the call\n @throws ClassCastException if the class of an element of this set\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this set contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n"
18150,method,java/util/concurrent/CopyOnWriteArraySet/retainAll/Collection," Retains only the elements in this set that are contained in the\n specified collection.  In other words, removes from this set all of\n its elements that are not contained in the specified collection.  If\n the specified collection is also a set, this operation effectively\n modifies this set so that its value is the <i>intersection</i> of the\n two sets.\n\n @param  c collection containing elements to be retained in this set\n @return <tt>true</tt> if this set changed as a result of the call\n @throws ClassCastException if the class of an element of this set\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this set contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n"
18151,method,java/util/concurrent/CopyOnWriteArraySet/iterator/," Returns an iterator over the elements contained in this set\n in the order in which these elements were added.\n\n <p>The returned iterator provides a snapshot of the state of the set\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does <em>NOT</em> support the\n <tt>remove</tt> method.\n\n @return an iterator over the elements in this set\n"
18155,class,java/util/concurrent/CopyOnWriteArrayList," A thread-safe variant of {@link java.util.ArrayList} in which all mutative\n operations (<tt>add</tt>, <tt>set</tt>, and so on) are implemented by\n making a fresh copy of the underlying array.\n\n <p> This is ordinarily too costly, but may be <em>more</em> efficient\n than alternatives when traversal operations vastly outnumber\n mutations, and is useful when you cannot or don't want to\n synchronize traversals, yet need to preclude interference among\n concurrent threads.  The "snapshot" style iterator method uses a\n reference to the state of the array at the point that the iterator\n was created. This array never changes during the lifetime of the\n iterator, so interference is impossible and the iterator is\n guaranteed not to throw <tt>ConcurrentModificationException</tt>.\n The iterator will not reflect additions, removals, or changes to\n the list since the iterator was created.  Element-changing\n operations on iterators themselves (<tt>remove</tt>, <tt>set</tt>, and\n <tt>add</tt>) are not supported. These methods throw\n <tt>UnsupportedOperationException</tt>.\n\n <p>All elements are permitted, including <tt>null</tt>.\n\n <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code CopyOnWriteArrayList}\n <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code CopyOnWriteArrayList} in another thread.\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @since 1.5\n @author Doug Lea\n @param <E> the type of elements held in this collection\n"
18158,method,java/util/concurrent/CopyOnWriteArrayList/contains/Object," Returns <tt>true</tt> if this list contains the specified element.\n More formally, returns <tt>true</tt> if and only if this list contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n @param o element whose presence in this list is to be tested\n @return <tt>true</tt> if this list contains the specified element\n"
18159,method,java/util/concurrent/CopyOnWriteArrayList/indexOf/Object," {@inheritDoc}\n"
18161,method,java/util/concurrent/CopyOnWriteArrayList/lastIndexOf/Object," {@inheritDoc}\n"
18166,method,java/util/concurrent/CopyOnWriteArrayList/get/int," {@inheritDoc}\n\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
18167,method,java/util/concurrent/CopyOnWriteArrayList/set/int;Object," Replaces the element at the specified position in this list with the\n specified element.\n\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
18169,method,java/util/concurrent/CopyOnWriteArrayList/add/int;Object," Inserts the specified element at the specified position in this\n list. Shifts the element currently at that position (if any) and\n any subsequent elements to the right (adds one to their indices).\n\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
18170,method,java/util/concurrent/CopyOnWriteArrayList/remove/int," Removes the element at the specified position in this list.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).  Returns the element that was removed from the list.\n\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
18171,method,java/util/concurrent/CopyOnWriteArrayList/remove/Object," Removes the first occurrence of the specified element from this list,\n if it is present.  If this list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>\n (if such an element exists).  Returns <tt>true</tt> if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call).\n\n @param o element to be removed from this list, if present\n @return <tt>true</tt> if this list contained the specified element\n"
18174,method,java/util/concurrent/CopyOnWriteArrayList/removeAll/Collection," Removes from this list all of its elements that are contained in\n the specified collection. This is a particularly expensive operation\n in this class because of the need for an internal temporary array.\n\n @param c collection containing elements to be removed from this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws ClassCastException if the class of an element of this list\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this list contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n"
18175,method,java/util/concurrent/CopyOnWriteArrayList/retainAll/Collection," Retains only the elements in this list that are contained in the\n specified collection.  In other words, removes from this list all of\n its elements that are not contained in the specified collection.\n\n @param c collection containing elements to be retained in this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws ClassCastException if the class of an element of this list\n         is incompatible with the specified collection (optional)\n @throws NullPointerException if this list contains a null element and the\n         specified collection does not permit null elements (optional),\n         or if the specified collection is null\n @see #remove(Object)\n"
18178,method,java/util/concurrent/CopyOnWriteArrayList/addAll/Collection," Appends all of the elements in the specified collection to the end\n of this list, in the order that they are returned by the specified\n collection's iterator.\n\n @param c collection containing elements to be added to this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws NullPointerException if the specified collection is null\n @see #add(Object)\n"
18179,method,java/util/concurrent/CopyOnWriteArrayList/addAll/int;Collection," Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in this list in the order that they are returned by the\n specified collection's iterator.\n\n @param index index at which to insert the first element\n        from the specified collection\n @param c collection containing elements to be added to this list\n @return <tt>true</tt> if this list changed as a result of the call\n @throws IndexOutOfBoundsException {@inheritDoc}\n @throws NullPointerException if the specified collection is null\n @see #add(int,Object)\n"
18183,method,java/util/concurrent/CopyOnWriteArrayList/iterator/," Returns an iterator over the elements in this list in proper sequence.\n\n <p>The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does <em>NOT</em> support the\n <tt>remove</tt> method.\n\n @return an iterator over the elements in this list in proper sequence\n"
18184,method,java/util/concurrent/CopyOnWriteArrayList/listIterator/," {@inheritDoc}\n\n <p>The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does <em>NOT</em> support the\n <tt>remove</tt>, <tt>set</tt> or <tt>add</tt> methods.\n"
18185,method,java/util/concurrent/CopyOnWriteArrayList/listIterator/int," {@inheritDoc}\n\n <p>The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does <em>NOT</em> support the\n <tt>remove</tt>, <tt>set</tt> or <tt>add</tt> methods.\n\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
18186,method,java/util/concurrent/CopyOnWriteArrayList/subList/int;int," Returns a view of the portion of this list between\n <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.\n The returned list is backed by this list, so changes in the\n returned list are reflected in this list, and vice-versa.\n While mutative operations are supported, they are probably not\n very useful for CopyOnWriteArrayLists.\n\n <p>The semantics of the list returned by this method become\n undefined if the backing list (i.e., this list) is\n <i>structurally modified</i> in any way other than via the\n returned list.  (Structural modifications are those that change\n the size of the list, or otherwise perturb it in such a fashion\n that iterations in progress may yield incorrect results.)\n\n @param fromIndex low endpoint (inclusive) of the subList\n @param toIndex high endpoint (exclusive) of the subList\n @return a view of the specified range within this list\n @throws IndexOutOfBoundsException {@inheritDoc}\n"
18191,method,java/util/concurrent/ConcurrentSkipListSet/clone/," Returns a shallow copy of this <tt>ConcurrentSkipListSet</tt>\n instance. (The elements themselves are not cloned.)\n\n @return a shallow copy of this set\n"
18194,method,java/util/concurrent/ConcurrentSkipListSet/contains/Object," Returns <tt>true</tt> if this set contains the specified element.\n More formally, returns <tt>true</tt> if and only if this set\n contains an element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n\n @param o object to be checked for containment in this set\n @return <tt>true</tt> if this set contains the specified element\n @throws ClassCastException if the specified element cannot be\n         compared with the elements currently in this set\n @throws NullPointerException if the specified element is null\n"
18195,method,java/util/concurrent/ConcurrentSkipListSet/add/Object," Adds the specified element to this set if it is not already present.\n More formally, adds the specified element <tt>e</tt> to this set if\n the set contains no element <tt>e2</tt> such that <tt>e.equals(e2)</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns <tt>false</tt>.\n\n @param e element to be added to this set\n @return <tt>true</tt> if this set did not already contain the\n         specified element\n @throws ClassCastException if <tt>e</tt> cannot be compared\n         with the elements currently in this set\n @throws NullPointerException if the specified element is null\n"
18196,method,java/util/concurrent/ConcurrentSkipListSet/remove/Object," Removes the specified element from this set if it is present.\n More formally, removes an element <tt>e</tt> such that\n <tt>o.equals(e)</tt>, if this set contains such an element.\n Returns <tt>true</tt> if this set contained the element (or\n equivalently, if this set changed as a result of the call).\n (This set will not contain the element once the call returns.)\n\n @param o object to be removed from this set, if present\n @return <tt>true</tt> if this set contained the specified element\n @throws ClassCastException if <tt>o</tt> cannot be compared\n         with the elements currently in this set\n @throws NullPointerException if the specified element is null\n"
18201,method,java/util/concurrent/ConcurrentSkipListSet/removeAll/Collection," Removes from this set all of its elements that are contained in\n the specified collection.  If the specified collection is also\n a set, this operation effectively modifies this set so that its\n value is the <i>asymmetric set difference</i> of the two sets.\n\n @param  c collection containing elements to be removed from this set\n @return <tt>true</tt> if this set changed as a result of the call\n @throws ClassCastException if the types of one or more elements in this\n         set are incompatible with the specified collection\n @throws NullPointerException if the specified collection or any\n         of its elements are null\n"
18202,method,java/util/concurrent/ConcurrentSkipListSet/lower/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n"
18203,method,java/util/concurrent/ConcurrentSkipListSet/floor/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n"
18204,method,java/util/concurrent/ConcurrentSkipListSet/ceiling/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n"
18205,method,java/util/concurrent/ConcurrentSkipListSet/higher/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n"
18209,method,java/util/concurrent/ConcurrentSkipListSet/first/," @throws NoSuchElementException {@inheritDoc}\n"
18210,method,java/util/concurrent/ConcurrentSkipListSet/last/," @throws NoSuchElementException {@inheritDoc}\n"
18211,method,java/util/concurrent/ConcurrentSkipListSet/subSet/Object;boolean;Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromElement} or\n         {@code toElement} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18212,method,java/util/concurrent/ConcurrentSkipListSet/headSet/Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code toElement} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18213,method,java/util/concurrent/ConcurrentSkipListSet/tailSet/Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromElement} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18214,method,java/util/concurrent/ConcurrentSkipListSet/subSet/Object;Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromElement} or\n         {@code toElement} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18215,method,java/util/concurrent/ConcurrentSkipListSet/headSet/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code toElement} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18216,method,java/util/concurrent/ConcurrentSkipListSet/tailSet/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromElement} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18223,method,java/util/concurrent/ConcurrentSkipListMap/clone/," Returns a shallow copy of this <tt>ConcurrentSkipListMap</tt>\n instance. (The keys and values themselves are not cloned.)\n\n @return a shallow copy of this map\n"
18227,method,java/util/concurrent/ConcurrentSkipListMap/remove/Object," Removes the mapping for the specified key from this map if present.\n\n @param  key key for which mapping should be removed\n @return the previous value associated with the specified key, or\n         <tt>null</tt> if there was no mapping for the key\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if the specified key is null\n"
18228,method,java/util/concurrent/ConcurrentSkipListMap/containsValue/Object," Returns <tt>true</tt> if this map maps one or more keys to the\n specified value.  This operation requires time linear in the\n map size.\n\n @param value value whose presence in this map is to be tested\n @return <tt>true</tt> if a mapping to <tt>value</tt> exists;\n         <tt>false</tt> otherwise\n @throws NullPointerException if the specified value is null\n"
18232,method,java/util/concurrent/ConcurrentSkipListMap/keySet/," Returns a {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n <p>The view's {@code iterator} is a "weakly consistent" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n <p>This method is equivalent to method {@code navigableKeySet}.\n\n @return a navigable set view of the keys in this map\n"
18235,method,java/util/concurrent/ConcurrentSkipListMap/entrySet/," Returns a {@link Set} view of the mappings contained in this map.\n The set's iterator returns the entries in ascending key order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt>\n operations.  It does not support the <tt>add</tt> or\n <tt>addAll</tt> operations.\n\n <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n <p>The <tt>Map.Entry</tt> elements returned by\n <tt>iterator.next()</tt> do <em>not</em> support the\n <tt>setValue</tt> operation.\n\n @return a set view of the mappings contained in this map,\n         sorted in ascending key order\n"
18238,method,java/util/concurrent/ConcurrentSkipListMap/equals/Object," Compares the specified object with this map for equality.\n Returns <tt>true</tt> if the given object is also a map and the\n two maps represent the same mappings.  More formally, two maps\n <tt>m1</tt> and <tt>m2</tt> represent the same mappings if\n <tt>m1.entrySet().equals(m2.entrySet())</tt>.  This\n operation may return misleading results if either map is\n concurrently modified during execution of this method.\n\n @param o object to be compared for equality with this map\n @return <tt>true</tt> if the specified object is equal to this map\n"
18239,method,java/util/concurrent/ConcurrentSkipListMap/putIfAbsent/Object;Object," {@inheritDoc}\n\n @return the previous value associated with the specified key,\n         or <tt>null</tt> if there was no mapping for the key\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if the specified key or value is null\n"
18240,method,java/util/concurrent/ConcurrentSkipListMap/remove/Object;Object," {@inheritDoc}\n\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if the specified key is null\n"
18241,method,java/util/concurrent/ConcurrentSkipListMap/replace/Object;Object;Object," {@inheritDoc}\n\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if any of the arguments are null\n"
18242,method,java/util/concurrent/ConcurrentSkipListMap/replace/Object;Object," {@inheritDoc}\n\n @return the previous value associated with the specified key,\n         or <tt>null</tt> if there was no mapping for the key\n @throws ClassCastException if the specified key cannot be compared\n         with the keys currently in the map\n @throws NullPointerException if the specified key or value is null\n"
18244,method,java/util/concurrent/ConcurrentSkipListMap/firstKey/," @throws NoSuchElementException {@inheritDoc}\n"
18245,method,java/util/concurrent/ConcurrentSkipListMap/lastKey/," @throws NoSuchElementException {@inheritDoc}\n"
18246,method,java/util/concurrent/ConcurrentSkipListMap/subMap/Object;boolean;Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromKey} or {@code toKey} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18247,method,java/util/concurrent/ConcurrentSkipListMap/headMap/Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code toKey} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18248,method,java/util/concurrent/ConcurrentSkipListMap/tailMap/Object;boolean," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromKey} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18249,method,java/util/concurrent/ConcurrentSkipListMap/subMap/Object;Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromKey} or {@code toKey} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18250,method,java/util/concurrent/ConcurrentSkipListMap/headMap/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code toKey} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18251,method,java/util/concurrent/ConcurrentSkipListMap/tailMap/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if {@code fromKey} is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18252,method,java/util/concurrent/ConcurrentSkipListMap/lowerEntry/Object," Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or <tt>null</tt> if there is\n no such key. The returned entry does <em>not</em> support the\n <tt>Entry.setValue</tt> method.\n\n @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n"
18253,method,java/util/concurrent/ConcurrentSkipListMap/lowerKey/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n"
18254,method,java/util/concurrent/ConcurrentSkipListMap/floorEntry/Object," Returns a key-value mapping associated with the greatest key\n less than or equal to the given key, or <tt>null</tt> if there\n is no such key. The returned entry does <em>not</em> support\n the <tt>Entry.setValue</tt> method.\n\n @param key the key\n @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n"
18255,method,java/util/concurrent/ConcurrentSkipListMap/floorKey/Object," @param key the key\n @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n"
18256,method,java/util/concurrent/ConcurrentSkipListMap/ceilingEntry/Object," Returns a key-value mapping associated with the least key\n greater than or equal to the given key, or <tt>null</tt> if\n there is no such entry. The returned entry does <em>not</em>\n support the <tt>Entry.setValue</tt> method.\n\n @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n"
18257,method,java/util/concurrent/ConcurrentSkipListMap/ceilingKey/Object," @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n"
18258,method,java/util/concurrent/ConcurrentSkipListMap/higherEntry/Object," Returns a key-value mapping associated with the least key\n strictly greater than the given key, or <tt>null</tt> if there\n is no such key. The returned entry does <em>not</em> support\n the <tt>Entry.setValue</tt> method.\n\n @param key the key\n @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n"
18259,method,java/util/concurrent/ConcurrentSkipListMap/higherKey/Object," @param key the key\n @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified key is null\n"
18268,interface,java/util/concurrent/ConcurrentNavigableMap," A {@link ConcurrentMap} supporting {@link NavigableMap} operations,\n and recursively so for its navigable sub-maps.\n\n <p>This interface is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @author Doug Lea\n @param <K> the type of keys maintained by this map\n @param <V> the type of mapped values\n @since 1.6\n"
18269,method,java/util/concurrent/ConcurrentNavigableMap/subMap/Object;boolean;Object;boolean," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
18270,method,java/util/concurrent/ConcurrentNavigableMap/headMap/Object;boolean," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
18271,method,java/util/concurrent/ConcurrentNavigableMap/tailMap/Object;boolean," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
18272,method,java/util/concurrent/ConcurrentNavigableMap/subMap/Object;Object," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
18273,method,java/util/concurrent/ConcurrentNavigableMap/headMap/Object," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
18274,method,java/util/concurrent/ConcurrentNavigableMap/tailMap/Object," @throws ClassCastException       {@inheritDoc}\n @throws NullPointerException     {@inheritDoc}\n @throws IllegalArgumentException {@inheritDoc}\n"
18276,method,java/util/concurrent/ConcurrentNavigableMap/navigableKeySet/," Returns a {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n <p>The view's {@code iterator} is a "weakly consistent" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n @return a navigable set view of the keys in this map\n"
18278,method,java/util/concurrent/ConcurrentNavigableMap/descendingKeySet/," Returns a reverse order {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in descending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n <p>The view's {@code iterator} is a "weakly consistent" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n @return a reverse order navigable set view of the keys in this map\n"
18281,method,java/util/concurrent/ConcurrentMap/remove/Object;Object," Removes the entry for a key only if currently mapped to a given value.\n This is equivalent to\n <pre>\n   if (map.containsKey(key) &amp;&amp; map.get(key).equals(value)) {\n       map.remove(key);\n       return true;\n   } else return false;</pre>\n except that the action is performed atomically.\n\n @param key key with which the specified value is associated\n @param value value expected to be associated with the specified key\n @return <tt>true</tt> if the value was removed\n @throws UnsupportedOperationException if the <tt>remove</tt> operation\n         is not supported by this map\n @throws ClassCastException if the key or value is of an inappropriate\n         type for this map (optional)\n @throws NullPointerException if the specified key or value is null,\n         and this map does not permit null keys or values (optional)\n"
18282,method,java/util/concurrent/ConcurrentMap/replace/Object;Object;Object," Replaces the entry for a key only if currently mapped to a given value.\n This is equivalent to\n <pre>\n   if (map.containsKey(key) &amp;&amp; map.get(key).equals(oldValue)) {\n       map.put(key, newValue);\n       return true;\n   } else return false;</pre>\n except that the action is performed atomically.\n\n @param key key with which the specified value is associated\n @param oldValue value expected to be associated with the specified key\n @param newValue value to be associated with the specified key\n @return <tt>true</tt> if the value was replaced\n @throws UnsupportedOperationException if the <tt>put</tt> operation\n         is not supported by this map\n @throws ClassCastException if the class of a specified key or value\n         prevents it from being stored in this map\n @throws NullPointerException if a specified key or value is null,\n         and this map does not permit null keys or values\n @throws IllegalArgumentException if some property of a specified key\n         or value prevents it from being stored in this map\n"
18283,method,java/util/concurrent/ConcurrentMap/replace/Object;Object," Replaces the entry for a key only if currently mapped to some value.\n This is equivalent to\n <pre>\n   if (map.containsKey(key)) {\n       return map.put(key, value);\n   } else return null;</pre>\n except that the action is performed atomically.\n\n @param key key with which the specified value is associated\n @param value value to be associated with the specified key\n @return the previous value associated with the specified key, or\n         <tt>null</tt> if there was no mapping for the key.\n         (A <tt>null</tt> return can also indicate that the map\n         previously associated <tt>null</tt> with the key,\n         if the implementation supports null values.)\n @throws UnsupportedOperationException if the <tt>put</tt> operation\n         is not supported by this map\n @throws ClassCastException if the class of the specified key or value\n         prevents it from being stored in this map\n @throws NullPointerException if the specified key or value is null,\n         and this map does not permit null keys or values\n @throws IllegalArgumentException if some property of the specified key\n         or value prevents it from being stored in this map\n"
18291,method,java/util/concurrent/ConcurrentLinkedQueue/contains/Object," Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.\n\n @param o object to be checked for containment in this queue\n @return {@code true} if this queue contains the specified element\n"
18292,method,java/util/concurrent/ConcurrentLinkedQueue/remove/Object," Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n\n @param o element to be removed from this queue, if present\n @return {@code true} if this queue changed as a result of the call\n"
18294,method,java/util/concurrent/ConcurrentLinkedQueue/toArray/Object[]," Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.\n\n @param a the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose\n @return an array containing all of the elements in this queue\n @throws ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this queue\n @throws NullPointerException if the specified array is null\n"
18295,method,java/util/concurrent/ConcurrentLinkedQueue/iterator/," Returns an iterator over the elements in this queue in proper sequence.\n The returned iterator is a "weakly consistent" iterator that\n will never throw {@link  java.util.ConcurrentModificationException\n ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n @return an iterator over the elements in this queue in proper sequence\n"
18296,method,java/util/concurrent/ConcurrentLinkedQueue/ConcurrentLinkedQueue/," Creates a {@code ConcurrentLinkedQueue} that is initially empty.\n"
18297,method,java/util/concurrent/ConcurrentLinkedQueue/ConcurrentLinkedQueue/Collection," Creates a {@code ConcurrentLinkedQueue}\n initially containing the elements of the given collection,\n added in traversal order of the collection's iterator.\n @param c the collection of elements to initially contain\n @throws NullPointerException if the specified collection or any\n         of its elements are null\n"
18302,method,java/util/concurrent/ConcurrentHashMap/containsKey/Object," Tests if the specified object is a key in this table.\n\n @param  key   possible key\n @return <tt>true</tt> if and only if the specified object\n         is a key in this table, as determined by the\n         <tt>equals</tt> method; <tt>false</tt> otherwise.\n @throws NullPointerException if the specified key is null\n"
18304,method,java/util/concurrent/ConcurrentHashMap/contains/Object," Legacy method testing if some key maps into the specified value\n in this table.  This method is identical in functionality to\n {@link #containsValue}, and exists solely to ensure\n full compatibility with class {@link java.util.Hashtable},\n which supported this method prior to introduction of the\n Java Collections framework.\n\n @param  value a value to search for\n @return <tt>true</tt> if and only if some key maps to the\n         <tt>value</tt> argument in this table as\n         determined by the <tt>equals</tt> method;\n         <tt>false</tt> otherwise\n @throws NullPointerException if the specified value is null\n"
18305,method,java/util/concurrent/ConcurrentHashMap/put/Object;Object," Maps the specified key to the specified value in this table.\n Neither the key nor the value can be null.\n\n <p> The value can be retrieved by calling the <tt>get</tt> method\n with a key that is equal to the original key.\n\n @param key key with which the specified value is to be associated\n @param value value to be associated with the specified key\n @return the previous value associated with <tt>key</tt>, or\n         <tt>null</tt> if there was no mapping for <tt>key</tt>\n @throws NullPointerException if the specified key or value is null\n"
18306,method,java/util/concurrent/ConcurrentHashMap/putIfAbsent/Object;Object," {@inheritDoc}\n\n @return the previous value associated with the specified key,\n         or <tt>null</tt> if there was no mapping for the key\n @throws NullPointerException if the specified key or value is null\n"
18309,method,java/util/concurrent/ConcurrentHashMap/remove/Object;Object," {@inheritDoc}\n\n @throws NullPointerException if the specified key is null\n"
18310,method,java/util/concurrent/ConcurrentHashMap/replace/Object;Object;Object," {@inheritDoc}\n\n @throws NullPointerException if any of the arguments are null\n"
18311,method,java/util/concurrent/ConcurrentHashMap/replace/Object;Object," {@inheritDoc}\n\n @return the previous value associated with the specified key,\n         or <tt>null</tt> if there was no mapping for the key\n @throws NullPointerException if the specified key or value is null\n"
18314,method,java/util/concurrent/ConcurrentHashMap/values/," Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  The collection\n supports element removal, which removes the corresponding\n mapping from this map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not\n support the <tt>add</tt> or <tt>addAll</tt> operations.\n\n <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n"
18318,method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/int;float;int," Creates a new, empty map with the specified initial\n capacity, load factor and concurrency level.\n\n @param initialCapacity the initial capacity. The implementation\n performs internal sizing to accommodate this many elements.\n @param loadFactor  the load factor threshold, used to control resizing.\n Resizing may be performed when the average number of elements per\n bin exceeds this threshold.\n @param concurrencyLevel the estimated number of concurrently\n updating threads. The implementation performs internal sizing\n to try to accommodate this many threads.\n @throws IllegalArgumentException if the initial capacity is\n negative or the load factor or concurrencyLevel are\n nonpositive.\n"
18319,method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/int;float," Creates a new, empty map with the specified initial capacity\n and load factor and with the default concurrencyLevel (16).\n\n @param initialCapacity The implementation performs internal\n sizing to accommodate this many elements.\n @param loadFactor  the load factor threshold, used to control resizing.\n Resizing may be performed when the average number of elements per\n bin exceeds this threshold.\n @throws IllegalArgumentException if the initial capacity of\n elements is negative or the load factor is nonpositive\n\n @since 1.6\n"
18320,method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/int," Creates a new, empty map with the specified initial capacity,\n and with default load factor (0.75) and concurrencyLevel (16).\n\n @param initialCapacity the initial capacity. The implementation\n performs internal sizing to accommodate this many elements.\n @throws IllegalArgumentException if the initial capacity of\n elements is negative.\n"
18321,method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/," Creates a new, empty map with a default initial capacity (16),\n load factor (0.75) and concurrencyLevel (16).\n"
18322,method,java/util/concurrent/ConcurrentHashMap/ConcurrentHashMap/Map," Creates a new map with the same mappings as the given map.\n The map is created with a capacity of 1.5 times the number\n of mappings in the given map or 16 (whichever is greater),\n and a default load factor (0.75) and concurrencyLevel (16).\n\n @param m the map\n"
18323,interface,java/util/concurrent/CompletionService," A service that decouples the production of new asynchronous tasks\n from the consumption of the results of completed tasks.  Producers\n <tt>submit</tt> tasks for execution. Consumers <tt>take</tt>\n completed tasks and process their results in the order they\n complete.  A <tt>CompletionService</tt> can for example be used to\n manage asynchronous IO, in which tasks that perform reads are\n submitted in one part of a program or system, and then acted upon\n in a different part of the program when the reads complete,\n possibly in a different order than they were requested.\n\n <p>Typically, a <tt>CompletionService</tt> relies on a separate\n {@link Executor} to actually execute the tasks, in which case the\n <tt>CompletionService</tt> only manages an internal completion\n queue. The {@link ExecutorCompletionService} class provides an\n implementation of this approach.\n\n <p>Memory consistency effects: Actions in a thread prior to\n submitting a task to a {@code CompletionService}\n <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>\n actions taken by that task, which in turn <i>happen-before</i>\n actions following a successful return from the corresponding {@code take()}.\n\n"
18324,method,java/util/concurrent/CompletionService/submit/Callable," Submits a value-returning task for execution and returns a Future\n representing the pending results of the task.  Upon completion,\n this task may be taken or polled.\n\n @param task the task to submit\n @return a Future representing pending completion of the task\n @throws RejectedExecutionException if the task cannot be\n         scheduled for execution\n @throws NullPointerException if the task is null\n"
18325,method,java/util/concurrent/CompletionService/submit/Runnable;Object," Submits a Runnable task for execution and returns a Future\n representing that task.  Upon completion, this task may be\n taken or polled.\n\n @param task the task to submit\n @param result the result to return upon successful completion\n @return a Future representing pending completion of the task,\n         and whose <tt>get()</tt> method will return the given\n         result value upon completion\n @throws RejectedExecutionException if the task cannot be\n         scheduled for execution\n @throws NullPointerException if the task is null\n"
18328,method,java/util/concurrent/CompletionService/poll/long;TimeUnit," Retrieves and removes the Future representing the next\n completed task, waiting if necessary up to the specified wait\n time if none are yet present.\n\n @param timeout how long to wait before giving up, in units of\n        <tt>unit</tt>\n @param unit a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter\n @return the Future representing the next completed task or\n         <tt>null</tt> if the specified waiting time elapses\n         before one is present\n @throws InterruptedException if interrupted while waiting\n"
18332,interface,java/util/concurrent/Callable," A task that returns a result and may throw an exception.\n Implementors define a single method with no arguments called\n <tt>call</tt>.\n\n <p>The <tt>Callable</tt> interface is similar to {@link\n java.lang.Runnable}, in that both are designed for classes whose\n instances are potentially executed by another thread.  A\n <tt>Runnable</tt>, however, does not return a result and cannot\n throw a checked exception.\n\n <p> The {@link Executors} class contains utility methods to\n convert from other common forms to <tt>Callable</tt> classes.\n\n @see Executor\n @since 1.5\n @author Doug Lea\n @param <V> the result type of method <tt>call</tt>\n"
18334,class,java/util/concurrent/BrokenBarrierException," Exception thrown when a thread tries to wait upon a barrier that is\n in a broken state, or which enters the broken state while the thread\n is waiting.\n\n @see CyclicBarrier\n\n @since 1.5\n @author Doug Lea\n\n"
18340,method,java/util/concurrent/BlockingQueue/put/Object," Inserts the specified element into this queue, waiting if necessary\n for space to become available.\n\n @param e the element to add\n @throws InterruptedException if interrupted while waiting\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this queue\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this queue\n"
18341,method,java/util/concurrent/BlockingQueue/offer/Object;long;TimeUnit," Inserts the specified element into this queue, waiting up to the\n specified wait time if necessary for space to become available.\n\n @param e the element to add\n @param timeout how long to wait before giving up, in units of\n        <tt>unit</tt>\n @param unit a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter\n @return <tt>true</tt> if successful, or <tt>false</tt> if\n         the specified waiting time elapses before space is available\n @throws InterruptedException if interrupted while waiting\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this queue\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this queue\n"
18342,method,java/util/concurrent/BlockingQueue/take/," Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available.\n\n @return the head of this queue\n @throws InterruptedException if interrupted while waiting\n"
18343,method,java/util/concurrent/BlockingQueue/poll/long;TimeUnit," Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.\n\n @param timeout how long to wait before giving up, in units of\n        <tt>unit</tt>\n @param unit a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter\n @return the head of this queue, or <tt>null</tt> if the\n         specified waiting time elapses before an element is available\n @throws InterruptedException if interrupted while waiting\n"
18344,method,java/util/concurrent/BlockingQueue/remainingCapacity/," Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking, or <tt>Integer.MAX_VALUE</tt> if there is no intrinsic\n limit.\n\n <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting <tt>remainingCapacity</tt>\n because it may be the case that another thread is about to\n insert or remove an element.\n\n @return the remaining capacity\n"
18345,method,java/util/concurrent/BlockingQueue/remove/Object," Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element <tt>e</tt> such\n that <tt>o.equals(e)</tt>, if this queue contains one or more such\n elements.\n Returns <tt>true</tt> if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n\n @param o element to be removed from this queue, if present\n @return <tt>true</tt> if this queue changed as a result of the call\n @throws ClassCastException if the class of the specified element\n         is incompatible with this queue (optional)\n @throws NullPointerException if the specified element is null (optional)\n"
18346,method,java/util/concurrent/BlockingQueue/contains/Object," Returns <tt>true</tt> if this queue contains the specified element.\n More formally, returns <tt>true</tt> if and only if this queue contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n\n @param o object to be checked for containment in this queue\n @return <tt>true</tt> if this queue contains the specified element\n @throws ClassCastException if the class of the specified element\n         is incompatible with this queue (optional)\n @throws NullPointerException if the specified element is null (optional)\n"
18347,method,java/util/concurrent/BlockingQueue/drainTo/Collection," Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection <tt>c</tt> may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n <tt>IllegalArgumentException</tt>. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n\n @param c the collection to transfer elements into\n @return the number of elements transferred\n @throws UnsupportedOperationException if addition of elements\n         is not supported by the specified collection\n @throws ClassCastException if the class of an element of this queue\n         prevents it from being added to the specified collection\n @throws NullPointerException if the specified collection is null\n @throws IllegalArgumentException if the specified collection is this\n         queue, or some property of an element of this queue prevents\n         it from being added to the specified collection\n"
18348,method,java/util/concurrent/BlockingQueue/drainTo/Collection;int," Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection <tt>c</tt> may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n <tt>IllegalArgumentException</tt>. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n\n @param c the collection to transfer elements into\n @param maxElements the maximum number of elements to transfer\n @return the number of elements transferred\n @throws UnsupportedOperationException if addition of elements\n         is not supported by the specified collection\n @throws ClassCastException if the class of an element of this queue\n         prevents it from being added to the specified collection\n @throws NullPointerException if the specified collection is null\n @throws IllegalArgumentException if the specified collection is this\n         queue, or some property of an element of this queue prevents\n         it from being added to the specified collection\n"
18349,interface,java/util/concurrent/BlockingDeque," A {@link Deque} that additionally supports blocking operations that wait\n for the deque to become non-empty when retrieving an element, and wait for\n space to become available in the deque when storing an element.\n\n <p><tt>BlockingDeque</tt> methods come in four forms, with different ways\n of handling operations that cannot be satisfied immediately, but may be\n satisfied at some point in the future:\n one throws an exception, the second returns a special value (either\n <tt>null</tt> or <tt>false</tt>, depending on the operation), the third\n blocks the current thread indefinitely until the operation can succeed,\n and the fourth blocks for only a given maximum time limit before giving\n up.  These methods are summarized in the following table:\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 5> <b>First Element (Head)</b></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Blocks</em></td>\n    <td ALIGN=CENTER><em>Times out</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td>{@link #addFirst addFirst(e)}</td>\n    <td>{@link #offerFirst(Object) offerFirst(e)}</td>\n    <td>{@link #putFirst putFirst(e)}</td>\n    <td>{@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>{@link #removeFirst removeFirst()}</td>\n    <td>{@link #pollFirst pollFirst()}</td>\n    <td>{@link #takeFirst takeFirst()}</td>\n    <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>{@link #getFirst getFirst()}</td>\n    <td>{@link #peekFirst peekFirst()}</td>\n    <td><em>not applicable</em></td>\n    <td><em>not applicable</em></td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 5> <b>Last Element (Tail)</b></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Blocks</em></td>\n    <td ALIGN=CENTER><em>Times out</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td>{@link #addLast addLast(e)}</td>\n    <td>{@link #offerLast(Object) offerLast(e)}</td>\n    <td>{@link #putLast putLast(e)}</td>\n    <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>{@link #removeLast() removeLast()}</td>\n    <td>{@link #pollLast() pollLast()}</td>\n    <td>{@link #takeLast takeLast()}</td>\n    <td>{@link #pollLast(long, TimeUnit) pollLast(time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>{@link #getLast getLast()}</td>\n    <td>{@link #peekLast peekLast()}</td>\n    <td><em>not applicable</em></td>\n    <td><em>not applicable</em></td>\n  </tr>\n </table>\n\n <p>Like any {@link BlockingQueue}, a <tt>BlockingDeque</tt> is thread safe,\n does not permit null elements, and may (or may not) be\n capacity-constrained.\n\n <p>A <tt>BlockingDeque</tt> implementation may be used directly as a FIFO\n <tt>BlockingQueue</tt>. The methods inherited from the\n <tt>BlockingQueue</tt> interface are precisely equivalent to\n <tt>BlockingDeque</tt> methods as indicated in the following table:\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td ALIGN=CENTER> <b><tt>BlockingQueue</tt> Method</b></td>\n    <td ALIGN=CENTER> <b>Equivalent <tt>BlockingDeque</tt> Method</b></td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Insert</b></td>\n  </tr>\n  <tr>\n    <td>{@link #add(Object) add(e)}</td>\n    <td>{@link #addLast(Object) addLast(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link #offer(Object) offer(e)}</td>\n    <td>{@link #offerLast(Object) offerLast(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link #put(Object) put(e)}</td>\n    <td>{@link #putLast(Object) putLast(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>\n    <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Remove</b></td>\n  </tr>\n  <tr>\n    <td>{@link #remove() remove()}</td>\n    <td>{@link #removeFirst() removeFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #poll() poll()}</td>\n    <td>{@link #pollFirst() pollFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #take() take()}</td>\n    <td>{@link #takeFirst() takeFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>\n    <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Examine</b></td>\n  </tr>\n  <tr>\n    <td>{@link #element() element()}</td>\n    <td>{@link #getFirst() getFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #peek() peek()}</td>\n    <td>{@link #peekFirst() peekFirst()}</td>\n  </tr>\n </table>\n\n <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code BlockingDeque}\n <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code BlockingDeque} in another thread.\n\n <p>This interface is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @since 1.6\n @author Doug Lea\n @param <E> the type of elements held in this collection\n"
18352,method,java/util/concurrent/BlockingDeque/offerFirst/Object," Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning <tt>true</tt> upon success and <tt>false</tt> if no space is\n currently available.\n When using a capacity-restricted deque, this method is generally\n preferable to the {@link #addFirst(Object) addFirst} method, which can\n fail to insert an element only by throwing an exception.\n\n @param e the element to add\n @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18353,method,java/util/concurrent/BlockingDeque/offerLast/Object," Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning <tt>true</tt> upon success and <tt>false</tt> if no space is\n currently available.\n When using a capacity-restricted deque, this method is generally\n preferable to the {@link #addLast(Object) addLast} method, which can\n fail to insert an element only by throwing an exception.\n\n @param e the element to add\n @throws ClassCastException {@inheritDoc}\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException {@inheritDoc}\n"
18354,method,java/util/concurrent/BlockingDeque/putFirst/Object," Inserts the specified element at the front of this deque,\n waiting if necessary for space to become available.\n\n @param e the element to add\n @throws InterruptedException if interrupted while waiting\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
18355,method,java/util/concurrent/BlockingDeque/putLast/Object," Inserts the specified element at the end of this deque,\n waiting if necessary for space to become available.\n\n @param e the element to add\n @throws InterruptedException if interrupted while waiting\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
18356,method,java/util/concurrent/BlockingDeque/offerFirst/Object;long;TimeUnit," Inserts the specified element at the front of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.\n\n @param e the element to add\n @param timeout how long to wait before giving up, in units of\n        <tt>unit</tt>\n @param unit a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter\n @return <tt>true</tt> if successful, or <tt>false</tt> if\n         the specified waiting time elapses before space is available\n @throws InterruptedException if interrupted while waiting\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
18357,method,java/util/concurrent/BlockingDeque/offerLast/Object;long;TimeUnit," Inserts the specified element at the end of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.\n\n @param e the element to add\n @param timeout how long to wait before giving up, in units of\n        <tt>unit</tt>\n @param unit a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter\n @return <tt>true</tt> if successful, or <tt>false</tt> if\n         the specified waiting time elapses before space is available\n @throws InterruptedException if interrupted while waiting\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
18358,method,java/util/concurrent/BlockingDeque/takeFirst/," Retrieves and removes the first element of this deque, waiting\n if necessary until an element becomes available.\n\n @return the head of this deque\n @throws InterruptedException if interrupted while waiting\n"
18359,method,java/util/concurrent/BlockingDeque/takeLast/," Retrieves and removes the last element of this deque, waiting\n if necessary until an element becomes available.\n\n @return the tail of this deque\n @throws InterruptedException if interrupted while waiting\n"
18360,method,java/util/concurrent/BlockingDeque/pollFirst/long;TimeUnit," Retrieves and removes the first element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.\n\n @param timeout how long to wait before giving up, in units of\n        <tt>unit</tt>\n @param unit a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter\n @return the head of this deque, or <tt>null</tt> if the specified\n         waiting time elapses before an element is available\n @throws InterruptedException if interrupted while waiting\n"
18361,method,java/util/concurrent/BlockingDeque/pollLast/long;TimeUnit," Retrieves and removes the last element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.\n\n @param timeout how long to wait before giving up, in units of\n        <tt>unit</tt>\n @param unit a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter\n @return the tail of this deque, or <tt>null</tt> if the specified\n         waiting time elapses before an element is available\n @throws InterruptedException if interrupted while waiting\n"
18362,method,java/util/concurrent/BlockingDeque/removeFirstOccurrence/Object," Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if an element was removed as a result of this call\n @throws ClassCastException if the class of the specified element\n         is incompatible with this deque (optional)\n @throws NullPointerException if the specified element is null (optional)\n"
18363,method,java/util/concurrent/BlockingDeque/removeLastOccurrence/Object," Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if an element was removed as a result of this call\n @throws ClassCastException if the class of the specified element\n         is incompatible with this deque (optional)\n @throws NullPointerException if the specified element is null (optional)\n"
18364,method,java/util/concurrent/BlockingDeque/add/Object," Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an\n <tt>IllegalStateException</tt> if no space is currently available.\n When using a capacity-restricted deque, it is generally preferable to\n use {@link #offer(Object) offer}.\n\n <p>This method is equivalent to {@link #addLast(Object) addLast}.\n\n @param e the element to add\n @throws IllegalStateException {@inheritDoc}\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
18365,method,java/util/concurrent/BlockingDeque/offer/Object," Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and <tt>false</tt> if no space is currently\n available.  When using a capacity-restricted deque, this method is\n generally preferable to the {@link #add} method, which can fail to\n insert an element only by throwing an exception.\n\n <p>This method is equivalent to {@link #offerLast(Object) offerLast}.\n\n @param e the element to add\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
18366,method,java/util/concurrent/BlockingDeque/put/Object," Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting if necessary for\n space to become available.\n\n <p>This method is equivalent to {@link #putLast(Object) putLast}.\n\n @param e the element to add\n @throws InterruptedException {@inheritDoc}\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
18367,method,java/util/concurrent/BlockingDeque/offer/Object;long;TimeUnit," Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting up to the\n specified wait time if necessary for space to become available.\n\n <p>This method is equivalent to\n {@link #offerLast(Object,long,TimeUnit) offerLast}.\n\n @param e the element to add\n @return <tt>true</tt> if the element was added to this deque, else\n         <tt>false</tt>\n @throws InterruptedException {@inheritDoc}\n @throws ClassCastException if the class of the specified element\n         prevents it from being added to this deque\n @throws NullPointerException if the specified element is null\n @throws IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque\n"
18368,method,java/util/concurrent/BlockingDeque/remove/," Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).\n This method differs from {@link #poll poll} only in that it\n throws an exception if this deque is empty.\n\n <p>This method is equivalent to {@link #removeFirst() removeFirst}.\n\n @return the head of the queue represented by this deque\n @throws NoSuchElementException if this deque is empty\n"
18370,method,java/util/concurrent/BlockingDeque/take/," Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting if\n necessary until an element becomes available.\n\n <p>This method is equivalent to {@link #takeFirst() takeFirst}.\n\n @return the head of this deque\n @throws InterruptedException if interrupted while waiting\n"
18371,method,java/util/concurrent/BlockingDeque/poll/long;TimeUnit," Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting up to the\n specified wait time if necessary for an element to become available.\n\n <p>This method is equivalent to\n {@link #pollFirst(long,TimeUnit) pollFirst}.\n\n @return the head of this deque, or <tt>null</tt> if the\n         specified waiting time elapses before an element is available\n @throws InterruptedException if interrupted while waiting\n"
18372,method,java/util/concurrent/BlockingDeque/element/," Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from {@link #peek peek} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #getFirst() getFirst}.\n\n @return the head of this deque\n @throws NoSuchElementException if this deque is empty\n"
18374,method,java/util/concurrent/BlockingDeque/remove/Object," Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n <p>This method is equivalent to\n {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.\n\n @param o element to be removed from this deque, if present\n @return <tt>true</tt> if this deque changed as a result of the call\n @throws ClassCastException if the class of the specified element\n         is incompatible with this deque (optional)\n @throws NullPointerException if the specified element is null (optional)\n"
18375,method,java/util/concurrent/BlockingDeque/contains/Object," Returns <tt>true</tt> if this deque contains the specified element.\n More formally, returns <tt>true</tt> if and only if this deque contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n\n @param o object to be checked for containment in this deque\n @return <tt>true</tt> if this deque contains the specified element\n @throws ClassCastException if the class of the specified element\n         is incompatible with this deque (optional)\n @throws NullPointerException if the specified element is null (optional)\n"
18379,class,java/util/concurrent/ArrayBlockingQueue," A bounded {@linkplain BlockingQueue blocking queue} backed by an\n array.  This queue orders elements FIFO (first-in-first-out).  The\n <em>head</em> of the queue is that element that has been on the\n queue the longest time.  The <em>tail</em> of the queue is that\n element that has been on the queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n\n <p>This is a classic &quot;bounded buffer&quot;, in which a\n fixed-sized array holds elements inserted by producers and\n extracted by consumers.  Once created, the capacity cannot be\n increased.  Attempts to <tt>put</tt> an element into a full queue\n will result in the operation blocking; attempts to <tt>take</tt> an\n element from an empty queue will similarly block.\n\n <p> This class supports an optional fairness policy for ordering\n waiting producer and consumer threads.  By default, this ordering\n is not guaranteed. However, a queue constructed with fairness set\n to <tt>true</tt> grants threads access in FIFO order. Fairness\n generally decreases throughput but reduces variability and avoids\n starvation.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href="{@docRoot}/../technotes/guides/collections/index.html">\n Java Collections Framework</a>.\n\n @since 1.5\n @author Doug Lea\n @param <E> the type of elements held in this collection\n"
18381,method,java/util/concurrent/ArrayBlockingQueue/offer/Object," Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning <tt>true</tt> upon success and <tt>false</tt> if this queue\n is full.  This method is generally preferable to method {@link #add},\n which can fail to insert an element only by throwing an exception.\n\n @throws NullPointerException if the specified element is null\n"
18382,method,java/util/concurrent/ArrayBlockingQueue/put/Object," Inserts the specified element at the tail of this queue, waiting\n for space to become available if the queue is full.\n\n @throws InterruptedException {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
18383,method,java/util/concurrent/ArrayBlockingQueue/offer/Object;long;TimeUnit," Inserts the specified element at the tail of this queue, waiting\n up to the specified wait time for space to become available if\n the queue is full.\n\n @throws InterruptedException {@inheritDoc}\n @throws NullPointerException {@inheritDoc}\n"
18389,method,java/util/concurrent/ArrayBlockingQueue/remainingCapacity/," Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this queue\n less the current <tt>size</tt> of this queue.\n\n <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting <tt>remainingCapacity</tt>\n because it may be the case that another thread is about to\n insert or remove an element.\n"
18390,method,java/util/concurrent/ArrayBlockingQueue/remove/Object," Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element <tt>e</tt> such\n that <tt>o.equals(e)</tt>, if this queue contains one or more such\n elements.\n Returns <tt>true</tt> if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n\n @param o element to be removed from this queue, if present\n @return <tt>true</tt> if this queue changed as a result of the call\n"
18391,method,java/util/concurrent/ArrayBlockingQueue/contains/Object," Returns <tt>true</tt> if this queue contains the specified element.\n More formally, returns <tt>true</tt> if and only if this queue contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n\n @param o object to be checked for containment in this queue\n @return <tt>true</tt> if this queue contains the specified element\n"
18395,method,java/util/concurrent/ArrayBlockingQueue/clear/," Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.\n"
18396,method,java/util/concurrent/ArrayBlockingQueue/drainTo/Collection," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
18397,method,java/util/concurrent/ArrayBlockingQueue/drainTo/Collection;int," @throws UnsupportedOperationException {@inheritDoc}\n @throws ClassCastException            {@inheritDoc}\n @throws NullPointerException          {@inheritDoc}\n @throws IllegalArgumentException      {@inheritDoc}\n"
18400,method,java/util/concurrent/ArrayBlockingQueue/ArrayBlockingQueue/int;boolean," Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)\n capacity and the specified access policy.\n\n @param capacity the capacity of this queue\n @param fair if <tt>true</tt> then queue accesses for threads blocked\n        on insertion or removal, are processed in FIFO order;\n        if <tt>false</tt> the access order is unspecified.\n @throws IllegalArgumentException if <tt>capacity</tt> is less than 1\n"
18401,method,java/util/concurrent/ArrayBlockingQueue/ArrayBlockingQueue/int;boolean;Collection," Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)\n capacity, the specified access policy and initially containing the\n elements of the given collection,\n added in traversal order of the collection's iterator.\n\n @param capacity the capacity of this queue\n @param fair if <tt>true</tt> then queue accesses for threads blocked\n        on insertion or removal, are processed in FIFO order;\n        if <tt>false</tt> the access order is unspecified.\n @param c the collection of elements to initially contain\n @throws IllegalArgumentException if <tt>capacity</tt> is less than\n         <tt>c.size()</tt>, or less than 1.\n @throws NullPointerException if the specified collection or any\n         of its elements are null\n"
18402,class,java/util/concurrent/AbstractExecutorService," Provides default implementations of {@link ExecutorService}\n execution methods. This class implements the <tt>submit</tt>,\n <tt>invokeAny</tt> and <tt>invokeAll</tt> methods using a\n {@link RunnableFuture} returned by <tt>newTaskFor</tt>, which defaults\n to the {@link FutureTask} class provided in this package.  For example,\n the implementation of <tt>submit(Runnable)</tt> creates an\n associated <tt>RunnableFuture</tt> that is executed and\n returned. Subclasses may override the <tt>newTaskFor</tt> methods\n to return <tt>RunnableFuture</tt> implementations other than\n <tt>FutureTask</tt>.\n\n <p> <b>Extension example</b>. Here is a sketch of a class\n that customizes {@link ThreadPoolExecutor} to use\n a <tt>CustomTask</tt> class instead of the default <tt>FutureTask</tt>:\n <pre>\n public class CustomThreadPoolExecutor extends ThreadPoolExecutor {\n\n   static class CustomTask&lt;V&gt; implements RunnableFuture&lt;V&gt; {...}\n\n   protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Callable&lt;V&gt; c) {\n       return new CustomTask&lt;V&gt;(c);\n   }\n   protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Runnable r, V v) {\n       return new CustomTask&lt;V&gt;(r, v);\n   }\n   // ... add constructors, etc.\n }\n </pre>\n @since 1.5\n @author Doug Lea\n"
18404,method,java/util/concurrent/AbstractExecutorService/newTaskFor/Callable," Returns a <tt>RunnableFuture</tt> for the given callable task.\n\n @param callable the callable task being wrapped\n @return a <tt>RunnableFuture</tt> which when run will call the\n underlying callable and which, as a <tt>Future</tt>, will yield\n the callable's result as its result and provide for\n cancellation of the underlying task.\n @since 1.6\n"
18413,class,java/util/concurrent/atomic/AtomicStampedReference," An {@code AtomicStampedReference} maintains an object reference\n along with an integer "stamp", that can be updated atomically.\n\n <p> Implementation note. This implementation maintains stamped\n references by creating internal objects representing "boxed"\n [reference, integer] pairs.\n\n @since 1.5\n @author Doug Lea\n @param <V> The type of object referred to by this reference\n"
18417,method,java/util/concurrent/atomic/AtomicStampedReference/weakCompareAndSet/Object;Object;int;int," Atomically sets the value of both the reference and stamp\n to the given update values if the\n current reference is {@code ==} to the expected reference\n and the current stamp is equal to the expected stamp.\n\n <p>May <a href="package-summary.html#Spurious">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.\n\n @param expectedReference the expected value of the reference\n @param newReference the new value for the reference\n @param expectedStamp the expected value of the stamp\n @param newStamp the new value for the stamp\n @return true if successful\n"
18420,method,java/util/concurrent/atomic/AtomicStampedReference/attemptStamp/Object;int," Atomically sets the value of the stamp to the given update value\n if the current reference is {@code ==} to the expected\n reference.  Any given invocation of this operation may fail\n (return {@code false}) spuriously, but repeated invocation\n when the current value holds the expected value and no other\n thread is also attempting to set the value will eventually\n succeed.\n\n @param expectedReference the expected value of the reference\n @param newStamp the new value for the stamp\n @return true if successful\n"
18422,class,java/util/concurrent/atomic/AtomicReferenceFieldUpdater," A reflection-based utility that enables atomic updates to\n designated {@code volatile} reference fields of designated\n classes.  This class is designed for use in atomic data structures\n in which several reference fields of the same node are\n independently subject to atomic updates. For example, a tree node\n might be declared as\n\n <pre>\n class Node {\n   private volatile Node left, right;\n\n   private static final AtomicReferenceFieldUpdater&lt;Node, Node&gt; leftUpdater =\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "left");\n   private static AtomicReferenceFieldUpdater&lt;Node, Node&gt; rightUpdater =\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "right");\n\n   Node getLeft() { return left;  }\n   boolean compareAndSetLeft(Node expect, Node update) {\n     return leftUpdater.compareAndSet(this, expect, update);\n   }\n   // ... and so on\n }\n </pre>\n\n <p>Note that the guarantees of the {@code compareAndSet}\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n {@code compareAndSet} and {@code set} on the same updater.\n\n @since 1.5\n @author Doug Lea\n @param <T> The type of the object holding the updatable field\n @param <V> The type of the field\n"
18424,method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/compareAndSet/Object;Object;Object," Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.\n\n @param obj An object whose field to conditionally set\n @param expect the expected value\n @param update the new value\n @return true if successful.\n"
18426,method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/set/Object;Object," Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of {@code compareAndSet}.\n\n @param obj An object whose field to set\n @param newValue the new value\n"
18430,method,java/util/concurrent/atomic/AtomicReferenceFieldUpdater/AtomicReferenceFieldUpdater/," Protected do-nothing constructor for use by subclasses.\n"
18431,class,java/util/concurrent/atomic/AtomicReferenceArray," An array of object references in which elements may be updated\n atomically.  See the {@link java.util.concurrent.atomic} package\n specification for description of the properties of atomic\n variables.\n @since 1.5\n @author Doug Lea\n @param <E> The base class of elements held in this array\n"
18442,class,java/util/concurrent/atomic/AtomicReference," An object reference that may be updated atomically. See the {@link\n java.util.concurrent.atomic} package specification for description\n of the properties of atomic variables.\n @since 1.5\n @author Doug Lea\n @param <V> The type of object referred to by this reference\n"
18447,method,java/util/concurrent/atomic/AtomicReference/weakCompareAndSet/Object;Object," Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.\n\n <p>May <a href="package-summary.html#Spurious">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.\n\n @param expect the expected value\n @param update the new value\n @return true if successful.\n"
18452,class,java/util/concurrent/atomic/AtomicMarkableReference," An {@code AtomicMarkableReference} maintains an object reference\n along with a mark bit, that can be updated atomically.\n <p>\n <p> Implementation note. This implementation maintains markable\n references by creating internal objects representing "boxed"\n [reference, boolean] pairs.\n\n @since 1.5\n @author Doug Lea\n @param <V> The type of object referred to by this reference\n"
18459,method,java/util/concurrent/atomic/AtomicMarkableReference/attemptMark/Object;boolean," Atomically sets the value of the mark to the given update value\n if the current reference is {@code ==} to the expected\n reference.  Any given invocation of this operation may fail\n (return {@code false}) spuriously, but repeated invocation\n when the current value holds the expected value and no other\n thread is also attempting to set the value will eventually\n succeed.\n\n @param expectedReference the expected value of the reference\n @param newMark the new value for the mark\n @return true if successful\n"
18461,class,java/util/concurrent/atomic/AtomicLongFieldUpdater," A reflection-based utility that enables atomic updates to\n designated {@code volatile long} fields of designated classes.\n This class is designed for use in atomic data structures in which\n several fields of the same node are independently subject to atomic\n updates.\n\n <p>Note that the guarantees of the {@code compareAndSet}\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n {@code compareAndSet} and {@code set} on the same updater.\n\n @since 1.5\n @author Doug Lea\n @param <T> The type of the object holding the updatable field\n"
18463,method,java/util/concurrent/atomic/AtomicLongFieldUpdater/compareAndSet/Object;long;long," Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.\n\n @param obj An object whose field to conditionally set\n @param expect the expected value\n @param update the new value\n @return true if successful.\n @throws ClassCastException if {@code obj} is not an instance\n of the class possessing the field established in the constructor.\n"
18465,method,java/util/concurrent/atomic/AtomicLongFieldUpdater/set/Object;long," Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of {@code compareAndSet}.\n\n @param obj An object whose field to set\n @param newValue the new value\n"
18475,method,java/util/concurrent/atomic/AtomicLongFieldUpdater/AtomicLongFieldUpdater/," Protected do-nothing constructor for use by subclasses.\n"
18476,class,java/util/concurrent/atomic/AtomicLongArray," A {@code long} array in which elements may be updated atomically.\n See the {@link java.util.concurrent.atomic} package specification\n for description of the properties of atomic variables.\n @since 1.5\n @author Doug Lea\n"
18493,class,java/util/concurrent/atomic/AtomicLong," A {@code long} value that may be updated atomically.  See the\n {@link java.util.concurrent.atomic} package specification for\n description of the properties of atomic variables. An\n {@code AtomicLong} is used in applications such as atomically\n incremented sequence numbers, and cannot be used as a replacement\n for a {@link java.lang.Long}. However, this class does extend\n {@code Number} to allow uniform access by tools and utilities that\n deal with numerically-based classes.\n\n @since 1.5\n @author Doug Lea\n"
18513,class,java/util/concurrent/atomic/AtomicIntegerFieldUpdater," A reflection-based utility that enables atomic updates to\n designated {@code volatile int} fields of designated classes.\n This class is designed for use in atomic data structures in which\n several fields of the same node are independently subject to atomic\n updates.\n\n <p>Note that the guarantees of the {@code compareAndSet}\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n {@code compareAndSet} and {@code set} on the same updater.\n\n @since 1.5\n @author Doug Lea\n @param <T> The type of the object holding the updatable field\n"
18515,method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/compareAndSet/Object;int;int," Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.\n\n @param obj An object whose field to conditionally set\n @param expect the expected value\n @param update the new value\n @return true if successful\n @throws ClassCastException if {@code obj} is not an instance\n of the class possessing the field established in the constructor\n"
18516,method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/weakCompareAndSet/Object;int;int," Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.\n\n <p>May <a href="package-summary.html#Spurious">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.\n\n @param obj An object whose field to conditionally set\n @param expect the expected value\n @param update the new value\n @return true if successful\n @throws ClassCastException if {@code obj} is not an instance\n of the class possessing the field established in the constructor\n"
18517,method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/set/Object;int," Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of {@code compareAndSet}.\n\n @param obj An object whose field to set\n @param newValue the new value\n"
18527,method,java/util/concurrent/atomic/AtomicIntegerFieldUpdater/AtomicIntegerFieldUpdater/," Protected do-nothing constructor for use by subclasses.\n"
18528,class,java/util/concurrent/atomic/AtomicIntegerArray," An {@code int} array in which elements may be updated atomically.\n See the {@link java.util.concurrent.atomic} package\n specification for description of the properties of atomic\n variables.\n @since 1.5\n @author Doug Lea\n"
18535,method,java/util/concurrent/atomic/AtomicIntegerArray/weakCompareAndSet/int;int;int," Atomically sets the element at position {@code i} to the given\n updated value if the current value {@code ==} the expected value.\n\n <p>May <a href="package-summary.html#Spurious">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.\n\n @param i the index\n @param expect the expected value\n @param update the new value\n @return true if successful.\n"
18545,class,java/util/concurrent/atomic/AtomicInteger," An {@code int} value that may be updated atomically.  See the\n {@link java.util.concurrent.atomic} package specification for\n description of the properties of atomic variables. An\n {@code AtomicInteger} is used in applications such as atomically\n incremented counters, and cannot be used as a replacement for an\n {@link java.lang.Integer}. However, this class does extend\n {@code Number} to allow uniform access by tools and utilities that\n deal with numerically-based classes.\n\n @since 1.5\n @author Doug Lea\n"
18565,class,java/util/concurrent/atomic/AtomicBoolean," A {@code boolean} value that may be updated atomically. See the\n {@link java.util.concurrent.atomic} package specification for\n description of the properties of atomic variables. An\n {@code AtomicBoolean} is used in applications such as atomically\n updated flags, and cannot be used as a replacement for a\n {@link java.lang.Boolean}.\n\n @since 1.5\n @author Doug Lea\n"
18568,method,java/util/concurrent/atomic/AtomicBoolean/weakCompareAndSet/boolean;boolean," Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.\n\n <p>May <a href="package-summary.html#Spurious">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.\n\n @param expect the expected value\n @param update the new value\n @return true if successful.\n"
18575,class,java/util/concurrent/locks/ReentrantReadWriteLock," An implementation of {@link ReadWriteLock} supporting similar\n semantics to {@link ReentrantLock}.\n <p>This class has the following properties:\n\n <ul>\n <li><b>Acquisition order</b>\n\n <p> This class does not impose a reader or writer preference\n ordering for lock access.  However, it does support an optional\n <em>fairness</em> policy.\n\n <dl>\n <dt><b><i>Non-fair mode (default)</i></b>\n <dd>When constructed as non-fair (the default), the order of entry\n to the read and write lock is unspecified, subject to reentrancy\n constraints.  A nonfair lock that is continously contended may\n indefinitely postpone one or more reader or writer threads, but\n will normally have higher throughput than a fair lock.\n <p>\n\n <dt><b><i>Fair mode</i></b>\n <dd> When constructed as fair, threads contend for entry using an\n approximately arrival-order policy. When the currently held lock\n is released either the longest-waiting single writer thread will\n be assigned the write lock, or if there is a group of reader threads\n waiting longer than all waiting writer threads, that group will be\n assigned the read lock.\n\n <p>A thread that tries to acquire a fair read lock (non-reentrantly)\n will block if either the write lock is held, or there is a waiting\n writer thread. The thread will not acquire the read lock until\n after the oldest currently waiting writer thread has acquired and\n released the write lock. Of course, if a waiting writer abandons\n its wait, leaving one or more reader threads as the longest waiters\n in the queue with the write lock free, then those readers will be\n assigned the read lock.\n\n <p>A thread that tries to acquire a fair write lock (non-reentrantly)\n will block unless both the read lock and write lock are free (which\n implies there are no waiting threads).  (Note that the non-blocking\n {@link ReadLock#tryLock()} and {@link WriteLock#tryLock()} methods\n do not honor this fair setting and will acquire the lock if it is\n possible, regardless of waiting threads.)\n <p>\n </dl>\n\n <li><b>Reentrancy</b>\n\n <p>This lock allows both readers and writers to reacquire read or\n write locks in the style of a {@link ReentrantLock}. Non-reentrant\n readers are not allowed until all write locks held by the writing\n thread have been released.\n\n <p>Additionally, a writer can acquire the read lock, but not\n vice-versa.  Among other applications, reentrancy can be useful\n when write locks are held during calls or callbacks to methods that\n perform reads under read locks.  If a reader tries to acquire the\n write lock it will never succeed.\n\n <li><b>Lock downgrading</b>\n <p>Reentrancy also allows downgrading from the write lock to a read lock,\n by acquiring the write lock, then the read lock and then releasing the\n write lock. However, upgrading from a read lock to the write lock is\n <b>not</b> possible.\n\n <li><b>Interruption of lock acquisition</b>\n <p>The read lock and write lock both support interruption during lock\n acquisition.\n\n <li><b>{@link Condition} support</b>\n <p>The write lock provides a {@link Condition} implementation that\n behaves in the same way, with respect to the write lock, as the\n {@link Condition} implementation provided by\n {@link ReentrantLock#newCondition} does for {@link ReentrantLock}.\n This {@link Condition} can, of course, only be used with the write lock.\n\n <p>The read lock does not support a {@link Condition} and\n {@code readLock().newCondition()} throws\n {@code UnsupportedOperationException}.\n\n <li><b>Instrumentation</b>\n <p>This class supports methods to determine whether locks\n are held or contended. These methods are designed for monitoring\n system state, not for synchronization control.\n </ul>\n\n <p>Serialization of this class behaves in the same way as built-in\n locks: a deserialized lock is in the unlocked state, regardless of\n its state when serialized.\n\n <p><b>Sample usages</b>. Here is a code sketch showing how to exploit\n reentrancy to perform lock downgrading after updating a cache (exception\n handling is elided for simplicity):\n <pre>\n class CachedData {\n   Object data;\n   volatile boolean cacheValid;\n   ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n\n   void processCachedData() {\n     rwl.readLock().lock();\n     if (!cacheValid) {\n        // Must release read lock before acquiring write lock\n        rwl.readLock().unlock();\n        rwl.writeLock().lock();\n        // Recheck state because another thread might have acquired\n        //   write lock and changed state before we did.\n        if (!cacheValid) {\n          data = ...\n          cacheValid = true;\n        }\n        // Downgrade by acquiring read lock before releasing write lock\n        rwl.readLock().lock();\n        rwl.writeLock().unlock(); // Unlock write, still hold read\n     }\n\n     use(data);\n     rwl.readLock().unlock();\n   }\n }\n </pre>\n\n ReentrantReadWriteLocks can be used to improve concurrency in some\n uses of some kinds of Collections. This is typically worthwhile\n only when the collections are expected to be large, accessed by\n more reader threads than writer threads, and entail operations with\n overhead that outweighs synchronization overhead. For example, here\n is a class using a TreeMap that is expected to be large and\n concurrently accessed.\n\n <pre>{@code\n class RWDictionary {\n    private final Map<String, Data> m = new TreeMap<String, Data>();\n    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n    private final Lock r = rwl.readLock();\n    private final Lock w = rwl.writeLock();\n\n    public Data get(String key) {\n        r.lock();\n        try { return m.get(key); }\n        finally { r.unlock(); }\n    }\n    public String[] allKeys() {\n        r.lock();\n        try { return m.keySet().toArray(); }\n        finally { r.unlock(); }\n    }\n    public Data put(String key, Data value) {\n        w.lock();\n        try { return m.put(key, value); }\n        finally { w.unlock(); }\n    }\n    public void clear() {\n        w.lock();\n        try { m.clear(); }\n        finally { w.unlock(); }\n    }\n }}</pre>\n\n <h3>Implementation Notes</h3>\n\n <p>This lock supports a maximum of 65535 recursive write locks\n and 65535 read locks. Attempts to exceed these limits result in\n {@link Error} throws from locking methods.\n\n @since 1.5\n @author Doug Lea\n\n"
18578,method,java/util/concurrent/locks/ReentrantReadWriteLock/isFair/," Returns {@code true} if this lock has fairness set true.\n\n @return {@code true} if this lock has fairness set true\n"
18579,method,java/util/concurrent/locks/ReentrantReadWriteLock/getOwner/," Returns the thread that currently owns the write lock, or\n {@code null} if not owned. When this method is called by a\n thread that is not the owner, the return value reflects a\n best-effort approximation of current lock status. For example,\n the owner may be momentarily {@code null} even if there are\n threads trying to acquire the lock but have not yet done so.\n This method is designed to facilitate construction of\n subclasses that provide more extensive lock monitoring\n facilities.\n\n @return the owner, or {@code null} if not owned\n"
18580,method,java/util/concurrent/locks/ReentrantReadWriteLock/getReadLockCount/," Queries the number of read locks held for this lock. This\n method is designed for use in monitoring system state, not for\n synchronization control.\n @return the number of read locks held.\n"
18581,method,java/util/concurrent/locks/ReentrantReadWriteLock/isWriteLocked/," Queries if the write lock is held by any thread. This method is\n designed for use in monitoring system state, not for\n synchronization control.\n\n @return {@code true} if any thread holds the write lock and\n         {@code false} otherwise\n"
18582,method,java/util/concurrent/locks/ReentrantReadWriteLock/isWriteLockedByCurrentThread/," Queries if the write lock is held by the current thread.\n\n @return {@code true} if the current thread holds the write lock and\n         {@code false} otherwise\n"
18583,method,java/util/concurrent/locks/ReentrantReadWriteLock/getWriteHoldCount/," Queries the number of reentrant write holds on this lock by the\n current thread.  A writer thread has a hold on a lock for\n each lock action that is not matched by an unlock action.\n\n @return the number of holds on the write lock by the current thread,\n         or zero if the write lock is not held by the current thread\n"
18584,method,java/util/concurrent/locks/ReentrantReadWriteLock/getReadHoldCount/," Queries the number of reentrant read holds on this lock by the\n current thread.  A reader thread has a hold on a lock for\n each lock action that is not matched by an unlock action.\n\n @return the number of holds on the read lock by the current thread,\n         or zero if the read lock is not held by the current thread\n @since 1.6\n"
18585,method,java/util/concurrent/locks/ReentrantReadWriteLock/getQueuedWriterThreads/," Returns a collection containing threads that may be waiting to\n acquire the write lock.  Because the actual set of threads may\n change dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive lock monitoring facilities.\n\n @return the collection of threads\n"
18586,method,java/util/concurrent/locks/ReentrantReadWriteLock/getQueuedReaderThreads/," Returns a collection containing threads that may be waiting to\n acquire the read lock.  Because the actual set of threads may\n change dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive lock monitoring facilities.\n\n @return the collection of threads\n"
18587,method,java/util/concurrent/locks/ReentrantReadWriteLock/hasQueuedThreads/," Queries whether any threads are waiting to acquire the read or\n write lock. Note that because cancellations may occur at any\n time, a {@code true} return does not guarantee that any other\n thread will ever acquire a lock.  This method is designed\n primarily for use in monitoring of the system state.\n\n @return {@code true} if there may be other threads waiting to\n         acquire the lock\n"
18588,method,java/util/concurrent/locks/ReentrantReadWriteLock/hasQueuedThread/Thread," Queries whether the given thread is waiting to acquire either\n the read or write lock. Note that because cancellations may\n occur at any time, a {@code true} return does not guarantee\n that this thread will ever acquire a lock.  This method is\n designed primarily for use in monitoring of the system state.\n\n @param thread the thread\n @return {@code true} if the given thread is queued waiting for this lock\n @throws NullPointerException if the thread is null\n"
18589,method,java/util/concurrent/locks/ReentrantReadWriteLock/getQueueLength/," Returns an estimate of the number of threads waiting to acquire\n either the read or write lock.  The value is only an estimate\n because the number of threads may change dynamically while this\n method traverses internal data structures.  This method is\n designed for use in monitoring of the system state, not for\n synchronization control.\n\n @return the estimated number of threads waiting for this lock\n"
18590,method,java/util/concurrent/locks/ReentrantReadWriteLock/getQueuedThreads/," Returns a collection containing threads that may be waiting to\n acquire either the read or write lock.  Because the actual set\n of threads may change dynamically while constructing this\n result, the returned collection is only a best-effort estimate.\n The elements of the returned collection are in no particular\n order.  This method is designed to facilitate construction of\n subclasses that provide more extensive monitoring facilities.\n\n @return the collection of threads\n"
18591,method,java/util/concurrent/locks/ReentrantReadWriteLock/hasWaiters/Condition," Queries whether any threads are waiting on the given condition\n associated with the write lock. Note that because timeouts and\n interrupts may occur at any time, a {@code true} return does\n not guarantee that a future {@code signal} will awaken any\n threads.  This method is designed primarily for use in\n monitoring of the system state.\n\n @param condition the condition\n @return {@code true} if there are any waiting threads\n @throws IllegalMonitorStateException if this lock is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this lock\n @throws NullPointerException if the condition is null\n"
18593,method,java/util/concurrent/locks/ReentrantReadWriteLock/getWaitingThreads/Condition," Returns a collection containing those threads that may be\n waiting on the given condition associated with the write lock.\n Because the actual set of threads may change dynamically while\n constructing this result, the returned collection is only a\n best-effort estimate. The elements of the returned collection\n are in no particular order.  This method is designed to\n facilitate construction of subclasses that provide more\n extensive condition monitoring facilities.\n\n @param condition the condition\n @return the collection of threads\n @throws IllegalMonitorStateException if this lock is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this lock\n @throws NullPointerException if the condition is null\n"
18594,method,java/util/concurrent/locks/ReentrantReadWriteLock/toString/," Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes the String {@code "Write locks ="}\n followed by the number of reentrantly held write locks, and the\n String {@code "Read locks ="} followed by the number of held\n read locks.\n\n @return a string identifying this lock, as well as its lock state\n"
18596,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReentrantReadWriteLock/boolean," Creates a new {@code ReentrantReadWriteLock} with\n the given fairness policy.\n\n @param fair {@code true} if this lock should use a fair ordering policy\n"
18597,class,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock," The lock returned by method {@link ReentrantReadWriteLock#readLock}.\n"
18598,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/lock/," Acquires the read lock.\n\n <p>Acquires the read lock if the write lock is not held by\n another thread and returns immediately.\n\n <p>If the write lock is held by another thread then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until the read lock has been acquired.\n"
18599,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/lockInterruptibly/," Acquires the read lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the read lock if the write lock is not held\n by another thread and returns immediately.\n\n <p>If the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:\n\n <ul>\n\n <li>The read lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n\n </ul>\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method; or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the read lock,\n\n </ul>\n\n then {@link InterruptedException} is thrown and the current\n thread's interrupted status is cleared.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock.\n\n @throws InterruptedException if the current thread is interrupted\n"
18600,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/tryLock/," Acquires the read lock only if the write lock is not held by\n another thread at the time of invocation.\n\n <p>Acquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n {@code true}. Even when this lock has been set to use a\n fair ordering policy, a call to {@code tryLock()}\n <em>will</em> immediately acquire the read lock if it is\n available, whether or not other threads are currently\n waiting for the read lock.  This &quot;barging&quot; behavior\n can be useful in certain circumstances, even though it\n breaks fairness. If you want to honor the fairness setting\n for this lock, then use {@link #tryLock(long, TimeUnit)\n tryLock(0, TimeUnit.SECONDS) } which is almost equivalent\n (it also detects interruption).\n\n <p>If the write lock is held by another thread then\n this method will return immediately with the value\n {@code false}.\n\n @return {@code true} if the read lock was acquired\n"
18601,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/tryLock/long;TimeUnit," Acquires the read lock if the write lock is not held by\n another thread within the given waiting time and the\n current thread has not been {@linkplain Thread#interrupt\n interrupted}.\n\n <p>Acquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n {@code true}. If this lock has been set to use a fair\n ordering policy then an available lock <em>will not</em> be\n acquired if any other threads are waiting for the\n lock. This is in contrast to the {@link #tryLock()}\n method. If you want a timed {@code tryLock} that does\n permit barging on a fair lock then combine the timed and\n un-timed forms together:\n\n <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... }\n </pre>\n\n <p>If the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n <ul>\n\n <li>The read lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified waiting time elapses.\n\n </ul>\n\n <p>If the read lock is acquired then the value {@code true} is\n returned.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method; or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the read lock,\n\n </ul> then {@link InterruptedException} is thrown and the\n current thread's interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value\n {@code false} is returned.  If the time is less than or\n equal to zero, the method will not wait at all.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time.\n\n @param timeout the time to wait for the read lock\n @param unit the time unit of the timeout argument\n @return {@code true} if the read lock was acquired\n @throws InterruptedException if the current thread is interrupted\n @throws NullPointerException if the time unit is null\n\n"
18602,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/unlock/," Attempts to release this lock.\n\n <p> If the number of readers is now zero then the lock\n is made available for write lock attempts.\n"
18603,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/newCondition/," Throws {@code UnsupportedOperationException} because\n {@code ReadLocks} do not support conditions.\n\n @throws UnsupportedOperationException always\n"
18604,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/toString/," Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes the String {@code "Read locks ="}\n followed by the number of held read locks.\n\n @return a string identifying this lock, as well as its lock state\n"
18605,method,java/util/concurrent/locks/ReentrantReadWriteLock/ReadLock/ReentrantReadWriteLock/ReadLock/ReentrantReadWriteLock," Constructor for use by subclasses\n\n @param lock the outer lock object\n @throws NullPointerException if the lock is null\n"
18606,class,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock," The lock returned by method {@link ReentrantReadWriteLock#writeLock}.\n"
18607,method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/lock/," Acquires the write lock.\n\n <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately, setting the write lock hold count to\n one.\n\n <p>If the current thread already holds the write lock then the\n hold count is incremented by one and the method returns\n immediately.\n\n <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until the write lock has been acquired, at which\n time the write lock hold count is set to one.\n"
18608,method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/lockInterruptibly/," Acquires the write lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately, setting the write lock hold count to\n one.\n\n <p>If the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n immediately.\n\n <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until one of two things happens:\n\n <ul>\n\n <li>The write lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n\n </ul>\n\n <p>If the write lock is acquired by the current thread then the\n lock hold count is set to one.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method;\n or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the write lock,\n\n </ul>\n\n then {@link InterruptedException} is thrown and the current\n thread's interrupted status is cleared.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock.\n\n @throws InterruptedException if the current thread is interrupted\n"
18609,method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/tryLock/," Acquires the write lock only if it is not held by another thread\n at the time of invocation.\n\n <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately with the value {@code true},\n setting the write lock hold count to one. Even when this lock has\n been set to use a fair ordering policy, a call to\n {@code tryLock()} <em>will</em> immediately acquire the\n lock if it is available, whether or not other threads are\n currently waiting for the write lock.  This &quot;barging&quot;\n behavior can be useful in certain circumstances, even\n though it breaks fairness. If you want to honor the\n fairness setting for this lock, then use {@link\n #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).\n\n <p> If the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n {@code true}.\n\n <p>If the lock is held by another thread then this method\n will return immediately with the value {@code false}.\n\n @return {@code true} if the lock was free and was acquired\n by the current thread, or the write lock was already held\n by the current thread; and {@code false} otherwise.\n"
18610,method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/tryLock/long;TimeUnit," Acquires the write lock if it is not held by another thread\n within the given waiting time and the current thread has\n not been {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately with the value {@code true},\n setting the write lock hold count to one. If this lock has been\n set to use a fair ordering policy then an available lock\n <em>will not</em> be acquired if any other threads are\n waiting for the write lock. This is in contrast to the {@link\n #tryLock()} method. If you want a timed {@code tryLock}\n that does permit barging on a fair lock then combine the\n timed and un-timed forms together:\n\n <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... }\n </pre>\n\n <p>If the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n {@code true}.\n\n <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until one of three things happens:\n\n <ul>\n\n <li>The write lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified waiting time elapses\n\n </ul>\n\n <p>If the write lock is acquired then the value {@code true} is\n returned and the write lock hold count is set to one.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method;\n or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the write lock,\n\n </ul>\n\n then {@link InterruptedException} is thrown and the current\n thread's interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value\n {@code false} is returned.  If the time is less than or\n equal to zero, the method will not wait at all.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time.\n\n @param timeout the time to wait for the write lock\n @param unit the time unit of the timeout argument\n\n @return {@code true} if the lock was free and was acquired\n by the current thread, or the write lock was already held by the\n current thread; and {@code false} if the waiting time\n elapsed before the lock could be acquired.\n\n @throws InterruptedException if the current thread is interrupted\n @throws NullPointerException if the time unit is null\n\n"
18613,method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/toString/," Returns a string identifying this lock, as well as its lock\n state.  The state, in brackets includes either the String\n {@code "Unlocked"} or the String {@code "Locked by"}\n followed by the {@linkplain Thread#getName name} of the owning thread.\n\n @return a string identifying this lock, as well as its lock state\n"
18614,method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/isHeldByCurrentThread/," Queries if this write lock is held by the current thread.\n Identical in effect to {@link\n ReentrantReadWriteLock#isWriteLockedByCurrentThread}.\n\n @return {@code true} if the current thread holds this lock and\n	   {@code false} otherwise\n @since 1.6\n"
18615,method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/getHoldCount/," Queries the number of holds on this write lock by the current\n thread.  A thread has a hold on a lock for each lock action\n that is not matched by an unlock action.  Identical in effect\n to {@link ReentrantReadWriteLock#getWriteHoldCount}.\n\n @return the number of holds on this lock by the current thread,\n	   or zero if this lock is not held by the current thread\n @since 1.6\n"
18616,method,java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/ReentrantReadWriteLock/WriteLock/ReentrantReadWriteLock," Constructor for use by subclasses\n\n @param lock the outer lock object\n @throws NullPointerException if the lock is null\n"
18618,method,java/util/concurrent/locks/ReentrantLock/lock/," Acquires the lock.\n\n <p>Acquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n <p>If the current thread already holds the lock then the hold\n count is incremented by one and the method returns immediately.\n\n <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until the lock has been acquired,\n at which time the lock hold count is set to one.\n"
18619,method,java/util/concurrent/locks/ReentrantLock/lockInterruptibly/," Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n <p>If the current thread already holds this lock then the hold count\n is incremented by one and the method returns immediately.\n\n <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:\n\n <ul>\n\n <li>The lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread.\n\n </ul>\n\n <p>If the lock is acquired by the current thread then the lock hold\n count is set to one.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method; or\n\n <li>is {@linkplain Thread#interrupt interrupted} while acquiring\n the lock,\n\n </ul>\n\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock.\n\n @throws InterruptedException if the current thread is interrupted\n"
18620,method,java/util/concurrent/locks/ReentrantLock/tryLock/," Acquires the lock only if it is not held by another thread at the time\n of invocation.\n\n <p>Acquires the lock if it is not held by another thread and\n returns immediately with the value {@code true}, setting the\n lock hold count to one. Even when this lock has been set to use a\n fair ordering policy, a call to {@code tryLock()} <em>will</em>\n immediately acquire the lock if it is available, whether or not\n other threads are currently waiting for the lock.\n This &quot;barging&quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to honor\n the fairness setting for this lock, then use\n {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).\n\n <p> If the current thread already holds this lock then the hold\n count is incremented by one and the method returns {@code true}.\n\n <p>If the lock is held by another thread then this method will return\n immediately with the value {@code false}.\n\n @return {@code true} if the lock was free and was acquired by the\n         current thread, or the lock was already held by the current\n         thread; and {@code false} otherwise\n"
18621,method,java/util/concurrent/locks/ReentrantLock/tryLock/long;TimeUnit," Acquires the lock if it is not held by another thread within the given\n waiting time and the current thread has not been\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the lock if it is not held by another thread and returns\n immediately with the value {@code true}, setting the lock hold count\n to one. If this lock has been set to use a fair ordering policy then\n an available lock <em>will not</em> be acquired if any other threads\n are waiting for the lock. This is in contrast to the {@link #tryLock()}\n method. If you want a timed {@code tryLock} that does permit barging on\n a fair lock then combine the timed and un-timed forms together:\n\n <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... }\n </pre>\n\n <p>If the current thread\n already holds this lock then the hold count is incremented by one and\n the method returns {@code true}.\n\n <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n <ul>\n\n <li>The lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified waiting time elapses\n\n </ul>\n\n <p>If the lock is acquired then the value {@code true} is returned and\n the lock hold count is set to one.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method; or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the lock,\n\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock, and\n over reporting the elapse of the waiting time.\n\n @param timeout the time to wait for the lock\n @param unit the time unit of the timeout argument\n @return {@code true} if the lock was free and was acquired by the\n         current thread, or the lock was already held by the current\n         thread; and {@code false} if the waiting time elapsed before\n         the lock could be acquired\n @throws InterruptedException if the current thread is interrupted\n @throws NullPointerException if the time unit is null\n\n"
18622,method,java/util/concurrent/locks/ReentrantLock/unlock/," Attempts to release this lock.\n\n <p>If the current thread is the holder of this lock then the hold\n count is decremented.  If the hold count is now zero then the lock\n is released.  If the current thread is not the holder of this\n lock then {@link IllegalMonitorStateException} is thrown.\n\n @throws IllegalMonitorStateException if the current thread does not\n         hold this lock\n"
18623,method,java/util/concurrent/locks/ReentrantLock/newCondition/," Returns a {@link Condition} instance for use with this\n {@link Lock} instance.\n\n <p>The returned {@link Condition} instance supports the same\n usages as do the {@link Object} monitor methods ({@link\n Object#wait() wait}, {@link Object#notify notify}, and {@link\n Object#notifyAll notifyAll}) when used with the built-in\n monitor lock.\n\n <ul>\n\n <li>If this lock is not held when any of the {@link Condition}\n {@linkplain Condition#await() waiting} or {@linkplain\n Condition#signal signalling} methods are called, then an {@link\n IllegalMonitorStateException} is thrown.\n\n <li>When the condition {@linkplain Condition#await() waiting}\n methods are called the lock is released and, before they\n return, the lock is reacquired and the lock hold count restored\n to what it was when the method was called.\n\n <li>If a thread is {@linkplain Thread#interrupt interrupted}\n while waiting then the wait will terminate, an {@link\n InterruptedException} will be thrown, and the thread's\n interrupted status will be cleared.\n\n <li> Waiting threads are signalled in FIFO order.\n\n <li>The ordering of lock reacquisition for threads returning\n from waiting methods is the same as for threads initially\n acquiring the lock, which is in the default case not specified,\n but for <em>fair</em> locks favors those threads that have been\n waiting the longest.\n\n </ul>\n\n @return the Condition object\n"
18624,method,java/util/concurrent/locks/ReentrantLock/getHoldCount/," Queries the number of holds on this lock by the current thread.\n\n <p>A thread has a hold on a lock for each lock action that is not\n matched by an unlock action.\n\n <p>The hold count information is typically only used for testing and\n debugging purposes. For example, if a certain section of code should\n not be entered with the lock already held then we can assert that\n fact:\n\n <pre>\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...\n   public void m() {\n     assert lock.getHoldCount() == 0;\n     lock.lock();\n     try {\n       // ... method body\n     } finally {\n       lock.unlock();\n     }\n   }\n }\n </pre>\n\n @return the number of holds on this lock by the current thread,\n         or zero if this lock is not held by the current thread\n"
18625,method,java/util/concurrent/locks/ReentrantLock/isHeldByCurrentThread/," Queries if this lock is held by the current thread.\n\n <p>Analogous to the {@link Thread#holdsLock} method for built-in\n monitor locks, this method is typically used for debugging and\n testing. For example, a method that should only be called while\n a lock is held can assert that this is the case:\n\n <pre>\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...\n\n   public void m() {\n       assert lock.isHeldByCurrentThread();\n       // ... method body\n   }\n }\n </pre>\n\n <p>It can also be used to ensure that a reentrant lock is used\n in a non-reentrant manner, for example:\n\n <pre>\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...\n\n   public void m() {\n       assert !lock.isHeldByCurrentThread();\n       lock.lock();\n       try {\n           // ... method body\n       } finally {\n           lock.unlock();\n       }\n   }\n }\n </pre>\n\n @return {@code true} if current thread holds this lock and\n         {@code false} otherwise\n"
18626,method,java/util/concurrent/locks/ReentrantLock/isLocked/," Queries if this lock is held by any thread. This method is\n designed for use in monitoring of the system state,\n not for synchronization control.\n\n @return {@code true} if any thread holds this lock and\n         {@code false} otherwise\n"
18627,method,java/util/concurrent/locks/ReentrantLock/isFair/," Returns {@code true} if this lock has fairness set true.\n\n @return {@code true} if this lock has fairness set true\n"
18628,method,java/util/concurrent/locks/ReentrantLock/getOwner/," Returns the thread that currently owns this lock, or\n {@code null} if not owned. When this method is called by a\n thread that is not the owner, the return value reflects a\n best-effort approximation of current lock status. For example,\n the owner may be momentarily {@code null} even if there are\n threads trying to acquire the lock but have not yet done so.\n This method is designed to facilitate construction of\n subclasses that provide more extensive lock monitoring\n facilities.\n\n @return the owner, or {@code null} if not owned\n"
18629,method,java/util/concurrent/locks/ReentrantLock/hasQueuedThreads/," Queries whether any threads are waiting to acquire this lock. Note that\n because cancellations may occur at any time, a {@code true}\n return does not guarantee that any other thread will ever\n acquire this lock.  This method is designed primarily for use in\n monitoring of the system state.\n\n @return {@code true} if there may be other threads waiting to\n         acquire the lock\n"
18630,method,java/util/concurrent/locks/ReentrantLock/hasQueuedThread/Thread," Queries whether the given thread is waiting to acquire this\n lock. Note that because cancellations may occur at any time, a\n {@code true} return does not guarantee that this thread\n will ever acquire this lock.  This method is designed primarily for use\n in monitoring of the system state.\n\n @param thread the thread\n @return {@code true} if the given thread is queued waiting for this lock\n @throws NullPointerException if the thread is null\n"
18631,method,java/util/concurrent/locks/ReentrantLock/getQueueLength/," Returns an estimate of the number of threads waiting to\n acquire this lock.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring of the system state, not for synchronization\n control.\n\n @return the estimated number of threads waiting for this lock\n"
18632,method,java/util/concurrent/locks/ReentrantLock/getQueuedThreads/," Returns a collection containing threads that may be waiting to\n acquire this lock.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.\n\n @return the collection of threads\n"
18633,method,java/util/concurrent/locks/ReentrantLock/hasWaiters/Condition," Queries whether any threads are waiting on the given condition\n associated with this lock. Note that because timeouts and\n interrupts may occur at any time, a {@code true} return does\n not guarantee that a future {@code signal} will awaken any\n threads.  This method is designed primarily for use in\n monitoring of the system state.\n\n @param condition the condition\n @return {@code true} if there are any waiting threads\n @throws IllegalMonitorStateException if this lock is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this lock\n @throws NullPointerException if the condition is null\n"
18634,method,java/util/concurrent/locks/ReentrantLock/getWaitQueueLength/Condition," Returns an estimate of the number of threads waiting on the\n given condition associated with this lock. Note that because\n timeouts and interrupts may occur at any time, the estimate\n serves only as an upper bound on the actual number of waiters.\n This method is designed for use in monitoring of the system\n state, not for synchronization control.\n\n @param condition the condition\n @return the estimated number of waiting threads\n @throws IllegalMonitorStateException if this lock is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this lock\n @throws NullPointerException if the condition is null\n"
18635,method,java/util/concurrent/locks/ReentrantLock/getWaitingThreads/Condition," Returns a collection containing those threads that may be\n waiting on the given condition associated with this lock.\n Because the actual set of threads may change dynamically while\n constructing this result, the returned collection is only a\n best-effort estimate. The elements of the returned collection\n are in no particular order.  This method is designed to\n facilitate construction of subclasses that provide more\n extensive condition monitoring facilities.\n\n @param condition the condition\n @return the collection of threads\n @throws IllegalMonitorStateException if this lock is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this lock\n @throws NullPointerException if the condition is null\n"
18636,method,java/util/concurrent/locks/ReentrantLock/toString/," Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes either the String {@code "Unlocked"}\n or the String {@code "Locked by"} followed by the\n {@linkplain Thread#getName name} of the owning thread.\n\n @return a string identifying this lock, as well as its lock state\n"
18638,method,java/util/concurrent/locks/ReentrantLock/ReentrantLock/boolean," Creates an instance of {@code ReentrantLock} with the\n given fairness policy.\n\n @param fair {@code true} if this lock should use a fair ordering policy\n"
18640,method,java/util/concurrent/locks/ReadWriteLock/readLock/," Returns the lock used for reading.\n\n @return the lock used for reading.\n"
18641,method,java/util/concurrent/locks/ReadWriteLock/writeLock/," Returns the lock used for writing.\n\n @return the lock used for writing.\n"
18643,method,java/util/concurrent/locks/LockSupport/unpark/Thread," Makes available the permit for the given thread, if it\n was not already available.  If the thread was blocked on\n {@code park} then it will unblock.  Otherwise, its next call\n to {@code park} is guaranteed not to block. This operation\n is not guaranteed to have any effect at all if the given\n thread has not been started.\n\n @param thread the thread to unpark, or {@code null}, in which case\n        this operation has no effect\n"
18647,method,java/util/concurrent/locks/LockSupport/getBlocker/Thread," Returns the blocker object supplied to the most recent\n invocation of a park method that has not yet unblocked, or null\n if not blocked.  The value returned is just a momentary\n snapshot -- the thread may have since unblocked or blocked on a\n different blocker object.\n\n @return the blocker\n @since 1.6\n"
18654,method,java/util/concurrent/locks/Lock/tryLock/," Acquires the lock only if it is free at the time of invocation.\n\n <p>Acquires the lock if it is available and returns immediately\n with the value {@code true}.\n If the lock is not available then this method will return\n immediately with the value {@code false}.\n\n <p>A typical usage idiom for this method would be:\n <pre>\n      Lock lock = ...;\n      if (lock.tryLock()) {\n          try {\n              // manipulate protected state\n          } finally {\n              lock.unlock();\n          }\n      } else {\n          // perform alternative actions\n      }\n </pre>\n This usage ensures that the lock is unlocked if it was acquired, and\n doesn't try to unlock if the lock was not acquired.\n\n @return {@code true} if the lock was acquired and\n         {@code false} otherwise\n"
18662,method,java/util/concurrent/locks/Condition/await/long;TimeUnit," Causes the current thread to wait until it is signalled or interrupted,\n or the specified waiting time elapses. This method is behaviorally\n equivalent to:<br>\n <pre>\n   awaitNanos(unit.toNanos(time)) &gt; 0\n </pre>\n @param time the maximum time to wait\n @param unit the time unit of the {@code time} argument\n @return {@code false} if the waiting time detectably elapsed\n         before return from the method, else {@code true}\n @throws InterruptedException if the current thread is interrupted\n         (and interruption of thread suspension is supported)\n"
18667,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getState/," Returns the current value of synchronization state.\n This operation has memory semantics of a <tt>volatile</tt> read.\n @return current state value\n"
18668,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/setState/int," Sets the value of synchronization state.\n This operation has memory semantics of a <tt>volatile</tt> write.\n @param newState the new state value\n"
18669,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/compareAndSetState/int;int," Atomically sets synchronization state to the given updated\n value if the current state value equals the expected value.\n This operation has memory semantics of a <tt>volatile</tt> read\n and write.\n\n @param expect the expected value\n @param update the new value\n @return true if successful. False return indicates that the actual\n         value was not equal to the expected value.\n"
18674,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/isHeldExclusively/," Returns {@code true} if synchronization is held exclusively with\n respect to the current (calling) thread.  This method is invoked\n upon each call to a non-waiting {@link ConditionObject} method.\n (Waiting methods instead invoke {@link #release}.)\n\n <p>The default implementation throws {@link\n UnsupportedOperationException}. This method is invoked\n internally only within {@link ConditionObject} methods, so need\n not be defined if conditions are not used.\n\n @return {@code true} if synchronization is held exclusively;\n         {@code false} otherwise\n @throws UnsupportedOperationException if conditions are not supported\n"
18675,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/acquire/int," Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once {@link #tryAcquire},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquire} until success.  This method can be used\n to implement method {@link Lock#lock}.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.\n"
18676,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/acquireInterruptibly/int," Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once {@link #tryAcquire}, returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking {@link #tryAcquire}\n until success or the thread is interrupted.  This method can be\n used to implement method {@link Lock#lockInterruptibly}.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.\n @throws InterruptedException if the current thread is interrupted\n"
18677,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/tryAcquireNanos/int;long," Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquire}, returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n {@link #tryAcquire} until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method {@link Lock#tryLock(long, TimeUnit)}.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.\n @param nanosTimeout the maximum number of nanoseconds to wait\n @return {@code true} if acquired; {@code false} if timed out\n @throws InterruptedException if the current thread is interrupted\n"
18678,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/release/int," Releases in exclusive mode.  Implemented by unblocking one or\n more threads if {@link #tryRelease} returns true.\n This method can be used to implement method {@link Lock#unlock}.\n\n @param arg the release argument.  This value is conveyed to\n        {@link #tryRelease} but is otherwise uninterpreted and\n        can represent anything you like.\n @return the value returned from {@link #tryRelease}\n"
18679,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/acquireShared/int," Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once {@link #tryAcquireShared},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquireShared} until success.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquireShared} but is otherwise uninterpreted\n        and can represent anything you like.\n"
18680,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/acquireSharedInterruptibly/int," Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n {@link #tryAcquireShared}, returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted.\n @param arg the acquire argument.\n This value is conveyed to {@link #tryAcquireShared} but is\n otherwise uninterpreted and can represent anything\n you like.\n @throws InterruptedException if the current thread is interrupted\n"
18681,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/tryAcquireSharedNanos/int;long," Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquireShared}, returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted or the timeout elapses.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquireShared} but is otherwise uninterpreted\n        and can represent anything you like.\n @param nanosTimeout the maximum number of nanoseconds to wait\n @return {@code true} if acquired; {@code false} if timed out\n @throws InterruptedException if the current thread is interrupted\n"
18682,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/releaseShared/int," Releases in shared mode.  Implemented by unblocking one or more\n threads if {@link #tryReleaseShared} returns true.\n\n @param arg the release argument.  This value is conveyed to\n        {@link #tryReleaseShared} but is otherwise uninterpreted\n        and can represent anything you like.\n @return the value returned from {@link #tryReleaseShared}\n"
18683,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/hasQueuedThreads/," Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.\n\n <p>In this implementation, this operation returns in\n constant time.\n\n @return {@code true} if there may be other threads waiting to acquire\n"
18684,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/hasContended/," Queries whether any threads have ever contended to acquire this\n synchronizer; that is if an acquire method has ever blocked.\n\n <p>In this implementation, this operation returns in\n constant time.\n\n @return {@code true} if there has ever been contention\n"
18685,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getFirstQueuedThread/," Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued.\n\n <p>In this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue.\n\n @return the first (longest-waiting) thread in the queue, or\n         {@code null} if no threads are currently queued\n"
18686,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/isQueued/Thread," Returns true if the given thread is currently queued.\n\n <p>This implementation traverses the queue to determine\n presence of the given thread.\n\n @param thread the thread\n @return {@code true} if the given thread is on the queue\n @throws NullPointerException if the thread is null\n"
18687,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getQueueLength/," Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization\n control.\n\n @return the estimated number of threads waiting to acquire\n"
18688,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getQueuedThreads/," Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.\n\n @return the collection of threads\n"
18689,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getExclusiveQueuedThreads/," Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to an exclusive acquire.\n\n @return the collection of threads\n"
18690,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getSharedQueuedThreads/," Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to a shared acquire.\n\n @return the collection of threads\n"
18691,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/toString/," Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String {@code "State ="}\n followed by the current value of {@link #getState}, and either\n {@code "nonempty"} or {@code "empty"} depending on whether the\n queue is empty.\n\n @return a string identifying this synchronizer, as well as its state\n"
18692,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/owns/ConditionObject," Queries whether the given ConditionObject\n uses this synchronizer as its lock.\n\n @param condition the condition\n @return <tt>true</tt> if owned\n @throws NullPointerException if the condition is null\n"
18693,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/hasWaiters/ConditionObject," Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a <tt>true</tt> return\n does not guarantee that a future <tt>signal</tt> will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state.\n\n @param condition the condition\n @return <tt>true</tt> if there are any waiting threads\n @throws IllegalMonitorStateException if exclusive synchronization\n         is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this synchronizer\n @throws NullPointerException if the condition is null\n"
18694,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getWaitQueueLength/ConditionObject," Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring of the\n system state, not for synchronization control.\n\n @param condition the condition\n @return the estimated number of waiting threads\n @throws IllegalMonitorStateException if exclusive synchronization\n         is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this synchronizer\n @throws NullPointerException if the condition is null\n"
18695,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/getWaitingThreads/ConditionObject," Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order.\n\n @param condition the condition\n @return the collection of threads\n @throws IllegalMonitorStateException if exclusive synchronization\n         is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this synchronizer\n @throws NullPointerException if the condition is null\n"
18696,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/AbstractQueuedSynchronizer/," Creates a new <tt>AbstractQueuedSynchronizer</tt> instance\n with initial synchronization state of zero.\n"
18697,class,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject," Condition implementation for a {@link\n AbstractQueuedSynchronizer} serving as the basis of a {@link\n Lock} implementation.\n\n <p>Method documentation for this class describes mechanics,\n not behavioral specifications from the point of view of Lock\n and Condition users. Exported versions of this class will in\n general need to be accompanied by documentation describing\n condition semantics that rely on those of the associated\n <tt>AbstractQueuedSynchronizer</tt>.\n\n <p>This class is Serializable, but all fields are transient,\n so deserialized conditions have no waiters.\n"
18698,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/signal/," Moves the longest-waiting thread, if one exists, from the\n wait queue for this condition to the wait queue for the\n owning lock.\n\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18699,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/signalAll/," Moves all threads from the wait queue for this condition to\n the wait queue for the owning lock.\n\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18700,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/awaitUninterruptibly/," Implements uninterruptible condition wait.\n <ol>\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n </ol>\n"
18701,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/await/," Implements interruptible condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n <li> Block until signalled or interrupted\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw exception\n </ol>\n"
18702,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/awaitNanos/long," Implements timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n <li> Block until signalled, interrupted, or timed out\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException\n </ol>\n"
18703,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/awaitUntil/Date," Implements absolute timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n <li> Block until signalled, interrupted, or timed out\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException\n <li> If timed out while blocked in step 4, return false, else true\n </ol>\n"
18704,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/await/long;TimeUnit," Implements timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n <li> Block until signalled, interrupted, or timed out\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException\n <li> If timed out while blocked in step 4, return false, else true\n </ol>\n"
18705,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/hasWaiters/," Queries whether any threads are waiting on this condition.\n Implements {@link AbstractQueuedSynchronizer#hasWaiters}.\n\n @return {@code true} if there are any waiting threads\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18706,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/getWaitQueueLength/," Returns an estimate of the number of threads waiting on\n this condition.\n Implements {@link AbstractQueuedSynchronizer#getWaitQueueLength}.\n\n @return the estimated number of waiting threads\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18707,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/getWaitingThreads/," Returns a collection containing those threads that may be\n waiting on this Condition.\n Implements {@link AbstractQueuedSynchronizer#getWaitingThreads}.\n\n @return the collection of threads\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18708,method,java/util/concurrent/locks/AbstractQueuedSynchronizer/ConditionObject/AbstractQueuedSynchronizer/ConditionObject/," Creates a new <tt>ConditionObject</tt> instance.\n"
18709,class,java/util/concurrent/locks/AbstractQueuedLongSynchronizer," A version of {@link AbstractQueuedSynchronizer} in\n which synchronization state is maintained as a <tt>long</tt>.\n This class has exactly the same structure, properties, and methods\n as <tt>AbstractQueuedSynchronizer</tt> with the exception\n that all state-related parameters and results are defined\n as <tt>long</tt> rather than <tt>int</tt>. This class\n may be useful when creating synchronizers such as\n multilevel locks and barriers that require\n 64 bits of state.\n\n <p>See {@link AbstractQueuedSynchronizer} for usage\n notes and examples.\n\n @since 1.6\n @author Doug Lea\n"
18710,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getState/," Returns the current value of synchronization state.\n This operation has memory semantics of a <tt>volatile</tt> read.\n @return current state value\n"
18711,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/setState/long," Sets the value of synchronization state.\n This operation has memory semantics of a <tt>volatile</tt> write.\n @param newState the new state value\n"
18712,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/compareAndSetState/long;long," Atomically sets synchronization state to the given updated\n value if the current state value equals the expected value.\n This operation has memory semantics of a <tt>volatile</tt> read\n and write.\n\n @param expect the expected value\n @param update the new value\n @return true if successful. False return indicates that the actual\n         value was not equal to the expected value.\n"
18717,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/isHeldExclusively/," Returns {@code true} if synchronization is held exclusively with\n respect to the current (calling) thread.  This method is invoked\n upon each call to a non-waiting {@link ConditionObject} method.\n (Waiting methods instead invoke {@link #release}.)\n\n <p>The default implementation throws {@link\n UnsupportedOperationException}. This method is invoked\n internally only within {@link ConditionObject} methods, so need\n not be defined if conditions are not used.\n\n @return {@code true} if synchronization is held exclusively;\n         {@code false} otherwise\n @throws UnsupportedOperationException if conditions are not supported\n"
18718,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/acquire/long," Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once {@link #tryAcquire},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquire} until success.  This method can be used\n to implement method {@link Lock#lock}.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.\n"
18719,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/acquireInterruptibly/long," Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once {@link #tryAcquire}, returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking {@link #tryAcquire}\n until success or the thread is interrupted.  This method can be\n used to implement method {@link Lock#lockInterruptibly}.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.\n @throws InterruptedException if the current thread is interrupted\n"
18720,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/tryAcquireNanos/long;long," Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquire}, returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n {@link #tryAcquire} until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method {@link Lock#tryLock(long, TimeUnit)}.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.\n @param nanosTimeout the maximum number of nanoseconds to wait\n @return {@code true} if acquired; {@code false} if timed out\n @throws InterruptedException if the current thread is interrupted\n"
18721,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/release/long," Releases in exclusive mode.  Implemented by unblocking one or\n more threads if {@link #tryRelease} returns true.\n This method can be used to implement method {@link Lock#unlock}.\n\n @param arg the release argument.  This value is conveyed to\n        {@link #tryRelease} but is otherwise uninterpreted and\n        can represent anything you like.\n @return the value returned from {@link #tryRelease}\n"
18722,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/acquireShared/long," Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once {@link #tryAcquireShared},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquireShared} until success.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquireShared} but is otherwise uninterpreted\n        and can represent anything you like.\n"
18723,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/acquireSharedInterruptibly/long," Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n {@link #tryAcquireShared}, returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted.\n @param arg the acquire argument.\n This value is conveyed to {@link #tryAcquireShared} but is\n otherwise uninterpreted and can represent anything\n you like.\n @throws InterruptedException if the current thread is interrupted\n"
18724,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/tryAcquireSharedNanos/long;long," Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquireShared}, returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted or the timeout elapses.\n\n @param arg the acquire argument.  This value is conveyed to\n        {@link #tryAcquireShared} but is otherwise uninterpreted\n        and can represent anything you like.\n @param nanosTimeout the maximum number of nanoseconds to wait\n @return {@code true} if acquired; {@code false} if timed out\n @throws InterruptedException if the current thread is interrupted\n"
18725,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/releaseShared/long," Releases in shared mode.  Implemented by unblocking one or more\n threads if {@link #tryReleaseShared} returns true.\n\n @param arg the release argument.  This value is conveyed to\n        {@link #tryReleaseShared} but is otherwise uninterpreted\n        and can represent anything you like.\n @return the value returned from {@link #tryReleaseShared}\n"
18726,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/hasQueuedThreads/," Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.\n\n <p>In this implementation, this operation returns in\n constant time.\n\n @return {@code true} if there may be other threads waiting to acquire\n"
18727,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/hasContended/," Queries whether any threads have ever contended to acquire this\n synchronizer; that is if an acquire method has ever blocked.\n\n <p>In this implementation, this operation returns in\n constant time.\n\n @return {@code true} if there has ever been contention\n"
18728,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getFirstQueuedThread/," Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued.\n\n <p>In this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue.\n\n @return the first (longest-waiting) thread in the queue, or\n         {@code null} if no threads are currently queued\n"
18729,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/isQueued/Thread," Returns true if the given thread is currently queued.\n\n <p>This implementation traverses the queue to determine\n presence of the given thread.\n\n @param thread the thread\n @return {@code true} if the given thread is on the queue\n @throws NullPointerException if the thread is null\n"
18730,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getQueueLength/," Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization\n control.\n\n @return the estimated number of threads waiting to acquire\n"
18731,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getQueuedThreads/," Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.\n\n @return the collection of threads\n"
18732,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getExclusiveQueuedThreads/," Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to an exclusive acquire.\n\n @return the collection of threads\n"
18733,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/getSharedQueuedThreads/," Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to a shared acquire.\n\n @return the collection of threads\n"
18734,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/toString/," Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String {@code "State ="}\n followed by the current value of {@link #getState}, and either\n {@code "nonempty"} or {@code "empty"} depending on whether the\n queue is empty.\n\n @return a string identifying this synchronizer, as well as its state\n"
18735,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/owns/ConditionObject," Queries whether the given ConditionObject\n uses this synchronizer as its lock.\n\n @param condition the condition\n @return <tt>true</tt> if owned\n @throws NullPointerException if the condition is null\n"
18736,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/hasWaiters/ConditionObject," Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a <tt>true</tt> return\n does not guarantee that a future <tt>signal</tt> will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state.\n\n @param condition the condition\n @return <tt>true</tt> if there are any waiting threads\n @throws IllegalMonitorStateException if exclusive synchronization\n         is not held\n @throws IllegalArgumentException if the given condition is\n         not associated with this synchronizer\n @throws NullPointerException if the condition is null\n"
18739,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/AbstractQueuedLongSynchronizer/," Creates a new <tt>AbstractQueuedLongSynchronizer</tt> instance\n with initial synchronization state of zero.\n"
18740,class,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject," Condition implementation for a {@link\n AbstractQueuedLongSynchronizer} serving as the basis of a {@link\n Lock} implementation.\n\n <p>Method documentation for this class describes mechanics,\n not behavioral specifications from the point of view of Lock\n and Condition users. Exported versions of this class will in\n general need to be accompanied by documentation describing\n condition semantics that rely on those of the associated\n <tt>AbstractQueuedLongSynchronizer</tt>.\n\n <p>This class is Serializable, but all fields are transient,\n so deserialized conditions have no waiters.\n\n @since 1.6\n"
18741,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/signal/," Moves the longest-waiting thread, if one exists, from the\n wait queue for this condition to the wait queue for the\n owning lock.\n\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18742,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/signalAll/," Moves all threads from the wait queue for this condition to\n the wait queue for the owning lock.\n\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18743,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/awaitUninterruptibly/," Implements uninterruptible condition wait.\n <ol>\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n </ol>\n"
18744,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/await/," Implements interruptible condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n <li> Block until signalled or interrupted\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw exception\n </ol>\n"
18745,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/awaitNanos/long," Implements timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n <li> Block until signalled, interrupted, or timed out\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException\n </ol>\n"
18746,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/awaitUntil/Date," Implements absolute timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n <li> Block until signalled, interrupted, or timed out\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException\n <li> If timed out while blocked in step 4, return false, else true\n </ol>\n"
18747,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/await/long;TimeUnit," Implements timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException\n <li> Save lock state returned by {@link #getState}\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n <li> Block until signalled, interrupted, or timed out\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException\n <li> If timed out while blocked in step 4, return false, else true\n </ol>\n"
18748,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/hasWaiters/," Queries whether any threads are waiting on this condition.\n Implements {@link AbstractQueuedLongSynchronizer#hasWaiters}.\n\n @return {@code true} if there are any waiting threads\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18749,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/getWaitQueueLength/," Returns an estimate of the number of threads waiting on\n this condition.\n Implements {@link AbstractQueuedLongSynchronizer#getWaitQueueLength}.\n\n @return the estimated number of waiting threads\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18750,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/getWaitingThreads/," Returns a collection containing those threads that may be\n waiting on this Condition.\n Implements {@link AbstractQueuedLongSynchronizer#getWaitingThreads}.\n\n @return the collection of threads\n @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         returns {@code false}\n"
18751,method,java/util/concurrent/locks/AbstractQueuedLongSynchronizer/ConditionObject/AbstractQueuedLongSynchronizer/ConditionObject/," Creates a new <tt>ConditionObject</tt> instance.\n"
18752,class,java/util/concurrent/locks/AbstractOwnableSynchronizer," A synchronizer that may be exclusively owned by a thread.  This\n class provides a basis for creating locks and related synchronizers\n that may entail a notion of ownership.  The\n <tt>AbstractOwnableSynchronizer</tt> class itself does not manage or\n use this information. However, subclasses and tools may use\n appropriately maintained values to help control and monitor access\n and provide diagnostics.\n\n @since 1.6\n @author Doug Lea\n"
18753,method,java/util/concurrent/locks/AbstractOwnableSynchronizer/setExclusiveOwnerThread/Thread," Sets the thread that currently owns exclusive access. A\n <tt>null</tt> argument indicates that no thread owns access.\n This method does not otherwise impose any synchronization or\n <tt>volatile</tt> field accesses.\n"
18754,method,java/util/concurrent/locks/AbstractOwnableSynchronizer/getExclusiveOwnerThread/," Returns the thread last set by\n <tt>setExclusiveOwnerThread</tt>, or <tt>null</tt> if never\n set.  This method does not otherwise impose any synchronization\n or <tt>volatile</tt> field accesses.\n @return the owner thread\n"
18755,method,java/util/concurrent/locks/AbstractOwnableSynchronizer/AbstractOwnableSynchronizer/," Empty constructor for use by subclasses.\n"
18758,method,java/util/spi/TimeZoneNameProvider/TimeZoneNameProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
18761,method,java/util/spi/LocaleServiceProvider/LocaleServiceProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
18763,method,java/util/spi/LocaleNameProvider/getDisplayLanguage/String;Locale," Returns a localized name for the given ISO 639 language code and the \n given locale that is appropriate for display to the user.\n For example, if <code>languageCode</code> is "fr" and <code>locale</code>\n is en_US, getDisplayLanguage() will return "French"; if <code>languageCode</code>\n is "en" and <code>locale</code> is fr_FR, getDisplayLanguage() will return "anglais".\n If the name returned cannot be localized according to <code>locale</code>,\n (say, the provider does not have a Japanese name for Croatian),\n this method returns null.\n @param languageCode the ISO 639 language code string in the form of two\n     lower-case letters between 'a' (U+0061) and 'z' (U+007A)\n @param locale the desired locale\n @return the name of the given language code for the specified locale, or null if it's not \n     available.\n @exception NullPointerException if <code>languageCode</code> or <code>locale</code> is null\n @exception IllegalArgumentException if <code>languageCode</code> is not in the form of\n     two lower-case letters, or <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @see java.util.Locale#getDisplayLanguage(java.util.Locale)\n"
18764,method,java/util/spi/LocaleNameProvider/getDisplayCountry/String;Locale," Returns a localized name for the given ISO 3166 country code and the \n given locale that is appropriate for display to the user.\n For example, if <code>countryCode</code> is "FR" and <code>locale</code>\n is en_US, getDisplayCountry() will return "France"; if <code>countryCode</code> \n is "US" and <code>locale</code> is fr_FR, getDisplayCountry() will return "Etats-Unis".\n If the name returned cannot be localized according to <code>locale</code>,\n (say, the provider does not have a Japanese name for Croatia),\n this method returns null.\n @param countryCode the ISO 3166 country code string in the form of two\n     upper-case letters between 'A' (U+0041) and 'Z' (U+005A)\n @param locale the desired locale\n @return the name of the given country code for the specified locale, or null if it's not\n     available.\n @exception NullPointerException if <code>countryCode</code> or <code>locale</code> is null\n @exception IllegalArgumentException if <code>countryCode</code> is not in the form of\n     two upper-case letters, or <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @see java.util.Locale#getDisplayCountry(java.util.Locale)\n"
18765,method,java/util/spi/LocaleNameProvider/getDisplayVariant/String;Locale," Returns a localized name for the given variant code and the given locale that \n is appropriate for display to the user.\n If the name returned cannot be localized according to <code>locale</code>,\n this method returns null.\n @param variant the variant string\n @param locale the desired locale\n @return the name of the given variant string for the specified locale, or null if it's not\n     available.\n @exception NullPointerException if <code>variant</code> or <code>locale</code> is null\n @exception IllegalArgumentException if <code>locale</code> isn't\n     one of the locales returned from \n     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() \n     getAvailableLocales()}.\n @see java.util.Locale#getDisplayVariant(java.util.Locale)\n"
18766,method,java/util/spi/LocaleNameProvider/LocaleNameProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
18767,class,java/util/spi/CurrencyNameProvider," An abstract class for service providers that\n provide localized currency symbols for the \n {@link java.util.Currency Currency} class.\n Note that currency symbols are considered names when determining \n behaviors described in the \n {@link java.util.spi.LocaleServiceProvider LocaleServiceProvider} \n specification.\n\n @since        1.6\n @version      @(#)CurrencyNameProvider.java	1.3 10/03/23\n"
18769,method,java/util/spi/CurrencyNameProvider/CurrencyNameProvider/," Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n"
18770,class,java/util/regex/PatternSyntaxException," Unchecked exception thrown to indicate a syntax error in a\n regular-expression pattern.\n\n @author  unascribed\n @version 1.17, 10/03/23\n @since 1.4\n @spec JSR-51\n"
18771,method,java/util/regex/PatternSyntaxException/getIndex/," Retrieves the error index.\n\n @return  The approximate index in the pattern of the error,\n         or <tt>-1</tt> if the index is not known\n"
18772,method,java/util/regex/PatternSyntaxException/getDescription/," Retrieves the description of the error.\n\n @return  The description of the error\n"
18774,method,java/util/regex/PatternSyntaxException/getMessage/," Returns a multi-line string containing the description of the syntax\n error and its index, the erroneous regular-expression pattern, and a\n visual indication of the error index within the pattern.\n\n @return  The full detail message\n"
18775,method,java/util/regex/PatternSyntaxException/PatternSyntaxException/String;String;int," Constructs a new instance of this class.\n\n @param  desc\n         A description of the error\n\n @param  regex\n         The erroneous pattern\n\n @param  index\n         The approximate index in the pattern of the error,\n         or <tt>-1</tt> if the index is not known\n"
18778,method,java/util/regex/Pattern/compile/String;int," Compiles the given regular expression into a pattern with the given\n flags.  </p>\n\n @param  regex\n         The expression to be compiled\n\n @param  flags\n         Match flags, a bit mask that may include\n         {@link #CASE_INSENSITIVE}, {@link #MULTILINE}, {@link #DOTALL},\n         {@link #UNICODE_CASE}, {@link #CANON_EQ}, {@link #UNIX_LINES},\n         {@link #LITERAL} and {@link #COMMENTS}\n\n @throws  IllegalArgumentException\n          If bit values other than those corresponding to the defined\n          match flags are set in <tt>flags</tt>\n\n @throws  PatternSyntaxException\n          If the expression's syntax is invalid\n"
18785,method,java/util/regex/Pattern/split/CharSequence," Splits the given input sequence around matches of this pattern.\n\n <p> This method works as if by invoking the two-argument {@link\n #split(java.lang.CharSequence, int) split} method with the given input\n sequence and a limit argument of zero.  Trailing empty strings are\n therefore not included in the resulting array. </p>\n\n <p> The input <tt>"boo:and:foo"</tt>, for example, yields the following\n results with these expressions:\n\n <blockquote><table cellpadding=1 cellspacing=0\n              summary="Split examples showing regex and result">\n <tr><th><P align="left"><i>Regex&nbsp;&nbsp;&nbsp;&nbsp;</i></th>\n     <th><P align="left"><i>Result</i></th></tr>\n <tr><td align=center>:</td>\n     <td><tt>{ "boo", "and", "foo" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td><tt>{ "b", "", ":and:f" }</tt></td></tr>\n </table></blockquote>\n\n\n @param  input\n         The character sequence to be split\n\n @return  The array of strings computed by splitting the input\n          around matches of this pattern\n"
18787,field,java/util/regex/Pattern/UNIX_LINES," Enables Unix lines mode.\n\n <p> In this mode, only the <tt>'\n'</tt> line terminator is recognized\n in the behavior of <tt>.</tt>, <tt>^</tt>, and <tt>$</tt>.\n\n <p> Unix lines mode can also be enabled via the embedded flag\n expression&nbsp;<tt>(?d)</tt>.\n"
18790,field,java/util/regex/Pattern/MULTILINE," Enables multiline mode.\n\n <p> In multiline mode the expressions <tt>^</tt> and <tt>$</tt> match\n just after or just before, respectively, a line terminator or the end of\n the input sequence.  By default these expressions only match at the\n beginning and the end of the entire input sequence.\n\n <p> Multiline mode can also be enabled via the embedded flag\n expression&nbsp;<tt>(?m)</tt>.  </p>\n"
18791,field,java/util/regex/Pattern/LITERAL," Enables literal parsing of the pattern.\n\n <p> When this flag is specified then the input string that specifies\n the pattern is treated as a sequence of literal characters.\n Metacharacters or escape sequences in the input sequence will be\n given no special meaning.\n\n <p>The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on\n matching when used in conjunction with this flag. The other flags\n become superfluous.\n\n <p> There is no embedded flag character for enabling literal parsing.\n @since 1.5\n"
18792,field,java/util/regex/Pattern/DOTALL," Enables dotall mode.\n\n <p> In dotall mode, the expression <tt>.</tt> matches any character,\n including a line terminator.  By default this expression does not match\n line terminators.\n\n <p> Dotall mode can also be enabled via the embedded flag\n expression&nbsp;<tt>(?s)</tt>.  (The <tt>s</tt> is a mnemonic for\n "single-line" mode, which is what this is called in Perl.)  </p>\n"
18793,field,java/util/regex/Pattern/UNICODE_CASE," Enables Unicode-aware case folding.\n\n <p> When this flag is specified then case-insensitive matching, when\n enabled by the {@link #CASE_INSENSITIVE} flag, is done in a manner\n consistent with the Unicode Standard.  By default, case-insensitive\n matching assumes that only characters in the US-ASCII charset are being\n matched.\n\n <p> Unicode-aware case folding can also be enabled via the embedded flag\n expression&nbsp;<tt>(?u)</tt>.\n\n <p> Specifying this flag may impose a performance penalty.  </p>\n"
18795,class,java/util/regex/Matcher," An engine that performs match operations on a {@link java.lang.CharSequence\n </code>character sequence<code>} by interpreting a {@link Pattern}.\n\n <p> A matcher is created from a pattern by invoking the pattern's {@link\n Pattern#matcher matcher} method.  Once created, a matcher can be used to\n perform three different kinds of match operations:\n\n <ul>\n\n   <li><p> The {@link #matches matches} method attempts to match the entire\n   input sequence against the pattern.  </p></li>\n\n   <li><p> The {@link #lookingAt lookingAt} method attempts to match the\n   input sequence, starting at the beginning, against the pattern.  </p></li>\n\n   <li><p> The {@link #find find} method scans the input sequence looking for\n   the next subsequence that matches the pattern.  </p></li>\n\n </ul>\n\n <p> Each of these methods returns a boolean indicating success or failure.\n More information about a successful match can be obtained by querying the\n state of the matcher.\n\n <p> A matcher finds matches in a subset of its input called the \n <i>region</i>. By default, the region contains all of the matcher's input. \n The region can be modified via the{@link #region region} method and queried\n via the {@link #regionStart regionStart} and {@link #regionEnd regionEnd} \n methods. The way that the region boundaries interact with some pattern\n constructs can be changed. See {@link #useAnchoringBounds \n useAnchoringBounds} and {@link #useTransparentBounds useTransparentBounds}\n for more details.\n\n <p> This class also defines methods for replacing matched subsequences with\n new strings whose contents can, if desired, be computed from the match\n result.  The {@link #appendReplacement appendReplacement} and {@link\n #appendTail appendTail} methods can be used in tandem in order to collect\n the result into an existing string buffer, or the more convenient {@link\n #replaceAll replaceAll} method can be used to create a string in which every\n matching subsequence in the input sequence is replaced.\n\n <p> The explicit state of a matcher includes the start and end indices of\n the most recent successful match.  It also includes the start and end\n indices of the input subsequence captured by each <a\n href="Pattern.html#cg">capturing group</a> in the pattern as well as a total\n count of such subsequences.  As a convenience, methods are also provided for\n returning these captured subsequences in string form.\n\n <p> The explicit state of a matcher is initially undefined; attempting to\n query any part of it before a successful match will cause an {@link\n IllegalStateException} to be thrown.  The explicit state of a matcher is\n recomputed by every match operation.\n\n <p> The implicit state of a matcher includes the input character sequence as\n well as the <i>append position</i>, which is initially zero and is updated\n by the {@link #appendReplacement appendReplacement} method.\n\n <p> A matcher may be reset explicitly by invoking its {@link #reset()}\n method or, if a new input sequence is desired, its {@link\n #reset(java.lang.CharSequence) reset(CharSequence)} method.  Resetting a\n matcher discards its explicit state information and sets the append position\n to zero.\n\n <p> Instances of this class are not safe for use by multiple concurrent\n threads. </p>\n\n\n @author      Mike McCloskey\n @author	Mark Reinhold\n @author	JSR-51 Expert Group\n @version 	1.65, 10/03/23\n @since	1.4\n @spec        JSR-51\n"
18803,method,java/util/regex/Matcher/end/," Returns the offset after the last character matched.  </p>\n\n @return  The offset after the last character matched\n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n"
18804,method,java/util/regex/Matcher/end/int," Returns the offset after the last character of the subsequence\n captured by the given group during the previous match operation.\n\n <p> <a href="Pattern.html#cg">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <i>m.</i><tt>end(0)</tt> is equivalent to\n <i>m.</i><tt>end()</tt>.  </p>\n\n @param  group\n         The index of a capturing group in this matcher's pattern\n\n @return  The offset after the last character captured by the group,\n          or <tt>-1</tt> if the match was successful\n          but the group itself did not match anything\n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n\n @throws  IndexOutOfBoundsException\n          If there is no capturing group in the pattern\n          with the given index\n"
18805,method,java/util/regex/Matcher/group/," Returns the input subsequence matched by the previous match.\n\n <p> For a matcher <i>m</i> with input sequence <i>s</i>, \n the expressions <i>m.</i><tt>group()</tt> and\n <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(),</tt>&nbsp;<i>m.</i><tt>end())</tt>\n are equivalent.  </p>\n\n <p> Note that some patterns, for example <tt>a*</tt>, match the empty\n string.  This method will return the empty string when the pattern\n successfully matches the empty string in the input.  </p>\n\n @return The (possibly empty) subsequence matched by the previous match,\n         in string form\n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n"
18806,method,java/util/regex/Matcher/group/int," Returns the input subsequence captured by the given group during the\n previous match operation.\n\n <p> For a matcher <i>m</i>, input sequence <i>s</i>, and group index\n <i>g</i>, the expressions <i>m.</i><tt>group(</tt><i>g</i><tt>)</tt> and\n <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(</tt><i>g</i><tt>),</tt>&nbsp;<i>m.</i><tt>end(</tt><i>g</i><tt>))</tt>\n are equivalent.  </p>\n \n <p> <a href="Pattern.html#cg">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <tt>m.group(0)</tt> is equivalent to <tt>m.group()</tt>.\n </p>\n\n <p> If the match was successful but the group specified failed to match\n any part of the input sequence, then <tt>null</tt> is returned. Note\n that some groups, for example <tt>(a*)</tt>, match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  </p>\n\n @param  group\n         The index of a capturing group in this matcher's pattern\n\n @return  The (possibly empty) subsequence captured by the group\n          during the previous match, or <tt>null</tt> if the group\n          failed to match part of the input\n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n\n @throws  IndexOutOfBoundsException\n          If there is no capturing group in the pattern\n          with the given index\n"
18808,method,java/util/regex/Matcher/matches/," Attempts to match the entire region against the pattern.\n\n <p> If the match succeeds then more information can be obtained via the\n <tt>start</tt>, <tt>end</tt>, and <tt>group</tt> methods.  </p>\n\n @return  <tt>true</tt> if, and only if, the entire region sequence\n          matches this matcher's pattern\n"
18809,method,java/util/regex/Matcher/find/," Attempts to find the next subsequence of the input sequence that matches\n the pattern.\n\n <p> This method starts at the beginning of this matcher's region, or, if\n a previous invocation of the method was successful and the matcher has \n not since been reset, at the first character not matched by the previous\n match.\n\n <p> If the match succeeds then more information can be obtained via the\n <tt>start</tt>, <tt>end</tt>, and <tt>group</tt> methods.  </p>\n\n @return  <tt>true</tt> if, and only if, a subsequence of the input\n          sequence matches this matcher's pattern\n"
18810,method,java/util/regex/Matcher/find/int," Resets this matcher and then attempts to find the next subsequence of\n the input sequence that matches the pattern, starting at the specified\n index.\n\n <p> If the match succeeds then more information can be obtained via the\n <tt>start</tt>, <tt>end</tt>, and <tt>group</tt> methods, and subsequent\n invocations of the {@link #find()} method will start at the first\n character not matched by this match.  </p>\n\n @throws  IndexOutOfBoundsException\n          If start is less than zero or if start is greater than the\n          length of the input sequence.\n\n @return  <tt>true</tt> if, and only if, a subsequence of the input\n          sequence starting at the given index matches this matcher's\n          pattern\n"
18813,method,java/util/regex/Matcher/appendReplacement/StringBuffer;String," Implements a non-terminal append-and-replace step.\n\n <p> This method performs the following actions: </p>\n\n <ol>\n\n   <li><p> It reads characters from the input sequence, starting at the\n   append position, and appends them to the given string buffer.  It\n   stops after reading the last character preceding the previous match,\n   that is, the character at index {@link\n   #start()}&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>.  </p></li>\n\n   <li><p> It appends the given replacement string to the string buffer.\n   </p></li>\n\n   <li><p> It sets the append position of this matcher to the index of\n   the last character matched, plus one, that is, to {@link #end()}.\n   </p></li>\n\n </ol>\n\n <p> The replacement string may contain references to subsequences\n captured during the previous match: Each occurrence of\n <tt>$</tt><i>g</i><tt></tt> will be replaced by the result of\n evaluating {@link #group(int) group}<tt>(</tt><i>g</i><tt>)</tt>. \n The first number after the <tt>$</tt> is always treated as part of\n the group reference. Subsequent numbers are incorporated into g if\n they would form a legal group reference. Only the numerals '0'\n through '9' are considered as potential components of the group\n reference. If the second group matched the string <tt>"foo"</tt>, for\n example, then passing the replacement string <tt>"$2bar"</tt> would\n cause <tt>"foobar"</tt> to be appended to the string buffer. A dollar\n sign (<tt>$</tt>) may be included as a literal in the replacement\n string by preceding it with a backslash (<tt>\$</tt>).\n\n <p> Note that backslashes (<tt>\</tt>) and dollar signs (<tt>$</tt>) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n <p> This method is intended to be used in a loop together with the\n {@link #appendTail appendTail} and {@link #find find} methods.  The\n following code, for example, writes <tt>one dog two dogs in the\n yard</tt> to the standard-output stream: </p>\n\n <blockquote><pre>\n Pattern p = Pattern.compile("cat");\n Matcher m = p.matcher("one cat two cats in the yard");\n StringBuffer sb = new StringBuffer();\n while (m.find()) {\n     m.appendReplacement(sb, "dog");\n }\n m.appendTail(sb);\n System.out.println(sb.toString());</pre></blockquote>\n\n @param  sb\n         The target string buffer\n\n @param  replacement\n         The replacement string\n\n @return  This matcher\n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n\n @throws  IndexOutOfBoundsException\n          If the replacement string refers to a capturing group\n          that does not exist in the pattern\n"
18814,method,java/util/regex/Matcher/appendTail/StringBuffer," Implements a terminal append-and-replace step.\n\n <p> This method reads characters from the input sequence, starting at\n the append position, and appends them to the given string buffer.  It is\n intended to be invoked after one or more invocations of the {@link\n #appendReplacement appendReplacement} method in order to copy the\n remainder of the input sequence.  </p>\n\n @param  sb\n         The target string buffer\n\n @return  The target string buffer\n"
18817,method,java/util/regex/Matcher/region/int;int," Sets the limits of this matcher's region. The region is the part of the\n input sequence that will be searched to find a match. Invoking this\n method resets the matcher, and then sets the region to start at the\n index specified by the <code>start</code> parameter and end at the\n index specified by the <code>end</code> parameter.\n\n <p>Depending on the transparency and anchoring being used (see\n {@link #useTransparentBounds useTransparentBounds} and \n {@link #useAnchoringBounds useAnchoringBounds}), certain constructs such\n as anchors may behave differently at or around the boundaries of the\n region.\n\n @param  start\n         The index to start searching at (inclusive)\n @param  end\n         The index to end searching at (exclusive)\n @throws  IndexOutOfBoundsException\n          If start or end is less than zero, if\n          start is greater than the length of the input sequence, if\n          end is greater than the length of the input sequence, or if\n          start is greater than end.\n @return  this matcher\n @since 1.5\n"
18821,method,java/util/regex/Matcher/useTransparentBounds/boolean," Sets the transparency of region bounds for this matcher.\n\n <p> Invoking this method with an argument of <tt>true</tt> will set this\n matcher to use <i>transparent</i> bounds. If the boolean \n argument is <tt>false</tt>, then <i>opaque</i> bounds will be used.\n \n <p> Using transparent bounds, the boundaries of this \n matcher's region are transparent to lookahead, lookbehind,\n and boundary matching constructs. Those constructs can see beyond the \n boundaries of the region to see if a match is appropriate.\n\n <p> Using opaque bounds, the boundaries of this matcher's \n region are opaque to lookahead, lookbehind, and boundary matching \n constructs that may try to see beyond them. Those constructs cannot\n look past the boundaries so they will fail to match anything outside\n of the region.\n\n <p> By default, a matcher uses opaque bounds.\n\n @param  b a boolean indicating whether to use opaque or transparent\n         regions\n @return this matcher\n @see java.util.regex.Matcher#hasTransparentBounds\n @since 1.5\n"
18823,method,java/util/regex/Matcher/useAnchoringBounds/boolean," Sets the anchoring of region bounds for this matcher.\n\n <p> Invoking this method with an argument of <tt>true</tt> will set this\n matcher to use <i>anchoring</i> bounds. If the boolean \n argument is <tt>false</tt>, then <i>non-anchoring</i> bounds will be \n used.\n \n <p> Using anchoring bounds, the boundaries of this \n matcher's region match anchors such as ^ and $.\n\n <p> Without anchoring bounds, the boundaries of this \n matcher's region will not match anchors such as ^ and $.\n\n <p> By default, a matcher uses anchoring region boundaries.\n\n @param  b a boolean indicating whether or not to use anchoring bounds.\n @return this matcher\n @see java.util.regex.Matcher#hasAnchoringBounds\n @since 1.5\n"
18824,method,java/util/regex/Matcher/toString/," <p>Returns the string representation of this matcher. The\n string representation of a <code>Matcher</code> contains information\n that may be useful for debugging. The exact format is unspecified.\n\n @return  The string representation of this matcher\n @since 1.5\n"
18826,method,java/util/regex/Matcher/requireEnd/," <p>Returns true if more input could change a positive match into a \n negative one.\n\n <p>If this method returns true, and a match was found, then more\n input could cause the match to be lost. If this method returns false \n and a match was found, then more input might change the match but the \n match won't be lost. If a match was not found, then requireEnd has no \n meaning.\n\n @return  true iff more input could change a positive match into a \n          negative one.\n @since 1.5\n"
18830,method,java/util/regex/MatchResult/end/," Returns the offset after the last character matched.  </p>\n\n @return  @return  The offset after the last character matched \n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n"
18831,method,java/util/regex/MatchResult/end/int," Returns the offset after the last character of the subsequence \n captured by the given group during this match.\n\n <p> <a href="Pattern.html#cg">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <i>m.</i><tt>end(0)</tt> is equivalent to\n <i>m.</i><tt>end()</tt>.  </p>\n\n @param  group\n         The index of a capturing group in this matcher's pattern\n\n @return  The offset after the last character captured by the group,\n          or <tt>-1</tt> if the match was successful \n          but the group itself did not match anything\n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n\n @throws  IndexOutOfBoundsException\n          If there is no capturing group in the pattern\n          with the given index\n"
18832,method,java/util/regex/MatchResult/group/," Returns the input subsequence matched by the previous match.\n\n <p> For a matcher <i>m</i> with input sequence <i>s</i>, \n the expressions <i>m.</i><tt>group()</tt> and\n <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(),</tt>&nbsp;<i>m.</i><tt>end())</tt>\n are equivalent.  </p>\n\n <p> Note that some patterns, for example <tt>a*</tt>, match the empty\n string.  This method will return the empty string when the pattern\n successfully matches the empty string in the input.  </p>\n\n @return The (possibly empty) subsequence matched by the previous match,\n         in string form\n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n"
18833,method,java/util/regex/MatchResult/group/int," Returns the input subsequence captured by the given group during the\n previous match operation.\n\n <p> For a matcher <i>m</i>, input sequence <i>s</i>, and group index\n <i>g</i>, the expressions <i>m.</i><tt>group(</tt><i>g</i><tt>)</tt> and\n <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(</tt><i>g</i><tt>),</tt>&nbsp;<i>m.</i><tt>end(</tt><i>g</i><tt>))</tt>\n are equivalent.  </p>\n \n <p> <a href="Pattern.html#cg">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <tt>m.group(0)</tt> is equivalent to <tt>m.group()</tt>.\n </p>\n\n <p> If the match was successful but the group specified failed to match\n any part of the input sequence, then <tt>null</tt> is returned. Note\n that some groups, for example <tt>(a*)</tt>, match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  </p>\n\n @param  group\n         The index of a capturing group in this matcher's pattern\n\n @return  The (possibly empty) subsequence captured by the group\n          during the previous match, or <tt>null</tt> if the group\n          failed to match part of the input\n\n @throws  IllegalStateException\n          If no match has yet been attempted,\n          or if the previous match operation failed\n\n @throws  IndexOutOfBoundsException\n          If there is no capturing group in the pattern\n          with the given index\n"
18835,class,java/util/jar/Pack200," Transforms a JAR file to or from a packed stream in Pack200 format.\n Please refer to Network Transfer Format JSR 200 Specification at \n <a href=http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html>http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html</a>\n <p>\n Typically the packer engine is used by application developers\n to deploy or host JAR files on a website.\n The unpacker  engine is used by deployment applications to\n transform the byte-stream back to JAR format.\n <p>\n Here is an example using  packer and unpacker:<p>\n <blockquote><pre>\n    import java.util.jar.Pack200;\n    import java.util.jar.Pack200.*;\n    ...\n    // Create the Packer object\n    Packer packer = Pack200.newPacker();\n\n    // Initialize the state by setting the desired properties\n    Map p = packer.properties();\n    // take more time choosing codings for better compression\n    p.put(Packer.EFFORT, "7");  // default is "5"\n    // use largest-possible archive segments (>10% better compression).\n    p.put(Packer.SEGMENT_LIMIT, "-1");\n    // reorder files for better compression.\n    p.put(Packer.KEEP_FILE_ORDER, Packer.FALSE);\n    // smear modification times to a single value.\n    p.put(Packer.MODIFICATION_TIME, Packer.LATEST);\n    // ignore all JAR deflation requests,\n    // transmitting a single request to use "store" mode.\n    p.put(Packer.DEFLATE_HINT, Packer.FALSE);\n    // discard debug attributes\n    p.put(Packer.CODE_ATTRIBUTE_PFX+"LineNumberTable", Packer.STRIP);\n    // throw an error if an attribute is unrecognized\n    p.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR);\n    // pass one class file uncompressed:\n    p.put(Packer.PASS_FILE_PFX+0, "mutants/Rogue.class");\n    try {\n        JarFile jarFile = new JarFile("/tmp/testref.jar");\n        FileOutputStream fos = new FileOutputStream("/tmp/test.pack");\n        // Call the packer\n        packer.pack(jarFile, fos);\n        jarFile.close();\n        fos.close();\n        \n        File f = new File("/tmp/test.pack");\n        FileOutputStream fostream = new FileOutputStream("/tmp/test.jar");\n        JarOutputStream jostream = new JarOutputStream(fostream);\n        Unpacker unpacker = Pack200.newUnpacker();\n        // Call the unpacker\n        unpacker.unpack(f, jostream);\n        // Must explicitly close the output.\n        jostream.close();\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n    }\n </pre></blockquote>\n <p>\n A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers.\n The deployment applications can use "Accept-Encoding=pack200-gzip". This \n indicates to the server that the client application desires a version of\n the file encoded with Pack200 and further compressed with gzip. Please \n refer to  <a href="{@docRoot}/../technotes/guides/deployment/deployment-guide/pack200.html">Java Deployment Guide</a> for more details and \n techniques.\n <p>\n Unless otherwise noted, passing a <tt>null</tt> argument to a constructor or\n method in this class will cause a {@link NullPointerException} to be thrown.\n\n @author John Rose\n @author Kumar Srinivasan\n @version 1.17, 03/23/10\n @since 1.5\n"
18839,method,java/util/jar/Pack200/Packer/properties/," Get the set of this engine's properties.\n This set is a "live view", so that changing its\n contents immediately affects the Packer engine, and\n changes from the engine (such as progress indications)\n are immediately visible in the map.\n\n <p>The property map may contain pre-defined implementation\n specific and default properties.  Users are encouraged to\n read the information and fully understand the implications,\n before modifying pre-existing properties.\n <p>\n Implementation specific properties are prefixed with a\n package name associated with the implementor, beginning\n with <tt>com.</tt> or a similar prefix.\n All property names beginning with <tt>pack.</tt> and\n <tt>unpack.</tt> are reserved for use by this API.\n <p>\n Unknown properties may be ignored or rejected with an\n unspecified error, and invalid entries may cause an\n unspecified error to be thrown.\n\n <p>\n The returned map implements all optional {@link SortedMap} operations\n @return A sorted association of property key strings to property \n values.\n"
18841,method,java/util/jar/Pack200/Packer/pack/JarInputStream;OutputStream," Takes a JarInputStream and converts it into a Pack200 archive.\n <p>\n Closes its input but not its output.  (Pack200 archives are appendable.)\n <p>\n The modification time and deflation hint attributes are not available,\n for the JAR manifest file and its containing directory.\n\n @see #MODIFICATION_TIME\n @see #DEFLATE_HINT\n @param in a JarInputStream\n @param out an OutputStream\n @exception IOException if an error is encountered.\n"
18842,method,java/util/jar/Pack200/Packer/addPropertyChangeListener/PropertyChangeListener," Registers a listener for PropertyChange events on the properties map.\n This is typically used by applications to update a progress bar.\n\n @see #properties\n @see #PROGRESS\n @param listener  An object to be invoked when a property is changed.\n"
18844,field,java/util/jar/Pack200/Packer/SEGMENT_LIMIT," This property is a numeral giving the estimated target size N\n (in bytes) of each archive segment.\n If a single input file requires more than N bytes,\n it will be given its own archive segment.\n <p>\n As a special case, a value of -1 will produce a single large\n segment with all input files, while a value of 0 will\n produce one segment for each class.\n Larger archive segments result in less fragmentation and\n better compression, but processing them requires more memory.\n <p>\n The size of each segment is estimated by counting the size of each\n input file to be transmitted in the segment, along with the size\n of its name and other transmitted properties.\n <p>\n The default is 1000000 (a million bytes).  This allows input JAR files\n of moderate size to be transmitted in one segment.  It also puts\n a limit on memory requirements for packers and unpackers.\n <p>\n A 10Mb JAR packed without this limit will\n typically pack about 10% smaller, but the packer may require\n a larger Java heap (about ten times the segment limit).\n"
18845,field,java/util/jar/Pack200/Packer/KEEP_FILE_ORDER," If this property is set to {@link #TRUE}, the packer will transmit\n all elements in their original order within the source archive.\n <p>\n If it is set to {@link #FALSE}, the packer may reorder elements,\n and also remove JAR directory entries, which carry no useful\n information for Java applications.\n (Typically this enables better compression.)\n <p>\n The default is {@link #TRUE}, which preserves the input information,\n but may cause the transmitted archive to be larger than necessary.\n"
18847,field,java/util/jar/Pack200/Packer/DEFLATE_HINT," If this property is set to {@link #TRUE} or {@link #FALSE}, the packer\n will set the deflation hint accordingly in the output archive, and\n will not transmit the individual deflation hints of archive elements.\n <p>\n If this property is set to the special string {@link #KEEP}, the packer\n will attempt to determine an independent deflation hint for each\n available element of the input archive, and transmit this hint separately.\n <p>\n The default is {@link #KEEP}, which preserves the input information,\n but may cause the transmitted archive to be larger than necessary.\n <p>\n It is up to the unpacker implementation\n to take action upon the hint to suitably compress the elements of\n the resulting unpacked jar.\n <p>\n The deflation hint of a ZIP or JAR element indicates\n whether the element was deflated or stored directly.\n"
18848,field,java/util/jar/Pack200/Packer/MODIFICATION_TIME," If this property is set to the special string {@link #LATEST},\n the packer will attempt to determine the latest modification time,\n among all the available entries in the original archive or the latest\n modification time of all the available entries in each segment.\n This single value will be transmitted as part of the segment and applied\n to all the entries in each segment, {@link #SEGMENT_LIMIT}.\n <p>\n This can marginally decrease the transmitted size of the\n archive, at the expense of setting all installed files to a single\n date.\n <p>\n If this property is set to the special string {@link #KEEP},\n the packer transmits a separate modification time for each input\n element.\n <p>\n The default is {@link #KEEP}, which preserves the input information,\n but may cause the transmitted archive to be larger than necessary.\n <p>\n It is up to the unpacker implementation to take action to suitably\n set the modification time of each element of its output file.\n @see #SEGMENT_LIMIT\n"
18850,field,java/util/jar/Pack200/Packer/UNKNOWN_ATTRIBUTE," Indicates the action to take when a class-file containing an unknown\n attribute is encountered.  Possible values are the strings {@link #ERROR},\n {@link #STRIP}, and {@link #PASS}.\n <p>\n The string {@link #ERROR} means that the pack operation\n as a whole will fail, with an exception of type <code>IOException</code>.\n The string\n {@link #STRIP} means that the attribute will be dropped.\n The string\n {@link #PASS} means that the whole class-file will be passed through\n (as if it were a resource file) without compression, with  a suitable warning.\n This is the default value for this property.\n <p>\n Examples:\n <pre><code>\n     Map p = pack200.getProperties();\n     p.put(UNKNOWN_ATTRIBUTE, ERROR);\n     p.put(UNKNOWN_ATTRIBUTE, STRIP);\n     p.put(UNKNOWN_ATTRIBUTE, PASS);\n </pre></code>\n"
18851,field,java/util/jar/Pack200/Packer/CLASS_ATTRIBUTE_PFX," When concatenated with a class attribute name,\n indicates the format of that attribute,\n using the layout language specified in the JSR 200 specification.\n <p>\n For example, the effect of this option is built in:\n <code>pack.class.attribute.SourceFile=RUH</code>.\n <p>\n The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS} are\n also allowed, with the same meaning as {@link #UNKNOWN_ATTRIBUTE}.\n This provides a way for users to request that specific attributes be\n refused, stripped, or passed bitwise (with no class compression).\n <p>\n Code like this might be used to support attributes for JCOV:\n <pre><code>\n     Map p = packer.properties();\n     p.put(CODE_ATTRIBUTE_PFX+"CoverageTable",       "NH[PHHII]");\n     p.put(CODE_ATTRIBUTE_PFX+"CharacterRangeTable", "NH[PHPOHIIH]");\n     p.put(CLASS_ATTRIBUTE_PFX+"SourceID",           "RUH");\n     p.put(CLASS_ATTRIBUTE_PFX+"CompilationID",      "RUH");\n </code></pre>\n <p>\n Code like this might be used to strip debugging attributes:\n <pre><code>\n     Map p = packer.properties();\n     p.put(CODE_ATTRIBUTE_PFX+"LineNumberTable",    STRIP);\n     p.put(CODE_ATTRIBUTE_PFX+"LocalVariableTable", STRIP);\n     p.put(CLASS_ATTRIBUTE_PFX+"SourceFile",        STRIP);\n </code></pre>\n"
18852,field,java/util/jar/Pack200/Packer/FIELD_ATTRIBUTE_PFX," When concatenated with a field attribute name,\n indicates the format of that attribute.\n For example, the effect of this option is built in:\n <code>pack.field.attribute.Deprecated=</code>.\n The special strings {@link #ERROR}, {@link #STRIP}, and\n {@link #PASS} are also allowed.\n @see #CLASS_ATTRIBUTE_PFX\n"
18853,field,java/util/jar/Pack200/Packer/METHOD_ATTRIBUTE_PFX," When concatenated with a method attribute name,\n indicates the format of that attribute.\n For example, the effect of this option is built in:\n <code>pack.method.attribute.Exceptions=NH[RCH]</code>.\n The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}\n are also allowed.\n @see #CLASS_ATTRIBUTE_PFX\n"
18854,field,java/util/jar/Pack200/Packer/CODE_ATTRIBUTE_PFX," When concatenated with a code attribute name,\n indicates the format of that attribute.\n For example, the effect of this option is built in:\n <code>pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]</code>.\n The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}\n are also allowed.\n @see #CLASS_ATTRIBUTE_PFX\n"
18859,field,java/util/jar/Pack200/Packer/ERROR,"The string "error", a possible value for certain properties.\n @see #UNKNOWN_ATTRIBUTE\n @see #CLASS_ATTRIBUTE_PFX\n @see #FIELD_ATTRIBUTE_PFX\n @see #METHOD_ATTRIBUTE_PFX\n @see #CODE_ATTRIBUTE_PFX\n"
18864,method,java/util/jar/Pack200/Unpacker/properties/," Get the set of this engine's properties. This set is \n a "live view", so that changing its\n contents immediately affects the Packer engine, and\n changes from the engine (such as progress indications)\n are immediately visible in the map.\n\n <p>The property map may contain pre-defined implementation\n specific and default properties.  Users are encouraged to\n read the information and fully understand the implications,\n before modifying pre-existing properties.\n <p>\n Implementation specific properties are prefixed with a\n package name associated with the implementor, beginning\n with <tt>com.</tt> or a similar prefix.\n All property names beginning with <tt>pack.</tt> and\n <tt>unpack.</tt> are reserved for use by this API.\n <p>\n Unknown properties may be ignored or rejected with an\n unspecified error, and invalid entries may cause an\n unspecified error to be thrown.\n\n @return A sorted association of option key strings to option values.\n"
18866,method,java/util/jar/Pack200/Unpacker/unpack/File;JarOutputStream," Read a Pack200 archive, and write the encoded JAR to\n a JarOutputStream.\n <p>\n Does not close its output.  (The output can accumulate more elements.)\n @param in a File.\n @param out a JarOutputStream.\n @exception IOException if an error is encountered.\n"
18867,method,java/util/jar/Pack200/Unpacker/addPropertyChangeListener/PropertyChangeListener," Registers a listener for PropertyChange events on the properties map.\n This is typically used by applications to update a progress bar.\n\n @see #properties\n @see #PROGRESS\n @param listener  An object to be invoked when a property is changed.\n"
18872,field,java/util/jar/Pack200/Unpacker/DEFLATE_HINT," Property indicating that the unpacker should\n ignore all transmitted values for DEFLATE_HINT,\n replacing them by the given value, {@link #TRUE} or {@link #FALSE}.\n The default value is the special string {@link #KEEP},\n which asks the unpacker to preserve all transmitted\n deflation hints.\n"
18877,method,java/util/jar/Manifest/getAttributes/String," Returns the Attributes for the specified entry name.\n This method is defined as:\n <pre>\n	    return (Attributes)getEntries().get(name)\n </pre>\n Though {@code null} is a valid {@code name}, when\n {@code getAttributes(null)} is invoked on a {@code Manifest}\n obtained from a jar file, {@code null} will be returned.  While jar\n files themselves do not allow {@code null}-named attributes, it is\n possible to invoke {@link #getEntries} on a {@code Manifest}, and\n on that result, invoke {@code put} with a null key and an\n arbitrary value.  Subsequent invocations of\n {@code getAttributes(null)} will return the just-{@code put}\n value.\n <p>\n Note that this method does not return the manifest's main attributes;\n see {@link #getMainAttributes}.\n\n @param name entry name\n @return the Attributes for the specified entry name\n"
18880,method,java/util/jar/Manifest/read/InputStream," Reads the Manifest from the specified InputStream. The entry\n names and attributes read will be merged in with the current\n manifest entries.\n\n @param is the input stream\n @exception IOException if an I/O error has occurred\n"
18885,method,java/util/jar/Manifest/Manifest/InputStream," Constructs a new Manifest from the specified input stream.\n\n @param is the input stream containing manifest data\n @throws IOException if an I/O error has occured\n"
18887,class,java/util/jar/JarOutputStream," The <code>JarOutputStream</code> class is used to write the contents\n of a JAR file to any output stream. It extends the class\n <code>java.util.zip.ZipOutputStream</code> with support\n for writing an optional <code>Manifest</code> entry. The\n <code>Manifest</code> can be used to specify meta-information about\n the JAR file and its entries.\n\n @author  David Connelly\n @version 1.25, 03/23/10\n @see	    Manifest\n @see	    java.util.zip.ZipOutputStream\n @since   1.2\n"
18888,method,java/util/jar/JarOutputStream/putNextEntry/ZipEntry," Begins writing a new JAR file entry and positions the stream\n to the start of the entry data. This method will also close\n any previous entry. The default compression method will be\n used if no compression method was specified for the entry.\n The current time will be used if the entry has no set modification\n time.\n\n @param ze the ZIP/JAR entry to be written\n @exception ZipException if a ZIP error has occurred\n @exception IOException if an I/O error has occurred\n"
18889,method,java/util/jar/JarOutputStream/JarOutputStream/OutputStream;Manifest," Creates a new <code>JarOutputStream</code> with the specified\n <code>Manifest</code>. The manifest is written as the first\n entry to the output stream.\n\n @param out the actual output stream\n @param man the optional <code>Manifest</code>\n @exception IOException if an I/O error has occurred\n"
18890,method,java/util/jar/JarOutputStream/JarOutputStream/OutputStream," Creates a new <code>JarOutputStream</code> with no manifest.\n @param out the actual output stream\n @exception IOException if an I/O error has occurred\n"
18891,class,java/util/jar/JarInputStream," The <code>JarInputStream</code> class is used to read the contents of\n a JAR file from any input stream. It extends the class\n <code>java.util.zip.ZipInputStream</code> with support for reading\n an optional <code>Manifest</code> entry. The <code>Manifest</code>\n can be used to store meta-information about the JAR file and its entries.\n\n @author  David Connelly\n @version 1.38, 03/23/10\n @see	    Manifest\n @see	    java.util.zip.ZipInputStream\n @since   1.2\n"
18893,method,java/util/jar/JarInputStream/getNextEntry/," Reads the next ZIP file entry and positions the stream at the\n beginning of the entry data. If verification has been enabled,\n any invalid signature detected while positioning the stream for\n the next entry will result in an exception.\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n @exception SecurityException if any of the jar file entries\n         are incorrectly signed.\n"
18894,method,java/util/jar/JarInputStream/getNextJarEntry/," Reads the next JAR file entry and positions the stream at the\n beginning of the entry data. If verification has been enabled,\n any invalid signature detected while positioning the stream for\n the next entry will result in an exception.\n @return the next JAR file entry, or null if there are no more entries\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n @exception SecurityException if any of the jar file entries\n         are incorrectly signed.\n"
18895,method,java/util/jar/JarInputStream/read/byte[];int;int," Reads from the current JAR file entry into an array of bytes.\n If <code>len</code> is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and <code>0</code> is returned.\n If verification has been enabled, any invalid signature\n on the current entry will be reported at some point before the\n end of the entry is reached.\n @param b the buffer into which the data is read\n @param off the start offset in the destination array <code>b</code>\n @param len the maximum number of bytes to read\n @return the actual number of bytes read, or -1 if the end of the\n         entry is reached\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>b.length - off</code>\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n @exception SecurityException if any of the jar file entries\n         are incorrectly signed.\n"
18897,method,java/util/jar/JarInputStream/JarInputStream/InputStream," Creates a new <code>JarInputStream</code> and reads the optional\n manifest. If a manifest is present, also attempts to verify\n the signatures if the JarInputStream is signed.\n @param in the actual input stream\n @exception IOException if an I/O error has occurred\n"
18898,method,java/util/jar/JarInputStream/JarInputStream/InputStream;boolean," Creates a new <code>JarInputStream</code> and reads the optional\n manifest. If a manifest is present and verify is true, also attempts \n to verify the signatures if the JarInputStream is signed.\n\n @param in the actual input stream\n @param verify whether or not to verify the JarInputStream if\n it is signed.\n @exception IOException if an I/O error has occurred\n"
18900,method,java/util/jar/JarFile/getManifest/," Returns the jar file manifest, or <code>null</code> if none.\n\n @return the jar file manifest, or <code>null</code> if none\n\n @throws IllegalStateException\n         may be thrown if the jar file has been closed\n"
18901,method,java/util/jar/JarFile/getJarEntry/String," Returns the <code>JarEntry</code> for the given entry name or\n <code>null</code> if not found.\n\n @param name the jar file entry name\n @return the <code>JarEntry</code> for the given entry name or\n         <code>null</code> if not found.\n\n @throws IllegalStateException\n         may be thrown if the jar file has been closed\n\n @see java.util.jar.JarEntry\n"
18902,method,java/util/jar/JarFile/getEntry/String," Returns the <code>ZipEntry</code> for the given entry name or\n <code>null</code> if not found.\n\n @param name the jar file entry name\n @return the <code>ZipEntry</code> for the given entry name or\n         <code>null</code> if not found\n\n @throws IllegalStateException\n         may be thrown if the jar file has been closed\n\n @see java.util.zip.ZipEntry\n"
18904,method,java/util/jar/JarFile/getInputStream/ZipEntry," Returns an input stream for reading the contents of the specified\n zip file entry.\n @param ze the zip file entry\n @return an input stream for reading the contents of the specified\n         zip file entry\n @throws ZipException if a zip file format error has occurred\n @throws IOException if an I/O error has occurred\n @throws SecurityException if any of the jar file entries\n         are incorrectly signed.\n @throws IllegalStateException\n         may be thrown if the jar file has been closed\n"
18905,method,java/util/jar/JarFile/JarFile/String," Creates a new <code>JarFile</code> to read from the specified\n file <code>name</code>. The <code>JarFile</code> will be verified if\n it is signed.\n @param name the name of the jar file to be opened for reading\n @throws IOException if an I/O error has occurred\n @throws SecurityException if access to the file is denied\n         by the SecurityManager\n"
18906,method,java/util/jar/JarFile/JarFile/String;boolean," Creates a new <code>JarFile</code> to read from the specified\n file <code>name</code>.\n @param name the name of the jar file to be opened for reading\n @param verify whether or not to verify the jar file if\n it is signed.\n @throws IOException if an I/O error has occurred\n @throws SecurityException if access to the file is denied\n         by the SecurityManager \n"
18907,method,java/util/jar/JarFile/JarFile/File," Creates a new <code>JarFile</code> to read from the specified\n <code>File</code> object. The <code>JarFile</code> will be verified if\n it is signed.\n @param file the jar file to be opened for reading\n @throws IOException if an I/O error has occurred\n @throws SecurityException if access to the file is denied\n         by the SecurityManager\n"
18908,method,java/util/jar/JarFile/JarFile/File;boolean," Creates a new <code>JarFile</code> to read from the specified\n <code>File</code> object.\n @param file the jar file to be opened for reading\n @param verify whether or not to verify the jar file if\n it is signed.\n @throws IOException if an I/O error has occurred\n @throws SecurityException if access to the file is denied\n         by the SecurityManager.\n"
18911,class,java/util/jar/JarException," Signals that an error of some sort has occurred while reading from\n or writing to a JAR file.\n\n @author  David Connelly\n @version 1.14, 03/23/10\n @since   1.2\n"
18916,method,java/util/jar/JarEntry/getCertificates/," Returns the <code>Certificate</code> objects for this entry, or\n <code>null</code> if none. This method can only be called once\n the <code>JarEntry</code> has been completely verified by reading\n from the entry input stream until the end of the stream has been\n reached. Otherwise, this method will return <code>null</code>.\n\n <p>The returned certificate array comprises all the signer certificates\n that were used to verify this entry. Each signer certificate is\n followed by its supporting certificate chain (which may be empty).\n Each signer certificate and its supporting certificate chain are ordered\n bottom-to-top (i.e., with the signer certificate first and the (root)\n certificate authority last).\n\n @return the <code>Certificate</code> objects for this entry, or\n <code>null</code> if none.\n"
18917,method,java/util/jar/JarEntry/getCodeSigners/," Returns the <code>CodeSigner</code> objects for this entry, or\n <code>null</code> if none. This method can only be called once\n the <code>JarEntry</code> has been completely verified by reading\n from the entry input stream until the end of the stream has been\n reached. Otherwise, this method will return <code>null</code>.\n\n <p>The returned array comprises all the code signers that have signed\n this entry. \n\n @return the <code>CodeSigner</code> objects for this entry, or\n <code>null</code> if none.\n\n @since 1.5\n"
18921,class,java/util/jar/Attributes," The Attributes class maps Manifest attribute names to associated string\n values. Valid attribute names are case-insensitive, are restricted to \n the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 \n characters in length. Attribute values can contain any characters and \n will be UTF8-encoded when written to the output stream.  See the \n <a href="../../../../technotes/guides/jar/jar.html">JAR File Specification</a> \n for more information about valid attribute names and values.\n\n @author  David Connelly\n @version 1.57, 03/23/10\n @see	    Manifest\n @since   1.2\n"
18944,class,java/util/jar/Attributes/Name," The Attributes.Name class represents an attribute name stored in\n this Map. Valid attribute names are case-insensitive, are restricted \n to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed \n 70 characters in length. Attribute values can contain any characters \n and will be UTF8-encoded when written to the output stream.  See the \n <a href="../../../../technotes/guides/jar/jar.html">JAR File Specification</a> \n for more information about valid attribute names and values.\n"
18970,method,java/util/zip/ZipOutputStream/putNextEntry/ZipEntry," Begins writing a new ZIP file entry and positions the stream to the\n start of the entry data. Closes the current entry if still active.\n The default compression method will be used if no compression method\n was specified for the entry, and the current time will be used if\n the entry has no set modification time.\n @param e the ZIP entry to be written\n @exception ZipException if a ZIP format error has occurred\n @exception IOException if an I/O error has occurred\n"
18972,method,java/util/zip/ZipOutputStream/write/byte[];int;int," Writes an array of bytes to the current ZIP entry data. This method\n will block until all the bytes are written.\n @param b the data to be written\n @param off the start offset in the data\n @param len the number of bytes that are written\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n"
18973,method,java/util/zip/ZipOutputStream/finish/," Finishes writing the contents of the ZIP output stream without closing\n the underlying stream. Use this method when applying multiple filters\n in succession to the same output stream.\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O exception has occurred\n"
18974,method,java/util/zip/ZipOutputStream/close/," Closes the ZIP output stream as well as the stream being filtered.\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n"
18979,method,java/util/zip/ZipInputStream/getNextEntry/," Reads the next ZIP file entry and positions the stream at the\n beginning of the entry data.\n @return the next ZIP file entry, or null if there are no more entries\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n"
18980,method,java/util/zip/ZipInputStream/closeEntry/," Closes the current ZIP entry and positions the stream for reading the\n next entry.\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n"
18981,method,java/util/zip/ZipInputStream/available/," Returns 0 after EOF has reached for the current entry data,\n otherwise always return 1.\n <p>\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking.\n\n @return     1 before EOF and 0 after EOF has reached for current entry.\n @exception  IOException  if an I/O error occurs.\n\n"
18982,method,java/util/zip/ZipInputStream/read/byte[];int;int," Reads from the current ZIP entry into an array of bytes.\n If <code>len</code> is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and <code>0</code> is returned.\n @param b the buffer into which the data is read\n @param off the start offset in the destination array <code>b</code>\n @param len the maximum number of bytes read\n @return the actual number of bytes read, or -1 if the end of the\n         entry is reached\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative,\n <code>len</code> is negative, or <code>len</code> is greater than\n <code>b.length - off</code>\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n"
18983,method,java/util/zip/ZipInputStream/skip/long," Skips specified number of bytes in the current ZIP entry.\n @param n the number of bytes to skip\n @return the actual number of bytes skipped\n @exception ZipException if a ZIP file error has occurred\n @exception IOException if an I/O error has occurred\n @exception IllegalArgumentException if n < 0\n"
18984,method,java/util/zip/ZipInputStream/close/," Closes this input stream and releases any system resources associated\n with the stream.\n @exception IOException if an I/O error has occurred\n"
18987,class,java/util/zip/ZipFile," This class is used to read entries from a zip file.\n\n <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor\n or method in this class will cause a {@link NullPointerException} to be\n thrown.\n\n @version   1.78, 07/31/06\n @author	David Connelly\n"
18989,method,java/util/zip/ZipFile/getInputStream/ZipEntry," Returns an input stream for reading the contents of the specified\n zip file entry.\n\n <p> Closing this ZIP file will, in turn, close all input\n streams that have been returned by invocations of this method.\n\n @param entry the zip file entry\n @return the input stream for reading the contents of the specified\n zip file entry.\n @throws ZipException if a ZIP format error has occurred\n @throws IOException if an I/O error has occurred\n @throws IllegalStateException if the zip file has been closed\n"
18993,method,java/util/zip/ZipFile/close/," Closes the ZIP file.\n <p> Closing this ZIP file will close all of the input streams\n previously returned by invocations of the {@link #getInputStream\n getInputStream} method.\n\n @throws IOException if an I/O error has occurred\n"
18995,method,java/util/zip/ZipFile/ZipFile/String," Opens a zip file for reading.\n\n <p>First, if there is a security\n manager, its <code>checkRead</code> method\n is called with the <code>name</code> argument\n as its argument to ensure the read is allowed.\n\n @param name the name of the zip file\n @throws ZipException if a ZIP format error has occurred\n @throws IOException if an I/O error has occurred\n @throws SecurityException if a security manager exists and its\n         <code>checkRead</code> method doesn't allow read access to the file.\n @see SecurityManager#checkRead(java.lang.String)\n"
18997,method,java/util/zip/ZipFile/ZipFile/File," Opens a ZIP file for reading given the specified File object.\n @param file the ZIP file to be opened for reading\n @throws ZipException if a ZIP error has occurred\n @throws IOException if an I/O error has occurred\n"
18999,field,java/util/zip/ZipFile/OPEN_DELETE," Mode flag to open a zip file and mark it for deletion.  The file will be\n deleted some time between the moment that it is opened and the moment\n that it is closed, but its contents will remain accessible via the\n <tt>ZipFile</tt> object until either the close method is invoked or the\n virtual machine exits.\n"
19001,method,java/util/zip/ZipException/ZipException/," Constructs an <code>ZipException</code> with <code>null</code> \n as its error detail message. \n"
19003,class,java/util/zip/ZipError," Signals that an unrecoverable error has occurred.\n\n @author  Dave Bristor\n @version 1.2, 03/23/10\n @since   1.6\n"
19030,method,java/util/zip/InflaterOutputStream/close/," Writes any remaining uncompressed data to the output stream and closes\n the underlying output stream.\n\n @throws IOException if an I/O error occurs\n"
19031,method,java/util/zip/InflaterOutputStream/flush/," Flushes this output stream, forcing any pending buffered output bytes to be\n written.\n\n @throws IOException if an I/O error occurs or this stream is already\n closed\n"
19032,method,java/util/zip/InflaterOutputStream/finish/," Finishes writing uncompressed data to the output stream without closing\n the underlying stream.  Use this method when applying multiple filters in\n succession to the same output stream.\n\n @throws IOException if an I/O error occurs or this stream is already\n closed\n"
19033,method,java/util/zip/InflaterOutputStream/write/int," Writes a byte to the uncompressed output stream.\n\n @param b a single byte of compressed data to decompress and write to\n the output stream\n @throws IOException if an I/O error occurs or this stream is already\n closed\n @throws ZipException if a compression (ZIP) format error occurs\n"
19041,method,java/util/zip/InflaterInputStream/read/," Reads a byte of uncompressed data. This method will block until\n enough input is available for decompression.\n @return the byte read, or -1 if end of compressed input is reached\n @exception IOException if an I/O error has occurred\n"
19042,method,java/util/zip/InflaterInputStream/read/byte[];int;int," Reads uncompressed data into an array of bytes. If <code>len</code> is not\n zero, the method will block until some input can be decompressed; otherwise,\n no bytes are read and <code>0</code> is returned.\n @param b the buffer into which the data is read\n @param off the start offset in the destination array <code>b</code>\n @param len the maximum number of bytes read\n @return the actual number of bytes read, or -1 if the end of the\n         compressed input is reached or a preset dictionary is needed\n @exception  NullPointerException If <code>b</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>b.length - off</code>\n @exception ZipException if a ZIP format error has occurred\n @exception IOException if an I/O error has occurred\n"
19044,method,java/util/zip/InflaterInputStream/skip/long," Skips specified number of bytes of uncompressed data.\n @param n the number of bytes to skip\n @return the actual number of bytes skipped.\n @exception IOException if an I/O error has occurred\n @exception IllegalArgumentException if n < 0\n"
19045,method,java/util/zip/InflaterInputStream/close/," Closes this input stream and releases any system resources associated\n with the stream.\n @exception IOException if an I/O error has occurred\n"
19046,method,java/util/zip/InflaterInputStream/fill/," Fills input buffer with more data to decompress.\n @exception IOException if an I/O error has occurred\n"
19048,method,java/util/zip/InflaterInputStream/mark/int," Marks the current position in this input stream.\n\n <p> The <code>mark</code> method of <code>InflaterInputStream</code>\n does nothing.\n\n @param   readlimit   the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n @see     java.io.InputStream#reset()\n"
19049,method,java/util/zip/InflaterInputStream/reset/," Repositions this stream to the position at the time the\n <code>mark</code> method was last called on this input stream.\n\n <p> The method <code>reset</code> for class\n <code>InflaterInputStream</code> does nothing except throw an\n <code>IOException</code>.\n\n @exception  IOException  if this method is invoked.\n @see     java.io.InputStream#mark(int)\n @see     java.io.IOException\n"
19061,method,java/util/zip/Inflater/getRemaining/," Returns the total number of bytes remaining in the input buffer.\n This can be used to find out what bytes still remain in the input\n buffer after decompression has finished.\n @return the total number of bytes remaining in the input buffer\n"
19062,method,java/util/zip/Inflater/needsInput/," Returns true if no data remains in the input buffer. This can\n be used to determine if #setInput should be called in order\n to provide more input.\n @return true if no data remains in the input buffer\n"
19068,method,java/util/zip/Inflater/getTotalIn/," Returns the total number of compressed bytes input so far.\n\n <p>Since the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesRead()} method is now\n the preferred means of obtaining this information.</p>\n\n @return the total number of compressed bytes input so far\n"
19070,method,java/util/zip/Inflater/getTotalOut/," Returns the total number of uncompressed bytes output so far.\n\n <p>Since the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now\n the preferred means of obtaining this information.</p>\n\n @return the total number of uncompressed bytes output so far\n"
19078,method,java/util/zip/GZIPOutputStream/write/byte[];int;int," Writes array of bytes to the compressed output stream. This method\n will block until all the bytes are written.\n @param buf the data to be written\n @param off the start offset of the data\n @param len the length of the data\n @exception IOException If an I/O error has occurred.\n"
19079,method,java/util/zip/GZIPOutputStream/finish/," Finishes writing compressed data to the output stream without closing\n the underlying stream. Use this method when applying multiple filters\n in succession to the same output stream.\n @exception IOException if an I/O error has occurred\n"
19080,method,java/util/zip/GZIPOutputStream/GZIPOutputStream/OutputStream;int," Creates a new output stream with the specified buffer size.\n @param out the output stream\n @param size the output buffer size\n @exception IOException If an I/O error has occurred.\n @exception IllegalArgumentException if size is <= 0\n"
19081,method,java/util/zip/GZIPOutputStream/GZIPOutputStream/OutputStream," Creates a new output stream with a default buffer size.\n @param out the output stream\n @exception IOException If an I/O error has occurred.\n"
19084,method,java/util/zip/GZIPInputStream/read/byte[];int;int," Reads uncompressed data into an array of bytes. If <code>len</code> is not\n zero, the method will block until some input can be decompressed; otherwise,\n no bytes are read and <code>0</code> is returned.\n @param buf the buffer into which the data is read\n @param off the start offset in the destination array <code>b</code>\n @param len the maximum number of bytes read\n @return	the actual number of bytes read, or -1 if the end of the\n		compressed input stream is reached\n @exception  NullPointerException If <code>buf</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>buf.length - off</code>\n @exception IOException if an I/O error has occurred or the compressed\n			      input data is corrupt\n"
19085,method,java/util/zip/GZIPInputStream/close/," Closes this input stream and releases any system resources associated\n with the stream.\n @exception IOException if an I/O error has occurred\n"
19086,method,java/util/zip/GZIPInputStream/GZIPInputStream/InputStream;int," Creates a new input stream with the specified buffer size.\n @param in the input stream\n @param size the input buffer size\n @exception IOException if an I/O error has occurred\n @exception IllegalArgumentException if size is <= 0\n"
19087,method,java/util/zip/GZIPInputStream/GZIPInputStream/InputStream," Creates a new input stream with a default buffer size.\n @param in the input stream\n @exception IOException if an I/O error has occurred\n"
19092,method,java/util/zip/DeflaterOutputStream/write/int," Writes a byte to the compressed output stream. This method will\n block until the byte can be written.\n @param b the byte to be written\n @exception IOException if an I/O error has occurred\n"
19093,method,java/util/zip/DeflaterOutputStream/write/byte[];int;int," Writes an array of bytes to the compressed output stream. This\n method will block until all the bytes are written.\n @param b the data to be written\n @param off the start offset of the data\n @param len the length of the data\n @exception IOException if an I/O error has occurred\n"
19094,method,java/util/zip/DeflaterOutputStream/finish/," Finishes writing compressed data to the output stream without closing\n the underlying stream. Use this method when applying multiple filters\n in succession to the same output stream.\n @exception IOException if an I/O error has occurred\n"
19095,method,java/util/zip/DeflaterOutputStream/close/," Writes remaining compressed data to the output stream and closes the\n underlying stream.\n @exception IOException if an I/O error has occurred\n"
19096,method,java/util/zip/DeflaterOutputStream/deflate/," Writes next block of compressed data to the output stream.\n @throws IOException if an I/O error has occurred\n"
19103,method,java/util/zip/DeflaterInputStream/close/," Closes this input stream and its underlying input stream, discarding\n any pending uncompressed data.\n\n @throws IOException if an I/O error occurs\n"
19104,method,java/util/zip/DeflaterInputStream/read/," Reads a single byte of compressed data from the input stream.\n This method will block until some input can be read and compressed.\n\n @return a single byte of compressed data, or -1 if the end of the\n uncompressed input stream is reached\n @throws IOException if an I/O error occurs or if this stream is\n already closed\n"
19105,method,java/util/zip/DeflaterInputStream/read/byte[];int;int," Reads compressed data into a byte array.\n This method will block until some input can be read and compressed.\n\n @param b buffer into which the data is read\n @param off starting offset of the data within {@code b}\n @param len maximum number of compressed bytes to read into {@code b}\n @return the actual number of bytes read, or -1 if the end of the\n uncompressed input stream is reached\n @throws IndexOutOfBoundsException  if {@code len} > {@code b.length -\n off}\n @throws IOException if an I/O error occurs or if this input stream is\n already closed\n"
19106,method,java/util/zip/DeflaterInputStream/skip/long," Skips over and discards data from the input stream.\n This method may block until the specified number of bytes are read and\n skipped. <em>Note:</em> While {@code n} is given as a {@code long},\n the maximum number of bytes which can be skipped is\n {@code Integer.MAX_VALUE}.\n\n @param n number of bytes to be skipped\n @return the actual number of bytes skipped\n @throws IOException if an I/O error occurs or if this stream is\n already closed\n"
19107,method,java/util/zip/DeflaterInputStream/available/," Returns 0 after EOF has been reached, otherwise always return 1.\n <p>\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking\n @return zero after the end of the underlying input stream has been\n reached, otherwise always returns 1\n @throws IOException if an I/O error occurs or if this stream is\n already closed\n"
19109,method,java/util/zip/DeflaterInputStream/mark/int," <i>This operation is not supported</i>.\n\n @param limit maximum bytes that can be read before invalidating the position marker\n"
19120,method,java/util/zip/Deflater/setDictionary/byte[]," Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression.\n @param b the dictionary data bytes\n @see Inflater#inflate\n @see Inflater#getAdler\n"
19123,method,java/util/zip/Deflater/needsInput/," Returns true if the input data buffer is empty and setInput()\n should be called in order to provide more input.\n @return true if the input data buffer is empty and setInput()\n should be called in order to provide more input\n"
19124,method,java/util/zip/Deflater/finish/," When called, indicates that compression should end with the current\n contents of the input buffer.\n"
19126,method,java/util/zip/Deflater/deflate/byte[];int;int," Fills specified buffer with compressed data. Returns actual number\n of bytes of compressed data. A return value of 0 indicates that\n needsInput() should be called in order to determine if more input\n data is required.\n @param b the buffer for the compressed data\n @param off the start offset of the data\n @param len the maximum number of bytes of compressed data\n @return the actual number of bytes of compressed data\n"
19129,method,java/util/zip/Deflater/getTotalIn/," Returns the total number of uncompressed bytes input so far.\n\n <p>Since the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesRead()} method is now\n the preferred means of obtaining this information.</p>\n\n @return the total number of uncompressed bytes input so far\n"
19131,method,java/util/zip/Deflater/getTotalOut/," Returns the total number of compressed bytes output so far.\n\n <p>Since the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now\n the preferred means of obtaining this information.</p>\n\n @return the total number of compressed bytes output so far\n"
19139,field,java/util/zip/Deflater/DEFLATED," Compression method for the deflate algorithm (the only one currently\n supported).\n"
19142,field,java/util/zip/Deflater/BEST_COMPRESSION," Compression level for best compression.\n"
19144,field,java/util/zip/Deflater/FILTERED," Compression strategy best used for data consisting mostly of small\n values with a somewhat random distribution. Forces more Huffman coding\n and less string matching.\n"
19145,field,java/util/zip/Deflater/HUFFMAN_ONLY," Compression strategy for Huffman coding only.\n"
19147,class,java/util/zip/DataFormatException," Signals that a data format error has occurred.\n\n @version 	1.15, 03/23/10\n @author 	David Connelly\n"
19156,method,java/util/zip/CheckedOutputStream/write/int," Writes a byte. Will block until the byte is actually written.\n @param b the byte to be written\n @exception IOException if an I/O error has occurred\n"
19157,method,java/util/zip/CheckedOutputStream/write/byte[];int;int," Writes an array of bytes. Will block until the bytes are\n actually written.\n @param b the data to be written\n @param off the start offset of the data\n @param len the number of bytes to be written\n @exception IOException if an I/O error has occurred\n"
19161,method,java/util/zip/CheckedInputStream/read/," Reads a byte. Will block if no input is available.\n @return the byte read, or -1 if the end of the stream is reached.\n @exception IOException if an I/O error has occurred\n"
19162,method,java/util/zip/CheckedInputStream/read/byte[];int;int," Reads into an array of bytes. If <code>len</code> is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and <code>0</code> is returned.\n @param buf the buffer into which the data is read\n @param off the start offset in the destination array <code>b</code>\n @param len the maximum number of bytes read\n @return    the actual number of bytes read, or -1 if the end\n		  of the stream is reached.\n @exception  NullPointerException If <code>buf</code> is <code>null</code>.\n @exception  IndexOutOfBoundsException If <code>off</code> is negative, \n <code>len</code> is negative, or <code>len</code> is greater than \n <code>buf.length - off</code>\n @exception IOException if an I/O error has occurred\n"
19163,method,java/util/zip/CheckedInputStream/skip/long," Skips specified number of bytes of input.\n @param n the number of bytes to skip\n @return the actual number of bytes skipped\n @exception IOException if an I/O error has occurred\n"
19180,class,java/math/RoundingMode," Specifies a <i>rounding behavior</i> for numerical operations\n capable of discarding precision. Each rounding mode indicates how\n the least significant returned digit of a rounded result is to be\n calculated.  If fewer digits are returned than the digits needed to\n represent the exact numerical result, the discarded digits will be\n referred to as the <i>discarded fraction</i> regardless the digits'\n contribution to the value of the number.  In other words,\n considered as a numerical value, the discarded fraction could have\n an absolute value greater than one.\n\n <p>Each rounding mode description includes a table listing how\n different two-digit decimal values would round to a one digit\n decimal value under the rounding mode in question.  The result\n column in the tables could be gotten by creating a\n <tt>BigDecimal</tt> number with the specified value, forming a\n {@link MathContext} object with the proper settings\n (<tt>precision</tt> set to <tt>1</tt>, and the\n <tt>roundingMode</tt> set to the rounding mode in question), and\n calling {@link BigDecimal#round round} on this number with the\n proper <tt>MathContext</tt>.  A summary table showing the results\n of these rounding operations for all rounding modes appears below.\n\n<p>\n<table border>\n <caption top><h3>Summary of Rounding Operations Under Different Rounding Modes</h3></caption>\n <tr><th></th><th colspan=8>Result of rounding input to one digit with the given \n                           rounding mode</th>\n <tr valign=top>\n <th>Input Number</th>	 <th><tt>UP</tt></th> \n                                           <th><tt>DOWN</tt></th> \n                                                        <th><tt>CEILING</tt></th>\n                                                                       <th><tt>FLOOR</tt></th>\n                                                                                    <th><tt>HALF_UP</tt></th>\n                                                                                                   <th><tt>HALF_DOWN</tt></th>\n                                                                                                                    <th><tt>HALF_EVEN</tt></th>\n                                                                                                                                     <th><tt>UNNECESSARY</tt></th>\n    \n <tr align=right><td>5.5</td>	 <td>6</td>  <td>5</td>    <td>6</td>    <td>5</td>  <td>6</td>      <td>5</td>       <td>6</td>       <td>throw <tt>ArithmeticException</tt></td>\n <tr align=right><td>2.5</td>	 <td>3</td>  <td>2</td>    <td>3</td>    <td>2</td>  <td>3</td>      <td>2</td>       <td>2</td>       <td>throw <tt>ArithmeticException</tt></td>\n <tr align=right><td>1.6</td>	 <td>2</td>  <td>1</td>    <td>2</td> 	 <td>1</td>  <td>2</td>      <td>2</td>       <td>2</td>       <td>throw <tt>ArithmeticException</tt></td>\n <tr align=right><td>1.1</td>	 <td>2</td>  <td>1</td>    <td>2</td> 	 <td>1</td>  <td>1</td>      <td>1</td>       <td>1</td>       <td>throw <tt>ArithmeticException</tt></td>\n <tr align=right><td>1.0</td>	 <td>1</td>  <td>1</td>    <td>1</td> 	 <td>1</td>  <td>1</td>      <td>1</td>       <td>1</td>       <td>1</td>                                \n <tr align=right><td>-1.0</td> <td>-1</td> <td>-1</td>   <td>-1</td>	 <td>-1</td> <td>-1</td>     <td>-1</td>      <td>-1</td>      <td>-1</td>                               \n <tr align=right><td>-1.1</td> <td>-2</td> <td>-1</td>   <td>-1</td>	 <td>-2</td> <td>-1</td>     <td>-1</td>      <td>-1</td>      <td>throw <tt>ArithmeticException</tt></td>\n <tr align=right><td>-1.6</td> <td>-2</td> <td>-1</td>   <td>-1</td>	 <td>-2</td> <td>-2</td>     <td>-2</td>      <td>-2</td>      <td>throw <tt>ArithmeticException</tt></td>\n <tr align=right><td>-2.5</td> <td>-3</td> <td>-2</td>   <td>-2</td>	 <td>-3</td> <td>-3</td>     <td>-2</td>      <td>-2</td>      <td>throw <tt>ArithmeticException</tt></td>\n <tr align=right><td>-5.5</td> <td>-6</td> <td>-5</td>   <td>-5</td>	 <td>-6</td> <td>-6</td>     <td>-5</td>      <td>-6</td>      <td>throw <tt>ArithmeticException</tt></td>\n</table>\n\n \n <p>This <tt>enum</tt> is intended to replace the integer-based\n enumeration of rounding mode constants in {@link BigDecimal}\n ({@link BigDecimal#ROUND_UP}, {@link BigDecimal#ROUND_DOWN},\n etc. ).\n\n @see     BigDecimal\n @see     MathContext\n @version 1.x 01/xx/xx\n @author  Josh Bloch\n @author  Mike Cowlishaw\n @author  Joseph D. Darcy\n @since 1.5\n"
19184,field,java/math/RoundingMode/UP," Rounding mode to round away from zero.  Always increments the\n digit prior to a non-zero discarded fraction.  Note that this\n rounding mode never decreases the magnitude of the calculated\n value.\n\n<p>Example:\n<table border>\n<tr valign=top><th>Input Number</th>\n    <th>Input rounded to one digit<br> with <tt>UP</tt> rounding\n<tr align=right><td>5.5</td>	<td>6</td>\n<tr align=right><td>2.5</td>	<td>3</td>\n<tr align=right><td>1.6</td>	<td>2</td>\n<tr align=right><td>1.1</td>	<td>2</td>\n<tr align=right><td>1.0</td>	<td>1</td>\n<tr align=right><td>-1.0</td>	<td>-1</td>\n<tr align=right><td>-1.1</td>	<td>-2</td>\n<tr align=right><td>-1.6</td>	<td>-2</td>\n<tr align=right><td>-2.5</td>	<td>-3</td>\n<tr align=right><td>-5.5</td>	<td>-6</td>\n</table>\n"
19185,field,java/math/RoundingMode/DOWN," Rounding mode to round towards zero.  Never increments the digit\n prior to a discarded fraction (i.e., truncates).  Note that this\n rounding mode never increases the magnitude of the calculated value.\n\n<p>Example:\n<table border>\n<tr valign=top><th>Input Number</th>\n    <th>Input rounded to one digit<br> with <tt>DOWN</tt> rounding\n<tr align=right><td>5.5</td>	<td>5</td>\n<tr align=right><td>2.5</td>	<td>2</td>\n<tr align=right><td>1.6</td>	<td>1</td>\n<tr align=right><td>1.1</td>	<td>1</td>\n<tr align=right><td>1.0</td>	<td>1</td>\n<tr align=right><td>-1.0</td>	<td>-1</td>\n<tr align=right><td>-1.1</td>	<td>-1</td>\n<tr align=right><td>-1.6</td>	<td>-1</td>\n<tr align=right><td>-2.5</td>	<td>-2</td>\n<tr align=right><td>-5.5</td>	<td>-5</td>\n</table>\n"
19186,field,java/math/RoundingMode/CEILING," Rounding mode to round towards positive infinity.  If the\n result is positive, behaves as for <tt>RoundingMode.UP</tt>;\n if negative, behaves as for <tt>RoundingMode.DOWN</tt>.  Note\n that this rounding mode never decreases the calculated value.\n\n<p>Example:\n<table border>\n<tr valign=top><th>Input Number</th>\n    <th>Input rounded to one digit<br> with <tt>CEILING</tt> rounding\n<tr align=right><td>5.5</td>	<td>6</td>\n<tr align=right><td>2.5</td>	<td>3</td>\n<tr align=right><td>1.6</td>	<td>2</td>\n<tr align=right><td>1.1</td>	<td>2</td>\n<tr align=right><td>1.0</td>	<td>1</td>\n<tr align=right><td>-1.0</td>	<td>-1</td>\n<tr align=right><td>-1.1</td>	<td>-1</td>\n<tr align=right><td>-1.6</td>	<td>-1</td>\n<tr align=right><td>-2.5</td>	<td>-2</td>\n<tr align=right><td>-5.5</td>	<td>-5</td>\n</table>\n"
19187,field,java/math/RoundingMode/FLOOR," Rounding mode to round towards negative infinity.  If the\n result is positive, behave as for <tt>RoundingMode.DOWN</tt>;\n if negative, behave as for <tt>RoundingMode.UP</tt>.  Note that\n this rounding mode never increases the calculated value.\n\n<p>Example:\n<table border>\n<tr valign=top><th>Input Number</th>\n    <th>Input rounded to one digit<br> with <tt>FLOOR</tt> rounding\n<tr align=right><td>5.5</td>	<td>5</td>\n<tr align=right><td>2.5</td>	<td>2</td>\n<tr align=right><td>1.6</td>	<td>1</td>\n<tr align=right><td>1.1</td>	<td>1</td>\n<tr align=right><td>1.0</td>	<td>1</td>\n<tr align=right><td>-1.0</td>	<td>-1</td>\n<tr align=right><td>-1.1</td>	<td>-2</td>\n<tr align=right><td>-1.6</td>	<td>-2</td>\n<tr align=right><td>-2.5</td>	<td>-3</td>\n<tr align=right><td>-5.5</td>	<td>-6</td>\n</table>\n"
19188,field,java/math/RoundingMode/HALF_UP," Rounding mode to round towards &quot;nearest neighbor&quot;\n unless both neighbors are equidistant, in which case round up.\n Behaves as for <tt>RoundingMode.UP</tt> if the discarded\n fraction is &gt;= 0.5; otherwise, behaves as for\n <tt>RoundingMode.DOWN</tt>.  Note that this is the rounding\n mode commonly taught at school.\n\n<p>Example:\n<table border>\n<tr valign=top><th>Input Number</th>\n    <th>Input rounded to one digit<br> with <tt>HALF_UP</tt> rounding\n<tr align=right><td>5.5</td>	<td>6</td>\n<tr align=right><td>2.5</td>	<td>3</td>\n<tr align=right><td>1.6</td>	<td>2</td>\n<tr align=right><td>1.1</td>	<td>1</td>\n<tr align=right><td>1.0</td>	<td>1</td>\n<tr align=right><td>-1.0</td>	<td>-1</td>\n<tr align=right><td>-1.1</td>	<td>-1</td>\n<tr align=right><td>-1.6</td>	<td>-2</td>\n<tr align=right><td>-2.5</td>	<td>-3</td>\n<tr align=right><td>-5.5</td>	<td>-6</td>\n</table>\n"
19190,field,java/math/RoundingMode/HALF_EVEN," Rounding mode to round towards the &quot;nearest neighbor&quot;\n unless both neighbors are equidistant, in which case, round\n towards the even neighbor.  Behaves as for\n <tt>RoundingMode.HALF_UP</tt> if the digit to the left of the\n discarded fraction is odd; behaves as for\n <tt>RoundingMode.HALF_DOWN</tt> if it's even.  Note that this\n is the rounding mode that statistically minimizes cumulative\n error when applied repeatedly over a sequence of calculations.\n It is sometimes known as &quot;Banker's rounding,&quot; and is\n chiefly used in the USA.  This rounding mode is analogous to\n the rounding policy used for <tt>float</tt> and <tt>double</tt>\n arithmetic in Java.\n\n<p>Example:\n<table border>\n<tr valign=top><th>Input Number</th>\n    <th>Input rounded to one digit<br> with <tt>HALF_EVEN</tt> rounding\n<tr align=right><td>5.5</td>	<td>6</td>\n<tr align=right><td>2.5</td>	<td>2</td>\n<tr align=right><td>1.6</td>	<td>2</td>\n<tr align=right><td>1.1</td>	<td>1</td>\n<tr align=right><td>1.0</td>	<td>1</td>\n<tr align=right><td>-1.0</td>	<td>-1</td>\n<tr align=right><td>-1.1</td>	<td>-1</td>\n<tr align=right><td>-1.6</td>	<td>-2</td>\n<tr align=right><td>-2.5</td>	<td>-2</td>\n<tr align=right><td>-5.5</td>	<td>-6</td>\n</table>\n"
19191,field,java/math/RoundingMode/UNNECESSARY," Rounding mode to assert that the requested operation has an exact\n result, hence no rounding is necessary.  If this rounding mode is\n specified on an operation that yields an inexact result, an\n <tt>ArithmeticException</tt> is thrown.\n<p>Example:\n<table border>\n<tr valign=top><th>Input Number</th>\n    <th>Input rounded to one digit<br> with <tt>UNNECESSARY</tt> rounding\n<tr align=right><td>5.5</td>	<td>throw <tt>ArithmeticException</tt></td>\n<tr align=right><td>2.5</td>	<td>throw <tt>ArithmeticException</tt></td>\n<tr align=right><td>1.6</td>	<td>throw <tt>ArithmeticException</tt></td>\n<tr align=right><td>1.1</td>	<td>throw <tt>ArithmeticException</tt></td>\n<tr align=right><td>1.0</td>	<td>1</td>\n<tr align=right><td>-1.0</td>	<td>-1</td>\n<tr align=right><td>-1.1</td>	<td>throw <tt>ArithmeticException</tt></td>\n<tr align=right><td>-1.6</td>	<td>throw <tt>ArithmeticException</tt></td>\n<tr align=right><td>-2.5</td>	<td>throw <tt>ArithmeticException</tt></td>\n<tr align=right><td>-5.5</td>	<td>throw <tt>ArithmeticException</tt></td>	\n</table>\n"
19195,method,java/math/MathContext/equals/Object," Compares this {@code MathContext} with the specified\n {@code Object} for equality.\n\n @param  x {@code Object} to which this {@code MathContext} is to \n         be compared.\n @return {@code true} if and only if the specified {@code Object} is\n         a {@code MathContext} object which has exactly the same \n         settings as this object\n"
19197,method,java/math/MathContext/toString/,"\n Returns the string representation of this {@code MathContext}.\n The {@code String} returned represents the settings of the\n {@code MathContext} object as two space-delimited words\n (separated by a single space character, <tt>'&#92;u0020'</tt>,\n and with no leading or trailing white space), as follows:\n <ol>\n <li>\n The string {@code "precision="}, immediately followed\n by the value of the precision setting as a numeric string as if\n generated by the {@link Integer#toString(int) Integer.toString}\n method.\n\n <li>\n The string {@code "roundingMode="}, immediately\n followed by the value of the {@code roundingMode} setting as a\n word.  This word will be the same as the name of the\n corresponding public constant in the {@link RoundingMode}\n enum.\n </ol>\n <p>\n For example:\n <pre>\n precision=9 roundingMode=HALF_UP\n </pre>\n\n Additional words may be appended to the result of\n {@code toString} in the future if more properties are added to\n this class.\n\n @return a {@code String} representing the context settings\n"
19201,field,java/math/MathContext/UNLIMITED,"  A {@code MathContext} object whose settings have the values\n  required for unlimited precision arithmetic.\n  The values of the settings are:\n  <code>\n  precision=0 roundingMode=HALF_UP\n  </code>\n"
19205,class,java/math/BigInteger," Immutable arbitrary-precision integers.  All operations behave as if\n BigIntegers were represented in two's-complement notation (like Java's\n primitive integer types).  BigInteger provides analogues to all of Java's\n primitive integer operators, and all relevant methods from java.lang.Math.\n Additionally, BigInteger provides operations for modular arithmetic, GCD\n calculation, primality testing, prime generation, bit manipulation,\n and a few other miscellaneous operations.\n <p>\n Semantics of arithmetic operations exactly mimic those of Java's integer\n arithmetic operators, as defined in <i>The Java Language Specification</i>.\n For example, division by zero throws an {@code ArithmeticException}, and\n division of a negative by a positive yields a negative (or zero) remainder.\n All of the details in the Spec concerning overflow are ignored, as\n BigIntegers are made as large as necessary to accommodate the results of an\n operation.\n <p>\n Semantics of shift operations extend those of Java's shift operators\n to allow for negative shift distances.  A right-shift with a negative\n shift distance results in a left shift, and vice-versa.  The unsigned\n right shift operator ({@code >>>}) is omitted, as this operation makes\n little sense in combination with the "infinite word size" abstraction\n provided by this class.\n <p>\n Semantics of bitwise logical operations exactly mimic those of Java's\n bitwise integer operators.  The binary operators ({@code and},\n {@code or}, {@code xor}) implicitly perform sign extension on the shorter\n of the two operands prior to performing the operation.\n <p>\n Comparison operations perform signed integer comparisons, analogous to\n those performed by Java's relational and equality operators.\n <p>\n Modular arithmetic operations are provided to compute residues, perform\n exponentiation, and compute multiplicative inverses.  These methods always\n return a non-negative result, between {@code 0} and {@code (modulus - 1)},\n inclusive.\n <p>\n Bit operations operate on a single bit of the two's-complement\n representation of their operand.  If necessary, the operand is sign-\n extended so that it contains the designated bit.  None of the single-bit\n operations can produce a BigInteger with a different sign from the\n BigInteger being operated on, as they affect only a single bit, and the\n "infinite word size" abstraction provided by this class ensures that there\n are infinitely many "virtual sign bits" preceding each BigInteger.\n <p>\n For the sake of brevity and clarity, pseudo-code is used throughout the\n descriptions of BigInteger methods.  The pseudo-code expression\n {@code (i + j)} is shorthand for "a BigInteger whose value is\n that of the BigInteger {@code i} plus that of the BigInteger {@code j}."\n The pseudo-code expression {@code (i == j)} is shorthand for\n "{@code true} if and only if the BigInteger {@code i} represents the same\n value as the BigInteger {@code j}."  Other pseudo-code expressions are\n interpreted similarly.\n <p>\n All methods and constructors in this class throw\n {@code NullPointerException} when passed\n a null object reference for any input parameter.\n\n @see     BigDecimal\n @author  Josh Bloch\n @author  Michael McCloskey\n @since JDK1.1\n"
19207,method,java/math/BigInteger/nextProbablePrime/," Returns the first integer greater than this {@code BigInteger} that\n is probably prime.  The probability that the number returned by this\n method is composite does not exceed 2<sup>-100</sup>. This method will\n never skip over a prime when searching: if it returns {@code p}, there\n is no prime {@code q} such that {@code this < q < p}.\n\n @return the first integer greater than this {@code BigInteger} that\n         is probably prime.\n @throws ArithmeticException {@code this < 0}.\n @since 1.5\n"
19215,method,java/math/BigInteger/pow/int," Returns a BigInteger whose value is <tt>(this<sup>exponent</sup>)</tt>.\n Note that {@code exponent} is an integer rather than a BigInteger.\n\n @param  exponent exponent to which this BigInteger is to be raised.\n @return <tt>this<sup>exponent</sup></tt>\n @throws ArithmeticException {@code exponent} is negative.  (This would\n	       cause the operation to yield a non-integer value.)\n"
19223,method,java/math/BigInteger/shiftLeft/int," Returns a BigInteger whose value is {@code (this << n)}.\n The shift distance, {@code n}, may be negative, in which case\n this method performs a right shift.\n (Computes <tt>floor(this * 2<sup>n</sup>)</tt>.)\n\n @param  n shift distance, in bits.\n @return {@code this << n}\n @see #shiftRight\n"
19224,method,java/math/BigInteger/shiftRight/int," Returns a BigInteger whose value is {@code (this >> n)}.  Sign\n extension is performed.  The shift distance, {@code n}, may be\n negative, in which case this method performs a left shift.\n (Computes <tt>floor(this / 2<sup>n</sup>)</tt>.) \n\n @param  n shift distance, in bits.\n @return {@code this >> n}\n @see #shiftLeft\n"
19225,method,java/math/BigInteger/and/BigInteger," Returns a BigInteger whose value is {@code (this & val)}.  (This\n method returns a negative BigInteger if and only if this and val are\n both negative.)\n\n @param val value to be AND'ed with this BigInteger.\n @return {@code this & val}\n"
19226,method,java/math/BigInteger/or/BigInteger," Returns a BigInteger whose value is {@code (this | val)}.  (This method\n returns a negative BigInteger if and only if either this or val is\n negative.) \n\n @param val value to be OR'ed with this BigInteger.\n @return {@code this | val}\n"
19227,method,java/math/BigInteger/xor/BigInteger," Returns a BigInteger whose value is {@code (this ^ val)}.  (This method\n returns a negative BigInteger if and only if exactly one of this and\n val are negative.)\n\n @param val value to be XOR'ed with this BigInteger.\n @return {@code this ^ val}\n"
19228,method,java/math/BigInteger/not/," Returns a BigInteger whose value is {@code (~this)}.  (This method\n returns a negative value if and only if this BigInteger is\n non-negative.)\n\n @return {@code ~this}\n"
19229,method,java/math/BigInteger/andNot/BigInteger," Returns a BigInteger whose value is {@code (this & ~val)}.  This\n method, which is equivalent to {@code and(val.not())}, is provided as\n a convenience for masking operations.  (This method returns a negative\n BigInteger if and only if {@code this} is negative and {@code val} is\n positive.)\n\n @param val value to be complemented and AND'ed with this BigInteger.\n @return {@code this & ~val}\n"
19230,method,java/math/BigInteger/testBit/int," Returns {@code true} if and only if the designated bit is set.\n (Computes {@code ((this & (1<<n)) != 0)}.)\n\n @param  n index of bit to test.\n @return {@code true} if and only if the designated bit is set.\n @throws ArithmeticException {@code n} is negative.\n"
19237,method,java/math/BigInteger/isProbablePrime/int," Returns {@code true} if this BigInteger is probably prime,\n {@code false} if it's definitely composite.  If\n {@code certainty} is {@code  <= 0}, {@code true} is\n returned.\n\n @param  certainty a measure of the uncertainty that the caller is\n	       willing to tolerate: if the call returns {@code true}\n	       the probability that this BigInteger is prime exceeds\n	       (1 - 1/2<sup>{@code certainty}</sup>).  The execution time of\n 	       this method is proportional to the value of this parameter.\n @return {@code true} if this BigInteger is probably prime,\n 	       {@code false} if it's definitely composite.\n"
19239,method,java/math/BigInteger/equals/Object," Compares this BigInteger with the specified Object for equality.\n\n @param  x Object to which this BigInteger is to be compared.\n @return {@code true} if and only if the specified Object is a\n	       BigInteger whose value is numerically equal to this BigInteger.\n"
19240,method,java/math/BigInteger/min/BigInteger," Returns the minimum of this BigInteger and {@code val}.\n\n @param  val value with which the minimum is to be computed.\n @return the BigInteger whose value is the lesser of this BigInteger and \n	       {@code val}.  If they are equal, either may be returned.\n"
19241,method,java/math/BigInteger/max/BigInteger," Returns the maximum of this BigInteger and {@code val}.\n\n @param  val value with which the maximum is to be computed.\n @return the BigInteger whose value is the greater of this and\n         {@code val}.  If they are equal, either may be returned.\n"
19246,method,java/math/BigInteger/intValue/," Converts this BigInteger to an {@code int}.  This\n conversion is analogous to a <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code long} to\n {@code int} as defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: if this BigInteger is too big to fit in an\n {@code int}, only the low-order 32 bits are returned.\n Note that this conversion can lose information about the\n overall magnitude of the BigInteger value as well as return a\n result with the opposite sign.\n\n @return this BigInteger converted to an {@code int}.\n"
19247,method,java/math/BigInteger/longValue/," Converts this BigInteger to a {@code long}.  This\n conversion is analogous to a <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code long} to\n {@code int} as defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: if this BigInteger is too big to fit in a\n {@code long}, only the low-order 64 bits are returned.\n Note that this conversion can lose information about the\n overall magnitude of the BigInteger value as well as return a\n result with the opposite sign.\n\n @return this BigInteger converted to a {@code long}.\n"
19248,method,java/math/BigInteger/floatValue/," Converts this BigInteger to a {@code float}.  This\n conversion is similar to the <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code double} to\n {@code float} defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: if this BigInteger has too great a magnitude\n to represent as a {@code float}, it will be converted to\n {@link Float#NEGATIVE_INFINITY} or {@link\n Float#POSITIVE_INFINITY} as appropriate.  Note that even when\n the return value is finite, this conversion can lose\n information about the precision of the BigInteger value.\n\n @return this BigInteger converted to a {@code float}.\n"
19249,method,java/math/BigInteger/doubleValue/," Converts this BigInteger to a {@code double}.  This\n conversion is similar to the <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code double} to\n {@code float} defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: if this BigInteger has too great a magnitude\n to represent as a {@code double}, it will be converted to\n {@link Double#NEGATIVE_INFINITY} or {@link\n Double#POSITIVE_INFINITY} as appropriate.  Note that even when\n the return value is finite, this conversion can lose\n information about the precision of the BigInteger value.\n\n @return this BigInteger converted to a {@code double}.\n"
19252,method,java/math/BigInteger/BigInteger/String;int," Translates the String representation of a BigInteger in the specified\n radix into a BigInteger.  The String representation consists of an\n optional minus sign followed by a sequence of one or more digits in the\n specified radix.  The character-to-digit mapping is provided by\n {@code Character.digit}.  The String may not contain any extraneous\n characters (whitespace, for example).\n\n @param val String representation of BigInteger.\n @param radix radix to be used in interpreting {@code val}.\n @throws NumberFormatException {@code val} is not a valid representation\n	       of a BigInteger in the specified radix, or {@code radix} is\n	       outside the range from {@link Character#MIN_RADIX} to\n	       {@link Character#MAX_RADIX}, inclusive.\n @see    Character#digit\n"
19253,method,java/math/BigInteger/BigInteger/String," Translates the decimal String representation of a BigInteger into a\n BigInteger.  The String representation consists of an optional minus\n sign followed by a sequence of one or more decimal digits.  The\n character-to-digit mapping is provided by {@code Character.digit}.\n The String may not contain any extraneous characters (whitespace, for\n example).\n\n @param val decimal String representation of BigInteger.\n @throws NumberFormatException {@code val} is not a valid representation\n	       of a BigInteger.\n @see    Character#digit\n"
19262,method,java/math/BigDecimal/valueOf/double," Translates a {@code double} into a {@code BigDecimal}, using\n the {@code double}'s canonical string representation provided\n by the {@link Double#toString(double)} method.\n \n <p><b>Note:</b> This is generally the preferred way to convert\n a {@code double} (or {@code float}) into a\n {@code BigDecimal}, as the value returned is equal to that\n resulting from constructing a {@code BigDecimal} from the\n result of using {@link Double#toString(double)}.\n\n @param  val {@code double} to convert to a {@code BigDecimal}.\n @return a {@code BigDecimal} whose value is equal to or approximately\n         equal to the value of {@code val}.\n @throws NumberFormatException if {@code val} is infinite or NaN.\n @since  1.5\n"
19264,method,java/math/BigDecimal/add/BigDecimal;MathContext," Returns a {@code BigDecimal} whose value is {@code (this + augend)},\n with rounding according to the context settings.\n\n If either number is zero and the precision setting is nonzero then\n the other number, rounded if necessary, is used as the result.\n\n @param  augend value to be added to this {@code BigDecimal}.\n @param  mc the context to use.\n @return {@code this + augend}, rounded as necessary.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @since  1.5\n"
19266,method,java/math/BigDecimal/subtract/BigDecimal;MathContext," Returns a {@code BigDecimal} whose value is {@code (this - subtrahend)},\n with rounding according to the context settings.\n\n If {@code subtrahend} is zero then this, rounded if necessary, is used as the\n result.  If this is zero then the result is {@code subtrahend.negate(mc)}.\n\n @param  subtrahend value to be subtracted from this {@code BigDecimal}.\n @param  mc the context to use.\n @return {@code this - subtrahend}, rounded as necessary.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @since  1.5\n"
19268,method,java/math/BigDecimal/multiply/BigDecimal;MathContext," Returns a {@code BigDecimal} whose value is <tt>(this &times;\n multiplicand)</tt>, with rounding according to the context settings.\n\n @param  multiplicand value to be multiplied by this {@code BigDecimal}.\n @param  mc the context to use.\n @return {@code this * multiplicand}, rounded as necessary.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @since  1.5\n"
19270,method,java/math/BigDecimal/divide/BigDecimal;int;RoundingMode," Returns a {@code BigDecimal} whose value is {@code (this /\n divisor)}, and whose scale is as specified.  If rounding must\n be performed to generate a result with the specified scale, the\n specified rounding mode is applied.\n \n @param  divisor value by which this {@code BigDecimal} is to be divided.\n @param  scale scale of the {@code BigDecimal} quotient to be returned.\n @param  roundingMode rounding mode to apply.\n @return {@code this / divisor}\n @throws ArithmeticException if {@code divisor} is zero,\n         {@code roundingMode==RoundingMode.UNNECESSARY} and\n         the specified scale is insufficient to represent the result\n         of the division exactly.\n @since 1.5\n"
19272,method,java/math/BigDecimal/divide/BigDecimal;RoundingMode," Returns a {@code BigDecimal} whose value is {@code (this /\n divisor)}, and whose scale is {@code this.scale()}.  If\n rounding must be performed to generate a result with the given\n scale, the specified rounding mode is applied.\n \n @param  divisor value by which this {@code BigDecimal} is to be divided.\n @param  roundingMode rounding mode to apply.\n @return {@code this / divisor}\n @throws ArithmeticException if {@code divisor==0}, or\n         {@code roundingMode==RoundingMode.UNNECESSARY} and\n         {@code this.scale()} is insufficient to represent the result\n         of the division exactly.\n @since 1.5\n"
19274,method,java/math/BigDecimal/divide/BigDecimal;MathContext," Returns a {@code BigDecimal} whose value is {@code (this /\n divisor)}, with rounding according to the context settings.\n\n @param  divisor value by which this {@code BigDecimal} is to be divided.\n @param  mc the context to use.\n @return {@code this / divisor}, rounded as necessary.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY} or \n         {@code mc.precision == 0} and the quotient has a \n         non-terminating decimal expansion.\n @since  1.5\n"
19277,method,java/math/BigDecimal/remainder/BigDecimal," Returns a {@code BigDecimal} whose value is {@code (this % divisor)}.\n \n <p>The remainder is given by\n {@code this.subtract(this.divideToIntegralValue(divisor).multiply(divisor))}.\n Note that this is not the modulo operation (the result can be\n negative).\n\n @param  divisor value by which this {@code BigDecimal} is to be divided.\n @return {@code this % divisor}.\n @throws ArithmeticException if {@code divisor==0}\n @since  1.5\n"
19279,method,java/math/BigDecimal/divideAndRemainder/BigDecimal," Returns a two-element {@code BigDecimal} array containing the\n result of {@code divideToIntegralValue} followed by the result of\n {@code remainder} on the two operands.\n \n <p>Note that if both the integer quotient and remainder are\n needed, this method is faster than using the\n {@code divideToIntegralValue} and {@code remainder} methods\n separately because the division need only be carried out once.\n\n @param  divisor value by which this {@code BigDecimal} is to be divided, \n         and the remainder computed.\n @return a two element {@code BigDecimal} array: the quotient \n         (the result of {@code divideToIntegralValue}) is the initial element \n         and the remainder is the final element.\n @throws ArithmeticException if {@code divisor==0}\n @see    #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)\n @see    #remainder(java.math.BigDecimal, java.math.MathContext)\n @since  1.5\n"
19282,method,java/math/BigDecimal/pow/int;MathContext," Returns a {@code BigDecimal} whose value is\n <tt>(this<sup>n</sup>)</tt>.  The current implementation uses\n the core algorithm defined in ANSI standard X3.274-1996 with\n rounding according to the context settings.  In general, the\n returned numerical value is within two ulps of the exact\n numerical value for the chosen precision.  Note that future\n releases may use a different algorithm with a decreased\n allowable error bound and increased allowable exponent range.\n\n <p>The X3.274-1996 algorithm is:\n\n <ul>\n <li> An {@code ArithmeticException} exception is thrown if\n  <ul>\n    <li>{@code abs(n) > 999999999}\n    <li>{@code mc.precision == 0} and {@code n < 0}\n    <li>{@code mc.precision > 0} and {@code n} has more than\n    {@code mc.precision} decimal digits\n  </ul>\n\n <li> if {@code n} is zero, {@link #ONE} is returned even if\n {@code this} is zero, otherwise\n <ul>\n   <li> if {@code n} is positive, the result is calculated via\n   the repeated squaring technique into a single accumulator.\n   The individual multiplications with the accumulator use the\n   same math context settings as in {@code mc} except for a\n   precision increased to {@code mc.precision + elength + 1}\n   where {@code elength} is the number of decimal digits in\n   {@code n}.\n\n   <li> if {@code n} is negative, the result is calculated as if\n   {@code n} were positive; this value is then divided into one\n   using the working precision specified above.\n\n   <li> The final value from either the positive or negative case\n   is then rounded to the destination precision.\n   </ul>\n </ul>\n\n @param  n power to raise this {@code BigDecimal} to.\n @param  mc the context to use.\n @return <tt>this<sup>n</sup></tt> using the ANSI standard X3.274-1996\n         algorithm\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}, or {@code n} is out \n         of range.\n @since  1.5\n"
19284,method,java/math/BigDecimal/abs/MathContext," Returns a {@code BigDecimal} whose value is the absolute value\n of this {@code BigDecimal}, with rounding according to the\n context settings.\n\n @param mc the context to use.\n @return {@code abs(this)}, rounded as necessary.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @since 1.5\n"
19286,method,java/math/BigDecimal/negate/MathContext," Returns a {@code BigDecimal} whose value is {@code (-this)},\n with rounding according to the context settings.\n\n @param mc the context to use.\n @return {@code -this}, rounded as necessary.\n @throws ArithmeticException if the result is inexact but the \n         rounding mode is {@code UNNECESSARY}.\n @since  1.5\n"
19288,method,java/math/BigDecimal/plus/MathContext," Returns a {@code BigDecimal} whose value is {@code (+this)},\n with rounding according to the context settings.\n \n <p>The effect of this method is identical to that of the {@link\n #round(MathContext)} method.\n\n @param mc the context to use.\n @return {@code this}, rounded as necessary.  A zero result will\n         have a scale of 0.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @see    #round(MathContext)\n @since  1.5\n"
19297,method,java/math/BigDecimal/movePointLeft/int," Returns a {@code BigDecimal} which is equivalent to this one\n with the decimal point moved {@code n} places to the left.  If\n {@code n} is non-negative, the call merely adds {@code n} to\n the scale.  If {@code n} is negative, the call is equivalent\n to {@code movePointRight(-n)}.  The {@code BigDecimal}\n returned by this call has value <tt>(this &times;\n 10<sup>-n</sup>)</tt> and scale {@code max(this.scale()+n,\n 0)}.\n\n @param  n number of places to move the decimal point to the left.\n @return a {@code BigDecimal} which is equivalent to this one with the \n         decimal point moved {@code n} places to the left.\n @throws ArithmeticException if scale overflows.\n"
19298,method,java/math/BigDecimal/movePointRight/int," Returns a {@code BigDecimal} which is equivalent to this one\n with the decimal point moved {@code n} places to the right.\n If {@code n} is non-negative, the call merely subtracts\n {@code n} from the scale.  If {@code n} is negative, the call\n is equivalent to {@code movePointLeft(-n)}.  The\n {@code BigDecimal} returned by this call has value <tt>(this\n &times; 10<sup>n</sup>)</tt> and scale {@code max(this.scale()-n,\n 0)}.\n\n @param  n number of places to move the decimal point to the right.\n @return a {@code BigDecimal} which is equivalent to this one\n         with the decimal point moved {@code n} places to the right.\n @throws ArithmeticException if scale overflows.\n"
19302,method,java/math/BigDecimal/equals/Object," Compares this {@code BigDecimal} with the specified\n {@code Object} for equality.  Unlike {@link\n #compareTo(BigDecimal) compareTo}, this method considers two\n {@code BigDecimal} objects equal only if they are equal in\n value and scale (thus 2.0 is not equal to 2.00 when compared by\n this method).\n\n @param  x {@code Object} to which this {@code BigDecimal} is \n         to be compared.\n @return {@code true} if and only if the specified {@code Object} is a\n         {@code BigDecimal} whose value and scale are equal to this \n         {@code BigDecimal}'s.\n @see    #compareTo(java.math.BigDecimal)\n @see    #hashCode\n"
19305,method,java/math/BigDecimal/hashCode/," Returns the hash code for this {@code BigDecimal}.  Note that\n two {@code BigDecimal} objects that are numerically equal but\n differ in scale (like 2.0 and 2.00) will generally <i>not</i>\n have the same hash code.\n\n @return hash code for this {@code BigDecimal}.\n @see #equals(Object)\n"
19306,method,java/math/BigDecimal/toString/," Returns the string representation of this {@code BigDecimal},\n using scientific notation if an exponent is needed.\n \n <p>A standard canonical string form of the {@code BigDecimal}\n is created as though by the following steps: first, the\n absolute value of the unscaled value of the {@code BigDecimal}\n is converted to a string in base ten using the characters\n {@code '0'} through {@code '9'} with no leading zeros (except\n if its value is zero, in which case a single {@code '0'}\n character is used).\n \n <p>Next, an <i>adjusted exponent</i> is calculated; this is the\n negated scale, plus the number of characters in the converted\n unscaled value, less one.  That is,\n {@code -scale+(ulength-1)}, where {@code ulength} is the\n length of the absolute value of the unscaled value in decimal\n digits (its <i>precision</i>).\n \n <p>If the scale is greater than or equal to zero and the\n adjusted exponent is greater than or equal to {@code -6}, the\n number will be converted to a character form without using\n exponential notation.  In this case, if the scale is zero then\n no decimal point is added and if the scale is positive a\n decimal point will be inserted with the scale specifying the\n number of characters to the right of the decimal point.\n {@code '0'} characters are added to the left of the converted\n unscaled value as necessary.  If no character precedes the\n decimal point after this insertion then a conventional\n {@code '0'} character is prefixed.\n \n <p>Otherwise (that is, if the scale is negative, or the\n adjusted exponent is less than {@code -6}), the number will be\n converted to a character form using exponential notation.  In\n this case, if the converted {@code BigInteger} has more than\n one digit a decimal point is inserted after the first digit.\n An exponent in character form is then suffixed to the converted\n unscaled value (perhaps with inserted decimal point); this\n comprises the letter {@code 'E'} followed immediately by the\n adjusted exponent converted to a character form.  The latter is\n in base ten, using the characters {@code '0'} through\n {@code '9'} with no leading zeros, and is always prefixed by a\n sign character {@code '-'} (<tt>'&#92;u002D'</tt>) if the\n adjusted exponent is negative, {@code '+'}\n (<tt>'&#92;u002B'</tt>) otherwise).\n \n <p>Finally, the entire string is prefixed by a minus sign\n character {@code '-'} (<tt>'&#92;u002D'</tt>) if the unscaled\n value is less than zero.  No sign character is prefixed if the\n unscaled value is zero or positive.\n \n <p><b>Examples:</b>\n <p>For each representation [<i>unscaled value</i>, <i>scale</i>]\n on the left, the resulting string is shown on the right.\n <pre>\n [123,0]      "123"\n [-123,0]     "-123"\n [123,-1]     "1.23E+3"\n [123,-3]     "1.23E+5"\n [123,1]      "12.3"\n [123,5]      "0.00123"\n [123,10]     "1.23E-8"\n [-123,12]    "-1.23E-10"\n </pre>\n\n <b>Notes:</b>\n <ol>\n\n <li>There is a one-to-one mapping between the distinguishable\n {@code BigDecimal} values and the result of this conversion.\n That is, every distinguishable {@code BigDecimal} value\n (unscaled value and scale) has a unique string representation\n as a result of using {@code toString}.  If that string\n representation is converted back to a {@code BigDecimal} using\n the {@link #BigDecimal(String)} constructor, then the original\n value will be recovered.\n \n <li>The string produced for a given number is always the same;\n it is not affected by locale.  This means that it can be used\n as a canonical string representation for exchanging decimal\n data, or as a key for a Hashtable, etc.  Locale-sensitive\n number formatting and parsing is handled by the {@link\n java.text.NumberFormat} class and its subclasses.\n \n <li>The {@link #toEngineeringString} method may be used for\n presenting numbers with exponents in engineering notation, and the\n {@link #setScale(int,RoundingMode) setScale} method may be used for\n rounding a {@code BigDecimal} so it has a known number of digits after\n the decimal point.\n \n <li>The digit-to-character mapping provided by\n {@code Character.forDigit} is used.\n\n </ol>\n\n @return string representation of this {@code BigDecimal}.\n @see    Character#forDigit\n @see    #BigDecimal(java.lang.String)\n"
19307,method,java/math/BigDecimal/toEngineeringString/," Returns a string representation of this {@code BigDecimal},\n using engineering notation if an exponent is needed.\n \n <p>Returns a string that represents the {@code BigDecimal} as\n described in the {@link #toString()} method, except that if\n exponential notation is used, the power of ten is adjusted to\n be a multiple of three (engineering notation) such that the\n integer part of nonzero values will be in the range 1 through\n 999.  If exponential notation is used for zero values, a\n decimal point and one or two fractional zero digits are used so\n that the scale of the zero value is preserved.  Note that\n unlike the output of {@link #toString()}, the output of this\n method is <em>not</em> guaranteed to recover the same [integer,\n scale] pair of this {@code BigDecimal} if the output string is\n converting back to a {@code BigDecimal} using the {@linkplain\n #BigDecimal(String) string constructor}.  The result of this method meets\n the weaker constraint of always producing a numerically equal\n result from applying the string constructor to the method's output.\n\n @return string representation of this {@code BigDecimal}, using\n         engineering notation if an exponent is needed.\n @since  1.5\n"
19308,method,java/math/BigDecimal/toPlainString/," Returns a string representation of this {@code BigDecimal}\n without an exponent field.  For values with a positive scale,\n the number of digits to the right of the decimal point is used\n to indicate scale.  For values with a zero or negative scale,\n the resulting string is generated as if the value were\n converted to a numerically equal value with zero scale and as\n if all the trailing zeros of the zero scale value were present\n in the result.\n\n The entire string is prefixed by a minus sign character '-'\n (<tt>'&#92;u002D'</tt>) if the unscaled value is less than\n zero. No sign character is prefixed if the unscaled value is\n zero or positive.\n\n Note that if the result of this method is passed to the\n {@linkplain #BigDecimal(String) string constructor}, only the\n numerical value of this {@code BigDecimal} will necessarily be\n recovered; the representation of the new {@code BigDecimal}\n may have a different scale.  In particular, if this\n {@code BigDecimal} has a negative scale, the string resulting\n from this method will have a scale of zero when processed by\n the string constructor.\n\n (This method behaves analogously to the {@code toString}\n method in 1.4 and earlier releases.)\n\n @return a string representation of this {@code BigDecimal}\n without an exponent field.\n @since 1.5\n @see #toString()\n @see #toEngineeringString()\n"
19309,method,java/math/BigDecimal/toBigInteger/," Converts this {@code BigDecimal} to a {@code BigInteger}.\n This conversion is analogous to a <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code double} to\n {@code long} as defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: any fractional part of this\n {@code BigDecimal} will be discarded.  Note that this\n conversion can lose information about the precision of the\n {@code BigDecimal} value.\n <p>\n To have an exception thrown if the conversion is inexact (in\n other words if a nonzero fractional part is discarded), use the\n {@link #toBigIntegerExact()} method.\n\n @return this {@code BigDecimal} converted to a {@code BigInteger}.\n"
19311,method,java/math/BigDecimal/longValue/," Converts this {@code BigDecimal} to a {@code long}.  This\n conversion is analogous to a <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code double} to\n {@code short} as defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: any fractional part of this\n {@code BigDecimal} will be discarded, and if the resulting\n "{@code BigInteger}" is too big to fit in a\n {@code long}, only the low-order 64 bits are returned.\n Note that this conversion can lose information about the\n overall magnitude and precision of this {@code BigDecimal} value as well\n as return a result with the opposite sign.\n \n @return this {@code BigDecimal} converted to a {@code long}.\n"
19313,method,java/math/BigDecimal/intValue/," Converts this {@code BigDecimal} to an {@code int}.  This\n conversion is analogous to a <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code double} to\n {@code short} as defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: any fractional part of this\n {@code BigDecimal} will be discarded, and if the resulting\n "{@code BigInteger}" is too big to fit in an\n {@code int}, only the low-order 32 bits are returned.\n Note that this conversion can lose information about the\n overall magnitude and precision of this {@code BigDecimal}\n value as well as return a result with the opposite sign.\n \n @return this {@code BigDecimal} converted to an {@code int}.\n"
19317,method,java/math/BigDecimal/floatValue/," Converts this {@code BigDecimal} to a {@code float}.\n This conversion is similar to the <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code double} to\n {@code float} defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: if this {@code BigDecimal} has too great a\n magnitude to represent as a {@code float}, it will be\n converted to {@link Float#NEGATIVE_INFINITY} or {@link\n Float#POSITIVE_INFINITY} as appropriate.  Note that even when\n the return value is finite, this conversion can lose\n information about the precision of the {@code BigDecimal}\n value.\n \n @return this {@code BigDecimal} converted to a {@code float}.\n"
19318,method,java/math/BigDecimal/doubleValue/," Converts this {@code BigDecimal} to a {@code double}.\n This conversion is similar to the <a\n href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363"><i>narrowing\n primitive conversion</i></a> from {@code double} to\n {@code float} as defined in the <a\n href="http://java.sun.com/docs/books/jls/html/">Java Language\n Specification</a>: if this {@code BigDecimal} has too great a\n magnitude represent as a {@code double}, it will be\n converted to {@link Double#NEGATIVE_INFINITY} or {@link\n Double#POSITIVE_INFINITY} as appropriate.  Note that even when\n the return value is finite, this conversion can lose\n information about the precision of the {@code BigDecimal}\n value.\n \n @return this {@code BigDecimal} converted to a {@code double}.\n"
19319,method,java/math/BigDecimal/ulp/," Returns the size of an ulp, a unit in the last place, of this\n {@code BigDecimal}.  An ulp of a nonzero {@code BigDecimal}\n value is the positive distance between this value and the\n {@code BigDecimal} value next larger in magnitude with the\n same number of digits.  An ulp of a zero value is numerically\n equal to 1 with the scale of {@code this}.  The result is\n stored with the same scale as {@code this} so the result\n for zero and nonzero values is equal to {@code [1,\n this.scale()]}.\n\n @return the size of an ulp of {@code this}\n @since 1.5\n"
19320,method,java/math/BigDecimal/BigDecimal/char[];int;int," Translates a character array representation of a\n {@code BigDecimal} into a {@code BigDecimal}, accepting the\n same sequence of characters as the {@link #BigDecimal(String)}\n constructor, while allowing a sub-array to be specified.\n \n <p>Note that if the sequence of characters is already available\n within a character array, using this constructor is faster than\n converting the {@code char} array to string and using the\n {@code BigDecimal(String)} constructor .\n\n @param  in {@code char} array that is the source of characters.\n @param  offset first character in the array to inspect.\n @param  len number of characters to consider.\n @throws NumberFormatException if {@code in} is not a valid\n         representation of a {@code BigDecimal} or the defined subarray\n         is not wholly within {@code in}.\n @since  1.5\n"
19321,method,java/math/BigDecimal/BigDecimal/char[];int;int;MathContext," Translates a character array representation of a\n {@code BigDecimal} into a {@code BigDecimal}, accepting the\n same sequence of characters as the {@link #BigDecimal(String)}\n constructor, while allowing a sub-array to be specified and\n with rounding according to the context settings.\n \n <p>Note that if the sequence of characters is already available\n within a character array, using this constructor is faster than\n converting the {@code char} array to string and using the\n {@code BigDecimal(String)} constructor .\n\n @param  in {@code char} array that is the source of characters.\n @param  offset first character in the array to inspect.\n @param  len number of characters to consider..\n @param  mc the context to use.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @throws NumberFormatException if {@code in} is not a valid\n         representation of a {@code BigDecimal} or the defined subarray\n         is not wholly within {@code in}.\n @since  1.5\n"
19322,method,java/math/BigDecimal/BigDecimal/char[]," Translates a character array representation of a\n {@code BigDecimal} into a {@code BigDecimal}, accepting the\n same sequence of characters as the {@link #BigDecimal(String)}\n constructor.\n \n <p>Note that if the sequence of characters is already available\n as a character array, using this constructor is faster than\n converting the {@code char} array to string and using the\n {@code BigDecimal(String)} constructor .\n\n @param in {@code char} array that is the source of characters.\n @throws NumberFormatException if {@code in} is not a valid\n         representation of a {@code BigDecimal}.\n @since  1.5\n"
19323,method,java/math/BigDecimal/BigDecimal/char[];MathContext," Translates a character array representation of a\n {@code BigDecimal} into a {@code BigDecimal}, accepting the\n same sequence of characters as the {@link #BigDecimal(String)}\n constructor and with rounding according to the context\n settings.\n \n <p>Note that if the sequence of characters is already available\n as a character array, using this constructor is faster than\n converting the {@code char} array to string and using the\n {@code BigDecimal(String)} constructor .\n\n @param  in {@code char} array that is the source of characters.\n @param  mc the context to use.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @throws NumberFormatException if {@code in} is not a valid\n         representation of a {@code BigDecimal}.\n @since  1.5\n"
19333,method,java/math/BigDecimal/BigDecimal/int;MathContext," Translates an {@code int} into a {@code BigDecimal}, with\n rounding according to the context settings.  The scale of the\n {@code BigDecimal}, before any rounding, is zero.\n \n @param  val {@code int} value to be converted to {@code BigDecimal}.\n @param  mc the context to use.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @since  1.5\n"
19335,method,java/math/BigDecimal/BigDecimal/long;MathContext," Translates a {@code long} into a {@code BigDecimal}, with\n rounding according to the context settings.  The scale of the\n {@code BigDecimal}, before any rounding, is zero.\n \n @param  val {@code long} value to be converted to {@code BigDecimal}.\n @param  mc the context to use.\n @throws ArithmeticException if the result is inexact but the\n         rounding mode is {@code UNNECESSARY}.\n @since  1.5\n"
19339,field,java/math/BigDecimal/ROUND_UP," Rounding mode to round away from zero.  Always increments the\n digit prior to a nonzero discarded fraction.  Note that this rounding\n mode never decreases the magnitude of the calculated value.\n"
19340,field,java/math/BigDecimal/ROUND_DOWN," Rounding mode to round towards zero.  Never increments the digit\n prior to a discarded fraction (i.e., truncates).  Note that this\n rounding mode never increases the magnitude of the calculated value.\n"
19341,field,java/math/BigDecimal/ROUND_CEILING," Rounding mode to round towards positive infinity.  If the\n {@code BigDecimal} is positive, behaves as for\n {@code ROUND_UP}; if negative, behaves as for\n {@code ROUND_DOWN}.  Note that this rounding mode never\n decreases the calculated value.\n"
19342,field,java/math/BigDecimal/ROUND_FLOOR," Rounding mode to round towards negative infinity.  If the\n {@code BigDecimal} is positive, behave as for\n {@code ROUND_DOWN}; if negative, behave as for\n {@code ROUND_UP}.  Note that this rounding mode never\n increases the calculated value.\n"
19343,field,java/math/BigDecimal/ROUND_HALF_UP," Rounding mode to round towards {@literal "nearest neighbor"}\n unless both neighbors are equidistant, in which case round up.\n Behaves as for {@code ROUND_UP} if the discarded fraction is\n &ge; 0.5; otherwise, behaves as for {@code ROUND_DOWN}.  Note\n that this is the rounding mode that most of us were taught in\n grade school.\n"
19345,field,java/math/BigDecimal/ROUND_HALF_EVEN," Rounding mode to round towards the {@literal "nearest neighbor"}\n unless both neighbors are equidistant, in which case, round\n towards the even neighbor.  Behaves as for\n {@code ROUND_HALF_UP} if the digit to the left of the\n discarded fraction is odd; behaves as for\n {@code ROUND_HALF_DOWN} if it's even.  Note that this is the\n rounding mode that minimizes cumulative error when applied\n repeatedly over a sequence of calculations.\n"
19346,field,java/math/BigDecimal/ROUND_UNNECESSARY," Rounding mode to assert that the requested operation has an exact\n result, hence no rounding is necessary.  If this rounding mode is\n specified on an operation that yields an inexact result, an\n {@code ArithmeticException} is thrown.\n"
19347,class,java/security/UnresolvedPermission," The UnresolvedPermission class is used to hold Permissions that\n were "unresolved" when the Policy was initialized. \n An unresolved permission is one whose actual Permission class\n does not yet exist at the time the Policy is initialized (see below).\n \n <p>The policy for a Java runtime (specifying \n which permissions are available for code from various principals)\n is represented by a Policy object.\n Whenever a Policy is initialized or refreshed, Permission objects of\n appropriate classes are created for all permissions\n allowed by the Policy. \n \n <p>Many permission class types \n referenced by the policy configuration are ones that exist\n locally (i.e., ones that can be found on CLASSPATH).\n Objects for such permissions can be instantiated during\n Policy initialization. For example, it is always possible\n to instantiate a java.io.FilePermission, since the\n FilePermission class is found on the CLASSPATH.\n \n <p>Other permission classes may not yet exist during Policy\n initialization. For example, a referenced permission class may\n be in a JAR file that will later be loaded.\n For each such class, an UnresolvedPermission is instantiated.\n Thus, an UnresolvedPermission is essentially a "placeholder"\n containing information about the permission.\n \n <p>Later, when code calls AccessController.checkPermission \n on a permission of a type that was previously unresolved,\n but whose class has since been loaded, previously-unresolved\n permissions of that type are "resolved". That is,\n for each such UnresolvedPermission, a new object of\n the appropriate class type is instantiated, based on the\n information in the UnresolvedPermission.\n\n <p> To instantiate the new class, UnresolvedPermission assumes\n the class provides a zero, one, and/or two-argument constructor.\n The zero-argument constructor would be used to instantiate\n a permission without a name and without actions.\n A one-arg constructor is assumed to take a <code>String</code>\n name as input, and a two-arg constructor is assumed to take a\n <code>String</code> name and <code>String</code> actions\n as input.  UnresolvedPermission may invoke a\n constructor with a <code>null</code> name and/or actions.\n If an appropriate permission constructor is not available,\n the UnresolvedPermission is ignored and the relevant permission\n will not be granted to executing code.\n\n <p> The newly created permission object replaces the\n UnresolvedPermission, which is removed.\n\n <p> Note that the <code>getName</code> method for an\n <code>UnresolvedPermission</code> returns the\n <code>type</code> (class name) for the underlying permission\n that has not been resolved.\n\n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n @see java.security.Policy\n\n @version 1.32 10/03/23\n\n @author Roland Schemers\n"
19348,method,java/security/UnresolvedPermission/implies/Permission," This method always returns false for unresolved permissions.\n That is, an UnresolvedPermission is never considered to\n imply another permission.\n\n @param p the permission to check against.\n \n @return false.\n"
19349,method,java/security/UnresolvedPermission/equals/Object," Checks two UnresolvedPermission objects for equality. \n Checks that <i>obj</i> is an UnresolvedPermission, and has \n the same type (class) name, permission name, actions, and\n certificates as this object.\n\n <p> To determine certificate equality, this method only compares\n actual signer certificates.  Supporting certificate chains\n are not taken into consideration by this method.\n \n @param obj the object we are testing for equality with this object.\n \n @return true if obj is an UnresolvedPermission, and has the same \n type (class) name, permission name, actions, and\n certificates as this object.\n"
19351,method,java/security/UnresolvedPermission/getActions/," Returns the canonical string representation of the actions,\n which currently is the empty string "", since there are no actions for \n an UnresolvedPermission. That is, the actions for the\n permission that will be created when this UnresolvedPermission\n is resolved may be non-null, but an UnresolvedPermission\n itself is never considered to have any actions.\n\n @return the empty string "".\n"
19355,method,java/security/UnresolvedPermission/getUnresolvedCerts/," Get the signer certificates (without any supporting chain)\n for the underlying permission that has not been resolved.\n\n @return the signer certificates for the underlying permission that\n has not been resolved, or null, if there are no signer certificates.\n Returns a new array each time this method is called.\n\n @since 1.5\n"
19372,method,java/security/Timestamp/equals/Object," Tests for equality between the specified object and this\n timestamp. Two timestamps are considered equal if the date and time of\n their timestamp's and their signer's certificate paths are equal.\n \n @param obj the object to test for equality with this timestamp.\n \n @return true if the timestamp are considered equal, false otherwise.\n"
19376,method,java/security/Signer/getPrivateKey/," Returns this signer's private key.\n\n <p>First, if there is a security manager, its <code>checkSecurityAccess</code> \n method is called with <code>"getSignerPrivateKey"</code> \n as its argument to see if it's ok to return the private key. \n \n @return this signer's private key, or null if the private key has\n not yet been set.\n \n @exception  SecurityException  if a security manager exists and its  \n <code>checkSecurityAccess</code> method doesn't allow \n returning the private key.\n \n @see SecurityManager#checkSecurityAccess\n"
19377,method,java/security/Signer/setKeyPair/KeyPair," Sets the key pair (public key and private key) for this signer.\n\n <p>First, if there is a security manager, its <code>checkSecurityAccess</code> \n method is called with <code>"setSignerKeyPair"</code> \n as its argument to see if it's ok to set the key pair. \n \n @param pair an initialized key pair.\n\n @exception InvalidParameterException if the key pair is not\n properly initialized.\n @exception KeyException if the key pair cannot be set for any\n other reason.\n @exception  SecurityException  if a security manager exists and its  \n <code>checkSecurityAccess</code> method doesn't allow \n setting the key pair.\n \n @see SecurityManager#checkSecurityAccess\n"
19383,method,java/security/SignedObject/getObject/," Retrieves the encapsulated object.\n The encapsulated object is de-serialized before it is returned.\n \n @return the encapsulated object.\n\n @exception IOException if an error occurs during de-serialization\n @exception ClassNotFoundException if an error occurs during \n de-serialization\n"
19384,method,java/security/SignedObject/getSignature/," Retrieves the signature on the signed object, in the form of a\n byte array.\n \n @return the signature. Returns a new array each time this \n method is called.\n"
19387,method,java/security/SignedObject/SignedObject/Serializable;PrivateKey;Signature," Constructs a SignedObject from any Serializable object.\n The given object is signed with the given signing key, using the\n designated signature engine.\n\n @param object the object to be signed. \n @param signingKey the private key for signing.\n @param signingEngine the signature signing engine.\n\n @exception IOException if an error occurs during serialization\n @exception InvalidKeyException if the key is invalid.\n @exception SignatureException if signing fails.\n"
19388,class,java/security/SignatureSpi," This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n for the <code>Signature</code> class, which is used to provide the\n functionality of a digital signature algorithm. Digital signatures are used\n for authentication and integrity assurance of digital data.\n.\n <p> All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a particular signature algorithm.\n\n @author Benjamin Renaud \n\n @version 1.27, 03/23/10\n\n @see Signature\n"
19399,method,java/security/SignatureSpi/engineSetParameter/String;Object," Sets the specified algorithm parameter to the specified\n value. This method supplies a general-purpose mechanism through\n which it is possible to set the various parameters of this object. \n A parameter may be any settable parameter for the algorithm, such as \n a parameter size, or a source of random bits for signature generation \n (if appropriate), or an indication of whether or not to perform\n a specific but optional computation. A uniform algorithm-specific \n naming scheme for each parameter is desirable but left unspecified \n at this time.\n\n @param param the string identifier of the parameter.\n\n @param value the parameter value.\n\n @exception InvalidParameterException if <code>param</code> is an\n invalid parameter for this signature algorithm engine,\n the parameter is already set\n and cannot be set again, a security exception occurs, and so on. \n\n @deprecated Replaced by {@link \n #engineSetParameter(java.security.spec.AlgorithmParameterSpec)\n engineSetParameter}.\n"
19400,method,java/security/SignatureSpi/engineSetParameter/AlgorithmParameterSpec," <p>This method is overridden by providers to initialize\n this signature engine with the specified parameter set.\n\n @param params the parameters\n\n @exception UnsupportedOperationException if this method is not\n overridden by a provider\n\n @exception InvalidAlgorithmParameterException if this method is\n overridden by a provider and the the given parameters\n are inappropriate for this signature engine\n"
19402,method,java/security/SignatureSpi/engineGetParameter/String," Gets the value of the specified algorithm parameter. \n This method supplies a general-purpose mechanism through which it \n is possible to get the various parameters of this object. A parameter\n may be any settable parameter for the algorithm, such as a parameter \n size, or  a source of random bits for signature generation (if \n appropriate), or an indication of whether or not to perform a \n specific but optional computation. A uniform algorithm-specific \n naming scheme for each parameter is desirable but left unspecified \n at this time.\n\n @param param the string name of the parameter.\n\n @return the object that represents the parameter value, or null if\n there is none.\n\n @exception InvalidParameterException if <code>param</code> is an \n invalid parameter for this engine, or another exception occurs while\n trying to get this parameter.\n\n @deprecated\n"
19403,method,java/security/SignatureSpi/clone/," Returns a clone if the implementation is cloneable.\n \n @return a clone if the implementation is cloneable.\n\n @exception CloneNotSupportedException if this is called\n on an implementation that does not support <code>Cloneable</code>.\n"
19412,method,java/security/Signature/getInstance/String," Returns a Signature object that implements the specified signature\n algorithm.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new Signature object encapsulating the\n SignatureSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n @param algorithm the standard name of the algorithm requested. \n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @return the new Signature object.\n\n @exception NoSuchAlgorithmException if no Provider supports a\n          Signature implementation for the\n          specified algorithm.\n\n @see Provider\n"
19414,method,java/security/Signature/getInstance/String;Provider,"\n Returns a Signature object that implements the specified\n signature algorithm.\n\n <p> A new Signature object encapsulating the\n SignatureSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param algorithm the name of the algorithm requested.\n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @param provider the provider.\n\n @return the new Signature object.\n\n @exception NoSuchAlgorithmException if a SignatureSpi\n		implementation for the specified algorithm is not available\n		from the specified Provider object.\n\n @exception IllegalArgumentException if the provider is null.\n \n @see Provider\n\n @since 1.4\n"
19416,method,java/security/Signature/initVerify/PublicKey," Initializes this object for verification. If this method is called\n again with a different argument, it negates the effect\n of this call.\n\n @param publicKey the public key of the identity whose signature is\n going to be verified.\n\n @exception InvalidKeyException if the key is invalid.\n"
19418,method,java/security/Signature/initSign/PrivateKey," Initialize this object for signing. If this method is called\n again with a different argument, it negates the effect\n of this call.\n\n @param privateKey the private key of the identity whose signature\n is going to be generated.\n \n @exception InvalidKeyException if the key is invalid.  \n"
19419,method,java/security/Signature/initSign/PrivateKey;SecureRandom," Initialize this object for signing. If this method is called\n again with a different argument, it negates the effect\n of this call.\n\n @param privateKey the private key of the identity whose signature\n is going to be generated.\n \n @param random the source of randomness for this signature.\n \n @exception InvalidKeyException if the key is invalid.  \n"
19420,method,java/security/Signature/sign/," Returns the signature bytes of all the data updated.\n The format of the signature depends on the underlying \n signature scheme.\n \n <p>A call to this method resets this signature object to the state \n it was in when previously initialized for signing via a\n call to <code>initSign(PrivateKey)</code>. That is, the object is \n reset and available to generate another signature from the same \n signer, if desired, via new calls to <code>update</code> and \n <code>sign</code>.     \n\n @return the signature bytes of the signing operation's result.\n\n @exception SignatureException if this signature object is not\n initialized properly or if this signature algorithm is unable to\n process the input data provided.\n"
19422,method,java/security/Signature/verify/byte[]," Verifies the passed-in signature. \n \n <p>A call to this method resets this signature object to the state \n it was in when previously initialized for verification via a\n call to <code>initVerify(PublicKey)</code>. That is, the object is \n reset and available to verify another signature from the identity\n whose public key was specified in the call to <code>initVerify</code>.\n      \n @param signature the signature bytes to be verified.\n\n @return true if the signature was verified, false if not. \n\n @exception SignatureException if this signature object is not \n initialized properly, the passed-in signature is improperly \n encoded or of the wrong type, if this signature algorithm is unable to\n process the input data provided, etc.\n"
19423,method,java/security/Signature/verify/byte[];int;int," Verifies the passed-in signature in the specified array\n of bytes, starting at the specified offset.\n \n <p>A call to this method resets this signature object to the state \n it was in when previously initialized for verification via a\n call to <code>initVerify(PublicKey)</code>. That is, the object is \n reset and available to verify another signature from the identity\n whose public key was specified in the call to <code>initVerify</code>.\n\n      \n @param signature the signature bytes to be verified.\n @param offset the offset to start from in the array of bytes.\n @param length the number of bytes to use, starting at offset.\n\n @return true if the signature was verified, false if not. \n\n @exception SignatureException if this signature object is not \n initialized properly, the passed-in signature is improperly \n encoded or of the wrong type, if this signature algorithm is unable to\n process the input data provided, etc.\n @exception IllegalArgumentException if the <code>signature</code>\n byte array is null, or the <code>offset</code> or <code>length</code>\n is less than 0, or the sum of the <code>offset</code> and \n <code>length</code> is greater than the length of the\n <code>signature</code> byte array.\n @since 1.4\n"
19430,method,java/security/Signature/setParameter/String;Object," Sets the specified algorithm parameter to the specified value.\n This method supplies a general-purpose mechanism through\n which it is possible to set the various parameters of this object. \n A parameter may be any settable parameter for the algorithm, such as \n a parameter size, or a source of random bits for signature generation \n (if appropriate), or an indication of whether or not to perform\n a specific but optional computation. A uniform algorithm-specific \n naming scheme for each parameter is desirable but left unspecified \n at this time.\n\n @param param the string identifier of the parameter.\n @param value the parameter value.\n\n @exception InvalidParameterException if <code>param</code> is an\n invalid parameter for this signature algorithm engine,\n the parameter is already set\n and cannot be set again, a security exception occurs, and so on.\n\n @see #getParameter\n\n @deprecated Use \n {@link #setParameter(java.security.spec.AlgorithmParameterSpec)\n setParameter}.\n"
19433,method,java/security/Signature/getParameter/String," Gets the value of the specified algorithm parameter. This method \n supplies a general-purpose mechanism through which it is possible to \n get the various parameters of this object. A parameter may be any \n settable parameter for the algorithm, such as a parameter size, or \n a source of random bits for signature generation (if appropriate), \n or an indication of whether or not to perform a specific but optional \n computation. A uniform algorithm-specific naming scheme for each \n parameter is desirable but left unspecified at this time.\n\n @param param the string name of the parameter.\n\n @return the object that represents the parameter value, or null if\n there is none.\n\n @exception InvalidParameterException if <code>param</code> is an invalid\n parameter for this engine, or another exception occurs while\n trying to get this parameter.\n\n @see #setParameter(String, Object)\n\n @deprecated\n"
19434,method,java/security/Signature/clone/," Returns a clone if the implementation is cloneable.\n \n @return a clone if the implementation is cloneable.\n\n @exception CloneNotSupportedException if this is called\n on an implementation that does not support <code>Cloneable</code>.\n"
19440,class,java/security/SecurityPermission," This class is for security permissions.\n A SecurityPermission contains a name (also referred to as a "target name")\n but no actions list; you either have the named permission\n or you don't.\n <P>\n The target name is the name of a security configuration parameter (see below).\n Currently the SecurityPermission object is used to guard access\n to the Policy, Security, Provider, Signer, and Identity\n objects.\n <P>\n The following table lists all the possible SecurityPermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n <P>\n\n <table border=1 cellpadding=5 summary="target name,what the permission allows, and associated risks">\n <tr>\n <th>Permission Target Name</th>\n <th>What the Permission Allows</th>\n <th>Risks of Allowing this Permission</th>\n </tr>\n\n <tr>\n   <td>createAccessControlContext</td>\n   <td>Creation of an AccessControlContext</td>\n   <td>This allows someone to instantiate an AccessControlContext\n with a <code>DomainCombiner</code>.  Since DomainCombiners are given\n a reference to the ProtectionDomains currently on the stack,\n this could potentially lead to a privacy leak if the DomainCombiner\n is malicious.</td>\n </tr>\n\n <tr>\n   <td>getDomainCombiner</td>\n   <td>Retrieval of an AccessControlContext's DomainCombiner</td>\n   <td>This allows someone to retrieve an AccessControlContext's\n <code>DomainCombiner</code>.  Since DomainCombiners may contain\n sensitive information, this could potentially lead to a privacy leak.</td>\n </tr>\n\n <tr>\n   <td>getPolicy</td>\n   <td>Retrieval of the system-wide security policy (specifically, of the\n currently-installed Policy object)</td>\n   <td>This allows someone to query the policy via the\n <code>getPermissions</code> call,\n which discloses which permissions would be granted to a given CodeSource.\n While revealing the policy does not compromise the security of\n the system, it does provide malicious code with additional information\n which it may use to better aim an attack. It is wise\n not to divulge more information than necessary.</td>\n </tr>\n\n <tr>\n   <td>setPolicy</td>\n   <td>Setting of the system-wide security policy (specifically,\n the Policy object)</td>\n   <td>Granting this permission is extremely dangerous, as malicious\n code may grant itself all the necessary permissions it needs\n to successfully mount an attack on the system.</td>\n </tr>\n\n <tr>\n   <td>createPolicy.{policy type}</td>\n   <td>Getting an instance of a Policy implementation from a provider</td>\n   <td>Granting this permission enables code to obtain a Policy object.\n Malicious code may query the Policy object to determine what permissions\n have been granted to code other than itself. </td>\n </tr>\n\n <tr>\n   <td>getProperty.{key}</td>\n   <td>Retrieval of the security property with the specified key</td>\n   <td>Depending on the particular key for which access has\n been granted, the code may have access to the list of security\n providers, as well as the location of the system-wide and user\n security policies.  while revealing this information does not\n compromise the security of the system, it does provide malicious\n code with additional information which it may use to better aim\n an attack.\n</td>\n </tr>\n\n <tr>\n   <td>setProperty.{key}</td>\n   <td>Setting of the security property with the specified key</td>\n   <td>This could include setting a security provider or defining\n the location of the the system-wide security policy.  Malicious\n code that has permission to set a new security provider may\n set a rogue provider that steals confidential information such\n as cryptographic private keys. In addition, malicious code with\n permission to set the location of the system-wide security policy\n may point it to a security policy that grants the attacker\n all the necessary permissions it requires to successfully mount\n an attack on the system.\n</td>\n </tr>\n\n <tr>\n   <td>insertProvider.{provider name}</td>\n   <td>Addition of a new provider, with the specified name</td>\n   <td>This would allow somebody to introduce a possibly\n malicious provider (e.g., one that discloses the private keys passed\n to it) as the highest-priority provider. This would be possible\n because the Security object (which manages the installed providers)\n currently does not check the integrity or authenticity of a provider\n before attaching it.</td>\n </tr>\n\n <tr>\n   <td>removeProvider.{provider name}</td>\n   <td>Removal of the specified provider</td>\n   <td>This may change the behavior or disable execution of other\n parts of the program. If a provider subsequently requested by the\n program has been removed, execution may fail. Also, if the removed\n provider is not explicitly requested by the rest of the program, but\n it would normally be the provider chosen when a cryptography service\n is requested (due to its previous order in the list of providers),\n a different provider will be chosen instead, or no suitable provider\n will be found, thereby resulting in program failure.</td>\n </tr>\n\n <tr>\n   <td>setSystemScope</td>\n   <td>Setting of the system identity scope</td>\n   <td>This would allow an attacker to configure the system identity scope with\n certificates that should not be trusted, thereby granting applet or\n application code signed with those certificates privileges that\n would have been denied by the system's original identity scope</td>\n </tr>\n\n <tr>\n   <td>setIdentityPublicKey</td>\n   <td>Setting of the public key for an Identity</td>\n   <td>If the identity is marked as "trusted", this allows an attacker to\n introduce a different public key (e.g., its own) that is not trusted\n by the system's identity scope, thereby granting applet or\n application code signed with that public key privileges that\n would have been denied otherwise.</td>\n </tr>\n\n <tr>\n   <td>setIdentityInfo</td>\n   <td>Setting of a general information string for an Identity</td>\n   <td>This allows attackers to set the general description for\n an identity.  This may trick applications into using a different\n identity than intended or may prevent applications from finding a\n particular identity.</td>\n </tr>\n\n <tr>\n   <td>addIdentityCertificate</td>\n   <td>Addition of a certificate for an Identity</td>\n   <td>This allows attackers to set a certificate for\n an identity's public key.  This is dangerous because it affects\n the trust relationship across the system. This public key suddenly\n becomes trusted to a wider audience than it otherwise would be.</td>\n </tr>\n\n <tr>\n   <td>removeIdentityCertificate</td>\n   <td>Removal of a certificate for an Identity</td>\n   <td>This allows attackers to remove a certificate for\n an identity's public key. This is dangerous because it affects\n the trust relationship across the system. This public key suddenly\n becomes considered less trustworthy than it otherwise would be.</td>\n </tr>\n\n <tr>\n  <td>printIdentity</td>\n  <td>Viewing the name of a principal\n and optionally the scope in which it is used, and whether\n or not it is considered "trusted" in that scope</td>\n  <td>The scope that is printed out may be a filename, in which case\n it may convey local system information. For example, here's a sample\n printout of an identity named "carol", who is\n marked not trusted in the user's identity database:<br>\n   carol[/home/luehe/identitydb.obj][not trusted]</td>\n</tr>\n \n <tr>\n   <td>clearProviderProperties.{provider name}</td>\n   <td>"Clearing" of a Provider so that it no longer contains the properties\n used to look up services implemented by the provider</td>\n   <td>This disables the lookup of services implemented by the provider.\n This may thus change the behavior or disable execution of other\n parts of the program that would normally utilize the Provider, as\n described under the "removeProvider.{provider name}" permission.</td>\n </tr>\n\n <tr>\n   <td>putProviderProperty.{provider name}</td>\n   <td>Setting of properties for the specified Provider</td>\n   <td>The provider properties each specify the name and location\n of a particular service implemented by the provider. By granting\n this permission, you let code replace the service specification\n with another one, thereby specifying a different implementation.</td>\n </tr>\n\n <tr>\n   <td>removeProviderProperty.{provider name}</td>\n   <td>Removal of properties from the specified Provider</td>\n   <td>This disables the lookup of services implemented by the\n provider. They are no longer accessible due to removal of the properties\n specifying their names and locations. This\n may change the behavior or disable execution of other\n parts of the program that would normally utilize the Provider, as\n described under the "removeProvider.{provider name}" permission.</td>\n </tr>\n\n <tr>\n   <td>getSignerPrivateKey</td>\n   <td>Retrieval of a Signer's private key</td>\n   <td>It is very dangerous to allow access to a private key; private\n keys are supposed to be kept secret. Otherwise, code can use the\n private key to sign various files and claim the signature came from\n the Signer.</td>\n </tr>\n\n <tr>\n   <td>setSignerKeyPair</td>\n   <td>Setting of the key pair (public key and private key) for a Signer</td>\n   <td>This would allow an attacker to replace somebody else's (the "target's")\n keypair with a possibly weaker keypair (e.g., a keypair of a smaller\n keysize).  This also would allow the attacker to listen in on encrypted\n communication between the target and its peers. The target's peers\n might wrap an encryption session key under the target's "new" public\n key, which would allow the attacker (who possesses the corresponding\n private key) to unwrap the session key and decipher the communication\n data encrypted under that session key.</td>\n </tr>\n\n </table>\n\n @see java.security.BasicPermission\n @see java.security.Permission\n @see java.security.Permissions\n @see java.security.PermissionCollection\n @see java.lang.SecurityManager\n\n @version 1.31 10/03/23\n\n @author Marianne Mueller\n @author Roland Schemers\n"
19441,method,java/security/SecurityPermission/SecurityPermission/String," Creates a new SecurityPermission with the specified name.\n The name is the symbolic name of the SecurityPermission. An asterisk\n may appear at the end of the name, following a ".", or by itself, to\n signify a wildcard match.\n\n @param name the name of the SecurityPermission\n\n @throws NullPointerException if <code>name</code> is <code>null</code>.\n @throws IllegalArgumentException if <code>name</code> is empty.\n"
19445,method,java/security/Security/insertProviderAt/Provider;int," Adds a new provider, at a specified position. The position is\n the preference order in which providers are searched for\n requested algorithms.  The position is 1-based, that is,\n 1 is most preferred, followed by 2, and so on.\n \n <p>If the given provider is installed at the requested position,\n the provider that used to be at that position, and all providers\n with a position greater than <code>position</code>, are shifted up\n one position (towards the end of the list of installed providers).\n \n <p>A provider cannot be added if it is already installed.\n \n <p>First, if there is a security manager, its\n <code>checkSecurityAccess</code> \n method is called with the string\n <code>"insertProvider."+provider.getName()</code> \n to see if it's ok to add a new provider. \n If the default implementation of <code>checkSecurityAccess</code> \n is used (i.e., that method is not overriden), then this will result in\n a call to the security manager's <code>checkPermission</code> method\n with a\n <code>SecurityPermission("insertProvider."+provider.getName())</code>\n permission.\n\n @param provider the provider to be added.\n\n @param position the preference position that the caller would\n like for this provider.\n \n @return the actual preference position in which the provider was \n added, or -1 if the provider was not added because it is\n already installed.\n\n @throws  NullPointerException if provider is null\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkSecurityAccess}</code> method\n          denies access to add a new provider\n\n @see #getProvider\n @see #removeProvider \n @see java.security.SecurityPermission\n"
19446,method,java/security/Security/addProvider/Provider," Adds a provider to the next position available.\n\n <p>First, if there is a security manager, its\n <code>checkSecurityAccess</code> \n method is called with the string\n <code>"insertProvider."+provider.getName()</code> \n to see if it's ok to add a new provider. \n If the default implementation of <code>checkSecurityAccess</code> \n is used (i.e., that method is not overriden), then this will result in\n a call to the security manager's <code>checkPermission</code> method\n with a\n <code>SecurityPermission("insertProvider."+provider.getName())</code>\n permission.\n \n @param provider the provider to be added.\n\n @return the preference position in which the provider was \n added, or -1 if the provider was not added because it is\n already installed.\n\n @throws  NullPointerException if provider is null\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkSecurityAccess}</code> method\n          denies access to add a new provider\n \n @see #getProvider\n @see #removeProvider\n @see java.security.SecurityPermission\n"
19447,method,java/security/Security/removeProvider/String," Removes the provider with the specified name.\n\n <p>When the specified provider is removed, all providers located\n at a position greater than where the specified provider was are shifted\n down one position (towards the head of the list of installed\n providers).\n\n <p>This method returns silently if the provider is not installed or\n if name is null.\n \n <p>First, if there is a security manager, its\n <code>checkSecurityAccess</code> \n method is called with the string <code>"removeProvider."+name</code> \n to see if it's ok to remove the provider. \n If the default implementation of <code>checkSecurityAccess</code> \n is used (i.e., that method is not overriden), then this will result in\n a call to the security manager's <code>checkPermission</code> method\n with a <code>SecurityPermission("removeProvider."+name)</code>\n permission.\n\n @param name the name of the provider to remove.\n\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkSecurityAccess}</code> method\n          denies\n          access to remove the provider\n\n @see #getProvider\n @see #addProvider\n"
19452,method,java/security/Security/getProperty/String," Gets a security property value.\n\n <p>First, if there is a security manager, its\n <code>checkPermission</code>  method is called with a \n <code>java.security.SecurityPermission("getProperty."+key)</code>\n permission to see if it's ok to retrieve the specified\n security property value.. \n\n @param key the key of the property being retrieved.\n\n @return the value of the security property corresponding to key.\n\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkPermission}</code> method\n          denies\n          access to retrieve the specified security property value\n @throws  NullPointerException is key is null\n \n @see #setProperty\n @see java.security.SecurityPermission\n"
19453,method,java/security/Security/setProperty/String;String," Sets a security property value.\n\n <p>First, if there is a security manager, its\n <code>checkPermission</code> method is called with a \n <code>java.security.SecurityPermission("setProperty."+key)</code>\n permission to see if it's ok to set the specified\n security property value.\n\n @param key the name of the property to be set.\n\n @param datum the value of the property to be set.\n\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkPermission}</code> method\n          denies access to set the specified security property value\n @throws  NullPointerException if key or datum is null\n \n @see #getProperty\n @see java.security.SecurityPermission\n"
19454,method,java/security/Security/getAlgorithms/String," Returns a Set of Strings containing the names of all available\n algorithms or types for the specified Java cryptographic service\n (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Returns\n an empty Set if there is no provider that supports the  \n specified service or if serviceName is null. For a complete list \n of Java cryptographic services, please see the \n <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">Java \n Cryptography Architecture API Specification &amp; Reference</a>.\n Note: the returned set is immutable.\n\n @param serviceName the name of the Java cryptographic \n service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore).\n Note: this parameter is case-insensitive.\n\n @return a Set of Strings containing the names of all available \n algorithms or types for the specified Java cryptographic service\n or an empty set if no provider supports the specified service.\n\n @since 1.4\n"
19455,class,java/security/SecureRandomSpi," This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n for the <code>SecureRandom</code> class.\n All the abstract methods in this class must be implemented by each\n service provider who wishes to supply the implementation\n of a cryptographically strong pseudo-random number generator.\n\n @version 1.14, 03/23/10\n\n @see SecureRandom\n @since 1.2\n"
19456,method,java/security/SecureRandomSpi/engineSetSeed/byte[]," Reseeds this random object. The given seed supplements, rather than\n replaces, the existing seed. Thus, repeated calls are guaranteed\n never to reduce randomness.\n\n @param seed the seed.\n"
19457,method,java/security/SecureRandomSpi/engineNextBytes/byte[]," Generates a user-specified number of random bytes.\n\n <p> If a call to <code>engineSetSeed</code> had not occurred previously,\n the first call to this method forces this SecureRandom implementation\n to seed itself.  This self-seeding will not occur if\n <code>engineSetSeed</code> was previously called.\n \n @param bytes the array to be filled in with random bytes.\n"
19458,method,java/security/SecureRandomSpi/engineGenerateSeed/int," Returns the given number of seed bytes.  This call may be used to\n seed other random number generators.\n\n @param numBytes the number of seed bytes to generate.\n \n @return the seed bytes.\n"
19461,method,java/security/SecureRandom/getInstance/String," Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm. \n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n <p> The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the <code>setSeed</code> method.\n If <code>setSeed</code> is not called, the first call to\n <code>nextBytes</code> will force the SecureRandom object to seed itself.\n This self-seeding will not occur if <code>setSeed</code> was\n previously called.\n\n @param algorithm the name of the RNG algorithm.\n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard RNG algorithm names.\n\n @return the new SecureRandom object.\n\n @exception NoSuchAlgorithmException if no Provider supports a\n		SecureRandomSpi implementation for the\n		specified algorithm.\n\n @see Provider\n\n @since 1.2\n"
19463,method,java/security/SecureRandom/getInstance/String;Provider," Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm. \n\n <p> A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n <p> The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the <code>setSeed</code> method.\n If <code>setSeed</code> is not called, the first call to\n <code>nextBytes</code> will force the SecureRandom object to seed itself.\n This self-seeding will not occur if <code>setSeed</code> was\n previously called.\n\n @param algorithm the name of the RNG algorithm.\n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard RNG algorithm names.\n\n @param provider the provider.\n\n @return the new SecureRandom object.\n\n @exception NoSuchAlgorithmException if a SecureRandomSpi\n		implementation for the specified algorithm is not available\n		from the specified Provider object.\n\n @exception IllegalArgumentException if the specified provider is null.\n\n @see Provider\n\n @since 1.4\n"
19467,method,java/security/SecureRandom/setSeed/long," Reseeds this random object, using the eight bytes contained \n in the given <code>long seed</code>. The given seed supplements, \n rather than replaces, the existing seed. Thus, repeated calls \n are guaranteed never to reduce randomness. \n \n <p>This method is defined for compatibility with \n <code>java.util.Random</code>.\n\n @param seed the seed.\n\n @see #getSeed\n"
19468,method,java/security/SecureRandom/nextBytes/byte[]," Generates a user-specified number of random bytes.\n\n <p> If a call to <code>setSeed</code> had not occurred previously,\n the first call to this method forces this SecureRandom object\n to seed itself.  This self-seeding will not occur if\n <code>setSeed</code> was previously called.\n \n @param bytes the array to be filled in with random bytes.\n"
19469,method,java/security/SecureRandom/next/int," Generates an integer containing the user-specified number of\n pseudo-random bits (right justified, with leading zeros).  This\n method overrides a <code>java.util.Random</code> method, and serves\n to provide a source of random bits to all of the methods inherited\n from that class (for example, <code>nextInt</code>,\n <code>nextLong</code>, and <code>nextFloat</code>).\n\n @param numBits number of pseudo-random bits to be generated, where\n 0 <= <code>numBits</code> <= 32.\n\n @return an <code>int</code> containing the user-specified number\n of pseudo-random bits (right justified, with leading zeros).\n"
19471,method,java/security/SecureRandom/generateSeed/int," Returns the given number of seed bytes, computed using the seed\n generation algorithm that this class uses to seed itself.  This\n call may be used to seed other random number generators.\n\n @param numBytes the number of seed bytes to generate.\n \n @return the seed bytes.\n"
19472,method,java/security/SecureRandom/SecureRandom/," Constructs a secure random number generator (RNG) implementing the\n default random number algorithm.\n\n <p> This constructor traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports a SecureRandom (RNG) algorithm is returned.\n If none of the Providers support a RNG algorithm,\n then an implementation-specific default is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n <p> See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard RNG algorithm names.\n\n <p> The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the <code>setSeed</code> method.\n If <code>setSeed</code> is not called, the first call to\n <code>nextBytes</code> will force the SecureRandom object to seed itself.\n This self-seeding will not occur if <code>setSeed</code> was\n previously called.\n"
19473,method,java/security/SecureRandom/SecureRandom/byte[]," Constructs a secure random number generator (RNG) implementing the\n default random number algorithm.\n The SecureRandom instance is seeded with the specified seed bytes.\n\n <p> This constructor traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports a SecureRandom (RNG) algorithm is returned.\n If none of the Providers support a RNG algorithm,\n then an implementation-specific default is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n <p> See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard RNG algorithm names.\n\n @param seed the seed.\n"
19475,class,java/security/SecureClassLoader,"\n This class extends ClassLoader with additional support for defining\n classes with an associated code source and permissions which are\n retrieved by the system policy by default.\n\n @version 1.89, 03/23/10\n @author  Li Gong \n @author  Roland Schemers\n"
19478,method,java/security/SecureClassLoader/getPermissions/CodeSource," Returns the permissions for the given CodeSource object.\n <p>\n This method is invoked by the defineClass method which takes\n a CodeSource as an argument when it is constructing the\n ProtectionDomain for the class being defined.\n <p>\n @param codesource the codesource.\n\n @return the permissions granted to the codesource.\n\n"
19479,method,java/security/SecureClassLoader/SecureClassLoader/ClassLoader," Creates a new SecureClassLoader using the specified parent\n class loader for delegation.\n\n <p>If there is a security manager, this method first\n calls the security manager's <code>checkCreateClassLoader</code> \n method  to ensure creation of a class loader is allowed.\n <p>\n @param parent the parent ClassLoader\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkCreateClassLoader</code> method doesn't allow \n             creation of a class loader.\n @see SecurityManager#checkCreateClassLoader\n"
19480,method,java/security/SecureClassLoader/SecureClassLoader/," Creates a new SecureClassLoader using the default parent class\n loader for delegation.\n\n <p>If there is a security manager, this method first\n calls the security manager's <code>checkCreateClassLoader</code> \n method  to ensure creation of a class loader is allowed.\n\n @exception  SecurityException  if a security manager exists and its  \n             <code>checkCreateClassLoader</code> method doesn't allow \n             creation of a class loader.\n @see SecurityManager#checkCreateClassLoader\n"
19481,interface,java/security/PublicKey," <p>A public key. This interface contains no methods or constants.\n It merely serves to group (and provide type safety for) all public key\n interfaces.\n\n Note: The specialized public key interfaces extend this interface.\n See, for example, the DSAPublicKey interface in\n <code>java.security.interfaces</code>.\n\n @see Key\n @see PrivateKey\n @see Certificate\n @see Signature#initVerify\n @see java.security.interfaces.DSAPublicKey\n @see java.security.interfaces.RSAPublicKey\n\n @version 1.34 10/03/23\n"
19491,method,java/security/Provider/getInfo/," Returns a human-readable description of the provider and its\n services.  This may return an HTML page, with relevant links.\n\n @return a description of the provider and its services.\n"
19493,method,java/security/Provider/clear/," Clears this provider so that it no longer contains the properties\n used to look up facilities implemented by the provider.\n \n <p>First, if there is a security manager, its \n <code>checkSecurityAccess</code> method is called with the string \n <code>"clearProviderProperties."+name</code> (where <code>name</code> \n is the provider name) to see if it's ok to clear this provider.\n If the default implementation of <code>checkSecurityAccess</code> \n is used (that is, that method is not overriden), then this results in\n a call to the security manager's <code>checkPermission</code> method \n with a <code>SecurityPermission("clearProviderProperties."+name)</code>\n permission.\n\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkSecurityAccess}</code> method \n          denies access to clear this provider\n\n @since 1.2\n"
19494,method,java/security/Provider/load/InputStream," Reads a property list (key and element pairs) from the input stream.\n\n @param inStream   the input stream.\n @exception  IOException  if an error occurred when reading from the\n               input stream.\n @see java.util.Properties#load\n"
19499,method,java/security/Provider/put/Object;Object," Sets the <code>key</code> property to have the specified\n <code>value</code>.\n \n <p>First, if there is a security manager, its \n <code>checkSecurityAccess</code> method is called with the string \n <code>"putProviderProperty."+name</code>, where <code>name</code> is the\n provider name, to see if it's ok to set this provider's property values. \n If the default implementation of <code>checkSecurityAccess</code>\n is used (that is, that method is not overriden), then this results in\n a call to the security manager's <code>checkPermission</code> method \n with a <code>SecurityPermission("putProviderProperty."+name)</code>\n permission.\n\n @param key the property key.\n\n @param value the property value.\n\n @return the previous value of the specified property\n (<code>key</code>), or null if it did not have one.\n\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkSecurityAccess}</code> method \n          denies access to set property values.\n\n @since 1.2\n"
19500,method,java/security/Provider/remove/Object," Removes the <code>key</code> property (and its corresponding\n <code>value</code>).\n \n <p>First, if there is a security manager, its \n <code>checkSecurityAccess</code> method is called with the string \n <code>"removeProviderProperty."+name</code>, where <code>name</code> is\n the provider name, to see if it's ok to remove this provider's \n properties. If the default implementation of \n <code>checkSecurityAccess</code> is used (that is, that method is not \n overriden), then this results in a call to the security manager's \n <code>checkPermission</code> method with a\n <code>SecurityPermission("removeProviderProperty."+name)</code>\n permission.\n\n @param key the key for the property to be removed.\n\n @return the value to which the key had been mapped,\n or null if the key did not have a mapping.\n\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkSecurityAccess}</code> method \n          denies access to remove this provider's properties.\n\n @since 1.2\n"
19507,method,java/security/Provider/putService/Service," Add a service. If a service of the same type with the same algorithm\n name exists and it was added using {@link #putService putService()}, \n it is replaced by the new service. \n This method also places information about this service\n in the provider's Hashtable values in the format described in the\n <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">\n Java Cryptography Architecture API Specification &amp; Reference </a>.\n\n <p>Also, if there is a security manager, its \n <code>checkSecurityAccess</code> method is called with the string \n <code>"putProviderProperty."+name</code>, where <code>name</code> is \n the provider name, to see if it's ok to set this provider's property \n values. If the default implementation of <code>checkSecurityAccess</code>\n is used (that is, that method is not overriden), then this results in\n a call to the security manager's <code>checkPermission</code> method with\n a <code>SecurityPermission("putProviderProperty."+name)</code>\n permission.\n\n @param s the Service to add\n\n @throws SecurityException\n      if a security manager exists and its <code>{@link\n      java.lang.SecurityManager#checkSecurityAccess}</code> method denies\n      access to set property values.\n @throws NullPointerException if s is null\n\n @since 1.5\n"
19508,method,java/security/Provider/removeService/Service," Remove a service previously added using \n {@link #putService putService()}. The specified service is removed from\n this provider. It will no longer be returned by \n {@link #getService getService()} and its information will be removed \n from this provider's Hashtable.\n\n <p>Also, if there is a security manager, its \n <code>checkSecurityAccess</code> method is called with the string \n <code>"removeProviderProperty."+name</code>, where <code>name</code> is \n the provider name, to see if it's ok to remove this provider's \n properties. If the default implementation of \n <code>checkSecurityAccess</code> is used (that is, that method is not \n overriden), then this results in a call to the security manager's \n <code>checkPermission</code> method with a\n <code>SecurityPermission("removeProviderProperty."+name)</code>\n permission.\n\n @param s the Service to be removed\n\n @throws  SecurityException\n          if a security manager exists and its <code>{@link\n          java.lang.SecurityManager#checkSecurityAccess}</code> method denies\n          access to remove this provider's properties.\n @throws NullPointerException if s is null\n\n @since 1.5\n"
19510,class,java/security/Provider/Service," The description of a security service. It encapsulates the properties\n of a service and contains a factory method to obtain new implementation\n instances of this service.\n\n <p>Each service has a provider that offers the service, a type,\n an algorithm name, and the name of the class that implements the\n service. Optionally, it also includes a list of alternate algorithm\n names for this service (aliases) and attributes, which are a map of\n (name, value) String pairs.\n\n <p>This class defines the methods {@link #supportsParameter \n supportsParameter()} and {@link #newInstance newInstance()}\n which are used by the Java security framework when it searches for\n suitable services and instantes them. The valid arguments to those \n methods depend on the type of service. For the service types defined \n within Java SE, see the\n <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">\n Java Cryptography Architecture API Specification &amp; Reference </a>\n for the valid values.\n Note that components outside of Java SE can define additional types of \n services and their behavior.\n\n <p>Instances of this class are immutable.\n\n @since 1.5\n"
19516,method,java/security/Provider/Service/newInstance/Object," Return a new instance of the implementation described by this\n service. The security provider framework uses this method to\n construct implementations. Applications will typically not need \n to call it.\n\n <p>The default implementation uses reflection to invoke the\n standard constructor for this type of service.\n Security providers can override this method to implement\n instantiation in a different way.\n For details and the values of constructorParameter that are \n valid for the various types of services see the\n <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">\n Java Cryptography Architecture API Specification &amp; \n Reference</a>.\n\n @param constructorParameter the value to pass to the constructor,\n or null if this type of service does not use a constructorParameter.\n\n @return a new implementation of this service\n\n @throws InvalidParameterException if the value of \n constructorParameter is invalid for this type of service.\n @throws NoSuchAlgorithmException if instantation failed for\n any other reason.\n"
19517,method,java/security/Provider/Service/supportsParameter/Object," Test whether this Service can use the specified parameter.\n Returns false if this service cannot use the parameter. Returns\n true if this service can use the parameter, if a fast test is\n infeasible, or if the status is unknown.\n\n <p>The security provider framework uses this method with\n some types of services to quickly exclude non-matching\n implementations for consideration. \n Applications will typically not need to call it.\n\n <p>For details and the values of parameter that are valid for the \n various types of services see the top of this class and the\n <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">\n Java Cryptography Architecture API Specification &amp; \n Reference</a>.\n Security providers can override it to implement their own test.\n\n @param parameter the parameter to test\n\n @return false if this this service cannot use the specified\n parameter; true if it can possibly use the parameter\n\n @throws InvalidParameterException if the value of parameter is \n invalid for this type of service or if this method cannot be \n used with this type of service\n"
19521,method,java/security/ProtectionDomain/getCodeSource/," Returns the CodeSource of this domain.\n @return the CodeSource of this domain which may be null.\n @since 1.2\n"
19522,method,java/security/ProtectionDomain/getClassLoader/," Returns the ClassLoader of this domain.\n @return the ClassLoader of this domain which may be null.\n\n @since 1.4\n"
19523,method,java/security/ProtectionDomain/getPrincipals/," Returns an array of principals for this domain.\n @return a non-null array of principals for this domain.\n Returns a new array each time this method is called.\n\n @since 1.4\n"
19524,method,java/security/ProtectionDomain/getPermissions/,"\n Returns the static permissions granted to this domain. \n \n @return the static set of permissions for this domain which may be null.\n @see Policy#refresh\n @see Policy#getPermissions(ProtectionDomain)\n"
19525,method,java/security/ProtectionDomain/implies/Permission," Check and see if this ProtectionDomain implies the permissions \n expressed in the Permission object. \n <p>\n The set of permissions evaluated is a function of whether the\n ProtectionDomain was constructed with a static set of permissions\n or it was bound to a dynamically mapped set of permissions.\n <p>\n If the ProtectionDomain was constructed to a \n {@link #ProtectionDomain(CodeSource, PermissionCollection)\n statically bound} PermissionCollection then the permission will\n only be checked against the PermissionCollection supplied at\n construction.\n <p>\n However, if the ProtectionDomain was constructed with\n the constructor variant which supports \n {@link #ProtectionDomain(CodeSource, PermissionCollection,\n ClassLoader, java.security.Principal[]) dynamically binding}\n permissions, then the permission will be checked against the\n combination of the PermissionCollection supplied at construction and\n the current Policy binding.\n <p>\n\n @param permission the Permission object to check.\n\n @return true if "permission" is implicit to this ProtectionDomain.\n"
19527,method,java/security/ProtectionDomain/ProtectionDomain/CodeSource;PermissionCollection," Creates a new ProtectionDomain with the given CodeSource and\n Permissions. If the permissions object is not null, then\n  <code>setReadOnly())</code> will be called on the passed in\n Permissions object. The only permissions granted to this domain\n are the ones specified; the current Policy will not be consulted.\n\n @param codesource the codesource associated with this domain\n @param permissions the permissions granted to this domain\n"
19528,method,java/security/ProtectionDomain/ProtectionDomain/CodeSource;PermissionCollection;ClassLoader;Principal[]," Creates a new ProtectionDomain qualified by the given CodeSource,\n Permissions, ClassLoader and array of Principals. If the\n permissions object is not null, then <code>setReadOnly()</code>\n will be called on the passed in Permissions object.\n The permissions granted to this domain are dynamic; they include\n both the static permissions passed to this constructor, and any\n permissions granted to this domain by the current Policy at the\n time a permission is checked.\n <p>\n This constructor is typically used by\n {@link SecureClassLoader ClassLoaders}\n and {@link DomainCombiner DomainCombiners} which delegate to \n <code>Policy</code> to actively associate the permissions granted to\n this domain. This constructor affords the\n Policy provider the opportunity to augment the supplied\n PermissionCollection to reflect policy changes.\n <p>\n\n @param codesource the CodeSource associated with this domain\n @param permissions the permissions granted to this domain\n @param classloader the ClassLoader associated with this domain\n @param principals the array of Principals associated with this \n domain. The contents of the array are copied to protect against \n subsequent modification.\n @see Policy#refresh\n @see Policy#getPermissions(ProtectionDomain)\n @since 1.4\n"
19531,class,java/security/PrivilegedActionException," This exception is thrown by\n <code>doPrivileged(PrivilegedExceptionAction)</code> and\n <code>doPrivileged(PrivilegedExceptionAction,\n AccessControlContext context)</code> to indicate\n that the action being performed threw a checked exception.  The exception\n thrown by the action can be obtained by calling the\n <code>getException</code> method.  In effect, an\n <code>PrivilegedActionException</code> is a "wrapper"\n for an exception thrown by a privileged action.\n\n <p>As of release 1.4, this exception has been retrofitted to conform to\n the general purpose exception-chaining mechanism.  The "exception thrown\n by the privileged computation" that is provided at construction time and\n accessed via the {@link #getException()} method is now known as the\n <i>cause</i>, and may be accessed via the {@link Throwable#getCause()}\n method, as well as the aforementioned "legacy method."\n\n @see PrivilegedExceptionAction\n @see AccessController#doPrivileged(PrivilegedExceptionAction)\n @see AccessController#doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n"
19538,interface,java/security/PrivateKey," <p>A private key. This interface contains no methods or constants.\n It merely serves to group (and provide type safety for) all private key\n interfaces.\n\n Note: The specialized private key interfaces extend this interface.\n See, for example, the DSAPrivateKey interface in\n <code>java.security.interfaces</code>.\n\n @see Key\n @see PublicKey\n @see Certificate\n @see Signature#initVerify\n @see java.security.interfaces.DSAPrivateKey\n @see java.security.interfaces.RSAPrivateKey\n @see java.security.interfaces.RSAPrivateCrtKey\n\n @version 1.31 10/03/23\n @author Benjamin Renaud\n @author Josh Bloch\n"
19553,method,java/security/Policy/setPolicy/Policy," Sets the system-wide Policy object. This method first calls\n <code>SecurityManager.checkPermission</code> with a\n <code>SecurityPermission("setPolicy")</code>\n permission to ensure it's ok to set the Policy.\n\n @param p the new system Policy object.\n\n @throws SecurityException\n        if a security manager exists and its\n        <code>checkPermission</code> method doesn't allow\n        setting the Policy.\n\n @see SecurityManager#checkPermission(Permission)\n @see #getPolicy()\n\n"
19554,method,java/security/Policy/getInstance/String;Parameters," Returns a Policy object of the specified type.\n\n <p> This method traverses the list of registered security providers,\n starting with the most preferred Provider.\n A new Policy object encapsulating the\n PolicySpi implementation from the first\n Provider that supports the specified type is returned.\n \n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n \n @param type the specified Policy type.  See Appendix A in the\n    <a href="../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n    Java Cryptography Architecture API Specification &amp; Reference </a>\n    for a list of standard Policy types.\n\n @param params parameters for the Policy, which may be null.\n\n @return the new Policy object.\n\n @exception SecurityException if the caller does not have permission\n		to get a Policy instance for the specified type.\n\n @exception NullPointerException if the specified type is null.\n\n @exception IllegalArgumentException if the specified parameters\n		are not understood by the PolicySpi implementation\n		from the selected Provider.\n\n @exception NoSuchAlgorithmException if no Provider supports a PolicySpi\n		implementation for the specified type.\n\n @see Provider\n @since 1.6\n"
19557,method,java/security/Policy/getProvider/," Return the Provider of this Policy.\n\n <p> This Policy instance will only have a Provider if it\n was obtained via a call to <code>Policy.getInstance</code>.\n Otherwise this method returns null.\n\n @return the Provider of this Policy, or null.\n\n @since 1.6\n"
19558,method,java/security/Policy/getType/," Return the type of this Policy.\n\n <p> This Policy instance will only have a type if it\n was obtained via a call to <code>Policy.getInstance</code>.\n Otherwise this method returns null.\n\n @return the type of this Policy, or null.\n\n @since 1.6\n"
19559,method,java/security/Policy/getParameters/," Return Policy parameters.\n\n <p> This Policy instance will only have parameters if it\n was obtained via a call to <code>Policy.getInstance</code>.\n Otherwise this method returns null.\n\n @return Policy parameters, or null.\n\n @since 1.6\n"
19565,field,java/security/Policy/UNSUPPORTED_EMPTY_COLLECTION," A read-only empty PermissionCollection instance.\n @since 1.6\n"
19569,method,java/security/Permissions/implies/Permission," Checks to see if this object's PermissionCollection for permissions of\n the specified permission's class implies the permissions \n expressed in the <i>permission</i> object. Returns true if the\n combination of permissions in the appropriate PermissionCollection\n (e.g., a FilePermissionCollection for a FilePermission) together\n imply the specified permission.\n \n <p>For example, suppose there is a FilePermissionCollection in this\n Permissions object, and it contains one FilePermission that specifies\n "read" access for  all files in all subdirectories of the "/tmp"\n directory, and another FilePermission that specifies "write" access\n for all files in the "/tmp/scratch/foo" directory.\n Then if the <code>implies</code> method\n is called with a permission specifying both "read" and "write" access\n to files in the "/tmp/scratch/foo" directory, <code>true</code> is\n returned.\n\n <p>Additionally, if this PermissionCollection contains the\n AllPermission, this method will always return true.\n <p>\n @param permission the Permission object to check.\n\n @return true if "permission" is implied by the permissions in the\n PermissionCollection it\n belongs to, false if not.\n"
19576,method,java/security/PermissionCollection/setReadOnly/," Marks this PermissionCollection object as "readonly". After\n a PermissionCollection object\n is marked as readonly, no new Permission objects can be added to it\n using <code>add</code>.\n"
19577,method,java/security/PermissionCollection/isReadOnly/," Returns true if this PermissionCollection object is marked as readonly.\n If it is readonly, no new Permission objects can be added to it\n using <code>add</code>.\n\n <p>By default, the object is <i>not</i> readonly. It can be set to\n readonly by a call to <code>setReadOnly</code>.\n\n @return true if this PermissionCollection object is marked as readonly,\n false otherwise.\n"
19578,method,java/security/PermissionCollection/toString/," Returns a string describing this PermissionCollection object,\n providing information about all the permissions it contains.\n The format is:\n <pre>\n super.toString() (\n   // enumerate all the Permission\n   // objects and call toString() on them,\n   // one per line..\n )</pre>\n\n <code>super.toString</code> is a call to the <code>toString</code>\n method of this\n object's superclass, which is Object. The result is\n this PermissionCollection's type name followed by this object's\n hashcode, thus enabling clients to differentiate different\n PermissionCollections object, even if they contain the same permissions.\n\n @return information about this PermissionCollection object,\n         as described above.\n\n"
19581,method,java/security/Permission/checkGuard/Object," Implements the guard interface for a permission. The \n <code>SecurityManager.checkPermission</code> method is called, \n passing this permission object as the permission to check.\n Returns silently if access is granted. Otherwise, throws\n a SecurityException.\n \n @param object the object being guarded (currently ignored).\n\n @throws SecurityException\n        if a security manager exists and its \n        <code>checkPermission</code> method doesn't allow access.\n \n @see Guard\n @see GuardedObject\n @see SecurityManager#checkPermission\n \n"
19595,method,java/security/NoSuchAlgorithmException/NoSuchAlgorithmException/String," Constructs a NoSuchAlgorithmException with the specified\n detail message. A detail message is a String that describes\n this particular exception, which may, for example, specify which\n algorithm is not available.  \n\n @param msg the detail message.  \n"
19598,class,java/security/MessageDigestSpi," This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n for the <code>MessageDigest</code> class, which provides the functionality\n of a message digest algorithm, such as MD5 or SHA. Message digests are\n secure one-way hash functions that take arbitrary-sized data and output a\n fixed-length hash value.\n\n <p> All the abstract methods in this class must be implemented by a\n cryptographic service provider who wishes to supply the implementation\n of a particular message digest algorithm.\n\n <p> Implementations are free to implement the Cloneable interface.\n\n @author Benjamin Renaud \n\n @version 1.18, 03/23/10\n\n @see MessageDigest\n"
19599,method,java/security/MessageDigestSpi/engineGetDigestLength/," Returns the digest length in bytes.\n\n <p>This concrete method has been added to this previously-defined\n abstract class. (For backwards compatibility, it cannot be abstract.)\n \n <p>The default behavior is to return 0.\n \n <p>This method may be overridden by a provider to return the digest\n length.\n\n @return the digest length in bytes.\n\n @since 1.2\n"
19606,method,java/security/MessageDigestSpi/clone/,"\n Returns a clone if the implementation is cloneable.    \n \n @return a clone if the implementation is cloneable.\n\n @exception CloneNotSupportedException if this is called on an\n implementation that does not support <code>Cloneable</code>.\n"
19609,method,java/security/MessageDigest/getInstance/String," Returns a MessageDigest object that implements the specified digest\n algorithm.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new MessageDigest object encapsulating the\n MessageDigestSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n @param algorithm the name of the algorithm requested. \n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @return a Message Digest object that implements the specified algorithm.\n\n @exception NoSuchAlgorithmException if no Provider supports a\n		MessageDigestSpi implementation for the\n		specified algorithm.\n\n @see Provider\n"
19611,method,java/security/MessageDigest/getInstance/String;Provider," Returns a MessageDigest object that implements the specified digest\n algorithm.\n\n <p> A new MessageDigest object encapsulating the\n MessageDigestSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param algorithm the name of the algorithm requested. \n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @param provider the provider.\n\n @return a MessageDigest object that implements the specified algorithm.\n\n @exception NoSuchAlgorithmException if a MessageDigestSpi\n		implementation for the specified algorithm is not available\n		from the specified Provider object.\n\n @exception IllegalArgumentException if the specified provider is null.\n\n @see Provider\n\n @since 1.4\n"
19617,method,java/security/MessageDigest/digest/," Completes the hash computation by performing final operations\n such as padding. The digest is reset after this call is made.\n\n @return the array of bytes for the resulting hash value.  \n"
19618,method,java/security/MessageDigest/digest/byte[];int;int," Completes the hash computation by performing final operations\n such as padding. The digest is reset after this call is made.\n\n @param buf output buffer for the computed digest\n\n @param offset offset into the output buffer to begin storing the digest\n\n @param len number of bytes within buf allotted for the digest\n\n @return the number of bytes placed into <code>buf</code>\n \n @exception DigestException if an error occurs.\n"
19619,method,java/security/MessageDigest/digest/byte[]," Performs a final update on the digest using the specified array \n of bytes, then completes the digest computation. That is, this\n method first calls {@link #update(byte[]) update(input)},\n passing the <i>input</i> array to the <code>update</code> method,\n then calls {@link #digest() digest()}.\n\n @param input the input to be updated before the digest is\n completed.\n\n @return the array of bytes for the resulting hash value.  \n"
19623,method,java/security/MessageDigest/getAlgorithm/,"\n Returns a string that identifies the algorithm, independent of\n implementation details. The name should be a standard\n Java Security name (such as "SHA", "MD5", and so on). \n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @return the name of the algorithm\n"
19625,method,java/security/MessageDigest/clone/,"\n Returns a clone if the implementation is cloneable.    \n \n @return a clone if the implementation is cloneable.\n\n @exception CloneNotSupportedException if this is called on an\n implementation that does not support <code>Cloneable</code>.\n"
19627,class,java/security/KeyStoreSpi," This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n for the <code>KeyStore</code> class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a keystore for a particular keystore type.\n\n @author Jan Luehe\n\n @version 1.23, 03/23/10\n\n @see KeyStore\n\n @since 1.2\n"
19630,method,java/security/KeyStoreSpi/engineGetCertificate/String," Returns the certificate associated with the given alias.\n\n <p> If the given alias name identifies an entry\n created by a call to <code>setCertificateEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>TrustedCertificateEntry</code>,\n then the trusted certificate contained in that entry is returned.\n\n <p> If the given alias name identifies an entry\n created by a call to <code>setKeyEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>PrivateKeyEntry</code>,\n then the first element of the certificate chain in that entry\n (if a chain exists) is returned.\n\n @param alias the alias name\n\n @return the certificate, or null if the given alias does not exist or\n does not contain a certificate.\n"
19634,method,java/security/KeyStoreSpi/engineSetCertificateEntry/String;Certificate," Assigns the given certificate to the given alias.\n\n <p> If the given alias identifies an existing entry\n created by a call to <code>setCertificateEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>TrustedCertificateEntry</code>,\n the trusted certificate in the existing entry\n is overridden by the given certificate.\n\n @param alias the alias name\n @param cert the certificate\n\n @exception KeyStoreException if the given alias already exists and does\n not identify an entry containing a trusted certificate,\n or this operation fails for some other reason.\n"
19639,method,java/security/KeyStoreSpi/engineIsKeyEntry/String," Returns true if the entry identified by the given alias\n was created by a call to <code>setKeyEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>PrivateKeyEntry</code> or a <code>SecretKeyEntry</code>.\n\n @param alias the alias for the keystore entry to be checked\n\n @return true if the entry identified by the given alias is a\n key-related, false otherwise.\n"
19640,method,java/security/KeyStoreSpi/engineIsCertificateEntry/String," Returns true if the entry identified by the given alias\n was created by a call to <code>setCertificateEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>TrustedCertificateEntry</code>.\n\n @param alias the alias for the keystore entry to be checked\n\n @return true if the entry identified by the given alias contains a\n trusted certificate, false otherwise.\n"
19641,method,java/security/KeyStoreSpi/engineGetCertificateAlias/Certificate," Returns the (alias) name of the first keystore entry whose certificate\n matches the given certificate.\n\n <p>This method attempts to match the given certificate with each\n keystore entry. If the entry being considered was\n created by a call to <code>setCertificateEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>TrustedCertificateEntry</code>,\n then the given certificate is compared to that entry's certificate.\n\n <p> If the entry being considered was\n created by a call to <code>setKeyEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>PrivateKeyEntry</code>,\n then the given certificate is compared to the first\n element of that entry's certificate chain.\n\n @param cert the certificate to match with.\n\n @return the alias name of the first entry with matching certificate,\n or null if no such entry exists in this keystore.\n"
19643,method,java/security/KeyStoreSpi/engineStore/LoadStoreParameter," Stores this keystore using the given\n <code>KeyStore.LoadStoreParmeter</code>.\n\n @param param the <code>KeyStore.LoadStoreParmeter</code>\n		that specifies how to store the keystore,\n		which may be <code>null</code>\n\n @exception IllegalArgumentException if the given\n		<code>KeyStore.LoadStoreParmeter</code>\n		input is not recognized\n @exception IOException if there was an I/O problem with data\n @exception NoSuchAlgorithmException if the appropriate data integrity\n		algorithm could not be found\n @exception CertificateException if any of the certificates included in\n		the keystore data could not be stored\n\n @since 1.5\n"
19646,method,java/security/KeyStoreSpi/engineGetEntry/String;ProtectionParameter," Gets a <code>KeyStore.Entry</code> for the specified alias\n with the specified protection parameter.\n\n @param alias get the <code>KeyStore.Entry</code> for this alias\n @param protParam the <code>ProtectionParameter</code>\n		used to protect the <code>Entry</code>,\n		which may be <code>null</code>\n\n @return the <code>KeyStore.Entry</code> for the specified alias,\n		or <code>null</code> if there is no such entry\n\n @exception KeyStoreException if the operation failed\n @exception NoSuchAlgorithmException if the algorithm for recovering the\n		entry cannot be found\n @exception UnrecoverableEntryException if the specified\n		<code>protParam</code> were insufficient or invalid\n @exception UnrecoverableKeyException if the entry is a \n          <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>\n          and the specified <code>protParam</code> does not contain\n          the information needed to recover the key (e.g. wrong password)\n\n @since 1.5\n"
19647,method,java/security/KeyStoreSpi/engineSetEntry/String;Entry;ProtectionParameter," Saves a <code>KeyStore.Entry</code> under the specified alias.\n The specified protection parameter is used to protect the\n <code>Entry</code>.\n\n <p> If an entry already exists for the specified alias,\n it is overridden.\n\n @param alias save the <code>KeyStore.Entry</code> under this alias\n @param entry the <code>Entry</code> to save\n @param protParam the <code>ProtectionParameter</code>\n		used to protect the <code>Entry</code>,\n		which may be <code>null</code>\n\n @exception KeyStoreException if this operation fails\n\n @since 1.5\n"
19648,method,java/security/KeyStoreSpi/engineEntryInstanceOf/String;Class," Determines if the keystore <code>Entry</code> for the specified\n <code>alias</code> is an instance or subclass of the specified\n <code>entryClass</code>.\n\n @param alias the alias name\n @param entryClass the entry class\n\n @return true if the keystore <code>Entry</code> for the specified\n		<code>alias</code> is an instance or subclass of the\n		specified <code>entryClass</code>, false otherwise\n\n @since 1.5\n"
19656,method,java/security/KeyStore/getInstance/String," Returns a keystore object of the specified type.\n \n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the first\n Provider that supports the specified type is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n @param type the type of keystore. \n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard keystore types.\n\n @return a keystore object of the specified type.\n\n @exception KeyStoreException if no Provider supports a\n          KeyStoreSpi implementation for the\n          specified type.\n\n @see Provider\n"
19658,method,java/security/KeyStore/getInstance/String;Provider," Returns a keystore object of the specified type.\n \n <p> A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param type the type of keystore.\n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard keystore types.\n\n @param provider the provider.\n\n @return a keystore object of the specified type.\n\n @exception KeyStoreException if KeyStoreSpi\n          implementation for the specified type is not available\n          from the specified Provider object.\n\n @exception IllegalArgumentException if the specified provider is null.\n\n @see Provider\n\n @since 1.4\n"
19659,method,java/security/KeyStore/getDefaultType/," Returns the default keystore type as specified in the Java security\n properties file, or the string\n &quot;jks&quot; (acronym for &quot;Java keystore&quot;)\n if no such property exists.\n The Java security properties file is located in the file named\n &lt;JAVA_HOME&gt;/lib/security/java.security.\n &lt;JAVA_HOME&gt; refers to the value of the java.home system property,\n and specifies the directory where the JRE is installed.\n\n <p>The default keystore type can be used by applications that do not\n want to use a hard-coded keystore type when calling one of the\n <code>getInstance</code> methods, and want to provide a default keystore\n type in case a user does not specify its own.\n\n <p>The default keystore type can be changed by setting the value of the\n "keystore.type" security property (in the Java security properties\n file) to the desired keystore type.\n\n @return the default keystore type as specified in the \n Java security properties file, or the string &quot;jks&quot;\n if no such property exists.\n"
19664,method,java/security/KeyStore/getCertificate/String," Returns the certificate associated with the given alias.\n\n <p> If the given alias name identifies an entry\n created by a call to <code>setCertificateEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>TrustedCertificateEntry</code>,\n then the trusted certificate contained in that entry is returned.\n\n <p> If the given alias name identifies an entry\n created by a call to <code>setKeyEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>PrivateKeyEntry</code>,\n then the first element of the certificate chain in that entry\n is returned.\n \n @param alias the alias name\n\n @return the certificate, or null if the given alias does not exist or\n does not contain a certificate.\n\n @exception KeyStoreException if the keystore has not been initialized\n (loaded).\n"
19668,method,java/security/KeyStore/setCertificateEntry/String;Certificate," Assigns the given trusted certificate to the given alias.\n\n <p> If the given alias identifies an existing entry\n created by a call to <code>setCertificateEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>TrustedCertificateEntry</code>,\n the trusted certificate in the existing entry\n is overridden by the given certificate.\n\n @param alias the alias name\n @param cert the certificate\n\n @exception KeyStoreException if the keystore has not been initialized,\n or the given alias already exists and does not identify an\n entry containing a trusted certificate,\n or this operation fails for some other reason.\n"
19673,method,java/security/KeyStore/isKeyEntry/String," Returns true if the entry identified by the given alias\n was created by a call to <code>setKeyEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>PrivateKeyEntry</code> or a <code>SecretKeyEntry</code>.\n\n @param alias the alias for the keystore entry to be checked\n\n @return true if the entry identified by the given alias is a\n key-related entry, false otherwise.\n\n @exception KeyStoreException if the keystore has not been initialized\n (loaded).\n"
19674,method,java/security/KeyStore/isCertificateEntry/String," Returns true if the entry identified by the given alias\n was created by a call to <code>setCertificateEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>TrustedCertificateEntry</code>.\n\n @param alias the alias for the keystore entry to be checked\n\n @return true if the entry identified by the given alias contains a\n trusted certificate, false otherwise.\n\n @exception KeyStoreException if the keystore has not been initialized\n (loaded).\n"
19675,method,java/security/KeyStore/getCertificateAlias/Certificate," Returns the (alias) name of the first keystore entry whose certificate\n matches the given certificate.\n\n <p> This method attempts to match the given certificate with each\n keystore entry. If the entry being considered was\n created by a call to <code>setCertificateEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>TrustedCertificateEntry</code>,\n then the given certificate is compared to that entry's certificate.\n\n <p> If the entry being considered was\n created by a call to <code>setKeyEntry</code>,\n or created by a call to <code>setEntry</code> with a\n <code>PrivateKeyEntry</code>,\n then the given certificate is compared to the first\n element of that entry's certificate chain.\n\n @param cert the certificate to match with.\n\n @return the alias name of the first entry with a matching certificate,\n or null if no such entry exists in this keystore.\n\n @exception KeyStoreException if the keystore has not been initialized\n (loaded).\n"
19677,method,java/security/KeyStore/store/LoadStoreParameter," Stores this keystore using the given <code>LoadStoreParameter</code>.\n\n @param param the <code>LoadStoreParameter</code>\n		that specifies how to store the keystore,\n		which may be <code>null</code>\n\n @exception IllegalArgumentException if the given\n		<code>LoadStoreParameter</code>\n		input is not recognized\n @exception KeyStoreException if the keystore has not been initialized\n		(loaded)\n @exception IOException if there was an I/O problem with data\n @exception NoSuchAlgorithmException if the appropriate data integrity\n		algorithm could not be found\n @exception CertificateException if any of the certificates included in\n		the keystore data could not be stored\n\n @since 1.5\n"
19680,method,java/security/KeyStore/getEntry/String;ProtectionParameter," Gets a keystore <code>Entry</code> for the specified alias\n with the specified protection parameter.\n\n @param alias get the keystore <code>Entry</code> for this alias\n @param protParam the <code>ProtectionParameter</code>\n		used to protect the <code>Entry</code>,\n		which may be <code>null</code>\n\n @return the keystore <code>Entry</code> for the specified alias,\n		or <code>null</code> if there is no such entry\n\n @exception NullPointerException if\n		<code>alias</code> is <code>null</code>\n @exception NoSuchAlgorithmException if the algorithm for recovering the\n		entry cannot be found\n @exception UnrecoverableEntryException if the specified\n		<code>protParam</code> were insufficient or invalid\n @exception UnrecoverableKeyException if the entry is a \n          <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>\n          and the specified <code>protParam</code> does not contain\n          the information needed to recover the key (e.g. wrong password)\n @exception KeyStoreException if the keystore has not been initialized\n		(loaded).\n @see #setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)\n\n @since 1.5\n"
19681,method,java/security/KeyStore/setEntry/String;Entry;ProtectionParameter," Saves a keystore <code>Entry</code> under the specified alias.\n The protection parameter is used to protect the\n <code>Entry</code>.\n\n <p> If an entry already exists for the specified alias,\n it is overridden.\n\n @param alias save the keystore <code>Entry</code> under this alias\n @param entry the <code>Entry</code> to save\n @param protParam the <code>ProtectionParameter</code>\n		used to protect the <code>Entry</code>,\n		which may be <code>null</code>\n\n @exception NullPointerException if\n		<code>alias</code> or <code>entry</code>\n		is <code>null</code>\n @exception KeyStoreException if the keystore has not been initialized\n		(loaded), or if this operation fails for some other reason\n\n @see #getEntry(String, KeyStore.ProtectionParameter)\n\n @since 1.5\n"
19682,method,java/security/KeyStore/entryInstanceOf/String;Class," Determines if the keystore <code>Entry</code> for the specified\n <code>alias</code> is an instance or subclass of the specified\n <code>entryClass</code>.\n\n @param alias the alias name\n @param entryClass the entry class \n\n @return true if the keystore <code>Entry</code> for the specified\n		<code>alias</code> is an instance or subclass of the\n		specified <code>entryClass</code>, false otherwise\n\n @exception NullPointerException if\n		<code>alias</code> or <code>entryClass</code>\n		is <code>null</code>\n @exception KeyStoreException if the keystore has not been\n		initialized (loaded)\n\n @since 1.5\n"
19686,interface,java/security/KeyStore/ProtectionParameter," A marker interface for keystore protection parameters.\n\n <p> The information stored in a <code>ProtectionParameter</code>\n object protects the contents of a keystore.\n For example, protection parameters may be used to check\n the integrity of keystore data, or to protect the\n confidentiality of sensitive keystore data\n (such as a <code>PrivateKey</code>).\n\n @since 1.5\n"
19688,method,java/security/KeyStore/PasswordProtection/getPassword/," Gets the password.\n\n <p>Note that this method returns a reference to the password.\n If a clone of the array is created it is the caller's\n responsibility to zero out the password information\n after it is no longer needed.\n\n @see #destroy()\n @return the password, which may be <code>null</code>\n @exception IllegalStateException if the password has\n		been cleared (destroyed)\n"
19691,method,java/security/KeyStore/PasswordProtection/KeyStore/PasswordProtection/char[]," Creates a password parameter.\n\n <p> The specified <code>password</code> is cloned before it is stored\n in the new <code>PasswordProtection</code> object.\n\n @param password the password, which may be <code>null</code>\n"
19692,class,java/security/KeyStore/CallbackHandlerProtection," A ProtectionParameter encapsulating a CallbackHandler.\n\n @since 1.5\n"
19693,method,java/security/KeyStore/CallbackHandlerProtection/getCallbackHandler/," Returns the CallbackHandler.\n\n @return the CallbackHandler.\n"
19694,method,java/security/KeyStore/CallbackHandlerProtection/KeyStore/CallbackHandlerProtection/CallbackHandler," Constructs a new CallbackHandlerProtection from a\n CallbackHandler.\n\n @param handler the CallbackHandler\n @exception NullPointerException if handler is null\n"
19698,method,java/security/KeyStore/PrivateKeyEntry/getCertificateChain/," Gets the <code>Certificate</code> chain from this entry.\n\n <p> The stored chain is cloned before being returned.\n\n @return an array of <code>Certificate</code>s corresponding\n	to the certificate chain for the public key.\n	If the certificates are of type X.509,\n	the runtime type of the returned array is\n	<code>X509Certificate[]</code>.\n"
19710,class,java/security/KeyStore/Builder," A description of a to-be-instantiated KeyStore object.\n\n <p>An instance of this class encapsulates the information needed to\n instantiate and initialize a KeyStore object. That process is\n triggered when the {@linkplain #getKeyStore} method is called.\n\n <p>This makes it possible to decouple configuration from KeyStore\n object creation and e.g. delay a password prompt until it is\n needed.\n\n @see KeyStore\n @see javax.net.ssl.KeyStoreBuilderParameters\n @since 1.5\n"
19711,method,java/security/KeyStore/Builder/getKeyStore/," Returns the KeyStore described by this object.\n\n @exception KeyStoreException if an error occured during the\n   operation, for example if the KeyStore could not be\n   instantiated or loaded\n"
19714,method,java/security/KeyStore/Builder/newInstance/String;Provider;File;ProtectionParameter," Returns a new Builder object.\n\n <p>The first call to the {@link #getKeyStore} method on the returned\n builder will create a KeyStore of type <code>type</code> and call\n its {@link KeyStore#load load()} method. \n The <code>inputStream</code> argument is constructed from\n <code>file</code>. \n If <code>protection</code> is a\n <code>PasswordProtection</code>, the password is obtained by\n calling the <code>getPassword</code> method.\n Otherwise, if <code>protection</code> is a \n <code>CallbackHandlerProtection</code>, the password is obtained\n by invoking the CallbackHandler.\n\n <p>Subsequent calls to {@link #getKeyStore} return the same object \n as the initial call. If the initial call to failed with a\n KeyStoreException, subsequent calls also throw a \n KeyStoreException.\n\n <p>The KeyStore is instantiated from <code>provider</code> if\n non-null. Otherwise, all installed providers are searched.\n\n <p>Calls to {@link #getProtectionParameter getProtectionParameter()}\n will return a {@link KeyStore.PasswordProtection PasswordProtection}\n object encapsulating the password that was used to invoke the\n <code>load</code> method.\n\n <p><em>Note</em> that the {@link #getKeyStore} method is executed \n within the {@link AccessControlContext} of the code invoking this \n method.\n\n @return a new Builder object\n @param type the type of KeyStore to be constructed\n @param provider the provider from which the KeyStore is to\n   be instantiated (or null)\n @param file the File that contains the KeyStore data\n @param protection the ProtectionParameter securing the KeyStore data\n @throws NullPointerException if type, file or protection is null\n @throws IllegalArgumentException if protection is not an instance\n   of either PasswordProtection or CallbackHandlerProtection; or\n   if file does not exist or does not refer to a normal file\n"
19715,method,java/security/KeyStore/Builder/newInstance/String;Provider;ProtectionParameter," Returns a new Builder object.\n\n <p>Each call to the {@link #getKeyStore} method on the returned\n builder will return a new KeyStore object of type <code>type</code>.\n Its {@link KeyStore#load(KeyStore.LoadStoreParameter) load()} \n method is invoked using a\n <code>LoadStoreParameter</code> that encapsulates \n <code>protection</code>.\n\n <p>The KeyStore is instantiated from <code>provider</code> if\n non-null. Otherwise, all installed providers are searched.\n\n <p>Calls to {@link #getProtectionParameter getProtectionParameter()}\n will return <code>protection</code>.\n\n <p><em>Note</em> that the {@link #getKeyStore} method is executed \n within the {@link AccessControlContext} of the code invoking this \n method.\n\n @return a new Builder object\n @param type the type of KeyStore to be constructed\n @param provider the provider from which the KeyStore is to\n   be instantiated (or null)\n @param protection the ProtectionParameter securing the Keystore\n @throws NullPointerException if type or protection is null\n"
19717,class,java/security/KeyRep," Standardized representation for serialized Key objects.\n\n <p>\n\n Note that a serialized Key may contain sensitive information\n which should not be exposed in untrusted environments.  See the\n <a href="../../../platform/serialization/spec/security.html">\n Security Appendix</a>\n of the Serialization Specification for more information.\n\n @see Key\n @see KeyFactory\n @see javax.crypto.spec.SecretKeySpec\n @see java.security.spec.X509EncodedKeySpec\n @see java.security.spec.PKCS8EncodedKeySpec\n\n @version 1.11, 10/03/23\n @since 1.5\n"
19726,class,java/security/KeyPairGeneratorSpi," <p> This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n for the <code>KeyPairGenerator</code> class, which is used to generate\n pairs of public and private keys.\n\n <p> All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a key pair generator for a particular algorithm.\n \n <p> In case the client does not explicitly initialize the KeyPairGenerator\n (via a call to an <code>initialize</code> method), each provider must\n supply (and document) a default initialization.\n For example, the <i>Sun</i> provider uses a default modulus size (keysize)\n of 1024 bits.\n\n @author Benjamin Renaud\n\n @version 1.16, 03/23/10\n\n @see KeyPairGenerator\n @see java.security.spec.AlgorithmParameterSpec\n"
19728,method,java/security/KeyPairGeneratorSpi/initialize/AlgorithmParameterSpec;SecureRandom," Initializes the key pair generator using the specified parameter\n set and user-provided source of randomness.\n\n <p>This concrete method has been added to this previously-defined\n abstract class. (For backwards compatibility, it cannot be abstract.)\n It may be overridden by a provider to initialize the key pair \n generator. Such an override\n is expected to throw an InvalidAlgorithmParameterException if\n a parameter is inappropriate for this key pair generator.\n If this method is not overridden, it always throws an\n UnsupportedOperationException.\n\n @param params the parameter set used to generate the keys.\n\n @param random the source of randomness for this generator.\n\n @exception InvalidAlgorithmParameterException if the given parameters\n are inappropriate for this key pair generator.\n\n @since 1.2\n"
19729,method,java/security/KeyPairGeneratorSpi/generateKeyPair/," Generates a key pair. Unless an initialization method is called\n using a KeyPairGenerator interface, algorithm-specific defaults\n will be used. This will generate a new key pair every time it\n is called.\n\n @return the newly generated <tt>KeyPair</tt>\n"
19733,method,java/security/KeyPairGenerator/getInstance/String," Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n @param algorithm the standard string name of the algorithm. \n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @return the new KeyPairGenerator object.\n\n @exception NoSuchAlgorithmException if no Provider supports a\n          KeyPairGeneratorSpi implementation for the\n          specified algorithm.\n\n @see Provider\n"
19735,method,java/security/KeyPairGenerator/getInstance/String;Provider,"\n Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.\n\n <p> A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param algorithm the standard string name of the algorithm.\n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @param provider the provider.\n\n @return the new KeyPairGenerator object.\n\n @exception NoSuchAlgorithmException if a KeyPairGeneratorSpi\n          implementation for the specified algorithm is not available\n          from the specified Provider object.\n\n @exception IllegalArgumentException if the specified provider is null.\n\n @see Provider\n\n @since 1.4\n"
19739,method,java/security/KeyPairGenerator/initialize/AlgorithmParameterSpec," Initializes the key pair generator using the specified parameter \n set and the <code>SecureRandom</code>\n implementation of the highest-priority installed provider as the source\n of randomness.\n (If none of the installed providers supply an implementation of\n <code>SecureRandom</code>, a system-provided source of randomness is\n used.).\n\n <p>This concrete method has been added to this previously-defined\n abstract class.\n This method calls the KeyPairGeneratorSpi \n {@link KeyPairGeneratorSpi#initialize(\n java.security.spec.AlgorithmParameterSpec,\n java.security.SecureRandom) initialize} method, \n passing it <code>params</code> and a source of randomness (obtained\n from the highest-priority installed provider or system-provided if none\n of the installed providers supply one).\n That <code>initialize</code> method always throws an\n UnsupportedOperationException if it is not overridden by the provider.\n\n @param params the parameter set used to generate the keys.\n\n @exception InvalidAlgorithmParameterException if the given parameters\n are inappropriate for this key pair generator.\n\n @since 1.2\n"
19740,method,java/security/KeyPairGenerator/initialize/AlgorithmParameterSpec;SecureRandom," Initializes the key pair generator with the given parameter \n set and source of randomness.\n\n <p>This concrete method has been added to this previously-defined\n abstract class.\n This method calls the KeyPairGeneratorSpi {@link \n KeyPairGeneratorSpi#initialize(\n java.security.spec.AlgorithmParameterSpec,\n java.security.SecureRandom) initialize} method, \n passing it <code>params</code> and <code>random</code>.\n That <code>initialize</code>\n method always throws an\n UnsupportedOperationException if it is not overridden by the provider.\n\n @param params the parameter set used to generate the keys.\n @param random the source of randomness.\n\n @exception InvalidAlgorithmParameterException if the given parameters\n are inappropriate for this key pair generator.\n\n @since 1.2\n"
19741,method,java/security/KeyPairGenerator/genKeyPair/," Generates a key pair.\n\n <p>If this KeyPairGenerator has not been initialized explicitly,\n provider-specific defaults will be used for the size and other\n (algorithm-specific) values of the generated keys.\n\n <p>This will generate a new key pair every time it is called.\n\n <p>This method is functionally equivalent to \n {@link #generateKeyPair() generateKeyPair}.\n\n @return the generated key pair\n\n @since 1.2\n"
19742,method,java/security/KeyPairGenerator/generateKeyPair/," Generates a key pair.\n\n <p>If this KeyPairGenerator has not been initialized explicitly,\n provider-specific defaults will be used for the size and other\n (algorithm-specific) values of the generated keys.\n\n <p>This will generate a new key pair every time it is called.\n \n <p>This method is functionally equivalent to \n {@link #genKeyPair() genKeyPair}.\n\n @return the generated key pair\n"
19744,class,java/security/KeyPair," This class is a simple holder for a key pair (a public key and a\n private key). It does not enforce any security, and, when initialized,\n should be treated like a PrivateKey.\n\n @see PublicKey\n @see PrivateKey\n\n @version 1.17 10/03/23\n @author Benjamin Renaud\n"
19747,method,java/security/KeyPair/KeyPair/PublicKey;PrivateKey," Constructs a key pair from the given public key and private key.\n\n <p>Note that this constructor only stores references to the public\n and private key components in the generated key pair. This is safe,\n because <code>Key</code> objects are immutable.\n\n @param publicKey the public key.\n\n @param privateKey the private key.\n"
19748,class,java/security/KeyManagementException," This is the general key management exception for all operations\n dealing with key management. Examples of subclasses of \n KeyManagementException that developers might create for \n giving more detailed information could include:\n\n <ul>\n <li>KeyIDConflictException\n <li>KeyAuthorizationFailureException\n <li>ExpiredKeyException\n </ul>\n\n @version 1.20 10/03/23\n @author Benjamin Renaud\n\n @see Key\n @see KeyException\n"
19757,method,java/security/KeyFactorySpi/engineTranslateKey/Key," Translates a key object, whose provider may be unknown or\n potentially untrusted, into a corresponding key object of this key\n factory.\n\n @param key the key whose provider is unknown or untrusted.\n\n @return the translated key.\n\n @exception InvalidKeyException if the given key cannot be processed\n by this key factory.\n"
19759,class,java/security/KeyFactory," Key factories are used to convert <I>keys</I> (opaque\n cryptographic keys of type <code>Key</code>) into <I>key specifications</I>\n (transparent representations of the underlying key material), and vice\n versa.\n\n <P> Key factories are bi-directional. That is, they allow you to build an\n opaque key object from a given key specification (key material), or to\n retrieve the underlying key material of a key object in a suitable format.\n\n <P> Multiple compatible key specifications may exist for the same key.\n For example, a DSA public key may be specified using\n <code>DSAPublicKeySpec</code> or\n <code>X509EncodedKeySpec</code>. A key factory can be used to translate\n between compatible key specifications.\n\n <P> The following is an example of how to use a key factory in order to\n instantiate a DSA public key from its encoding.\n Assume Alice has received a digital signature from Bob.\n Bob also sent her his public key (in encoded format) to verify\n his signature. Alice then performs the following actions:\n\n <pre>\n X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey);\n KeyFactory keyFactory = KeyFactory.getInstance("DSA");\n PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec);\n Signature sig = Signature.getInstance("DSA");\n sig.initVerify(bobPubKey);\n sig.update(data);\n sig.verify(signature);\n </pre>\n\n @author Jan Luehe\n\n @version 1.36, 03/23/10\n\n @see Key\n @see PublicKey\n @see PrivateKey\n @see java.security.spec.KeySpec\n @see java.security.spec.DSAPublicKeySpec\n @see java.security.spec.X509EncodedKeySpec\n\n @since 1.2\n"
19760,method,java/security/KeyFactory/getInstance/String," Returns a KeyFactory object that converts\n public/private keys of the specified algorithm.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyFactory object encapsulating the\n KeyFactorySpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n @param algorithm the name of the requested key algorithm. \n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @return the new KeyFactory object.\n\n @exception NoSuchAlgorithmException if no Provider supports a\n          KeyFactorySpi implementation for the\n          specified algorithm.\n\n @see Provider\n"
19762,method,java/security/KeyFactory/getInstance/String;Provider," Returns a KeyFactory object that converts\n public/private keys of the specified algorithm.\n\n <p> A new KeyFactory object encapsulating the\n KeyFactorySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param algorithm the name of the requested key algorithm. \n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n\n @param provider the provider.\n\n @return the new KeyFactory object.\n\n @exception NoSuchAlgorithmException if a KeyFactorySpi\n          implementation for the specified algorithm is not available\n          from the specified Provider object.\n\n @exception IllegalArgumentException if the specified provider is null.\n \n @see Provider\n\n @since 1.4\n"
19768,method,java/security/KeyFactory/translateKey/Key," Translates a key object, whose provider may be unknown or potentially\n untrusted, into a corresponding key object of this key factory.\n\n @param key the key whose provider is unknown or untrusted.\n\n @return the translated key.\n\n @exception InvalidKeyException if the given key cannot be processed\n by this key factory.\n"
19793,class,java/security/IdentityScope,"\n <p>This class represents a scope for identities. It is an Identity \n itself, and therefore has a name and can have a scope. It can also \n optionally have a public key and associated certificates.\n\n <p>An IdentityScope can contain Identity objects of all kinds, including\n Signers. All types of Identity objects can be retrieved, added, and \n removed using the same methods. Note that it is possible, and in fact\n expected, that different types of identity scopes will\n apply different policies for their various operations on the\n various types of Identities.\n\n <p>There is a one-to-one mapping between keys and identities, and \n there can only be one copy of one key per scope. For example, suppose\n <b>Acme Software, Inc</b> is a software publisher known to a user.\n Suppose it is an Identity, that is, it has a public key, and a set of\n associated certificates. It is named in the scope using the name \n "Acme Software". No other named Identity in the scope has the same \n public  key. Of course, none has the same name as well.\n\n @see Identity\n @see Signer\n @see Principal\n @see Key\n\n @version 1.56 10/03/23\n @author Benjamin Renaud\n\n @deprecated This class is no longer used. Its functionality has been\n replaced by <code>java.security.KeyStore</code>, the\n <code>java.security.cert</code> package, and\n <code>java.security.Principal</code>.\n"
19795,method,java/security/IdentityScope/setSystemScope/IdentityScope," Sets the system's identity scope.\n\n <p>First, if there is a security manager, its \n <code>checkSecurityAccess</code> \n method is called with <code>"setSystemScope"</code> \n as its argument to see if it's ok to set the identity scope. \n \n @param scope the scope to set.\n \n @exception  SecurityException  if a security manager exists and its  \n <code>checkSecurityAccess</code> method doesn't allow \n setting the identity scope.\n \n @see #getSystemScope\n @see SecurityManager#checkSecurityAccess\n"
19798,method,java/security/IdentityScope/getIdentity/Principal," Retrieves the identity whose name is the same as that of the \n specified principal. (Note: Identity implements Principal.)\n\n @param principal the principal corresponding to the identity\n to be retrieved.\n \n @return the identity whose name is the same as that of the \n principal, or null if there are no identities of the same name \n in this scope.\n"
19807,class,java/security/Identity," <p>This class represents identities: real-world objects such as people,\n companies or organizations whose identities can be authenticated using \n their public keys. Identities may also be more abstract (or concrete) \n constructs, such as daemon threads or smart cards.\n\n <p>All Identity objects have a name and a public key. Names are\n immutable. Identities may also be scoped. That is, if an Identity is\n specified to have a particular scope, then the name and public\n key of the Identity are unique within that scope.\n\n <p>An Identity also has a set of certificates (all certifying its own\n public key). The Principal names specified in these certificates need \n not be the same, only the key.\n\n <p>An Identity can be subclassed, to include postal and email addresses,\n telephone numbers, images of faces and logos, and so on.\n\n @see IdentityScope\n @see Signer\n @see Principal\n\n @version 1.63\n @author Benjamin Renaud\n @deprecated This class is no longer used. Its functionality has been\n replaced by <code>java.security.KeyStore</code>, the\n <code>java.security.cert</code> package, and\n <code>java.security.Principal</code>.\n"
19811,method,java/security/Identity/setPublicKey/PublicKey," Sets this identity's public key. The old key and all of this\n identity's certificates are removed by this operation. \n\n <p>First, if there is a security manager, its <code>checkSecurityAccess</code> \n method is called with <code>"setIdentityPublicKey"</code> \n as its argument to see if it's ok to set the public key. \n \n @param key the public key for this identity.\n\n @exception KeyManagementException if another identity in the \n identity's scope has the same public key, or if another exception occurs.  \n \n @exception  SecurityException  if a security manager exists and its  \n <code>checkSecurityAccess</code> method doesn't allow \n setting the public key.\n \n @see #getPublicKey\n @see SecurityManager#checkSecurityAccess\n"
19812,method,java/security/Identity/setInfo/String," Specifies a general information string for this identity.\n\n <p>First, if there is a security manager, its <code>checkSecurityAccess</code> \n method is called with <code>"setIdentityInfo"</code> \n as its argument to see if it's ok to specify the information string. \n \n @param info the information string.\n \n @exception  SecurityException  if a security manager exists and its  \n <code>checkSecurityAccess</code> method doesn't allow \n setting the information string.\n \n @see #getInfo\n @see SecurityManager#checkSecurityAccess\n"
19815,method,java/security/Identity/removeCertificate/Certificate," Removes a certificate from this identity.\n\n <p>First, if there is a security manager, its <code>checkSecurityAccess</code> \n method is called with <code>"removeIdentityCertificate"</code> \n as its argument to see if it's ok to remove a certificate. \n \n @param certificate the certificate to be removed.\n\n @exception KeyManagementException if the certificate is\n missing, or if another exception occurs.\n \n @exception  SecurityException  if a security manager exists and its  \n <code>checkSecurityAccess</code> method doesn't allow \n removing a certificate.\n \n @see SecurityManager#checkSecurityAccess\n"
19819,method,java/security/Identity/toString/," Returns a short string describing this identity, telling its\n name and its scope (if any).\n\n <p>First, if there is a security manager, its <code>checkSecurityAccess</code> \n method is called with <code>"printIdentity"</code> \n as its argument to see if it's ok to return the string. \n\n @return information about this identity, such as its name and the  \n name of its scope (if any).\n \n @exception  SecurityException  if a security manager exists and its  \n <code>checkSecurityAccess</code> method doesn't allow \n returning a string describing this identity.\n \n @see SecurityManager#checkSecurityAccess\n"
19820,method,java/security/Identity/toString/boolean," Returns a string representation of this identity, with\n optionally more details than that provided by the\n <code>toString</code> method without any arguments.\n\n <p>First, if there is a security manager, its <code>checkSecurityAccess</code> \n method is called with <code>"printIdentity"</code> \n as its argument to see if it's ok to return the string. \n\n @param detailed whether or not to provide detailed information.  \n\n @return information about this identity. If <code>detailed</code>\n is true, then this method returns more information than that \n provided by the <code>toString</code> method without any arguments.\n\n @exception  SecurityException  if a security manager exists and its  \n <code>checkSecurityAccess</code> method doesn't allow \n returning a string describing this identity.\n \n @see #toString\n @see SecurityManager#checkSecurityAccess\n"
19822,method,java/security/Identity/Identity/," Constructor for serialization only.\n"
19825,class,java/security/GuardedObject," A GuardedObject is an object that is used to protect access to\n another object.\n\n <p>A GuardedObject encapsulates a target object and a Guard object,\n such that access to the target object is possible\n only if the Guard object allows it.\n Once an object is encapsulated by a GuardedObject,\n access to that object is controlled by the <code>getObject</code>\n method, which invokes the\n <code>checkGuard</code> method on the Guard object that is\n guarding access. If access is not allowed,\n an exception is thrown.\n\n @see Guard\n @see Permission\n\n @version 1.18 10/03/23\n @author Roland Schemers\n @author Li Gong\n"
19828,interface,java/security/Guard," <p> This interface represents a guard, which is an object that is used\n to protect access to another object.\n\n <p>This interface contains a single method, <code>checkGuard</code>,\n with a single <code>object</code> argument. <code>checkGuard</code> is\n invoked (by the GuardedObject <code>getObject</code> method)\n to determine whether or not to allow access to the object.\n\n @see GuardedObject\n\n @version 1.14 10/03/23\n @author Roland Schemers\n @author Li Gong\n"
19830,class,java/security/GeneralSecurityException," The <code>GeneralSecurityException</code> class is a generic\n security exception class that provides type safety for all the\n security-related exception classes that extend from it.\n\n @version 1.18, 10/03/23\n @author Jan Luehe\n"
19835,interface,java/security/DomainCombiner," A <code>DomainCombiner</code> provides a means to dynamically\n update the ProtectionDomains associated with the current\n <code>AccessControlContext</code>.\n\n <p> A <code>DomainCombiner</code> is passed as a parameter to the\n appropriate constructor for <code>AccessControlContext</code>.\n The newly constructed context is then passed to the\n <code>AccessController.doPrivileged(..., context)</code> method\n to bind the provided context (and associated <code>DomainCombiner</code>)\n with the current execution Thread.  Subsequent calls to\n <code>AccessController.getContext</code> or\n <code>AccessController.checkPermission</code>\n cause the <code>DomainCombiner.combine</code> to get invoked.\n\n <p> The combine method takes two arguments.  The first argument represents\n an array of ProtectionDomains from the current execution Thread,\n since the most recent call to <code>AccessController.doPrivileged</code>.\n If no call to doPrivileged was made, then the first argument will contain\n all the ProtectionDomains from the current execution Thread.\n The second argument represents an array of inherited ProtectionDomains,\n which may be <code>null</code>.  ProtectionDomains may be inherited\n from a parent Thread, or from a privileged context.  If no call to\n doPrivileged was made, then the second argument will contain the\n ProtectionDomains inherited from the parent Thread.  If one or more calls\n to doPrivileged were made, and the most recent call was to\n doPrivileged(action, context), then the second argument will contain the\n ProtectionDomains from the privileged context.  If the most recent call\n was to doPrivileged(action), then there is no privileged context,\n and the second argument will be <code>null</code>.\n\n <p> The <code>combine</code> method investigates the two input arrays\n of ProtectionDomains and returns a single array containing the updated\n ProtectionDomains.  In the simplest case, the <code>combine</code>\n method merges the two stacks into one.  In more complex cases,\n the <code>combine</code> method returns a modified\n stack of ProtectionDomains.  The modification may have added new\n ProtectionDomains, removed certain ProtectionDomains, or simply\n updated existing ProtectionDomains.  Re-ordering and other optimizations\n to the ProtectionDomains are also permitted.  Typically the\n <code>combine</code> method bases its updates on the information\n encapsulated in the <code>DomainCombiner</code>.\n\n <p> After the <code>AccessController.getContext</code> method\n receives the combined stack of ProtectionDomains back from\n the <code>DomainCombiner</code>, it returns a new\n AccessControlContext that has both the combined ProtectionDomains\n as well as the <code>DomainCombiner</code>.\n \n @see AccessController\n @see AccessControlContext\n @version 1.10, 03/23/10\n @since 1.3\n"
19837,class,java/security/DigestOutputStream," A transparent stream that updates the associated message digest using\n the bits going through the stream.\n\n <p>To complete the message digest computation, call one of the\n <code>digest</code> methods on the associated message\n digest after your calls to one of this digest ouput stream's\n {@link #write(int) write} methods.\n\n <p>It is possible to turn this stream on or off (see\n {@link #on(boolean) on}). When it is on, a call to one of the\n <code>write</code> methods results in\n an update on the message digest.  But when it is off, the message\n digest is not updated. The default is for the stream to be on.\n\n @see MessageDigest\n @see DigestInputStream\n\n @version 1.33 10/03/23\n @author Benjamin Renaud\n"
19840,method,java/security/DigestOutputStream/write/int," Updates the message digest (if the digest function is on) using\n the specified byte, and in any case writes the byte\n to the output stream. That is, if the digest function is on\n (see {@link #on(boolean) on}), this method calls\n <code>update</code> on the message digest associated with this\n stream, passing it the byte <code>b</code>. This method then\n writes the byte to the output stream, blocking until the byte\n is actually written.\n\n @param b the byte to be used for updating and writing to the\n output stream.\n\n @exception IOException if an I/O error occurs.\n\n @see MessageDigest#update(byte)\n"
19841,method,java/security/DigestOutputStream/write/byte[];int;int," Updates the message digest (if the digest function is on) using\n the specified subarray, and in any case writes the subarray to\n the output stream. That is, if the digest function is on (see\n {@link #on(boolean) on}), this method calls <code>update</code>\n on the message digest associated with this stream, passing it\n the subarray specifications. This method then writes the subarray\n bytes to the output stream, blocking until the bytes are actually\n written.\n\n @param b the array containing the subarray to be used for updating\n and writing to the output stream.\n\n @param off the offset into <code>b</code> of the first byte to\n be updated and written.\n\n @param len the number of bytes of data to be updated and written\n from <code>b</code>, starting at offset <code>off</code>.\n\n @exception IOException if an I/O error occurs.\n\n @see MessageDigest#update(byte[], int, int)\n"
19842,method,java/security/DigestOutputStream/on/boolean," Turns the digest function on or off. The default is on.  When\n it is on, a call to one of the <code>write</code> methods results in an\n update on the message digest.  But when it is off, the message\n digest is not updated.\n\n @param on true to turn the digest function on, false to turn it\n off.\n"
19849,method,java/security/DigestInputStream/read/," Reads a byte, and updates the message digest (if the digest\n function is on).  That is, this method reads a byte from the\n input stream, blocking until the byte is actually read. If the\n digest function is on (see {@link #on(boolean) on}), this method\n will then call <code>update</code> on the message digest associated\n with this stream, passing it the byte read.\n\n @return the byte read.\n\n @exception IOException if an I/O error occurs.\n\n @see MessageDigest#update(byte)\n"
19850,method,java/security/DigestInputStream/read/byte[];int;int," Reads into a byte array, and updates the message digest (if the\n digest function is on).  That is, this method reads up to\n <code>len</code> bytes from the input stream into the array\n <code>b</code>, starting at offset <code>off</code>. This method\n blocks until the data is actually\n read. If the digest function is on (see\n {@link #on(boolean) on}), this method will then call <code>update</code>\n on the message digest associated with this stream, passing it\n the data.\n\n @param b	the array into which the data is read.\n\n @param off the starting offset into <code>b</code> of where the\n data should be placed.\n\n @param len the maximum number of bytes to be read from the input\n stream into b, starting at offset <code>off</code>.\n\n @return  the actual number of bytes read. This is less than\n <code>len</code> if the end of the stream is reached prior to\n reading <code>len</code> bytes. -1 is returned if no bytes were\n read because the end of the stream had already been reached when\n the call was made.\n\n @exception IOException if an I/O error occurs.\n\n @see MessageDigest#update(byte[], int, int)\n"
19851,method,java/security/DigestInputStream/on/boolean," Turns the digest function on or off. The default is on.  When\n it is on, a call to one of the <code>read</code> methods results in an\n update on the message digest.  But when it is off, the message\n digest is not updated.\n\n @param on true to turn the digest function on, false to turn\n it off.\n"
19860,class,java/security/CodeSource,"\n <p>This class extends the concept of a codebase to\n encapsulate not only the location (URL) but also the certificate chains \n that were used to verify signed code originating from that location.\n\n @version 	1.42, 03/23/10\n @author Li Gong\n @author Roland Schemers\n"
19864,method,java/security/CodeSource/getCertificates/," Returns the certificates associated with this CodeSource.\n <p>\n If this CodeSource object was created using the\n {@link #CodeSource(URL url, CodeSigner[] signers)}\n constructor then its certificate chains are extracted and used to \n create an array of Certificate objects. Each signer certificate is \n followed by its supporting certificate chain (which may be empty). \n Each signer certificate and its supporting certificate chain is ordered \n bottom-to-top (i.e., with the signer certificate first and the (root) \n certificate authority last).\n \n @return A copy of the certificates array, or null if there is none. \n"
19865,method,java/security/CodeSource/getCodeSigners/," Returns the code signers associated with this CodeSource.\n <p>\n If this CodeSource object was created using the\n {@link #CodeSource(URL url, Certificate[] certs)}\n constructor then its certificate chains are extracted and used to \n create an array of CodeSigner objects. Note that only X.509 certificates\n are examined - all other certificate types are ignored.\n\n @return A copy of the code signer array, or null if there is none.\n\n @since 1.5\n"
19868,method,java/security/CodeSource/CodeSource/URL;Certificate[]," Constructs a CodeSource and associates it with the specified \n location and set of certificates.\n \n @param url the location (URL).\n \n @param certs the certificate(s). It may be null. The contents of the \n array are copied to protect against subsequent modification.\n"
19869,method,java/security/CodeSource/CodeSource/URL;CodeSigner[]," Constructs a CodeSource and associates it with the specified \n location and set of code signers.\n \n @param url the location (URL).\n @param signers the code signers. It may be null. The contents of the \n array are copied to protect against subsequent modification.\n\n @since 1.5\n"
19874,method,java/security/CodeSigner/equals/Object," Tests for equality between the specified object and this\n code signer. Two code signers are considered equal if their \n signer certificate paths are equal and if their timestamps are equal,\n if present in both.\n \n @param obj the object to test for equality with this object.\n \n @return true if the objects are considered equal, false otherwise.\n"
19877,interface,java/security/Certificate," <p>This is an interface of abstract methods for managing a\n variety of identity certificates.\n An identity certificate is a guarantee by a principal that\n a public key is that of another principal.  (A principal represents\n an entity such as an individual user, a group, or a corporation.)\n\n <p>In particular, this interface is intended to be a common\n abstraction for constructs that have different formats but\n important common uses.  For example, different types of\n certificates, such as X.509 certificates and PGP certificates,\n share general certificate functionality (the need to encode and\n decode certificates) and some types of information, such as a\n public key, the principal whose key it is, and the guarantor\n guaranteeing that the public key is that of the specified\n principal. So an implementation of X.509 certificates and an\n implementation of PGP certificates can both utilize the Certificate\n interface, even though their formats and additional types and\n amounts of information stored are different.\n\n <p><b>Important</b>: This interface is useful for cataloging and\n grouping objects sharing certain common uses. It does not have any\n semantics of its own. In particular, a Certificate object does not\n make any statement as to the <i>validity</i> of the binding. It is\n the duty of the application implementing this interface to verify\n the certificate and satisfy itself of its validity.\n\n @version 	1.40, 03/23/10\n @author Benjamin Renaud \n @deprecated A new certificate handling package is created in the Java platform.\n             This Certificate interface is entirely deprecated and\n             is here to allow for a smooth transition to the new\n             package.\n @see java.security.cert.Certificate\n"
19888,method,java/security/BasicPermission/hashCode/," Returns the hash code value for this object.\n The hash code used is the hash code of the name, that is,\n <code>getName().hashCode()</code>, where <code>getName</code> is\n from the Permission superclass.\n\n @return a hash code value for this object.\n"
19893,class,java/security/AuthProvider," This class defines login and logout methods for a provider.\n\n <p> While callers may invoke <code>login</code> directly,\n the provider may also invoke <code>login</code> on behalf of callers\n if it determines that a login must be performed\n prior to certain operations.\n\n @version 1.5, 03/23/10\n @since 1.5\n"
19894,method,java/security/AuthProvider/login/Subject;CallbackHandler," Log in to this provider.\n\n <p> The provider relies on a <code>CallbackHandler</code>\n to obtain authentication information from the caller\n (a PIN, for example).  If the caller passes a <code>null</code>\n handler to this method, the provider uses the handler set in the\n <code>setCallbackHandler</code> method.\n If no handler was set in that method, the provider queries the\n <i>auth.login.defaultCallbackHandler</i> security property\n for the fully qualified class name of a default handler implementation.\n If the security property is not set,\n the provider is assumed to have alternative means\n for obtaining authentication information.\n\n @param subject the <code>Subject</code> which may contain\n		principals/credentials used for authentication,\n		or may be populated with additional principals/credentials\n		after successful authentication has completed.\n		This parameter may be <code>null</code>.\n @param handler the <code>CallbackHandler</code> used by\n		this provider to obtain authentication information\n		from the caller, which may be <code>null</code>\n\n @exception LoginException if the login operation fails\n @exception SecurityException if the caller does not pass a\n	security check for\n	<code>SecurityPermission("authProvider.<i>name</i>")</code>,\n	where <i>name</i> is the value returned by\n	this provider's <code>getName</code> method\n"
19895,method,java/security/AuthProvider/logout/," Log out from this provider.\n\n @exception LoginException if the logout operation fails\n @exception SecurityException if the caller does not pass a\n	security check for\n	<code>SecurityPermission("authProvider.<i>name</i>")</code>,\n	where <i>name</i> is the value returned by\n	this provider's <code>getName</code> method\n"
19906,class,java/security/AlgorithmParametersSpi," This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n for the <code>AlgorithmParameters</code> class, which is used to manage\n algorithm parameters.\n\n <p> All the abstract methods in this class must be implemented by each \n cryptographic service provider who wishes to supply parameter management\n for a particular algorithm.\n\n @author Jan Luehe\n\n @version 1.15, 03/23/10\n\n @see AlgorithmParameters\n @see java.security.spec.AlgorithmParameterSpec\n @see java.security.spec.DSAParameterSpec\n\n @since 1.2\n"
19908,method,java/security/AlgorithmParametersSpi/engineInit/byte[]," Imports the specified parameters and decodes them\n according to the primary decoding format for parameters.\n The primary decoding format for parameters is ASN.1, if an ASN.1\n specification for this type of parameters exists.\n\n @param params the encoded parameters.\n\n @exception IOException on decoding errors\n"
19909,method,java/security/AlgorithmParametersSpi/engineInit/byte[];String," Imports the parameters from <code>params</code> and\n decodes them according to the specified decoding format.\n If <code>format</code> is null, the\n primary decoding format for parameters is used. The primary decoding\n format is ASN.1, if an ASN.1 specification for these parameters\n exists.\n\n @param params the encoded parameters.\n\n @param format the name of the decoding format.\n\n @exception IOException on decoding errors\n"
19910,method,java/security/AlgorithmParametersSpi/engineGetParameterSpec/Class," Returns a (transparent) specification of this parameters\n object.\n <code>paramSpec</code> identifies the specification class in which \n the parameters should be returned. It could, for example, be\n <code>DSAParameterSpec.class</code>, to indicate that the\n parameters should be returned in an instance of the \n <code>DSAParameterSpec</code> class.\n\n @param paramSpec the the specification class in which \n the parameters should be returned.\n\n @return the parameter specification.\n\n @exception InvalidParameterSpecException if the requested parameter\n specification is inappropriate for this parameter object.\n"
19911,method,java/security/AlgorithmParametersSpi/engineGetEncoded/," Returns the parameters in their primary encoding format.\n The primary encoding format for parameters is ASN.1, if an ASN.1\n specification for this type of parameters exists.\n\n @return the parameters encoded using their primary encoding format.\n\n @exception IOException on encoding errors.\n"
19912,method,java/security/AlgorithmParametersSpi/engineGetEncoded/String," Returns the parameters encoded in the specified format.\n If <code>format</code> is null, the\n primary encoding format for parameters is used. The primary encoding\n format is ASN.1, if an ASN.1 specification for these parameters\n exists.\n\n @param format the name of the encoding format.\n\n @return the parameters encoded using the specified encoding scheme.\n\n @exception IOException on encoding errors.\n"
19922,method,java/security/AlgorithmParameters/init/byte[]," Imports the specified parameters and decodes them according to the \n primary decoding format for parameters. The primary decoding\n format for parameters is ASN.1, if an ASN.1 specification for this type\n of parameters exists.\n\n @param params the encoded parameters.\n\n @exception IOException on decoding errors, or if this parameter object\n has already been initialized.\n"
19923,method,java/security/AlgorithmParameters/init/byte[];String," Imports the parameters from <code>params</code> and decodes them \n according to the specified decoding scheme.\n If <code>format</code> is null, the\n primary decoding format for parameters is used. The primary decoding\n format is ASN.1, if an ASN.1 specification for these parameters\n exists.\n\n @param params the encoded parameters.\n\n @param format the name of the decoding scheme.\n\n @exception IOException on decoding errors, or if this parameter object\n has already been initialized.\n"
19924,method,java/security/AlgorithmParameters/getParameterSpec/Class," Returns a (transparent) specification of this parameter object.\n <code>paramSpec</code> identifies the specification class in which \n the parameters should be returned. It could, for example, be\n <code>DSAParameterSpec.class</code>, to indicate that the\n parameters should be returned in an instance of the \n <code>DSAParameterSpec</code> class.\n\n @param paramSpec the specification class in which \n the parameters should be returned.\n\n @return the parameter specification.\n\n @exception InvalidParameterSpecException if the requested parameter\n specification is inappropriate for this parameter object, or if this\n parameter object has not been initialized.\n"
19925,method,java/security/AlgorithmParameters/getEncoded/," Returns the parameters in their primary encoding format.\n The primary encoding format for parameters is ASN.1, if an ASN.1\n specification for this type of parameters exists.\n\n @return the parameters encoded using their primary encoding format.\n\n @exception IOException on encoding errors, or if this parameter object\n has not been initialized.\n"
19936,method,java/security/AlgorithmParameterGenerator/getInstance/String," Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new AlgorithmParameterGenerator object encapsulating the\n AlgorithmParameterGeneratorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n @param algorithm the name of the algorithm this\n parameter generator is associated with.\n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a>\n for information about standard algorithm names.\n\n @return the new AlgorithmParameterGenerator object.\n\n @exception NoSuchAlgorithmException if no Provider supports an\n		AlgorithmParameterGeneratorSpi implementation for the\n		specified algorithm.\n \n @see Provider\n"
19938,method,java/security/AlgorithmParameterGenerator/getInstance/String;Provider,"\n Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.\n\n <p> A new AlgorithmParameterGenerator object encapsulating the\n AlgorithmParameterGeneratorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param algorithm the string name of the algorithm this\n parameter generator is associated with.\n See Appendix A in the <a href=\n "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a>\n for information about standard algorithm names.\n\n @param provider the Provider object.\n\n @return the new AlgorithmParameterGenerator object.\n\n @exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi\n		implementation for the specified algorithm is not available\n		from the specified Provider object.\n\n @exception IllegalArgumentException if the specified provider is null.\n\n @see Provider\n\n @since 1.4\n"
19946,class,java/security/AccessController,"\n <p> The AccessController class is used for access control operations\n and decisions.\n \n <p> More specifically, the AccessController class is used for \n three purposes:\n \n <ul>\n <li> to decide whether an access to a critical system\n resource is to be allowed or denied, based on the security policy\n currently in effect,<p> \n <li>to mark code as being "privileged", thus affecting subsequent\n access determinations, and<p>\n <li>to obtain a "snapshot" of the current calling context so\n access-control decisions from a different context can be made with\n respect to the saved context. </ul>\n \n <p> The {@link #checkPermission(Permission) checkPermission} method\n determines whether the access request indicated by a specified\n permission should be granted or denied. A sample call appears\n below. In this example, <code>checkPermission</code> will determine \n whether or not to grant "read" access to the file named "testFile" in \n the "/temp" directory.\n \n <pre>\n \n    FilePermission perm = new FilePermission("/temp/testFile", "read");\n    AccessController.checkPermission(perm);\n \n </pre>\n\n <p> If a requested access is allowed, \n <code>checkPermission</code> returns quietly. If denied, an \n AccessControlException is\n thrown. AccessControlException can also be thrown if the requested\n permission is of an incorrect type or contains an invalid value.\n Such information is given whenever possible.\n \n Suppose the current thread traversed m callers, in the order of caller 1 \n to caller 2 to caller m. Then caller m invoked the \n <code>checkPermission</code> method.\n The <code>checkPermission </code>method determines whether access \n is granted or denied based on the following algorithm:\n \n <pre>\n i = m;\n \n while (i > 0) {\n \n      if (caller i's domain does not have the permission)\n              throw AccessControlException\n \n      else if (caller i is marked as privileged) {\n              if (a context was specified in the call to doPrivileged) \n                 context.checkPermission(permission)\n              return;\n      }\n      i = i - 1;\n };\n\n    // Next, check the context inherited when\n    // the thread was created. Whenever a new thread is created, the\n    // AccessControlContext at that time is\n    // stored and associated with the new thread, as the "inherited"\n    // context.\n \n inheritedContext.checkPermission(permission);\n </pre>\n \n <p> A caller can be marked as being "privileged" \n (see {@link #doPrivileged(PrivilegedAction) doPrivileged} and below). \n When making access control decisions, the <code>checkPermission</code>\n method stops checking if it reaches a caller that \n was marked as "privileged" via a <code>doPrivileged</code> \n call without a context argument (see below for information about a\n context argument). If that caller's domain has the\n specified permission, no further checking is done and \n <code>checkPermission</code>\n returns quietly, indicating that the requested access is allowed.\n If that domain does not have the specified permission, an exception\n is thrown, as usual.\n \n <p> The normal use of the "privileged" feature is as follows. If you\n don't need to return a value from within the "privileged" block, do \n the following:\n\n <pre>\n   somemethod() {\n        ...normal code here...\n        AccessController.doPrivileged(new PrivilegedAction() {\n            public Object run() {\n                // privileged code goes here, for example:\n                System.loadLibrary("awt");\n                return null; // nothing to return\n            }\n        });\n       ...normal code here...\n  }\n </pre>\n\n <p>\n PrivilegedAction is an interface with a single method, named\n <code>run</code>, that returns an Object.\n The above example shows creation of an implementation\n of that interface; a concrete implementation of the\n <code>run</code> method is supplied.\n When the call to <code>doPrivileged</code> is made, an \n instance of the PrivilegedAction implementation is passed\n to it. The <code>doPrivileged</code> method calls the\n <code>run</code> method from the PrivilegedAction \n implementation after enabling privileges, and returns the \n <code>run</code> method's return value as the \n <code>doPrivileged</code> return value (which is\n ignored in this example).\n\n <p> If you need to return a value, you can do something like the following:\n\n <pre>\n   somemethod() {\n        ...normal code here...\n        String user = (String) AccessController.doPrivileged(\n          new PrivilegedAction() {\n            public Object run() {\n                return System.getProperty("user.name");\n            }\n          }\n        );\n        ...normal code here...\n  }\n </pre>\n\n <p>If the action performed in your <code>run</code> method could\n throw a "checked" exception (those listed in the <code>throws</code> clause\n of a method), then you need to use the \n <code>PrivilegedExceptionAction</code> interface instead of the\n <code>PrivilegedAction</code> interface:\n \n <pre>\n   somemethod() throws FileNotFoundException {\n        ...normal code here...\n      try {\n        FileInputStream fis = (FileInputStream) AccessController.doPrivileged(\n          new PrivilegedExceptionAction() {\n            public Object run() throws FileNotFoundException {\n                return new FileInputStream("someFile");\n            }\n          }\n        );\n      } catch (PrivilegedActionException e) {\n        // e.getException() should be an instance of FileNotFoundException,\n        // as only "checked" exceptions will be "wrapped" in a\n        // <code>PrivilegedActionException</code>.\n        throw (FileNotFoundException) e.getException();\n      }\n        ...normal code here...\n  }\n </pre>\n \n <p> Be *very* careful in your use of the "privileged" construct, and \n always remember to make the privileged code section as small as possible.\n \n <p> Note that <code>checkPermission</code> always performs security checks\n within the context of the currently executing thread.\n Sometimes a security check that should be made within a given context\n will actually need to be done from within a\n <i>different</i> context (for example, from within a worker thread).\n The {@link #getContext() getContext} method and \n AccessControlContext class are provided \n for this situation. The <code>getContext</code> method takes a "snapshot"\n of the current calling context, and places\n it in an AccessControlContext object, which it returns. A sample call is\n the following:\n \n <pre>\n \n   AccessControlContext acc = AccessController.getContext()\n \n </pre>\n \n <p>\n AccessControlContext itself has a <code>checkPermission</code> method\n that makes access decisions based on the context <i>it</i> encapsulates,\n rather than that of the current execution thread.\n Code within a different context can thus call that method on the\n previously-saved AccessControlContext object. A sample call is the\n following:\n \n <pre>\n \n   acc.checkPermission(permission)\n \n </pre> \n\n <p> There are also times where you don't know a priori which permissions\n to check the context against. In these cases you can use the\n doPrivileged method that takes a context:\n \n <pre>\n   somemethod() {\n         AccessController.doPrivileged(new PrivilegedAction() {\n              public Object run() {\n                 // Code goes here. Any permission checks within this\n                 // run method will require that the intersection of the\n                 // callers protection domain and the snapshot's\n                 // context have the desired permission.\n              }\n         }, acc);\n         ...normal code here...\n   }\n </pre>\n \n @see AccessControlContext\n\n @version 1.60 10/03/23\n @author Li Gong \n @author Roland Schemers\n"
19947,method,java/security/AccessController/doPrivileged/PrivilegedAction," Performs the specified <code>PrivilegedAction</code> with privileges\n enabled. The action is performed with <i>all</i> of the permissions \n possessed by the caller's protection domain.\n \n <p> If the action's <code>run</code> method throws an (unchecked)\n exception, it will propagate through this method.\n\n <p> Note that any DomainCombiner associated with the current\n AccessControlContext will be ignored while the action is performed.\n\n @param action the action to be performed.\n\n @return the value returned by the action's <code>run</code> method.\n\n @exception NullPointerException if the action is <code>null</code>\n\n @see #doPrivileged(PrivilegedAction,AccessControlContext)\n @see #doPrivileged(PrivilegedExceptionAction)\n @see #doPrivilegedWithCombiner(PrivilegedAction)\n @see java.security.DomainCombiner\n"
19948,method,java/security/AccessController/doPrivilegedWithCombiner/PrivilegedAction," Performs the specified <code>PrivilegedAction</code> with privileges\n enabled. The action is performed with <i>all</i> of the permissions \n possessed by the caller's protection domain.\n\n <p> If the action's <code>run</code> method throws an (unchecked)\n exception, it will propagate through this method.\n\n <p> This method preserves the current AccessControlContext's\n DomainCombiner (which may be null) while the action is performed.\n\n @param action the action to be performed.\n\n @return the value returned by the action's <code>run</code> method.\n\n @exception NullPointerException if the action is <code>null</code>\n\n @see #doPrivileged(PrivilegedAction)\n @see java.security.DomainCombiner\n\n @since 1.6\n"
19950,method,java/security/AccessController/doPrivileged/PrivilegedExceptionAction," Performs the specified <code>PrivilegedExceptionAction</code> with\n privileges enabled.  The action is performed with <i>all</i> of the \n permissions possessed by the caller's protection domain.\n\n <p> If the action's <code>run</code> method throws an <i>unchecked</i>\n exception, it will propagate through this method.\n\n <p> Note that any DomainCombiner associated with the current\n AccessControlContext will be ignored while the action is performed.\n\n @param action the action to be performed\n\n @return the value returned by the action's <code>run</code> method\n\n @exception PrivilegedActionException if the specified action's\n         <code>run</code> method threw a <i>checked</i> exception\n @exception NullPointerException if the action is <code>null</code>\n \n @see #doPrivileged(PrivilegedAction)\n @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n @see #doPrivilegedWithCombiner(PrivilegedExceptionAction)\n @see java.security.DomainCombiner\n"
19951,method,java/security/AccessController/doPrivilegedWithCombiner/PrivilegedExceptionAction," Performs the specified <code>PrivilegedExceptionAction</code> with\n privileges enabled.  The action is performed with <i>all</i> of the \n permissions possessed by the caller's protection domain.\n\n <p> If the action's <code>run</code> method throws an <i>unchecked</i>\n exception, it will propagate through this method.\n\n <p> This method preserves the current AccessControlContext's\n DomainCombiner (which may be null) while the action is performed.\n\n @param action the action to be performed.\n\n @return the value returned by the action's <code>run</code> method\n\n @exception PrivilegedActionException if the specified action's\n         <code>run</code> method threw a <i>checked</i> exception\n @exception NullPointerException if the action is <code>null</code>\n \n @see #doPrivileged(PrivilegedAction)\n @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n @see java.security.DomainCombiner\n\n @since 1.6\n"
19952,method,java/security/AccessController/doPrivileged/PrivilegedExceptionAction;AccessControlContext," Performs the specified <code>PrivilegedExceptionAction</code> with \n privileges enabled and restricted by the specified\n <code>AccessControlContext</code>.  The action is performed with the\n intersection of the the permissions possessed by the caller's\n protection domain, and those possessed by the domains represented by the\n specified <code>AccessControlContext</code>.\n <p>\n If the action's <code>run</code> method throws an <i>unchecked</i>\n exception, it will propagate through this method.\n\n @param action the action to be performed\n @param context an <i>access control context</i>\n                representing the restriction to be applied to the\n                caller's domain's privileges before performing\n                the specified action.  If the context is\n                <code>null</code>,\n                then no additional restriction is applied.\n\n @return the value returned by the action's <code>run</code> method\n\n @exception PrivilegedActionException if the specified action's\n         <code>run</code> method\n	       threw a <i>checked</i> exception\n @exception NullPointerException if the action is <code>null</code>\n \n @see #doPrivileged(PrivilegedAction)\n @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n"
19953,method,java/security/AccessController/getContext/,"\n This method takes a "snapshot" of the current calling context, which\n includes the current Thread's inherited AccessControlContext,\n and places it in an AccessControlContext object. This context may then\n be checked at a later point, possibly in another thread.\n\n @see AccessControlContext\n\n @return the AccessControlContext based on the current context.\n"
19954,method,java/security/AccessController/checkPermission/Permission,"\n Determines whether the access request indicated by the\n specified permission should be allowed or denied, based on\n the current AccessControlContext and security policy.\n This method quietly returns if the access request\n is permitted, or throws a suitable AccessControlException otherwise. \n\n @param perm the requested permission.\n \n @exception AccessControlException if the specified permission\n            is not permitted, based on the current security policy.\n @exception NullPointerException if the specified permission\n            is <code>null</code> and is checked based on the\n            security policy currently in effect.\n"
19955,class,java/security/AccessControlException," <p> This exception is thrown by the AccessController to indicate\n that a requested access (to a critical system resource such as the\n file system or the network) is denied.\n\n <p> The reason to deny access can vary.  For example, the requested\n permission might be of an incorrect type,  contain an invalid\n value, or request access that is not allowed according to the\n security policy.  Such information should be given whenever\n possible at the time the exception is thrown.\n\n @version 	1.15, 03/23/10\n @author Li Gong\n @author Roland Schemers\n"
19959,class,java/security/AccessControlContext,"\n An AccessControlContext is used to make system resource access decisions\n based on the context it encapsulates.\n \n <p>More specifically, it encapsulates a context and\n has a single method, <code>checkPermission</code>,\n that is equivalent to the <code>checkPermission</code> method\n in the AccessController class, with one difference: The AccessControlContext\n <code>checkPermission</code> method makes access decisions based on the \n context it encapsulates,\n rather than that of the current execution thread.\n \n <p>Thus, the purpose of AccessControlContext is for those situations where\n a security check that should be made within a given context\n actually needs to be done from within a\n <i>different</i> context (for example, from within a worker thread).\n \n <p> An AccessControlContext is created by calling the \n <code>AccessController.getContext</code> method. \n The <code>getContext</code> method takes a "snapshot"\n of the current calling context, and places\n it in an AccessControlContext object, which it returns. A sample call is\n the following:\n \n <pre>\n \n   AccessControlContext acc = AccessController.getContext()\n \n </pre>\n \n <p>\n Code within a different context can subsequently call the\n <code>checkPermission</code> method on the\n previously-saved AccessControlContext object. A sample call is the\n following:\n \n <pre>\n \n   acc.checkPermission(permission)\n \n </pre> \n \n @see AccessController\n\n @author Roland Schemers\n"
19960,method,java/security/AccessControlContext/getDomainCombiner/," Get the <code>DomainCombiner</code> associated with this\n <code>AccessControlContext</code>.\n\n <p>\n\n @return the <code>DomainCombiner</code> associated with this\n		<code>AccessControlContext</code>, or <code>null</code>\n		if there is none.\n\n @exception SecurityException if the caller does not have permission\n		to get the <code>DomainCombiner</code> associated with this\n		<code>AccessControlContext</code>.\n @since 1.3\n"
19961,method,java/security/AccessControlContext/checkPermission/Permission,"\n Determines whether the access request indicated by the\n specified permission should be allowed or denied, based on\n the security policy currently in effect, and the context in\n this object. The request is allowed only if every ProtectionDomain\n in the context implies the permission. Otherwise the request is\n denied.\n \n <p>\n This method quietly returns if the access request\n is permitted, or throws a suitable AccessControlException otherwise. \n\n @param perm the requested permission.\n \n @exception AccessControlException if the specified permission\n is not permitted, based on the current security policy and the\n context encapsulated by this object.\n @exception NullPointerException if the permission to check for is null.\n"
19965,method,java/security/AccessControlContext/AccessControlContext/AccessControlContext;DomainCombiner," Create a new <code>AccessControlContext</code> with the given\n <code>AccessControlContext</code> and <code>DomainCombiner</code>.\n This constructor associates the provided\n <code>DomainCombiner</code> with the provided\n <code>AccessControlContext</code>.\n\n <p>\n\n @param acc the <code>AccessControlContext</code> associated\n		with the provided <code>DomainCombiner</code>. <p>\n\n @param combiner the <code>DomainCombiner</code> to be associated\n		with the provided <code>AccessControlContext</code>.\n\n @exception NullPointerException if the provided\n		<code>context</code> is <code>null</code>. <p>\n\n @exception SecurityException if the caller does not have permission\n		to invoke this constructor.\n @since 1.3\n"
19987,method,java/security/interfaces/RSAMultiPrimePrivateCrtKey/getOtherPrimeInfo/," Returns the otherPrimeInfo or null if there are only \n two prime factors (p and q).\n\n @return the otherPrimeInfo.\n"
20009,interface,java/security/interfaces/DSAKeyPairGenerator," An interface to an object capable of generating DSA key pairs. \n\n <p>The <code>initialize</code> methods may each be called any number \n of times. If no <code>initialize</code> method is called on a \n DSAKeyPairGenerator, the default is to generate 1024-bit keys, using \n precomputed p, q and g parameters and an instance of SecureRandom as \n the random bit source.\n \n <p>Users wishing to indicate DSA-specific parameters, and to generate a key \n pair suitable for use with the DSA algorithm typically\n \n <ol>\n \n <li>Get a key pair generator for the DSA algorithm by calling the \n KeyPairGenerator <code>getInstance</code> method with "DSA" \n as its argument.<p> \n \n <li>Initialize the generator by casting the result to a DSAKeyPairGenerator\n and calling one of the \n <code>initialize</code> methods from this DSAKeyPairGenerator interface.<p>\n \n <li>Generate a key pair by calling the <code>generateKeyPair</code> \n method from the KeyPairGenerator class.\n \n </ol> \n\n <p>Note: it is not always necessary to do do algorithm-specific\n initialization for a DSA key pair generator. That is, it is not always\n necessary to call an <code>initialize</code> method in this interface.\n Algorithm-independent initialization using the <code>initialize</code> method\n in the KeyPairGenerator\n interface is all that is needed when you accept defaults for algorithm-specific\n parameters.\n \n @see java.security.KeyPairGenerator\n"
20011,method,java/security/interfaces/DSAKeyPairGenerator/initialize/int;boolean;SecureRandom," Initializes the key pair generator for a given modulus length\n (instead of parameters), and an optional SecureRandom bit source.  \n If a SecureRandom bit source is needed but not supplied, i.e. \n null, a default SecureRandom instance will be used.  \n\n <p>If <code>genParams</code> is true, this method generates new \n p, q and g parameters. If it is false, the method uses precomputed\n parameters for the modulus length requested. If there are no\n precomputed parameters for that modulus length, an exception will be \n thrown. It is guaranteed that there will always be\n default parameters for modulus lengths of 512 and 1024 bits.\n\n @param modlen the modulus length in bits. Valid values are any\n multiple of 8 between 512 and 1024, inclusive.\n\n @param random the random bit source to use to generate key bits; \n can be null.\n\n @param genParams whether or not to generate new parameters for\n the modulus length requested.\n\n @exception InvalidParameterException if <code>modlen</code> is not\n between 512 and 1024, or if <code>genParams</code> is false and \n there are no precomputed parameters for the requested modulus \n length.  \n"
20013,method,java/security/interfaces/DSAKey/getParams/," Returns the DSA-specific key parameters. These parameters are\n never secret.\n\n @return the DSA-specific key parameters.\n \n @see DSAParams\n"
20015,method,java/security/spec/X509EncodedKeySpec/getEncoded/," Returns the key bytes, encoded according to the X.509 standard.\n\n @return the X.509 encoding of the key. Returns a new array \n each time this method is called.\n"
20026,class,java/security/spec/RSAPrivateCrtKeySpec," This class specifies an RSA private key, as defined in the PKCS#1\n standard, using the Chinese Remainder Theorem (CRT) information values for\n efficiency.\n\n @author Jan Luehe\n\n @version 1.14 10/03/23\n\n @see java.security.Key\n @see java.security.KeyFactory\n @see KeySpec\n @see PKCS8EncodedKeySpec\n @see RSAPrivateKeySpec\n @see RSAPublicKeySpec\n"
20039,class,java/security/spec/RSAMultiPrimePrivateCrtKeySpec," This class specifies an RSA multi-prime private key, as defined in the \n PKCS#1 v2.1, using the Chinese Remainder Theorem (CRT) information \n values for efficiency.\n\n @author Valerie Peng\n\n @version 1.10 10/03/23\n\n @see java.security.Key\n @see java.security.KeyFactory\n @see KeySpec\n @see PKCS8EncodedKeySpec\n @see RSAPrivateKeySpec\n @see RSAPublicKeySpec\n @see RSAOtherPrimeInfo\n\n @since 1.4\n"
20046,method,java/security/spec/RSAMultiPrimePrivateCrtKeySpec/getOtherPrimeInfo/," Returns a copy of the otherPrimeInfo or null if there are \n only two prime factors (p and q).\n\n @return the otherPrimeInfo. Returns a new array each\n time this method is called.\n"
20047,method,java/security/spec/RSAMultiPrimePrivateCrtKeySpec/RSAMultiPrimePrivateCrtKeySpec/BigInteger;BigInteger;BigInteger;BigInteger;BigInteger;BigInteger;BigInteger;BigInteger;RSAOtherPrimeInfo[]," Creates a new <code>RSAMultiPrimePrivateCrtKeySpec</code>\n given the modulus, publicExponent, privateExponent,\n primeP, primeQ, primeExponentP, primeExponentQ,\n crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n\n <p>Note that the contents of <code>otherPrimeInfo</code> \n are copied to protect against subsequent modification when \n constructing this object.\n\n @param modulus the modulus n.\n @param publicExponent the public exponent e.\n @param privateExponent the private exponent d.\n @param primeP the prime factor p of n.\n @param primeQ the prime factor q of n.\n @param primeExponentP this is d mod (p-1).\n @param primeExponentQ this is d mod (q-1).\n @param crtCoefficient the Chinese Remainder Theorem\n coefficient q-1 mod p.\n @param otherPrimeInfo triplets of the rest of primes, null can be\n specified if there are only two prime factors (p and q).\n @exception NullPointerException if any of the parameters, i.e. \n <code>modulus</code>, \n <code>publicExponent</code>, <code>privateExponent</code>, \n <code>primeP</code>, <code>primeQ</code>, \n <code>primeExponentP</code>, <code>primeExponentQ</code>,\n <code>crtCoefficient</code>, is null.\n @exception IllegalArgumentException if an empty, i.e. 0-length,\n <code>otherPrimeInfo</code> is specified.\n"
20054,class,java/security/spec/PSSParameterSpec," This class specifies a parameter spec for RSA-PSS signature scheme,\n as defined in the \n <a href="http://www.ietf.org/rfc/rfc3447.txt">PKCS#1 v2.1</a>\n standard.\n\n <p>Its ASN.1 definition in PKCS#1 standard is described below:\n <pre>\n RSASSA-PSS-params ::= SEQUENCE {\n   hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n   maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n   saltLength         [2] INTEGER  DEFAULT 20,\n   trailerField       [3] INTEGER  DEFAULT 1\n }\n </pre>\n where\n <pre>\n OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n   { OID id-sha1 PARAMETERS NULL   }|\n   { OID id-sha256 PARAMETERS NULL }|\n   { OID id-sha384 PARAMETERS NULL }|\n   { OID id-sha512 PARAMETERS NULL },\n   ...  -- Allows for future expansion --\n }\n\n PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n   { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n   ...  -- Allows for future expansion --\n }\n </pre>\n <p>Note: the PSSParameterSpec.DEFAULT uses the following:\n     message digest  -- "SHA-1"\n     mask generation function (mgf) -- "MGF1"\n     parameters for mgf -- MGF1ParameterSpec.SHA1\n     SaltLength   -- 20\n     TrailerField -- 1\n\n @see MGF1ParameterSpec\n @see AlgorithmParameterSpec\n @see java.security.Signature\n\n @author Valerie Peng\n\n @version 1.10 10/03/23\n\n @since 1.4\n"
20064,method,java/security/spec/PKCS8EncodedKeySpec/getEncoded/," Returns the key bytes, encoded according to the PKCS #8 standard.\n\n @return the PKCS #8 encoding of the key. Returns a new array \n each time this method is called.\n"
20074,interface,java/security/spec/KeySpec," A (transparent) specification of the key material\n that constitutes a cryptographic key.\n\n <p>If the key is stored on a hardware device, its\n specification may contain information that helps identify the key on the\n device.\n\n <P> A key may be specified in an algorithm-specific way, or in an\n algorithm-independent encoding format (such as ASN.1).\n For example, a DSA private key may be specified by its components\n <code>x</code>, <code>p</code>, <code>q</code>, and <code>g</code>\n (see {@link DSAPrivateKeySpec}), or it may be\n specified using its DER encoding\n (see {@link PKCS8EncodedKeySpec}).\n\n <P> This interface contains no methods or constants. Its only purpose\n is to group (and provide type safety for) all key specifications.\n All key specifications must implement this interface.\n\n @author Jan Luehe\n\n @version 1.19, 03/23/10\n\n @see java.security.Key\n @see java.security.KeyFactory\n @see EncodedKeySpec\n @see X509EncodedKeySpec\n @see PKCS8EncodedKeySpec\n @see DSAPrivateKeySpec\n @see DSAPublicKeySpec\n\n @since 1.2\n"
20084,method,java/security/spec/EncodedKeySpec/getEncoded/," Returns the encoded key.\n\n @return the encoded key. Returns a new array each time\n this method is called.\n"
20085,method,java/security/spec/EncodedKeySpec/getFormat/," Returns the name of the encoding format associated with this\n key specification.\n\n <p>If the opaque representation of a key\n (see {@link java.security.Key Key}) can be transformed\n (see {@link java.security.KeyFactory KeyFactory})\n into this key specification (or a subclass of it),\n <code>getFormat</code> called\n on the opaque key returns the same value as the\n <code>getFormat</code> method\n of this key specification.\n\n @return a string representation of the encoding format.\n"
20087,class,java/security/spec/EllipticCurve," This immutable class holds the necessary values needed to represent \n an elliptic curve.\n\n @see ECField\n @see ECFieldFp\n @see ECFieldF2m\n\n @author Valerie Peng\n @version 1.6, 03/23/10\n\n @since 1.5\n"
20091,method,java/security/spec/EllipticCurve/getSeed/," Returns the seeding bytes <code>seed</code> used \n during curve generation. May be null if not specified.\n @return the seeding bytes <code>seed</code>. A new\n array is returned each time this method is called.\n"
20104,class,java/security/spec/ECPoint," This immutable class represents a point on an elliptic curve (EC)\n in affine coordinates. Other coordinate systems can\n extend this class to represent this point in other\n coordinates.\n\n @author Valerie Peng\n @version 1.5, 03/23/10\n\n @since 1.5\n"
20105,method,java/security/spec/ECPoint/getAffineX/," Returns the affine x-coordinate <code>x</code>.\n Note: POINT_INFINITY has a null affine x-coordinate.\n @return the affine x-coordinate.\n"
20106,method,java/security/spec/ECPoint/getAffineY/," Returns the affine y-coordinate <code>y</code>.\n Note: POINT_INFINITY has a null affine y-coordinate.\n @return the affine y-coordinate.\n"
20130,method,java/security/spec/ECFieldF2m/getMidTermsOfReductionPolynomial/," Returns an integer array which contains the order of the \n middle term(s) of the reduction polynomial for polynomial \n basis or null for normal basis.\n @return an integer array which contains the order of the \n middle term(s) of the reduction polynomial for polynomial \n basis or null for normal basis. A new array is returned \n each time this method is called.\n"
20134,method,java/security/spec/ECFieldF2m/ECFieldF2m/int;BigInteger," Creates an elliptic curve characteristic 2 finite\n field which has 2^<code>m</code> elements with \n polynomial basis.\n The reduction polynomial for this field is based\n on <code>rp</code> whose i-th bit correspondes to\n the i-th coefficient of the reduction polynomial.<p> \n Note: A valid reduction polynomial is either a \n trinomial (X^<code>m</code> + X^<code>k</code> + 1\n with <code>m</code> > <code>k</code> >= 1) or a\n pentanomial (X^<code>m</code> + X^<code>k3</code> \n + X^<code>k2</code> + X^<code>k1</code> + 1 with\n <code>m</code> > <code>k3</code> > <code>k2</code> \n > <code>k1</code> >= 1). \n @param m with 2^<code>m</code> being the number of elements.\n @param rp the BigInteger whose i-th bit corresponds to\n the i-th coefficient of the reduction polynomial. \n @exception NullPointerException if <code>rp</code> is null.\n @exception IllegalArgumentException if <code>m</code> \n is not positive, or <code>rp</code> does not represent \n a valid reduction polynomial. \n"
20136,interface,java/security/spec/ECField," This interface represents an elliptic curve (EC) finite field.\n All specialized EC fields must implements this interface.\n\n @see ECFieldFp\n @see ECFieldF2m\n\n @author Valerie Peng\n @version 1.6, 03/23/10\n\n @since 1.5\n"
20137,method,java/security/spec/ECField/getFieldSize/," Returns the field size in bits. Note: For prime finite\n field ECFieldFp, size of prime p in bits is returned.\n For characteristic 2 finite field ECFieldF2m, m is returned.\n @return the field size in bits.\n"
20155,interface,java/security/spec/AlgorithmParameterSpec," A (transparent) specification of cryptographic parameters.\n\n <P> This interface contains no methods or constants. Its only purpose\n is to group (and provide type safety for) all parameter specifications.\n All parameter specifications must implement this interface.\n \n @author Jan Luehe\n\n @version 1.16, 03/23/10\n\n @see java.security.AlgorithmParameters\n @see DSAParameterSpec\n\n @since 1.2\n"
20161,class,java/security/cert/X509Certificate," <p>\n Abstract class for X.509 certificates. This provides a standard\n way to access all the attributes of an X.509 certificate.\n <p>\n In June of 1996, the basic X.509 v3 format was completed by\n ISO/IEC and ANSI X9, which is described below in ASN.1:\n <pre>\n Certificate  ::=  SEQUENCE  {\n     tbsCertificate       TBSCertificate,\n     signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT STRING  }\n </pre>\n <p>\n These certificates are widely used to support authentication and\n other functionality in Internet security systems. Common applications\n include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),\n code signing for trusted software distribution, and Secure Electronic\n Transactions (SET).\n <p>\n These certificates are managed and vouched for by <em>Certificate\n Authorities</em> (CAs). CAs are services which create certificates by\n placing data in the X.509 standard format and then digitally signing\n that data. CAs act as trusted third parties, making introductions\n between principals who have no direct knowledge of each other.\n CA certificates are either signed by themselves, or by some other\n CA such as a "root" CA.\n <p>\n More information can be found in RFC 2459,\n "Internet X.509 Public Key Infrastructure Certificate and CRL\n Profile" at <A HREF="http://www.ietf.org/rfc/rfc2459.txt"> \n http://www.ietf.org/rfc/rfc2459.txt </A>.\n <p>\n The ASN.1 definition of <code>tbsCertificate</code> is:\n <pre>\n TBSCertificate  ::=  SEQUENCE  {\n     version         [0]  EXPLICIT Version DEFAULT v1,\n     serialNumber         CertificateSerialNumber,\n     signature            AlgorithmIdentifier,\n     issuer               Name,\n     validity             Validity,\n     subject              Name,\n     subjectPublicKeyInfo SubjectPublicKeyInfo,\n     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present, version must be v2 or v3\n     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present, version must be v2 or v3\n     extensions      [3]  EXPLICIT Extensions OPTIONAL\n                          -- If present, version must be v3\n     }\n </pre>\n <p>\n Certificates are instantiated using a certificate factory. The following is\n an example of how to instantiate an X.509 certificate:\n <pre> \n InputStream inStream = new FileInputStream("fileName-of-cert");\n CertificateFactory cf = CertificateFactory.getInstance("X.509");\n X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream);\n inStream.close();\n </pre>\n\n @author Hemma Prafullchandra\n\n @version 1.41\n\n @see Certificate\n @see CertificateFactory\n @see X509Extension\n"
20172,method,java/security/cert/X509Certificate/getTBSCertificate/," Gets the DER-encoded certificate information, the\n <code>tbsCertificate</code> from this certificate.\n This can be used to verify the signature independently.\n\n @return the DER-encoded certificate information.\n @exception CertificateEncodingException if an encoding error occurs.\n"
20177,method,java/security/cert/X509Certificate/getIssuerUniqueID/," Gets the <code>issuerUniqueID</code> value from the certificate.\n The issuer unique identifier is present in the certificate\n to handle the possibility of reuse of issuer names over time.\n RFC 2459 recommends that names not be reused and that\n conforming certificates not make use of unique identifiers.\n Applications conforming to that profile should be capable of\n parsing unique identifiers and making comparisons.\n \n <p>The ASN.1 definition for this is:\n <pre>\n issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL<p>\n UniqueIdentifier  ::=  BIT STRING\n </pre>\n\n @return the issuer unique identifier or null if it is not\n present in the certificate.\n"
20179,method,java/security/cert/X509Certificate/getKeyUsage/," Gets a boolean array representing bits of\n the <code>KeyUsage</code> extension, (OID = 2.5.29.15).\n The key usage extension defines the purpose (e.g., encipherment,\n signature, certificate signing) of the key contained in the\n certificate.\n The ASN.1 definition for this is:\n <pre>\n KeyUsage ::= BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation          (1),\n     keyEncipherment         (2),\n     dataEncipherment        (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly            (8) }\n </pre>\n RFC 2459 recommends that when used, this be marked\n as a critical extension.\n\n @return the KeyUsage extension of this certificate, represented as\n an array of booleans. The order of KeyUsage values in the array is\n the same as in the above ASN.1 definition. The array will contain a\n value for each KeyUsage defined above. If the KeyUsage list encoded\n in the certificate is longer than the above list, it will not be\n truncated. Returns null if this certificate does not\n contain a KeyUsage extension.\n"
20181,method,java/security/cert/X509Certificate/getBasicConstraints/," Gets the certificate constraints path length from the\n critical <code>BasicConstraints</code> extension, (OID = 2.5.29.19).\n <p>\n The basic constraints extension identifies whether the subject\n of the certificate is a Certificate Authority (CA) and \n how deep a certification path may exist through that CA. The \n <code>pathLenConstraint</code> field (see below) is meaningful\n only if <code>cA</code> is set to TRUE. In this case, it gives the\n maximum number of CA certificates that may follow this certificate in a\n certification path. A value of zero indicates that only an end-entity\n certificate may follow in the path.\n <p>\n Note that for RFC 2459 this extension is always marked\n critical if <code>cA</code> is TRUE, meaning this certificate belongs\n to a Certificate Authority.\n <p>\n The ASN.1 definition for this is:\n <pre>\n BasicConstraints ::= SEQUENCE {\n     cA                  BOOLEAN DEFAULT FALSE,\n     pathLenConstraint   INTEGER (0..MAX) OPTIONAL }\n </pre>\n\n @return the value of <code>pathLenConstraint</code> if the\n BasicConstraints extension is present in the certificate and the\n subject of the certificate is a CA, otherwise -1.\n If the subject of the certificate is a CA and\n <code>pathLenConstraint</code> does not appear,\n <code>Integer.MAX_VALUE</code> is returned to indicate that there is no\n limit to the allowed length of the certification path.\n"
20186,method,java/security/cert/X509CertSelector/setCertificate/X509Certificate," Sets the certificateEquals criterion. The specified \n <code>X509Certificate</code> must be equal to the \n <code>X509Certificate</code> passed to the <code>match</code> method.\n If <code>null</code>, then this check is not applied.\n\n <p>This method is particularly useful when it is necessary to\n match a single certificate. Although other criteria can be specified \n in conjunction with the certificateEquals criterion, it is usually not \n practical or necessary.\n\n @param cert the <code>X509Certificate</code> to match (or \n <code>null</code>)\n @see #getCertificate\n"
20187,method,java/security/cert/X509CertSelector/setSerialNumber/BigInteger," Sets the serialNumber criterion. The specified serial number\n must match the certificate serial number in the\n <code>X509Certificate</code>. If <code>null</code>, any certificate \n serial number will do.\n\n @param serial the certificate serial number to match \n        (or <code>null</code>)\n @see #getSerialNumber\n"
20188,method,java/security/cert/X509CertSelector/setIssuer/X500Principal," Sets the issuer criterion. The specified distinguished name\n must match the issuer distinguished name in the\n <code>X509Certificate</code>. If <code>null</code>, any issuer\n distinguished name will do.\n\n @param issuer a distinguished name as X500Principal\n                 (or <code>null</code>)\n @since 1.5\n"
20191,method,java/security/cert/X509CertSelector/setSubject/X500Principal," Sets the subject criterion. The specified distinguished name\n must match the subject distinguished name in the\n <code>X509Certificate</code>. If <code>null</code>, any subject\n distinguished name will do.\n\n @param subject a distinguished name as X500Principal\n                  (or <code>null</code>)\n @since 1.5\n"
20196,method,java/security/cert/X509CertSelector/setCertificateValid/Date," Sets the certificateValid criterion. The specified date must fall\n within the certificate validity period for the\n <code>X509Certificate</code>. If <code>null</code>, no certificateValid\n check will be done.\n <p>\n Note that the <code>Date</code> supplied here is cloned to protect \n against subsequent modifications.\n\n @param certValid the <code>Date</code> to check (or <code>null</code>)\n @see #getCertificateValid\n"
20197,method,java/security/cert/X509CertSelector/setPrivateKeyValid/Date," Sets the privateKeyValid criterion. The specified date must fall\n within the private key validity period for the\n <code>X509Certificate</code>. If <code>null</code>, no privateKeyValid\n check will be done.\n <p>\n Note that the <code>Date</code> supplied here is cloned to protect \n against subsequent modifications.\n\n @param privateKeyValid the <code>Date</code> to check (or\n                        <code>null</code>)\n @see #getPrivateKeyValid\n"
20198,method,java/security/cert/X509CertSelector/setSubjectPublicKeyAlgID/String," Sets the subjectPublicKeyAlgID criterion. The\n <code>X509Certificate</code> must contain a subject public key\n with the specified algorithm. If <code>null</code>, no\n subjectPublicKeyAlgID check will be done.\n \n @param oid The object identifier (OID) of the algorithm to check\n            for (or <code>null</code>). An OID is represented by a\n            set of nonnegative integers separated by periods.\n @throws IOException if the OID is invalid, such as\n the first component being not 0, 1 or 2 or the second component\n being greater than 39.\n\n @see #getSubjectPublicKeyAlgID\n"
20199,method,java/security/cert/X509CertSelector/setSubjectPublicKey/PublicKey," Sets the subjectPublicKey criterion. The\n <code>X509Certificate</code> must contain the specified subject public\n key. If <code>null</code>, no subjectPublicKey check will be done.\n \n @param key the subject public key to check for (or <code>null</code>)\n @see #getSubjectPublicKey\n"
20201,method,java/security/cert/X509CertSelector/setKeyUsage/boolean[]," Sets the keyUsage criterion. The <code>X509Certificate</code>\n must allow the specified keyUsage values. If <code>null</code>, no\n keyUsage check will be done. Note that an <code>X509Certificate</code> \n that has no keyUsage extension implicitly allows all keyUsage values.\n <p>\n Note that the boolean array supplied here is cloned to protect against\n subsequent modifications.\n\n @param keyUsage a boolean array in the same format as the boolean\n                 array returned by\n {@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}.\n                 Or <code>null</code>.\n @see #getKeyUsage\n"
20202,method,java/security/cert/X509CertSelector/setExtendedKeyUsage/Set," Sets the extendedKeyUsage criterion. The <code>X509Certificate</code>\n must allow the specified key purposes in its extended key usage\n extension. If <code>keyPurposeSet</code> is empty or <code>null</code>, \n no extendedKeyUsage check will be done. Note that an \n <code>X509Certificate</code> that has no extendedKeyUsage extension \n implicitly allows all key purposes.\n <p>\n Note that the <code>Set</code> is cloned to protect against\n subsequent modifications.\n\n @param keyPurposeSet a <code>Set</code> of key purpose OIDs in string \n format (or <code>null</code>). Each OID is represented by a set of \n nonnegative integers separated by periods.\n @throws IOException if the OID is invalid, such as\n the first component being not 0, 1 or 2 or the second component\n being greater than 39.\n @see #getExtendedKeyUsage\n"
20203,method,java/security/cert/X509CertSelector/setMatchAllSubjectAltNames/boolean," Enables/disables matching all of the subjectAlternativeNames \n specified in the {@link #setSubjectAlternativeNames\n setSubjectAlternativeNames} or {@link #addSubjectAlternativeName\n addSubjectAlternativeName} methods. If enabled, \n the <code>X509Certificate</code> must contain all of the \n specified subject alternative names. If disabled, the \n <code>X509Certificate</code> must contain at least one of the \n specified subject alternative names.\n\n <p>The matchAllNames flag is <code>true</code> by default.\n\n @param matchAllNames if <code>true</code>, the flag is enabled;\n if <code>false</code>, the flag is disabled.\n @see #getMatchAllSubjectAltNames\n"
20204,method,java/security/cert/X509CertSelector/setSubjectAlternativeNames/Collection," Sets the subjectAlternativeNames criterion. The\n <code>X509Certificate</code> must contain all or at least one of the \n specified subjectAlternativeNames, depending on the value of\n the matchAllNames flag (see {@link #setMatchAllSubjectAltNames\n setMatchAllSubjectAltNames}).\n <p>\n This method allows the caller to specify, with a single method call,\n the complete set of subject alternative names for the\n subjectAlternativeNames criterion. The specified value replaces\n the previous value for the subjectAlternativeNames criterion.\n <p>\n The <code>names</code> parameter (if not <code>null</code>) is a\n <code>Collection</code> with one\n entry for each name to be included in the subject alternative name\n criterion. Each entry is a <code>List</code> whose first entry is an\n <code>Integer</code> (the name type, 0-8) and whose second\n entry is a <code>String</code> or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. If <code>null</code>\n is supplied as the value for this argument, no\n subjectAlternativeNames check will be performed.\n <p>\n Each subject alternative name in the <code>Collection</code>\n may be specified either as a <code>String</code> or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n {@link #addSubjectAlternativeName(int type, String name) \n addSubjectAlternativeName(int type, String name)} and\n {@link #addSubjectAlternativeName(int type, byte [] name) \n addSubjectAlternativeName(int type, byte [] name)}.\n <p>\n <strong>Note:</strong> for distinguished names, specify the byte\n array form instead of the String form. See the note in \n {@link #addSubjectAlternativeName(int, String)} for more information. \n <p>\n Note that the <code>names</code> parameter can contain duplicate\n names (same name and name type), but they may be removed from the\n <code>Collection</code> of names returned by the\n {@link #getSubjectAlternativeNames getSubjectAlternativeNames} method.\n <p>\n Note that a deep copy is performed on the <code>Collection</code> to\n protect against subsequent modifications.\n\n @param names a <code>Collection</code> of names (or <code>null</code>)\n @throws IOException if a parsing error occurs\n @see #getSubjectAlternativeNames\n"
20208,method,java/security/cert/X509CertSelector/setBasicConstraints/int," Sets the basic constraints constraint. If the value is greater than or\n equal to zero, <code>X509Certificates</code> must include a \n basicConstraints extension with\n a pathLen of at least this value. If the value is -2, only end-entity\n certificates are accepted. If the value is -1, no check is done.\n <p>\n This constraint is useful when building a certification path forward \n (from the target toward the trust anchor. If a partial path has been \n built, any candidate certificate must have a maxPathLen value greater \n than or equal to the number of certificates in the partial path.\n\n @param minMaxPathLen the value for the basic constraints constraint\n @throws IllegalArgumentException if the value is less than -2\n @see #getBasicConstraints\n"
20209,method,java/security/cert/X509CertSelector/setPolicy/Set," Sets the policy constraint. The <code>X509Certificate</code> must\n include at least one of the specified policies in its certificate \n policies extension. If <code>certPolicySet</code> is empty, then the \n <code>X509Certificate</code> must include at least some specified policy\n in its certificate policies extension. If <code>certPolicySet</code> is\n <code>null</code>, no policy check will be performed.\n <p>\n Note that the <code>Set</code> is cloned to protect against\n subsequent modifications.\n\n @param certPolicySet a <code>Set</code> of certificate policy OIDs in\n                      string format (or <code>null</code>). Each OID is \n                      represented by a set of nonnegative integers \n			  separated by periods.\n @throws IOException if a parsing error occurs on the OID such as\n the first component is not 0, 1 or 2 or the second component is\n greater than 39.\n @see #getPolicy\n"
20210,method,java/security/cert/X509CertSelector/setPathToNames/Collection," Sets the pathToNames criterion. The <code>X509Certificate</code> must\n not include name constraints that would prohibit building a\n path to the specified names.\n <p>\n This method allows the caller to specify, with a single method call,\n the complete set of names which the <code>X509Certificates</code>'s\n name constraints must permit. The specified value replaces\n the previous value for the pathToNames criterion.\n <p>\n This constraint is useful when building a certification path forward \n (from the target toward the trust anchor. If a partial path has been \n built, any candidate certificate must not include name constraints that\n would prohibit building a path to any of the names in the partial path.\n <p>\n The <code>names</code> parameter (if not <code>null</code>) is a\n <code>Collection</code> with one\n entry for each name to be included in the pathToNames\n criterion. Each entry is a <code>List</code> whose first entry is an\n <code>Integer</code> (the name type, 0-8) and whose second\n entry is a <code>String</code> or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. If <code>null</code>\n is supplied as the value for this argument, no\n pathToNames check will be performed.\n <p>\n Each name in the <code>Collection</code>\n may be specified either as a <code>String</code> or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n {@link #addPathToName(int type, String name) \n addPathToName(int type, String name)} and\n {@link #addPathToName(int type, byte [] name) \n addPathToName(int type, byte [] name)}.\n <p>\n <strong>Note:</strong> for distinguished names, specify the byte\n array form instead of the String form. See the note in\n {@link #addPathToName(int, String)} for more information. \n <p>\n Note that the <code>names</code> parameter can contain duplicate\n names (same name and name type), but they may be removed from the\n <code>Collection</code> of names returned by the\n {@link #getPathToNames getPathToNames} method.\n <p>\n Note that a deep copy is performed on the <code>Collection</code> to\n protect against subsequent modifications.\n\n @param names a <code>Collection</code> with one entry per name\n              (or <code>null</code>)\n @throws IOException if a parsing error occurs\n @see #getPathToNames\n"
20213,method,java/security/cert/X509CertSelector/getCertificate/," Returns the certificateEquals criterion. The specified\n <code>X509Certificate</code> must be equal to the \n <code>X509Certificate</code> passed to the <code>match</code> method.\n If <code>null</code>, this check is not applied.\n\n @return the <code>X509Certificate</code> to match (or <code>null</code>)\n @see #setCertificate\n"
20214,method,java/security/cert/X509CertSelector/getSerialNumber/," Returns the serialNumber criterion. The specified serial number\n must match the certificate serial number in the\n <code>X509Certificate</code>. If <code>null</code>, any certificate\n serial number will do.\n\n @return the certificate serial number to match\n                (or <code>null</code>)\n @see #setSerialNumber\n"
20215,method,java/security/cert/X509CertSelector/getIssuer/," Returns the issuer criterion as an <code>X500Principal</code>. This\n distinguished name must match the issuer distinguished name in the\n <code>X509Certificate</code>. If <code>null</code>, the issuer criterion\n is disabled and any issuer distinguished name will do.\n\n @return the required issuer distinguished name as X500Principal\n         (or <code>null</code>)\n @since 1.5\n"
20217,method,java/security/cert/X509CertSelector/getIssuerAsBytes/," Returns the issuer criterion as a byte array. This distinguished name\n must match the issuer distinguished name in the\n <code>X509Certificate</code>. If <code>null</code>, the issuer criterion\n is disabled and any issuer distinguished name will do.\n <p>\n If the value returned is not <code>null</code>, it is a byte\n array containing a single DER encoded distinguished name, as defined in\n X.501. The ASN.1 notation for this structure is supplied in the\n documentation for\n {@link #setIssuer(byte [] issuerDN) setIssuer(byte [] issuerDN)}.\n <p>\n Note that the byte array returned is cloned to protect against\n subsequent modifications.\n\n @return a byte array containing the required issuer distinguished name\n         in ASN.1 DER format (or <code>null</code>)\n @throws IOException if an encoding error occurs\n"
20218,method,java/security/cert/X509CertSelector/getSubject/," Returns the subject criterion as an <code>X500Principal</code>. This\n distinguished name must match the subject distinguished name in the\n <code>X509Certificate</code>. If <code>null</code>, the subject criterion\n is disabled and any subject distinguished name will do.\n\n @return the required subject distinguished name as X500Principal\n         (or <code>null</code>)\n @since 1.5\n"
20220,method,java/security/cert/X509CertSelector/getSubjectAsBytes/," Returns the subject criterion as a byte array. This distinguished name\n must match the subject distinguished name in the\n <code>X509Certificate</code>. If <code>null</code>, the subject criterion\n is disabled and any subject distinguished name will do.\n <p>\n If the value returned is not <code>null</code>, it is a byte\n array containing a single DER encoded distinguished name, as defined in\n X.501. The ASN.1 notation for this structure is supplied in the\n documentation for\n {@link #setSubject(byte [] subjectDN) setSubject(byte [] subjectDN)}.\n <p>\n Note that the byte array returned is cloned to protect against\n subsequent modifications.\n\n @return a byte array containing the required subject distinguished name\n         in ASN.1 DER format (or <code>null</code>)\n @throws IOException if an encoding error occurs\n"
20221,method,java/security/cert/X509CertSelector/getSubjectKeyIdentifier/," Returns the subjectKeyIdentifier criterion. The\n <code>X509Certificate</code> must contain a SubjectKeyIdentifier\n extension with the specified value. If <code>null</code>, no\n subjectKeyIdentifier check will be done.\n <p>\n Note that the byte array returned is cloned to protect against\n subsequent modifications.\n\n @return the key identifier (or <code>null</code>)\n @see #setSubjectKeyIdentifier\n"
20222,method,java/security/cert/X509CertSelector/getAuthorityKeyIdentifier/," Returns the authorityKeyIdentifier criterion. The\n <code>X509Certificate</code> must contain a AuthorityKeyIdentifier\n extension with the specified value. If <code>null</code>, no\n authorityKeyIdentifier check will be done.\n <p>\n Note that the byte array returned is cloned to protect against\n subsequent modifications.\n\n @return the key identifier (or <code>null</code>)\n @see #setAuthorityKeyIdentifier\n"
20223,method,java/security/cert/X509CertSelector/getCertificateValid/," Returns the certificateValid criterion. The specified date must fall\n within the certificate validity period for the\n <code>X509Certificate</code>. If <code>null</code>, no certificateValid\n check will be done.\n <p>\n Note that the <code>Date</code> returned is cloned to protect against\n subsequent modifications.\n\n @return the <code>Date</code> to check (or <code>null</code>)\n @see #setCertificateValid\n"
20224,method,java/security/cert/X509CertSelector/getPrivateKeyValid/," Returns the privateKeyValid criterion. The specified date must fall\n within the private key validity period for the\n <code>X509Certificate</code>. If <code>null</code>, no privateKeyValid\n check will be done.\n <p>\n Note that the <code>Date</code> returned is cloned to protect against\n subsequent modifications.\n\n @return the <code>Date</code> to check (or <code>null</code>)\n @see #setPrivateKeyValid\n"
20225,method,java/security/cert/X509CertSelector/getSubjectPublicKeyAlgID/," Returns the subjectPublicKeyAlgID criterion. The\n <code>X509Certificate</code> must contain a subject public key\n with the specified algorithm. If <code>null</code>, no\n subjectPublicKeyAlgID check will be done.\n \n @return the object identifier (OID) of the signature algorithm to check\n         for (or <code>null</code>). An OID is represented by a set of\n         nonnegative integers separated by periods.\n @see #setSubjectPublicKeyAlgID\n"
20226,method,java/security/cert/X509CertSelector/getSubjectPublicKey/," Returns the subjectPublicKey criterion. The\n <code>X509Certificate</code> must contain the specified subject\n public key. If <code>null</code>, no subjectPublicKey check will be done.\n \n @return the subject public key to check for (or <code>null</code>)\n @see #setSubjectPublicKey\n"
20227,method,java/security/cert/X509CertSelector/getKeyUsage/," Returns the keyUsage criterion. The <code>X509Certificate</code>\n must allow the specified keyUsage values. If null, no keyUsage\n check will be done.\n <p>\n Note that the boolean array returned is cloned to protect against\n subsequent modifications.\n\n @return a boolean array in the same format as the boolean\n                 array returned by\n {@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}.\n                 Or <code>null</code>.\n @see #setKeyUsage\n"
20228,method,java/security/cert/X509CertSelector/getExtendedKeyUsage/," Returns the extendedKeyUsage criterion. The <code>X509Certificate</code>\n must allow the specified key purposes in its extended key usage\n extension. If the <code>keyPurposeSet</code> returned is empty or\n <code>null</code>, no extendedKeyUsage check will be done. Note that an \n <code>X509Certificate</code> that has no extendedKeyUsage extension \n implicitly allows all key purposes.\n \n @return an immutable <code>Set</code> of key purpose OIDs in string\n format (or <code>null</code>)\n @see #setExtendedKeyUsage\n"
20229,method,java/security/cert/X509CertSelector/getMatchAllSubjectAltNames/," Indicates if the <code>X509Certificate</code> must contain all\n or at least one of the subjectAlternativeNames \n specified in the {@link #setSubjectAlternativeNames\n setSubjectAlternativeNames} or {@link #addSubjectAlternativeName\n addSubjectAlternativeName} methods. If <code>true</code>, \n the <code>X509Certificate</code> must contain all of the \n specified subject alternative names. If <code>false</code>, the \n <code>X509Certificate</code> must contain at least one of the \n specified subject alternative names.\n\n @return <code>true</code> if the flag is enabled;\n <code>false</code> if the flag is disabled. The flag is\n <code>true</code> by default.\n @see #setMatchAllSubjectAltNames\n"
20230,method,java/security/cert/X509CertSelector/getSubjectAlternativeNames/," Returns a copy of the subjectAlternativeNames criterion.\n The <code>X509Certificate</code> must contain all or at least one\n of the specified subjectAlternativeNames, depending on the value\n of the matchAllNames flag (see {@link #getMatchAllSubjectAltNames\n getMatchAllSubjectAltNames}). If the value returned is \n <code>null</code>, no subjectAlternativeNames check will be performed.\n <p>\n If the value returned is not <code>null</code>, it is a\n <code>Collection</code> with\n one entry for each name to be included in the subject alternative name\n criterion. Each entry is a <code>List</code> whose first entry is an\n <code>Integer</code> (the name type, 0-8) and whose second\n entry is a <code>String</code> or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type.  Note that the\n <code>Collection</code> returned may contain duplicate names (same name\n and name type).\n <p>\n Each subject alternative name in the <code>Collection</code>\n may be specified either as a <code>String</code> or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n {@link #addSubjectAlternativeName(int type, String name) \n addSubjectAlternativeName(int type, String name)} and\n {@link #addSubjectAlternativeName(int type, byte [] name) \n addSubjectAlternativeName(int type, byte [] name)}.\n <p>\n Note that a deep copy is performed on the <code>Collection</code> to\n protect against subsequent modifications.\n\n @return a <code>Collection</code> of names (or <code>null</code>)\n @see #setSubjectAlternativeNames\n"
20231,method,java/security/cert/X509CertSelector/getNameConstraints/," Returns the name constraints criterion. The <code>X509Certificate</code>\n must have subject and subject alternative names that\n meet the specified name constraints.\n <p>\n The name constraints are returned as a byte array. This byte array\n contains the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 2459\n and X.509. The ASN.1 notation for this structure is supplied in the\n documentation for\n {@link #setNameConstraints(byte [] bytes) setNameConstraints(byte [] bytes)}.\n <p>\n Note that the byte array returned is cloned to protect against\n subsequent modifications.\n\n @return a byte array containing the ASN.1 DER encoding of\n         a NameConstraints extension used for checking name constraints.\n         <code>null</code> if no name constraints check will be performed.\n @see #setNameConstraints\n"
20232,method,java/security/cert/X509CertSelector/getBasicConstraints/," Returns the basic constraints constraint. If the value is greater than\n or equal to zero, the <code>X509Certificates</code> must include a\n basicConstraints extension with a pathLen of at least this value.\n If the value is -2, only end-entity certificates are accepted. If\n the value is -1, no basicConstraints check is done.\n\n @return the value for the basic constraints constraint\n @see #setBasicConstraints\n"
20233,method,java/security/cert/X509CertSelector/getPolicy/," Returns the policy criterion. The <code>X509Certificate</code> must\n include at least one of the specified policies in its certificate policies\n extension. If the <code>Set</code> returned is empty, then the \n <code>X509Certificate</code> must include at least some specified policy\n in its certificate policies extension. If the <code>Set</code> returned is\n <code>null</code>, no policy check will be performed.\n\n @return an immutable <code>Set</code> of certificate policy OIDs in\n         string format (or <code>null</code>)\n @see #setPolicy\n"
20234,method,java/security/cert/X509CertSelector/getPathToNames/," Returns a copy of the pathToNames criterion. The\n <code>X509Certificate</code> must not include name constraints that would\n prohibit building a path to the specified names. If the value\n returned is <code>null</code>, no pathToNames check will be performed.\n <p>\n If the value returned is not <code>null</code>, it is a\n <code>Collection</code> with one\n entry for each name to be included in the pathToNames\n criterion. Each entry is a <code>List</code> whose first entry is an\n <code>Integer</code> (the name type, 0-8) and whose second\n entry is a <code>String</code> or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. Note that the\n <code>Collection</code> returned may contain duplicate names (same\n name and name type).\n <p>\n Each name in the <code>Collection</code>\n may be specified either as a <code>String</code> or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n {@link #addPathToName(int type, String name) \n addPathToName(int type, String name)} and\n {@link #addPathToName(int type, byte [] name) \n addPathToName(int type, byte [] name)}.\n <p>\n Note that a deep copy is performed on the <code>Collection</code> to\n protect against subsequent modifications.\n\n @return a <code>Collection</code> of names (or <code>null</code>)\n @see #setPathToNames\n"
20236,method,java/security/cert/X509CertSelector/match/Certificate," Decides whether a <code>Certificate</code> should be selected.\n\n @param cert the <code>Certificate</code> to be checked\n @return <code>true</code> if the <code>Certificate</code> should be\n         selected, <code>false</code> otherwise\n"
20240,method,java/security/cert/X509CRLSelector/setIssuers/Collection," Sets the issuerNames criterion. The issuer distinguished name in the\n <code>X509CRL</code> must match at least one of the specified\n distinguished names. If <code>null</code>, any issuer distinguished name\n will do.\n <p>\n This method allows the caller to specify, with a single method call,\n the complete set of issuer names which <code>X509CRLs</code> may contain.\n The specified value replaces the previous value for the issuerNames\n criterion.\n <p>\n The <code>names</code> parameter (if not <code>null</code>) is a\n <code>Collection</code> of <code>X500Principal</code>s.\n <p>\n Note that the <code>names</code> parameter can contain duplicate\n distinguished names, but they may be removed from the \n <code>Collection</code> of names returned by the\n {@link #getIssuers getIssuers} method.\n <p>\n Note that a copy is performed on the <code>Collection</code> to\n protect against subsequent modifications.\n\n @param issuers a <code>Collection</code> of X500Principals \n   (or <code>null</code>)\n @see #getIssuers\n @since 1.5\n"
20242,method,java/security/cert/X509CRLSelector/addIssuer/X500Principal," Adds a name to the issuerNames criterion. The issuer distinguished\n name in the <code>X509CRL</code> must match at least one of the specified\n distinguished names.\n <p>\n This method allows the caller to add a name to the set of issuer names\n which <code>X509CRLs</code> may contain. The specified name is added to\n any previous value for the issuerNames criterion.\n If the specified name is a duplicate, it may be ignored.\n\n @param issuer the issuer as X500Principal\n @since 1.5\n"
20245,method,java/security/cert/X509CRLSelector/setMinCRLNumber/BigInteger," Sets the minCRLNumber criterion. The <code>X509CRL</code> must have a\n CRL number extension whose value is greater than or equal to the\n specified value. If <code>null</code>, no minCRLNumber check will be \n done.\n\n @param minCRL the minimum CRL number accepted (or <code>null</code>)\n"
20246,method,java/security/cert/X509CRLSelector/setMaxCRLNumber/BigInteger," Sets the maxCRLNumber criterion. The <code>X509CRL</code> must have a\n CRL number extension whose value is less than or equal to the\n specified value. If <code>null</code>, no maxCRLNumber check will be \n done.\n\n @param maxCRL the maximum CRL number accepted (or <code>null</code>)\n"
20247,method,java/security/cert/X509CRLSelector/setDateAndTime/Date," Sets the dateAndTime criterion. The specified date must be\n equal to or later than the value of the thisUpdate component\n of the <code>X509CRL</code> and earlier than the value of the\n nextUpdate component. There is no match if the <code>X509CRL</code>\n does not contain a nextUpdate component.\n If <code>null</code>, no dateAndTime check will be done.\n <p>\n Note that the <code>Date</code> supplied here is cloned to protect \n against subsequent modifications.\n\n @param dateAndTime the <code>Date</code> to match against\n                    (or <code>null</code>)\n @see #getDateAndTime\n"
20248,method,java/security/cert/X509CRLSelector/setCertificateChecking/X509Certificate," Sets the certificate being checked. This is not a criterion. Rather,\n it is optional information that may help a <code>CertStore</code>\n find CRLs that would be relevant when checking revocation for the\n specified certificate. If <code>null</code> is specified, then no\n such optional information is provided.\n\n @param cert the <code>X509Certificate</code> being checked\n             (or <code>null</code>)\n @see #getCertificateChecking\n"
20249,method,java/security/cert/X509CRLSelector/getIssuers/," Returns the issuerNames criterion. The issuer distinguished\n name in the <code>X509CRL</code> must match at least one of the specified\n distinguished names. If the value returned is <code>null</code>, any\n issuer distinguished name will do.\n <p>\n If the value returned is not <code>null</code>, it is a\n unmodifiable <code>Collection</code> of <code>X500Principal</code>s.\n\n @return an unmodifiable <code>Collection</code> of names \n   (or <code>null</code>)\n @see #setIssuers\n @since 1.5\n"
20250,method,java/security/cert/X509CRLSelector/getIssuerNames/," Returns a copy of the issuerNames criterion. The issuer distinguished\n name in the <code>X509CRL</code> must match at least one of the specified\n distinguished names. If the value returned is <code>null</code>, any\n issuer distinguished name will do.\n <p>\n If the value returned is not <code>null</code>, it is a\n <code>Collection</code> of names. Each name is a <code>String</code>\n or a byte array representing a distinguished name (in RFC 2253 or\n ASN.1 DER encoded form, respectively).  Note that the \n <code>Collection</code> returned may contain duplicate names.\n <p>\n If a name is specified as a byte array, it should contain a single DER\n encoded distinguished name, as defined in X.501. The ASN.1 notation for\n this structure is given in the documentation for\n {@link #setIssuerNames setIssuerNames(Collection names)}.\n <p>\n Note that a deep copy is performed on the <code>Collection</code> to\n protect against subsequent modifications.\n\n @return a <code>Collection</code> of names (or <code>null</code>)\n @see #setIssuerNames\n"
20251,method,java/security/cert/X509CRLSelector/getMinCRL/," Returns the minCRLNumber criterion. The <code>X509CRL</code> must have a\n CRL number extension whose value is greater than or equal to the\n specified value. If <code>null</code>, no minCRLNumber check will be done.\n\n @return the minimum CRL number accepted (or <code>null</code>)\n"
20252,method,java/security/cert/X509CRLSelector/getMaxCRL/," Returns the maxCRLNumber criterion. The <code>X509CRL</code> must have a\n CRL number extension whose value is less than or equal to the\n specified value. If <code>null</code>, no maxCRLNumber check will be \n done.\n\n @return the maximum CRL number accepted (or <code>null</code>)\n"
20254,method,java/security/cert/X509CRLSelector/getCertificateChecking/," Returns the certificate being checked. This is not a criterion. Rather,\n it is optional information that may help a <code>CertStore</code>\n find CRLs that would be relevant when checking revocation for the\n specified certificate. If the value returned is <code>null</code>, then \n no such optional information is provided.\n\n @return the certificate being checked (or <code>null</code>)\n @see #setCertificateChecking\n"
20256,method,java/security/cert/X509CRLSelector/match/CRL," Decides whether a <code>CRL</code> should be selected.\n\n @param crl the <code>CRL</code> to be checked\n @return <code>true</code> if the <code>CRL</code> should be selected,\n         <code>false</code> otherwise\n"
20259,class,java/security/cert/X509CRLEntry," <p>Abstract class for a revoked certificate in a CRL (Certificate\n Revocation List).\n\n The ASN.1 definition for <em>revokedCertificates</em> is:\n <pre>\n revokedCertificates    SEQUENCE OF SEQUENCE  {\n     userCertificate    CertificateSerialNumber,\n     revocationDate     ChoiceOfTime,\n     crlEntryExtensions Extensions OPTIONAL\n                        -- if present, must be v2\n }  OPTIONAL\n<p>\n CertificateSerialNumber  ::=  INTEGER\n<p>\n Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\n<p>\n Extension  ::=  SEQUENCE  {\n     extnId        OBJECT IDENTIFIER,\n     critical      BOOLEAN DEFAULT FALSE,\n     extnValue     OCTET STRING\n                   -- contains a DER encoding of a value\n                   -- of the type registered for use with\n                   -- the extnId object identifier value\n }\n </pre>\n\n @see X509CRL\n @see X509Extension\n\n @author Hemma Prafullchandra\n @version 1.18 10/03/23\n"
20262,method,java/security/cert/X509CRLEntry/getEncoded/," Returns the ASN.1 DER-encoded form of this CRL Entry,\n that is the inner SEQUENCE.\n\n @return the encoded form of this certificate\n @exception CRLException if an encoding error occurs.\n"
20269,class,java/security/cert/X509CRL," <p>\n Abstract class for an X.509 Certificate Revocation List (CRL).\n A CRL is a time-stamped list identifying revoked certificates.\n It is signed by a Certificate Authority (CA) and made freely\n available in a public repository.  \n \n <p>Each revoked certificate is\n identified in a CRL by its certificate serial number. When a\n certificate-using system uses a certificate (e.g., for verifying a\n remote user's digital signature), that system not only checks the\n certificate signature and validity but also acquires a suitably-\n recent CRL and checks that the certificate serial number is not on\n that CRL.  The meaning of "suitably-recent" may vary with local\n policy, but it usually means the most recently-issued CRL.  A CA\n issues a new CRL on a regular periodic basis (e.g., hourly, daily, or\n weekly).  Entries are added to CRLs as revocations occur, and an\n entry may be removed when the certificate expiration date is reached.\n <p>\n The X.509 v2 CRL format is described below in ASN.1:\n <pre>\n CertificateList  ::=  SEQUENCE  {\n     tbsCertList          TBSCertList,\n     signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT STRING  }\n </pre>\n <p>\n More information can be found in RFC 2459,\n "Internet X.509 Public Key Infrastructure Certificate and CRL\n Profile" at <A HREF="http://www.ietf.org/rfc/rfc2459.txt">\n http://www.ietf.org/rfc/rfc2459.txt </A>.    \n <p>\n The ASN.1 definition of <code>tbsCertList</code> is:\n <pre>\n TBSCertList  ::=  SEQUENCE  {\n     version                 Version OPTIONAL,\n                             -- if present, must be v2\n     signature               AlgorithmIdentifier,\n     issuer                  Name,\n     thisUpdate              ChoiceOfTime,\n     nextUpdate              ChoiceOfTime OPTIONAL,\n     revokedCertificates     SEQUENCE OF SEQUENCE  {\n         userCertificate         CertificateSerialNumber,\n         revocationDate          ChoiceOfTime,\n         crlEntryExtensions      Extensions OPTIONAL\n                                 -- if present, must be v2\n         }  OPTIONAL,\n     crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\n                                  -- if present, must be v2\n     }\n </pre>\n <p>\n CRLs are instantiated using a certificate factory. The following is an\n example of how to instantiate an X.509 CRL:\n <pre><code> \n InputStream inStream = new FileInputStream("fileName-of-crl");\n CertificateFactory cf = CertificateFactory.getInstance("X.509");\n X509CRL crl = (X509CRL)cf.generateCRL(inStream);\n inStream.close();\n </code></pre>\n\n @author Hemma Prafullchandra\n\n @version 1.31, 03/23/10\n\n @see CRL\n @see CertificateFactory\n @see X509Extension\n"
20272,method,java/security/cert/X509CRL/getEncoded/," Returns the ASN.1 DER-encoded form of this CRL.\n\n @return the encoded form of this certificate\n @exception CRLException if an encoding error occurs.\n"
20273,method,java/security/cert/X509CRL/verify/PublicKey," Verifies that this CRL was signed using the \n private key that corresponds to the given public key.\n\n @param key the PublicKey used to carry out the verification.\n\n @exception NoSuchAlgorithmException on unsupported signature\n algorithms.\n @exception InvalidKeyException on incorrect key.\n @exception NoSuchProviderException if there's no default provider.\n @exception SignatureException on signature errors.\n @exception CRLException on encoding errors.\n"
20274,method,java/security/cert/X509CRL/verify/PublicKey;String," Verifies that this CRL was signed using the \n private key that corresponds to the given public key.\n This method uses the signature verification engine\n supplied by the given provider.\n\n @param key the PublicKey used to carry out the verification.\n @param sigProvider the name of the signature provider.\n \n @exception NoSuchAlgorithmException on unsupported signature\n algorithms.\n @exception InvalidKeyException on incorrect key.\n @exception NoSuchProviderException on incorrect provider.\n @exception SignatureException on signature errors.\n @exception CRLException on encoding errors.\n"
20275,method,java/security/cert/X509CRL/getVersion/," Gets the <code>version</code> (version number) value from the CRL.\n The ASN.1 definition for this is:\n <pre>\n version    Version OPTIONAL,\n             -- if present, must be v2<p>\n Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }\n             -- v3 does not apply to CRLs but appears for consistency\n             -- with definition of Version for certs\n </pre>\n\n @return the version number, i.e. 1 or 2.\n"
20283,method,java/security/cert/X509CRL/getTBSCertList/," Gets the DER-encoded CRL information, the\n <code>tbsCertList</code> from this CRL.\n This can be used to verify the signature independently.\n\n @return the DER-encoded CRL information.\n @exception CRLException if an encoding error occurs.\n"
20294,method,java/security/cert/TrustAnchor/getNameConstraints/," Returns the name constraints parameter. The specified name constraints\n are associated with this trust anchor and are intended to be used \n as additional constraints when validating an X.509 certification path. \n <p>\n The name constraints are returned as a byte array. This byte array\n contains the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 2459\n and X.509. The ASN.1 notation for this structure is supplied in the\n documentation for\n {@link #TrustAnchor(X509Certificate, byte[]) \n TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.\n <p>\n Note that the byte array returned is cloned to protect against\n subsequent modifications.\n\n @return a byte array containing the ASN.1 DER encoding of\n         a NameConstraints extension used for checking name constraints, \n         or <code>null</code> if not set. \n"
20302,method,java/security/cert/PolicyQualifierInfo/getPolicyQualifier/," Returns the ASN.1 DER encoded form of the <code>qualifier</code> \n field of this <code>PolicyQualifierInfo</code>.\n\n @return the ASN.1 DER encoded bytes of the <code>qualifier</code>\n field. Note that a copy is returned, so the data is cloned each \n time this method is called.\n"
20314,method,java/security/cert/PKIXParameters/getTrustAnchors/," Returns an immutable <code>Set</code> of the most-trusted \n CAs.\n\n @return an immutable <code>Set</code> of <code>TrustAnchor</code>s \n (never <code>null</code>)\n\n @see #setTrustAnchors\n"
20315,method,java/security/cert/PKIXParameters/setTrustAnchors/Set," Sets the <code>Set</code> of most-trusted CAs. \n <p>\n Note that the <code>Set</code> is copied to protect against\n subsequent modifications.\n\n @param trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s\n @throws InvalidAlgorithmParameterException if the specified \n <code>Set</code> is empty <code>(trustAnchors.isEmpty() == true)</code>\n @throws NullPointerException if the specified <code>Set</code> is\n <code>null</code>\n @throws ClassCastException if any of the elements in the set\n are not of type <code>java.security.cert.TrustAnchor</code>\n\n @see #getTrustAnchors\n"
20316,method,java/security/cert/PKIXParameters/getInitialPolicies/," Returns an immutable <code>Set</code> of initial\n policy identifiers (OID strings), indicating that any one of these\n policies would be acceptable to the certificate user for the purposes of\n certification path processing. The default return value is an empty \n <code>Set</code>, which is interpreted as meaning that any policy would \n be acceptable.\n\n @return an immutable <code>Set</code> of initial policy OIDs in\n <code>String</code> format, or an empty <code>Set</code> (implying any \n policy is acceptable). Never returns <code>null</code>.\n\n @see #setInitialPolicies\n"
20317,method,java/security/cert/PKIXParameters/setInitialPolicies/Set," Sets the <code>Set</code> of initial policy identifiers \n (OID strings), indicating that any one of these\n policies would be acceptable to the certificate user for the purposes of\n certification path processing. By default, any policy is acceptable \n (i.e. all policies), so a user that wants to allow any policy as\n acceptable does not need to call this method, or can call it\n with an empty <code>Set</code> (or <code>null</code>).\n <p>\n Note that the <code>Set</code> is copied to protect against\n subsequent modifications.\n\n @param initialPolicies a <code>Set</code> of initial policy \n OIDs in <code>String</code> format (or <code>null</code>)\n @throws ClassCastException if any of the elements in the set are\n not of type <code>String</code>\n\n @see #getInitialPolicies\n"
20318,method,java/security/cert/PKIXParameters/setCertStores/List," Sets the list of <code>CertStore</code>s to be used in finding\n certificates and CRLs. May be <code>null</code>, in which case\n no <code>CertStore</code>s will be used. The first\n <code>CertStore</code>s in the list may be preferred to those that\n appear later. \n <p>\n Note that the <code>List</code> is copied to protect against \n subsequent modifications.\n\n @param stores a <code>List</code> of <code>CertStore</code>s (or \n <code>null</code>)\n @throws ClassCastException if any of the elements in the list are\n not of type <code>java.security.cert.CertStore</code>\n\n @see #getCertStores\n"
20320,method,java/security/cert/PKIXParameters/getCertStores/," Returns an immutable <code>List</code> of <code>CertStore</code>s that\n are used to find certificates and CRLs.\n\n @return an immutable <code>List</code> of <code>CertStore</code>s \n (may be empty, but never <code>null</code>)\n\n @see #setCertStores\n"
20321,method,java/security/cert/PKIXParameters/setRevocationEnabled/boolean," Sets the RevocationEnabled flag. If this flag is true, the default\n revocation checking mechanism of the underlying PKIX service provider \n will be used. If this flag is false, the default revocation checking \n mechanism will be disabled (not used). \n <p>\n When a <code>PKIXParameters</code> object is created, this flag is set\n to true. This setting reflects the most common strategy for checking\n revocation, since each service provider must support revocation \n checking to be PKIX compliant. Sophisticated applications should set\n this flag to false when it is not practical to use a PKIX service \n provider's default revocation checking mechanism or when an alternative \n revocation checking mechanism is to be substituted (by also calling the \n {@link #addCertPathChecker addCertPathChecker} or {@link \n #setCertPathCheckers setCertPathCheckers} methods).\n\n @param val the new value of the RevocationEnabled flag\n"
20323,method,java/security/cert/PKIXParameters/setExplicitPolicyRequired/boolean," Sets the ExplicitPolicyRequired flag. If this flag is true, an \n acceptable policy needs to be explicitly identified in every certificate.\n By default, the ExplicitPolicyRequired flag is false.\n\n @param val <code>true</code> if explicit policy is to be required, \n <code>false</code> otherwise\n"
20324,method,java/security/cert/PKIXParameters/isExplicitPolicyRequired/," Checks if explicit policy is required. If this flag is true, an \n acceptable policy needs to be explicitly identified in every certificate.\n By default, the ExplicitPolicyRequired flag is false.\n\n @return <code>true</code> if explicit policy is required, \n <code>false</code> otherwise\n"
20327,method,java/security/cert/PKIXParameters/setAnyPolicyInhibited/boolean," Sets state to determine if the any policy OID should be processed\n if it is included in a certificate. By default, the any policy OID \n is not inhibited ({@link #isAnyPolicyInhibited isAnyPolicyInhibited()} \n returns <code>false</code>).\n\n @param val <code>true</code> if the any policy OID is to be \n inhibited, <code>false</code> otherwise\n"
20328,method,java/security/cert/PKIXParameters/isAnyPolicyInhibited/," Checks whether the any policy OID should be processed if it\n is included in a certificate.\n\n @return <code>true</code> if the any policy OID is inhibited, \n <code>false</code> otherwise\n"
20329,method,java/security/cert/PKIXParameters/setPolicyQualifiersRejected/boolean," Sets the PolicyQualifiersRejected flag. If this flag is true,\n certificates that include policy qualifiers in a certificate\n policies extension that is marked critical are rejected.\n If the flag is false, certificates are not rejected on this basis.\n\n <p> When a <code>PKIXParameters</code> object is created, this flag is \n set to true. This setting reflects the most common (and simplest) \n strategy for processing policy qualifiers. Applications that want to use\n a more sophisticated policy must set this flag to false.\n <p>\n Note that the PKIX certification path validation algorithm specifies\n that any policy qualifier in a certificate policies extension that is \n marked critical must be processed and validated. Otherwise the \n certification path must be rejected. If the policyQualifiersRejected flag\n is set to false, it is up to the application to validate all policy \n qualifiers in this manner in order to be PKIX compliant.\n\n @param qualifiersRejected the new value of the PolicyQualifiersRejected \n flag\n @see #getPolicyQualifiersRejected\n @see PolicyQualifierInfo\n"
20330,method,java/security/cert/PKIXParameters/getPolicyQualifiersRejected/," Gets the PolicyQualifiersRejected flag. If this flag is true,\n certificates that include policy qualifiers in a certificate policies\n extension that is marked critical are rejected.\n If the flag is false, certificates are not rejected on this basis.\n\n <p> When a <code>PKIXParameters</code> object is created, this flag is \n set to true. This setting reflects the most common (and simplest) \n strategy for processing policy qualifiers. Applications that want to use\n a more sophisticated policy must set this flag to false.\n\n @return the current value of the PolicyQualifiersRejected flag\n @see #setPolicyQualifiersRejected\n"
20331,method,java/security/cert/PKIXParameters/getDate/," Returns the time for which the validity of the certification path\n should be determined. If <code>null</code>, the current time is used.\n <p>\n Note that the <code>Date</code> returned is copied to protect against \n subsequent modifications. \n\n @return the <code>Date</code>, or <code>null</code> if not set\n @see #setDate\n"
20334,method,java/security/cert/PKIXParameters/getCertPathCheckers/," Returns the <code>List</code> of certification path checkers. \n The returned <code>List</code> is immutable, and each \n <code>PKIXCertPathChecker</code> in the <code>List</code> is cloned \n to protect against subsequent modifications.\n\n @return an immutable <code>List</code> of \n <code>PKIXCertPathChecker</code>s (may be empty, but not \n <code>null</code>)\n @see #setCertPathCheckers\n"
20335,method,java/security/cert/PKIXParameters/addCertPathChecker/PKIXCertPathChecker," Adds a <code>PKIXCertPathChecker</code> to the list of certification \n path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}\n method for more details.\n <p>\n Note that the <code>PKIXCertPathChecker</code> is cloned to protect\n against subsequent modifications.\n\n @param checker a <code>PKIXCertPathChecker</code> to add to the list of \n checks. If <code>null</code>, the checker is ignored (not added to list).\n"
20338,method,java/security/cert/PKIXParameters/getTargetCertConstraints/," Returns the required constraints on the target certificate. \n The constraints are returned as an instance of <code>CertSelector</code>.\n If <code>null</code>, no constraints are defined.\n\n <p>Note that the <code>CertSelector</code> returned is cloned\n to protect against subsequent modifications.\n\n @return a <code>CertSelector</code> specifying the constraints \n on the target certificate (or <code>null</code>)\n @see #setTargetCertConstraints\n"
20339,method,java/security/cert/PKIXParameters/setTargetCertConstraints/CertSelector," Sets the required constraints on the target certificate.\n The constraints are specified as an instance of \n <code>CertSelector</code>. If <code>null</code>, no constraints are \n defined.\n\n <p>Note that the <code>CertSelector</code> specified is cloned\n to protect against subsequent modifications.\n\n @param selector a <code>CertSelector</code> specifying the constraints \n on the target certificate (or <code>null</code>)\n @see #getTargetCertConstraints\n"
20342,method,java/security/cert/PKIXParameters/PKIXParameters/Set," Creates an instance of <code>PKIXParameters</code> with the specified\n <code>Set</code> of most-trusted CAs. Each element of the \n set is a {@link TrustAnchor TrustAnchor}.\n <p>\n Note that the <code>Set</code> is copied to protect against\n subsequent modifications.\n\n @param trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s\n @throws InvalidAlgorithmParameterException if the specified \n <code>Set</code> is empty <code>(trustAnchors.isEmpty() == true)</code>\n @throws NullPointerException if the specified <code>Set</code> is\n <code>null</code>\n @throws ClassCastException if any of the elements in the <code>Set</code>\n are not of type <code>java.security.cert.TrustAnchor</code>\n"
20343,method,java/security/cert/PKIXParameters/PKIXParameters/KeyStore," Creates an instance of <code>PKIXParameters</code> that \n populates the set of most-trusted CAs from the trusted \n certificate entries contained in the specified <code>KeyStore</code>.\n Only keystore entries that contain trusted <code>X509Certificates</code>\n are considered; all other certificate types are ignored.\n \n @param keystore a <code>KeyStore</code> from which the set of \n most-trusted CAs will be populated\n @throws KeyStoreException if the keystore has not been initialized\n @throws InvalidAlgorithmParameterException if the keystore does\n not contain at least one trusted certificate entry\n @throws NullPointerException if the keystore is <code>null</code>\n"
20345,method,java/security/cert/PKIXCertPathValidatorResult/getTrustAnchor/," Returns the <code>TrustAnchor</code> describing the CA that served\n as a trust anchor for the certification path.\n\n @return the <code>TrustAnchor</code> (never <code>null</code>)\n"
20346,method,java/security/cert/PKIXCertPathValidatorResult/getPolicyTree/," Returns the root node of the valid policy tree resulting from the \n PKIX certification path validation algorithm. The \n <code>PolicyNode</code> object that is returned and any objects that \n it returns through public methods are immutable.\n\n <p>Most applications will not need to examine the valid policy tree.\n They can achieve their policy processing goals by setting the\n policy-related parameters in <code>PKIXParameters</code>. However, more\n sophisticated applications, especially those that process policy\n qualifiers, may need to traverse the valid policy tree using the\n {@link PolicyNode#getParent PolicyNode.getParent} and \n {@link PolicyNode#getChildren PolicyNode.getChildren} methods.\n \n @return the root node of the valid policy tree, or <code>null</code> \n if there are no valid policies\n"
20359,method,java/security/cert/PKIXCertPathBuilderResult/getCertPath/," Returns the built and validated certification path. The \n <code>CertPath</code> object does not include the trust anchor.\n Instead, use the {@link #getTrustAnchor() getTrustAnchor()} method to \n obtain the <code>TrustAnchor</code> that served as the trust anchor\n for the certification path.\n\n @return the built and validated <code>CertPath</code> (never \n <code>null</code>)\n"
20364,method,java/security/cert/PKIXBuilderParameters/getMaxPathLength/," Returns the value of the maximum number of intermediate non-self-issued\n certificates that may exist in a certification path. See\n the {@link #setMaxPathLength} method for more details.\n\n @return the maximum number of non-self-issued intermediate certificates \n  that may exist in a certification path, or -1 if there is no limit\n\n @see #setMaxPathLength\n"
20366,method,java/security/cert/PKIXBuilderParameters/PKIXBuilderParameters/Set;CertSelector," Creates an instance of <code>PKIXBuilderParameters</code> with\n the specified <code>Set</code> of most-trusted CAs. \n Each element of the set is a {@link TrustAnchor TrustAnchor}.\n\n <p>Note that the <code>Set</code> is copied to protect against\n subsequent modifications.\n\n @param trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s\n @param targetConstraints a <code>CertSelector</code> specifying the \n constraints on the target certificate \n @throws InvalidAlgorithmParameterException if <code>trustAnchors</code> \n is empty <code>(trustAnchors.isEmpty() == true)</code>\n @throws NullPointerException if <code>trustAnchors</code> is \n <code>null</code>\n @throws ClassCastException if any of the elements of\n <code>trustAnchors</code> are not of type \n <code>java.security.cert.TrustAnchor</code>\n"
20367,method,java/security/cert/PKIXBuilderParameters/PKIXBuilderParameters/KeyStore;CertSelector," Creates an instance of <code>PKIXBuilderParameters</code> that\n populates the set of most-trusted CAs from the trusted\n certificate entries contained in the specified <code>KeyStore</code>.\n Only keystore entries that contain trusted <code>X509Certificate</code>s\n are considered; all other certificate types are ignored.\n\n @param keystore a <code>KeyStore</code> from which the set of \n most-trusted CAs will be populated\n @param targetConstraints a <code>CertSelector</code> specifying the \n constraints on the target certificate \n @throws KeyStoreException if <code>keystore</code> has not been \n initialized\n @throws InvalidAlgorithmParameterException if <code>keystore</code> does\n not contain at least one trusted certificate entry\n @throws NullPointerException if <code>keystore</code> is \n <code>null</code>\n"
20371,method,java/security/cert/LDAPCertStoreParameters/clone/," Returns a copy of this object. Changes to the copy will not affect\n the original and vice versa.\n <p>\n Note: this method currently performs a shallow copy of the object\n (simply calls <code>Object.clone()</code>). This may be changed in a \n future revision to perform a deep copy if new parameters are added \n that should not be shared.\n\n @return the copy\n"
20377,method,java/security/cert/CollectionCertStoreParameters/getCollection/," Returns the <code>Collection</code> from which <code>Certificate</code>s\n and <code>CRL</code>s are retrieved. This is <b>not</b> a copy of the\n <code>Collection</code>, it is a reference. This allows the caller to\n subsequently add or remove <code>Certificates</code> or\n <code>CRL</code>s from the <code>Collection</code>.\n\n @return the <code>Collection</code> (never null)\n"
20378,method,java/security/cert/CollectionCertStoreParameters/clone/," Returns a copy of this object. Note that only a reference to the\n <code>Collection</code> is copied, and not the contents.\n\n @return the copy\n"
20387,class,java/security/cert/CertificateNotYetValidException," Certificate is not yet valid exception. This is thrown whenever\n the current <code>Date</code> or the specified <code>Date</code>\n is before the <code>notBefore</code> date/time in the Certificate\n validity period.\n\n @author Hemma Prafullchandra\n 1.12\n"
20392,method,java/security/cert/CertificateFactorySpi/engineGenerateCertPath/InputStream," Generates a <code>CertPath</code> object and initializes it with\n the data read from the <code>InputStream</code> inStream. The data\n is assumed to be in the default encoding.\n\n <p> This method was added to version 1.4 of the Java 2 Platform\n Standard Edition. In order to maintain backwards compatibility with\n existing service providers, this method cannot be <code>abstract</code>\n and by default throws an <code>UnsupportedOperationException</code>.\n\n @param inStream an <code>InputStream</code> containing the data\n @return a <code>CertPath</code> initialized with the data from the\n   <code>InputStream</code>\n @exception CertificateException if an exception occurs while decoding\n @exception UnsupportedOperationException if the method is not supported\n @since 1.4\n"
20396,method,java/security/cert/CertificateFactorySpi/engineGenerateCertificates/InputStream," Returns a (possibly empty) collection view of the certificates read\n from the given input stream <code>inStream</code>.\n\n <p>In order to take advantage of the specialized certificate format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n certificate class. For example, if this certificate\n factory implements X.509 certificates, the elements in the returned\n collection can be typecast to the <code>X509Certificate</code> class.\n\n <p>In the case of a certificate factory for X.509 certificates,\n <code>inStream</code> may contain a single DER-encoded certificate\n in the formats described for \n {@link CertificateFactory#generateCertificate(java.io.InputStream) \n generateCertificate}.\n In addition, <code>inStream</code> may contain a PKCS#7 certificate\n chain. This is a PKCS#7 <i>SignedData</i> object, with the only\n significant field being <i>certificates</i>. In particular, the\n signature and the contents are ignored. This format allows multiple\n certificates to be downloaded at once. If no certificates are present,\n an empty collection is returned.\n\n <p>Note that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.\n\n @param inStream the input stream with the certificates.\n\n @return a (possibly empty) collection view of\n java.security.cert.Certificate objects\n initialized with the data from the input stream.\n\n @exception CertificateException on parsing errors.\n"
20397,method,java/security/cert/CertificateFactorySpi/engineGenerateCRL/InputStream," Generates a certificate revocation list (CRL) object and initializes it\n with the data read from the input stream <code>inStream</code>.\n\n <p>In order to take advantage of the specialized CRL format\n supported by this certificate factory,\n the returned CRL object can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the returned CRL object\n can be typecast to the <code>X509CRL</code> class.\n\n <p>Note that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream. Otherwise, each call to this\n method consumes one CRL and the read position of the input stream\n is positioned to the next available byte after the the inherent\n end-of-CRL marker. If the data in the\n input stream does not contain an inherent end-of-CRL marker (other\n than EOF) and there is trailing data after the CRL is parsed, a\n <code>CRLException</code> is thrown.\n\n @param inStream an input stream with the CRL data.\n\n @return a CRL object initialized with the data\n from the input stream.\n\n @exception CRLException on parsing errors.\n"
20398,method,java/security/cert/CertificateFactorySpi/engineGenerateCRLs/InputStream," Returns a (possibly empty) collection view of the CRLs read\n from the given input stream <code>inStream</code>.\n\n <p>In order to take advantage of the specialized CRL format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the elements in the returned\n collection can be typecast to the <code>X509CRL</code> class.\n\n <p>In the case of a certificate factory for X.509 CRLs,\n <code>inStream</code> may contain a single DER-encoded CRL.\n In addition, <code>inStream</code> may contain a PKCS#7 CRL\n set. This is a PKCS#7 <i>SignedData</i> object, with the only\n significant field being <i>crls</i>. In particular, the\n signature and the contents are ignored. This format allows multiple\n CRLs to be downloaded at once. If no CRLs are present,\n an empty collection is returned.\n\n <p>Note that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.\n\n @param inStream the input stream with the CRLs.\n\n @return a (possibly empty) collection view of\n java.security.cert.CRL objects initialized with the data from the input\n stream.\n\n @exception CRLException on parsing errors.\n"
20401,method,java/security/cert/CertificateFactory/getInstance/String," Returns a certificate factory object that implements the\n specified certificate type.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertificateFactory object encapsulating the\n CertificateFactorySpi implementation from the first\n Provider that supports the specified type is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n @param type the name of the requested certificate type.\n See Appendix A in the <a href=\n "../../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a>\n for information about standard certificate types.\n\n @return a certificate factory object for the specified type.\n\n @exception CertificateException if no Provider supports a\n		CertificateFactorySpi implementation for the\n		specified type.\n\n @see java.security.Provider\n"
20403,method,java/security/cert/CertificateFactory/getInstance/String;Provider," Returns a certificate factory object for the specified\n certificate type.\n\n <p> A new CertificateFactory object encapsulating the\n CertificateFactorySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param type the certificate type.\n See Appendix A in the <a href=\n "../../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">\n Java Cryptography Architecture API Specification &amp; Reference </a>\n for information about standard certificate types.\n\n @param provider the provider.\n\n @return a certificate factory object for the specified type.\n\n @exception CertificateException if a CertificateFactorySpi\n		implementation for the specified algorithm is not available\n		from the specified Provider object.\n\n @exception IllegalArgumentException if the <code>provider</code> is\n		null.\n\n @see java.security.Provider\n\n @since 1.4\n"
20408,method,java/security/cert/CertificateFactory/generateCertPath/InputStream," Generates a <code>CertPath</code> object and initializes it with\n the data read from the <code>InputStream</code> inStream. The data\n is assumed to be in the default encoding. The name of the default\n encoding is the first element of the <code>Iterator</code> returned by\n the {@link #getCertPathEncodings getCertPathEncodings} method.\n\n @param inStream an <code>InputStream</code> containing the data\n @return a <code>CertPath</code> initialized with the data from the\n   <code>InputStream</code>\n @exception CertificateException if an exception occurs while decoding\n @since 1.4\n"
20409,method,java/security/cert/CertificateFactory/generateCertPath/InputStream;String," Generates a <code>CertPath</code> object and initializes it with\n the data read from the <code>InputStream</code> inStream. The data\n is assumed to be in the specified encoding. See Appendix A in the \n <a href="../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">\n Java Certification Path API Programmer's Guide</a>\n for information about standard encoding names and their formats.\n\n @param inStream an <code>InputStream</code> containing the data\n @param encoding the encoding used for the data\n @return a <code>CertPath</code> initialized with the data from the\n   <code>InputStream</code>\n @exception CertificateException if an exception occurs while decoding or\n   the encoding requested is not supported\n @since 1.4\n"
20411,method,java/security/cert/CertificateFactory/generateCertificates/InputStream," Returns a (possibly empty) collection view of the certificates read\n from the given input stream <code>inStream</code>.\n\n <p>In order to take advantage of the specialized certificate format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n certificate class. For example, if this certificate\n factory implements X.509 certificates, the elements in the returned\n collection can be typecast to the <code>X509Certificate</code> class.\n\n <p>In the case of a certificate factory for X.509 certificates,\n <code>inStream</code> may contain a sequence of DER-encoded certificates\n in the formats described for\n {@link #generateCertificate(java.io.InputStream) generateCertificate}.\n In addition, <code>inStream</code> may contain a PKCS#7 certificate\n chain. This is a PKCS#7 <i>SignedData</i> object, with the only\n significant field being <i>certificates</i>. In particular, the\n signature and the contents are ignored. This format allows multiple\n certificates to be downloaded at once. If no certificates are present,\n an empty collection is returned.\n\n <p>Note that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.\n\n @param inStream the input stream with the certificates.\n\n @return a (possibly empty) collection view of\n java.security.cert.Certificate objects\n initialized with the data from the input stream.\n\n @exception CertificateException on parsing errors.\n"
20412,method,java/security/cert/CertificateFactory/generateCRL/InputStream," Generates a certificate revocation list (CRL) object and initializes it\n with the data read from the input stream <code>inStream</code>.\n\n <p>In order to take advantage of the specialized CRL format\n supported by this certificate factory,\n the returned CRL object can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the returned CRL object\n can be typecast to the <code>X509CRL</code> class.\n\n <p>Note that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream. Otherwise, each call to this \n method consumes one CRL and the read position of the input stream\n is positioned to the next available byte after the the inherent \n end-of-CRL marker. If the data in the\n input stream does not contain an inherent end-of-CRL marker (other\n than EOF) and there is trailing data after the CRL is parsed, a \n <code>CRLException</code> is thrown.\n\n @param inStream an input stream with the CRL data.\n\n @return a CRL object initialized with the data\n from the input stream.\n\n @exception CRLException on parsing errors.\n"
20413,method,java/security/cert/CertificateFactory/generateCRLs/InputStream," Returns a (possibly empty) collection view of the CRLs read\n from the given input stream <code>inStream</code>.\n\n <p>In order to take advantage of the specialized CRL format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the elements in the returned\n collection can be typecast to the <code>X509CRL</code> class.\n\n <p>In the case of a certificate factory for X.509 CRLs,\n <code>inStream</code> may contain a sequence of DER-encoded CRLs.\n In addition, <code>inStream</code> may contain a PKCS#7 CRL\n set. This is a PKCS#7 <i>SignedData</i> object, with the only\n significant field being <i>crls</i>. In particular, the\n signature and the contents are ignored. This format allows multiple\n CRLs to be downloaded at once. If no CRLs are present,\n an empty collection is returned.\n\n <p>Note that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.\n\n @param inStream the input stream with the CRLs.\n\n @return a (possibly empty) collection view of\n java.security.cert.CRL objects initialized with the data from the input\n stream.\n\n @exception CRLException on parsing errors.\n"
20415,class,java/security/cert/CertificateExpiredException," Certificate Expired Exception. This is thrown whenever the current\n <code>Date</code> or the specified <code>Date</code> is after the\n <code>notAfter</code> date/time specified in the validity period\n of the certificate.\n\n @author Hemma Prafullchandra\n 1.12\n"
20423,class,java/security/cert/CertificateEncodingException," Certificate Encoding Exception. This is thrown whenever an error\n occurs while attempting to encode a certificate.\n\n @author Hemma Prafullchandra\n 1.14\n"
20428,class,java/security/cert/Certificate," <p>Abstract class for managing a variety of identity certificates.\n An identity certificate is a binding of a principal to a public key which\n is vouched for by another principal.  (A principal represents\n an entity such as an individual user, a group, or a corporation.)\n<p>\n This class is an abstraction for certificates that have different\n formats but important common uses.  For example, different types of\n certificates, such as X.509 and PGP, share general certificate\n functionality (like encoding and verifying) and\n some types of information (like a public key).\n <p>\n X.509, PGP, and SDSI certificates can all be implemented by\n subclassing the Certificate class, even though they contain different\n sets of information, and they store and retrieve the information in\n different ways.\n\n @see X509Certificate\n @see CertificateFactory\n\n @author Hemma Prafullchandra\n @version 1.28, 03/23/10\n"
20432,method,java/security/cert/Certificate/getEncoded/," Returns the encoded form of this certificate. It is\n assumed that each certificate type would have only a single\n form of encoding; for example, X.509 certificates would\n be encoded as ASN.1 DER.\n\n @return the encoded form of this certificate\n\n @exception CertificateEncodingException if an encoding error occurs.\n"
20433,method,java/security/cert/Certificate/verify/PublicKey," Verifies that this certificate was signed using the\n private key that corresponds to the specified public key.\n\n @param key the PublicKey used to carry out the verification.\n\n @exception NoSuchAlgorithmException on unsupported signature\n algorithms.\n @exception InvalidKeyException on incorrect key.\n @exception NoSuchProviderException if there's no default provider.\n @exception SignatureException on signature errors.\n @exception CertificateException on encoding errors.\n"
20434,method,java/security/cert/Certificate/verify/PublicKey;String," Verifies that this certificate was signed using the\n private key that corresponds to the specified public key.\n This method uses the signature verification engine\n supplied by the specified provider.\n\n @param key the PublicKey used to carry out the verification.\n @param sigProvider the name of the signature provider.\n\n @exception NoSuchAlgorithmException on unsupported signature\n algorithms.\n @exception InvalidKeyException on incorrect key.\n @exception NoSuchProviderException on incorrect provider.\n @exception SignatureException on signature errors.\n @exception CertificateException on encoding errors.\n"
20445,method,java/security/cert/CertStoreSpi/CertStoreSpi/CertStoreParameters," The sole constructor.\n\n @param params the initialization parameters (may be <code>null</code>)\n @throws InvalidAlgorithmParameterException if the initialization\n parameters are inappropriate for this <code>CertStoreSpi</code>\n"
20446,interface,java/security/cert/CertStoreParameters," A specification of <code>CertStore</code> parameters.\n <p>\n The purpose of this interface is to group (and provide type safety for) \n all <code>CertStore</code> parameter specifications. All \n <code>CertStore</code> parameter specifications must implement this \n interface.  \n <p>\n Typically, a <code>CertStoreParameters</code> object is passed as a parameter\n to one of the {@link CertStore#getInstance CertStore.getInstance} methods. \n The <code>getInstance</code> method returns a <code>CertStore</code> that\n is used for retrieving <code>Certificate</code>s and <code>CRL</code>s. The \n <code>CertStore</code> that is returned is initialized with the specified \n parameters. The type of parameters needed may vary between different types \n of <code>CertStore</code>s.\n\n @see CertStore#getInstance\n\n @version 	1.7 03/23/10\n @since	1.4\n @author	Steve Hanna\n"
20451,method,java/security/cert/CertStoreException/CertStoreException/Throwable," Creates a <code>CertStoreException</code> that wraps the specified\n throwable. This allows any exception to be converted into a\n <code>CertStoreException</code>, while retaining information about the\n cause, which may be useful for debugging. The detail message is\n set to (<code>cause==null ? null : cause.toString()</code>) (which \n typically contains the class and detail message of cause).\n\n @param cause the cause (which is saved for later retrieval by the \n {@link #getCause getCause()} method). (A <code>null</code> value is \n permitted, and indicates that the cause is nonexistent or unknown.)\n"
20456,method,java/security/cert/CertStore/getInstance/String;CertStoreParameters," Returns a <code>CertStore</code> object that implements the specified\n <code>CertStore</code> type and is initialized with the specified\n parameters.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertStore object encapsulating the\n CertStoreSpi implementation from the first\n Provider that supports the specified type is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n <p>The <code>CertStore</code> that is returned is initialized with the \n specified <code>CertStoreParameters</code>. The type of parameters \n needed may vary between different types of <code>CertStore</code>s.\n Note that the specified <code>CertStoreParameters</code> object is \n cloned.\n \n @param type the name of the requested <code>CertStore</code> type.\n  See Appendix A in the <a href=\n  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">\n  Java Certification Path API Programmer's Guide </a>\n  for information about standard types.\n\n @param params the initialization parameters (may be <code>null</code>).\n\n @return a <code>CertStore</code> object that implements the specified\n		<code>CertStore</code> type.\n\n @throws NoSuchAlgorithmException if no Provider supports a\n		CertStoreSpi implementation for the specified type.\n\n @throws InvalidAlgorithmParameterException if the specified\n		initialization parameters are inappropriate for this\n		<code>CertStore</code>.\n\n @see java.security.Provider\n"
20458,method,java/security/cert/CertStore/getInstance/String;CertStoreParameters;Provider," Returns a <code>CertStore</code> object that implements the specified\n <code>CertStore</code> type.\n\n <p> A new CertStore object encapsulating the\n CertStoreSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n <p>The <code>CertStore</code> that is returned is initialized with the \n specified <code>CertStoreParameters</code>. The type of parameters \n needed may vary between different types of <code>CertStore</code>s.\n Note that the specified <code>CertStoreParameters</code> object is \n cloned.\n\n @param type the requested <code>CertStore</code> type.\n  See Appendix A in the <a href=\n  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">\n  Java Certification Path API Programmer's Guide </a>\n  for information about standard types.\n\n @param params the initialization parameters (may be <code>null</code>).\n\n @param provider the provider.\n\n @return a <code>CertStore</code> object that implements the\n		specified type.\n\n @exception NoSuchAlgorithmException if a CertStoreSpi\n		implementation for the specified type is not available\n		from the specified Provider object.\n\n @throws InvalidAlgorithmParameterException if the specified\n		initialization parameters are inappropriate for this \n		<code>CertStore</code>\n\n @exception IllegalArgumentException if the <code>provider</code> is\n		null.\n\n @see java.security.Provider\n"
20459,method,java/security/cert/CertStore/getCertStoreParameters/," Returns the parameters used to initialize this <code>CertStore</code>.\n Note that the <code>CertStoreParameters</code> object is cloned before \n it is returned.\n\n @return the parameters used to initialize this <code>CertStore</code>\n (may be <code>null</code>)\n"
20462,method,java/security/cert/CertStore/getDefaultType/," Returns the default <code>CertStore</code> type as specified in the \n Java security properties file, or the string &quot;LDAP&quot; if no \n such property exists. The Java security properties file is located in \n the file named &lt;JAVA_HOME&gt;/lib/security/java.security.\n &lt;JAVA_HOME&gt; refers to the value of the java.home system property,\n and specifies the directory where the JRE is installed.\n\n <p>The default <code>CertStore</code> type can be used by applications \n that do not want to use a hard-coded type when calling one of the\n <code>getInstance</code> methods, and want to provide a default \n <code>CertStore</code> type in case a user does not specify its own.\n\n <p>The default <code>CertStore</code> type can be changed by setting \n the value of the "certstore.type" security property (in the Java \n security properties file) to the desired type.\n\n @return the default <code>CertStore</code> type as specified in the\n Java security properties file, or the string &quot;LDAP&quot;\n if no such property exists.\n"
20463,method,java/security/cert/CertStore/CertStore/CertStoreSpi;Provider;String;CertStoreParameters," Creates a <code>CertStore</code> object of the given type, and\n encapsulates the given provider implementation (SPI object) in it.\n\n @param storeSpi the provider implementation\n @param provider the provider\n @param type the type\n @param params the initialization parameters (may be <code>null</code>)\n"
20465,method,java/security/cert/CertSelector/match/Certificate," Decides whether a <code>Certificate</code> should be selected.\n\n @param	cert	the <code>Certificate</code> to be checked\n @return	<code>true</code> if the <code>Certificate</code> \n should be selected, <code>false</code> otherwise\n"
20474,method,java/security/cert/CertPathValidatorException/getIndex/," Returns the index of the certificate in the certification path \n that caused the exception to be thrown. Note that the list of\n certificates in a <code>CertPath</code> is zero based. If no \n index has been set, -1 is returned.\n\n @return the index that has been set, or -1 if none has been set\n"
20477,method,java/security/cert/CertPathValidatorException/CertPathValidatorException/Throwable," Creates a <code>CertPathValidatorException</code> that wraps the \n specified throwable. This allows any exception to be converted into a \n <code>CertPathValidatorException</code>, while retaining information \n about the wrapped exception, which may be useful for debugging. The \n detail message is set to (<code>cause==null ? null : cause.toString()\n </code>) (which typically contains the class and detail message of \n cause).\n\n @param cause the cause (which is saved for later retrieval by the \n {@link #getCause getCause()} method). (A <code>null</code> value is \n permitted, and indicates that the cause is nonexistent or unknown.)\n"
20479,method,java/security/cert/CertPathValidatorException/CertPathValidatorException/String;Throwable;CertPath;int," Creates a <code>CertPathValidatorException</code> with the specified\n detail message, cause, certification path, and index.\n\n @param msg the detail message (or <code>null</code> if none)\n @param cause the cause (or <code>null</code> if none)\n @param certPath the certification path that was in the process of\n being validated when the error was encountered\n @param index the index of the certificate in the certification path\n that caused the error (or -1 if not applicable). Note that \n the list of certificates in a <code>CertPath</code> is zero based.\n @throws IndexOutOfBoundsException if the index is out of range\n <code>(index < -1 || (certPath != null && index >=\n certPath.getCertificates().size())</code>\n @throws IllegalArgumentException if <code>certPath</code> is \n <code>null</code> and <code>index</code> is not -1\n"
20481,method,java/security/cert/CertPathValidator/getInstance/String," Returns a <code>CertPathValidator</code> object that implements the \n specified algorithm.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertPathValidator object encapsulating the\n CertPathValidatorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n \n @param algorithm the name of the requested <code>CertPathValidator</code>\n  algorithm.  See Appendix A in the <a href=\n  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">\n  Java Certification Path API Programmer's Guide </a>\n  for information about standard algorithm names.\n\n @return a <code>CertPathValidator</code> object that implements the\n		specified algorithm.\n\n @exception NoSuchAlgorithmException if no Provider supports a\n		CertPathValidatorSpi implementation for the\n		specified algorithm.\n\n @see java.security.Provider\n"
20483,method,java/security/cert/CertPathValidator/getInstance/String;Provider," Returns a <code>CertPathValidator</code> object that implements the\n specified algorithm.\n\n <p> A new CertPathValidator object encapsulating the\n CertPathValidatorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param algorithm the name of the requested\n  <code>CertPathValidator</code> algorithm.\n  See Appendix A in the <a href=\n  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">\n  Java Certification Path API Programmer's Guide </a>\n  for information about standard algorithm names.\n\n @param provider the provider.\n\n @return a <code>CertPathValidator</code> object that implements the\n		specified algorithm.\n\n @exception NoSuchAlgorithmException if a CertPathValidatorSpi\n		implementation for the specified algorithm is not available\n		from the specified Provider object.\n\n @exception IllegalArgumentException if the <code>provider</code> is\n		null.\n\n @see java.security.Provider\n"
20489,interface,java/security/cert/CertPathParameters," A specification of certification path algorithm parameters.\n The purpose of this interface is to group (and provide type safety for) \n all <code>CertPath</code> parameter specifications. All \n <code>CertPath</code> parameter specifications must implement this \n interface.  \n\n @version 	1.7 03/23/10\n @author	Yassir Elley\n @see 	CertPathValidator#validate(CertPath, CertPathParameters)\n @see 	CertPathBuilder#build(CertPathParameters)\n @since	1.4\n"
20495,method,java/security/cert/CertPathBuilderResult/getCertPath/," Returns the built certification path.\n\n @return the certification path (never <code>null</code>)\n"
20500,method,java/security/cert/CertPathBuilderException/CertPathBuilderException/Throwable," Creates a <code>CertPathBuilderException</code> that wraps the specified\n throwable. This allows any exception to be converted into a \n <code>CertPathBuilderException</code>, while retaining information \n about the wrapped exception, which may be useful for debugging. The \n detail message is set to (<code>cause==null ? null : cause.toString()\n </code>) (which typically contains the class and detail message of \n cause).\n\n @param cause the cause (which is saved for later retrieval by the \n {@link #getCause getCause()} method). (A <code>null</code> value is \n permitted, and indicates that the cause is nonexistent or unknown.)\n"
20503,method,java/security/cert/CertPathBuilder/getInstance/String," Returns a <code>CertPathBuilder</code> object that implements the\n specified algorithm.\n\n <p> This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertPathBuilder object encapsulating the\n CertPathBuilderSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n <p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n \n @param algorithm the name of the requested <code>CertPathBuilder</code> \n  algorithm.  See Appendix A in the <a href=\n  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">\n  Java Certification Path API Programmer's Guide </a>\n  for information about standard algorithm names.\n\n @return a <code>CertPathBuilder</code> object that implements the\n		specified algorithm.\n\n @throws NoSuchAlgorithmException if no Provider supports a\n          CertPathBuilderSpi implementation for the\n          specified algorithm.\n\n @see java.security.Provider\n"
20505,method,java/security/cert/CertPathBuilder/getInstance/String;Provider," Returns a <code>CertPathBuilder</code> object that implements the\n specified algorithm.\n\n <p> A new CertPathBuilder object encapsulating the\n CertPathBuilderSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n @param algorithm the name of the requested <code>CertPathBuilder</code> \n  algorithm.  See Appendix A in the <a href=\n  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">\n  Java Certification Path API Programmer's Guide </a>\n  for information about standard algorithm names.\n\n @param provider the provider.\n\n @return a <code>CertPathBuilder</code> object that implements the \n		specified algorithm.\n\n @exception NoSuchAlgorithmException if a CertPathBuilderSpi\n		implementation for the specified algorithm is not available\n		from the specified Provider object.\n\n @exception IllegalArgumentException if the <code>provider</code> is\n		null.\n\n @see java.security.Provider\n"
20515,method,java/security/cert/CertPath/hashCode/," Returns the hashcode for this certification path. The hash code of\n a certification path is defined to be the result of the following\n calculation:\n <pre><code>\n  hashCode = path.getType().hashCode();\n  hashCode = 31*hashCode + path.getCertificates().hashCode();\n </code></pre>\n This ensures that <code>path1.equals(path2)</code> implies that\n <code>path1.hashCode()==path2.hashCode()</code> for any two certification\n paths, <code>path1</code> and <code>path2</code>, as required by the\n general contract of <code>Object.hashCode</code>.\n\n @return the hashcode value for this certification path\n"
20516,method,java/security/cert/CertPath/toString/," Returns a string representation of this certification path.\n This calls the <code>toString</code> method on each of the\n <code>Certificate</code>s in the path.\n\n @return a string representation of this certification path\n"
20517,method,java/security/cert/CertPath/getEncoded/," Returns the encoded form of this certification path, using the default\n encoding.\n\n @return the encoded bytes\n @exception CertificateEncodingException if an encoding error occurs\n"
20518,method,java/security/cert/CertPath/getEncoded/String," Returns the encoded form of this certification path, using the\n specified encoding.\n\n @param encoding the name of the encoding to use\n @return the encoded bytes\n @exception CertificateEncodingException if an encoding error occurs or\n   the encoding requested is not supported\n"
20526,method,java/security/cert/CRLSelector/match/CRL," Decides whether a <code>CRL</code> should be selected.\n\n @param	crl     the <code>CRL</code> to be checked\n @return	<code>true</code> if the <code>CRL</code> should be selected, \n <code>false</code> otherwise\n"
20533,class,java/security/cert/CRL," This class is an abstraction of certificate revocation lists (CRLs) that\n have different formats but important common uses. For example, all CRLs\n share the functionality of listing revoked certificates, and can be queried\n on whether or not they list a given certificate.\n <p>\n Specialized CRL types can be defined by subclassing off of this abstract\n class.\n\n @author Hemma Prafullchandra\n\n @version 1.15, 03/23/10\n\n @see X509CRL\n @see CertificateFactory\n\n @since 1.2\n"
20545,class,java/security/acl/NotOwnerException," This is an exception that is thrown whenever the modification of an object  \n (such as an Access Control List) is only allowed to be done by an owner of\n the object, but the Principal attempting the modification is not an owner.  \n\n @author 	Satish Dharmaraj\n"
20549,interface,java/security/acl/Group," This interface is used to represent a group of principals. (A principal\n represents an entity such as an individual user or a company). <p>     \n\n Note that Group extends Principal. Thus, either a Principal or a Group can \n be passed as an argument to methods containing a Principal parameter. For \n example, you can add either a Principal or a Group to a Group object by \n calling the object's <code>addMember</code> method, passing it the \n Principal or Group.\n\n @author 	Satish Dharmaraj\n"
20553,method,java/security/acl/Group/members/," Returns an enumeration of the members in the group.\n The returned objects can be instances of either Principal \n or Group (which is a subclass of Principal).\n \n @return an enumeration of the group members.\n"
20556,interface,java/security/acl/AclEntry," This is the interface used for representing one entry in an Access\n Control List (ACL).<p>\n\n An ACL can be thought of as a data structure with multiple ACL entry\n objects. Each ACL entry object contains a set of permissions associated\n with a particular principal. (A principal represents an entity such as\n an individual user or a group). Additionally, each ACL entry is specified\n as being either positive or negative. If positive, the permissions are\n to be granted to the associated principal. If negative, the permissions\n are to be denied. Each principal can have at most one positive ACL entry\n and one negative entry; that is, multiple positive or negative ACL\n entries are not allowed for any principal.\n\n Note: ACL entries are by default positive. An entry becomes a\n negative entry only if the\n {@link #setNegativePermissions() setNegativePermissions}\n method is called on it.\n\n @see java.security.acl.Acl\n\n @author 	Satish Dharmaraj\n"
20559,method,java/security/acl/AclEntry/setNegativePermissions/," Sets this ACL entry to be a negative one. That is, the associated\n principal (e.g., a user or a group) will be denied the permission set\n specified in the entry.\n\n Note: ACL entries are by default positive. An entry becomes a\n negative entry only if this <code>setNegativePermissions</code>\n method is called on it.\n"
20561,method,java/security/acl/AclEntry/addPermission/Permission," Adds the specified permission to this ACL entry. Note: An entry can\n have multiple permissions.\n\n @param permission the permission to be associated with\n the principal in this entry.\n\n @return true if the permission was added, false if the\n permission was already part of this entry's permission set.\n"
20572,method,java/security/acl/Acl/getPermissions/Principal," Returns an enumeration for the set of allowed permissions for the \n specified principal (representing an entity such as an individual or \n a group). This set of allowed permissions is calculated as\n follows:<p>\n\n <ul>\n  \n <li>If there is no entry in this Access Control List for the \n specified principal, an empty permission set is returned.<p>\n \n <li>Otherwise, the principal's group permission sets are determined.\n (A principal can belong to one or more groups, where a group is a \n group of principals, represented by the Group interface.)\n The group positive permission set is the union of all \n the positive permissions of each group that the principal belongs to.\n The group negative permission set is the union of all \n the negative permissions of each group that the principal belongs to.\n If there is a specific permission that occurs in both \n the positive permission set and the negative permission set, \n it is removed from both.<p>\n\n The individual positive and negative permission sets are also \n determined. The positive permission set contains the permissions \n specified in the positive ACL entry (if any) for the principal. \n Similarly, the negative permission set contains the permissions\n specified in the negative ACL entry (if any) for the principal. \n The individual positive (or negative) permission set is considered \n to be null if there is not a positive (negative) ACL entry for the\n principal in this ACL.<p>\n\n The set of permissions granted to the principal is then calculated \n using the simple rule that individual permissions always override \n the group permissions. That is, the principal's individual negative\n permission set (specific denial of permissions) overrides the group \n positive permission set, and the principal's individual positive \n permission set overrides the group negative permission set. \n \n </ul>\n\n @param user the principal whose permission set is to be returned.\n \n @return the permission set specifying the permissions the principal \n is allowed. \n"
